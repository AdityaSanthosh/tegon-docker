var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf, __hasOwnProp = Object.prototype.hasOwnProperty;
var __esm = (fn, res) => function() {
  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
};
var __commonJS = (cb, mod) => function() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: !0 });
}, __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
}, __reExport = (target, mod, secondTarget) => (__copyProps(target, mod, "default"), secondTarget && __copyProps(secondTarget, mod, "default")), __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: !0 }) : target,
  mod
)), __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: !0 }), mod);
var __accessCheck = (obj, member, msg) => {
  if (!member.has(obj))
    throw TypeError("Cannot " + msg);
};
var __privateAdd = (obj, member, value) => {
  if (member.has(obj))
    throw TypeError("Cannot add the same private member more than once");
  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
};
var __privateMethod = (obj, member, method) => (__accessCheck(obj, member, "access private method"), method);

// ../../node_modules/.pnpm/superjson@2.2.1/node_modules/superjson/dist/double-indexed-kv.js
var DoubleIndexedKV, init_double_indexed_kv = __esm({
  "../../node_modules/.pnpm/superjson@2.2.1/node_modules/superjson/dist/double-indexed-kv.js"() {
    DoubleIndexedKV = class {
      constructor() {
        this.keyToValue = /* @__PURE__ */ new Map(), this.valueToKey = /* @__PURE__ */ new Map();
      }
      set(key, value) {
        this.keyToValue.set(key, value), this.valueToKey.set(value, key);
      }
      getByKey(key) {
        return this.keyToValue.get(key);
      }
      getByValue(value) {
        return this.valueToKey.get(value);
      }
      clear() {
        this.keyToValue.clear(), this.valueToKey.clear();
      }
    };
  }
});

// ../../node_modules/.pnpm/superjson@2.2.1/node_modules/superjson/dist/registry.js
var Registry, init_registry = __esm({
  "../../node_modules/.pnpm/superjson@2.2.1/node_modules/superjson/dist/registry.js"() {
    init_double_indexed_kv();
    Registry = class {
      constructor(generateIdentifier) {
        this.generateIdentifier = generateIdentifier, this.kv = new DoubleIndexedKV();
      }
      register(value, identifier) {
        this.kv.getByValue(value) || (identifier || (identifier = this.generateIdentifier(value)), this.kv.set(identifier, value));
      }
      clear() {
        this.kv.clear();
      }
      getIdentifier(value) {
        return this.kv.getByValue(value);
      }
      getValue(identifier) {
        return this.kv.getByKey(identifier);
      }
    };
  }
});

// ../../node_modules/.pnpm/superjson@2.2.1/node_modules/superjson/dist/class-registry.js
var ClassRegistry, init_class_registry = __esm({
  "../../node_modules/.pnpm/superjson@2.2.1/node_modules/superjson/dist/class-registry.js"() {
    init_registry();
    ClassRegistry = class extends Registry {
      constructor() {
        super((c) => c.name), this.classToAllowedProps = /* @__PURE__ */ new Map();
      }
      register(value, options2) {
        typeof options2 == "object" ? (options2.allowProps && this.classToAllowedProps.set(value, options2.allowProps), super.register(value, options2.identifier)) : super.register(value, options2);
      }
      getAllowedProps(value) {
        return this.classToAllowedProps.get(value);
      }
    };
  }
});

// ../../node_modules/.pnpm/superjson@2.2.1/node_modules/superjson/dist/util.js
function valuesOfObj(record) {
  if ("values" in Object)
    return Object.values(record);
  let values = [];
  for (let key in record)
    record.hasOwnProperty(key) && values.push(record[key]);
  return values;
}
function find(record, predicate) {
  let values = valuesOfObj(record);
  if ("find" in values)
    return values.find(predicate);
  let valuesNotNever = values;
  for (let i = 0; i < valuesNotNever.length; i++) {
    let value = valuesNotNever[i];
    if (predicate(value))
      return value;
  }
}
function forEach(record, run) {
  Object.entries(record).forEach(([key, value]) => run(value, key));
}
function includes(arr, value) {
  return arr.indexOf(value) !== -1;
}
function findArr(record, predicate) {
  for (let i = 0; i < record.length; i++) {
    let value = record[i];
    if (predicate(value))
      return value;
  }
}
var init_util = __esm({
  "../../node_modules/.pnpm/superjson@2.2.1/node_modules/superjson/dist/util.js"() {
  }
});

// ../../node_modules/.pnpm/superjson@2.2.1/node_modules/superjson/dist/custom-transformer-registry.js
var CustomTransformerRegistry, init_custom_transformer_registry = __esm({
  "../../node_modules/.pnpm/superjson@2.2.1/node_modules/superjson/dist/custom-transformer-registry.js"() {
    init_util();
    CustomTransformerRegistry = class {
      constructor() {
        this.transfomers = {};
      }
      register(transformer) {
        this.transfomers[transformer.name] = transformer;
      }
      findApplicable(v) {
        return find(this.transfomers, (transformer) => transformer.isApplicable(v));
      }
      findByName(name) {
        return this.transfomers[name];
      }
    };
  }
});

// ../../node_modules/.pnpm/superjson@2.2.1/node_modules/superjson/dist/is.js
var getType, isUndefined, isNull, isPlainObject, isEmptyObject, isArray, isString, isNumber, isBoolean, isRegExp, isMap, isSet, isSymbol, isDate, isError, isNaNValue, isPrimitive, isBigint, isInfinite, isTypedArray, isURL, init_is = __esm({
  "../../node_modules/.pnpm/superjson@2.2.1/node_modules/superjson/dist/is.js"() {
    getType = (payload) => Object.prototype.toString.call(payload).slice(8, -1), isUndefined = (payload) => typeof payload > "u", isNull = (payload) => payload === null, isPlainObject = (payload) => typeof payload != "object" || payload === null || payload === Object.prototype ? !1 : Object.getPrototypeOf(payload) === null ? !0 : Object.getPrototypeOf(payload) === Object.prototype, isEmptyObject = (payload) => isPlainObject(payload) && Object.keys(payload).length === 0, isArray = (payload) => Array.isArray(payload), isString = (payload) => typeof payload == "string", isNumber = (payload) => typeof payload == "number" && !isNaN(payload), isBoolean = (payload) => typeof payload == "boolean", isRegExp = (payload) => payload instanceof RegExp, isMap = (payload) => payload instanceof Map, isSet = (payload) => payload instanceof Set, isSymbol = (payload) => getType(payload) === "Symbol", isDate = (payload) => payload instanceof Date && !isNaN(payload.valueOf()), isError = (payload) => payload instanceof Error, isNaNValue = (payload) => typeof payload == "number" && isNaN(payload), isPrimitive = (payload) => isBoolean(payload) || isNull(payload) || isUndefined(payload) || isNumber(payload) || isString(payload) || isSymbol(payload), isBigint = (payload) => typeof payload == "bigint", isInfinite = (payload) => payload === 1 / 0 || payload === -1 / 0, isTypedArray = (payload) => ArrayBuffer.isView(payload) && !(payload instanceof DataView), isURL = (payload) => payload instanceof URL;
  }
});

// ../../node_modules/.pnpm/superjson@2.2.1/node_modules/superjson/dist/pathstringifier.js
var escapeKey, stringifyPath, parsePath, init_pathstringifier = __esm({
  "../../node_modules/.pnpm/superjson@2.2.1/node_modules/superjson/dist/pathstringifier.js"() {
    escapeKey = (key) => key.replace(/\./g, "\\."), stringifyPath = (path2) => path2.map(String).map(escapeKey).join("."), parsePath = (string) => {
      let result = [], segment = "";
      for (let i = 0; i < string.length; i++) {
        let char = string.charAt(i);
        if (char === "\\" && string.charAt(i + 1) === ".") {
          segment += ".", i++;
          continue;
        }
        if (char === ".") {
          result.push(segment), segment = "";
          continue;
        }
        segment += char;
      }
      let lastSegment = segment;
      return result.push(lastSegment), result;
    };
  }
});

// ../../node_modules/.pnpm/superjson@2.2.1/node_modules/superjson/dist/transformer.js
function simpleTransformation(isApplicable, annotation, transform, untransform) {
  return {
    isApplicable,
    annotation,
    transform,
    untransform
  };
}
function compositeTransformation(isApplicable, annotation, transform, untransform) {
  return {
    isApplicable,
    annotation,
    transform,
    untransform
  };
}
function isInstanceOfRegisteredClass(potentialClass, superJson) {
  return potentialClass?.constructor ? !!superJson.classRegistry.getIdentifier(potentialClass.constructor) : !1;
}
var simpleRules, symbolRule, constructorToName, typedArrayRule, classRule, customRule, compositeRules, transformValue, simpleRulesByAnnotation, untransformValue, init_transformer = __esm({
  "../../node_modules/.pnpm/superjson@2.2.1/node_modules/superjson/dist/transformer.js"() {
    init_is();
    init_util();
    simpleRules = [
      simpleTransformation(isUndefined, "undefined", () => null, () => {
      }),
      simpleTransformation(isBigint, "bigint", (v) => v.toString(), (v) => typeof BigInt < "u" ? BigInt(v) : (console.error("Please add a BigInt polyfill."), v)),
      simpleTransformation(isDate, "Date", (v) => v.toISOString(), (v) => new Date(v)),
      simpleTransformation(isError, "Error", (v, superJson) => {
        let baseError = {
          name: v.name,
          message: v.message
        };
        return superJson.allowedErrorProps.forEach((prop) => {
          baseError[prop] = v[prop];
        }), baseError;
      }, (v, superJson) => {
        let e = new Error(v.message);
        return e.name = v.name, e.stack = v.stack, superJson.allowedErrorProps.forEach((prop) => {
          e[prop] = v[prop];
        }), e;
      }),
      simpleTransformation(isRegExp, "regexp", (v) => "" + v, (regex) => {
        let body = regex.slice(1, regex.lastIndexOf("/")), flags = regex.slice(regex.lastIndexOf("/") + 1);
        return new RegExp(body, flags);
      }),
      simpleTransformation(
        isSet,
        "set",
        // (sets only exist in es6+)
        // eslint-disable-next-line es5/no-es6-methods
        (v) => [...v.values()],
        (v) => new Set(v)
      ),
      simpleTransformation(isMap, "map", (v) => [...v.entries()], (v) => new Map(v)),
      simpleTransformation((v) => isNaNValue(v) || isInfinite(v), "number", (v) => isNaNValue(v) ? "NaN" : v > 0 ? "Infinity" : "-Infinity", Number),
      simpleTransformation((v) => v === 0 && 1 / v === -1 / 0, "number", () => "-0", Number),
      simpleTransformation(isURL, "URL", (v) => v.toString(), (v) => new URL(v))
    ];
    symbolRule = compositeTransformation((s, superJson) => isSymbol(s) ? !!superJson.symbolRegistry.getIdentifier(s) : !1, (s, superJson) => ["symbol", superJson.symbolRegistry.getIdentifier(s)], (v) => v.description, (_, a, superJson) => {
      let value = superJson.symbolRegistry.getValue(a[1]);
      if (!value)
        throw new Error("Trying to deserialize unknown symbol");
      return value;
    }), constructorToName = [
      Int8Array,
      Uint8Array,
      Int16Array,
      Uint16Array,
      Int32Array,
      Uint32Array,
      Float32Array,
      Float64Array,
      Uint8ClampedArray
    ].reduce((obj, ctor) => (obj[ctor.name] = ctor, obj), {}), typedArrayRule = compositeTransformation(isTypedArray, (v) => ["typed-array", v.constructor.name], (v) => [...v], (v, a) => {
      let ctor = constructorToName[a[1]];
      if (!ctor)
        throw new Error("Trying to deserialize unknown typed array");
      return new ctor(v);
    });
    classRule = compositeTransformation(isInstanceOfRegisteredClass, (clazz, superJson) => ["class", superJson.classRegistry.getIdentifier(clazz.constructor)], (clazz, superJson) => {
      let allowedProps = superJson.classRegistry.getAllowedProps(clazz.constructor);
      if (!allowedProps)
        return { ...clazz };
      let result = {};
      return allowedProps.forEach((prop) => {
        result[prop] = clazz[prop];
      }), result;
    }, (v, a, superJson) => {
      let clazz = superJson.classRegistry.getValue(a[1]);
      if (!clazz)
        throw new Error("Trying to deserialize unknown class - check https://github.com/blitz-js/superjson/issues/116#issuecomment-773996564");
      return Object.assign(Object.create(clazz.prototype), v);
    }), customRule = compositeTransformation((value, superJson) => !!superJson.customTransformerRegistry.findApplicable(value), (value, superJson) => ["custom", superJson.customTransformerRegistry.findApplicable(value).name], (value, superJson) => superJson.customTransformerRegistry.findApplicable(value).serialize(value), (v, a, superJson) => {
      let transformer = superJson.customTransformerRegistry.findByName(a[1]);
      if (!transformer)
        throw new Error("Trying to deserialize unknown custom value");
      return transformer.deserialize(v);
    }), compositeRules = [classRule, symbolRule, customRule, typedArrayRule], transformValue = (value, superJson) => {
      let applicableCompositeRule = findArr(compositeRules, (rule) => rule.isApplicable(value, superJson));
      if (applicableCompositeRule)
        return {
          value: applicableCompositeRule.transform(value, superJson),
          type: applicableCompositeRule.annotation(value, superJson)
        };
      let applicableSimpleRule = findArr(simpleRules, (rule) => rule.isApplicable(value, superJson));
      if (applicableSimpleRule)
        return {
          value: applicableSimpleRule.transform(value, superJson),
          type: applicableSimpleRule.annotation
        };
    }, simpleRulesByAnnotation = {};
    simpleRules.forEach((rule) => {
      simpleRulesByAnnotation[rule.annotation] = rule;
    });
    untransformValue = (json118, type, superJson) => {
      if (isArray(type))
        switch (type[0]) {
          case "symbol":
            return symbolRule.untransform(json118, type, superJson);
          case "class":
            return classRule.untransform(json118, type, superJson);
          case "custom":
            return customRule.untransform(json118, type, superJson);
          case "typed-array":
            return typedArrayRule.untransform(json118, type, superJson);
          default:
            throw new Error("Unknown transformation: " + type);
        }
      else {
        let transformation = simpleRulesByAnnotation[type];
        if (!transformation)
          throw new Error("Unknown transformation: " + type);
        return transformation.untransform(json118, superJson);
      }
    };
  }
});

// ../../node_modules/.pnpm/superjson@2.2.1/node_modules/superjson/dist/accessDeep.js
function validatePath(path2) {
  if (includes(path2, "__proto__"))
    throw new Error("__proto__ is not allowed as a property");
  if (includes(path2, "prototype"))
    throw new Error("prototype is not allowed as a property");
  if (includes(path2, "constructor"))
    throw new Error("constructor is not allowed as a property");
}
var getNthKey, getDeep, setDeep, init_accessDeep = __esm({
  "../../node_modules/.pnpm/superjson@2.2.1/node_modules/superjson/dist/accessDeep.js"() {
    init_is();
    init_util();
    getNthKey = (value, n) => {
      let keys = value.keys();
      for (; n > 0; )
        keys.next(), n--;
      return keys.next().value;
    };
    getDeep = (object, path2) => {
      validatePath(path2);
      for (let i = 0; i < path2.length; i++) {
        let key = path2[i];
        if (isSet(object))
          object = getNthKey(object, +key);
        else if (isMap(object)) {
          let row = +key, type = +path2[++i] == 0 ? "key" : "value", keyOfRow = getNthKey(object, row);
          switch (type) {
            case "key":
              object = keyOfRow;
              break;
            case "value":
              object = object.get(keyOfRow);
              break;
          }
        } else
          object = object[key];
      }
      return object;
    }, setDeep = (object, path2, mapper) => {
      if (validatePath(path2), path2.length === 0)
        return mapper(object);
      let parent = object;
      for (let i = 0; i < path2.length - 1; i++) {
        let key = path2[i];
        if (isArray(parent)) {
          let index = +key;
          parent = parent[index];
        } else if (isPlainObject(parent))
          parent = parent[key];
        else if (isSet(parent)) {
          let row = +key;
          parent = getNthKey(parent, row);
        } else if (isMap(parent)) {
          if (i === path2.length - 2)
            break;
          let row = +key, type = +path2[++i] == 0 ? "key" : "value", keyOfRow = getNthKey(parent, row);
          switch (type) {
            case "key":
              parent = keyOfRow;
              break;
            case "value":
              parent = parent.get(keyOfRow);
              break;
          }
        }
      }
      let lastKey = path2[path2.length - 1];
      if (isArray(parent) ? parent[+lastKey] = mapper(parent[+lastKey]) : isPlainObject(parent) && (parent[lastKey] = mapper(parent[lastKey])), isSet(parent)) {
        let oldValue = getNthKey(parent, +lastKey), newValue = mapper(oldValue);
        oldValue !== newValue && (parent.delete(oldValue), parent.add(newValue));
      }
      if (isMap(parent)) {
        let row = +path2[path2.length - 2], keyToRow = getNthKey(parent, row);
        switch (+lastKey == 0 ? "key" : "value") {
          case "key": {
            let newKey = mapper(keyToRow);
            parent.set(newKey, parent.get(keyToRow)), newKey !== keyToRow && parent.delete(keyToRow);
            break;
          }
          case "value": {
            parent.set(keyToRow, mapper(parent.get(keyToRow)));
            break;
          }
        }
      }
      return object;
    };
  }
});

// ../../node_modules/.pnpm/superjson@2.2.1/node_modules/superjson/dist/plainer.js
function traverse(tree2, walker2, origin = []) {
  if (!tree2)
    return;
  if (!isArray(tree2)) {
    forEach(tree2, (subtree, key) => traverse(subtree, walker2, [...origin, ...parsePath(key)]));
    return;
  }
  let [nodeValue, children] = tree2;
  children && forEach(children, (child, key) => {
    traverse(child, walker2, [...origin, ...parsePath(key)]);
  }), walker2(nodeValue, origin);
}
function applyValueAnnotations(plain2, annotations, superJson) {
  return traverse(annotations, (type, path2) => {
    plain2 = setDeep(plain2, path2, (v) => untransformValue(v, type, superJson));
  }), plain2;
}
function applyReferentialEqualityAnnotations(plain2, annotations) {
  function apply(identicalPaths, path2) {
    let object = getDeep(plain2, parsePath(path2));
    identicalPaths.map(parsePath).forEach((identicalObjectPath) => {
      plain2 = setDeep(plain2, identicalObjectPath, () => object);
    });
  }
  if (isArray(annotations)) {
    let [root, other] = annotations;
    root.forEach((identicalPath) => {
      plain2 = setDeep(plain2, parsePath(identicalPath), () => plain2);
    }), other && forEach(other, apply);
  } else
    forEach(annotations, apply);
  return plain2;
}
function addIdentity(object, path2, identities) {
  let existingSet = identities.get(object);
  existingSet ? existingSet.push(path2) : identities.set(object, [path2]);
}
function generateReferentialEqualityAnnotations(identitites, dedupe) {
  let result = {}, rootEqualityPaths;
  return identitites.forEach((paths) => {
    if (paths.length <= 1)
      return;
    dedupe || (paths = paths.map((path2) => path2.map(String)).sort((a, b) => a.length - b.length));
    let [representativePath, ...identicalPaths] = paths;
    representativePath.length === 0 ? rootEqualityPaths = identicalPaths.map(stringifyPath) : result[stringifyPath(representativePath)] = identicalPaths.map(stringifyPath);
  }), rootEqualityPaths ? isEmptyObject(result) ? [rootEqualityPaths] : [rootEqualityPaths, result] : isEmptyObject(result) ? void 0 : result;
}
var isDeep, walker, init_plainer = __esm({
  "../../node_modules/.pnpm/superjson@2.2.1/node_modules/superjson/dist/plainer.js"() {
    init_is();
    init_pathstringifier();
    init_transformer();
    init_util();
    init_pathstringifier();
    init_accessDeep();
    isDeep = (object, superJson) => isPlainObject(object) || isArray(object) || isMap(object) || isSet(object) || isInstanceOfRegisteredClass(object, superJson);
    walker = (object, identities, superJson, dedupe, path2 = [], objectsInThisPath = [], seenObjects = /* @__PURE__ */ new Map()) => {
      let primitive = isPrimitive(object);
      if (!primitive) {
        addIdentity(object, path2, identities);
        let seen = seenObjects.get(object);
        if (seen)
          return dedupe ? {
            transformedValue: null
          } : seen;
      }
      if (!isDeep(object, superJson)) {
        let transformed2 = transformValue(object, superJson), result2 = transformed2 ? {
          transformedValue: transformed2.value,
          annotations: [transformed2.type]
        } : {
          transformedValue: object
        };
        return primitive || seenObjects.set(object, result2), result2;
      }
      if (includes(objectsInThisPath, object))
        return {
          transformedValue: null
        };
      let transformationResult = transformValue(object, superJson), transformed = transformationResult?.value ?? object, transformedValue = isArray(transformed) ? [] : {}, innerAnnotations = {};
      forEach(transformed, (value, index) => {
        if (index === "__proto__" || index === "constructor" || index === "prototype")
          throw new Error(`Detected property ${index}. This is a prototype pollution risk, please remove it from your object.`);
        let recursiveResult = walker(value, identities, superJson, dedupe, [...path2, index], [...objectsInThisPath, object], seenObjects);
        transformedValue[index] = recursiveResult.transformedValue, isArray(recursiveResult.annotations) ? innerAnnotations[index] = recursiveResult.annotations : isPlainObject(recursiveResult.annotations) && forEach(recursiveResult.annotations, (tree2, key) => {
          innerAnnotations[escapeKey(index) + "." + key] = tree2;
        });
      });
      let result = isEmptyObject(innerAnnotations) ? {
        transformedValue,
        annotations: transformationResult ? [transformationResult.type] : void 0
      } : {
        transformedValue,
        annotations: transformationResult ? [transformationResult.type, innerAnnotations] : innerAnnotations
      };
      return primitive || seenObjects.set(object, result), result;
    };
  }
});

// ../../node_modules/.pnpm/superjson@2.2.1/node_modules/superjson/dist/index.js
var dist_exports = {};
__export(dist_exports, {
  SuperJSON: () => SuperJSON,
  allowErrorProps: () => allowErrorProps,
  default: () => SuperJSON,
  deserialize: () => deserialize,
  parse: () => parse,
  registerClass: () => registerClass,
  registerCustom: () => registerCustom,
  registerSymbol: () => registerSymbol,
  serialize: () => serialize,
  stringify: () => stringify
});
var import_copy_anything, SuperJSON, serialize, deserialize, stringify, parse, registerClass, registerCustom, registerSymbol, allowErrorProps, init_dist = __esm({
  "../../node_modules/.pnpm/superjson@2.2.1/node_modules/superjson/dist/index.js"() {
    init_class_registry();
    init_registry();
    init_custom_transformer_registry();
    init_plainer();
    import_copy_anything = require("copy-anything"), SuperJSON = class {
      /**
       * @param dedupeReferentialEqualities  If true, SuperJSON will make sure only one instance of referentially equal objects are serialized and the rest are replaced with `null`.
       */
      constructor({ dedupe = !1 } = {}) {
        this.classRegistry = new ClassRegistry(), this.symbolRegistry = new Registry((s) => s.description ?? ""), this.customTransformerRegistry = new CustomTransformerRegistry(), this.allowedErrorProps = [], this.dedupe = dedupe;
      }
      serialize(object) {
        let identities = /* @__PURE__ */ new Map(), output = walker(object, identities, this, this.dedupe), res = {
          json: output.transformedValue
        };
        output.annotations && (res.meta = {
          ...res.meta,
          values: output.annotations
        });
        let equalityAnnotations = generateReferentialEqualityAnnotations(identities, this.dedupe);
        return equalityAnnotations && (res.meta = {
          ...res.meta,
          referentialEqualities: equalityAnnotations
        }), res;
      }
      deserialize(payload) {
        let { json: json118, meta: meta4 } = payload, result = (0, import_copy_anything.copy)(json118);
        return meta4?.values && (result = applyValueAnnotations(result, meta4.values, this)), meta4?.referentialEqualities && (result = applyReferentialEqualityAnnotations(result, meta4.referentialEqualities)), result;
      }
      stringify(object) {
        return JSON.stringify(this.serialize(object));
      }
      parse(string) {
        return this.deserialize(JSON.parse(string));
      }
      registerClass(v, options2) {
        this.classRegistry.register(v, options2);
      }
      registerSymbol(v, identifier) {
        this.symbolRegistry.register(v, identifier);
      }
      registerCustom(transformer, name) {
        this.customTransformerRegistry.register({
          name,
          ...transformer
        });
      }
      allowErrorProps(...props) {
        this.allowedErrorProps.push(...props);
      }
    };
    SuperJSON.defaultInstance = new SuperJSON();
    SuperJSON.serialize = SuperJSON.defaultInstance.serialize.bind(SuperJSON.defaultInstance);
    SuperJSON.deserialize = SuperJSON.defaultInstance.deserialize.bind(SuperJSON.defaultInstance);
    SuperJSON.stringify = SuperJSON.defaultInstance.stringify.bind(SuperJSON.defaultInstance);
    SuperJSON.parse = SuperJSON.defaultInstance.parse.bind(SuperJSON.defaultInstance);
    SuperJSON.registerClass = SuperJSON.defaultInstance.registerClass.bind(SuperJSON.defaultInstance);
    SuperJSON.registerSymbol = SuperJSON.defaultInstance.registerSymbol.bind(SuperJSON.defaultInstance);
    SuperJSON.registerCustom = SuperJSON.defaultInstance.registerCustom.bind(SuperJSON.defaultInstance);
    SuperJSON.allowErrorProps = SuperJSON.defaultInstance.allowErrorProps.bind(SuperJSON.defaultInstance);
    serialize = SuperJSON.serialize, deserialize = SuperJSON.deserialize, stringify = SuperJSON.stringify, parse = SuperJSON.parse, registerClass = SuperJSON.registerClass, registerCustom = SuperJSON.registerCustom, registerSymbol = SuperJSON.registerSymbol, allowErrorProps = SuperJSON.allowErrorProps;
  }
});

// ../../node_modules/.pnpm/prismjs@1.29.0/node_modules/prismjs/components/prism-json.js
var require_prism_json = __commonJS({
  "../../node_modules/.pnpm/prismjs@1.29.0/node_modules/prismjs/components/prism-json.js"() {
    Prism.languages.json = {
      property: {
        pattern: /(^|[^\\])"(?:\\.|[^\\"\r\n])*"(?=\s*:)/,
        lookbehind: !0,
        greedy: !0
      },
      string: {
        pattern: /(^|[^\\])"(?:\\.|[^\\"\r\n])*"(?!\s*:)/,
        lookbehind: !0,
        greedy: !0
      },
      comment: {
        pattern: /\/\/.*|\/\*[\s\S]*?(?:\*\/|$)/,
        greedy: !0
      },
      number: /-?\b\d+(?:\.\d+)?(?:e[+-]?\d+)?\b/i,
      punctuation: /[{}[\],]/,
      operator: /:/,
      boolean: /\b(?:false|true)\b/,
      null: {
        pattern: /\bnull\b/,
        alias: "keyword"
      }
    };
    Prism.languages.webmanifest = Prism.languages.json;
  }
});

// ../../node_modules/.pnpm/prismjs@1.29.0/node_modules/prismjs/components/prism-typescript.js
var require_prism_typescript = __commonJS({
  "../../node_modules/.pnpm/prismjs@1.29.0/node_modules/prismjs/components/prism-typescript.js"() {
    (function(Prism3) {
      Prism3.languages.typescript = Prism3.languages.extend("javascript", {
        "class-name": {
          pattern: /(\b(?:class|extends|implements|instanceof|interface|new|type)\s+)(?!keyof\b)(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?:\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>)?/,
          lookbehind: !0,
          greedy: !0,
          inside: null
          // see below
        },
        builtin: /\b(?:Array|Function|Promise|any|boolean|console|never|number|string|symbol|unknown)\b/
      }), Prism3.languages.typescript.keyword.push(
        /\b(?:abstract|declare|is|keyof|readonly|require)\b/,
        // keywords that have to be followed by an identifier
        /\b(?:asserts|infer|interface|module|namespace|type)\b(?=\s*(?:[{_$a-zA-Z\xA0-\uFFFF]|$))/,
        // This is for `import type *, {}`
        /\btype\b(?=\s*(?:[\{*]|$))/
      ), delete Prism3.languages.typescript.parameter, delete Prism3.languages.typescript["literal-property"];
      var typeInside = Prism3.languages.extend("typescript", {});
      delete typeInside["class-name"], Prism3.languages.typescript["class-name"].inside = typeInside, Prism3.languages.insertBefore("typescript", "function", {
        decorator: {
          pattern: /@[$\w\xA0-\uFFFF]+/,
          inside: {
            at: {
              pattern: /^@/,
              alias: "operator"
            },
            function: /^[\s\S]+/
          }
        },
        "generic-function": {
          // e.g. foo<T extends "bar" | "baz">( ...
          pattern: /#?(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>(?=\s*\()/,
          greedy: !0,
          inside: {
            function: /^#?(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*/,
            generic: {
              pattern: /<[\s\S]+/,
              // everything after the first <
              alias: "class-name",
              inside: typeInside
            }
          }
        }
      }), Prism3.languages.ts = Prism3.languages.typescript;
    })(Prism);
  }
});

// <stdin>
var stdin_exports = {};
__export(stdin_exports, {
  assets: () => assets_manifest_default,
  assetsBuildDirectory: () => assetsBuildDirectory,
  entry: () => entry,
  future: () => future,
  mode: () => mode,
  publicPath: () => publicPath,
  routes: () => routes
});
module.exports = __toCommonJS(stdin_exports);

// app/entry.server.tsx
var entry_server_exports = {};
__export(entry_server_exports, {
  apiRateLimiter: () => apiRateLimiter,
  default: () => handleRequest,
  handleError: () => handleError,
  registryProxy: () => registryProxy,
  runWithHttpContext: () => runWithHttpContext,
  socketIo: () => socketIo,
  wss: () => wss
});
var import_node4 = require("@remix-run/node"), import_react5 = require("@remix-run/react"), import_intl_parse_accept_language = require("intl-parse-accept-language"), import_isbot = __toESM(require("isbot")), import_server = require("react-dom/server"), import_stream = require("stream");

// ../../packages/emails/src/index.tsx
var import_render = require("@react-email/render");

// ../../packages/emails/emails/alert-attempt-failure.tsx
var import_components3 = require("@react-email/components"), import_zod = require("zod");

// ../../packages/emails/emails/components/Footer.tsx
var import_components = require("@react-email/components");

// ../../packages/emails/emails/components/styles.ts
var h1 = {
  color: "#D7D9DD",
  fontFamily: "-apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif",
  fontSize: "24px",
  fontWeight: "bold",
  margin: "40px 0",
  padding: "0"
}, main = {
  backgroundColor: "#15171A",
  padding: "0 20px"
}, container = {
  backgroundColor: "#15171A",
  margin: "0 auto",
  padding: "20px 0 48px",
  marginBottom: "64px"
};
var hr = {
  borderColor: "#272A2E",
  margin: "20px 0"
};
var paragraphLight = {
  color: "#D7D9DD",
  fontFamily: '-apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,"Helvetica Neue",Ubuntu,sans-serif',
  fontSize: "16px",
  lineHeight: "24px",
  textAlign: "left"
}, paragraphTight = {
  color: "#D7D9DD",
  fontFamily: '-apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,"Helvetica Neue",Ubuntu,sans-serif',
  fontSize: "16px",
  lineHeight: "16px",
  textAlign: "left"
}, bullets = {
  color: "#D7D9DD",
  fontFamily: '-apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,"Helvetica Neue",Ubuntu,sans-serif',
  fontSize: "16px",
  lineHeight: "24px",
  textAlign: "left",
  margin: "0"
}, anchor = {
  color: "#826DFF",
  fontFamily: "-apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif",
  fontSize: "16px",
  textDecoration: "underline"
};
var footer = {
  color: "#878C99",
  fontFamily: '-apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,"Helvetica Neue",Ubuntu,sans-serif',
  fontSize: "12px",
  lineHeight: "16px"
}, footerItalic = {
  color: "#878C99",
  fontStyle: "italic",
  fontFamily: '-apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,"Helvetica Neue",Ubuntu,sans-serif',
  fontSize: "12px",
  lineHeight: "16px"
}, footerAnchor = {
  color: "#878C99",
  fontFamily: "-apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif",
  fontSize: "12px",
  textDecoration: "underline"
};

// ../../packages/emails/emails/components/Footer.tsx
var import_jsx_runtime = require("react/jsx-runtime");
function Footer() {
  return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_components.Hr, { style: hr }),
    /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(import_components.Text, { style: footer, children: [
      "\xA9Trigger.dev, 1111B S Governors Ave STE 6433, Dover, DE 19904 |",
      " ",
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_components.Link, { style: footerAnchor, href: "https://trigger.dev/", children: "Trigger.dev" })
    ] })
  ] });
}

// ../../packages/emails/emails/components/Image.tsx
var import_components2 = require("@react-email/components");

// ../../packages/emails/emails/components/BasePath.tsx
var globalBasePath = "http://localhost:3000";
function setGlobalBasePath(basePath) {
  globalBasePath = basePath;
}
function getGlobalBasePath() {
  return globalBasePath;
}

// ../../packages/emails/emails/components/Image.tsx
var import_jsx_runtime2 = require("react/jsx-runtime");
function Image({ path: path2, ...props }) {
  let basePath = getGlobalBasePath();
  return /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(import_components2.Img, { src: `${basePath}${path2}`, ...props });
}

// ../../packages/emails/emails/alert-attempt-failure.tsx
var import_jsx_runtime3 = require("react/jsx-runtime"), AlertAttemptEmailSchema = import_zod.z.object({
  email: import_zod.z.literal("alert-attempt"),
  taskIdentifier: import_zod.z.string(),
  fileName: import_zod.z.string(),
  exportName: import_zod.z.string(),
  version: import_zod.z.string(),
  environment: import_zod.z.string(),
  error: import_zod.z.object({
    message: import_zod.z.string(),
    name: import_zod.z.string().optional(),
    stackTrace: import_zod.z.string().optional()
  }),
  attemptLink: import_zod.z.string().url()
}), previewDefaults = {
  taskIdentifier: "my-task",
  fileName: "other.ts",
  exportName: "myTask",
  version: "20240101.1",
  environment: "prod",
  error: {
    message: "Error message",
    name: "Error name",
    stackTrace: "Error stack trace"
  },
  attemptLink: "https://trigger.dev"
};
function Email(props) {
  let { taskIdentifier, fileName, exportName, version: version3, environment, error, attemptLink } = {
    ...previewDefaults,
    ...props
  };
  return /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)(import_components3.Html, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(import_components3.Head, {}),
    /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(import_components3.Preview, { children: `[${version3}.${environment} ${taskIdentifier}] ${error.message}` }),
    /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(import_components3.Body, { style: main, children: /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)(import_components3.Container, { style: container, children: [
      /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)(import_components3.Text, { style: h1, children: [
        "There's been an error on `",
        taskIdentifier,
        "`"
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)(import_components3.Text, { style: paragraphTight, children: [
        "Task ID: ",
        taskIdentifier
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)(import_components3.Text, { style: paragraphTight, children: [
        "Filename: ",
        fileName
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)(import_components3.Text, { style: paragraphTight, children: [
        "Function: ",
        exportName,
        "()"
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)(import_components3.Text, { style: paragraphTight, children: [
        "Version: ",
        version3
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)(import_components3.Text, { style: paragraphTight, children: [
        "Environment: ",
        environment
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(import_components3.Text, { style: paragraphLight, children: error.message }),
      error.stackTrace && /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(import_components3.CodeBlock, { code: error.stackTrace, theme: import_components3.dracula, lineNumbers: !0, language: "log" }),
      /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
        import_components3.Link,
        {
          href: attemptLink,
          target: "_blank",
          style: {
            ...anchor,
            display: "block",
            marginBottom: "50px"
          },
          children: "Investigate this error"
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(Image, { path: "/emails/logo-mono.png", width: "120", height: "22", alt: "Trigger.dev" }),
      /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(Footer, {})
    ] }) })
  ] });
}

// ../../packages/emails/emails/deployment-failure.tsx
var import_components4 = require("@react-email/components"), import_zod2 = require("zod");
var import_jsx_runtime4 = require("react/jsx-runtime"), AlertDeploymentFailureEmailSchema = import_zod2.z.object({
  email: import_zod2.z.literal("alert-deployment-failure"),
  version: import_zod2.z.string(),
  environment: import_zod2.z.string(),
  shortCode: import_zod2.z.string(),
  failedAt: import_zod2.z.date(),
  error: import_zod2.z.object({
    name: import_zod2.z.string(),
    message: import_zod2.z.string(),
    stack: import_zod2.z.string().optional()
  }),
  deploymentLink: import_zod2.z.string().url()
}), previewDefaults2 = {
  version: "v1",
  environment: "production",
  shortCode: "abc123",
  failedAt: (/* @__PURE__ */ new Date()).toISOString(),
  error: {
    name: "Error",
    stack: `Error: Something went wrong
    at main.ts:12:34`
  },
  deploymentLink: "https://trigger.dev"
};
function Email2(props) {
  let { version: version3, environment, shortCode, failedAt, error, deploymentLink } = {
    ...previewDefaults2,
    ...props
  };
  return /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)(import_components4.Html, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(import_components4.Head, {}),
    /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(import_components4.Preview, { children: `Deployment ${version3} [${environment}] failed: ${error.name}` }),
    /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(import_components4.Body, { style: main, children: /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)(import_components4.Container, { style: container, children: [
      /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(import_components4.Text, { style: h1, children: `An error occurred deploying ${version3} in ${environment}` }),
      /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)(import_components4.Text, { style: paragraphLight, children: [
        error.name,
        " ",
        error.message
      ] }),
      error.stack && /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(import_components4.CodeBlock, { code: error.stack, theme: import_components4.dracula, lineNumbers: !0, language: "log" }),
      /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(
        import_components4.Link,
        {
          href: deploymentLink,
          target: "_blank",
          style: {
            ...anchor,
            display: "block",
            marginBottom: "50px"
          },
          children: "Investigate this error"
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(Image, { path: "/emails/logo-mono.png", width: "120", height: "22", alt: "Trigger.dev" }),
      /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(Footer, {})
    ] }) })
  ] });
}

// ../../packages/emails/emails/deployment-success.tsx
var import_components5 = require("@react-email/components"), import_zod3 = require("zod");
var import_jsx_runtime5 = require("react/jsx-runtime"), AlertDeploymentSuccessEmailSchema = import_zod3.z.object({
  email: import_zod3.z.literal("alert-deployment-success"),
  version: import_zod3.z.string(),
  environment: import_zod3.z.string(),
  shortCode: import_zod3.z.string(),
  deployedAt: import_zod3.z.date(),
  taskCount: import_zod3.z.number(),
  deploymentLink: import_zod3.z.string().url()
}), previewDefaults3 = {
  version: "v1",
  environment: "production",
  shortCode: "abc123",
  deployedAt: (/* @__PURE__ */ new Date()).toISOString(),
  taskCount: 3,
  deploymentLink: "https://trigger.dev"
};
function Email3(props) {
  let { version: version3, environment, shortCode, deployedAt, taskCount, deploymentLink } = {
    ...previewDefaults3,
    ...props
  };
  return /* @__PURE__ */ (0, import_jsx_runtime5.jsxs)(import_components5.Html, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(import_components5.Head, {}),
    /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(import_components5.Preview, { children: `Deployment ${version3} [${environment}] succeeded` }),
    /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(import_components5.Body, { style: main, children: /* @__PURE__ */ (0, import_jsx_runtime5.jsxs)(import_components5.Container, { style: container, children: [
      /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(
        import_components5.Text,
        {
          style: h1,
          children: `Version ${version3} successfully deployed ${taskCount} tasks in ${environment}`
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(
        import_components5.Link,
        {
          href: deploymentLink,
          target: "_blank",
          style: {
            ...anchor,
            display: "block",
            marginBottom: "50px"
          },
          children: "View Deployment"
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(Image, { path: "/emails/logo-mono.png", width: "120", height: "22", alt: "Trigger.dev" }),
      /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(Footer, {})
    ] }) })
  ] });
}

// ../../packages/emails/emails/invite.tsx
var import_components6 = require("@react-email/components"), import_zod4 = require("zod");
var import_jsx_runtime6 = require("react/jsx-runtime"), InviteEmailSchema = import_zod4.z.object({
  email: import_zod4.z.literal("invite"),
  orgName: import_zod4.z.string(),
  inviterName: import_zod4.z.string().optional(),
  inviterEmail: import_zod4.z.string(),
  inviteLink: import_zod4.z.string().url()
});
function Email4({
  orgName,
  inviterName,
  inviterEmail,
  inviteLink
}) {
  return /* @__PURE__ */ (0, import_jsx_runtime6.jsxs)(import_components6.Html, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(import_components6.Head, {}),
    /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(import_components6.Preview, { children: `You've been invited to ${orgName}` }),
    /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(import_components6.Body, { style: main, children: /* @__PURE__ */ (0, import_jsx_runtime6.jsxs)(import_components6.Container, { style: container, children: [
      /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(import_components6.Text, { style: h1, children: `You've been invited to ${orgName}` }),
      /* @__PURE__ */ (0, import_jsx_runtime6.jsxs)(import_components6.Text, { style: paragraphLight, children: [
        inviterName ?? inviterEmail,
        " has invited you to join their organization on Trigger.dev."
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(
        import_components6.Link,
        {
          href: inviteLink,
          target: "_blank",
          style: {
            ...anchor,
            display: "block",
            marginBottom: "50px"
          },
          children: "Click here to view the invitation"
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(Image, { path: "/emails/logo-mono.png", width: "120", height: "22", alt: "Trigger.dev" }),
      /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(Footer, {})
    ] }) })
  ] });
}

// ../../packages/emails/emails/magic-link.tsx
var import_components7 = require("@react-email/components");
var import_jsx_runtime7 = require("react/jsx-runtime");
function Email5({ magicLink }) {
  return /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)(import_components7.Html, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(import_components7.Head, {}),
    /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(import_components7.Preview, { children: "Log in with this magic link \u{1FA84}" }),
    /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(import_components7.Body, { style: main, children: /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)(import_components7.Container, { style: container, children: [
      /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(import_components7.Text, { style: h1, children: "Log in to Trigger.dev" }),
      /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(
        import_components7.Link,
        {
          href: magicLink,
          target: "_blank",
          style: {
            ...anchor,
            display: "block"
          },
          children: "Click here to log in with this magic link"
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(
        import_components7.Text,
        {
          style: {
            ...paragraphLight,
            display: "block",
            marginBottom: "50px"
          },
          children: "If you didn't try to log in, you can safely ignore this email."
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(Image, { path: "/emails/logo-mono.png", width: "120", height: "22", alt: "Trigger.dev" }),
      /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(Footer, {})
    ] }) })
  ] });
}

// ../../packages/emails/emails/welcome.tsx
var import_components8 = require("@react-email/components");
var import_jsx_runtime8 = require("react/jsx-runtime");
function Email6({ name }) {
  return /* @__PURE__ */ (0, import_jsx_runtime8.jsxs)(import_components8.Html, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(import_components8.Head, {}),
    /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(import_components8.Preview, { children: "Power up your workflows" }),
    /* @__PURE__ */ (0, import_jsx_runtime8.jsxs)(import_components8.Body, { style: main, children: [
      /* @__PURE__ */ (0, import_jsx_runtime8.jsxs)(import_components8.Text, { style: paragraphLight, children: [
        "Hey ",
        name ?? "there",
        ","
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(import_components8.Text, { style: paragraphLight, children: "I\u2019m Matt, CEO of Trigger.dev." }),
      /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(import_components8.Text, { style: paragraphLight, children: "Our goal is to give developers like you the ability to effortlessly create powerful workflows in code." }),
      /* @__PURE__ */ (0, import_jsx_runtime8.jsxs)(import_components8.Text, { style: paragraphLight, children: [
        "We recommend",
        " ",
        /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(import_components8.Link, { style: anchor, href: "https://app.trigger.dev/templates", children: "getting started with one of our templates" }),
        " ",
        "to get familiar with how Trigger.dev works, and then moving on to create your own workflows."
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime8.jsxs)(import_components8.Text, { style: paragraphLight, children: [
        "Feel free to reply to me if you have any questions. You can also",
        " ",
        /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(import_components8.Link, { style: anchor, href: "https://cal.com/team/triggerdotdev/call", children: "schedule a call" }),
        " ",
        ", or join our",
        " ",
        /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(import_components8.Link, { style: anchor, href: "https://discord.gg/JtBAxBr2m3", children: "Discord server" }),
        " ",
        "to connect with the community and our team."
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(import_components8.Text, { style: paragraphLight, children: "We hope you enjoy using Trigger.dev!" }),
      /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(import_components8.Text, { style: bullets, children: "Best," }),
      /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(import_components8.Text, { style: bullets, children: "Matt" }),
      /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(import_components8.Text, { style: paragraphLight, children: "CEO, Trigger.dev" }),
      /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(import_components8.Text, { style: footerItalic, children: "If you don\u2019t want me to contact you again, please just let me know and I\u2019ll update your preferences." }),
      /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(Footer, {})
    ] })
  ] });
}

// ../../packages/emails/src/index.tsx
var import_resend = require("resend"), import_zod5 = require("zod"), import_jsx_runtime9 = require("react/jsx-runtime"), DeliverEmailSchema = import_zod5.z.discriminatedUnion("email", [
  import_zod5.z.object({
    email: import_zod5.z.literal("welcome"),
    name: import_zod5.z.string().optional()
  }),
  import_zod5.z.object({
    email: import_zod5.z.literal("magic_link"),
    magicLink: import_zod5.z.string().url()
  }),
  InviteEmailSchema,
  AlertAttemptEmailSchema,
  AlertDeploymentFailureEmailSchema,
  AlertDeploymentSuccessEmailSchema
]).and(import_zod5.z.object({ to: import_zod5.z.string() })), EmailClient = class {
  #client;
  #imagesBaseUrl;
  #from;
  #replyTo;
  constructor(config) {
    this.#client = config.apikey && config.apikey.startsWith("re_") ? new import_resend.Resend(config.apikey) : void 0, this.#imagesBaseUrl = config.imagesBaseUrl, this.#from = config.from, this.#replyTo = config.replyTo;
  }
  async send(data2) {
    let { subject, component } = this.#getTemplate(data2);
    return setGlobalBasePath(this.#imagesBaseUrl), this.#sendEmail({
      to: data2.to,
      subject,
      react: component
    });
  }
  async sendPlainText(options2) {
    if (this.#client) {
      await this.#client.emails.send({
        from: this.#from,
        to: options2.to,
        reply_to: this.#replyTo,
        subject: options2.subject,
        text: options2.text
      });
      return;
    }
  }
  #getTemplate(data2) {
    switch (data2.email) {
      case "welcome":
        return {
          subject: "\u2728 Welcome to Trigger.dev!",
          component: /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(Email6, { name: data2.name })
        };
      case "magic_link":
        return {
          subject: "Magic sign-in link for Trigger.dev",
          component: /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(Email5, { magicLink: data2.magicLink })
        };
      case "invite":
        return {
          subject: `You've been invited to join ${data2.orgName} on Trigger.dev`,
          component: /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(Email4, { ...data2 })
        };
      case "alert-attempt":
        return {
          subject: `Error on ${data2.taskIdentifier} [${data2.version}.${data2.environment}] ${data2.error.message}`,
          component: /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(Email, { ...data2 })
        };
      case "alert-deployment-failure":
        return {
          subject: `Deployment ${data2.version} [${data2.environment}] failed: ${data2.error.name}`,
          component: /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(Email2, { ...data2 })
        };
      case "alert-deployment-success":
        return {
          subject: `Deployment ${data2.version} [${data2.environment}] succeeded`,
          component: /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(Email3, { ...data2 })
        };
    }
  }
  async #sendEmail({ to, subject, react }) {
    if (this.#client) {
      await this.#client.emails.send({
        from: this.#from,
        to,
        reply_to: this.#replyTo,
        subject,
        react
      });
      return;
    }
    console.log(`
##### sendEmail to ${to}, subject: ${subject}

${(0, import_render.render)(react, {
      plainText: !0
    })}
    `);
  }
};

// ../../packages/core/src/schemas/api.ts
var import_ulidx = require("ulidx"), import_zod17 = require("zod");

// ../../packages/core/src/schemas/addMissingVersionField.ts
function addMissingVersionField(val) {
  return val !== null && typeof val == "object" && !("version" in val) ? {
    ...val,
    version: "1"
  } : val;
}

// ../../packages/core/src/schemas/errors.ts
var import_zod6 = require("zod"), ErrorWithStackSchema = import_zod6.z.object({
  message: import_zod6.z.string(),
  name: import_zod6.z.string().optional(),
  stack: import_zod6.z.string().optional()
}), SchemaErrorSchema = import_zod6.z.object({
  path: import_zod6.z.array(import_zod6.z.string()),
  message: import_zod6.z.string()
});

// ../../packages/core/src/schemas/eventFilter.ts
var import_zod7 = require("zod"), stringPatternMatchers = [
  import_zod7.z.object({
    $endsWith: import_zod7.z.string()
  }),
  import_zod7.z.object({
    $startsWith: import_zod7.z.string()
  }),
  import_zod7.z.object({
    $ignoreCaseEquals: import_zod7.z.string()
  })
], EventMatcherSchema = import_zod7.z.union([
  /** Match against a string */
  import_zod7.z.array(import_zod7.z.string()),
  /** Match against a number */
  import_zod7.z.array(import_zod7.z.number()),
  /** Match against a boolean */
  import_zod7.z.array(import_zod7.z.boolean()),
  import_zod7.z.array(
    import_zod7.z.union([
      ...stringPatternMatchers,
      import_zod7.z.object({
        $exists: import_zod7.z.boolean()
      }),
      import_zod7.z.object({
        $isNull: import_zod7.z.boolean()
      }),
      import_zod7.z.object({
        $anythingBut: import_zod7.z.union([import_zod7.z.string(), import_zod7.z.number(), import_zod7.z.boolean()])
      }),
      import_zod7.z.object({
        $anythingBut: import_zod7.z.union([import_zod7.z.array(import_zod7.z.string()), import_zod7.z.array(import_zod7.z.number()), import_zod7.z.array(import_zod7.z.boolean())])
      }),
      import_zod7.z.object({
        $gt: import_zod7.z.number()
      }),
      import_zod7.z.object({
        $lt: import_zod7.z.number()
      }),
      import_zod7.z.object({
        $gte: import_zod7.z.number()
      }),
      import_zod7.z.object({
        $lte: import_zod7.z.number()
      }),
      import_zod7.z.object({
        $between: import_zod7.z.tuple([import_zod7.z.number(), import_zod7.z.number()])
      }),
      import_zod7.z.object({
        $includes: import_zod7.z.union([import_zod7.z.string(), import_zod7.z.number(), import_zod7.z.boolean()])
      }),
      import_zod7.z.object({
        $not: import_zod7.z.union([import_zod7.z.string(), import_zod7.z.number(), import_zod7.z.boolean()])
      })
    ])
  )
]), EventFilterSchema = import_zod7.z.lazy(
  () => import_zod7.z.record(import_zod7.z.union([EventMatcherSchema, EventFilterSchema]))
), EventRuleSchema = import_zod7.z.object({
  event: import_zod7.z.string().or(import_zod7.z.array(import_zod7.z.string())),
  source: import_zod7.z.string(),
  payload: EventFilterSchema.optional(),
  context: EventFilterSchema.optional()
});

// ../../packages/core/src/schemas/integrations.ts
var import_zod8 = require("zod"), ConnectionAuthSchema = import_zod8.z.object({
  type: import_zod8.z.enum(["oauth2", "apiKey"]),
  accessToken: import_zod8.z.string(),
  scopes: import_zod8.z.array(import_zod8.z.string()).optional(),
  additionalFields: import_zod8.z.record(import_zod8.z.string()).optional()
}), IntegrationMetadataSchema = import_zod8.z.object({
  id: import_zod8.z.string(),
  name: import_zod8.z.string(),
  instructions: import_zod8.z.string().optional()
}), IntegrationConfigSchema = import_zod8.z.object({
  id: import_zod8.z.string(),
  metadata: IntegrationMetadataSchema,
  authSource: import_zod8.z.enum(["HOSTED", "LOCAL", "RESOLVER"])
});

// ../../packages/core/src/schemas/json.ts
var import_zod9 = require("zod"), LiteralSchema = import_zod9.z.union([import_zod9.z.string(), import_zod9.z.number(), import_zod9.z.boolean(), import_zod9.z.null()]), DeserializedJsonSchema = import_zod9.z.lazy(
  () => import_zod9.z.union([LiteralSchema, import_zod9.z.array(DeserializedJsonSchema), import_zod9.z.record(DeserializedJsonSchema)])
), SerializableSchema = import_zod9.z.union([
  import_zod9.z.string(),
  import_zod9.z.number(),
  import_zod9.z.boolean(),
  import_zod9.z.null(),
  import_zod9.z.date(),
  import_zod9.z.undefined(),
  import_zod9.z.symbol()
]), SerializableJsonSchema = import_zod9.z.lazy(
  () => import_zod9.z.union([SerializableSchema, import_zod9.z.array(SerializableJsonSchema), import_zod9.z.record(SerializableJsonSchema)])
);

// ../../packages/core/src/schemas/properties.ts
var import_zod10 = require("zod"), DisplayPropertySchema = import_zod10.z.object({
  /** The label for the property */
  label: import_zod10.z.string(),
  /** The value of the property */
  text: import_zod10.z.string(),
  /** The URL to link to when the property is clicked */
  url: import_zod10.z.string().optional(),
  /** The URL to a list of images to display next to the property */
  imageUrl: import_zod10.z.array(import_zod10.z.string()).optional()
}), DisplayPropertiesSchema = import_zod10.z.array(DisplayPropertySchema), StyleSchema = import_zod10.z.object({
  /** The style, `normal` or `minimal` */
  style: import_zod10.z.enum(["normal", "minimal"]),
  /** A variant of the style. */
  variant: import_zod10.z.string().optional()
});

// ../../packages/core/src/schemas/schedules.ts
var import_zod11 = require("zod"), SCHEDULED_EVENT = "dev.trigger.scheduled", ScheduledPayloadSchema = import_zod11.z.object({
  ts: import_zod11.z.coerce.date(),
  lastTimestamp: import_zod11.z.coerce.date().optional()
}), IntervalOptionsSchema = import_zod11.z.object({
  /** The number of seconds for the interval. Min = 20, Max = 2_592_000 (30 days) */
  seconds: import_zod11.z.number().int().positive().min(20).max(2592e3)
}), CronOptionsSchema = import_zod11.z.object({
  /** A CRON expression that defines the schedule. A useful tool when writing CRON
    expressions is [crontab guru](https://crontab.guru). Note that the timezone
    used is UTC. */
  cron: import_zod11.z.string()
}), CronMetadataSchema = import_zod11.z.object({
  type: import_zod11.z.literal("cron"),
  options: CronOptionsSchema,
  /** An optional Account ID to associate with runs triggered by this interval */
  accountId: import_zod11.z.string().optional(),
  metadata: import_zod11.z.any()
}), IntervalMetadataSchema = import_zod11.z.object({
  /** An interval reoccurs at the specified number of seconds  */
  type: import_zod11.z.literal("interval"),
  /** An object containing options about the interval. */
  options: IntervalOptionsSchema,
  /** An optional Account ID to associate with runs triggered by this interval */
  accountId: import_zod11.z.string().optional(),
  /** Any additional metadata about the schedule. */
  metadata: import_zod11.z.any()
}), ScheduleMetadataSchema = import_zod11.z.discriminatedUnion("type", [
  IntervalMetadataSchema,
  CronMetadataSchema
]), RegisterDynamicSchedulePayloadSchema = import_zod11.z.object({
  id: import_zod11.z.string(),
  jobs: import_zod11.z.array(
    import_zod11.z.object({
      id: import_zod11.z.string(),
      version: import_zod11.z.string()
    })
  )
});

// ../../packages/core/src/schemas/tasks.ts
var import_zod12 = require("zod");
var TaskStatusSchema = import_zod12.z.enum([
  "PENDING",
  "WAITING",
  "RUNNING",
  "COMPLETED",
  "ERRORED",
  "CANCELED"
]), TaskSchema = import_zod12.z.object({
  id: import_zod12.z.string(),
  name: import_zod12.z.string(),
  icon: import_zod12.z.string().optional().nullable(),
  noop: import_zod12.z.boolean(),
  startedAt: import_zod12.z.coerce.date().optional().nullable(),
  completedAt: import_zod12.z.coerce.date().optional().nullable(),
  delayUntil: import_zod12.z.coerce.date().optional().nullable(),
  status: TaskStatusSchema,
  description: import_zod12.z.string().optional().nullable(),
  properties: import_zod12.z.array(DisplayPropertySchema).optional().nullable(),
  outputProperties: import_zod12.z.array(DisplayPropertySchema).optional().nullable(),
  params: DeserializedJsonSchema.optional().nullable(),
  output: DeserializedJsonSchema.optional().nullable(),
  context: DeserializedJsonSchema.optional().nullable(),
  error: import_zod12.z.string().optional().nullable(),
  parentId: import_zod12.z.string().optional().nullable(),
  style: StyleSchema.optional().nullable(),
  operation: import_zod12.z.string().optional().nullable(),
  callbackUrl: import_zod12.z.string().optional().nullable(),
  childExecutionMode: import_zod12.z.enum(["SEQUENTIAL", "PARALLEL"]).optional().nullable()
}), ServerTaskSchema = TaskSchema.extend({
  idempotencyKey: import_zod12.z.string(),
  attempts: import_zod12.z.number(),
  forceYield: import_zod12.z.boolean().optional().nullable()
}), CachedTaskSchema = import_zod12.z.object({
  id: import_zod12.z.string(),
  idempotencyKey: import_zod12.z.string(),
  status: TaskStatusSchema,
  noop: import_zod12.z.boolean().default(!1),
  output: DeserializedJsonSchema.optional().nullable(),
  parentId: import_zod12.z.string().optional().nullable()
});

// ../../packages/core/src/schemas/triggers.ts
var import_zod13 = require("zod");
var EventExampleSchema = import_zod13.z.object({
  id: import_zod13.z.string(),
  icon: import_zod13.z.string().optional(),
  name: import_zod13.z.string(),
  payload: import_zod13.z.any()
}), EventSpecificationSchema = import_zod13.z.object({
  name: import_zod13.z.string().or(import_zod13.z.array(import_zod13.z.string())),
  title: import_zod13.z.string(),
  source: import_zod13.z.string(),
  icon: import_zod13.z.string(),
  filter: EventFilterSchema.optional(),
  properties: import_zod13.z.array(DisplayPropertySchema).optional(),
  schema: import_zod13.z.any().optional(),
  examples: import_zod13.z.array(EventExampleSchema).optional()
}), DynamicTriggerMetadataSchema = import_zod13.z.object({
  type: import_zod13.z.literal("dynamic"),
  id: import_zod13.z.string()
}), TriggerHelpSchema = import_zod13.z.object({
  noRuns: import_zod13.z.object({
    text: import_zod13.z.string(),
    link: import_zod13.z.string().optional()
  }).optional()
}), StaticTriggerMetadataSchema = import_zod13.z.object({
  type: import_zod13.z.literal("static"),
  title: import_zod13.z.union([import_zod13.z.string(), import_zod13.z.array(import_zod13.z.string())]),
  properties: import_zod13.z.array(DisplayPropertySchema).optional(),
  rule: EventRuleSchema,
  link: import_zod13.z.string().optional(),
  help: TriggerHelpSchema.optional()
}), InvokeTriggerMetadataSchema = import_zod13.z.object({
  type: import_zod13.z.literal("invoke")
}), ScheduledTriggerMetadataSchema = import_zod13.z.object({
  type: import_zod13.z.literal("scheduled"),
  schedule: ScheduleMetadataSchema
}), TriggerMetadataSchema = import_zod13.z.discriminatedUnion("type", [
  DynamicTriggerMetadataSchema,
  StaticTriggerMetadataSchema,
  ScheduledTriggerMetadataSchema,
  InvokeTriggerMetadataSchema
]);

// ../../packages/core/src/schemas/runs.ts
var import_zod15 = require("zod");

// ../../packages/core/src/schemas/statuses.ts
var import_zod14 = require("zod");
var StatusUpdateStateSchema = import_zod14.z.union([
  import_zod14.z.literal("loading"),
  import_zod14.z.literal("success"),
  import_zod14.z.literal("failure")
]), StatusUpdateDataSchema = import_zod14.z.record(SerializableJsonSchema), StatusUpdateSchema = import_zod14.z.object({
  label: import_zod14.z.string().optional(),
  state: StatusUpdateStateSchema.optional(),
  data: StatusUpdateDataSchema.optional()
}), InitalStatusUpdateSchema = StatusUpdateSchema.required({ label: !0 }), StatusHistorySchema = import_zod14.z.array(StatusUpdateSchema), JobRunStatusRecordSchema = InitalStatusUpdateSchema.extend({
  key: import_zod14.z.string(),
  history: StatusHistorySchema
});

// ../../packages/core/src/schemas/runs.ts
var RunStatusSchema = import_zod15.z.union([
  import_zod15.z.literal("PENDING"),
  import_zod15.z.literal("QUEUED"),
  import_zod15.z.literal("WAITING_ON_CONNECTIONS"),
  import_zod15.z.literal("PREPROCESSING"),
  import_zod15.z.literal("STARTED"),
  import_zod15.z.literal("SUCCESS"),
  import_zod15.z.literal("FAILURE"),
  import_zod15.z.literal("TIMED_OUT"),
  import_zod15.z.literal("ABORTED"),
  import_zod15.z.literal("CANCELED"),
  import_zod15.z.literal("UNRESOLVED_AUTH"),
  import_zod15.z.literal("INVALID_PAYLOAD"),
  import_zod15.z.literal("EXECUTING"),
  import_zod15.z.literal("WAITING_TO_CONTINUE"),
  import_zod15.z.literal("WAITING_TO_EXECUTE")
]), RunTaskSchema = import_zod15.z.object({
  /** The Task id */
  id: import_zod15.z.string(),
  /** The key that you defined when creating the Task, the first param in any task. */
  displayKey: import_zod15.z.string().nullable(),
  /** The Task status */
  status: TaskStatusSchema,
  /** The name of the Task */
  name: import_zod15.z.string(),
  /** The icon of the Task, a string.
   * For integrations, this will be a lowercase name of the company.
   * Can be used with the [@trigger.dev/companyicons](https://www.npmjs.com/package/@trigger.dev/companyicons) package to display an svg. */
  icon: import_zod15.z.string().nullable(),
  /** When the task started */
  startedAt: import_zod15.z.coerce.date().nullable(),
  /** When the task completed */
  completedAt: import_zod15.z.coerce.date().nullable()
}), RunTaskWithSubtasksSchema = RunTaskSchema.extend({
  subtasks: import_zod15.z.lazy(() => RunTaskWithSubtasksSchema.array()).optional()
}), GetRunOptionsSchema = import_zod15.z.object({
  /** Return subtasks, which appear in a `subtasks` array on a task. @default false */
  subtasks: import_zod15.z.boolean().optional(),
  /** You can use this to get more tasks, if there are more than are returned in a single batch @default undefined */
  cursor: import_zod15.z.string().optional(),
  /** How many tasks you want to return in one go, max 50. @default 20 */
  take: import_zod15.z.number().optional()
}), GetRunOptionsWithTaskDetailsSchema = GetRunOptionsSchema.extend({
  /** If `true`, it returns the `params` and `output` of all tasks. @default false */
  taskdetails: import_zod15.z.boolean().optional()
}), RunSchema = import_zod15.z.object({
  /** The Run id */
  id: import_zod15.z.string(),
  /** The Run status */
  status: RunStatusSchema,
  /** When the run started */
  startedAt: import_zod15.z.coerce.date().nullable(),
  /** When the run was last updated */
  updatedAt: import_zod15.z.coerce.date().nullable(),
  /** When the run was completed */
  completedAt: import_zod15.z.coerce.date().nullable()
}), GetRunSchema = RunSchema.extend({
  /** The output of the run */
  output: import_zod15.z.any().optional(),
  /** The tasks from the run */
  tasks: import_zod15.z.array(RunTaskWithSubtasksSchema),
  /** Any status updates that were published from the run */
  statuses: import_zod15.z.array(JobRunStatusRecordSchema).default([]),
  /** If there are more tasks, you can use this to get them */
  nextCursor: import_zod15.z.string().optional()
}), GetRunsOptionsSchema = import_zod15.z.object({
  /** You can use this to get more tasks, if there are more than are returned in a single batch @default undefined */
  cursor: import_zod15.z.string().optional(),
  /** How many runs you want to return in one go, max 50. @default 20 */
  take: import_zod15.z.number().optional()
}), GetRunsSchema = import_zod15.z.object({
  /** The runs from the query */
  runs: RunSchema.array(),
  /** If there are more runs, you can use this to get them */
  nextCursor: import_zod15.z.string().optional()
});

// ../../packages/core/src/schemas/requestFilter.ts
var import_zod16 = require("zod");
var StringMatchSchema = import_zod16.z.union([
  /** Match against a string */
  import_zod16.z.array(import_zod16.z.string()),
  import_zod16.z.array(import_zod16.z.union(stringPatternMatchers))
]), HTTPMethodUnionSchema = import_zod16.z.union([
  import_zod16.z.literal("GET"),
  import_zod16.z.literal("POST"),
  import_zod16.z.literal("PUT"),
  import_zod16.z.literal("PATCH"),
  import_zod16.z.literal("DELETE"),
  import_zod16.z.literal("HEAD"),
  import_zod16.z.literal("OPTIONS")
]), RequestFilterSchema = import_zod16.z.object({
  /** An array of HTTP methods to match.
   * For example, `["GET", "POST"]` will match both `GET` and `POST` Requests. */
  method: import_zod16.z.array(HTTPMethodUnionSchema).optional(),
  /** An object of header key/values to match. 
     * This uses the [EventFilter matching syntax](https://trigger.dev/docs/documentation/guides/event-filter).
  
      @example
    ```ts
    filter: {
      header: {
        "content-type": ["application/json"],
      },
    },
    ``` */
  headers: import_zod16.z.record(StringMatchSchema).optional(),
  /** An object of query parameters to match. 
     * This uses the [EventFilter matching syntax](https://trigger.dev/docs/documentation/guides/event-filter).
  
    @example
    ```ts
    filter: {
      query: {
        "hub.mode": [{ $startsWith: "sub" }],
      },
    },
    ``` */
  query: import_zod16.z.record(StringMatchSchema).optional(),
  /** An object of key/values to match.
   * This uses the [EventFilter matching syntax](https://trigger.dev/docs/documentation/guides/event-filter).
   */
  body: EventFilterSchema.optional()
}), ResponseFilterSchema = RequestFilterSchema.omit({ method: !0, query: !0 }).extend({
  status: import_zod16.z.array(import_zod16.z.number()).optional()
});

// ../../packages/core/src/schemas/api.ts
var UpdateTriggerSourceBodyV1Schema = import_zod17.z.object({
  registeredEvents: import_zod17.z.array(import_zod17.z.string()),
  secret: import_zod17.z.string().optional(),
  data: SerializableJsonSchema.optional()
}), UpdateTriggerSourceBodyV2Schema = import_zod17.z.object({
  secret: import_zod17.z.string().optional(),
  data: SerializableJsonSchema.optional(),
  options: import_zod17.z.object({
    event: import_zod17.z.array(import_zod17.z.string())
  }).and(import_zod17.z.record(import_zod17.z.string(), import_zod17.z.array(import_zod17.z.string())).optional())
}), UpdateWebhookBodySchema = import_zod17.z.discriminatedUnion("active", [
  import_zod17.z.object({
    active: import_zod17.z.literal(!1)
  }),
  import_zod17.z.object({
    active: import_zod17.z.literal(!0),
    config: import_zod17.z.record(import_zod17.z.string().array())
  })
]), RegisterHTTPTriggerSourceBodySchema = import_zod17.z.object({
  type: import_zod17.z.literal("HTTP"),
  url: import_zod17.z.string().url()
}), RegisterSMTPTriggerSourceBodySchema = import_zod17.z.object({
  type: import_zod17.z.literal("SMTP")
}), RegisterSQSTriggerSourceBodySchema = import_zod17.z.object({
  type: import_zod17.z.literal("SQS")
}), RegisterSourceChannelBodySchema = import_zod17.z.discriminatedUnion("type", [
  RegisterHTTPTriggerSourceBodySchema,
  RegisterSMTPTriggerSourceBodySchema,
  RegisterSQSTriggerSourceBodySchema
]), REGISTER_WEBHOOK = "dev.trigger.webhook.register";
var RegisterWebhookSourceSchema = import_zod17.z.object({
  key: import_zod17.z.string(),
  params: import_zod17.z.any(),
  config: import_zod17.z.any(),
  active: import_zod17.z.boolean(),
  secret: import_zod17.z.string(),
  url: import_zod17.z.string(),
  data: DeserializedJsonSchema.optional(),
  clientId: import_zod17.z.string().optional()
}), RegisterWebhookPayloadSchema = import_zod17.z.object({
  active: import_zod17.z.boolean(),
  params: import_zod17.z.any().optional(),
  config: import_zod17.z.object({
    current: import_zod17.z.record(import_zod17.z.string().array()),
    desired: import_zod17.z.record(import_zod17.z.string().array())
  }),
  // from HTTP Endpoint
  url: import_zod17.z.string(),
  secret: import_zod17.z.string()
}), REGISTER_SOURCE_EVENT_V1 = "dev.trigger.source.register", REGISTER_SOURCE_EVENT_V2 = "dev.trigger.source.register.v2", RegisterTriggerSourceSchema = import_zod17.z.object({
  key: import_zod17.z.string(),
  params: import_zod17.z.any(),
  active: import_zod17.z.boolean(),
  secret: import_zod17.z.string(),
  data: DeserializedJsonSchema.optional(),
  channel: RegisterSourceChannelBodySchema,
  clientId: import_zod17.z.string().optional()
}), SourceEventOptionSchema = import_zod17.z.object({
  name: import_zod17.z.string(),
  value: import_zod17.z.string()
}), RegisterSourceEventSchemaV1 = import_zod17.z.object({
  /** The id of the source */
  id: import_zod17.z.string(),
  source: RegisterTriggerSourceSchema,
  events: import_zod17.z.array(import_zod17.z.string()),
  missingEvents: import_zod17.z.array(import_zod17.z.string()),
  orphanedEvents: import_zod17.z.array(import_zod17.z.string()),
  dynamicTriggerId: import_zod17.z.string().optional()
}), RegisteredOptionsDiffSchema = import_zod17.z.object({
  desired: import_zod17.z.array(import_zod17.z.string()),
  missing: import_zod17.z.array(import_zod17.z.string()),
  orphaned: import_zod17.z.array(import_zod17.z.string())
}), RegisterSourceEventOptionsSchema = import_zod17.z.object({
  event: RegisteredOptionsDiffSchema
}).and(import_zod17.z.record(import_zod17.z.string(), RegisteredOptionsDiffSchema)), RegisterSourceEventSchemaV2 = import_zod17.z.object({
  /** The id of the source */
  id: import_zod17.z.string(),
  source: RegisterTriggerSourceSchema,
  options: RegisterSourceEventOptionsSchema,
  dynamicTriggerId: import_zod17.z.string().optional()
}), TriggerSourceSchema = import_zod17.z.object({
  id: import_zod17.z.string(),
  key: import_zod17.z.string()
}), HttpSourceResponseMetadataSchema = DeserializedJsonSchema, HandleTriggerSourceSchema = import_zod17.z.object({
  key: import_zod17.z.string(),
  secret: import_zod17.z.string(),
  data: import_zod17.z.any(),
  params: import_zod17.z.any(),
  auth: ConnectionAuthSchema.optional(),
  metadata: HttpSourceResponseMetadataSchema.optional()
}), HttpSourceRequestHeadersSchema = import_zod17.z.object({
  "x-ts-key": import_zod17.z.string(),
  "x-ts-dynamic-id": import_zod17.z.string().optional(),
  "x-ts-secret": import_zod17.z.string(),
  "x-ts-data": import_zod17.z.string().transform((s) => JSON.parse(s)),
  "x-ts-params": import_zod17.z.string().transform((s) => JSON.parse(s)),
  "x-ts-http-url": import_zod17.z.string(),
  "x-ts-http-method": import_zod17.z.string(),
  "x-ts-http-headers": import_zod17.z.string().transform((s) => import_zod17.z.record(import_zod17.z.string()).parse(JSON.parse(s))),
  "x-ts-auth": import_zod17.z.string().optional().transform((s) => {
    if (s === void 0)
      return;
    let json118 = JSON.parse(s);
    return ConnectionAuthSchema.parse(json118);
  }),
  "x-ts-metadata": import_zod17.z.string().optional().transform((s) => {
    if (s === void 0)
      return;
    let json118 = JSON.parse(s);
    return DeserializedJsonSchema.parse(json118);
  })
}), HttpEndpointRequestHeadersSchema = import_zod17.z.object({
  "x-ts-key": import_zod17.z.string(),
  "x-ts-http-url": import_zod17.z.string(),
  "x-ts-http-method": import_zod17.z.string(),
  "x-ts-http-headers": import_zod17.z.string().transform((s) => import_zod17.z.record(import_zod17.z.string()).parse(JSON.parse(s)))
}), WebhookSourceRequestHeadersSchema = import_zod17.z.object({
  "x-ts-key": import_zod17.z.string(),
  "x-ts-dynamic-id": import_zod17.z.string().optional(),
  "x-ts-secret": import_zod17.z.string(),
  "x-ts-params": import_zod17.z.string().transform((s) => JSON.parse(s)),
  "x-ts-http-url": import_zod17.z.string(),
  "x-ts-http-method": import_zod17.z.string(),
  "x-ts-http-headers": import_zod17.z.string().transform((s) => import_zod17.z.record(import_zod17.z.string()).parse(JSON.parse(s)))
}), PongSuccessResponseSchema = import_zod17.z.object({
  ok: import_zod17.z.literal(!0),
  triggerVersion: import_zod17.z.string().optional(),
  triggerSdkVersion: import_zod17.z.string().optional()
}), PongErrorResponseSchema = import_zod17.z.object({
  ok: import_zod17.z.literal(!1),
  error: import_zod17.z.string(),
  triggerVersion: import_zod17.z.string().optional(),
  triggerSdkVersion: import_zod17.z.string().optional()
}), PongResponseSchema = import_zod17.z.discriminatedUnion("ok", [
  PongSuccessResponseSchema,
  PongErrorResponseSchema
]), ValidateSuccessResponseSchema = import_zod17.z.object({
  ok: import_zod17.z.literal(!0),
  endpointId: import_zod17.z.string(),
  triggerVersion: import_zod17.z.string().optional()
}), ValidateErrorResponseSchema = import_zod17.z.object({
  ok: import_zod17.z.literal(!1),
  error: import_zod17.z.string(),
  triggerVersion: import_zod17.z.string().optional()
}), ValidateResponseSchema = import_zod17.z.discriminatedUnion("ok", [
  ValidateSuccessResponseSchema,
  ValidateErrorResponseSchema
]), QueueOptionsSchema = import_zod17.z.object({
  name: import_zod17.z.string(),
  maxConcurrent: import_zod17.z.number().optional()
}), ConcurrencyLimitOptionsSchema = import_zod17.z.object({
  id: import_zod17.z.string(),
  limit: import_zod17.z.number()
}), JobMetadataSchema = import_zod17.z.object({
  id: import_zod17.z.string(),
  name: import_zod17.z.string(),
  version: import_zod17.z.string(),
  event: EventSpecificationSchema,
  trigger: TriggerMetadataSchema,
  integrations: import_zod17.z.record(IntegrationConfigSchema),
  internal: import_zod17.z.boolean().default(!1),
  enabled: import_zod17.z.boolean(),
  startPosition: import_zod17.z.enum(["initial", "latest"]),
  preprocessRuns: import_zod17.z.boolean(),
  concurrencyLimit: ConcurrencyLimitOptionsSchema.or(import_zod17.z.number().int().positive()).optional()
}), SourceMetadataV1Schema = import_zod17.z.object({
  version: import_zod17.z.literal("1"),
  channel: import_zod17.z.enum(["HTTP", "SQS", "SMTP"]),
  integration: IntegrationConfigSchema,
  key: import_zod17.z.string(),
  params: import_zod17.z.any(),
  events: import_zod17.z.array(import_zod17.z.string()),
  registerSourceJob: import_zod17.z.object({
    id: import_zod17.z.string(),
    version: import_zod17.z.string()
  }).optional()
}), SourceMetadataV2Schema = import_zod17.z.object({
  version: import_zod17.z.literal("2"),
  channel: import_zod17.z.enum(["HTTP", "SQS", "SMTP"]),
  integration: IntegrationConfigSchema,
  key: import_zod17.z.string(),
  params: import_zod17.z.any(),
  options: import_zod17.z.record(import_zod17.z.array(import_zod17.z.string())),
  registerSourceJob: import_zod17.z.object({
    id: import_zod17.z.string(),
    version: import_zod17.z.string()
  }).optional()
}), SourceMetadataSchema = import_zod17.z.preprocess(
  addMissingVersionField,
  import_zod17.z.discriminatedUnion("version", [SourceMetadataV1Schema, SourceMetadataV2Schema])
), WebhookMetadataSchema = import_zod17.z.object({
  key: import_zod17.z.string(),
  params: import_zod17.z.any(),
  config: import_zod17.z.record(import_zod17.z.array(import_zod17.z.string())),
  integration: IntegrationConfigSchema,
  httpEndpoint: import_zod17.z.object({
    id: import_zod17.z.string()
  })
}), WebhookContextMetadataSchema = import_zod17.z.object({
  params: import_zod17.z.any(),
  config: import_zod17.z.record(import_zod17.z.string().array()),
  secret: import_zod17.z.string()
}), DynamicTriggerEndpointMetadataSchema = import_zod17.z.object({
  id: import_zod17.z.string(),
  jobs: import_zod17.z.array(JobMetadataSchema.pick({ id: !0, version: !0 })),
  registerSourceJob: import_zod17.z.object({
    id: import_zod17.z.string(),
    version: import_zod17.z.string()
  }).optional()
}), HttpEndpointMetadataSchema = import_zod17.z.object({
  id: import_zod17.z.string(),
  version: import_zod17.z.string(),
  enabled: import_zod17.z.boolean(),
  title: import_zod17.z.string().optional(),
  icon: import_zod17.z.string().optional(),
  properties: import_zod17.z.array(DisplayPropertySchema).optional(),
  event: EventSpecificationSchema,
  immediateResponseFilter: RequestFilterSchema.optional(),
  skipTriggeringRuns: import_zod17.z.boolean().optional(),
  source: import_zod17.z.string()
}), IndexEndpointResponseSchema = import_zod17.z.object({
  jobs: import_zod17.z.array(JobMetadataSchema),
  sources: import_zod17.z.array(SourceMetadataSchema),
  webhooks: import_zod17.z.array(WebhookMetadataSchema).optional(),
  dynamicTriggers: import_zod17.z.array(DynamicTriggerEndpointMetadataSchema),
  dynamicSchedules: import_zod17.z.array(RegisterDynamicSchedulePayloadSchema),
  httpEndpoints: import_zod17.z.array(HttpEndpointMetadataSchema).optional()
}), EndpointIndexErrorSchema = import_zod17.z.object({
  message: import_zod17.z.string(),
  raw: import_zod17.z.any().optional()
}), IndexEndpointStatsSchema = import_zod17.z.object({
  jobs: import_zod17.z.number(),
  sources: import_zod17.z.number(),
  webhooks: import_zod17.z.number().optional(),
  dynamicTriggers: import_zod17.z.number(),
  dynamicSchedules: import_zod17.z.number(),
  disabledJobs: import_zod17.z.number().default(0),
  httpEndpoints: import_zod17.z.number().default(0)
});
function parseEndpointIndexStats(stats) {
  if (stats != null)
    return IndexEndpointStatsSchema.parse(stats);
}
var GetEndpointIndexResponseSchema = import_zod17.z.discriminatedUnion("status", [
  import_zod17.z.object({
    status: import_zod17.z.literal("PENDING"),
    updatedAt: import_zod17.z.coerce.date()
  }),
  import_zod17.z.object({
    status: import_zod17.z.literal("STARTED"),
    updatedAt: import_zod17.z.coerce.date()
  }),
  import_zod17.z.object({
    status: import_zod17.z.literal("SUCCESS"),
    stats: IndexEndpointStatsSchema,
    updatedAt: import_zod17.z.coerce.date()
  }),
  import_zod17.z.object({
    status: import_zod17.z.literal("FAILURE"),
    error: EndpointIndexErrorSchema,
    updatedAt: import_zod17.z.coerce.date()
  })
]), EndpointHeadersSchema = import_zod17.z.object({
  "trigger-version": import_zod17.z.string().optional(),
  "trigger-sdk-version": import_zod17.z.string().optional()
}), ExecuteJobRunMetadataSchema = import_zod17.z.object({
  successSubscription: import_zod17.z.boolean().optional(),
  failedSubscription: import_zod17.z.boolean().optional()
}), ExecuteJobHeadersSchema = EndpointHeadersSchema.extend({
  "x-trigger-run-metadata": import_zod17.z.preprocess((val) => typeof val == "string" && JSON.parse(val), ExecuteJobRunMetadataSchema).optional()
}), RawEventSchema = import_zod17.z.object({
  /** The `name` property must exactly match any subscriptions you want to
      trigger. */
  name: import_zod17.z.string(),
  /** The `payload` property will be sent to any matching Jobs and will appear
      as the `payload` param of the `run()` function. You can leave this
      parameter out if you just want to trigger a Job without any input data. */
  payload: import_zod17.z.any(),
  /** The optional `context` property will be sent to any matching Jobs and will
      be passed through as the `context.event.context` param of the `run()`
      function. This is optional but can be useful if you want to pass through
      some additional context to the Job. */
  context: import_zod17.z.any().optional(),
  /** The `id` property uniquely identify this particular event. If unset it
      will be set automatically using `ulid`. */
  id: import_zod17.z.string().default(() => (0, import_ulidx.ulid)()),
  /** This is optional, it defaults to the current timestamp. Usually you would
      only set this if you have a timestamp that you wish to pass through, e.g.
      you receive a timestamp from a service and you want the same timestamp to
      be used in your Job. */
  timestamp: import_zod17.z.coerce.date().optional(),
  /** This is optional, it defaults to "trigger.dev". It can be useful to set
      this as you can filter events using this in the `eventTrigger()`. */
  source: import_zod17.z.string().optional(),
  /** This is optional, it defaults to "JSON". If your event is actually a request,
      with a url, headers, method and rawBody you can use "REQUEST" */
  payloadType: import_zod17.z.union([import_zod17.z.literal("JSON"), import_zod17.z.literal("REQUEST")]).optional()
}), ApiEventLogSchema = import_zod17.z.object({
  /** The `id` of the event that was sent.
   */
  id: import_zod17.z.string(),
  /** The `name` of the event that was sent. */
  name: import_zod17.z.string(),
  /** The `payload` of the event that was sent */
  payload: DeserializedJsonSchema,
  /** The `context` of the event that was sent. Is `undefined` if no context was
      set when sending the event. */
  context: DeserializedJsonSchema.optional().nullable(),
  /** The `timestamp` of the event that was sent */
  timestamp: import_zod17.z.coerce.date(),
  /** The timestamp when the event will be delivered to any matching Jobs. Is
      `undefined` if `deliverAt` or `deliverAfter` wasn't set when sending the
      event. */
  deliverAt: import_zod17.z.coerce.date().optional().nullable(),
  /** The timestamp when the event was delivered. Is `undefined` if `deliverAt`
      or `deliverAfter` were set when sending the event. */
  deliveredAt: import_zod17.z.coerce.date().optional().nullable(),
  /** The timestamp when the event was cancelled. Is `undefined` if the event
   * wasn't cancelled. */
  cancelledAt: import_zod17.z.coerce.date().optional().nullable()
}), SendEventOptionsSchema = import_zod17.z.object({
  /** An optional Date when you want the event to trigger Jobs. The event will
      be sent to the platform immediately but won't be acted upon until the
      specified time. */
  deliverAt: import_zod17.z.coerce.date().optional(),
  /** An optional number of seconds you want to wait for the event to trigger
      any relevant Jobs. The event will be sent to the platform immediately but
      won't be delivered until after the elapsed number of seconds. */
  deliverAfter: import_zod17.z.number().int().optional(),
  /** This optional param will be used by Trigger.dev Connect, which
      is coming soon. */
  accountId: import_zod17.z.string().optional()
}), SendEventBodySchema = import_zod17.z.object({
  event: RawEventSchema,
  options: SendEventOptionsSchema.optional()
}), SendBulkEventsBodySchema = import_zod17.z.object({
  events: RawEventSchema.array(),
  options: SendEventOptionsSchema.optional()
}), DeliverEventResponseSchema = import_zod17.z.object({
  deliveredAt: import_zod17.z.string().datetime()
}), RuntimeEnvironmentTypeSchema = import_zod17.z.enum([
  "PRODUCTION",
  "STAGING",
  "DEVELOPMENT",
  "PREVIEW"
]), RunSourceContextSchema = import_zod17.z.object({
  id: import_zod17.z.string(),
  metadata: import_zod17.z.any()
}), AutoYieldConfigSchema = import_zod17.z.object({
  startTaskThreshold: import_zod17.z.number(),
  beforeExecuteTaskThreshold: import_zod17.z.number(),
  beforeCompleteTaskThreshold: import_zod17.z.number(),
  afterCompleteTaskThreshold: import_zod17.z.number()
}), RunJobBodySchema = import_zod17.z.object({
  event: ApiEventLogSchema,
  job: import_zod17.z.object({
    id: import_zod17.z.string(),
    version: import_zod17.z.string()
  }),
  run: import_zod17.z.object({
    id: import_zod17.z.string(),
    isTest: import_zod17.z.boolean(),
    isRetry: import_zod17.z.boolean().default(!1),
    startedAt: import_zod17.z.coerce.date()
  }),
  environment: import_zod17.z.object({
    id: import_zod17.z.string(),
    slug: import_zod17.z.string(),
    type: RuntimeEnvironmentTypeSchema
  }),
  organization: import_zod17.z.object({
    id: import_zod17.z.string(),
    title: import_zod17.z.string(),
    slug: import_zod17.z.string()
  }),
  project: import_zod17.z.object({
    id: import_zod17.z.string(),
    name: import_zod17.z.string(),
    slug: import_zod17.z.string()
  }).optional(),
  account: import_zod17.z.object({
    id: import_zod17.z.string(),
    metadata: import_zod17.z.any()
  }).optional(),
  source: RunSourceContextSchema.optional(),
  tasks: import_zod17.z.array(CachedTaskSchema).optional(),
  cachedTaskCursor: import_zod17.z.string().optional(),
  noopTasksSet: import_zod17.z.string().optional(),
  connections: import_zod17.z.record(ConnectionAuthSchema).optional(),
  yieldedExecutions: import_zod17.z.string().array().optional(),
  runChunkExecutionLimit: import_zod17.z.number().optional(),
  autoYieldConfig: AutoYieldConfigSchema.optional()
}), RunJobErrorSchema = import_zod17.z.object({
  status: import_zod17.z.literal("ERROR"),
  error: ErrorWithStackSchema,
  task: TaskSchema.optional()
}), RunJobYieldExecutionErrorSchema = import_zod17.z.object({
  status: import_zod17.z.literal("YIELD_EXECUTION"),
  key: import_zod17.z.string()
}), AutoYieldMetadataSchema = import_zod17.z.object({
  location: import_zod17.z.string(),
  timeRemaining: import_zod17.z.number(),
  timeElapsed: import_zod17.z.number(),
  limit: import_zod17.z.number().optional()
}), RunJobAutoYieldExecutionErrorSchema = AutoYieldMetadataSchema.extend({
  status: import_zod17.z.literal("AUTO_YIELD_EXECUTION")
}), RunJobAutoYieldWithCompletedTaskExecutionErrorSchema = import_zod17.z.object({
  status: import_zod17.z.literal("AUTO_YIELD_EXECUTION_WITH_COMPLETED_TASK"),
  id: import_zod17.z.string(),
  properties: import_zod17.z.array(DisplayPropertySchema).optional(),
  output: import_zod17.z.string().optional(),
  data: AutoYieldMetadataSchema
}), RunJobAutoYieldRateLimitErrorSchema = import_zod17.z.object({
  status: import_zod17.z.literal("AUTO_YIELD_RATE_LIMIT"),
  reset: import_zod17.z.coerce.number()
}), RunJobInvalidPayloadErrorSchema = import_zod17.z.object({
  status: import_zod17.z.literal("INVALID_PAYLOAD"),
  errors: import_zod17.z.array(SchemaErrorSchema)
}), RunJobUnresolvedAuthErrorSchema = import_zod17.z.object({
  status: import_zod17.z.literal("UNRESOLVED_AUTH_ERROR"),
  issues: import_zod17.z.record(import_zod17.z.object({ id: import_zod17.z.string(), error: import_zod17.z.string() }))
}), RunJobResumeWithTaskSchema = import_zod17.z.object({
  status: import_zod17.z.literal("RESUME_WITH_TASK"),
  task: TaskSchema
}), RunJobRetryWithTaskSchema = import_zod17.z.object({
  status: import_zod17.z.literal("RETRY_WITH_TASK"),
  task: TaskSchema,
  error: ErrorWithStackSchema,
  retryAt: import_zod17.z.coerce.date()
}), RunJobCanceledWithTaskSchema = import_zod17.z.object({
  status: import_zod17.z.literal("CANCELED"),
  task: TaskSchema
}), RunJobSuccessSchema = import_zod17.z.object({
  status: import_zod17.z.literal("SUCCESS"),
  output: DeserializedJsonSchema.optional()
}), RunJobErrorResponseSchema = import_zod17.z.union([
  RunJobAutoYieldExecutionErrorSchema,
  RunJobAutoYieldWithCompletedTaskExecutionErrorSchema,
  RunJobYieldExecutionErrorSchema,
  RunJobAutoYieldRateLimitErrorSchema,
  RunJobErrorSchema,
  RunJobUnresolvedAuthErrorSchema,
  RunJobInvalidPayloadErrorSchema,
  RunJobResumeWithTaskSchema,
  RunJobRetryWithTaskSchema,
  RunJobCanceledWithTaskSchema
]), RunJobResumeWithParallelTaskSchema = import_zod17.z.object({
  status: import_zod17.z.literal("RESUME_WITH_PARALLEL_TASK"),
  task: TaskSchema,
  childErrors: import_zod17.z.array(RunJobErrorResponseSchema)
}), RunJobResponseSchema = import_zod17.z.discriminatedUnion("status", [
  RunJobAutoYieldExecutionErrorSchema,
  RunJobAutoYieldWithCompletedTaskExecutionErrorSchema,
  RunJobYieldExecutionErrorSchema,
  RunJobAutoYieldRateLimitErrorSchema,
  RunJobErrorSchema,
  RunJobUnresolvedAuthErrorSchema,
  RunJobInvalidPayloadErrorSchema,
  RunJobResumeWithTaskSchema,
  RunJobResumeWithParallelTaskSchema,
  RunJobRetryWithTaskSchema,
  RunJobCanceledWithTaskSchema,
  RunJobSuccessSchema
]), PreprocessRunBodySchema = import_zod17.z.object({
  event: ApiEventLogSchema,
  job: import_zod17.z.object({
    id: import_zod17.z.string(),
    version: import_zod17.z.string()
  }),
  run: import_zod17.z.object({
    id: import_zod17.z.string(),
    isTest: import_zod17.z.boolean()
  }),
  environment: import_zod17.z.object({
    id: import_zod17.z.string(),
    slug: import_zod17.z.string(),
    type: RuntimeEnvironmentTypeSchema
  }),
  organization: import_zod17.z.object({
    id: import_zod17.z.string(),
    title: import_zod17.z.string(),
    slug: import_zod17.z.string()
  }),
  account: import_zod17.z.object({
    id: import_zod17.z.string(),
    metadata: import_zod17.z.any()
  }).optional()
}), PreprocessRunResponseSchema = import_zod17.z.object({
  abort: import_zod17.z.boolean(),
  properties: import_zod17.z.array(DisplayPropertySchema).optional()
}), CreateRunResponseOkSchema = import_zod17.z.object({
  ok: import_zod17.z.literal(!0),
  data: import_zod17.z.object({
    id: import_zod17.z.string()
  })
}), CreateRunResponseErrorSchema = import_zod17.z.object({
  ok: import_zod17.z.literal(!1),
  error: import_zod17.z.string()
}), CreateRunResponseBodySchema = import_zod17.z.discriminatedUnion("ok", [
  CreateRunResponseOkSchema,
  CreateRunResponseErrorSchema
]), RedactStringSchema = import_zod17.z.object({
  __redactedString: import_zod17.z.literal(!0),
  strings: import_zod17.z.array(import_zod17.z.string()),
  interpolations: import_zod17.z.array(import_zod17.z.string())
}), LogMessageSchema = import_zod17.z.object({
  level: import_zod17.z.enum(["DEBUG", "INFO", "WARN", "ERROR"]),
  message: import_zod17.z.string(),
  data: SerializableJsonSchema.optional()
}), RedactSchema = import_zod17.z.object({
  paths: import_zod17.z.array(import_zod17.z.string())
}), RetryOptionsSchema = import_zod17.z.object({
  /** The maximum number of times to retry the request. */
  limit: import_zod17.z.number().optional(),
  /** The exponential factor to use when calculating the next retry time. */
  factor: import_zod17.z.number().optional(),
  /** The minimum amount of time to wait before retrying the request. */
  minTimeoutInMs: import_zod17.z.number().optional(),
  /** The maximum amount of time to wait before retrying the request. */
  maxTimeoutInMs: import_zod17.z.number().optional(),
  /** Whether to randomize the retry time. */
  randomize: import_zod17.z.boolean().optional()
}), RunTaskOptionsSchema = import_zod17.z.object({
  /** The name of the Task is required. This is displayed on the Task in the logs. */
  name: import_zod17.z.string().optional(),
  /** The Task will wait and only start at the specified Date  */
  delayUntil: import_zod17.z.coerce.date().optional(),
  /** Retry options */
  retry: RetryOptionsSchema.optional(),
  /** The icon for the Task, it will appear in the logs.
   *  You can use the name of a company in lowercase, e.g. "github".
   *  Or any icon name that [Tabler Icons](https://tabler-icons.io/) supports. */
  icon: import_zod17.z.string().optional(),
  /** The key for the Task that you want to appear in the logs */
  displayKey: import_zod17.z.string().optional(),
  /** A description of the Task */
  description: import_zod17.z.string().optional(),
  /** Properties that are displayed in the logs */
  properties: import_zod17.z.array(DisplayPropertySchema).optional(),
  /** The input params to the Task, will be displayed in the logs  */
  params: import_zod17.z.any(),
  /** The style of the log entry. */
  style: StyleSchema.optional(),
  /** Allows you to expose a `task.callbackUrl` to use in your tasks. Enabling this feature will cause the task to return the data sent to the callbackUrl instead of the usual async callback result. */
  callback: import_zod17.z.object({
    /** Causes the task to wait for and return the data of the first request sent to `task.callbackUrl`. */
    enabled: import_zod17.z.boolean(),
    /** Time to wait for the first request to `task.callbackUrl`. Default: One hour. */
    timeoutInSeconds: import_zod17.z.number()
  }).partial().optional(),
  /** Allows you to link the Integration connection in the logs. This is handled automatically in integrations.  */
  connectionKey: import_zod17.z.string().optional(),
  /** An operation you want to perform on the Trigger.dev platform, current only "fetch", "fetch-response", and "fetch-poll" is supported. If you wish to `fetch` use [`io.backgroundFetch()`](https://trigger.dev/docs/sdk/io/backgroundfetch) instead. */
  operation: import_zod17.z.enum(["fetch", "fetch-response", "fetch-poll"]).optional(),
  /** A No Operation means that the code won't be executed. This is used internally to implement features like [io.wait()](https://trigger.dev/docs/sdk/io/wait).  */
  noop: import_zod17.z.boolean().default(!1),
  redact: RedactSchema.optional(),
  parallel: import_zod17.z.boolean().optional()
}), RunTaskBodyInputSchema = RunTaskOptionsSchema.extend({
  idempotencyKey: import_zod17.z.string(),
  parentId: import_zod17.z.string().optional()
}), RunTaskBodyOutputSchema = RunTaskBodyInputSchema.extend({
  properties: import_zod17.z.array(DisplayPropertySchema.partial()).optional(),
  params: DeserializedJsonSchema.optional().nullable(),
  callback: import_zod17.z.object({
    enabled: import_zod17.z.boolean(),
    timeoutInSeconds: import_zod17.z.number().default(3600)
  }).optional()
}), RunTaskResponseWithCachedTasksBodySchema = import_zod17.z.object({
  task: ServerTaskSchema,
  cachedTasks: import_zod17.z.object({
    tasks: import_zod17.z.array(CachedTaskSchema),
    cursor: import_zod17.z.string().optional()
  }).optional()
}), CompleteTaskBodyInputSchema = RunTaskBodyInputSchema.pick({
  properties: !0,
  description: !0,
  params: !0
}).extend({
  output: SerializableJsonSchema.optional().transform(
    (v) => v ? DeserializedJsonSchema.parse(JSON.parse(JSON.stringify(v))) : {}
  )
}), CompleteTaskBodyV2InputSchema = RunTaskBodyInputSchema.pick({
  properties: !0,
  description: !0,
  params: !0
}).extend({
  output: import_zod17.z.string().optional()
}), FailTaskBodyInputSchema = import_zod17.z.object({
  error: ErrorWithStackSchema
}), NormalizedRequestSchema = import_zod17.z.object({
  headers: import_zod17.z.record(import_zod17.z.string()),
  method: import_zod17.z.string(),
  query: import_zod17.z.record(import_zod17.z.string()),
  url: import_zod17.z.string(),
  body: import_zod17.z.any()
}), NormalizedResponseSchema = import_zod17.z.object({
  status: import_zod17.z.number(),
  body: import_zod17.z.any(),
  headers: import_zod17.z.record(import_zod17.z.string()).optional()
}), HttpSourceResponseSchema = import_zod17.z.object({
  response: NormalizedResponseSchema,
  events: import_zod17.z.array(RawEventSchema),
  metadata: HttpSourceResponseMetadataSchema.optional()
}), WebhookDeliveryResponseSchema = import_zod17.z.object({
  response: NormalizedResponseSchema,
  verified: import_zod17.z.boolean(),
  error: import_zod17.z.string().optional()
}), RegisterTriggerBodySchemaV1 = import_zod17.z.object({
  rule: EventRuleSchema,
  source: SourceMetadataV1Schema
}), RegisterTriggerBodySchemaV2 = import_zod17.z.object({
  rule: EventRuleSchema,
  source: SourceMetadataV2Schema,
  accountId: import_zod17.z.string().optional()
}), InitializeTriggerBodySchema = import_zod17.z.object({
  id: import_zod17.z.string(),
  params: import_zod17.z.any(),
  accountId: import_zod17.z.string().optional(),
  metadata: import_zod17.z.any().optional()
}), RegisterCommonScheduleBodySchema = import_zod17.z.object({
  /** A unique id for the schedule. This is used to identify and unregister the schedule later. */
  id: import_zod17.z.string(),
  /** Any additional metadata about the schedule. */
  metadata: import_zod17.z.any(),
  /** An optional Account ID to associate with runs triggered by this schedule */
  accountId: import_zod17.z.string().optional()
}), RegisterIntervalScheduleBodySchema = RegisterCommonScheduleBodySchema.merge(IntervalMetadataSchema), InitializeCronScheduleBodySchema = RegisterCommonScheduleBodySchema.merge(CronMetadataSchema), RegisterScheduleBodySchema = import_zod17.z.discriminatedUnion("type", [
  RegisterIntervalScheduleBodySchema,
  InitializeCronScheduleBodySchema
]), RegisterScheduleResponseBodySchema = import_zod17.z.object({
  id: import_zod17.z.string(),
  schedule: ScheduleMetadataSchema,
  metadata: import_zod17.z.any(),
  active: import_zod17.z.boolean()
}), CreateExternalConnectionBodySchema = import_zod17.z.object({
  accessToken: import_zod17.z.string(),
  type: import_zod17.z.enum(["oauth2"]),
  scopes: import_zod17.z.array(import_zod17.z.string()).optional(),
  metadata: import_zod17.z.any()
}), GetRunStatusesSchema = import_zod17.z.object({
  run: import_zod17.z.object({ id: import_zod17.z.string(), status: RunStatusSchema, output: import_zod17.z.any().optional() }),
  statuses: import_zod17.z.array(JobRunStatusRecordSchema)
}), InvokeJobResponseSchema = import_zod17.z.object({
  id: import_zod17.z.string()
}), InvokeJobRequestBodySchema = import_zod17.z.object({
  payload: import_zod17.z.any(),
  context: import_zod17.z.any().optional(),
  options: import_zod17.z.object({
    accountId: import_zod17.z.string().optional(),
    callbackUrl: import_zod17.z.string().optional()
  }).optional()
}), InvokeOptionsSchema = import_zod17.z.object({
  accountId: import_zod17.z.string().optional(),
  idempotencyKey: import_zod17.z.string().optional(),
  context: import_zod17.z.any().optional(),
  callbackUrl: import_zod17.z.string().optional()
}), EphemeralEventDispatcherRequestBodySchema = import_zod17.z.object({
  url: import_zod17.z.string(),
  name: import_zod17.z.string().or(import_zod17.z.array(import_zod17.z.string())),
  source: import_zod17.z.string().optional(),
  filter: EventFilterSchema.optional(),
  contextFilter: EventFilterSchema.optional(),
  accountId: import_zod17.z.string().optional(),
  timeoutInSeconds: import_zod17.z.number().int().positive().min(10).max(60 * 60 * 24 * 365).default(3600)
}), EphemeralEventDispatcherResponseBodySchema = import_zod17.z.object({
  id: import_zod17.z.string()
}), KeyValueStoreResponseBodySchema = import_zod17.z.discriminatedUnion("action", [
  import_zod17.z.object({
    action: import_zod17.z.literal("DELETE"),
    key: import_zod17.z.string(),
    deleted: import_zod17.z.boolean()
  }),
  import_zod17.z.object({
    action: import_zod17.z.literal("GET"),
    key: import_zod17.z.string(),
    value: import_zod17.z.string().optional()
  }),
  import_zod17.z.object({
    action: import_zod17.z.literal("HAS"),
    key: import_zod17.z.string(),
    has: import_zod17.z.boolean()
  }),
  import_zod17.z.object({
    action: import_zod17.z.literal("SET"),
    key: import_zod17.z.string(),
    value: import_zod17.z.string().optional()
  })
]);

// ../../packages/core/src/schemas/notifications.ts
var import_zod18 = require("zod"), MISSING_CONNECTION_NOTIFICATION = "dev.trigger.notifications.missingConnection", MISSING_CONNECTION_RESOLVED_NOTIFICATION = "dev.trigger.notifications.missingConnectionResolved", CommonMissingConnectionNotificationPayloadSchema = import_zod18.z.object({
  id: import_zod18.z.string(),
  client: import_zod18.z.object({
    id: import_zod18.z.string(),
    title: import_zod18.z.string(),
    scopes: import_zod18.z.array(import_zod18.z.string()),
    createdAt: import_zod18.z.coerce.date(),
    updatedAt: import_zod18.z.coerce.date()
  }),
  authorizationUrl: import_zod18.z.string()
}), MissingDeveloperConnectionNotificationPayloadSchema = CommonMissingConnectionNotificationPayloadSchema.extend({
  type: import_zod18.z.literal("DEVELOPER")
}), MissingExternalConnectionNotificationPayloadSchema = CommonMissingConnectionNotificationPayloadSchema.extend({
  type: import_zod18.z.literal("EXTERNAL"),
  account: import_zod18.z.object({
    id: import_zod18.z.string(),
    metadata: import_zod18.z.any()
  })
}), MissingConnectionNotificationPayloadSchema = import_zod18.z.discriminatedUnion("type", [
  MissingDeveloperConnectionNotificationPayloadSchema,
  MissingExternalConnectionNotificationPayloadSchema
]), CommonMissingConnectionNotificationResolvedPayloadSchema = import_zod18.z.object({
  id: import_zod18.z.string(),
  client: import_zod18.z.object({
    id: import_zod18.z.string(),
    title: import_zod18.z.string(),
    scopes: import_zod18.z.array(import_zod18.z.string()),
    createdAt: import_zod18.z.coerce.date(),
    updatedAt: import_zod18.z.coerce.date(),
    integrationIdentifier: import_zod18.z.string(),
    integrationAuthMethod: import_zod18.z.string()
  }),
  expiresAt: import_zod18.z.coerce.date()
}), MissingDeveloperConnectionResolvedNotificationPayloadSchema = CommonMissingConnectionNotificationResolvedPayloadSchema.extend({
  type: import_zod18.z.literal("DEVELOPER")
}), MissingExternalConnectionResolvedNotificationPayloadSchema = CommonMissingConnectionNotificationResolvedPayloadSchema.extend({
  type: import_zod18.z.literal("EXTERNAL"),
  account: import_zod18.z.object({
    id: import_zod18.z.string(),
    metadata: import_zod18.z.any()
  })
}), MissingConnectionResolvedNotificationPayloadSchema = import_zod18.z.discriminatedUnion("type", [
  MissingDeveloperConnectionResolvedNotificationPayloadSchema,
  MissingExternalConnectionResolvedNotificationPayloadSchema
]);

// ../../packages/core/src/schemas/fetch.ts
var import_zod19 = require("zod");
var FetchRetryHeadersStrategySchema = import_zod19.z.object({
  /** The `headers` strategy retries the request using info from the response headers. */
  strategy: import_zod19.z.literal("headers"),
  /** The header to use to determine the maximum number of times to retry the request. */
  limitHeader: import_zod19.z.string(),
  /** The header to use to determine the number of remaining retries. */
  remainingHeader: import_zod19.z.string(),
  /** The header to use to determine the time when the number of remaining retries will be reset. */
  resetHeader: import_zod19.z.string(),
  /** The event filter to use to determine if the request should be retried. */
  bodyFilter: EventFilterSchema.optional(),
  /** The format of the `resetHeader` value. */
  resetFormat: import_zod19.z.enum([
    "unix_timestamp",
    "unix_timestamp_in_ms",
    "iso_8601",
    "iso_8601_duration_openai_variant"
  ]).default("unix_timestamp")
}), FetchRetryBackoffStrategySchema = RetryOptionsSchema.extend({
  /** The `backoff` strategy retries the request with an exponential backoff. */
  strategy: import_zod19.z.literal("backoff"),
  /** The event filter to use to determine if the request should be retried. */
  bodyFilter: EventFilterSchema.optional()
}), FetchRetryStrategySchema = import_zod19.z.discriminatedUnion("strategy", [
  FetchRetryHeadersStrategySchema,
  FetchRetryBackoffStrategySchema
]), FetchRequestInitSchema = import_zod19.z.object({
  /** The HTTP method to use for the request. */
  method: import_zod19.z.string().optional(),
  /** Any headers to send with the request. Note that you can use [redactString](https://trigger.dev/docs/sdk/redactString) to prevent sensitive information from being stored (e.g. in the logs), like API keys and tokens. */
  headers: import_zod19.z.record(import_zod19.z.union([import_zod19.z.string(), RedactStringSchema])).optional(),
  /** The body of the request. */
  body: import_zod19.z.union([import_zod19.z.string(), import_zod19.z.instanceof(ArrayBuffer)]).optional()
}), FetchRetryOptionsSchema = import_zod19.z.record(FetchRetryStrategySchema), FetchTimeoutOptionsSchema = import_zod19.z.object({
  durationInMs: import_zod19.z.number(),
  retry: RetryOptionsSchema.optional()
}), FetchOperationSchema = import_zod19.z.object({
  url: import_zod19.z.string(),
  requestInit: FetchRequestInitSchema.optional(),
  retry: import_zod19.z.record(FetchRetryStrategySchema).optional(),
  timeout: FetchTimeoutOptionsSchema.optional()
}), FetchPollOperationSchema = import_zod19.z.object({
  url: import_zod19.z.string(),
  interval: import_zod19.z.number().int().positive().min(10).max(600).default(10),
  // defaults to 10 seconds
  timeout: import_zod19.z.number().int().positive().min(30).max(3600).default(600),
  // defaults to 10 minutes
  responseFilter: ResponseFilterSchema,
  requestInit: FetchRequestInitSchema.optional(),
  requestTimeout: FetchTimeoutOptionsSchema.optional()
});

// ../../packages/core/src/schemas/events.ts
var import_zod20 = require("zod");
var GetEventSchema = import_zod20.z.object({
  /** The event id */
  id: import_zod20.z.string(),
  /** The event name */
  name: import_zod20.z.string(),
  /** When the event was created */
  createdAt: import_zod20.z.coerce.date(),
  /** When the event was last updated */
  updatedAt: import_zod20.z.coerce.date(),
  /** The runs that were triggered by the event */
  runs: import_zod20.z.array(
    import_zod20.z.object({
      /** The Run id */
      id: import_zod20.z.string(),
      /** The Run status */
      status: RunStatusSchema,
      /** When the run started */
      startedAt: import_zod20.z.coerce.date().optional().nullable(),
      /** When the run completed */
      completedAt: import_zod20.z.coerce.date().optional().nullable()
    })
  )
}), CancelRunsForEventSchema = import_zod20.z.object({
  cancelledRunIds: import_zod20.z.array(import_zod20.z.string()),
  failedToCancelRunIds: import_zod20.z.array(import_zod20.z.string())
});

// ../../packages/core/src/schemas/request.ts
var import_zod21 = require("zod"), RequestWithRawBodySchema = import_zod21.z.object({
  url: import_zod21.z.string(),
  method: import_zod21.z.string(),
  headers: import_zod21.z.record(import_zod21.z.string()),
  rawBody: import_zod21.z.string()
});

// ../../packages/core/src/schemas/jobs.ts
var import_zod22 = require("zod"), CancelRunsForJobSchema = import_zod22.z.object({
  cancelledRunIds: import_zod22.z.array(import_zod22.z.string()),
  failedToCancelRunIds: import_zod22.z.array(import_zod22.z.string())
});

// ../../packages/core/src/utils.ts
function deepMergeFilters(...filters) {
  let result = {};
  for (let filter of filters)
    for (let key in filter)
      if (filter.hasOwnProperty(key)) {
        let filterValue = filter[key], existingValue = result[key];
        existingValue && typeof existingValue == "object" && typeof filterValue == "object" && !Array.isArray(existingValue) && !Array.isArray(filterValue) && existingValue !== null && filterValue !== null ? result[key] = deepMergeFilters(existingValue, filterValue) : result[key] = filterValue;
      }
  return result;
}
function assertExhaustive(x) {
  throw new Error("Unexpected object: " + x);
}

// ../../packages/core/src/retry.ts
var DEFAULT_RETRY_OPTIONS = {
  limit: 5,
  factor: 1.8,
  minTimeoutInMs: 1e3,
  maxTimeoutInMs: 6e4,
  randomize: !0
};
function calculateRetryAt(retryOptions, attempts) {
  let options2 = {
    ...DEFAULT_RETRY_OPTIONS,
    ...retryOptions
  };
  if (attempts + 1 >= options2.limit)
    return;
  let random = options2.randomize ? Math.random() + 1 : 1, timeoutInMs = Math.round(
    random * Math.max(options2.minTimeoutInMs, 1) * Math.pow(options2.factor, Math.max(attempts - 1, 0))
  );
  return timeoutInMs = Math.min(timeoutInMs, options2.maxTimeoutInMs), new Date(Date.now() + timeoutInMs);
}
function calculateResetAt(resets, format, now = /* @__PURE__ */ new Date()) {
  if (resets)
    switch (format) {
      case "iso_8601_duration_openai_variant":
        return calculateISO8601DurationOpenAIVariantResetAt(resets, now);
      case "iso_8601":
        return calculateISO8601ResetAt(resets, now);
      case "unix_timestamp":
        return calculateUnixTimestampResetAt(resets, now);
      case "unix_timestamp_in_ms":
        return calculateUnixTimestampInMsResetAt(resets, now);
    }
}
function calculateUnixTimestampResetAt(resets, now = /* @__PURE__ */ new Date()) {
  if (!resets)
    return;
  let resetAt = parseInt(resets, 10);
  if (!isNaN(resetAt))
    return new Date(resetAt * 1e3);
}
function calculateUnixTimestampInMsResetAt(resets, now = /* @__PURE__ */ new Date()) {
  if (!resets)
    return;
  let resetAt = parseInt(resets, 10);
  if (!isNaN(resetAt))
    return new Date(resetAt);
}
function calculateISO8601ResetAt(resets, now = /* @__PURE__ */ new Date()) {
  if (!resets)
    return;
  let resetAt = new Date(resets);
  if (!isNaN(resetAt.getTime()))
    return resetAt;
}
function calculateISO8601DurationOpenAIVariantResetAt(resets, now = /* @__PURE__ */ new Date()) {
  if (!resets)
    return;
  let pattern = /^(?:(\d+)d)?(?:(\d+)h)?(?:(\d+)m)?(?:(\d+(?:\.\d+)?)s)?(?:(\d+)ms)?$/, match = resets.match(pattern);
  if (!match)
    return;
  let days = parseInt(match[1], 10) || 0, hours = parseInt(match[2], 10) || 0, minutes = parseInt(match[3], 10) || 0, seconds = parseFloat(match[4]) || 0, milliseconds = parseInt(match[5], 10) || 0, resetAt = new Date(now);
  return resetAt.setDate(resetAt.getDate() + days), resetAt.setHours(resetAt.getHours() + hours), resetAt.setMinutes(resetAt.getMinutes() + minutes), resetAt.setSeconds(resetAt.getSeconds() + Math.floor(seconds)), resetAt.setMilliseconds(
    resetAt.getMilliseconds() + (seconds - Math.floor(seconds)) * 1e3 + milliseconds
  ), resetAt;
}

// ../../packages/core/src/replacements.ts
var currentDate = {
  marker: "__CURRENT_DATE__",
  replace({ data: { now } }) {
    return now.toISOString();
  }
}, currentTimestampMilliseconds = {
  marker: "__CURRENT_TIMESTAMP_MS__",
  replace({ data: { now } }) {
    return now.getTime();
  }
}, currentTimestampSeconds = {
  marker: "__CURRENT_TIMESTAMP_S__",
  replace({ data: { now } }) {
    return now.getTime() / 1e3;
  }
}, replacements = [
  currentDate,
  currentTimestampMilliseconds,
  currentTimestampSeconds
];

// ../../packages/core/src/searchParams.ts
function urlWithSearchParams(url, params) {
  if (!params)
    return url;
  let urlObj = new URL(url);
  for (let [key, value] of Object.entries(params))
    value !== void 0 && urlObj.searchParams.append(key, String(value));
  return urlObj.toString();
}

// ../../packages/core/src/eventFilterMatches.ts
function eventFilterMatches(payload, filter) {
  if (payload == null)
    return Object.entries(filter).length === 0;
  for (let [patternKey, patternValue] of Object.entries(filter)) {
    let payloadValue = payload[patternKey];
    if (Array.isArray(patternValue)) {
      if (patternValue.length === 0)
        continue;
      if (patternValue.every((item) => typeof item == "string")) {
        if (patternValue.includes(payloadValue))
          continue;
        return !1;
      }
      if (patternValue.every((item) => typeof item == "number")) {
        if (patternValue.includes(payloadValue))
          continue;
        return !1;
      }
      if (patternValue.every((item) => typeof item == "boolean")) {
        if (patternValue.includes(payloadValue))
          continue;
        return !1;
      }
      if (!contentFiltersMatches(payloadValue, patternValue))
        return !1;
      continue;
    } else if (typeof patternValue == "object") {
      if (Array.isArray(payloadValue)) {
        if (!payloadValue.some((item) => eventFilterMatches(item, patternValue)))
          return !1;
      } else if (!eventFilterMatches(payloadValue, patternValue))
        return !1;
    }
  }
  return !0;
}
function contentFiltersMatches(actualValue, contentFilters) {
  for (let contentFilter of contentFilters)
    if (typeof contentFilter == "object") {
      let [key, value] = Object.entries(contentFilter)[0];
      if (!contentFilterMatches(actualValue, contentFilter))
        return !1;
    }
  return !0;
}
function contentFilterMatches(actualValue, contentFilter) {
  return "$endsWith" in contentFilter ? typeof actualValue != "string" ? !1 : actualValue.endsWith(contentFilter.$endsWith) : "$startsWith" in contentFilter ? typeof actualValue != "string" ? !1 : actualValue.startsWith(contentFilter.$startsWith) : "$anythingBut" in contentFilter ? !(Array.isArray(contentFilter.$anythingBut) && contentFilter.$anythingBut.includes(actualValue) || contentFilter.$anythingBut === actualValue) : "$exists" in contentFilter ? contentFilter.$exists ? actualValue !== void 0 : actualValue === void 0 : "$gt" in contentFilter ? typeof actualValue != "number" ? !1 : actualValue > contentFilter.$gt : "$lt" in contentFilter ? typeof actualValue != "number" ? !1 : actualValue < contentFilter.$lt : "$gte" in contentFilter ? typeof actualValue != "number" ? !1 : actualValue >= contentFilter.$gte : "$lte" in contentFilter ? typeof actualValue != "number" ? !1 : actualValue <= contentFilter.$lte : "$between" in contentFilter ? typeof actualValue != "number" ? !1 : actualValue >= contentFilter.$between[0] && actualValue <= contentFilter.$between[1] : "$includes" in contentFilter ? Array.isArray(actualValue) ? actualValue.includes(contentFilter.$includes) : !1 : "$ignoreCaseEquals" in contentFilter ? typeof actualValue != "string" ? !1 : actualValue.localeCompare(contentFilter.$ignoreCaseEquals, void 0, {
    sensitivity: "accent"
  }) === 0 : "$isNull" in contentFilter ? contentFilter.$isNull ? actualValue === null : actualValue !== null : "$not" in contentFilter ? Array.isArray(actualValue) ? !actualValue.includes(contentFilter.$not) : typeof actualValue == "number" || typeof actualValue == "boolean" || typeof actualValue == "string" ? actualValue !== contentFilter.$not : !1 : !0;
}

// ../../packages/core/src/requestFilterMatches.ts
async function requestFilterMatches(request, filter) {
  let clonedRequest = request.clone();
  if (!requestMethodMatches(clonedRequest.method, filter.method))
    return !1;
  let headersObj = Object.fromEntries(clonedRequest.headers.entries());
  if (filter.headers && !eventFilterMatches(headersObj, filter.headers))
    return !1;
  let searchParams = new URL(clonedRequest.url).searchParams, searchParamsObject = {};
  for (let [key, value] of searchParams.entries())
    searchParamsObject[key] = value;
  if (filter.query && !eventFilterMatches(searchParamsObject, filter.query))
    return !1;
  try {
    let json118 = await clonedRequest.json();
    if (filter.body && !eventFilterMatches(json118, filter.body))
      return !1;
  } catch {
    if (filter.body)
      return !1;
  }
  return !0;
}
async function responseFilterMatches(response, filter) {
  if (filter.headers && !eventFilterMatches(response.headers, filter.headers))
    return { match: !1 };
  try {
    let json118 = await response.json();
    return filter.body && !eventFilterMatches(json118, filter.body) ? { match: !1, body: json118 } : { match: !0, body: json118 };
  } catch {
    if (filter.body)
      return { match: !1, body: void 0 };
  }
  return { match: !0, body: void 0 };
}
function requestMethodMatches(method, filter) {
  return filter ? filter.includes(method) : !0;
}

// ../../packages/core/src/index.ts
var API_VERSIONS = {
  LAZY_LOADED_CACHED_TASKS: "2023-09-29",
  SERIALIZED_TASK_OUTPUT: "2023-11-01"
}, PLATFORM_FEATURES = {
  yieldExecution: API_VERSIONS.LAZY_LOADED_CACHED_TASKS,
  lazyLoadedCachedTasks: API_VERSIONS.LAZY_LOADED_CACHED_TASKS
};
function supportsFeature(featureName, version3) {
  if (version3 === "unversioned" || version3 === "unknown")
    return !1;
  let supportedVersion = PLATFORM_FEATURES[featureName];
  return supportedVersion ? version3 >= supportedVersion : !1;
}

// app/services/worker.server.ts
var import_zod62 = require("zod");

// ../../packages/database/src/index.ts
var src_exports = {};
__reExport(src_exports, require("@prisma/client"));

// app/db.server.ts
var import_tiny_invariant = __toESM(require("tiny-invariant")), import_zod25 = require("zod");

// ../../packages/core-backend/src/bloom.ts
var import_node_buffer = require("node:buffer"), _BloomFilter = class {
  constructor(size) {
    this.size = size, this.bitArray = new Uint8Array(Math.ceil(size / 8));
  }
  add(item) {
    let index = murmurHash3(item) % this.size;
    this.bitArray[Math.floor(index / 8)] |= 1 << index % 8;
  }
  test(item) {
    let index = murmurHash3(item) % this.size;
    return (this.bitArray[Math.floor(index / 8)] & 1 << index % 8) !== 0;
  }
  // Serialize to a Base64 string
  serialize() {
    return import_node_buffer.Buffer.from(this.bitArray).toString("base64");
  }
  // Deserialize from a Base64 string
  static deserialize(str, size) {
    let filter = new _BloomFilter(size);
    return filter.bitArray = Uint8Array.from(import_node_buffer.Buffer.from(str, "base64")), filter;
  }
}, BloomFilter = _BloomFilter;
BloomFilter.NOOP_TASK_SET_SIZE = 32768;
function murmurHash3(str, seed = 0) {
  let h12 = 3735928559 ^ seed, h2 = 1103547991 ^ seed;
  for (let i = 0, ch; i < str.length; i++)
    ch = str.charCodeAt(i), h12 = Math.imul(h12 ^ ch, 3432918353), h12 = h12 << 15 | h12 >>> 17, h12 = Math.imul(h12, 461845907), h2 = Math.imul(h2 ^ ch, 2246822507), h2 = h2 << 13 | h2 >>> 19, h2 = Math.imul(h2, 3266489909);
  return h12 ^= str.length, h2 ^= str.length, h12 = Math.imul(h12 ^ h12 >>> 16, 2246822507), h12 = Math.imul(h12 ^ h12 >>> 13, 3266489909), h12 ^= h12 >>> 16, h2 = Math.imul(h2 ^ h2 >>> 16, 2246822507), h2 = Math.imul(h2 ^ h2 >>> 13, 3266489909), h2 ^= h2 >>> 16, 4294967296 * (2097151 & h2) + (h12 >>> 0);
}

// ../../packages/core-backend/src/logger.ts
var import_node_process = require("node:process"), import_node_buffer2 = require("node:buffer"), import_api2 = require("@opentelemetry/api"), logLevels = ["log", "error", "warn", "info", "debug"], Logger = class {
  #name;
  #level;
  #filteredKeys = [];
  #jsonReplacer;
  #additionalFields;
  constructor(name, level = "info", filteredKeys = [], jsonReplacer, additionalFields) {
    this.#name = name, this.#level = logLevels.indexOf(import_node_process.env.TRIGGER_LOG_LEVEL ?? level), this.#filteredKeys = filteredKeys, this.#jsonReplacer = createReplacer(jsonReplacer), this.#additionalFields = additionalFields ?? (() => ({}));
  }
  child(fields) {
    return new Logger(
      this.#name,
      logLevels[this.#level],
      this.#filteredKeys,
      this.#jsonReplacer,
      () => ({ ...this.#additionalFields(), ...fields })
    );
  }
  // Return a new Logger instance with the same name and a new log level
  // but filter out the keys from the log messages (at any level)
  filter(...keys) {
    return new Logger(this.#name, logLevels[this.#level], keys, this.#jsonReplacer);
  }
  static satisfiesLogLevel(logLevel, setLevel) {
    return logLevels.indexOf(logLevel) <= logLevels.indexOf(setLevel);
  }
  log(message, ...args) {
    this.#level < 0 || this.#structuredLog(console.log, message, "log", ...args);
  }
  error(message, ...args) {
    this.#level < 1 || this.#structuredLog(console.error, message, "error", ...args);
  }
  warn(message, ...args) {
    this.#level < 2 || this.#structuredLog(console.warn, message, "warn", ...args);
  }
  info(message, ...args) {
    this.#level < 3 || this.#structuredLog(console.info, message, "info", ...args);
  }
  debug(message, ...args) {
    this.#level < 4 || this.#structuredLog(console.debug, message, "debug", ...args);
  }
  #structuredLog(loggerFunction, message, level, ...args) {
    let currentSpan = import_api2.trace.getSpan(import_api2.context.active()), structuredLog = {
      ...structureArgs(safeJsonClone(args), this.#filteredKeys),
      ...this.#additionalFields(),
      timestamp: /* @__PURE__ */ new Date(),
      name: this.#name,
      message,
      level,
      traceId: currentSpan && currentSpan.isRecording() ? currentSpan?.spanContext().traceId : void 0,
      parentSpanId: currentSpan && currentSpan.isRecording() ? currentSpan?.spanContext().spanId : void 0
    };
    loggerFunction(JSON.stringify(structuredLog, this.#jsonReplacer));
  }
};
function createReplacer(replacer) {
  return (key, value) => typeof value == "bigint" ? value.toString() : replacer ? replacer(key, value) : value;
}
function bigIntReplacer(_key, value) {
  return typeof value == "bigint" ? value.toString() : value;
}
function safeJsonClone(obj) {
  try {
    return JSON.parse(JSON.stringify(obj, bigIntReplacer));
  } catch {
    return;
  }
}
function structureArgs(args, filteredKeys = []) {
  if (args && args.length !== 0)
    return args.length === 1 && typeof args[0] == "object" ? filterKeys(JSON.parse(JSON.stringify(args[0], bigIntReplacer)), filteredKeys) : args;
}
function filterKeys(obj, keys) {
  if (typeof obj != "object" || obj === null)
    return obj;
  if (Array.isArray(obj))
    return obj.map((item) => filterKeys(item, keys));
  let filteredObj = {};
  for (let [key, value] of Object.entries(obj)) {
    if (keys.includes(key)) {
      value ? filteredObj[key] = `[filtered ${prettyPrintBytes(value)}]` : filteredObj[key] = value;
      continue;
    }
    filteredObj[key] = filterKeys(value, keys);
  }
  return filteredObj;
}
function prettyPrintBytes(value) {
  if (import_node_process.env.NODE_ENV === "production")
    return "skipped size";
  let sizeInBytes = getSizeInBytes(value);
  return sizeInBytes < 1024 ? `${sizeInBytes} bytes` : sizeInBytes < 1024 * 1024 ? `${(sizeInBytes / 1024).toFixed(2)} KB` : sizeInBytes < 1024 * 1024 * 1024 ? `${(sizeInBytes / (1024 * 1024)).toFixed(2)} MB` : `${(sizeInBytes / (1024 * 1024 * 1024)).toFixed(2)} GB`;
}
function getSizeInBytes(value) {
  let jsonString = JSON.stringify(value);
  return import_node_buffer2.Buffer.byteLength(jsonString, "utf8");
}

// app/services/sensitiveDataReplacer.ts
function sensitiveDataReplacer(key, value) {
  return typeof value == "object" && value !== null && value.__redactedString === !0 ? redactString(value) : value;
}
function redactString(value) {
  let result = "";
  for (let i = 0; i < value.strings.length; i++)
    result += value.strings[i], i < value.interpolations.length && (result += "********");
  return result;
}

// app/services/logger.server.ts
var import_async_hooks = require("async_hooks");

// app/services/httpAsyncStorage.server.ts
var import_node_async_hooks = require("node:async_hooks"), httpLocalStorage = new import_node_async_hooks.AsyncLocalStorage();
function runWithHttpContext(context7, fn) {
  return httpLocalStorage.run(context7, fn);
}
function getHttpContext() {
  return httpLocalStorage.getStore();
}

// app/services/logger.server.ts
var currentFieldsStore = new import_async_hooks.AsyncLocalStorage();
function trace2(fields, fn) {
  return currentFieldsStore.run(fields, fn);
}
var logger = new Logger(
  "webapp",
  process.env.APP_LOG_LEVEL ?? "debug",
  ["examples", "output", "connectionString", "payload"],
  sensitiveDataReplacer,
  () => {
    let fields = currentFieldsStore.getStore(), httpContext = getHttpContext();
    return { ...fields, http: httpContext };
  }
), workerLogger = new Logger(
  "worker",
  process.env.APP_LOG_LEVEL ?? "debug",
  ["examples", "output", "connectionString"],
  sensitiveDataReplacer,
  () => {
    let fields = currentFieldsStore.getStore();
    return fields ? { ...fields } : {};
  }
), socketLogger = new Logger(
  "socket",
  process.env.APP_LOG_LEVEL ?? "debug",
  [],
  sensitiveDataReplacer,
  () => {
    let fields = currentFieldsStore.getStore();
    return fields ? { ...fields } : {};
  }
);

// app/services/secrets/secretStoreOptionsSchema.server.ts
var import_zod23 = require("zod"), SecretStoreOptionsSchema = import_zod23.z.enum(["DATABASE", "AWS_PARAM_STORE"]);

// app/env.server.ts
var import_zod24 = require("zod");

// app/utils/regex.ts
function isValidRegex(regex) {
  try {
    return new RegExp(regex), !0;
  } catch {
    return !1;
  }
}

// app/utils/db.ts
function isValidDatabaseUrl(url) {
  try {
    return new URL(url).searchParams.get("schema") === "" ? (console.error(
      "Invalid Database URL: The schema search param can't have an empty value. To use the `public` schema, either omit the schema param entirely or specify it in full: `?schema=public`"
    ), !1) : !0;
  } catch (err) {
    return console.error(err), !1;
  }
}

// app/env.server.ts
var EnvironmentSchema = import_zod24.z.object({
  NODE_ENV: import_zod24.z.union([import_zod24.z.literal("development"), import_zod24.z.literal("production"), import_zod24.z.literal("test")]),
  DATABASE_URL: import_zod24.z.string().refine(
    isValidDatabaseUrl,
    "DATABASE_URL is invalid, for details please check the additional output above this message."
  ),
  DATABASE_CONNECTION_LIMIT: import_zod24.z.coerce.number().int().default(10),
  DATABASE_POOL_TIMEOUT: import_zod24.z.coerce.number().int().default(60),
  DIRECT_URL: import_zod24.z.string().refine(
    isValidDatabaseUrl,
    "DIRECT_URL is invalid, for details please check the additional output above this message."
  ),
  DATABASE_READ_REPLICA_URL: import_zod24.z.string().optional(),
  SESSION_SECRET: import_zod24.z.string(),
  MAGIC_LINK_SECRET: import_zod24.z.string(),
  ENCRYPTION_KEY: import_zod24.z.string(),
  WHITELISTED_EMAILS: import_zod24.z.string().refine(isValidRegex, "WHITELISTED_EMAILS must be a valid regex.").optional(),
  ADMIN_EMAILS: import_zod24.z.string().refine(isValidRegex, "ADMIN_EMAILS must be a valid regex.").optional(),
  REMIX_APP_PORT: import_zod24.z.string().optional(),
  LOGIN_ORIGIN: import_zod24.z.string().default("http://localhost:3030"),
  APP_ORIGIN: import_zod24.z.string().default("http://localhost:3030"),
  APP_ENV: import_zod24.z.string().default("production"),
  SERVICE_NAME: import_zod24.z.string().default("trigger.dev webapp"),
  SECRET_STORE: SecretStoreOptionsSchema.default("DATABASE"),
  POSTHOG_PROJECT_KEY: import_zod24.z.string().default("phc_LFH7kJiGhdIlnO22hTAKgHpaKhpM8gkzWAFvHmf5vfS"),
  TELEMETRY_TRIGGER_API_KEY: import_zod24.z.string().optional(),
  TELEMETRY_TRIGGER_API_URL: import_zod24.z.string().optional(),
  TRIGGER_TELEMETRY_DISABLED: import_zod24.z.string().optional(),
  HIGHLIGHT_PROJECT_ID: import_zod24.z.string().optional(),
  AUTH_GITHUB_CLIENT_ID: import_zod24.z.string().optional(),
  AUTH_GITHUB_CLIENT_SECRET: import_zod24.z.string().optional(),
  FROM_EMAIL: import_zod24.z.string().optional(),
  REPLY_TO_EMAIL: import_zod24.z.string().optional(),
  RESEND_API_KEY: import_zod24.z.string().optional(),
  PLAIN_API_KEY: import_zod24.z.string().optional(),
  RUNTIME_PLATFORM: import_zod24.z.enum(["docker-compose", "ecs", "local"]).default("local"),
  WORKER_SCHEMA: import_zod24.z.string().default("graphile_worker"),
  WORKER_CONCURRENCY: import_zod24.z.coerce.number().int().default(10),
  WORKER_POLL_INTERVAL: import_zod24.z.coerce.number().int().default(1e3),
  /** The number of days a failed Graphile task should stay before getting cleaned up */
  WORKER_CLEANUP_TTL_DAYS: import_zod24.z.coerce.number().int().default(3),
  EXECUTION_WORKER_CONCURRENCY: import_zod24.z.coerce.number().int().default(10),
  EXECUTION_WORKER_POLL_INTERVAL: import_zod24.z.coerce.number().int().default(1e3),
  WORKER_ENABLED: import_zod24.z.string().default("true"),
  EXECUTION_WORKER_ENABLED: import_zod24.z.string().default("true"),
  TASK_OPERATION_WORKER_ENABLED: import_zod24.z.string().default("true"),
  TASK_OPERATION_WORKER_CONCURRENCY: import_zod24.z.coerce.number().int().default(10),
  TASK_OPERATION_WORKER_POLL_INTERVAL: import_zod24.z.coerce.number().int().default(1e3),
  GRACEFUL_SHUTDOWN_TIMEOUT: import_zod24.z.coerce.number().int().default(6e4),
  /** Optional. Only used if you use the apps/proxy */
  AWS_SQS_REGION: import_zod24.z.string().optional(),
  /** Optional. Only used if you use the apps/proxy */
  AWS_SQS_ACCESS_KEY_ID: import_zod24.z.string().optional(),
  /** Optional. Only used if you use the apps/proxy */
  AWS_SQS_SECRET_ACCESS_KEY: import_zod24.z.string().optional(),
  /** Optional. Only used if you use the apps/proxy */
  AWS_SQS_QUEUE_URL: import_zod24.z.string().optional(),
  AWS_SQS_BATCH_SIZE: import_zod24.z.coerce.number().int().optional().default(1),
  AWS_SQS_WAIT_TIME_MS: import_zod24.z.coerce.number().int().optional().default(100),
  DISABLE_SSE: import_zod24.z.string().optional(),
  OPENAI_API_KEY: import_zod24.z.string().optional(),
  // Redis options
  REDIS_HOST: import_zod24.z.string().optional(),
  REDIS_READER_HOST: import_zod24.z.string().optional(),
  REDIS_READER_PORT: import_zod24.z.coerce.number().optional(),
  REDIS_PORT: import_zod24.z.coerce.number().optional(),
  REDIS_USERNAME: import_zod24.z.string().optional(),
  REDIS_PASSWORD: import_zod24.z.string().optional(),
  REDIS_TLS_DISABLED: import_zod24.z.string().optional(),
  DEFAULT_ENV_EXECUTION_CONCURRENCY_LIMIT: import_zod24.z.coerce.number().int().default(10),
  DEFAULT_ORG_EXECUTION_CONCURRENCY_LIMIT: import_zod24.z.coerce.number().int().default(10),
  DEFAULT_DEV_ENV_EXECUTION_ATTEMPTS: import_zod24.z.coerce.number().int().positive().default(1),
  TUNNEL_HOST: import_zod24.z.string().optional(),
  TUNNEL_SECRET_KEY: import_zod24.z.string().optional(),
  //API Rate limiting
  /**
   * @example "60s"
   * @example "1m"
   * @example "1h"
   * @example "1d"
   * @example "1000ms"
   * @example "1000s"
   */
  API_RATE_LIMIT_REFILL_INTERVAL: import_zod24.z.string().default("10s"),
  // refill 250 tokens every 10 seconds
  API_RATE_LIMIT_MAX: import_zod24.z.coerce.number().int().default(750),
  // allow bursts of 750 requests
  API_RATE_LIMIT_REFILL_RATE: import_zod24.z.coerce.number().int().default(250),
  // refix 250 tokens every 10 seconds
  API_RATE_LIMIT_REQUEST_LOGS_ENABLED: import_zod24.z.string().default("0"),
  API_RATE_LIMIT_REJECTION_LOGS_ENABLED: import_zod24.z.string().default("1"),
  //Ingesting event rate limit
  INGEST_EVENT_RATE_LIMIT_WINDOW: import_zod24.z.string().default("60s"),
  INGEST_EVENT_RATE_LIMIT_MAX: import_zod24.z.coerce.number().int().optional(),
  //v3
  V3_ENABLED: import_zod24.z.string().default("false"),
  PROVIDER_SECRET: import_zod24.z.string().default("provider-secret"),
  COORDINATOR_SECRET: import_zod24.z.string().default("coordinator-secret"),
  DEPOT_TOKEN: import_zod24.z.string().optional(),
  DEPOT_PROJECT_ID: import_zod24.z.string().optional(),
  DEPOT_ORG_ID: import_zod24.z.string().optional(),
  CONTAINER_REGISTRY_ORIGIN: import_zod24.z.string().optional(),
  CONTAINER_REGISTRY_USERNAME: import_zod24.z.string().optional(),
  CONTAINER_REGISTRY_PASSWORD: import_zod24.z.string().optional(),
  DEPLOY_REGISTRY_HOST: import_zod24.z.string().optional(),
  DEPLOY_REGISTRY_NAMESPACE: import_zod24.z.string().default("trigger"),
  OBJECT_STORE_BASE_URL: import_zod24.z.string().optional(),
  OBJECT_STORE_ACCESS_KEY_ID: import_zod24.z.string().optional(),
  OBJECT_STORE_SECRET_ACCESS_KEY: import_zod24.z.string().optional(),
  EVENTS_BATCH_SIZE: import_zod24.z.coerce.number().int().default(100),
  EVENTS_BATCH_INTERVAL: import_zod24.z.coerce.number().int().default(1e3),
  EVENTS_DEFAULT_LOG_RETENTION: import_zod24.z.coerce.number().int().default(7),
  SHARED_QUEUE_CONSUMER_POOL_SIZE: import_zod24.z.coerce.number().int().default(10),
  SHARED_QUEUE_CONSUMER_INTERVAL_MS: import_zod24.z.coerce.number().int().default(100),
  SHARED_QUEUE_CONSUMER_NEXT_TICK_INTERVAL_MS: import_zod24.z.coerce.number().int().default(100),
  // Development OTEL environment variables
  DEV_OTEL_EXPORTER_OTLP_ENDPOINT: import_zod24.z.string().optional(),
  // If this is set to 1, then the below variables are used to configure the batch processor for spans and logs
  DEV_OTEL_BATCH_PROCESSING_ENABLED: import_zod24.z.string().default("0"),
  DEV_OTEL_SPAN_MAX_EXPORT_BATCH_SIZE: import_zod24.z.string().default("64"),
  DEV_OTEL_SPAN_SCHEDULED_DELAY_MILLIS: import_zod24.z.string().default("200"),
  DEV_OTEL_SPAN_EXPORT_TIMEOUT_MILLIS: import_zod24.z.string().default("30000"),
  DEV_OTEL_SPAN_MAX_QUEUE_SIZE: import_zod24.z.string().default("512"),
  DEV_OTEL_LOG_MAX_EXPORT_BATCH_SIZE: import_zod24.z.string().default("64"),
  DEV_OTEL_LOG_SCHEDULED_DELAY_MILLIS: import_zod24.z.string().default("200"),
  DEV_OTEL_LOG_EXPORT_TIMEOUT_MILLIS: import_zod24.z.string().default("30000"),
  DEV_OTEL_LOG_MAX_QUEUE_SIZE: import_zod24.z.string().default("512"),
  PROD_OTEL_BATCH_PROCESSING_ENABLED: import_zod24.z.string().default("0"),
  PROD_OTEL_SPAN_MAX_EXPORT_BATCH_SIZE: import_zod24.z.string().default("64"),
  PROD_OTEL_SPAN_SCHEDULED_DELAY_MILLIS: import_zod24.z.string().default("200"),
  PROD_OTEL_SPAN_EXPORT_TIMEOUT_MILLIS: import_zod24.z.string().default("30000"),
  PROD_OTEL_SPAN_MAX_QUEUE_SIZE: import_zod24.z.string().default("512"),
  PROD_OTEL_LOG_MAX_EXPORT_BATCH_SIZE: import_zod24.z.string().default("64"),
  PROD_OTEL_LOG_SCHEDULED_DELAY_MILLIS: import_zod24.z.string().default("200"),
  PROD_OTEL_LOG_EXPORT_TIMEOUT_MILLIS: import_zod24.z.string().default("30000"),
  PROD_OTEL_LOG_MAX_QUEUE_SIZE: import_zod24.z.string().default("512"),
  CHECKPOINT_THRESHOLD_IN_MS: import_zod24.z.coerce.number().int().default(3e4),
  // Internal OTEL environment variables
  INTERNAL_OTEL_TRACE_EXPORTER_URL: import_zod24.z.string().optional(),
  INTERNAL_OTEL_TRACE_EXPORTER_AUTH_HEADER_NAME: import_zod24.z.string().optional(),
  INTERNAL_OTEL_TRACE_EXPORTER_AUTH_HEADER_VALUE: import_zod24.z.string().optional(),
  INTERNAL_OTEL_TRACE_LOGGING_ENABLED: import_zod24.z.string().default("1"),
  // this means 1/20 traces or 5% of traces will be sampled (sampled = recorded)
  INTERNAL_OTEL_TRACE_SAMPLING_RATE: import_zod24.z.string().default("20"),
  INTERNAL_OTEL_TRACE_INSTRUMENT_PRISMA_ENABLED: import_zod24.z.string().default("0"),
  INTERNAL_OTEL_TRACE_DISABLED: import_zod24.z.string().default("0"),
  ORG_SLACK_INTEGRATION_CLIENT_ID: import_zod24.z.string().optional(),
  ORG_SLACK_INTEGRATION_CLIENT_SECRET: import_zod24.z.string().optional(),
  /** These enable the alerts feature in v3 */
  ALERT_FROM_EMAIL: import_zod24.z.string().optional(),
  ALERT_RESEND_API_KEY: import_zod24.z.string().optional(),
  MAX_SEQUENTIAL_INDEX_FAILURE_COUNT: import_zod24.z.coerce.number().default(96),
  LOOPS_API_KEY: import_zod24.z.string().optional(),
  MARQS_DISABLE_REBALANCING: import_zod24.z.coerce.boolean().default(!1),
  VERBOSE_GRAPHILE_LOGGING: import_zod24.z.string().default("false"),
  V2_MARQS_ENABLED: import_zod24.z.string().default("0"),
  V2_MARQS_CONSUMER_POOL_ENABLED: import_zod24.z.string().default("0"),
  V2_MARQS_CONSUMER_POOL_SIZE: import_zod24.z.coerce.number().int().default(10),
  V2_MARQS_CONSUMER_POLL_INTERVAL_MS: import_zod24.z.coerce.number().int().default(1e3),
  V2_MARQS_QUEUE_SELECTION_COUNT: import_zod24.z.coerce.number().int().default(36),
  V2_MARQS_VISIBILITY_TIMEOUT_MS: import_zod24.z.coerce.number().int().default(60 * 1e3 * 15),
  V2_MARQS_DEFAULT_ENV_CONCURRENCY: import_zod24.z.coerce.number().int().default(100),
  V2_MARQS_VERBOSE: import_zod24.z.string().default("0"),
  V3_MARQS_CONCURRENCY_MONITOR_ENABLED: import_zod24.z.string().default("0"),
  V2_MARQS_CONCURRENCY_MONITOR_ENABLED: import_zod24.z.string().default("0"),
  /* Usage settings */
  USAGE_EVENT_URL: import_zod24.z.string().optional(),
  PROD_USAGE_HEARTBEAT_INTERVAL_MS: import_zod24.z.coerce.number().int().optional(),
  CENTS_PER_VCPU_SECOND: import_zod24.z.coerce.number().default(0),
  CENTS_PER_GB_RAM_SECOND: import_zod24.z.coerce.number().default(0),
  CENTS_PER_RUN: import_zod24.z.coerce.number().default(0),
  USAGE_OPEN_METER_API_KEY: import_zod24.z.string().optional(),
  USAGE_OPEN_METER_BASE_URL: import_zod24.z.string().optional(),
  EVENT_LOOP_MONITOR_ENABLED: import_zod24.z.string().default("1"),
  MAXIMUM_LIVE_RELOADING_EVENTS: import_zod24.z.coerce.number().int().default(1e3),
  MAXIMUM_TRACE_SUMMARY_VIEW_COUNT: import_zod24.z.coerce.number().int().default(25e3),
  TASK_PAYLOAD_OFFLOAD_THRESHOLD: import_zod24.z.coerce.number().int().default(524288),
  // 512KB
  TASK_PAYLOAD_MAXIMUM_SIZE: import_zod24.z.coerce.number().int().default(3145728)
  // 3MB
}), env2 = EnvironmentSchema.parse(process.env);

// app/utils/singleton.ts
function singleton(name, getValue) {
  let thusly = globalThis;
  return thusly.__trigger_singletons ??= {}, thusly.__trigger_singletons[name] ??= getValue(), thusly.__trigger_singletons[name];
}

// app/db.server.ts
function isTransactionClient(prisma5) {
  return !("$transaction" in prisma5);
}
function isPrismaKnownError(error) {
  return typeof error == "object" && error !== null && "code" in error && typeof error.code == "string";
}
async function $transaction(prisma5, fn, options2) {
  if (isTransactionClient(prisma5))
    return fn(prisma5);
  try {
    return await prisma5.$transaction(fn, options2);
  } catch (error) {
    if (isPrismaKnownError(error) && (logger.error("prisma.$transaction error", {
      code: error.code,
      meta: error.meta,
      stack: error.stack,
      message: error.message,
      name: error.name
    }), options2?.swallowPrismaErrors))
      return;
    throw error;
  }
}
var prisma = singleton("prisma", getClient), $replica = singleton(
  "replica",
  () => getReplicaClient() ?? prisma
);
function getClient() {
  let { DATABASE_URL } = process.env;
  (0, import_tiny_invariant.default)(typeof DATABASE_URL == "string", "DATABASE_URL env var not set");
  let databaseUrl = extendQueryParams(DATABASE_URL, {
    connection_limit: env2.DATABASE_CONNECTION_LIMIT.toString(),
    pool_timeout: env2.DATABASE_POOL_TIMEOUT.toString()
  });
  console.log(`\u{1F50C} setting up prisma client to ${redactUrlSecrets(databaseUrl)}`);
  let client3 = new src_exports.PrismaClient({
    datasources: {
      db: {
        url: databaseUrl.href
      }
    },
    log: [
      {
        emit: "stdout",
        level: "error"
      },
      {
        emit: "stdout",
        level: "info"
      },
      {
        emit: "stdout",
        level: "warn"
      }
      // {
      //   emit: "stdout",
      //   level: "query",
      // },
      // {
      //   emit: "event",
      //   level: "query",
      // },
    ]
  });
  return client3.$connect(), console.log("\u{1F50C} prisma client connected"), client3;
}
function getReplicaClient() {
  if (!env2.DATABASE_READ_REPLICA_URL) {
    console.log("\u{1F50C} No database replica, using the regular client");
    return;
  }
  let replicaUrl = extendQueryParams(env2.DATABASE_READ_REPLICA_URL, {
    connection_limit: env2.DATABASE_CONNECTION_LIMIT.toString(),
    pool_timeout: env2.DATABASE_POOL_TIMEOUT.toString()
  });
  console.log(`\u{1F50C} setting up read replica connection to ${redactUrlSecrets(replicaUrl)}`);
  let replicaClient = new src_exports.PrismaClient({
    datasources: {
      db: {
        url: replicaUrl.href
      }
    },
    log: [
      {
        emit: "stdout",
        level: "error"
      },
      {
        emit: "stdout",
        level: "info"
      },
      {
        emit: "stdout",
        level: "warn"
      }
    ]
  });
  return replicaClient.$connect(), console.log("\u{1F50C} read replica connected"), replicaClient;
}
function extendQueryParams(hrefOrUrl, queryParams) {
  let url = new URL(hrefOrUrl), query = url.searchParams;
  for (let [key, val] of Object.entries(queryParams))
    query.set(key, val);
  return url.search = query.toString(), url;
}
function redactUrlSecrets(hrefOrUrl) {
  let url = new URL(hrefOrUrl);
  return url.password = "", url.href;
}
var PrismaErrorSchema = import_zod25.z.object({
  code: import_zod25.z.string()
});
function getDatabaseSchema() {
  if (!isValidDatabaseUrl(env2.DATABASE_URL))
    throw new Error("Invalid Database URL");
  let schemaFromSearchParam = new URL(env2.DATABASE_URL).searchParams.get("schema");
  return schemaFromSearchParam || (console.debug("\u2757 database schema unspecified, will default to `public` schema"), "public");
}
var DATABASE_SCHEMA = singleton("DATABASE_SCHEMA", getDatabaseSchema), sqlDatabaseSchema = src_exports.Prisma.sql([`${DATABASE_SCHEMA}`]);

// app/platform/zodWorker.server.ts
var import_api4 = require("@opentelemetry/api"), import_graphile_worker = require("graphile-worker");

// ../../packages/core/src/v3/apiClient/index.ts
var import_api3 = require("@opentelemetry/api");

// ../../packages/core/package.json
var version = "3.0.0-beta.48";

// ../../packages/core/src/v3/schemas/tokens.ts
var import_zod26 = require("zod"), CreateAuthorizationCodeResponseSchema = import_zod26.z.object({
  url: import_zod26.z.string().url(),
  authorizationCode: import_zod26.z.string()
}), GetPersonalAccessTokenRequestSchema = import_zod26.z.object({
  authorizationCode: import_zod26.z.string()
}), GetPersonalAccessTokenResponseSchema = import_zod26.z.object({
  token: import_zod26.z.object({
    token: import_zod26.z.string(),
    obfuscatedToken: import_zod26.z.string()
  }).nullable()
});

// ../../packages/core/src/v3/schemas/api.ts
var import_zod31 = require("zod");

// ../../packages/core/src/v3/schemas/resources.ts
var import_zod29 = require("zod");

// ../../packages/core/src/v3/schemas/schemas.ts
var import_zod28 = require("zod");

// ../../packages/core/src/v3/schemas/common.ts
var import_zod27 = require("zod"), MachineCpu = import_zod27.z.union([
  import_zod27.z.literal(0.25),
  import_zod27.z.literal(0.5),
  import_zod27.z.literal(1),
  import_zod27.z.literal(2),
  import_zod27.z.literal(4)
]), MachineMemory = import_zod27.z.union([
  import_zod27.z.literal(0.25),
  import_zod27.z.literal(0.5),
  import_zod27.z.literal(1),
  import_zod27.z.literal(2),
  import_zod27.z.literal(4),
  import_zod27.z.literal(8)
]), MachinePresetName = import_zod27.z.enum([
  "micro",
  "small-1x",
  "small-2x",
  "medium-1x",
  "medium-2x",
  "large-1x",
  "large-2x"
]), MachineConfig = import_zod27.z.object({
  cpu: MachineCpu.optional(),
  memory: MachineMemory.optional(),
  preset: MachinePresetName.optional()
}), MachinePreset = import_zod27.z.object({
  name: MachinePresetName,
  cpu: import_zod27.z.number(),
  memory: import_zod27.z.number(),
  centsPerMs: import_zod27.z.number()
}), TaskRunBuiltInError = import_zod27.z.object({
  type: import_zod27.z.literal("BUILT_IN_ERROR"),
  name: import_zod27.z.string(),
  message: import_zod27.z.string(),
  stackTrace: import_zod27.z.string()
}), TaskRunCustomErrorObject = import_zod27.z.object({
  type: import_zod27.z.literal("CUSTOM_ERROR"),
  raw: import_zod27.z.string()
}), TaskRunStringError = import_zod27.z.object({
  type: import_zod27.z.literal("STRING_ERROR"),
  raw: import_zod27.z.string()
});
var TaskRunInternalError = import_zod27.z.object({
  type: import_zod27.z.literal("INTERNAL_ERROR"),
  code: import_zod27.z.enum([
    "COULD_NOT_FIND_EXECUTOR",
    "COULD_NOT_FIND_TASK",
    "CONFIGURED_INCORRECTLY",
    "TASK_ALREADY_RUNNING",
    "TASK_EXECUTION_FAILED",
    "TASK_EXECUTION_ABORTED",
    "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE",
    "TASK_PROCESS_SIGKILL_TIMEOUT",
    "TASK_RUN_CANCELLED",
    "TASK_OUTPUT_ERROR",
    "HANDLE_ERROR_ERROR",
    "GRACEFUL_EXIT_TIMEOUT",
    "TASK_RUN_HEARTBEAT_TIMEOUT"
  ]),
  message: import_zod27.z.string().optional(),
  stackTrace: import_zod27.z.string().optional()
}), TaskRunError = import_zod27.z.discriminatedUnion("type", [
  TaskRunBuiltInError,
  TaskRunCustomErrorObject,
  TaskRunStringError,
  TaskRunInternalError
]), TaskRun = import_zod27.z.object({
  id: import_zod27.z.string(),
  payload: import_zod27.z.string(),
  payloadType: import_zod27.z.string(),
  context: import_zod27.z.any(),
  tags: import_zod27.z.array(import_zod27.z.string()),
  isTest: import_zod27.z.boolean().default(!1),
  createdAt: import_zod27.z.coerce.date(),
  startedAt: import_zod27.z.coerce.date().default(() => /* @__PURE__ */ new Date()),
  idempotencyKey: import_zod27.z.string().optional(),
  maxAttempts: import_zod27.z.number().optional(),
  durationMs: import_zod27.z.number().default(0),
  costInCents: import_zod27.z.number().default(0),
  baseCostInCents: import_zod27.z.number().default(0)
}), TaskRunExecutionTask = import_zod27.z.object({
  id: import_zod27.z.string(),
  filePath: import_zod27.z.string(),
  exportName: import_zod27.z.string()
}), TaskRunExecutionAttempt = import_zod27.z.object({
  id: import_zod27.z.string(),
  number: import_zod27.z.number(),
  startedAt: import_zod27.z.coerce.date(),
  backgroundWorkerId: import_zod27.z.string(),
  backgroundWorkerTaskId: import_zod27.z.string(),
  status: import_zod27.z.string()
}), TaskRunExecutionEnvironment = import_zod27.z.object({
  id: import_zod27.z.string(),
  slug: import_zod27.z.string(),
  type: import_zod27.z.enum(["PRODUCTION", "STAGING", "DEVELOPMENT", "PREVIEW"])
}), TaskRunExecutionOrganization = import_zod27.z.object({
  id: import_zod27.z.string(),
  slug: import_zod27.z.string(),
  name: import_zod27.z.string()
}), TaskRunExecutionProject = import_zod27.z.object({
  id: import_zod27.z.string(),
  ref: import_zod27.z.string(),
  slug: import_zod27.z.string(),
  name: import_zod27.z.string()
}), TaskRunExecutionQueue = import_zod27.z.object({
  id: import_zod27.z.string(),
  name: import_zod27.z.string()
}), TaskRunExecutionBatch = import_zod27.z.object({
  id: import_zod27.z.string()
}), TaskRunExecution = import_zod27.z.object({
  task: TaskRunExecutionTask,
  attempt: TaskRunExecutionAttempt,
  run: TaskRun,
  queue: TaskRunExecutionQueue,
  environment: TaskRunExecutionEnvironment,
  organization: TaskRunExecutionOrganization,
  project: TaskRunExecutionProject,
  batch: TaskRunExecutionBatch.optional(),
  machine: MachinePreset.optional()
}), TaskRunContext = import_zod27.z.object({
  task: TaskRunExecutionTask,
  attempt: TaskRunExecutionAttempt.omit({
    backgroundWorkerId: !0,
    backgroundWorkerTaskId: !0
  }),
  run: TaskRun.omit({ payload: !0, payloadType: !0 }),
  queue: TaskRunExecutionQueue,
  environment: TaskRunExecutionEnvironment,
  organization: TaskRunExecutionOrganization,
  project: TaskRunExecutionProject,
  batch: TaskRunExecutionBatch.optional(),
  machine: MachinePreset.optional()
}), TaskRunExecutionRetry = import_zod27.z.object({
  timestamp: import_zod27.z.number(),
  delay: import_zod27.z.number(),
  error: import_zod27.z.unknown().optional()
}), TaskRunExecutionUsage = import_zod27.z.object({
  durationMs: import_zod27.z.number()
}), TaskRunFailedExecutionResult = import_zod27.z.object({
  ok: import_zod27.z.literal(!1),
  id: import_zod27.z.string(),
  error: TaskRunError,
  retry: TaskRunExecutionRetry.optional(),
  skippedRetrying: import_zod27.z.boolean().optional(),
  usage: TaskRunExecutionUsage.optional()
}), TaskRunSuccessfulExecutionResult = import_zod27.z.object({
  ok: import_zod27.z.literal(!0),
  id: import_zod27.z.string(),
  output: import_zod27.z.string().optional(),
  outputType: import_zod27.z.string(),
  usage: TaskRunExecutionUsage.optional()
}), TaskRunExecutionResult = import_zod27.z.discriminatedUnion("ok", [
  TaskRunSuccessfulExecutionResult,
  TaskRunFailedExecutionResult
]), BatchTaskRunExecutionResult = import_zod27.z.object({
  id: import_zod27.z.string(),
  items: TaskRunExecutionResult.array()
});

// ../../packages/core/src/v3/schemas/schemas.ts
var EnvironmentType = import_zod28.z.enum(["PRODUCTION", "STAGING", "DEVELOPMENT", "PREVIEW"]), TaskRunExecutionPayload = import_zod28.z.object({
  execution: TaskRunExecution,
  traceContext: import_zod28.z.record(import_zod28.z.unknown()),
  environment: import_zod28.z.record(import_zod28.z.string()).optional()
}), ProdTaskRunExecution = TaskRunExecution.extend({
  worker: import_zod28.z.object({
    id: import_zod28.z.string(),
    contentHash: import_zod28.z.string(),
    version: import_zod28.z.string()
  }),
  machine: MachinePreset.default({ name: "small-1x", cpu: 1, memory: 1, centsPerMs: 0 })
}), ProdTaskRunExecutionPayload = import_zod28.z.object({
  execution: ProdTaskRunExecution,
  traceContext: import_zod28.z.record(import_zod28.z.unknown()),
  environment: import_zod28.z.record(import_zod28.z.string()).optional()
}), FixedWindowRateLimit = import_zod28.z.object({
  type: import_zod28.z.literal("fixed-window"),
  limit: import_zod28.z.number(),
  window: import_zod28.z.union([
    import_zod28.z.object({
      seconds: import_zod28.z.number()
    }),
    import_zod28.z.object({
      minutes: import_zod28.z.number()
    }),
    import_zod28.z.object({
      hours: import_zod28.z.number()
    })
  ])
}), SlidingWindowRateLimit = import_zod28.z.object({
  type: import_zod28.z.literal("sliding-window"),
  limit: import_zod28.z.number(),
  window: import_zod28.z.union([
    import_zod28.z.object({
      seconds: import_zod28.z.number()
    }),
    import_zod28.z.object({
      minutes: import_zod28.z.number()
    }),
    import_zod28.z.object({
      hours: import_zod28.z.number()
    })
  ])
}), RateLimitOptions = import_zod28.z.discriminatedUnion("type", [
  FixedWindowRateLimit,
  SlidingWindowRateLimit
]), RetryOptions = import_zod28.z.object({
  /** The number of attempts before giving up */
  maxAttempts: import_zod28.z.number().int().optional(),
  /** The exponential factor to use when calculating the next retry time.
   *
   * Each subsequent retry will be calculated as `previousTimeout * factor`
   */
  factor: import_zod28.z.number().optional(),
  /** The minimum time to wait before retrying */
  minTimeoutInMs: import_zod28.z.number().int().optional(),
  /** The maximum time to wait before retrying */
  maxTimeoutInMs: import_zod28.z.number().int().optional(),
  /** Randomize the timeout between retries.
   *
   * This can be useful to prevent the thundering herd problem where all retries happen at the same time.
   */
  randomize: import_zod28.z.boolean().optional()
}), QueueOptions = import_zod28.z.object({
  /** You can define a shared queue and then pass the name in to your task.
     * 
     * @example
     * 
     * ```ts
     * const myQueue = queue({
        name: "my-queue",
        concurrencyLimit: 1,
      });
  
      export const task1 = task({
        id: "task-1",
        queue: {
          name: "my-queue",
        },
        run: async (payload: { message: string }) => {
          // ...
        },
      });
  
      export const task2 = task({
        id: "task-2",
        queue: {
          name: "my-queue",
        },
        run: async (payload: { message: string }) => {
          // ...
        },
      });
     * ```
     */
  name: import_zod28.z.string().optional(),
  /** An optional property that specifies the maximum number of concurrent run executions.
   *
   * If this property is omitted, the task can potentially use up the full concurrency of an environment. */
  concurrencyLimit: import_zod28.z.number().int().min(0).max(1e3).optional(),
  /** @deprecated This feature is coming soon */
  rateLimit: RateLimitOptions.optional()
}), TaskMetadata = import_zod28.z.object({
  id: import_zod28.z.string(),
  packageVersion: import_zod28.z.string(),
  queue: QueueOptions.optional(),
  retry: RetryOptions.optional(),
  machine: MachineConfig.optional(),
  triggerSource: import_zod28.z.string().optional()
}), TaskFileMetadata = import_zod28.z.object({
  filePath: import_zod28.z.string(),
  exportName: import_zod28.z.string()
}), TaskMetadataWithFilePath = import_zod28.z.object({
  id: import_zod28.z.string(),
  packageVersion: import_zod28.z.string(),
  queue: QueueOptions.optional(),
  retry: RetryOptions.optional(),
  machine: MachineConfig.optional(),
  triggerSource: import_zod28.z.string().optional(),
  filePath: import_zod28.z.string(),
  exportName: import_zod28.z.string()
}), PostStartCauses = import_zod28.z.enum(["index", "create", "restore"]), PreStopCauses = import_zod28.z.enum(["terminate"]), RegexSchema = import_zod28.z.custom((val) => {
  try {
    return typeof val.test == "function";
  } catch {
    return !1;
  }
}), Config = import_zod28.z.object({
  project: import_zod28.z.string(),
  triggerDirectories: import_zod28.z.string().array().optional(),
  triggerUrl: import_zod28.z.string().optional(),
  projectDir: import_zod28.z.string().optional(),
  tsconfigPath: import_zod28.z.string().optional(),
  retries: import_zod28.z.object({
    enabledInDev: import_zod28.z.boolean().default(!0),
    default: RetryOptions.optional()
  }).optional(),
  additionalPackages: import_zod28.z.string().array().optional(),
  additionalFiles: import_zod28.z.string().array().optional(),
  dependenciesToBundle: import_zod28.z.array(import_zod28.z.union([import_zod28.z.string(), RegexSchema])).optional(),
  logLevel: import_zod28.z.string().optional(),
  enableConsoleLogging: import_zod28.z.boolean().optional(),
  postInstall: import_zod28.z.string().optional()
}), WaitReason = import_zod28.z.enum(["WAIT_FOR_DURATION", "WAIT_FOR_TASK", "WAIT_FOR_BATCH"]), TaskRunExecutionLazyAttemptPayload = import_zod28.z.object({
  runId: import_zod28.z.string(),
  attemptCount: import_zod28.z.number().optional(),
  messageId: import_zod28.z.string(),
  isTest: import_zod28.z.boolean(),
  traceContext: import_zod28.z.record(import_zod28.z.unknown()),
  environment: import_zod28.z.record(import_zod28.z.string()).optional()
});

// ../../packages/core/src/v3/schemas/resources.ts
var TaskResource = import_zod29.z.object({
  id: import_zod29.z.string(),
  filePath: import_zod29.z.string(),
  exportName: import_zod29.z.string(),
  queue: QueueOptions.optional(),
  retry: RetryOptions.optional(),
  machine: MachineConfig.optional(),
  triggerSource: import_zod29.z.string().optional()
}), BackgroundWorkerMetadata = import_zod29.z.object({
  packageVersion: import_zod29.z.string(),
  contentHash: import_zod29.z.string(),
  cliPackageVersion: import_zod29.z.string().optional(),
  tasks: import_zod29.z.array(TaskResource)
}), ImageDetailsMetadata = import_zod29.z.object({
  contentHash: import_zod29.z.string(),
  imageTag: import_zod29.z.string()
});

// ../../packages/core/src/v3/errors.ts
var import_zod30 = require("zod");
var SerializedError = import_zod30.z.object({
  message: import_zod30.z.string(),
  name: import_zod30.z.string().optional(),
  stackTrace: import_zod30.z.string().optional()
});
function createJsonErrorObject(error) {
  switch (error.type) {
    case "BUILT_IN_ERROR":
      return {
        name: error.name,
        message: error.message,
        stackTrace: error.stackTrace
      };
    case "STRING_ERROR":
      return {
        message: error.raw
      };
    case "CUSTOM_ERROR":
      return {
        message: error.raw
      };
    case "INTERNAL_ERROR":
      return {
        message: `trigger.dev internal error (${error.code})`
      };
  }
}
function sanitizeError(error) {
  switch (error.type) {
    case "BUILT_IN_ERROR":
      return {
        type: "BUILT_IN_ERROR",
        message: error.message?.replace(/\0/g, ""),
        name: error.name?.replace(/\0/g, ""),
        stackTrace: error.stackTrace?.replace(/\0/g, "")
      };
    case "STRING_ERROR":
      return {
        type: "STRING_ERROR",
        raw: error.raw.replace(/\0/g, "")
      };
    case "CUSTOM_ERROR":
      return {
        type: "CUSTOM_ERROR",
        raw: error.raw.replace(/\0/g, "")
      };
    case "INTERNAL_ERROR":
      return {
        type: "INTERNAL_ERROR",
        code: error.code,
        message: error.message?.replace(/\0/g, ""),
        stackTrace: error.stackTrace?.replace(/\0/g, "")
      };
  }
}
function correctErrorStackTrace(stackTrace, projectDir, options2) {
  let [errorLine, ...traceLines] = stackTrace.split(`
`);
  return [
    options2?.removeFirstLine ? void 0 : errorLine,
    ...traceLines.map((line) => correctStackTraceLine(line, projectDir, options2?.isDev))
  ].filter(Boolean).join(`
`);
}
var LINES_TO_IGNORE = [
  /ConsoleInterceptor/,
  /TriggerTracer/,
  /TaskExecutor/,
  /EXECUTE_TASK_RUN/,
  /@trigger.dev\/core/,
  /packages\/core\/src\/v3/,
  /safeJsonProcess/,
  /__entryPoint.ts/,
  /ZodIpc/,
  /startActiveSpan/,
  /processTicksAndRejections/
];
function correctStackTraceLine(line, projectDir, isDev) {
  if (!LINES_TO_IGNORE.some((regex) => regex.test(line)) && !(isDev && projectDir && !line.includes(projectDir)))
    return line.trim();
}
function groupTaskMetadataIssuesByTask(tasks, issues) {
  return issues.reduce(
    (acc, issue) => {
      if (issue.path.length === 0)
        return acc;
      let taskIndex = issue.path[1];
      if (typeof taskIndex != "number")
        return acc;
      let task = tasks[taskIndex];
      if (!task)
        return acc;
      let restOfPath = issue.path.slice(2), taskId = task.id, taskName = task.exportName, filePath = task.filePath, key = taskIndex, existing = acc[key] ?? {
        id: taskId,
        exportName: taskName,
        filePath,
        issues: []
      };
      return existing.issues.push({
        message: issue.message,
        path: restOfPath.length === 0 ? void 0 : restOfPath.join(".")
      }), {
        ...acc,
        [key]: existing
      };
    },
    {}
  );
}

// ../../packages/core/src/v3/schemas/api.ts
var WhoAmIResponseSchema = import_zod31.z.object({
  userId: import_zod31.z.string(),
  email: import_zod31.z.string().email(),
  dashboardUrl: import_zod31.z.string()
}), GetProjectResponseBody = import_zod31.z.object({
  id: import_zod31.z.string(),
  externalRef: import_zod31.z.string(),
  name: import_zod31.z.string(),
  slug: import_zod31.z.string(),
  createdAt: import_zod31.z.coerce.date(),
  organization: import_zod31.z.object({
    id: import_zod31.z.string(),
    title: import_zod31.z.string(),
    slug: import_zod31.z.string(),
    createdAt: import_zod31.z.coerce.date()
  })
}), GetProjectsResponseBody = import_zod31.z.array(GetProjectResponseBody), GetProjectEnvResponse = import_zod31.z.object({
  apiKey: import_zod31.z.string(),
  name: import_zod31.z.string(),
  apiUrl: import_zod31.z.string()
}), CreateBackgroundWorkerRequestBody = import_zod31.z.object({
  localOnly: import_zod31.z.boolean(),
  metadata: BackgroundWorkerMetadata,
  supportsLazyAttempts: import_zod31.z.boolean().optional()
}), CreateBackgroundWorkerResponse = import_zod31.z.object({
  id: import_zod31.z.string(),
  version: import_zod31.z.string(),
  contentHash: import_zod31.z.string()
}), TriggerTaskRequestBody = import_zod31.z.object({
  payload: import_zod31.z.any(),
  context: import_zod31.z.any(),
  options: import_zod31.z.object({
    dependentAttempt: import_zod31.z.string().optional(),
    dependentBatch: import_zod31.z.string().optional(),
    lockToVersion: import_zod31.z.string().optional(),
    queue: QueueOptions.optional(),
    concurrencyKey: import_zod31.z.string().optional(),
    idempotencyKey: import_zod31.z.string().optional(),
    test: import_zod31.z.boolean().optional(),
    payloadType: import_zod31.z.string().optional(),
    delay: import_zod31.z.string().or(import_zod31.z.coerce.date()).optional(),
    ttl: import_zod31.z.string().or(import_zod31.z.number().nonnegative().int()).optional(),
    maxAttempts: import_zod31.z.number().int().optional()
  }).optional()
}), TriggerTaskResponse = import_zod31.z.object({
  id: import_zod31.z.string()
}), BatchTriggerTaskRequestBody = import_zod31.z.object({
  items: TriggerTaskRequestBody.array(),
  dependentAttempt: import_zod31.z.string().optional()
}), BatchTriggerTaskResponse = import_zod31.z.object({
  batchId: import_zod31.z.string(),
  runs: import_zod31.z.string().array()
}), GetBatchResponseBody = import_zod31.z.object({
  id: import_zod31.z.string(),
  items: import_zod31.z.array(
    import_zod31.z.object({
      id: import_zod31.z.string(),
      taskRunId: import_zod31.z.string(),
      status: import_zod31.z.enum(["PENDING", "CANCELED", "COMPLETED", "FAILED"])
    })
  )
}), RescheduleRunRequestBody = import_zod31.z.object({
  delay: import_zod31.z.string().or(import_zod31.z.coerce.date())
}), GetEnvironmentVariablesResponseBody = import_zod31.z.object({
  variables: import_zod31.z.record(import_zod31.z.string())
}), StartDeploymentIndexingRequestBody = import_zod31.z.object({
  imageReference: import_zod31.z.string(),
  selfHosted: import_zod31.z.boolean().optional()
}), StartDeploymentIndexingResponseBody = import_zod31.z.object({
  id: import_zod31.z.string(),
  contentHash: import_zod31.z.string()
}), ExternalBuildData = import_zod31.z.object({
  buildId: import_zod31.z.string(),
  buildToken: import_zod31.z.string(),
  projectId: import_zod31.z.string()
}), InitializeDeploymentResponseBody = import_zod31.z.object({
  id: import_zod31.z.string(),
  contentHash: import_zod31.z.string(),
  shortCode: import_zod31.z.string(),
  version: import_zod31.z.string(),
  imageTag: import_zod31.z.string(),
  externalBuildData: ExternalBuildData.optional().nullable(),
  registryHost: import_zod31.z.string().optional()
}), InitializeDeploymentRequestBody = import_zod31.z.object({
  contentHash: import_zod31.z.string(),
  userId: import_zod31.z.string().optional()
}), DeploymentErrorData = import_zod31.z.object({
  name: import_zod31.z.string(),
  message: import_zod31.z.string(),
  stack: import_zod31.z.string().optional(),
  stderr: import_zod31.z.string().optional()
}), GetDeploymentResponseBody = import_zod31.z.object({
  id: import_zod31.z.string(),
  status: import_zod31.z.enum([
    "PENDING",
    "BUILDING",
    "DEPLOYING",
    "DEPLOYED",
    "FAILED",
    "CANCELED",
    "TIMED_OUT"
  ]),
  contentHash: import_zod31.z.string(),
  shortCode: import_zod31.z.string(),
  version: import_zod31.z.string(),
  imageReference: import_zod31.z.string().optional(),
  errorData: DeploymentErrorData.optional().nullable(),
  worker: import_zod31.z.object({
    id: import_zod31.z.string(),
    version: import_zod31.z.string(),
    tasks: import_zod31.z.array(
      import_zod31.z.object({
        id: import_zod31.z.string(),
        slug: import_zod31.z.string(),
        filePath: import_zod31.z.string(),
        exportName: import_zod31.z.string()
      })
    )
  }).optional()
}), CreateUploadPayloadUrlResponseBody = import_zod31.z.object({
  presignedUrl: import_zod31.z.string()
}), ReplayRunResponse = import_zod31.z.object({
  id: import_zod31.z.string()
}), CanceledRunResponse = import_zod31.z.object({
  id: import_zod31.z.string()
}), ScheduledTaskPayload = import_zod31.z.object({
  /** The schedule id associated with this run (you can have many schedules for the same task).
    You can use this to remove the schedule, update it, etc */
  scheduleId: import_zod31.z.string(),
  /** When the task was scheduled to run.
   * Note this will be slightly different from `new Date()` because it takes a few ms to run the task.
   * 
   * This date is UTC. To output it as a string with a timezone you would do this: 
   * ```ts
   * const formatted = payload.timestamp.toLocaleString("en-US", {
        timeZone: payload.timezone,
    });
    ```  */
  timestamp: import_zod31.z.date(),
  /** When the task was last run (it has been).
    This can be undefined if it's never been run. This date is UTC. */
  lastTimestamp: import_zod31.z.date().optional(),
  /** You can optionally provide an external id when creating the schedule.
    Usually you would use a userId or some other unique identifier.
    This defaults to undefined if you didn't provide one. */
  externalId: import_zod31.z.string().optional(),
  /** The IANA timezone the schedule is set to. The default is UTC.
   * You can see the full list of supported timezones here: https://cloud.trigger.dev/timezones
   */
  timezone: import_zod31.z.string(),
  /** The next 5 dates this task is scheduled to run */
  upcoming: import_zod31.z.array(import_zod31.z.date())
}), CreateScheduleOptions = import_zod31.z.object({
  /** The id of the task you want to attach to. */
  task: import_zod31.z.string(),
  /**  The schedule in CRON format.
     * 
     * ```txt
  *    *    *    *    *    *
  ┬    ┬    ┬    ┬    ┬
  │    │    │    │    |
  │    │    │    │    └ day of week (0 - 7, 1L - 7L) (0 or 7 is Sun)
  │    │    │    └───── month (1 - 12)
  │    │    └────────── day of month (1 - 31, L)
  │    └─────────────── hour (0 - 23)
  └──────────────────── minute (0 - 59)
     * ```
  
  "L" means the last. In the "day of week" field, 1L means the last Monday of the month. In the day of month field, L means the last day of the month.
  
     */
  cron: import_zod31.z.string(),
  /** You can only create one schedule with this key. If you use it twice, the second call will update the schedule.
   *
   * This is required to prevent you from creating duplicate schedules. */
  deduplicationKey: import_zod31.z.string(),
  /** Optionally, you can specify your own IDs (like a user ID) and then use it inside the run function of your task.
   *
   * This allows you to have per-user CRON tasks.
   */
  externalId: import_zod31.z.string().optional(),
  /** Optionally, you can specify a timezone in the IANA format. If unset it will use UTC.
   * If specified then the CRON will be evaluated in that timezone and will respect daylight savings.
   *
   * If you set the CRON to `0 0 * * *` and the timezone to `America/New_York` then the task will run at midnight in New York time, no matter whether it's daylight savings or not.
   *
   * You can see the full list of supported timezones here: https://cloud.trigger.dev/timezones
   *
   * @example "America/New_York", "Europe/London", "Asia/Tokyo", "Africa/Cairo"
   *
   */
  timezone: import_zod31.z.string().optional()
}), UpdateScheduleOptions = CreateScheduleOptions.omit({ deduplicationKey: !0 }), ScheduleGenerator = import_zod31.z.object({
  type: import_zod31.z.literal("CRON"),
  expression: import_zod31.z.string(),
  description: import_zod31.z.string()
}), ScheduleObject = import_zod31.z.object({
  id: import_zod31.z.string(),
  task: import_zod31.z.string(),
  active: import_zod31.z.boolean(),
  deduplicationKey: import_zod31.z.string().nullish(),
  externalId: import_zod31.z.string().nullish(),
  generator: ScheduleGenerator,
  timezone: import_zod31.z.string(),
  nextRun: import_zod31.z.coerce.date().nullish(),
  environments: import_zod31.z.array(
    import_zod31.z.object({
      id: import_zod31.z.string(),
      type: import_zod31.z.string(),
      userName: import_zod31.z.string().nullish()
    })
  )
}), DeletedScheduleObject = import_zod31.z.object({
  id: import_zod31.z.string()
}), ListSchedulesResult = import_zod31.z.object({
  data: import_zod31.z.array(ScheduleObject),
  pagination: import_zod31.z.object({
    currentPage: import_zod31.z.number(),
    totalPages: import_zod31.z.number(),
    count: import_zod31.z.number()
  })
}), ListScheduleOptions = import_zod31.z.object({
  page: import_zod31.z.number().optional(),
  perPage: import_zod31.z.number().optional()
}), TimezonesResult = import_zod31.z.object({
  timezones: import_zod31.z.array(import_zod31.z.string())
}), RunStatus = import_zod31.z.enum([
  /// Task hasn't been deployed yet but is waiting to be executed
  "WAITING_FOR_DEPLOY",
  /// Task is waiting to be executed by a worker
  "QUEUED",
  /// Task is currently being executed by a worker
  "EXECUTING",
  /// Task has failed and is waiting to be retried
  "REATTEMPTING",
  /// Task has been paused by the system, and will be resumed by the system
  "FROZEN",
  /// Task has been completed successfully
  "COMPLETED",
  /// Task has been canceled by the user
  "CANCELED",
  /// Task has been completed with errors
  "FAILED",
  /// Task has crashed and won't be retried, most likely the worker ran out of resources, e.g. memory or storage
  "CRASHED",
  /// Task was interrupted during execution, mostly this happens in development environments
  "INTERRUPTED",
  /// Task has failed to complete, due to an error in the system
  "SYSTEM_FAILURE",
  /// Task has been scheduled to run at a specific time
  "DELAYED",
  /// Task has expired and won't be executed
  "EXPIRED"
]), AttemptStatus = import_zod31.z.enum([
  "PENDING",
  "EXECUTING",
  "PAUSED",
  "COMPLETED",
  "FAILED",
  "CANCELED"
]), RunEnvironmentDetails = import_zod31.z.object({
  id: import_zod31.z.string(),
  name: import_zod31.z.string(),
  user: import_zod31.z.string().optional()
}), RunScheduleDetails = import_zod31.z.object({
  id: import_zod31.z.string(),
  externalId: import_zod31.z.string().optional(),
  deduplicationKey: import_zod31.z.string().optional(),
  generator: ScheduleGenerator
}), CommonRunFields = {
  id: import_zod31.z.string(),
  status: RunStatus,
  taskIdentifier: import_zod31.z.string(),
  idempotencyKey: import_zod31.z.string().optional(),
  version: import_zod31.z.string().optional(),
  isQueued: import_zod31.z.boolean(),
  isExecuting: import_zod31.z.boolean(),
  isCompleted: import_zod31.z.boolean(),
  isSuccess: import_zod31.z.boolean(),
  isFailed: import_zod31.z.boolean(),
  isCancelled: import_zod31.z.boolean(),
  isTest: import_zod31.z.boolean(),
  createdAt: import_zod31.z.coerce.date(),
  updatedAt: import_zod31.z.coerce.date(),
  startedAt: import_zod31.z.coerce.date().optional(),
  finishedAt: import_zod31.z.coerce.date().optional(),
  delayedUntil: import_zod31.z.coerce.date().optional(),
  ttl: import_zod31.z.string().optional(),
  expiredAt: import_zod31.z.coerce.date().optional()
}, RetrieveRunResponse = import_zod31.z.object({
  ...CommonRunFields,
  payload: import_zod31.z.any().optional(),
  payloadPresignedUrl: import_zod31.z.string().optional(),
  output: import_zod31.z.any().optional(),
  outputPresignedUrl: import_zod31.z.string().optional(),
  schedule: RunScheduleDetails.optional(),
  attempts: import_zod31.z.array(
    import_zod31.z.object({
      id: import_zod31.z.string(),
      status: AttemptStatus,
      createdAt: import_zod31.z.coerce.date(),
      updatedAt: import_zod31.z.coerce.date(),
      startedAt: import_zod31.z.coerce.date().optional(),
      completedAt: import_zod31.z.coerce.date().optional(),
      error: SerializedError.optional()
    }).optional()
  )
}), ListRunResponseItem = import_zod31.z.object({
  ...CommonRunFields,
  env: RunEnvironmentDetails
}), ListRunResponse = import_zod31.z.object({
  data: import_zod31.z.array(ListRunResponseItem),
  pagination: import_zod31.z.object({
    next: import_zod31.z.string().optional(),
    previous: import_zod31.z.string().optional()
  })
}), CreateEnvironmentVariableRequestBody = import_zod31.z.object({
  name: import_zod31.z.string(),
  value: import_zod31.z.string()
}), UpdateEnvironmentVariableRequestBody = import_zod31.z.object({
  value: import_zod31.z.string()
}), ImportEnvironmentVariablesRequestBody = import_zod31.z.object({
  variables: import_zod31.z.record(import_zod31.z.string()),
  override: import_zod31.z.boolean().optional()
}), EnvironmentVariableResponseBody = import_zod31.z.object({
  success: import_zod31.z.boolean()
}), EnvironmentVariableValue = import_zod31.z.object({
  value: import_zod31.z.string()
}), EnvironmentVariable = import_zod31.z.object({
  name: import_zod31.z.string(),
  value: import_zod31.z.string()
}), EnvironmentVariables = import_zod31.z.array(EnvironmentVariable);

// ../../packages/core/src/v3/schemas/messages.ts
var import_zod32 = require("zod");
var BackgroundWorkerServerMessages = import_zod32.z.discriminatedUnion("type", [
  import_zod32.z.object({
    type: import_zod32.z.literal("EXECUTE_RUNS"),
    payloads: import_zod32.z.array(TaskRunExecutionPayload)
  }),
  import_zod32.z.object({
    type: import_zod32.z.literal("CANCEL_ATTEMPT"),
    taskAttemptId: import_zod32.z.string(),
    taskRunId: import_zod32.z.string()
  }),
  import_zod32.z.object({
    type: import_zod32.z.literal("SCHEDULE_ATTEMPT"),
    image: import_zod32.z.string(),
    version: import_zod32.z.string(),
    machine: MachinePreset,
    // identifiers
    id: import_zod32.z.string().optional(),
    // TODO: Remove this completely in a future release
    envId: import_zod32.z.string(),
    envType: EnvironmentType,
    orgId: import_zod32.z.string(),
    projectId: import_zod32.z.string(),
    runId: import_zod32.z.string()
  }),
  import_zod32.z.object({
    type: import_zod32.z.literal("EXECUTE_RUN_LAZY_ATTEMPT"),
    payload: TaskRunExecutionLazyAttemptPayload
  })
]), serverWebsocketMessages = {
  SERVER_READY: import_zod32.z.object({
    version: import_zod32.z.literal("v1").default("v1"),
    id: import_zod32.z.string()
  }),
  BACKGROUND_WORKER_MESSAGE: import_zod32.z.object({
    version: import_zod32.z.literal("v1").default("v1"),
    backgroundWorkerId: import_zod32.z.string(),
    data: BackgroundWorkerServerMessages
  })
}, BackgroundWorkerClientMessages = import_zod32.z.discriminatedUnion("type", [
  import_zod32.z.object({
    version: import_zod32.z.literal("v1").default("v1"),
    type: import_zod32.z.literal("TASK_RUN_COMPLETED"),
    completion: TaskRunExecutionResult,
    execution: TaskRunExecution
  }),
  import_zod32.z.object({
    version: import_zod32.z.literal("v1").default("v1"),
    type: import_zod32.z.literal("TASK_RUN_FAILED_TO_RUN"),
    completion: TaskRunFailedExecutionResult
  }),
  import_zod32.z.object({
    version: import_zod32.z.literal("v1").default("v1"),
    type: import_zod32.z.literal("TASK_HEARTBEAT"),
    id: import_zod32.z.string()
  }),
  import_zod32.z.object({
    version: import_zod32.z.literal("v1").default("v1"),
    type: import_zod32.z.literal("TASK_RUN_HEARTBEAT"),
    id: import_zod32.z.string()
  })
]), BackgroundWorkerProperties = import_zod32.z.object({
  id: import_zod32.z.string(),
  version: import_zod32.z.string(),
  contentHash: import_zod32.z.string()
}), clientWebsocketMessages = {
  READY_FOR_TASKS: import_zod32.z.object({
    version: import_zod32.z.literal("v1").default("v1"),
    backgroundWorkerId: import_zod32.z.string(),
    inProgressRuns: import_zod32.z.string().array().optional()
  }),
  BACKGROUND_WORKER_DEPRECATED: import_zod32.z.object({
    version: import_zod32.z.literal("v1").default("v1"),
    backgroundWorkerId: import_zod32.z.string()
  }),
  BACKGROUND_WORKER_MESSAGE: import_zod32.z.object({
    version: import_zod32.z.literal("v1").default("v1"),
    backgroundWorkerId: import_zod32.z.string(),
    data: BackgroundWorkerClientMessages
  })
}, workerToChildMessages = {
  EXECUTE_TASK_RUN: import_zod32.z.object({
    version: import_zod32.z.literal("v1").default("v1"),
    execution: TaskRunExecution,
    traceContext: import_zod32.z.record(import_zod32.z.unknown()),
    metadata: BackgroundWorkerProperties
  }),
  TASK_RUN_COMPLETED_NOTIFICATION: import_zod32.z.discriminatedUnion("version", [
    import_zod32.z.object({
      version: import_zod32.z.literal("v1"),
      completion: TaskRunExecutionResult,
      execution: TaskRunExecution
    }),
    import_zod32.z.object({
      version: import_zod32.z.literal("v2"),
      completion: TaskRunExecutionResult
    })
  ]),
  CLEANUP: import_zod32.z.object({
    version: import_zod32.z.literal("v1").default("v1"),
    flush: import_zod32.z.boolean().default(!1),
    kill: import_zod32.z.boolean().default(!0)
  })
}, UncaughtExceptionMessage = import_zod32.z.object({
  version: import_zod32.z.literal("v1").default("v1"),
  error: import_zod32.z.object({
    name: import_zod32.z.string(),
    message: import_zod32.z.string(),
    stack: import_zod32.z.string().optional()
  }),
  origin: import_zod32.z.enum(["uncaughtException", "unhandledRejection"])
}), TaskMetadataFailedToParseData = import_zod32.z.object({
  version: import_zod32.z.literal("v1").default("v1"),
  tasks: import_zod32.z.unknown(),
  zodIssues: import_zod32.z.custom((v) => Array.isArray(v) && v.every((issue) => typeof issue == "object" && "message" in issue))
}), childToWorkerMessages = {
  TASK_RUN_COMPLETED: import_zod32.z.object({
    version: import_zod32.z.literal("v1").default("v1"),
    execution: TaskRunExecution,
    result: TaskRunExecutionResult
  }),
  TASKS_READY: import_zod32.z.object({
    version: import_zod32.z.literal("v1").default("v1"),
    tasks: TaskMetadataWithFilePath.array()
  }),
  TASKS_FAILED_TO_PARSE: TaskMetadataFailedToParseData,
  TASK_HEARTBEAT: import_zod32.z.object({
    version: import_zod32.z.literal("v1").default("v1"),
    id: import_zod32.z.string()
  }),
  TASK_RUN_HEARTBEAT: import_zod32.z.object({
    version: import_zod32.z.literal("v1").default("v1"),
    id: import_zod32.z.string()
  }),
  READY_TO_DISPOSE: import_zod32.z.undefined(),
  WAIT_FOR_DURATION: import_zod32.z.object({
    version: import_zod32.z.literal("v1").default("v1"),
    ms: import_zod32.z.number()
  }),
  WAIT_FOR_TASK: import_zod32.z.object({
    version: import_zod32.z.literal("v1").default("v1"),
    id: import_zod32.z.string()
  }),
  WAIT_FOR_BATCH: import_zod32.z.object({
    version: import_zod32.z.literal("v1").default("v1"),
    id: import_zod32.z.string(),
    runs: import_zod32.z.string().array()
  }),
  UNCAUGHT_EXCEPTION: UncaughtExceptionMessage
}, ProdChildToWorkerMessages = {
  TASK_RUN_COMPLETED: {
    message: import_zod32.z.object({
      version: import_zod32.z.literal("v1").default("v1"),
      execution: TaskRunExecution,
      result: TaskRunExecutionResult
    })
  },
  TASKS_READY: {
    message: import_zod32.z.object({
      version: import_zod32.z.literal("v1").default("v1"),
      tasks: TaskMetadataWithFilePath.array()
    })
  },
  TASKS_FAILED_TO_PARSE: {
    message: TaskMetadataFailedToParseData
  },
  TASK_HEARTBEAT: {
    message: import_zod32.z.object({
      version: import_zod32.z.literal("v1").default("v1"),
      id: import_zod32.z.string()
    })
  },
  READY_TO_DISPOSE: {
    message: import_zod32.z.undefined()
  },
  WAIT_FOR_DURATION: {
    message: import_zod32.z.object({
      version: import_zod32.z.literal("v1").default("v1"),
      ms: import_zod32.z.number(),
      now: import_zod32.z.number(),
      waitThresholdInMs: import_zod32.z.number()
    })
  },
  WAIT_FOR_TASK: {
    message: import_zod32.z.object({
      version: import_zod32.z.literal("v1").default("v1"),
      friendlyId: import_zod32.z.string()
    })
  },
  WAIT_FOR_BATCH: {
    message: import_zod32.z.object({
      version: import_zod32.z.literal("v1").default("v1"),
      batchFriendlyId: import_zod32.z.string(),
      runFriendlyIds: import_zod32.z.string().array()
    })
  },
  UNCAUGHT_EXCEPTION: {
    message: UncaughtExceptionMessage
  }
}, ProdWorkerToChildMessages = {
  EXECUTE_TASK_RUN: {
    message: import_zod32.z.object({
      version: import_zod32.z.literal("v1").default("v1"),
      execution: TaskRunExecution,
      traceContext: import_zod32.z.record(import_zod32.z.unknown()),
      metadata: BackgroundWorkerProperties
    })
  },
  TASK_RUN_COMPLETED_NOTIFICATION: {
    message: import_zod32.z.discriminatedUnion("version", [
      import_zod32.z.object({
        version: import_zod32.z.literal("v1"),
        completion: TaskRunExecutionResult,
        execution: TaskRunExecution
      }),
      import_zod32.z.object({
        version: import_zod32.z.literal("v2"),
        completion: TaskRunExecutionResult
      })
    ])
  },
  CLEANUP: {
    message: import_zod32.z.object({
      version: import_zod32.z.literal("v1").default("v1"),
      flush: import_zod32.z.boolean().default(!1),
      kill: import_zod32.z.boolean().default(!0)
    }),
    callback: import_zod32.z.void()
  },
  WAIT_COMPLETED_NOTIFICATION: {
    message: import_zod32.z.object({
      version: import_zod32.z.literal("v1").default("v1")
    })
  }
}, ProviderToPlatformMessages = {
  LOG: {
    message: import_zod32.z.object({
      version: import_zod32.z.literal("v1").default("v1"),
      data: import_zod32.z.string()
    })
  },
  LOG_WITH_ACK: {
    message: import_zod32.z.object({
      version: import_zod32.z.literal("v1").default("v1"),
      data: import_zod32.z.string()
    }),
    callback: import_zod32.z.object({
      status: import_zod32.z.literal("ok")
    })
  },
  WORKER_CRASHED: {
    message: import_zod32.z.object({
      version: import_zod32.z.literal("v1").default("v1"),
      runId: import_zod32.z.string(),
      reason: import_zod32.z.string().optional(),
      exitCode: import_zod32.z.number().optional(),
      message: import_zod32.z.string().optional(),
      logs: import_zod32.z.string().optional(),
      overrideCompletion: import_zod32.z.boolean().optional()
    })
  },
  INDEXING_FAILED: {
    message: import_zod32.z.object({
      version: import_zod32.z.literal("v1").default("v1"),
      deploymentId: import_zod32.z.string(),
      error: import_zod32.z.object({
        name: import_zod32.z.string(),
        message: import_zod32.z.string(),
        stack: import_zod32.z.string().optional(),
        stderr: import_zod32.z.string().optional()
      }),
      overrideCompletion: import_zod32.z.boolean().optional()
    })
  }
}, PlatformToProviderMessages = {
  INDEX: {
    message: import_zod32.z.object({
      version: import_zod32.z.literal("v1").default("v1"),
      imageTag: import_zod32.z.string(),
      shortCode: import_zod32.z.string(),
      apiKey: import_zod32.z.string(),
      apiUrl: import_zod32.z.string(),
      // identifiers
      envId: import_zod32.z.string(),
      envType: EnvironmentType,
      orgId: import_zod32.z.string(),
      projectId: import_zod32.z.string(),
      deploymentId: import_zod32.z.string()
    }),
    callback: import_zod32.z.discriminatedUnion("success", [
      import_zod32.z.object({
        success: import_zod32.z.literal(!1),
        error: import_zod32.z.object({
          name: import_zod32.z.string(),
          message: import_zod32.z.string(),
          stack: import_zod32.z.string().optional(),
          stderr: import_zod32.z.string().optional()
        })
      }),
      import_zod32.z.object({
        success: import_zod32.z.literal(!0)
      })
    ])
  },
  RESTORE: {
    message: import_zod32.z.object({
      version: import_zod32.z.literal("v1").default("v1"),
      type: import_zod32.z.enum(["DOCKER", "KUBERNETES"]),
      location: import_zod32.z.string(),
      reason: import_zod32.z.string().optional(),
      imageRef: import_zod32.z.string(),
      machine: MachinePreset,
      // identifiers
      checkpointId: import_zod32.z.string(),
      envId: import_zod32.z.string(),
      envType: EnvironmentType,
      orgId: import_zod32.z.string(),
      projectId: import_zod32.z.string(),
      runId: import_zod32.z.string()
    })
  }
}, CreateWorkerMessage = import_zod32.z.object({
  projectRef: import_zod32.z.string(),
  envId: import_zod32.z.string(),
  deploymentId: import_zod32.z.string(),
  metadata: import_zod32.z.object({
    cliPackageVersion: import_zod32.z.string().optional(),
    contentHash: import_zod32.z.string(),
    packageVersion: import_zod32.z.string(),
    tasks: TaskResource.array()
  })
}), CoordinatorToPlatformMessages = {
  LOG: {
    message: import_zod32.z.object({
      version: import_zod32.z.literal("v1").default("v1"),
      metadata: import_zod32.z.any(),
      text: import_zod32.z.string()
    })
  },
  CREATE_WORKER: {
    message: import_zod32.z.discriminatedUnion("version", [
      CreateWorkerMessage.extend({
        version: import_zod32.z.literal("v1")
      }),
      CreateWorkerMessage.extend({
        version: import_zod32.z.literal("v2"),
        supportsLazyAttempts: import_zod32.z.boolean()
      })
    ]),
    callback: import_zod32.z.discriminatedUnion("success", [
      import_zod32.z.object({
        success: import_zod32.z.literal(!1)
      }),
      import_zod32.z.object({
        success: import_zod32.z.literal(!0)
      })
    ])
  },
  CREATE_TASK_RUN_ATTEMPT: {
    message: import_zod32.z.object({
      version: import_zod32.z.literal("v1").default("v1"),
      runId: import_zod32.z.string(),
      envId: import_zod32.z.string()
    }),
    callback: import_zod32.z.discriminatedUnion("success", [
      import_zod32.z.object({
        success: import_zod32.z.literal(!1),
        reason: import_zod32.z.string().optional()
      }),
      import_zod32.z.object({
        success: import_zod32.z.literal(!0),
        executionPayload: ProdTaskRunExecutionPayload
      })
    ])
  },
  // Deprecated: Only workers without lazy attempt support will use this
  READY_FOR_EXECUTION: {
    message: import_zod32.z.object({
      version: import_zod32.z.literal("v1").default("v1"),
      runId: import_zod32.z.string(),
      totalCompletions: import_zod32.z.number()
    }),
    callback: import_zod32.z.discriminatedUnion("success", [
      import_zod32.z.object({
        success: import_zod32.z.literal(!1)
      }),
      import_zod32.z.object({
        success: import_zod32.z.literal(!0),
        payload: ProdTaskRunExecutionPayload
      })
    ])
  },
  READY_FOR_LAZY_ATTEMPT: {
    message: import_zod32.z.object({
      version: import_zod32.z.literal("v1").default("v1"),
      runId: import_zod32.z.string(),
      envId: import_zod32.z.string(),
      totalCompletions: import_zod32.z.number()
    }),
    callback: import_zod32.z.discriminatedUnion("success", [
      import_zod32.z.object({
        success: import_zod32.z.literal(!1),
        reason: import_zod32.z.string().optional()
      }),
      import_zod32.z.object({
        success: import_zod32.z.literal(!0),
        lazyPayload: TaskRunExecutionLazyAttemptPayload
      })
    ])
  },
  READY_FOR_RESUME: {
    message: import_zod32.z.object({
      version: import_zod32.z.literal("v1").default("v1"),
      attemptFriendlyId: import_zod32.z.string(),
      type: WaitReason
    })
  },
  TASK_RUN_COMPLETED: {
    message: import_zod32.z.object({
      version: import_zod32.z.literal("v1").default("v1"),
      execution: ProdTaskRunExecution,
      completion: TaskRunExecutionResult,
      checkpoint: import_zod32.z.object({
        docker: import_zod32.z.boolean(),
        location: import_zod32.z.string()
      }).optional()
    })
  },
  TASK_RUN_FAILED_TO_RUN: {
    message: import_zod32.z.object({
      version: import_zod32.z.literal("v1").default("v1"),
      completion: TaskRunFailedExecutionResult
    })
  },
  TASK_HEARTBEAT: {
    message: import_zod32.z.object({
      version: import_zod32.z.literal("v1").default("v1"),
      attemptFriendlyId: import_zod32.z.string()
    })
  },
  TASK_RUN_HEARTBEAT: {
    message: import_zod32.z.object({
      version: import_zod32.z.literal("v1").default("v1"),
      runId: import_zod32.z.string()
    })
  },
  CHECKPOINT_CREATED: {
    message: import_zod32.z.object({
      version: import_zod32.z.literal("v1").default("v1"),
      attemptFriendlyId: import_zod32.z.string(),
      docker: import_zod32.z.boolean(),
      location: import_zod32.z.string(),
      reason: import_zod32.z.discriminatedUnion("type", [
        import_zod32.z.object({
          type: import_zod32.z.literal("WAIT_FOR_DURATION"),
          ms: import_zod32.z.number(),
          now: import_zod32.z.number()
        }),
        import_zod32.z.object({
          type: import_zod32.z.literal("WAIT_FOR_BATCH"),
          batchFriendlyId: import_zod32.z.string(),
          runFriendlyIds: import_zod32.z.string().array()
        }),
        import_zod32.z.object({
          type: import_zod32.z.literal("WAIT_FOR_TASK"),
          friendlyId: import_zod32.z.string()
        }),
        import_zod32.z.object({
          type: import_zod32.z.literal("RETRYING_AFTER_FAILURE"),
          attemptNumber: import_zod32.z.number()
        })
      ])
    }),
    callback: import_zod32.z.object({
      version: import_zod32.z.literal("v1").default("v1"),
      keepRunAlive: import_zod32.z.boolean()
    })
  },
  INDEXING_FAILED: {
    message: import_zod32.z.object({
      version: import_zod32.z.literal("v1").default("v1"),
      deploymentId: import_zod32.z.string(),
      error: import_zod32.z.object({
        name: import_zod32.z.string(),
        message: import_zod32.z.string(),
        stack: import_zod32.z.string().optional(),
        stderr: import_zod32.z.string().optional()
      })
    })
  },
  RUN_CRASHED: {
    message: import_zod32.z.object({
      version: import_zod32.z.literal("v1").default("v1"),
      runId: import_zod32.z.string(),
      error: import_zod32.z.object({
        name: import_zod32.z.string(),
        message: import_zod32.z.string(),
        stack: import_zod32.z.string().optional()
      })
    })
  }
}, PlatformToCoordinatorMessages = {
  RESUME_AFTER_DEPENDENCY: {
    message: import_zod32.z.object({
      version: import_zod32.z.literal("v1").default("v1"),
      runId: import_zod32.z.string(),
      attemptId: import_zod32.z.string(),
      attemptFriendlyId: import_zod32.z.string(),
      completions: TaskRunExecutionResult.array(),
      executions: TaskRunExecution.array()
    })
  },
  RESUME_AFTER_DURATION: {
    message: import_zod32.z.object({
      version: import_zod32.z.literal("v1").default("v1"),
      attemptId: import_zod32.z.string(),
      attemptFriendlyId: import_zod32.z.string()
    })
  },
  REQUEST_ATTEMPT_CANCELLATION: {
    message: import_zod32.z.object({
      version: import_zod32.z.literal("v1").default("v1"),
      attemptId: import_zod32.z.string(),
      attemptFriendlyId: import_zod32.z.string()
    })
  },
  REQUEST_RUN_CANCELLATION: {
    message: import_zod32.z.object({
      version: import_zod32.z.literal("v1").default("v1"),
      runId: import_zod32.z.string(),
      delayInMs: import_zod32.z.number().optional()
    })
  },
  READY_FOR_RETRY: {
    message: import_zod32.z.object({
      version: import_zod32.z.literal("v1").default("v1"),
      runId: import_zod32.z.string()
    })
  },
  DYNAMIC_CONFIG: {
    message: import_zod32.z.object({
      version: import_zod32.z.literal("v1").default("v1"),
      checkpointThresholdInMs: import_zod32.z.number()
    })
  }
}, ClientToSharedQueueMessages = {
  READY_FOR_TASKS: {
    message: import_zod32.z.object({
      version: import_zod32.z.literal("v1").default("v1"),
      backgroundWorkerId: import_zod32.z.string()
    })
  },
  BACKGROUND_WORKER_DEPRECATED: {
    message: import_zod32.z.object({
      version: import_zod32.z.literal("v1").default("v1"),
      backgroundWorkerId: import_zod32.z.string()
    })
  },
  BACKGROUND_WORKER_MESSAGE: {
    message: import_zod32.z.object({
      version: import_zod32.z.literal("v1").default("v1"),
      backgroundWorkerId: import_zod32.z.string(),
      data: BackgroundWorkerClientMessages
    })
  }
}, SharedQueueToClientMessages = {
  SERVER_READY: {
    message: import_zod32.z.object({
      version: import_zod32.z.literal("v1").default("v1"),
      id: import_zod32.z.string()
    })
  },
  BACKGROUND_WORKER_MESSAGE: {
    message: import_zod32.z.object({
      version: import_zod32.z.literal("v1").default("v1"),
      backgroundWorkerId: import_zod32.z.string(),
      data: BackgroundWorkerServerMessages
    })
  }
}, IndexTasksMessage = import_zod32.z.object({
  version: import_zod32.z.literal("v1"),
  deploymentId: import_zod32.z.string(),
  tasks: TaskResource.array(),
  packageVersion: import_zod32.z.string()
}), ProdWorkerToCoordinatorMessages = {
  TEST: {
    message: import_zod32.z.object({
      version: import_zod32.z.literal("v1").default("v1")
    }),
    callback: import_zod32.z.void()
  },
  INDEX_TASKS: {
    message: import_zod32.z.discriminatedUnion("version", [
      IndexTasksMessage.extend({
        version: import_zod32.z.literal("v1")
      }),
      IndexTasksMessage.extend({
        version: import_zod32.z.literal("v2"),
        supportsLazyAttempts: import_zod32.z.boolean()
      })
    ]),
    callback: import_zod32.z.discriminatedUnion("success", [
      import_zod32.z.object({
        success: import_zod32.z.literal(!1)
      }),
      import_zod32.z.object({
        success: import_zod32.z.literal(!0)
      })
    ])
  },
  // Deprecated: Only workers without lazy attempt support will use this
  READY_FOR_EXECUTION: {
    message: import_zod32.z.object({
      version: import_zod32.z.literal("v1").default("v1"),
      runId: import_zod32.z.string(),
      totalCompletions: import_zod32.z.number()
    })
  },
  READY_FOR_LAZY_ATTEMPT: {
    message: import_zod32.z.object({
      version: import_zod32.z.literal("v1").default("v1"),
      runId: import_zod32.z.string(),
      totalCompletions: import_zod32.z.number()
    })
  },
  READY_FOR_RESUME: {
    message: import_zod32.z.object({
      version: import_zod32.z.literal("v1").default("v1"),
      attemptFriendlyId: import_zod32.z.string(),
      type: WaitReason
    })
  },
  READY_FOR_CHECKPOINT: {
    message: import_zod32.z.object({
      version: import_zod32.z.literal("v1").default("v1")
    })
  },
  CANCEL_CHECKPOINT: {
    message: import_zod32.z.discriminatedUnion("version", [
      import_zod32.z.object({
        version: import_zod32.z.literal("v1")
      }),
      import_zod32.z.object({
        version: import_zod32.z.literal("v2"),
        reason: WaitReason.optional()
      })
    ]).default({ version: "v1" }),
    callback: import_zod32.z.object({
      version: import_zod32.z.literal("v2").default("v2"),
      checkpointCanceled: import_zod32.z.boolean(),
      reason: WaitReason.optional()
    })
  },
  TASK_HEARTBEAT: {
    message: import_zod32.z.object({
      version: import_zod32.z.literal("v1").default("v1"),
      attemptFriendlyId: import_zod32.z.string()
    })
  },
  TASK_RUN_HEARTBEAT: {
    message: import_zod32.z.object({
      version: import_zod32.z.literal("v1").default("v1"),
      runId: import_zod32.z.string()
    })
  },
  TASK_RUN_COMPLETED: {
    message: import_zod32.z.object({
      version: import_zod32.z.literal("v1").default("v1"),
      execution: ProdTaskRunExecution,
      completion: TaskRunExecutionResult
    }),
    callback: import_zod32.z.object({
      willCheckpointAndRestore: import_zod32.z.boolean(),
      shouldExit: import_zod32.z.boolean()
    })
  },
  TASK_RUN_FAILED_TO_RUN: {
    message: import_zod32.z.object({
      version: import_zod32.z.literal("v1").default("v1"),
      completion: TaskRunFailedExecutionResult
    })
  },
  WAIT_FOR_DURATION: {
    message: import_zod32.z.object({
      version: import_zod32.z.literal("v1").default("v1"),
      ms: import_zod32.z.number(),
      now: import_zod32.z.number(),
      attemptFriendlyId: import_zod32.z.string()
    }),
    callback: import_zod32.z.object({
      willCheckpointAndRestore: import_zod32.z.boolean()
    })
  },
  WAIT_FOR_TASK: {
    message: import_zod32.z.object({
      version: import_zod32.z.enum(["v1", "v2"]).default("v1"),
      friendlyId: import_zod32.z.string(),
      // This is the attempt that is waiting
      attemptFriendlyId: import_zod32.z.string()
    }),
    callback: import_zod32.z.object({
      willCheckpointAndRestore: import_zod32.z.boolean()
    })
  },
  WAIT_FOR_BATCH: {
    message: import_zod32.z.object({
      version: import_zod32.z.enum(["v1", "v2"]).default("v1"),
      batchFriendlyId: import_zod32.z.string(),
      runFriendlyIds: import_zod32.z.string().array(),
      // This is the attempt that is waiting
      attemptFriendlyId: import_zod32.z.string()
    }),
    callback: import_zod32.z.object({
      willCheckpointAndRestore: import_zod32.z.boolean()
    })
  },
  INDEXING_FAILED: {
    message: import_zod32.z.object({
      version: import_zod32.z.literal("v1").default("v1"),
      deploymentId: import_zod32.z.string(),
      error: import_zod32.z.object({
        name: import_zod32.z.string(),
        message: import_zod32.z.string(),
        stack: import_zod32.z.string().optional(),
        stderr: import_zod32.z.string().optional()
      })
    })
  },
  CREATE_TASK_RUN_ATTEMPT: {
    message: import_zod32.z.object({
      version: import_zod32.z.literal("v1").default("v1"),
      runId: import_zod32.z.string()
    }),
    callback: import_zod32.z.discriminatedUnion("success", [
      import_zod32.z.object({
        success: import_zod32.z.literal(!1),
        reason: import_zod32.z.string().optional()
      }),
      import_zod32.z.object({
        success: import_zod32.z.literal(!0),
        executionPayload: ProdTaskRunExecutionPayload
      })
    ])
  },
  UNRECOVERABLE_ERROR: {
    message: import_zod32.z.object({
      version: import_zod32.z.literal("v1").default("v1"),
      error: import_zod32.z.object({
        name: import_zod32.z.string(),
        message: import_zod32.z.string(),
        stack: import_zod32.z.string().optional()
      })
    })
  },
  SET_STATE: {
    message: import_zod32.z.object({
      version: import_zod32.z.literal("v1").default("v1"),
      attemptFriendlyId: import_zod32.z.string().optional()
    })
  }
}, CoordinatorToProdWorkerMessages = {
  RESUME_AFTER_DEPENDENCY: {
    message: import_zod32.z.object({
      version: import_zod32.z.literal("v1").default("v1"),
      attemptId: import_zod32.z.string(),
      completions: TaskRunExecutionResult.array(),
      executions: TaskRunExecution.array()
    })
  },
  RESUME_AFTER_DURATION: {
    message: import_zod32.z.object({
      version: import_zod32.z.literal("v1").default("v1"),
      attemptId: import_zod32.z.string()
    })
  },
  // Deprecated: Only workers without lazy attempt support will use this
  EXECUTE_TASK_RUN: {
    message: import_zod32.z.object({
      version: import_zod32.z.literal("v1").default("v1"),
      executionPayload: ProdTaskRunExecutionPayload
    })
  },
  EXECUTE_TASK_RUN_LAZY_ATTEMPT: {
    message: import_zod32.z.object({
      version: import_zod32.z.literal("v1").default("v1"),
      lazyPayload: TaskRunExecutionLazyAttemptPayload
    })
  },
  REQUEST_ATTEMPT_CANCELLATION: {
    message: import_zod32.z.object({
      version: import_zod32.z.literal("v1").default("v1"),
      attemptId: import_zod32.z.string()
    })
  },
  REQUEST_EXIT: {
    message: import_zod32.z.discriminatedUnion("version", [
      import_zod32.z.object({
        version: import_zod32.z.literal("v1")
      }),
      import_zod32.z.object({
        version: import_zod32.z.literal("v2"),
        delayInMs: import_zod32.z.number().optional()
      })
    ])
  },
  READY_FOR_RETRY: {
    message: import_zod32.z.object({
      version: import_zod32.z.literal("v1").default("v1"),
      runId: import_zod32.z.string()
    })
  }
}, ProdWorkerSocketData = import_zod32.z.object({
  contentHash: import_zod32.z.string(),
  projectRef: import_zod32.z.string(),
  envId: import_zod32.z.string(),
  runId: import_zod32.z.string(),
  attemptFriendlyId: import_zod32.z.string().optional(),
  podName: import_zod32.z.string(),
  deploymentId: import_zod32.z.string(),
  deploymentVersion: import_zod32.z.string()
}), CoordinatorSocketData = import_zod32.z.object({
  supportsDynamicConfig: import_zod32.z.string().optional()
});

// ../../packages/core/src/v3/schemas/style.ts
var import_zod33 = require("zod"), PRIMARY_VARIANT = "primary", Variant = import_zod33.z.enum([PRIMARY_VARIANT]), AccessoryItem = import_zod33.z.object({
  text: import_zod33.z.string(),
  variant: import_zod33.z.string().optional(),
  url: import_zod33.z.string().optional()
}), Accessory = import_zod33.z.object({
  items: import_zod33.z.array(AccessoryItem),
  style: import_zod33.z.enum(["codepath"]).optional()
}), TaskEventStyle = import_zod33.z.object({
  icon: import_zod33.z.string().optional(),
  variant: Variant.optional(),
  accessory: Accessory.optional()
}).default({
  icon: void 0,
  variant: void 0
});

// ../../packages/core/src/v3/schemas/openTelemetry.ts
var import_zod34 = require("zod"), ExceptionEventProperties = import_zod34.z.object({
  type: import_zod34.z.string().optional(),
  message: import_zod34.z.string().optional(),
  stacktrace: import_zod34.z.string().optional()
}), ExceptionSpanEvent = import_zod34.z.object({
  name: import_zod34.z.literal("exception"),
  time: import_zod34.z.coerce.date(),
  properties: import_zod34.z.object({
    exception: ExceptionEventProperties
  })
}), CancellationSpanEvent = import_zod34.z.object({
  name: import_zod34.z.literal("cancellation"),
  time: import_zod34.z.coerce.date(),
  properties: import_zod34.z.object({
    reason: import_zod34.z.string()
  })
}), OtherSpanEvent = import_zod34.z.object({
  name: import_zod34.z.string(),
  time: import_zod34.z.coerce.date(),
  properties: import_zod34.z.record(import_zod34.z.unknown())
}), SpanEvent = import_zod34.z.union([ExceptionSpanEvent, CancellationSpanEvent, OtherSpanEvent]), SpanEvents = import_zod34.z.array(SpanEvent);
function isExceptionSpanEvent(event) {
  return event.name === "exception";
}
var SpanMessagingEvent = import_zod34.z.object({
  system: import_zod34.z.string().optional(),
  client_id: import_zod34.z.string().optional(),
  operation: import_zod34.z.enum(["publish", "create", "receive", "deliver"]),
  message: import_zod34.z.any(),
  destination: import_zod34.z.string().optional()
});

// ../../packages/core/src/v3/utils/platform.ts
var _globalThis = typeof globalThis == "object" ? globalThis : global;

// ../../packages/core/src/v3/utils/globals.ts
var GLOBAL_TRIGGER_DOT_DEV_KEY = Symbol.for("dev.trigger.ts.api"), _global = _globalThis;
function registerGlobal(type, instance, allowOverride = !1) {
  let api = _global[GLOBAL_TRIGGER_DOT_DEV_KEY] = _global[GLOBAL_TRIGGER_DOT_DEV_KEY] ?? {};
  if (!allowOverride && api[type]) {
    let err = new Error(`trigger.dev: Attempted duplicate registration of API: ${type}`);
    return !1;
  }
  return api[type] = instance, !0;
}
function getGlobal(type) {
  return _global[GLOBAL_TRIGGER_DOT_DEV_KEY]?.[type];
}
function unregisterGlobal(type) {
  let api = _global[GLOBAL_TRIGGER_DOT_DEV_KEY];
  api && delete api[type];
}

// ../../packages/core/src/v3/semanticInternalAttributes.ts
var SemanticInternalAttributes = {
  ENVIRONMENT_ID: "ctx.environment.id",
  ENVIRONMENT_TYPE: "ctx.environment.type",
  ORGANIZATION_ID: "ctx.organization.id",
  ORGANIZATION_SLUG: "ctx.organization.slug",
  ORGANIZATION_NAME: "ctx.organization.name",
  PROJECT_ID: "ctx.project.id",
  PROJECT_REF: "ctx.project.ref",
  PROJECT_NAME: "ctx.project.title",
  PROJECT_DIR: "project.dir",
  ATTEMPT_ID: "ctx.attempt.id",
  ATTEMPT_NUMBER: "ctx.attempt.number",
  RUN_ID: "ctx.run.id",
  RUN_IS_TEST: "ctx.run.isTest",
  BATCH_ID: "ctx.batch.id",
  TASK_SLUG: "ctx.task.id",
  TASK_PATH: "ctx.task.filePath",
  TASK_EXPORT_NAME: "ctx.task.exportName",
  QUEUE_NAME: "ctx.queue.name",
  QUEUE_ID: "ctx.queue.id",
  MACHINE_PRESET_NAME: "ctx.machine.name",
  MACHINE_PRESET_CPU: "ctx.machine.cpu",
  MACHINE_PRESET_MEMORY: "ctx.machine.memory",
  MACHINE_PRESET_CENTS_PER_MS: "ctx.machine.centsPerMs",
  SPAN_PARTIAL: "$span.partial",
  SPAN_ID: "$span.span_id",
  OUTPUT: "$output",
  OUTPUT_TYPE: "$mime_type_output",
  STYLE: "$style",
  STYLE_ICON: "$style.icon",
  STYLE_VARIANT: "$style.variant",
  STYLE_ACCESSORY: "$style.accessory",
  METADATA: "$metadata",
  TRIGGER: "$trigger",
  PAYLOAD: "$payload",
  PAYLOAD_TYPE: "$mime_type_payload",
  SHOW: "$show",
  SHOW_ACTIONS: "$show.actions",
  WORKER_ID: "worker.id",
  WORKER_VERSION: "worker.version",
  CLI_VERSION: "cli.version",
  SDK_VERSION: "sdk.version",
  SDK_LANGUAGE: "sdk.language",
  RETRY_AT: "retry.at",
  RETRY_DELAY: "retry.delay",
  RETRY_COUNT: "retry.count",
  LINK_TITLE: "$link.title",
  IDEMPOTENCY_KEY: "ctx.run.idempotencyKey",
  USAGE_DURATION_MS: "$usage.durationMs",
  USAGE_COST_IN_CENTS: "$usage.costInCents",
  RATE_LIMIT_LIMIT: "response.rateLimit.limit",
  RATE_LIMIT_REMAINING: "response.rateLimit.remaining",
  RATE_LIMIT_RESET: "response.rateLimit.reset"
};

// ../../packages/core/src/v3/taskContext/index.ts
var API_NAME = "task-context", _getTaskContext, getTaskContext_fn, _TaskContextAPI = class {
  constructor() {
    __privateAdd(this, _getTaskContext);
  }
  static getInstance() {
    return this._instance || (this._instance = new _TaskContextAPI()), this._instance;
  }
  get isInsideTask() {
    return __privateMethod(this, _getTaskContext, getTaskContext_fn).call(this) !== void 0;
  }
  get ctx() {
    return __privateMethod(this, _getTaskContext, getTaskContext_fn).call(this)?.ctx;
  }
  get worker() {
    return __privateMethod(this, _getTaskContext, getTaskContext_fn).call(this)?.worker;
  }
  get attributes() {
    return this.ctx ? {
      ...this.contextAttributes,
      ...this.workerAttributes
    } : {};
  }
  get workerAttributes() {
    return this.worker ? {
      [SemanticInternalAttributes.WORKER_ID]: this.worker.id,
      [SemanticInternalAttributes.WORKER_VERSION]: this.worker.version
    } : {};
  }
  get contextAttributes() {
    return this.ctx ? {
      [SemanticInternalAttributes.ATTEMPT_ID]: this.ctx.attempt.id,
      [SemanticInternalAttributes.ATTEMPT_NUMBER]: this.ctx.attempt.number,
      [SemanticInternalAttributes.TASK_SLUG]: this.ctx.task.id,
      [SemanticInternalAttributes.TASK_PATH]: this.ctx.task.filePath,
      [SemanticInternalAttributes.TASK_EXPORT_NAME]: this.ctx.task.exportName,
      [SemanticInternalAttributes.QUEUE_NAME]: this.ctx.queue.name,
      [SemanticInternalAttributes.QUEUE_ID]: this.ctx.queue.id,
      [SemanticInternalAttributes.ENVIRONMENT_ID]: this.ctx.environment.id,
      [SemanticInternalAttributes.ENVIRONMENT_TYPE]: this.ctx.environment.type,
      [SemanticInternalAttributes.ORGANIZATION_ID]: this.ctx.organization.id,
      [SemanticInternalAttributes.PROJECT_ID]: this.ctx.project.id,
      [SemanticInternalAttributes.PROJECT_REF]: this.ctx.project.ref,
      [SemanticInternalAttributes.PROJECT_NAME]: this.ctx.project.name,
      [SemanticInternalAttributes.RUN_ID]: this.ctx.run.id,
      [SemanticInternalAttributes.RUN_IS_TEST]: this.ctx.run.isTest,
      [SemanticInternalAttributes.ORGANIZATION_SLUG]: this.ctx.organization.slug,
      [SemanticInternalAttributes.ORGANIZATION_NAME]: this.ctx.organization.name,
      [SemanticInternalAttributes.BATCH_ID]: this.ctx.batch?.id,
      [SemanticInternalAttributes.IDEMPOTENCY_KEY]: this.ctx.run.idempotencyKey,
      [SemanticInternalAttributes.MACHINE_PRESET_NAME]: this.ctx.machine?.name,
      [SemanticInternalAttributes.MACHINE_PRESET_CPU]: this.ctx.machine?.cpu,
      [SemanticInternalAttributes.MACHINE_PRESET_MEMORY]: this.ctx.machine?.memory,
      [SemanticInternalAttributes.MACHINE_PRESET_CENTS_PER_MS]: this.ctx.machine?.centsPerMs
    } : {};
  }
  disable() {
    unregisterGlobal(API_NAME);
  }
  setGlobalTaskContext(taskContext2) {
    return registerGlobal(API_NAME, taskContext2);
  }
}, TaskContextAPI = _TaskContextAPI;
_getTaskContext = new WeakSet(), getTaskContext_fn = function() {
  return getGlobal(API_NAME);
};

// ../../packages/core/src/v3/task-context-api.ts
var taskContext = TaskContextAPI.getInstance();

// ../../packages/core/src/v3/apiClient/core.ts
var import_zod35 = require("zod"), import_zod_validation_error = require("zod-validation-error");

// ../../packages/core/src/v3/utils/retries.ts
var defaultRetryOptions = {
  maxAttempts: 3,
  factor: 2,
  minTimeoutInMs: 1e3,
  maxTimeoutInMs: 6e4,
  randomize: !0
}, defaultFetchRetryOptions = {
  byStatus: {
    "429,408,409,5xx": {
      strategy: "backoff",
      ...defaultRetryOptions
    }
  },
  connectionError: defaultRetryOptions,
  timeout: defaultRetryOptions
};
function calculateNextRetryDelay(options2, attempt) {
  let opts = { ...defaultRetryOptions, ...options2 };
  if (attempt >= opts.maxAttempts)
    return;
  let { factor, minTimeoutInMs, maxTimeoutInMs, randomize } = opts, random = randomize ? Math.random() + 1 : 1, timeout = Math.min(maxTimeoutInMs, random * minTimeoutInMs * Math.pow(factor, attempt - 1));
  return Math.round(timeout);
}

// ../../packages/core/src/v3/apiClient/errors.ts
var ApiError = class extends Error {
  constructor(status, error, message, headers) {
    super(`${ApiError.makeMessage(status, error, message)}`);
    this.name = "TriggerApiError", this.status = status, this.headers = headers;
    let data2 = error;
    this.error = data2, this.code = data2?.code, this.param = data2?.param, this.type = data2?.type;
  }
  static makeMessage(status, error, message) {
    let msg = error?.message ? typeof error.message == "string" ? error.message : JSON.stringify(error.message) : error ? JSON.stringify(error) : message;
    return status && msg ? `${status} ${msg}` : status ? `${status} status code (no body)` : msg || "(no status code or body)";
  }
  static generate(status, errorResponse, message, headers) {
    if (!status)
      return new ApiConnectionError({ cause: castToError(errorResponse) });
    let error = errorResponse?.error;
    return status === 400 ? new BadRequestError(status, error, message, headers) : status === 401 ? new AuthenticationError(status, error, message, headers) : status === 403 ? new PermissionDeniedError(status, error, message, headers) : status === 404 ? new NotFoundError(status, error, message, headers) : status === 409 ? new ConflictError(status, error, message, headers) : status === 422 ? new UnprocessableEntityError(status, error, message, headers) : status === 429 ? new RateLimitError(status, error, message, headers) : status >= 500 ? new InternalServerError(status, error, message, headers) : new ApiError(status, error, message, headers);
  }
}, ApiConnectionError = class extends ApiError {
  constructor({ message, cause }) {
    super(void 0, void 0, message || "Connection error.", void 0);
    this.status = void 0;
    cause && (this.cause = cause);
  }
}, BadRequestError = class extends ApiError {
  constructor() {
    super(...arguments);
    this.status = 400;
  }
}, AuthenticationError = class extends ApiError {
  constructor() {
    super(...arguments);
    this.status = 401;
  }
}, PermissionDeniedError = class extends ApiError {
  constructor() {
    super(...arguments);
    this.status = 403;
  }
}, NotFoundError = class extends ApiError {
  constructor() {
    super(...arguments);
    this.status = 404;
  }
}, ConflictError = class extends ApiError {
  constructor() {
    super(...arguments);
    this.status = 409;
  }
}, UnprocessableEntityError = class extends ApiError {
  constructor() {
    super(...arguments);
    this.status = 422;
  }
}, RateLimitError = class extends ApiError {
  constructor() {
    super(...arguments);
    this.status = 429;
  }
  get millisecondsUntilReset() {
    let resetAtUnixEpochMs = (this.headers ?? {})["x-ratelimit-reset"];
    if (typeof resetAtUnixEpochMs == "string") {
      let resetAtUnixEpoch = parseInt(resetAtUnixEpochMs, 10);
      return isNaN(resetAtUnixEpoch) ? void 0 : Math.max(resetAtUnixEpoch - Date.now() + Math.floor(Math.random() * 2e3), 0);
    }
  }
}, InternalServerError = class extends ApiError {
};
function castToError(err) {
  return err instanceof Error ? err : new Error(err);
}

// ../../packages/core/src/v3/utils/flattenAttributes.ts
var NULL_SENTINEL = "$@null((";
function flattenAttributes(obj, prefix) {
  let result = {};
  if (obj === void 0)
    return result;
  if (obj === null)
    return result[prefix || ""] = NULL_SENTINEL, result;
  if (typeof obj == "string" || typeof obj == "number" || typeof obj == "boolean")
    return result[prefix || ""] = obj, result;
  for (let [key, value] of Object.entries(obj)) {
    let newPrefix = `${prefix ? `${prefix}.` : ""}${Array.isArray(obj) ? `[${key}]` : key}`;
    if (Array.isArray(value))
      for (let i = 0; i < value.length; i++)
        typeof value[i] == "object" && value[i] !== null ? Object.assign(result, flattenAttributes(value[i], `${newPrefix}.[${i}]`)) : value[i] === null ? result[`${newPrefix}.[${i}]`] = NULL_SENTINEL : result[`${newPrefix}.[${i}]`] = value[i];
    else
      isRecord(value) ? Object.assign(result, flattenAttributes(value, newPrefix)) : typeof value == "number" || typeof value == "string" || typeof value == "boolean" ? result[newPrefix] = value : value === null && (result[newPrefix] = NULL_SENTINEL);
  }
  return result;
}
function isRecord(value) {
  return value !== null && typeof value == "object" && !Array.isArray(value);
}
function unflattenAttributes(obj) {
  if (typeof obj != "object" || obj === null || Array.isArray(obj))
    return obj;
  if (typeof obj == "object" && obj !== null && Object.keys(obj).length === 1 && Object.keys(obj)[0] === "")
    return rehydrateNull(obj[""]);
  if (Object.keys(obj).length === 0)
    return;
  let result = {};
  for (let [key, value] of Object.entries(obj)) {
    let parts = key.split(".").reduce((acc, part) => {
      if (part.includes("[")) {
        let subparts = part.split(/\[|\]/).filter((p) => p !== "");
        acc.push(...subparts);
      } else
        acc.push(part);
      return acc;
    }, []), current = result;
    for (let i = 0; i < parts.length - 1; i++) {
      let part = parts[i], nextPart = parts[i + 1], isArray2 = /^\d+$/.test(nextPart);
      isArray2 && !Array.isArray(current[part]) ? current[part] = [] : !isArray2 && current[part] === void 0 && (current[part] = {}), current = current[part];
    }
    let lastPart = parts[parts.length - 1];
    current[lastPart] = rehydrateNull(value);
  }
  if (Object.keys(result).every((k) => /^\d+$/.test(k))) {
    let maxIndex = Math.max(...Object.keys(result).map((k) => parseInt(k))), arrayResult = Array(maxIndex + 1);
    for (let key in result)
      arrayResult[parseInt(key)] = result[key];
    return arrayResult;
  }
  return result;
}
function rehydrateNull(value) {
  return value === NULL_SENTINEL ? null : value;
}

// ../../packages/core/src/v3/utils/styleAttributes.ts
function accessoryAttributes(accessory) {
  return flattenAttributes(accessory, SemanticInternalAttributes.STYLE_ACCESSORY);
}

// ../../packages/core/src/v3/apiClient/pagination.ts
var CursorPage = class {
  constructor(data2, pagination, pageFetcher) {
    this.pageFetcher = pageFetcher;
    this.data = data2, this.pagination = pagination;
  }
  getPaginatedItems() {
    return this.data ?? [];
  }
  hasNextPage() {
    return !!this.pagination.next;
  }
  hasPreviousPage() {
    return !!this.pagination.previous;
  }
  getNextPage() {
    if (!this.pagination.next)
      throw new Error("No next page available");
    return this.pageFetcher({ after: this.pagination.next });
  }
  getPreviousPage() {
    if (!this.pagination.previous)
      throw new Error("No previous page available");
    return this.pageFetcher({ before: this.pagination.previous });
  }
  async *iterPages() {
    let page = this;
    for (yield page; page.hasNextPage(); )
      page = await page.getNextPage(), yield page;
  }
  async *[Symbol.asyncIterator]() {
    for await (let page of this.iterPages())
      for (let item of page.getPaginatedItems())
        yield item;
  }
}, OffsetLimitPage = class {
  constructor(data2, pagination, pageFetcher) {
    this.pageFetcher = pageFetcher;
    this.data = data2, this.pagination = pagination;
  }
  getPaginatedItems() {
    return this.data ?? [];
  }
  hasNextPage() {
    return this.pagination.currentPage < this.pagination.totalPages;
  }
  hasPreviousPage() {
    return this.pagination.currentPage > 1;
  }
  getNextPage() {
    if (!this.hasNextPage())
      throw new Error("No next page available");
    return this.pageFetcher({
      page: this.pagination.currentPage + 1
    });
  }
  getPreviousPage() {
    if (!this.hasPreviousPage())
      throw new Error("No previous page available");
    return this.pageFetcher({
      page: this.pagination.currentPage - 1
    });
  }
  async *iterPages() {
    let page = this;
    for (yield page; page.hasNextPage(); )
      page = await page.getNextPage(), yield page;
  }
  async *[Symbol.asyncIterator]() {
    for await (let page of this.iterPages())
      for (let item of page.getPaginatedItems())
        yield item;
  }
};

// ../../packages/core/src/v3/apiClient/core.ts
var defaultRetryOptions2 = {
  maxAttempts: 3,
  factor: 2,
  minTimeoutInMs: 1e3,
  maxTimeoutInMs: 6e4,
  randomize: !1
};
function zodfetch(schema18, url, requestInit, options2) {
  return new ApiPromise(_doZodFetch(schema18, url, requestInit, options2));
}
function zodfetchCursorPage(schema18, url, params, requestInit, options2) {
  let query = new URLSearchParams(params.query);
  params.limit && query.set("page[size]", String(params.limit)), params.after && query.set("page[after]", params.after), params.before && query.set("page[before]", params.before);
  let cursorPageSchema = import_zod35.z.object({
    data: import_zod35.z.array(schema18),
    pagination: import_zod35.z.object({
      next: import_zod35.z.string().optional(),
      previous: import_zod35.z.string().optional()
    })
  }), $url = new URL(url);
  $url.search = query.toString();
  let fetchResult = _doZodFetch(cursorPageSchema, $url.href, requestInit, options2);
  return new CursorPagePromise(fetchResult, schema18, url, params, requestInit, options2);
}
function zodfetchOffsetLimitPage(schema18, url, params, requestInit, options2) {
  let query = new URLSearchParams(params.query);
  params.limit && query.set("perPage", String(params.limit)), params.page && query.set("page", String(params.page));
  let offsetLimitPageSchema = import_zod35.z.object({
    data: import_zod35.z.array(schema18),
    pagination: import_zod35.z.object({
      currentPage: import_zod35.z.coerce.number(),
      totalPages: import_zod35.z.coerce.number(),
      count: import_zod35.z.coerce.number()
    })
  }), $url = new URL(url);
  $url.search = query.toString();
  let fetchResult = _doZodFetch(offsetLimitPageSchema, $url.href, requestInit, options2);
  return new OffsetLimitPagePromise(fetchResult, schema18, url, params, requestInit, options2);
}
async function traceZodFetch(params, callback) {
  if (!params.options?.tracer)
    return callback();
  let url = new URL(params.url), method = params.requestInit?.method ?? "GET", name = params.options.name ?? `${method} ${url.pathname}`;
  return await params.options.tracer.startActiveSpan(
    name,
    async (span) => await callback(span),
    {
      attributes: {
        [SemanticInternalAttributes.STYLE_ICON]: params.options?.icon ?? "api",
        ...params.options.attributes
      }
    }
  );
}
async function _doZodFetch(schema18, url, requestInit, options2) {
  let $requestInit = await requestInit;
  return traceZodFetch({ url, requestInit: $requestInit, options: options2 }, async (span) => {
    let result = await _doZodFetchWithRetries(schema18, url, $requestInit, options2);
    return options2?.onResponseBody && span && options2.onResponseBody(result.data, span), result;
  });
}
async function _doZodFetchWithRetries(schema18, url, requestInit, options2, attempt = 1) {
  try {
    let response = await fetch(url, requestInitWithCache(requestInit)), responseHeaders = createResponseHeaders(response.headers);
    if (!response.ok) {
      let retryResult = shouldRetry(response, attempt, options2?.retry);
      if (retryResult.retry)
        return await waitForRetry(url, attempt + 1, retryResult.delay, options2, requestInit, response), await _doZodFetchWithRetries(schema18, url, requestInit, options2, attempt + 1);
      {
        let errText = await response.text().catch((e) => castToError2(e).message), errJSON = safeJsonParse(errText), errMessage = errJSON ? void 0 : errText;
        throw ApiError.generate(response.status, errJSON, errMessage, responseHeaders);
      }
    }
    let jsonBody = await response.json(), parsedResult = schema18.safeParse(jsonBody);
    if (parsedResult.success)
      return { data: parsedResult.data, response };
    throw (0, import_zod_validation_error.fromZodError)(parsedResult.error);
  } catch (error) {
    if (error instanceof ApiError)
      throw error;
    if (options2?.retry) {
      let retry2 = { ...defaultRetryOptions2, ...options2.retry }, delay = calculateNextRetryDelay(retry2, attempt);
      if (delay)
        return await waitForRetry(url, attempt + 1, delay, options2, requestInit), await _doZodFetchWithRetries(schema18, url, requestInit, options2, attempt + 1);
    }
    throw new ApiConnectionError({ cause: castToError2(error) });
  }
}
function castToError2(err) {
  return err instanceof Error ? err : new Error(err);
}
function shouldRetry(response, attempt, retryOptions) {
  function shouldRetryForOptions() {
    let retry2 = { ...defaultRetryOptions2, ...retryOptions }, delay = calculateNextRetryDelay(retry2, attempt);
    return delay ? { retry: !0, delay } : { retry: !1 };
  }
  let shouldRetryHeader = response.headers.get("x-should-retry");
  if (shouldRetryHeader === "true")
    return shouldRetryForOptions();
  if (shouldRetryHeader === "false")
    return { retry: !1 };
  if (response.status === 408 || response.status === 409)
    return shouldRetryForOptions();
  if (response.status === 429) {
    if (attempt >= (typeof retryOptions?.maxAttempts == "number" ? retryOptions?.maxAttempts : 3))
      return { retry: !1 };
    let resetAtUnixEpochMs = response.headers.get("x-ratelimit-reset");
    if (resetAtUnixEpochMs) {
      let delay = parseInt(resetAtUnixEpochMs, 10) - Date.now() + Math.floor(Math.random() * 1e3);
      if (delay > 0)
        return { retry: !0, delay };
    }
    return shouldRetryForOptions();
  }
  return response.status >= 500 ? shouldRetryForOptions() : { retry: !1 };
}
function safeJsonParse(text) {
  try {
    return JSON.parse(text);
  } catch {
    return;
  }
}
function createResponseHeaders(headers) {
  return new Proxy(
    Object.fromEntries(
      // @ts-ignore
      headers.entries()
    ),
    {
      get(target, name) {
        let key = name.toString();
        return target[key.toLowerCase()] || target[key];
      }
    }
  );
}
function requestInitWithCache(requestInit) {
  try {
    let withCache = {
      ...requestInit,
      cache: "no-cache"
    }, _ = new Request("http://localhost", withCache);
    return withCache;
  } catch {
    return requestInit ?? {};
  }
}
var ApiPromise = class extends Promise {
  constructor(responsePromise) {
    super((resolve) => {
      resolve(null);
    });
    this.responsePromise = responsePromise;
  }
  /**
   * Gets the raw `Response` instance instead of parsing the response
   * data.
   *
   * If you want to parse the response body but still get the `Response`
   * instance, you can use {@link withResponse()}.
   */
  asResponse() {
    return this.responsePromise.then((p) => p.response);
  }
  /**
   * Gets the parsed response data and the raw `Response` instance.
   *
   * If you just want to get the raw `Response` instance without parsing it,
   * you can use {@link asResponse()}.
   */
  async withResponse() {
    let [data2, response] = await Promise.all([this.parse(), this.asResponse()]);
    return { data: data2, response };
  }
  parse() {
    return this.responsePromise.then((result) => result.data);
  }
  then(onfulfilled, onrejected) {
    return this.parse().then(onfulfilled, onrejected);
  }
  catch(onrejected) {
    return this.parse().catch(onrejected);
  }
  finally(onfinally) {
    return this.parse().finally(onfinally);
  }
}, CursorPagePromise = class extends ApiPromise {
  constructor(result, schema18, url, params, requestInit, options2) {
    super(
      result.then((result2) => ({
        data: new CursorPage(result2.data.data, result2.data.pagination, this.#fetchPage.bind(this)),
        response: result2.response
      }))
    );
    this.schema = schema18;
    this.url = url;
    this.params = params;
    this.requestInit = requestInit;
    this.options = options2;
  }
  #fetchPage(params) {
    return zodfetchCursorPage(
      this.schema,
      this.url,
      { ...this.params, ...params },
      this.requestInit,
      this.options
    );
  }
  /**
   * Allow auto-paginating iteration on an unawaited list call, eg:
   *
   *    for await (const item of client.items.list()) {
   *      console.log(item)
   *    }
   */
  async *[Symbol.asyncIterator]() {
    let page = await this;
    for await (let item of page)
      yield item;
  }
}, OffsetLimitPagePromise = class extends ApiPromise {
  constructor(result, schema18, url, params, requestInit, options2) {
    super(
      result.then((result2) => ({
        data: new OffsetLimitPage(
          result2.data.data,
          result2.data.pagination,
          this.#fetchPage.bind(this)
        ),
        response: result2.response
      }))
    );
    this.schema = schema18;
    this.url = url;
    this.params = params;
    this.requestInit = requestInit;
    this.options = options2;
  }
  #fetchPage(params) {
    return zodfetchOffsetLimitPage(
      this.schema,
      this.url,
      { ...this.params, ...params },
      this.requestInit,
      this.options
    );
  }
  /**
   * Allow auto-paginating iteration on an unawaited list call, eg:
   *
   *    for await (const item of client.items.list()) {
   *      console.log(item)
   *    }
   */
  async *[Symbol.asyncIterator]() {
    let page = await this;
    for await (let item of page)
      yield item;
  }
};
async function waitForRetry(url, attempt, delay, options2, requestInit, response) {
  if (options2?.tracer) {
    let method = requestInit?.method ?? "GET";
    return options2.tracer.startActiveSpan(
      response ? `wait after ${response.status}` : "wait after error",
      async (span) => {
        await new Promise((resolve) => setTimeout(resolve, delay));
      },
      {
        attributes: {
          [SemanticInternalAttributes.STYLE_ICON]: "wait",
          ...accessoryAttributes({
            items: [
              {
                text: `retrying ${options2?.name ?? method.toUpperCase()} in ${delay}ms`,
                variant: "normal"
              }
            ],
            style: "codepath"
          })
        }
      }
    );
  }
  await new Promise((resolve) => setTimeout(resolve, delay));
}

// ../../packages/core/src/v3/apiClient/index.ts
var DEFAULT_ZOD_FETCH_OPTIONS = {
  retry: {
    maxAttempts: 3,
    minTimeoutInMs: 1e3,
    maxTimeoutInMs: 3e4,
    factor: 2,
    randomize: !1
  }
};
var ApiClient = class {
  constructor(baseUrl, accessToken, requestOptions = {}) {
    this.accessToken = accessToken;
    this.baseUrl = baseUrl.replace(/\/$/, ""), this.defaultRequestOptions = mergeRequestOptions(DEFAULT_ZOD_FETCH_OPTIONS, requestOptions);
  }
  async getRunResult(runId, requestOptions) {
    try {
      return await zodfetch(
        TaskRunExecutionResult,
        `${this.baseUrl}/api/v1/runs/${runId}/result`,
        {
          method: "GET",
          headers: this.#getHeaders(!1)
        },
        mergeRequestOptions(this.defaultRequestOptions, requestOptions)
      );
    } catch (error) {
      if (error instanceof ApiError && error.status === 404)
        return;
      throw error;
    }
  }
  async getBatchResults(batchId, requestOptions) {
    return await zodfetch(
      BatchTaskRunExecutionResult,
      `${this.baseUrl}/api/v1/batches/${batchId}/results`,
      {
        method: "GET",
        headers: this.#getHeaders(!1)
      },
      mergeRequestOptions(this.defaultRequestOptions, requestOptions)
    );
  }
  triggerTask(taskId, body, options2, requestOptions) {
    let encodedTaskId = encodeURIComponent(taskId);
    return zodfetch(
      TriggerTaskResponse,
      `${this.baseUrl}/api/v1/tasks/${encodedTaskId}/trigger`,
      {
        method: "POST",
        headers: this.#getHeaders(options2?.spanParentAsLink ?? !1),
        body: JSON.stringify(body)
      },
      mergeRequestOptions(this.defaultRequestOptions, requestOptions)
    );
  }
  batchTriggerTask(taskId, body, options2, requestOptions) {
    let encodedTaskId = encodeURIComponent(taskId);
    return zodfetch(
      BatchTriggerTaskResponse,
      `${this.baseUrl}/api/v1/tasks/${encodedTaskId}/batch`,
      {
        method: "POST",
        headers: this.#getHeaders(options2?.spanParentAsLink ?? !1),
        body: JSON.stringify(body)
      },
      mergeRequestOptions(this.defaultRequestOptions, requestOptions)
    );
  }
  createUploadPayloadUrl(filename, requestOptions) {
    return zodfetch(
      CreateUploadPayloadUrlResponseBody,
      `${this.baseUrl}/api/v1/packets/${filename}`,
      {
        method: "PUT",
        headers: this.#getHeaders(!1)
      },
      mergeRequestOptions(this.defaultRequestOptions, requestOptions)
    );
  }
  getPayloadUrl(filename, requestOptions) {
    return zodfetch(
      CreateUploadPayloadUrlResponseBody,
      `${this.baseUrl}/api/v1/packets/${filename}`,
      {
        method: "GET",
        headers: this.#getHeaders(!1)
      },
      mergeRequestOptions(this.defaultRequestOptions, requestOptions)
    );
  }
  retrieveRun(runId, requestOptions) {
    return zodfetch(
      RetrieveRunResponse,
      `${this.baseUrl}/api/v3/runs/${runId}`,
      {
        method: "GET",
        headers: this.#getHeaders(!1)
      },
      mergeRequestOptions(this.defaultRequestOptions, requestOptions)
    );
  }
  listRuns(query, requestOptions) {
    let searchParams = createSearchQueryForListRuns(query);
    return zodfetchCursorPage(
      ListRunResponseItem,
      `${this.baseUrl}/api/v1/runs`,
      {
        query: searchParams,
        limit: query?.limit,
        after: query?.after,
        before: query?.before
      },
      {
        method: "GET",
        headers: this.#getHeaders(!1)
      },
      mergeRequestOptions(this.defaultRequestOptions, requestOptions)
    );
  }
  listProjectRuns(projectRef, query, requestOptions) {
    let searchParams = createSearchQueryForListRuns(query);
    return query?.env && searchParams.append(
      "filter[env]",
      Array.isArray(query.env) ? query.env.join(",") : query.env
    ), zodfetchCursorPage(
      ListRunResponseItem,
      `${this.baseUrl}/api/v1/projects/${projectRef}/runs`,
      {
        query: searchParams,
        limit: query?.limit,
        after: query?.after,
        before: query?.before
      },
      {
        method: "GET",
        headers: this.#getHeaders(!1)
      },
      mergeRequestOptions(this.defaultRequestOptions, requestOptions)
    );
  }
  replayRun(runId, requestOptions) {
    return zodfetch(
      ReplayRunResponse,
      `${this.baseUrl}/api/v1/runs/${runId}/replay`,
      {
        method: "POST",
        headers: this.#getHeaders(!1)
      },
      mergeRequestOptions(this.defaultRequestOptions, requestOptions)
    );
  }
  cancelRun(runId, requestOptions) {
    return zodfetch(
      CanceledRunResponse,
      `${this.baseUrl}/api/v2/runs/${runId}/cancel`,
      {
        method: "POST",
        headers: this.#getHeaders(!1)
      },
      mergeRequestOptions(this.defaultRequestOptions, requestOptions)
    );
  }
  rescheduleRun(runId, body, requestOptions) {
    return zodfetch(
      RetrieveRunResponse,
      `${this.baseUrl}/api/v1/runs/${runId}/reschedule`,
      {
        method: "POST",
        headers: this.#getHeaders(!1),
        body: JSON.stringify(body)
      },
      mergeRequestOptions(this.defaultRequestOptions, requestOptions)
    );
  }
  createSchedule(options2, requestOptions) {
    return zodfetch(
      ScheduleObject,
      `${this.baseUrl}/api/v1/schedules`,
      {
        method: "POST",
        headers: this.#getHeaders(!1),
        body: JSON.stringify(options2)
      },
      mergeRequestOptions(this.defaultRequestOptions, requestOptions)
    );
  }
  listSchedules(options2, requestOptions) {
    let searchParams = new URLSearchParams();
    return options2?.page && searchParams.append("page", options2.page.toString()), options2?.perPage && searchParams.append("perPage", options2.perPage.toString()), zodfetchOffsetLimitPage(
      ScheduleObject,
      `${this.baseUrl}/api/v1/schedules`,
      {
        page: options2?.page,
        limit: options2?.perPage
      },
      {
        method: "GET",
        headers: this.#getHeaders(!1)
      },
      mergeRequestOptions(this.defaultRequestOptions, requestOptions)
    );
  }
  retrieveSchedule(scheduleId, requestOptions) {
    return zodfetch(
      ScheduleObject,
      `${this.baseUrl}/api/v1/schedules/${scheduleId}`,
      {
        method: "GET",
        headers: this.#getHeaders(!1)
      },
      mergeRequestOptions(this.defaultRequestOptions, requestOptions)
    );
  }
  updateSchedule(scheduleId, options2, requestOptions) {
    return zodfetch(
      ScheduleObject,
      `${this.baseUrl}/api/v1/schedules/${scheduleId}`,
      {
        method: "PUT",
        headers: this.#getHeaders(!1),
        body: JSON.stringify(options2)
      },
      mergeRequestOptions(this.defaultRequestOptions, requestOptions)
    );
  }
  deactivateSchedule(scheduleId, requestOptions) {
    return zodfetch(
      ScheduleObject,
      `${this.baseUrl}/api/v1/schedules/${scheduleId}/deactivate`,
      {
        method: "POST",
        headers: this.#getHeaders(!1)
      },
      mergeRequestOptions(this.defaultRequestOptions, requestOptions)
    );
  }
  activateSchedule(scheduleId, requestOptions) {
    return zodfetch(
      ScheduleObject,
      `${this.baseUrl}/api/v1/schedules/${scheduleId}/activate`,
      {
        method: "POST",
        headers: this.#getHeaders(!1)
      },
      mergeRequestOptions(this.defaultRequestOptions, requestOptions)
    );
  }
  deleteSchedule(scheduleId, requestOptions) {
    return zodfetch(
      DeletedScheduleObject,
      `${this.baseUrl}/api/v1/schedules/${scheduleId}`,
      {
        method: "DELETE",
        headers: this.#getHeaders(!1)
      },
      mergeRequestOptions(this.defaultRequestOptions, requestOptions)
    );
  }
  listEnvVars(projectRef, slug3, requestOptions) {
    return zodfetch(
      EnvironmentVariables,
      `${this.baseUrl}/api/v1/projects/${projectRef}/envvars/${slug3}`,
      {
        method: "GET",
        headers: this.#getHeaders(!1)
      },
      mergeRequestOptions(this.defaultRequestOptions, requestOptions)
    );
  }
  importEnvVars(projectRef, slug3, body, requestOptions) {
    return zodfetch(
      EnvironmentVariableResponseBody,
      `${this.baseUrl}/api/v1/projects/${projectRef}/envvars/${slug3}/import`,
      {
        method: "POST",
        headers: this.#getHeaders(!1),
        body: JSON.stringify(body)
      },
      mergeRequestOptions(this.defaultRequestOptions, requestOptions)
    );
  }
  retrieveEnvVar(projectRef, slug3, key, requestOptions) {
    return zodfetch(
      EnvironmentVariableValue,
      `${this.baseUrl}/api/v1/projects/${projectRef}/envvars/${slug3}/${key}`,
      {
        method: "GET",
        headers: this.#getHeaders(!1)
      },
      mergeRequestOptions(this.defaultRequestOptions, requestOptions)
    );
  }
  createEnvVar(projectRef, slug3, body, requestOptions) {
    return zodfetch(
      EnvironmentVariableResponseBody,
      `${this.baseUrl}/api/v1/projects/${projectRef}/envvars/${slug3}`,
      {
        method: "POST",
        headers: this.#getHeaders(!1),
        body: JSON.stringify(body)
      },
      mergeRequestOptions(this.defaultRequestOptions, requestOptions)
    );
  }
  updateEnvVar(projectRef, slug3, key, body, requestOptions) {
    return zodfetch(
      EnvironmentVariableResponseBody,
      `${this.baseUrl}/api/v1/projects/${projectRef}/envvars/${slug3}/${key}`,
      {
        method: "PUT",
        headers: this.#getHeaders(!1),
        body: JSON.stringify(body)
      },
      mergeRequestOptions(this.defaultRequestOptions, requestOptions)
    );
  }
  deleteEnvVar(projectRef, slug3, key, requestOptions) {
    return zodfetch(
      EnvironmentVariableResponseBody,
      `${this.baseUrl}/api/v1/projects/${projectRef}/envvars/${slug3}/${key}`,
      {
        method: "DELETE",
        headers: this.#getHeaders(!1)
      },
      mergeRequestOptions(this.defaultRequestOptions, requestOptions)
    );
  }
  #getHeaders(spanParentAsLink) {
    let headers = {
      "Content-Type": "application/json",
      Authorization: `Bearer ${this.accessToken}`,
      "trigger-version": version
    };
    return taskContext.isInsideTask && (headers["x-trigger-worker"] = "true", import_api3.propagation.inject(import_api3.context.active(), headers), spanParentAsLink && (headers["x-trigger-span-parent-as-link"] = "1")), headers;
  }
};
function createSearchQueryForListRuns(query) {
  let searchParams = new URLSearchParams();
  return query && (query.status && searchParams.append(
    "filter[status]",
    Array.isArray(query.status) ? query.status.join(",") : query.status
  ), query.taskIdentifier && searchParams.append(
    "filter[taskIdentifier]",
    Array.isArray(query.taskIdentifier) ? query.taskIdentifier.join(",") : query.taskIdentifier
  ), query.version && searchParams.append(
    "filter[version]",
    Array.isArray(query.version) ? query.version.join(",") : query.version
  ), query.bulkAction && searchParams.append("filter[bulkAction]", query.bulkAction), query.schedule && searchParams.append("filter[schedule]", query.schedule), typeof query.isTest == "boolean" && searchParams.append("filter[isTest]", String(query.isTest)), query.from && searchParams.append(
    "filter[createdAt][from]",
    query.from instanceof Date ? query.from.getTime().toString() : query.from.toString()
  ), query.to && searchParams.append(
    "filter[createdAt][to]",
    query.to instanceof Date ? query.to.getTime().toString() : query.to.toString()
  ), query.period && searchParams.append("filter[createdAt][period]", query.period)), searchParams;
}
function mergeRequestOptions(defaultOptions, options2) {
  return options2 ? {
    ...defaultOptions,
    ...options2,
    retry: {
      ...defaultOptions.retry,
      ...options2.retry
    }
  } : defaultOptions;
}

// ../../packages/core/src/v3/limits.ts
var OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT = 256;
var OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT = 1028;
var OFFLOAD_IO_PACKET_LENGTH_LIMIT = 128 * 1024;
function imposeAttributeLimits(attributes) {
  let newAttributes = {};
  for (let [key, value] of Object.entries(attributes))
    if (!(calculateAttributeValueLength(value) > OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT)) {
      if (Object.keys(newAttributes).length >= OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT)
        break;
      newAttributes[key] = value;
    }
  return newAttributes;
}
function calculateAttributeValueLength(value) {
  return value == null ? 0 : typeof value == "string" ? value.length : typeof value == "number" ? 8 : typeof value == "boolean" ? 4 : Array.isArray(value) ? value.reduce((acc, v) => acc + calculateAttributeValueLength(v), 0) : 0;
}

// ../../packages/core/src/v3/logger/taskLogger.ts
var import_api_logs = require("@opentelemetry/api-logs");
var NoopTaskLogger = class {
  debug() {
  }
  log() {
  }
  info() {
  }
  warn() {
  }
  error() {
  }
  trace(name, fn) {
    return fn({});
  }
};

// ../../packages/core/src/v3/logger/index.ts
var API_NAME2 = "logger", NOOP_TASK_LOGGER = new NoopTaskLogger(), _getTaskLogger, getTaskLogger_fn, _LoggerAPI = class {
  constructor() {
    __privateAdd(this, _getTaskLogger);
  }
  static getInstance() {
    return this._instance || (this._instance = new _LoggerAPI()), this._instance;
  }
  disable() {
    unregisterGlobal(API_NAME2);
  }
  setGlobalTaskLogger(taskLogger) {
    return registerGlobal(API_NAME2, taskLogger);
  }
  debug(message, metadata) {
    __privateMethod(this, _getTaskLogger, getTaskLogger_fn).call(this).debug(message, metadata);
  }
  log(message, metadata) {
    __privateMethod(this, _getTaskLogger, getTaskLogger_fn).call(this).log(message, metadata);
  }
  info(message, metadata) {
    __privateMethod(this, _getTaskLogger, getTaskLogger_fn).call(this).info(message, metadata);
  }
  warn(message, metadata) {
    __privateMethod(this, _getTaskLogger, getTaskLogger_fn).call(this).warn(message, metadata);
  }
  error(message, metadata) {
    __privateMethod(this, _getTaskLogger, getTaskLogger_fn).call(this).error(message, metadata);
  }
  trace(name, fn) {
    return __privateMethod(this, _getTaskLogger, getTaskLogger_fn).call(this).trace(name, fn);
  }
}, LoggerAPI = _LoggerAPI;
_getTaskLogger = new WeakSet(), getTaskLogger_fn = function() {
  return getGlobal(API_NAME2) ?? NOOP_TASK_LOGGER;
};

// ../../packages/core/src/v3/logger-api.ts
var logger2 = LoggerAPI.getInstance();

// ../../packages/core/src/v3/utils/getEnv.ts
function getEnvVar(name) {
  if (typeof process < "u" && typeof process.env == "object" && process.env !== null)
    return process.env[name];
}

// ../../packages/core/src/v3/apiClientManager/index.ts
var API_NAME3 = "api-client", _getConfig, getConfig_fn, _APIClientManagerAPI = class {
  constructor() {
    __privateAdd(this, _getConfig);
  }
  static getInstance() {
    return this._instance || (this._instance = new _APIClientManagerAPI()), this._instance;
  }
  disable() {
    unregisterGlobal(API_NAME3);
  }
  setGlobalAPIClientConfiguration(config) {
    return registerGlobal(API_NAME3, config);
  }
  get baseURL() {
    return __privateMethod(this, _getConfig, getConfig_fn).call(this)?.baseURL ?? getEnvVar("TRIGGER_API_URL") ?? "https://api.trigger.dev";
  }
  get accessToken() {
    return __privateMethod(this, _getConfig, getConfig_fn).call(this)?.secretKey ?? getEnvVar("TRIGGER_SECRET_KEY") ?? getEnvVar("TRIGGER_ACCESS_TOKEN");
  }
  get client() {
    if (!(!this.baseURL || !this.accessToken))
      return new ApiClient(this.baseURL, this.accessToken);
  }
}, APIClientManagerAPI = _APIClientManagerAPI;
_getConfig = new WeakSet(), getConfig_fn = function() {
  return getGlobal(API_NAME3);
};

// ../../packages/core/src/v3/apiClientManager-api.ts
var apiClientManager = APIClientManagerAPI.getInstance();

// ../../packages/core/src/v3/utils/durations.ts
var import_humanize_duration = __toESM(require("humanize-duration"));
function dateDifference(date1, date2) {
  return Math.abs(date1.getTime() - date2.getTime());
}
function formatDuration(start, end, options2) {
  return !start || !end ? "\u2013" : formatDurationMilliseconds(dateDifference(start, end), options2);
}
function nanosecondsToMilliseconds(nanoseconds) {
  return nanoseconds / 1e6;
}
function millisecondsToNanoseconds(milliseconds) {
  return milliseconds * 1e6;
}
function formatDurationNanoseconds(nanoseconds, options2) {
  return formatDurationMilliseconds(nanosecondsToMilliseconds(nanoseconds), options2);
}
var aboveOneSecondUnits = ["d", "h", "m", "s"], belowOneSecondUnits = ["ms"];
function formatDurationMilliseconds(milliseconds, options2) {
  let duration = (0, import_humanize_duration.default)(milliseconds, {
    units: options2?.units ? options2.units : milliseconds < 1e3 ? belowOneSecondUnits : aboveOneSecondUnits,
    maxDecimalPoints: options2?.maxDecimalPoints ?? 1,
    largest: 2
  });
  if (!options2)
    return duration;
  switch (options2.style) {
    case "short":
      duration = duration.replace(" milliseconds", "ms"), duration = duration.replace(" millisecond", "ms"), duration = duration.replace(" seconds", "s"), duration = duration.replace(" second", "s"), duration = duration.replace(" minutes", "m"), duration = duration.replace(" minute", "m"), duration = duration.replace(" hours", "h"), duration = duration.replace(" hour", "h"), duration = duration.replace(" days", "d"), duration = duration.replace(" day", "d"), duration = duration.replace(" weeks", "w"), duration = duration.replace(" week", "w"), duration = duration.replace(" months", "mo"), duration = duration.replace(" month", "mo"), duration = duration.replace(" years", "y"), duration = duration.replace(" year", "y");
  }
  return duration;
}
function formatDurationInDays(milliseconds) {
  return (0, import_humanize_duration.default)(milliseconds, {
    maxDecimalPoints: 0,
    largest: 2,
    units: ["d"]
  });
}

// ../../packages/core/src/v3/utils/omit.ts
function omit(obj, ...keys) {
  let result = {};
  for (let key in obj)
    keys.includes(key) || (result[key] = obj[key]);
  return result;
}

// ../../packages/core/src/v3/utils/ioSerialization.ts
async function parsePacket(value) {
  if (value.data)
    switch (value.dataType) {
      case "application/json":
        return JSON.parse(value.data);
      case "application/super+json":
        let { parse: parse47 } = await loadSuperJSON();
        return parse47(value.data);
      case "text/plain":
        return value.data;
      case "application/store":
        throw new Error(
          `Cannot parse an application/store packet (${value.data}). Needs to be imported first.`
        );
      default:
        return value.data;
    }
}
async function stringifyIO(value) {
  if (value === void 0)
    return { dataType: "application/json" };
  if (typeof value == "string")
    return { data: value, dataType: "text/plain" };
  try {
    let { stringify: stringify3 } = await loadSuperJSON();
    return { data: stringify3(value), dataType: "application/super+json" };
  } catch {
    return { data: value, dataType: "application/json" };
  }
}
function packetRequiresOffloading(packet, lengthLimit) {
  if (!packet.data)
    return {
      needsOffloading: !1,
      size: 0
    };
  let byteSize = Buffer.byteLength(packet.data, "utf8");
  return {
    needsOffloading: byteSize >= (lengthLimit ?? OFFLOAD_IO_PACKET_LENGTH_LIMIT),
    size: byteSize
  };
}
async function conditionallyImportPacket(packet, tracer3) {
  return packet.dataType !== "application/store" ? packet : tracer3 ? await tracer3.startActiveSpan(
    "store.downloadPayload",
    async (span) => await importPacket(packet, span),
    {
      attributes: {
        [SemanticInternalAttributes.STYLE_ICON]: "cloud-download"
      }
    }
  ) ?? packet : await importPacket(packet);
}
async function importPacket(packet, span) {
  if (!packet.data || !apiClientManager.client)
    return packet;
  let presignedResponse = await apiClientManager.client.getPayloadUrl(packet.data), response = await fetch(presignedResponse.presignedUrl);
  if (!response.ok)
    throw new Error(
      `Failed to import packet ${presignedResponse.presignedUrl}: ${response.statusText}`
    );
  let data2 = await response.text();
  return span?.setAttribute("size", Buffer.byteLength(data2, "utf8")), {
    data: data2,
    dataType: response.headers.get("content-type") ?? "application/json"
  };
}
async function createPacketAttributesAsJson(data2, dataType) {
  if (typeof data2 == "string" || typeof data2 == "number" || typeof data2 == "boolean" || data2 === null || data2 === void 0)
    return data2;
  switch (dataType) {
    case "application/json":
      return imposeAttributeLimits(flattenAttributes(data2, void 0));
    case "application/super+json":
      let { deserialize: deserialize2 } = await loadSuperJSON(), deserialized = deserialize2(data2), jsonify = safeJsonParse2(JSON.stringify(deserialized, safeReplacer));
      return imposeAttributeLimits(flattenAttributes(jsonify, void 0));
    case "application/store":
      return data2;
    default:
      return {};
  }
}
async function prettyPrintPacket(rawData, dataType) {
  if (rawData === void 0)
    return "";
  if (dataType === "application/super+json") {
    typeof rawData == "string" && (rawData = safeJsonParse2(rawData));
    let { deserialize: deserialize2 } = await loadSuperJSON();
    return await prettyPrintPacket(deserialize2(rawData), "application/json");
  }
  return dataType === "application/json" ? (typeof rawData == "string" && (rawData = safeJsonParse2(rawData)), JSON.stringify(rawData, safeReplacer, 2)) : typeof rawData == "string" ? rawData : JSON.stringify(rawData, safeReplacer, 2);
}
function safeReplacer(key, value) {
  if (typeof value == "bigint" || value instanceof RegExp)
    return value.toString();
  if (value instanceof Set)
    return Array.from(value);
  if (value instanceof Map) {
    let obj = {};
    return value.forEach((v, k) => {
      obj[k] = v;
    }), obj;
  }
  return value;
}
async function loadSuperJSON() {
  return await Promise.resolve().then(() => (init_dist(), dist_exports));
}
function safeJsonParse2(value) {
  try {
    return JSON.parse(value);
  } catch {
    return;
  }
}

// app/platform/zodWorker.server.ts
var import_lodash = __toESM(require("lodash.omit")), import_zod37 = require("zod");

// app/utils/json.ts
function safeJsonParse3(json118) {
  if (json118)
    try {
      return JSON.parse(json118);
    } catch {
      return null;
    }
}
function safeJsonZodParse(schema18, json118) {
  let parsed = safeJsonParse3(json118);
  if (parsed !== null)
    return schema18.safeParse(parsed);
}
async function safeJsonFromResponse(response) {
  let json118 = await response.text();
  return safeJsonParse3(json118);
}
async function safeBodyFromResponse(response, schema18) {
  let json118 = await response.text(), unknownJson = safeJsonParse3(json118);
  if (!unknownJson)
    return;
  let parsedJson = schema18.safeParse(unknownJson);
  if (parsedJson.success)
    return parsedJson.data;
}
async function safeParseBodyFromResponse(response, schema18) {
  try {
    let unknownJson = await response.json();
    return unknownJson ? schema18.safeParse(unknownJson) : void 0;
  } catch {
  }
}

// app/services/db/types.ts
var import_zod36 = require("zod"), notificationCatalog = {
  "trigger:graphile:migrate": import_zod36.z.object({
    latestMigration: import_zod36.z.number()
  })
};

// app/services/db/pgListen.server.ts
var PgListenService = class {
  #poolClient;
  #logger;
  #loggerNamespace;
  constructor(poolClient, loggerNamespace, loggerInstance) {
    this.#poolClient = poolClient, this.#logger = loggerInstance ?? logger, this.#loggerNamespace = loggerNamespace ?? "";
  }
  async on(channelName, callback) {
    if (this.#logDebug("Registering notification handler", { channelName }), !channelName.match(/^[a-zA-Z0-9:-_]+$/))
      throw new Error(`Invalid channel name: ${channelName}`);
    this.#poolClient.query(`LISTEN "${channelName}"`).then(null, (error) => {
      this.#logDebug("LISTEN error", error);
    }), this.#poolClient.on("notification", async (notification) => {
      if (notification.channel !== channelName || (this.#logDebug("Notification received", { notification }), !notification.payload))
        return;
      let payload = safeJsonParse3(notification.payload), parsedPayload = notificationCatalog[channelName].safeParse(payload);
      if (!parsedPayload.success)
        throw new Error(
          `Failed to parse notification payload: ${channelName} - ${JSON.stringify(
            parsedPayload.error
          )}`
        );
      await callback(parsedPayload.data);
    });
  }
  #logDebug(message, args) {
    let namespace = this.#loggerNamespace ? `[${this.#loggerNamespace}]` : "";
    this.#logger.debug(`[pgListen]${namespace} ${message}`, args);
  }
};

// app/platform/zodWorker.server.ts
var tracer = import_api4.trace.getTracer("zodWorker", "3.0.0.dp.1"), RawCronPayloadSchema = import_zod37.z.object({
  _cron: import_zod37.z.object({
    ts: import_zod37.z.coerce.date(),
    backfilled: import_zod37.z.boolean()
  })
}), GraphileJobSchema = import_zod37.z.object({
  id: import_zod37.z.coerce.string(),
  job_queue_id: import_zod37.z.number().nullable(),
  task_id: import_zod37.z.number(),
  payload: import_zod37.z.unknown(),
  priority: import_zod37.z.number(),
  run_at: import_zod37.z.coerce.date(),
  attempts: import_zod37.z.number(),
  max_attempts: import_zod37.z.number(),
  last_error: import_zod37.z.string().nullable(),
  created_at: import_zod37.z.coerce.date(),
  updated_at: import_zod37.z.coerce.date(),
  key: import_zod37.z.string().nullable(),
  revision: import_zod37.z.number(),
  locked_at: import_zod37.z.coerce.date().nullable(),
  locked_by: import_zod37.z.string().nullable(),
  flags: import_zod37.z.record(import_zod37.z.boolean()).nullable()
}), AddJobResultsSchema = import_zod37.z.array(GraphileJobSchema), CLEANUP_TASK_NAME = "__cleanupOldJobs", REPORTER_TASK_NAME = "__reporter", ZodWorker = class {
  #name;
  #schema;
  #prisma;
  #runnerOptions;
  #tasks;
  #recurringTasks;
  #runner;
  #cleanup;
  #reporter;
  #rateLimiter;
  #shutdownTimeoutInMs;
  #shuttingDown = !1;
  #workerUtils;
  constructor(options2) {
    this.#name = options2.name, this.#schema = options2.schema, this.#prisma = options2.prisma, this.#runnerOptions = options2.runnerOptions, this.#tasks = options2.tasks, this.#recurringTasks = options2.recurringTasks, this.#cleanup = options2.cleanup, this.#reporter = options2.reporter, this.#rateLimiter = options2.rateLimiter, this.#shutdownTimeoutInMs = options2.shutdownTimeoutInMs ?? 6e4;
  }
  get graphileWorkerSchema() {
    return this.#runnerOptions.schema ?? "graphile_worker";
  }
  async initialize() {
    if (this.#runner)
      return !0;
    this.#logDebug("Initializing graphile worker queue with options", {
      runnerOptions: this.#runnerOptions
    });
    let parsedCronItems = (0, import_graphile_worker.parseCronItems)(this.#createCronItemsFromRecurringTasks());
    this.#workerUtils = await (0, import_graphile_worker.makeWorkerUtils)(this.#runnerOptions);
    let graphileLogger = new import_graphile_worker.Logger((scope) => (level, message, meta4) => {
      env2.VERBOSE_GRAPHILE_LOGGING === "true" && workerLogger.debug(`[graphile-worker][${this.#name}][${level}] ${message}`, {
        scope,
        meta: meta4,
        workerName: this.#name
      });
    });
    if (this.#runner = await (0, import_graphile_worker.run)({
      ...this.#runnerOptions,
      noHandleSignals: !0,
      taskList: this.#createTaskListFromTasks(),
      parsedCronItems,
      forbiddenFlags: this.#rateLimiter?.forbiddenFlags.bind(this.#rateLimiter),
      logger: graphileLogger
    }), !this.#runner)
      throw new Error("Failed to initialize graphile worker queue");
    return this.#runner?.events.on("pool:create", ({ workerPool }) => {
      this.#logDebug("pool:create");
    }), this.#runner?.events.on("pool:listen:connecting", ({ workerPool, attempts }) => {
      this.#logDebug("pool:create", { attempts });
    }), this.#runner?.events.on("pool:listen:success", async ({ workerPool, client: client3 }) => {
      this.#logDebug("pool:listen:success"), await new PgListenService(client3, this.#name, workerLogger).on("trigger:graphile:migrate", async ({ latestMigration }) => {
        if (this.#logDebug("Detected incoming migration", { latestMigration }), latestMigration > 10) {
          this.#logDebug("Already migrated past v0.14 - nothing to do", { latestMigration });
          return;
        }
        this._handleSignal("SIGTERM");
      });
    }), this.#runner?.events.on("pool:listen:error", ({ error }) => {
      this.#logDebug("pool:listen:error", { error });
    }), this.#runner?.events.on("pool:gracefulShutdown", ({ message }) => {
      this.#logDebug("pool:gracefulShutdown", { workerMessage: message });
    }), this.#runner?.events.on("pool:gracefulShutdown:error", ({ error }) => {
      this.#logDebug("pool:gracefulShutdown:error", { error });
    }), this.#runner?.events.on("worker:create", ({ worker }) => {
      this.#logDebug("worker:create", { workerId: worker.workerId });
    }), this.#runner?.events.on("worker:release", ({ worker }) => {
      this.#logDebug("worker:release", { workerId: worker.workerId });
    }), this.#runner?.events.on("worker:stop", ({ worker, error }) => {
      this.#logDebug("worker:stop", { workerId: worker.workerId, error });
    }), this.#runner?.events.on("worker:fatalError", ({ worker, error, jobError }) => {
      this.#logDebug("worker:fatalError", { workerId: worker.workerId, error, jobError });
    }), this.#runner?.events.on("gracefulShutdown", ({ signal }) => {
      this.#logDebug("gracefulShutdown", { signal });
    }), this.#runner?.events.on("stop", () => {
      this.#logDebug("stop");
    }), this.#runner?.events.on("worker:getJob:error", ({ worker, error }) => {
      this.#logDebug("worker:getJob:error", { workerId: worker.workerId, error });
    }), this.#runner?.events.on("worker:getJob:start", ({ worker }) => {
      env2.VERBOSE_GRAPHILE_LOGGING === "true" && this.#logDebug("worker:getJob:start", { workerId: worker.workerId });
    }), this.#runner?.events.on("job:start", ({ worker, job }) => {
      env2.VERBOSE_GRAPHILE_LOGGING === "true" && this.#logDebug("job:start", { workerId: worker.workerId, job });
    }), process.on("SIGTERM", this._handleSignal.bind(this)), process.on("SIGINT", this._handleSignal.bind(this)), !0;
  }
  _handleSignal(signal) {
    this.#shuttingDown || (this.#shuttingDown = !0, this.#logDebug(
      `Received ${signal}, shutting down zodWorker with timeout ${this.#shutdownTimeoutInMs}ms`
    ), this.#shutdownTimeoutInMs && setTimeout(() => {
      this.#logDebug(`Shutdown timeout of ${this.#shutdownTimeoutInMs} reached, exiting process`), process.exit(0);
    }, this.#shutdownTimeoutInMs), this.stop().finally(() => {
      this.#logDebug("zodWorker stopped");
    }));
  }
  async stop() {
    await this.#runner?.stop(), await this.#workerUtils?.release();
  }
  async enqueue(identifier, payload, options2) {
    let task = this.#tasks[identifier], optionsWithoutTx = removeUndefinedKeys((0, import_lodash.default)(options2 ?? {}, ["tx"])), spec = {
      ...(0, import_lodash.default)(task, ["jobKey"]),
      ...optionsWithoutTx
    };
    if (typeof task.jobKey == "function") {
      let jobKey = task.jobKey(payload);
      jobKey && (spec.jobKey = jobKey);
    }
    let { job, durationInMs } = await tracer.startActiveSpan(
      `Enqueue ${identifier}`,
      {
        kind: import_api4.SpanKind.PRODUCER,
        attributes: {
          "job.task_identifier": identifier,
          "job.payload": payload,
          "job.priority": spec.priority,
          "job.run_at": spec.runAt?.toISOString(),
          "job.jobKey": spec.jobKey,
          "job.flags": spec.flags,
          "job.max_attempts": spec.maxAttempts,
          "worker.name": this.#name
        }
      },
      async (span) => {
        try {
          return await this.#addJob(
            identifier,
            payload,
            spec,
            options2?.tx ?? this.#prisma
          );
        } catch (error) {
          throw error instanceof Error ? span.recordException(error) : span.recordException(new Error(String(error))), span.setStatus({ code: import_api4.SpanStatusCode.ERROR }), error;
        } finally {
          span.end();
        }
      }
    );
    return workerLogger.debug("Enqueued worker task", {
      identifier,
      payload,
      spec,
      job,
      durationInMs
    }), job;
  }
  async dequeue(jobKey, option) {
    let results = await this.#removeJob(jobKey, option?.tx ?? this.#prisma);
    return workerLogger.debug("dequeued worker task", { results, jobKey }), results;
  }
  async #addJob(identifier, payload, spec, tx) {
    let now = performance.now(), results = await tx.$queryRawUnsafe(
      `SELECT * FROM ${this.graphileWorkerSchema}.add_job(
          identifier => $1::text,
          payload => $2::json,
          run_at => $3::timestamptz,
          max_attempts => $4::int,
          job_key => $5::text,
          priority => $6::int,
          flags => $7::text[],
          job_key_mode => $8::text
        )`,
      identifier,
      JSON.stringify(payload),
      spec.runAt || null,
      spec.maxAttempts || null,
      spec.jobKey || null,
      spec.priority || null,
      spec.flags || null,
      spec.jobKeyMode || null
    ), durationInMs = performance.now() - now, rows = AddJobResultsSchema.safeParse(results);
    if (!rows.success)
      throw workerLogger.debug("results returned from add_job could not be parsed", {
        identifier,
        payload,
        spec
      }), new Error(
        `Failed to add job to queue, zod parsing error: ${JSON.stringify(rows.error)}`
      );
    return { job: rows.data[0], durationInMs: Math.floor(durationInMs) };
  }
  async #removeJob(jobKey, tx) {
    try {
      let result = await tx.$queryRawUnsafe(
        `SELECT * FROM ${this.graphileWorkerSchema}.remove_job(
          job_key => $1::text
        )`,
        jobKey
      ), job = AddJobResultsSchema.safeParse(result);
      if (!job.success) {
        workerLogger.debug("could not remove job, job_key did not exist", {
          jobKey
        });
        return;
      }
      return job.data[0];
    } catch (e) {
      throw new Error(`Failed to remove job from queue, ${e}}`);
    }
  }
  #createTaskListFromTasks() {
    let taskList = {};
    for (let [key] of Object.entries(this.#tasks)) {
      let task = (payload, helpers) => this.#handleMessage(key, payload, helpers);
      this.#rateLimiter ? taskList[key] = this.#rateLimiter.wrapTask(task, this.#rescheduleTask.bind(this)) : taskList[key] = task;
    }
    for (let [key] of Object.entries(this.#recurringTasks ?? {})) {
      let task = (payload, helpers) => this.#handleRecurringTask(key, payload, helpers);
      taskList[key] = task;
    }
    if (this.#cleanup) {
      let task = (payload, helpers) => this.#handleCleanup(payload, helpers);
      taskList[CLEANUP_TASK_NAME] = task;
    }
    if (this.#reporter) {
      let task = (payload, helpers) => this.#handleReporter(payload, helpers);
      taskList[REPORTER_TASK_NAME] = task;
    }
    return taskList;
  }
  async #rescheduleTask(payload, helpers) {
    this.#logDebug("Rescheduling task", { payload, job: helpers.job }), await this.enqueue(helpers.job.task_identifier, payload, {
      runAt: helpers.job.run_at,
      priority: helpers.job.priority,
      jobKey: helpers.job.key ?? void 0,
      flags: Object.keys(helpers.job.flags ?? []),
      maxAttempts: helpers.job.max_attempts - (helpers.job.attempts - 1)
    });
  }
  #createCronItemsFromRecurringTasks() {
    let cronItems = [];
    if (this.#cleanup && cronItems.push({
      match: this.#cleanup.frequencyExpression,
      identifier: CLEANUP_TASK_NAME,
      task: CLEANUP_TASK_NAME,
      options: this.#cleanup.taskOptions
    }), this.#reporter && cronItems.push({
      match: "50 * * * *",
      // Every hour at 50 minutes past the hour
      identifier: REPORTER_TASK_NAME,
      task: REPORTER_TASK_NAME
    }), !this.#recurringTasks)
      return cronItems;
    for (let [key, task] of Object.entries(this.#recurringTasks)) {
      let cronItem = {
        match: task.match,
        identifier: key,
        task: key,
        options: task.options
      };
      cronItems.push(cronItem);
    }
    return cronItems;
  }
  async #handleMessage(typeName, rawPayload, helpers) {
    let messageSchema3 = this.#schema[typeName];
    if (!messageSchema3)
      throw new Error(`Unknown message type: ${String(typeName)}`);
    let payload = messageSchema3.parse(rawPayload), job = helpers.job;
    workerLogger.debug("Received worker task, calling handler", {
      type: String(typeName),
      payload,
      job
    });
    let task = this.#tasks[typeName];
    if (!task)
      throw new Error(`No task for message type: ${String(typeName)}`);
    await tracer.startActiveSpan(
      `Run ${typeName}`,
      {
        kind: import_api4.SpanKind.CONSUMER,
        attributes: {
          "job.task_identifier": job.task_identifier,
          "job.id": job.id,
          ...job.job_queue_id ? { "job.queue_id": job.job_queue_id } : {},
          ...flattenAttributes(job.payload, "job.payload"),
          "job.priority": job.priority,
          "job.run_at": job.run_at.toISOString(),
          "job.attempts": job.attempts,
          "job.max_attempts": job.max_attempts,
          "job.created_at": job.created_at.toISOString(),
          "job.updated_at": job.updated_at.toISOString(),
          ...job.key ? { "job.key": job.key } : {},
          "job.revision": job.revision,
          ...job.locked_at ? { "job.locked_at": job.locked_at.toISOString() } : {},
          ...job.locked_by ? { "job.locked_by": job.locked_by } : {},
          ...job.flags ? flattenAttributes(job.flags, "job.flags") : {},
          "worker.name": this.#name
        }
      },
      async (span) => {
        try {
          await task.handler(payload, job, helpers);
        } catch (error) {
          if (error instanceof Error ? span.recordException(error) : span.recordException(new Error(String(error))), job.attempts >= job.max_attempts) {
            workerLogger.debug("Job failed after max attempts", {
              job,
              attempts: job.attempts,
              max_attempts: job.max_attempts,
              error: error instanceof Error ? error.message : error
            });
            return;
          }
          throw error;
        } finally {
          span.end();
        }
      }
    );
  }
  async #handleRecurringTask(typeName, rawPayload, helpers) {
    let job = helpers.job;
    workerLogger.debug("Received recurring task, calling handler", {
      type: String(typeName),
      payload: rawPayload,
      job
    });
    let recurringTask = this.#recurringTasks?.[typeName];
    if (!recurringTask)
      throw new Error(`No recurring task for message type: ${String(typeName)}`);
    let parsedPayload = RawCronPayloadSchema.safeParse(rawPayload);
    if (!parsedPayload.success)
      throw new Error(
        `Failed to parse recurring task payload: ${JSON.stringify(parsedPayload.error)}`
      );
    let payload = parsedPayload.data;
    await tracer.startActiveSpan(
      `Run ${typeName} recurring`,
      {
        kind: import_api4.SpanKind.CONSUMER,
        attributes: {
          "job.task_identifier": job.task_identifier,
          "job.id": job.id,
          ...job.job_queue_id ? { "job.queue_id": job.job_queue_id } : {},
          ...flattenAttributes(job.payload, "job.payload"),
          "job.priority": job.priority,
          "job.run_at": job.run_at.toISOString(),
          "job.attempts": job.attempts,
          "job.max_attempts": job.max_attempts,
          "job.created_at": job.created_at.toISOString(),
          "job.updated_at": job.updated_at.toISOString(),
          ...job.key ? { "job.key": job.key } : {},
          "job.revision": job.revision,
          ...job.locked_at ? { "job.locked_at": job.locked_at.toISOString() } : {},
          ...job.locked_by ? { "job.locked_by": job.locked_by } : {},
          ...job.flags ? flattenAttributes(job.flags, "job.flags") : {},
          "worker.name": this.#name
        }
      },
      async (span) => {
        try {
          await recurringTask.handler(payload._cron, job, helpers);
        } catch (error) {
          throw error instanceof Error ? span.recordException(error) : span.recordException(new Error(String(error))), error;
        } finally {
          span.end();
        }
      }
    );
  }
  async #handleCleanup(rawPayload, helpers) {
    if (!this.#cleanup)
      return;
    if (!this.#workerUtils)
      throw new Error("WorkerUtils need to be initialized before running job cleanup.");
    let job = helpers.job;
    workerLogger.debug("Received cleanup task", {
      payload: rawPayload,
      job
    });
    let parsedPayload = RawCronPayloadSchema.safeParse(rawPayload);
    if (!parsedPayload.success)
      throw new Error(
        `Failed to parse cleanup task payload: ${JSON.stringify(parsedPayload.error)}`
      );
    let payload = parsedPayload.data, expirationDate = new Date(payload._cron.ts.getTime() - this.#cleanup.ttl);
    workerLogger.debug("Cleaning up old jobs", {
      expirationDate,
      payload
    });
    let rawResults = await $replica.$queryRawUnsafe(
      `SELECT id
        FROM ${this.graphileWorkerSchema}.jobs
        WHERE run_at < $1
          AND locked_at IS NULL
          AND max_attempts = attempts
        LIMIT $2`,
      expirationDate,
      this.#cleanup.maxCount
    ), results = import_zod37.z.array(
      import_zod37.z.object({
        id: import_zod37.z.coerce.string()
      })
    ).parse(rawResults), completedJobs = await this.#workerUtils.completeJobs(results.map((job2) => job2.id));
    workerLogger.debug("Cleaned up old jobs", {
      found: results.length,
      deleted: completedJobs.length,
      expirationDate,
      payload
    }), this.#reporter && await this.#reporter("cleanup_stats", {
      found: results.length,
      deleted: completedJobs.length,
      expirationDate,
      ts: payload._cron.ts
    });
  }
  async #handleReporter(rawPayload, helpers) {
    if (!this.#reporter)
      return;
    workerLogger.debug("Received reporter task", {
      payload: rawPayload
    });
    let parsedPayload = RawCronPayloadSchema.safeParse(rawPayload);
    if (!parsedPayload.success)
      throw new Error(
        `Failed to parse cleanup task payload: ${JSON.stringify(parsedPayload.error)}`
      );
    let payload = parsedPayload.data, startAt = new Date(payload._cron.ts.getTime() - 1e3 * 60 * 60), schema18 = import_zod37.z.array(import_zod37.z.object({ count: import_zod37.z.coerce.number() })), rawAddedResults = await $replica.$queryRawUnsafe(
      `SELECT COUNT(*) FROM ${this.graphileWorkerSchema}.jobs WHERE created_at > $1 AND created_at < $2`,
      startAt,
      payload._cron.ts
    ), addedCountResults = schema18.parse(rawAddedResults)[0], rawTotalResults = await $replica.$queryRawUnsafe(
      `SELECT COUNT(*) FROM ${this.graphileWorkerSchema}.jobs`
    ), totalCountResults = schema18.parse(rawTotalResults)[0];
    workerLogger.debug("Calculated metrics about the jobs table", {
      rawAddedResults,
      rawTotalResults,
      payload
    }), await this.#reporter("queue_metrics", {
      addedCount: addedCountResults.count,
      totalCount: totalCountResults.count,
      ts: payload._cron.ts
    });
  }
  #logDebug(message, args) {
    workerLogger.debug(`[worker][${this.#name}] ${message}`, args);
  }
};
function removeUndefinedKeys(obj) {
  for (let key in obj)
    Object.prototype.hasOwnProperty.call(obj, key) && obj[key] === void 0 && delete obj[key];
  return obj;
}

// app/v3/eventRepository.server.ts
var import_api6 = require("@opentelemetry/api"), import_sdk_trace_base2 = require("@opentelemetry/sdk-trace-base"), import_semantic_conventions2 = require("@opentelemetry/semantic-conventions");
var import_ioredis = __toESM(require("ioredis")), import_node_crypto = require("node:crypto"), import_node_stream = require("node:stream"), import_prom_client2 = require("prom-client");

// app/metrics.server.ts
var import_prom_client = require("prom-client");
var metricsRegister = singleton("metricsRegister", initializeMetricsRegister);
function initializeMetricsRegister() {
  let registry = new import_prom_client.Registry();
  return import_prom_client.register.setDefaultLabels({
    serviceName: env2.SERVICE_NAME
  }), registry.setContentType("application/openmetrics-text; version=1.0.0; charset=utf-8"), (0, import_prom_client.collectDefaultMetrics)({ register: registry }), registry;
}

// app/v3/dynamicFlushScheduler.server.ts
var DynamicFlushScheduler = class {
  constructor(config) {
    this.batchQueue = [], this.currentBatch = [], this.BATCH_SIZE = config.batchSize, this.FLUSH_INTERVAL = config.flushInterval, this.callback = config.callback, this.flushTimer = null, this.startFlushTimer();
  }
  addToBatch(items) {
    this.currentBatch.push(...items), this.currentBatch.length >= this.BATCH_SIZE && (this.batchQueue.push(this.currentBatch), this.currentBatch = [], this.flushNextBatch(), this.resetFlushTimer());
  }
  startFlushTimer() {
    this.flushTimer = setInterval(() => this.checkAndFlush(), this.FLUSH_INTERVAL);
  }
  resetFlushTimer() {
    this.flushTimer && clearInterval(this.flushTimer), this.startFlushTimer();
  }
  checkAndFlush() {
    this.currentBatch.length > 0 && (this.batchQueue.push(this.currentBatch), this.currentBatch = []), this.flushNextBatch();
  }
  async flushNextBatch() {
    if (this.batchQueue.length === 0)
      return;
    let batchToFlush = this.batchQueue.shift();
    try {
      await this.callback(batchToFlush), this.batchQueue.length > 0 && this.flushNextBatch();
    } catch (error) {
      console.error("Error inserting batch:", error);
    }
  }
};

// app/v3/tracer.server.ts
var import_api5 = require("@opentelemetry/api"), import_exporter_trace_otlp_http = require("@opentelemetry/exporter-trace-otlp-http"), import_instrumentation = require("@opentelemetry/instrumentation"), import_instrumentation_express = require("@opentelemetry/instrumentation-express"), import_instrumentation_http = require("@opentelemetry/instrumentation-http"), import_resources3 = require("@opentelemetry/resources"), import_sdk_trace_base = require("@opentelemetry/sdk-trace-base"), import_sdk_trace_node = require("@opentelemetry/sdk-trace-node"), import_semantic_conventions = require("@opentelemetry/semantic-conventions"), import_instrumentation2 = require("@prisma/instrumentation");

// app/v3/telemetry/loggerExporter.server.ts
var import_core2 = require("@opentelemetry/core"), LoggerSpanExporter = class {
  /**
   * Export spans.
   * @param spans
   * @param resultCallback
   */
  export(spans, resultCallback) {
    return this._sendSpans(spans, resultCallback);
  }
  /**
   * Shutdown the exporter.
   */
  shutdown() {
    return this._sendSpans([]), this.forceFlush();
  }
  /**
   * Exports any pending spans in exporter
   */
  forceFlush() {
    return Promise.resolve();
  }
  /**
   * converts span info into more readable format
   * @param span
   */
  _exportInfo(span) {
    return {
      traceId: span.spanContext().traceId,
      parentId: span.parentSpanId && span.parentSpanId !== "" && span.parentSpanId !== "0000000000000000" ? span.parentSpanId : void 0,
      traceState: span.spanContext().traceState?.serialize(),
      message: span.name,
      spanId: span.spanContext().spanId,
      kind: span.kind,
      timestamp: (0, import_core2.hrTimeToMicroseconds)(span.startTime),
      duration: (0, import_core2.hrTimeToMicroseconds)(span.duration),
      attributes: span.attributes,
      status: span.status,
      events: span.events,
      links: span.links,
      level: "trace"
    };
  }
  /**
   * Showing spans in console
   * @param spans
   * @param done
   */
  _sendSpans(spans, done) {
    for (let span of spans)
      console.log(JSON.stringify(this._exportInfo(span)));
    if (done)
      return done({ code: import_core2.ExportResultCode.SUCCESS });
  }
};

// app/v3/tracer.server.ts
var SEMINTATTRS_FORCE_RECORDING = "forceRecording", CustomWebappSampler = class {
  constructor(_baseSampler) {
    this._baseSampler = _baseSampler;
  }
  // Drop spans where a prisma library is the root span
  shouldSample(context7, traceId, name, spanKind, attributes, links2) {
    return !import_api5.trace.getSpanContext(context7) && name.includes("prisma") ? { decision: import_sdk_trace_base.SamplingDecision.NOT_RECORD } : attributes[SEMINTATTRS_FORCE_RECORDING] ? { decision: import_sdk_trace_base.SamplingDecision.RECORD_AND_SAMPLED } : this._baseSampler.shouldSample(
      context7,
      traceId,
      name,
      spanKind,
      attributes,
      links2
    );
  }
  toString() {
    return "CustomWebappSampler";
  }
}, tracer2 = singleton("tracer", getTracer);
async function startActiveSpan(name, fn, options2) {
  return tracer2.startActiveSpan(name, options2 ?? {}, async (span) => {
    try {
      return await fn(span);
    } catch (error) {
      throw error instanceof Error ? span.recordException(error) : typeof error == "string" ? span.recordException(new Error(error)) : span.recordException(new Error(String(error))), span.setStatus({ code: import_api5.SpanStatusCode.ERROR }), error;
    } finally {
      span.end();
    }
  });
}
function getTracer() {
  if (env2.INTERNAL_OTEL_TRACE_DISABLED === "1")
    return console.log("\u{1F526} Tracer disabled, returning a noop tracer"), import_api5.trace.getTracer("trigger.dev", "3.0.0.dp.1");
  import_api5.diag.setLogger(new import_api5.DiagConsoleLogger(), import_api5.DiagLogLevel.ERROR);
  let samplingRate = 1 / Math.max(parseInt(env2.INTERNAL_OTEL_TRACE_SAMPLING_RATE, 10), 1), provider = new import_sdk_trace_node.NodeTracerProvider({
    forceFlushTimeoutMillis: 15e3,
    resource: new import_resources3.Resource({
      [import_semantic_conventions.SEMRESATTRS_SERVICE_NAME]: env2.SERVICE_NAME
    }),
    sampler: new import_sdk_trace_base.ParentBasedSampler({
      root: new CustomWebappSampler(new import_sdk_trace_base.TraceIdRatioBasedSampler(samplingRate))
    })
  });
  if (env2.INTERNAL_OTEL_TRACE_EXPORTER_URL) {
    let exporter = new import_exporter_trace_otlp_http.OTLPTraceExporter({
      url: env2.INTERNAL_OTEL_TRACE_EXPORTER_URL,
      timeoutMillis: 15e3,
      headers: env2.INTERNAL_OTEL_TRACE_EXPORTER_AUTH_HEADER_NAME && env2.INTERNAL_OTEL_TRACE_EXPORTER_AUTH_HEADER_VALUE ? {
        [env2.INTERNAL_OTEL_TRACE_EXPORTER_AUTH_HEADER_NAME]: env2.INTERNAL_OTEL_TRACE_EXPORTER_AUTH_HEADER_VALUE
      } : void 0
    });
    provider.addSpanProcessor(
      new import_sdk_trace_base.BatchSpanProcessor(exporter, {
        maxExportBatchSize: 512,
        scheduledDelayMillis: 1e3,
        exportTimeoutMillis: 3e4,
        maxQueueSize: 2048
      })
    ), console.log(
      `\u{1F526} Tracer: OTLP exporter enabled to ${env2.INTERNAL_OTEL_TRACE_EXPORTER_URL} (sampling = ${samplingRate})`
    );
  } else if (env2.INTERNAL_OTEL_TRACE_LOGGING_ENABLED === "1") {
    console.log(`\u{1F526} Tracer: Logger exporter enabled (sampling = ${samplingRate})`);
    let loggerExporter = new LoggerSpanExporter();
    provider.addSpanProcessor(new import_sdk_trace_base.SimpleSpanProcessor(loggerExporter));
  }
  provider.register();
  let instrumentations = [
    new import_instrumentation_http.HttpInstrumentation(),
    new import_instrumentation_express.ExpressInstrumentation()
  ];
  return env2.INTERNAL_OTEL_TRACE_INSTRUMENT_PRISMA_ENABLED === "1" && instrumentations.push(new import_instrumentation2.PrismaInstrumentation()), (0, import_instrumentation.registerInstrumentations)({
    tracerProvider: provider,
    instrumentations
  }), provider.getTracer("trigger.dev", "3.0.0.dp.1");
}
var SemanticEnvResources = {
  ENV_ID: "$trigger.env.id",
  ENV_TYPE: "$trigger.env.type",
  ENV_SLUG: "$trigger.env.slug",
  ORG_ID: "$trigger.org.id",
  ORG_SLUG: "$trigger.org.slug",
  ORG_TITLE: "$trigger.org.title",
  PROJECT_ID: "$trigger.project.id",
  PROJECT_NAME: "$trigger.project.name",
  USER_ID: "$trigger.user.id"
};
function attributesFromAuthenticatedEnv(env6) {
  return {
    [SemanticEnvResources.ENV_ID]: env6.id,
    [SemanticEnvResources.ENV_TYPE]: env6.type,
    [SemanticEnvResources.ENV_SLUG]: env6.slug,
    [SemanticEnvResources.ORG_ID]: env6.organizationId,
    [SemanticEnvResources.ORG_SLUG]: env6.organization.slug,
    [SemanticEnvResources.ORG_TITLE]: env6.organization.title,
    [SemanticEnvResources.PROJECT_ID]: env6.projectId,
    [SemanticEnvResources.PROJECT_NAME]: env6.project.name,
    [SemanticEnvResources.USER_ID]: env6.orgMember?.userId
  };
}

// app/v3/eventRepository.server.ts
var MAX_FLUSH_DEPTH = 5, EventRepository = class {
  constructor(db = prisma, readReplica = $replica, _config) {
    this.db = db;
    this.readReplica = readReplica;
    this._config = _config;
    this._randomIdGenerator = new import_sdk_trace_base2.RandomIdGenerator();
    this._subscriberCount = 0;
    this._flushScheduler = new DynamicFlushScheduler({
      batchSize: _config.batchSize,
      flushInterval: _config.batchInterval,
      callback: this.#flushBatch.bind(this)
    }), this._redisPublishClient = new import_ioredis.default(this._config.redis);
  }
  get subscriberCount() {
    return this._subscriberCount;
  }
  async insert(event) {
    this._flushScheduler.addToBatch([event]);
  }
  async insertImmediate(event) {
    await this.db.taskEvent.create({
      data: event
    }), this.#publishToRedis([event]);
  }
  async insertMany(events) {
    this._flushScheduler.addToBatch(events);
  }
  async insertManyImmediate(events) {
    return await this.#flushBatch(events);
  }
  async completeEvent(spanId, options2) {
    let events = await this.queryIncompleteEvents({ spanId });
    if (events.length === 0)
      return;
    let event = events[0], output = options2?.attributes.output ? await createPacketAttributesAsJson(
      options2?.attributes.output,
      options2?.attributes.outputType ?? "application/json"
    ) : void 0;
    logger.debug("Completing event", {
      spanId,
      eventId: event.id
    }), await this.insert({
      ...omit(event, "id"),
      isPartial: !1,
      isError: options2?.attributes.isError ?? !1,
      isCancelled: !1,
      status: options2?.attributes.isError ? "ERROR" : "OK",
      links: event.links ?? [],
      events: event.events ?? options2?.events ?? [],
      duration: calculateDurationFromStart(event.startTime, options2?.endTime),
      properties: event.properties,
      metadata: event.metadata,
      style: event.style,
      output,
      outputType: options2?.attributes.outputType === "application/store" || options2?.attributes.outputType === "text/plain" ? options2?.attributes.outputType : "application/json",
      payload: event.payload,
      payloadType: event.payloadType
    });
  }
  async cancelEvent(event, cancelledAt, reason) {
    event.isPartial && await this.insertImmediate({
      ...omit(event, "id"),
      isPartial: !1,
      isError: !1,
      isCancelled: !0,
      status: "ERROR",
      links: event.links ?? [],
      events: [
        {
          name: "cancellation",
          time: cancelledAt,
          properties: {
            reason
          }
        },
        ...event.events ?? []
      ],
      duration: calculateDurationFromStart(event.startTime, cancelledAt),
      properties: event.properties,
      metadata: event.metadata,
      style: event.style,
      output: event.output,
      outputType: event.outputType,
      payload: event.payload,
      payloadType: event.payloadType
    });
  }
  async crashEvent({
    event,
    crashedAt,
    exception
  }) {
    event.isPartial && await this.insertImmediate({
      ...omit(event, "id"),
      isPartial: !1,
      isError: !0,
      isCancelled: !1,
      status: "ERROR",
      links: event.links ?? [],
      events: [
        {
          name: "exception",
          time: crashedAt,
          properties: {
            exception
          }
        },
        ...event.events ?? []
      ],
      duration: calculateDurationFromStart(event.startTime, crashedAt),
      properties: event.properties,
      metadata: event.metadata,
      style: event.style,
      output: event.output,
      outputType: event.outputType,
      payload: event.payload,
      payloadType: event.payloadType
    });
  }
  async queryEvents(queryOptions) {
    return await this.readReplica.taskEvent.findMany({
      where: queryOptions
    });
  }
  async queryIncompleteEvents(queryOptions, allowCompleteDuplicate = !1) {
    let taskEvents = await this.readReplica.taskEvent.findMany({
      where: queryOptions,
      select: {
        spanId: !0,
        isPartial: !0,
        isCancelled: !0
      }
    }), filteredTaskEvents = taskEvents.filter((event) => !event.isPartial || event.isCancelled ? !1 : allowCompleteDuplicate ? !0 : !taskEvents.some(
      (otherEvent) => otherEvent.spanId === event.spanId && !otherEvent.isPartial && !otherEvent.isCancelled
    ));
    return this.queryEvents({
      spanId: {
        in: filteredTaskEvents.map((event) => event.spanId)
      }
    });
  }
  async getTraceSummary(traceId) {
    return await startActiveSpan("getTraceSummary", async (span) => {
      let events = await this.readReplica.taskEvent.findMany({
        select: {
          id: !0,
          spanId: !0,
          parentId: !0,
          runId: !0,
          idempotencyKey: !0,
          message: !0,
          style: !0,
          startTime: !0,
          duration: !0,
          isError: !0,
          isPartial: !0,
          isCancelled: !0,
          level: !0,
          events: !0,
          environmentType: !0
        },
        where: {
          traceId
        },
        orderBy: {
          startTime: "asc"
        },
        take: env2.MAXIMUM_TRACE_SUMMARY_VIEW_COUNT
      }), preparedEvents = [], rootSpanId, eventsBySpanId = /* @__PURE__ */ new Map();
      for (let event of events)
        preparedEvents.push(prepareEvent(event)), !rootSpanId && !event.parentId && (rootSpanId = event.spanId);
      for (let event of preparedEvents) {
        if (!eventsBySpanId.get(event.spanId)) {
          eventsBySpanId.set(event.spanId, event);
          continue;
        }
        (event.isCancelled || !event.isPartial) && eventsBySpanId.set(event.spanId, event);
      }
      preparedEvents = Array.from(eventsBySpanId.values());
      let spansBySpanId = /* @__PURE__ */ new Map(), spans = preparedEvents.map((event) => {
        let ancestorCancelled = isAncestorCancelled(eventsBySpanId, event.spanId), duration = calculateDurationIfAncestorIsCancelled(
          eventsBySpanId,
          event.spanId,
          event.duration
        ), span2 = {
          recordId: event.id,
          id: event.spanId,
          parentId: event.parentId ?? void 0,
          runId: event.runId,
          idempotencyKey: event.idempotencyKey,
          data: {
            message: event.message,
            style: event.style,
            duration,
            isError: event.isError,
            isPartial: ancestorCancelled ? !1 : event.isPartial,
            isCancelled: event.isCancelled === !0 ? !0 : event.isPartial && ancestorCancelled,
            startTime: getDateFromNanoseconds(event.startTime),
            level: event.level,
            events: event.events,
            environmentType: event.environmentType
          }
        };
        return spansBySpanId.set(event.spanId, span2), span2;
      });
      if (!rootSpanId)
        return;
      let rootSpan = spansBySpanId.get(rootSpanId);
      if (rootSpan)
        return {
          rootSpan,
          spans
        };
    });
  }
  async getRunEvents(runId) {
    return await startActiveSpan("getRunEvents", async (span) => {
      let events = await this.readReplica.taskEvent.findMany({
        select: {
          id: !0,
          spanId: !0,
          parentId: !0,
          runId: !0,
          idempotencyKey: !0,
          message: !0,
          style: !0,
          startTime: !0,
          duration: !0,
          isError: !0,
          isPartial: !0,
          isCancelled: !0,
          level: !0,
          events: !0,
          environmentType: !0,
          taskSlug: !0
        },
        where: {
          runId,
          isPartial: !1
        },
        orderBy: {
          startTime: "asc"
        }
      }), preparedEvents = [];
      for (let event of events)
        preparedEvents.push(prepareEvent(event));
      return preparedEvents;
    });
  }
  // A Span can be cancelled if it is partial and has a parent that is cancelled
  // And a span's duration, if it is partial and has a cancelled parent, is the time between the start of the span and the time of the cancellation event of the parent
  async getSpan(spanId, traceId) {
    return await startActiveSpan("getSpan", async (s) => {
      let spanEvent = await this.#getSpanEvent(spanId);
      if (!spanEvent)
        return;
      let preparedEvent = prepareEvent(spanEvent), span = await this.#createSpanFromEvent(preparedEvent), output = rehydrateJson(spanEvent.output), payload = rehydrateJson(spanEvent.payload), show = rehydrateShow(spanEvent.properties), properties = sanitizedAttributes(spanEvent.properties), messagingEvent = SpanMessagingEvent.optional().safeParse(
        properties?.messaging
      ), links2 = [];
      messagingEvent.success && messagingEvent.data && messagingEvent.data.message && "id" in messagingEvent.data.message && messagingEvent.data.message.id.startsWith("run_") && links2.push({
        type: "run",
        icon: "runs",
        title: `Run ${messagingEvent.data.message.id}`,
        runId: messagingEvent.data.message.id
      });
      let backLinks = spanEvent.links;
      backLinks && backLinks.length > 0 && backLinks.forEach((l) => {
        let title2 = String(
          l.attributes?.[SemanticInternalAttributes.LINK_TITLE] ?? "Triggered by"
        );
        links2.push({
          type: "span",
          icon: "trigger",
          title: title2,
          traceId: l.context.traceId,
          spanId: l.context.spanId
        });
      });
      let spanEvents = transformEvents(
        preparedEvent.events,
        spanEvent.metadata,
        spanEvent.environmentType === "DEVELOPMENT"
      );
      return {
        ...spanEvent,
        ...span.data,
        payload,
        output,
        properties,
        events: spanEvents,
        show,
        links: links2
      };
    });
  }
  async #createSpanFromEvent(event) {
    return await startActiveSpan("createSpanFromEvent", async (s) => {
      let ancestorCancelled = !1, duration = event.duration;
      return !event.isCancelled && event.isPartial && await this.#walkSpanAncestors(event, (ancestorEvent, level) => {
        if (level >= 8)
          return { stop: !0 };
        if (ancestorEvent.isCancelled) {
          ancestorCancelled = !0;
          let cancellationEvent = ancestorEvent.events.find(
            (event2) => event2.name === "cancellation"
          );
          return cancellationEvent && (duration = calculateDurationFromStart(event.startTime, cancellationEvent.time)), { stop: !0 };
        }
        return { stop: !1 };
      }), {
        recordId: event.id,
        id: event.spanId,
        parentId: event.parentId ?? void 0,
        runId: event.runId,
        idempotencyKey: event.idempotencyKey,
        data: {
          message: event.message,
          style: event.style,
          duration,
          isError: event.isError,
          isPartial: ancestorCancelled ? !1 : event.isPartial,
          isCancelled: event.isCancelled === !0 ? !0 : event.isPartial && ancestorCancelled,
          startTime: getDateFromNanoseconds(event.startTime),
          level: event.level,
          events: event.events,
          environmentType: event.environmentType
        }
      };
    });
  }
  async #walkSpanAncestors(event, callback) {
    let parentId = event.parentId;
    parentId && await startActiveSpan("walkSpanAncestors", async (s) => {
      let parentEvent = await this.#getSpanEvent(parentId), level = 1;
      for (; parentEvent; ) {
        let preparedParentEvent = prepareEvent(parentEvent);
        if (callback(preparedParentEvent, level).stop || !preparedParentEvent.parentId)
          return;
        parentEvent = await this.#getSpanEvent(preparedParentEvent.parentId), level++;
      }
    });
  }
  async #getSpanAncestors(event, levels = 1) {
    if (levels >= 8)
      return [];
    if (!event.parentId)
      return [];
    let parentEvent = await this.#getSpanEvent(event.parentId);
    if (!parentEvent)
      return [];
    let preparedParentEvent = prepareEvent(parentEvent);
    if (!preparedParentEvent.parentId)
      return [preparedParentEvent];
    let moreAncestors = await this.#getSpanAncestors(preparedParentEvent, levels + 1);
    return [preparedParentEvent, ...moreAncestors];
  }
  async #getSpanEvent(spanId) {
    return await startActiveSpan("getSpanEvent", async (s) => {
      let events = await this.readReplica.taskEvent.findMany({
        where: {
          spanId
        },
        orderBy: {
          startTime: "asc"
        }
      }), finalEvent;
      for (let event of events)
        event.isPartial && finalEvent || (finalEvent = event);
      return finalEvent;
    });
  }
  async recordEvent(message, options2) {
    let propagatedContext = extractContextFromCarrier(options2.context ?? {}), startTime = options2.startTime ?? getNowInNanoseconds(), duration = options2.endTime ? calculateDurationFromStart(startTime, options2.endTime) : 100, traceId = propagatedContext?.traceparent?.traceId ?? this.generateTraceId(), parentId = propagatedContext?.traceparent?.spanId, tracestate = propagatedContext?.tracestate, spanId = options2.spanIdSeed ? this.#generateDeterministicSpanId(traceId, options2.spanIdSeed) : this.generateSpanId(), metadata = {
      [SemanticInternalAttributes.ENVIRONMENT_ID]: options2.environment.id,
      [SemanticInternalAttributes.ENVIRONMENT_TYPE]: options2.environment.type,
      [SemanticInternalAttributes.ORGANIZATION_ID]: options2.environment.organizationId,
      [SemanticInternalAttributes.PROJECT_ID]: options2.environment.projectId,
      [SemanticInternalAttributes.PROJECT_REF]: options2.environment.project.externalRef,
      [SemanticInternalAttributes.RUN_ID]: options2.attributes.runId,
      [SemanticInternalAttributes.RUN_IS_TEST]: options2.attributes.runIsTest ?? !1,
      [SemanticInternalAttributes.BATCH_ID]: options2.attributes.batchId ?? void 0,
      [SemanticInternalAttributes.TASK_SLUG]: options2.taskSlug,
      [import_semantic_conventions2.SemanticResourceAttributes.SERVICE_NAME]: "api server",
      [import_semantic_conventions2.SemanticResourceAttributes.SERVICE_NAMESPACE]: "trigger.dev",
      ...options2.attributes.metadata
    }, style2 = {
      [SemanticInternalAttributes.STYLE_ICON]: "play"
    };
    if (!options2.attributes.runId)
      throw new Error("runId is required");
    let event = {
      traceId,
      spanId,
      parentId,
      tracestate,
      message,
      serviceName: "api server",
      serviceNamespace: "trigger.dev",
      level: "TRACE",
      kind: options2.kind,
      status: "OK",
      startTime,
      isPartial: !1,
      duration,
      // convert to nanoseconds
      environmentId: options2.environment.id,
      environmentType: options2.environment.type,
      organizationId: options2.environment.organizationId,
      projectId: options2.environment.projectId,
      projectRef: options2.environment.project.externalRef,
      runId: options2.attributes.runId,
      runIsTest: options2.attributes.runIsTest ?? !1,
      taskSlug: options2.taskSlug,
      queueId: options2.attributes.queueId,
      queueName: options2.attributes.queueName,
      batchId: options2.attributes.batchId ?? void 0,
      properties: {
        ...style2,
        ...flattenAttributes(metadata, SemanticInternalAttributes.METADATA),
        ...options2.attributes.properties
      },
      metadata,
      style: stripAttributePrefix(style2, SemanticInternalAttributes.STYLE),
      output: void 0,
      outputType: void 0,
      payload: void 0,
      payloadType: void 0
    };
    return options2.immediate ? await this.insertImmediate(event) : this._flushScheduler.addToBatch([event]), event;
  }
  async traceEvent(message, options2, callback) {
    let propagatedContext = extractContextFromCarrier(options2.context ?? {}), start = process.hrtime.bigint(), startTime = getNowInNanoseconds(), traceId = options2.spanParentAsLink ? this.generateTraceId() : propagatedContext?.traceparent?.traceId ?? this.generateTraceId(), parentId = options2.spanParentAsLink ? void 0 : propagatedContext?.traceparent?.spanId, tracestate = options2.spanParentAsLink ? void 0 : propagatedContext?.tracestate, spanId = options2.spanIdSeed ? this.#generateDeterministicSpanId(traceId, options2.spanIdSeed) : this.generateSpanId(), traceContext = {
      traceparent: `00-${traceId}-${spanId}-01`
    }, links2 = options2.spanParentAsLink && propagatedContext?.traceparent ? [
      {
        context: {
          traceId: propagatedContext.traceparent.traceId,
          spanId: propagatedContext.traceparent.spanId,
          traceFlags: import_api6.TraceFlags.SAMPLED
        },
        attributes: {
          [SemanticInternalAttributes.LINK_TITLE]: options2.parentAsLinkType === "replay" ? "Replay of" : "Triggered by"
        }
      }
    ] : [], result = await callback({
      traceId,
      spanId,
      setAttribute: (key, value) => {
        if (value) {
          let existingValue = options2.attributes[key];
          existingValue && typeof existingValue == "object" && typeof value == "object" ? options2.attributes[key] = { ...existingValue, ...value } : options2.attributes[key] = value;
        }
      }
    }, traceContext), duration = process.hrtime.bigint() - start, metadata = {
      [SemanticInternalAttributes.ENVIRONMENT_ID]: options2.environment.id,
      [SemanticInternalAttributes.ENVIRONMENT_TYPE]: options2.environment.type,
      [SemanticInternalAttributes.ORGANIZATION_ID]: options2.environment.organizationId,
      [SemanticInternalAttributes.PROJECT_ID]: options2.environment.projectId,
      [SemanticInternalAttributes.PROJECT_REF]: options2.environment.project.externalRef,
      [SemanticInternalAttributes.RUN_ID]: options2.attributes.runId,
      [SemanticInternalAttributes.RUN_IS_TEST]: options2.attributes.runIsTest ?? !1,
      [SemanticInternalAttributes.BATCH_ID]: options2.attributes.batchId ?? void 0,
      [SemanticInternalAttributes.TASK_SLUG]: options2.taskSlug,
      [import_semantic_conventions2.SemanticResourceAttributes.SERVICE_NAME]: "api server",
      [import_semantic_conventions2.SemanticResourceAttributes.SERVICE_NAMESPACE]: "trigger.dev",
      ...options2.attributes.metadata
    }, style2 = {
      [SemanticInternalAttributes.STYLE_ICON]: "task",
      [SemanticInternalAttributes.STYLE_VARIANT]: PRIMARY_VARIANT,
      ...options2.attributes.style
    };
    if (!options2.attributes.runId)
      throw new Error("runId is required");
    let event = {
      traceId,
      spanId,
      parentId,
      tracestate,
      duration: options2.incomplete ? 0 : duration,
      isPartial: options2.incomplete,
      message,
      serviceName: "api server",
      serviceNamespace: "trigger.dev",
      level: "TRACE",
      kind: options2.kind,
      status: "OK",
      startTime,
      environmentId: options2.environment.id,
      environmentType: options2.environment.type,
      organizationId: options2.environment.organizationId,
      projectId: options2.environment.projectId,
      projectRef: options2.environment.project.externalRef,
      runId: options2.attributes.runId,
      runIsTest: options2.attributes.runIsTest ?? !1,
      taskSlug: options2.taskSlug,
      queueId: options2.attributes.queueId,
      queueName: options2.attributes.queueName,
      batchId: options2.attributes.batchId ?? void 0,
      properties: {
        ...flattenAttributes(metadata, SemanticInternalAttributes.METADATA),
        ...flattenAttributes(options2.attributes.properties)
      },
      metadata,
      style: stripAttributePrefix(style2, SemanticInternalAttributes.STYLE),
      output: void 0,
      outputType: void 0,
      links: links2,
      payload: options2.attributes.payload,
      payloadType: options2.attributes.payloadType,
      idempotencyKey: options2.attributes.idempotencyKey
    };
    return options2.immediate ? await this.insertImmediate(event) : this._flushScheduler.addToBatch([event]), result;
  }
  async subscribeToTrace(traceId) {
    let redis = new import_ioredis.default(this._config.redis), channel = `events:${traceId}:*`;
    await redis.psubscribe(channel), this._subscriberCount++;
    let eventEmitter = new import_node_stream.EventEmitter();
    return redis.on("pmessage", (pattern, channelReceived, message) => {
      channelReceived.startsWith(`events:${traceId}:`) && eventEmitter.emit("message", message);
    }), {
      unsubscribe: async () => {
        await redis.punsubscribe(channel), redis.quit(), this._subscriberCount--;
      },
      eventEmitter
    };
  }
  async #flushBatch(batch) {
    let events = excludePartialEventsWithCorrespondingFullEvent(batch), flushedEvents = await this.#doFlushBatch(events);
    flushedEvents.length !== events.length && logger.debug("[EventRepository][flushBatch] Failed to insert all events", {
      attemptCount: events.length,
      successCount: flushedEvents.length
    }), this.#publishToRedis(flushedEvents);
  }
  async #doFlushBatch(events, depth = 1) {
    try {
      return await this.db.taskEvent.createMany({
        data: events
      }), events;
    } catch (error) {
      if (error instanceof src_exports.Prisma.PrismaClientUnknownRequestError) {
        if (logger.error("Failed to insert events, most likely because of null characters", {
          error: {
            name: error.name,
            message: error.message,
            stack: error.stack,
            clientVersion: error.clientVersion
          }
        }), events.length === 1)
          return logger.debug("Attempting to insert event individually and it failed", {
            event: events[0],
            error: {
              name: error.name,
              message: error.message,
              stack: error.stack,
              clientVersion: error.clientVersion
            }
          }), [];
        if (depth > MAX_FLUSH_DEPTH)
          return logger.error("Failed to insert events, reached maximum depth", {
            error: {
              name: error.name,
              message: error.message,
              stack: error.stack,
              clientVersion: error.clientVersion
            },
            depth,
            eventsCount: events.length
          }), [];
        let middle = Math.floor(events.length / 2), [firstHalf, secondHalf] = [events.slice(0, middle), events.slice(middle)], [firstHalfEvents, secondHalfEvents] = await Promise.all([
          this.#doFlushBatch(firstHalf, depth + 1),
          this.#doFlushBatch(secondHalf, depth + 1)
        ]);
        return firstHalfEvents.concat(secondHalfEvents);
      }
      throw error;
    }
  }
  async #publishToRedis(events) {
    if (events.length === 0)
      return;
    let uniqueTraceSpans = new Set(events.map((e) => `events:${e.traceId}:${e.spanId}`));
    for (let id of uniqueTraceSpans)
      await this._redisPublishClient.publish(id, (/* @__PURE__ */ new Date()).toISOString());
  }
  generateTraceId() {
    return this._randomIdGenerator.generateTraceId();
  }
  generateSpanId() {
    return this._randomIdGenerator.generateSpanId();
  }
  async truncateEvents() {
    await this.db.taskEvent.deleteMany({
      where: {
        createdAt: {
          lt: new Date(Date.now() - this._config.retentionInDays * 24 * 60 * 60 * 1e3)
        }
      }
    });
  }
  /**
   * Returns a deterministically random 8-byte span ID formatted/encoded as a 16 lowercase hex
   * characters corresponding to 64 bits, based on the trace ID and seed.
   */
  #generateDeterministicSpanId(traceId, seed) {
    let hash = (0, import_node_crypto.createHash)("sha1");
    hash.update(traceId), hash.update(seed);
    let buffer = hash.digest(), hexString = "";
    for (let i = 0; i < 8; i++) {
      let str = buffer.readUInt8(i).toString(16).padStart(2, "0");
      hexString += str;
    }
    return hexString;
  }
}, eventRepository = singleton("eventRepo", initializeEventRepo);
function initializeEventRepo() {
  let repo = new EventRepository(prisma, $replica, {
    batchSize: env2.EVENTS_BATCH_SIZE,
    batchInterval: env2.EVENTS_BATCH_INTERVAL,
    retentionInDays: env2.EVENTS_DEFAULT_LOG_RETENTION,
    redis: {
      port: env2.REDIS_PORT,
      host: env2.REDIS_HOST,
      username: env2.REDIS_USERNAME,
      password: env2.REDIS_PASSWORD,
      enableAutoPipelining: !0,
      ...env2.REDIS_TLS_DISABLED === "true" ? {} : { tls: {} }
    }
  });
  return new import_prom_client2.Gauge({
    name: "event_repository_subscriber_count",
    help: "Number of event repository subscribers",
    collect() {
      this.set(repo.subscriberCount);
    },
    registers: [metricsRegister]
  }), repo;
}
function stripAttributePrefix(attributes, prefix) {
  let result = {};
  for (let [key, value] of Object.entries(attributes))
    key.startsWith(prefix) ? result[key.slice(prefix.length + 1)] = value : result[key] = value;
  return result;
}
function createExceptionPropertiesFromError(error) {
  switch (error.type) {
    case "BUILT_IN_ERROR":
      return {
        type: error.name,
        message: error.message,
        stacktrace: error.stackTrace
      };
    case "CUSTOM_ERROR":
      return {
        type: "Error",
        message: error.raw
      };
    case "INTERNAL_ERROR":
      return {
        type: "Internal error",
        message: [error.code, error.message].filter(Boolean).join(": "),
        stacktrace: error.stackTrace
      };
    case "STRING_ERROR":
      return {
        type: "Error",
        message: error.raw
      };
  }
}
function excludePartialEventsWithCorrespondingFullEvent(batch) {
  let partialEvents = batch.filter((event) => event.isPartial), fullEvents = batch.filter((event) => !event.isPartial);
  return fullEvents.concat(
    partialEvents.filter((partialEvent) => !fullEvents.some((fullEvent) => fullEvent.spanId === partialEvent.spanId))
  );
}
function extractContextFromCarrier(carrier) {
  let traceparent = carrier.traceparent, tracestate = carrier.tracestate;
  return {
    traceparent: parseTraceparent(traceparent),
    tracestate
  };
}
function parseTraceparent(traceparent) {
  if (!traceparent)
    return;
  let parts = traceparent.split("-");
  if (parts.length !== 4)
    return;
  let [version3, traceId, spanId, flags] = parts;
  if (version3 === "00")
    return { traceId, spanId };
}
function prepareEvent(event) {
  return {
    ...event,
    duration: Number(event.duration),
    events: parseEventsField(event.events),
    style: parseStyleField(event.style)
  };
}
function parseEventsField(events) {
  return events ? events.map((e) => ({
    ...e,
    properties: unflattenAttributes(e.properties)
  })) : void 0;
}
function parseStyleField(style2) {
  let unsafe = unflattenAttributes(style2);
  return unsafe ? typeof unsafe == "object" ? Object.assign(
    {
      icon: void 0,
      variant: void 0
    },
    unsafe
  ) : {} : {};
}
function isAncestorCancelled(events, spanId) {
  let event = events.get(spanId);
  return event ? event.isCancelled ? !0 : event.parentId ? isAncestorCancelled(events, event.parentId) : !1 : !1;
}
function calculateDurationIfAncestorIsCancelled(events, spanId, defaultDuration) {
  let event = events.get(spanId);
  if (!event || event.isCancelled || !event.isPartial)
    return defaultDuration;
  if (event.parentId) {
    let cancelledAncestor = findFirstCancelledAncestor(events, event.parentId);
    if (cancelledAncestor) {
      let cancellationEvent = cancelledAncestor.events.find(
        (event2) => event2.name === "cancellation"
      );
      if (cancellationEvent)
        return calculateDurationFromStart(event.startTime, cancellationEvent.time);
    }
  }
  return defaultDuration;
}
function findFirstCancelledAncestor(events, spanId) {
  let event = events.get(spanId);
  if (event) {
    if (event.isCancelled)
      return event;
    if (event.parentId)
      return findFirstCancelledAncestor(events, event.parentId);
  }
}
function sanitizedAttributes(json118) {
  if (json118 == null)
    return;
  let withoutPrivateProperties = removePrivateProperties(json118);
  if (withoutPrivateProperties)
    return unflattenAttributes(withoutPrivateProperties);
}
function removePrivateProperties(attributes) {
  if (!attributes)
    return;
  let result = {};
  for (let [key, value] of Object.entries(attributes))
    key.startsWith("$") || (result[key] = value);
  if (Object.keys(result).length !== 0)
    return result;
}
function transformEvents(events, properties, isDev) {
  return (events ?? []).map((event) => transformEvent(event, properties, isDev));
}
function transformEvent(event, properties, isDev) {
  return isExceptionSpanEvent(event) ? {
    ...event,
    properties: {
      exception: transformException(event.properties.exception, properties, isDev)
    }
  } : event;
}
function transformException(exception, properties, isDev) {
  let projectDirAttributeValue = properties[SemanticInternalAttributes.PROJECT_DIR];
  return projectDirAttributeValue !== void 0 && typeof projectDirAttributeValue != "string" ? exception : {
    ...exception,
    stacktrace: exception.stacktrace ? correctErrorStackTrace(exception.stacktrace, projectDirAttributeValue, {
      removeFirstLine: !0,
      isDev
    }) : void 0
  };
}
function calculateDurationFromStart(startTime, endTime = /* @__PURE__ */ new Date()) {
  let $endtime = typeof endTime == "string" ? new Date(endTime) : endTime;
  return Number(BigInt($endtime.getTime() * 1e6) - startTime);
}
function getNowInNanoseconds() {
  return BigInt((/* @__PURE__ */ new Date()).getTime() * 1e6);
}
function getDateFromNanoseconds(nanoseconds) {
  return new Date(Number(nanoseconds) / 1e6);
}
function rehydrateJson(json118) {
  if (json118 !== null)
    return json118 === NULL_SENTINEL ? null : typeof json118 == "string" || typeof json118 == "number" || typeof json118 == "boolean" ? json118 : Array.isArray(json118) ? json118.map((item) => rehydrateJson(item)) : typeof json118 == "object" ? unflattenAttributes(json118) : null;
}
function rehydrateShow(properties) {
  if (properties == null || typeof properties != "object" || Array.isArray(properties))
    return;
  let actions = properties[SemanticInternalAttributes.SHOW_ACTIONS];
  if (typeof actions == "boolean")
    return { actions };
}

// app/v3/marqs/index.server.ts
var import_api8 = require("@opentelemetry/api"), import_semantic_conventions3 = require("@opentelemetry/semantic-conventions");
var import_ioredis2 = __toESM(require("ioredis"));

// app/v3/marqs/asyncWorker.server.ts
var AsyncWorker = class {
  constructor(fn, interval) {
    this.fn = fn;
    this.interval = interval;
    this.running = !1;
  }
  start() {
    this.running || (this.running = !0, this.#run());
  }
  stop() {
    this.running = !1;
  }
  async #run() {
    if (this.running) {
      try {
        await this.fn();
      } catch (e) {
        console.error(e);
      }
      this.timeout = setTimeout(this.#run.bind(this), this.interval);
    }
  }
};

// app/v3/marqs/marqsKeyProducer.server.ts
var constants = {
  SHARED_QUEUE: "sharedQueue",
  CURRENT_CONCURRENCY_PART: "currentConcurrency",
  CONCURRENCY_LIMIT_PART: "concurrency",
  DISABLED_CONCURRENCY_LIMIT_PART: "disabledConcurrency",
  ENV_PART: "env",
  ORG_PART: "org",
  QUEUE_PART: "queue",
  CONCURRENCY_KEY_PART: "ck",
  MESSAGE_PART: "message"
}, MarQSShortKeyProducer = class {
  constructor(_prefix) {
    this._prefix = _prefix;
  }
  sharedQueueScanPattern() {
    return `${this._prefix}*${constants.SHARED_QUEUE}`;
  }
  queueCurrentConcurrencyScanPattern() {
    return `${this._prefix}${constants.ORG_PART}:*:${constants.ENV_PART}:*:queue:*:${constants.CURRENT_CONCURRENCY_PART}`;
  }
  stripKeyPrefix(key) {
    return key.startsWith(this._prefix) ? key.slice(this._prefix.length) : key;
  }
  queueConcurrencyLimitKey(env6, queue) {
    return [this.queueKey(env6, queue), constants.CONCURRENCY_LIMIT_PART].join(":");
  }
  envConcurrencyLimitKey(env6) {
    return [this.envKeySection(env6.id), constants.CONCURRENCY_LIMIT_PART].join(":");
  }
  orgConcurrencyLimitKey(env6) {
    return [this.orgKeySection(env6.organizationId), constants.CONCURRENCY_LIMIT_PART].join(":");
  }
  queueKey(env6, queue, concurrencyKey) {
    return [
      this.orgKeySection(env6.organizationId),
      this.envKeySection(env6.id),
      this.queueSection(queue)
    ].concat(concurrencyKey ? this.concurrencyKeySection(concurrencyKey) : []).join(":");
  }
  envSharedQueueKey(env6) {
    return env6.type === "DEVELOPMENT" ? [
      this.orgKeySection(env6.organizationId),
      this.envKeySection(env6.id),
      constants.SHARED_QUEUE
    ].join(":") : this.sharedQueueKey();
  }
  sharedQueueKey() {
    return constants.SHARED_QUEUE;
  }
  concurrencyLimitKeyFromQueue(queue) {
    return `${queue.replace(/:ck:.+$/, "")}:${constants.CONCURRENCY_LIMIT_PART}`;
  }
  currentConcurrencyKeyFromQueue(queue) {
    return `${queue}:${constants.CURRENT_CONCURRENCY_PART}`;
  }
  currentConcurrencyKey(env6, queue, concurrencyKey) {
    return [this.queueKey(env6, queue, concurrencyKey), constants.CURRENT_CONCURRENCY_PART].join(
      ":"
    );
  }
  disabledConcurrencyLimitKeyFromQueue(queue) {
    let orgId = this.normalizeQueue(queue).split(":")[1];
    return `${constants.ORG_PART}:${orgId}:${constants.DISABLED_CONCURRENCY_LIMIT_PART}`;
  }
  orgConcurrencyLimitKeyFromQueue(queue) {
    let orgId = this.normalizeQueue(queue).split(":")[1];
    return `${constants.ORG_PART}:${orgId}:${constants.CONCURRENCY_LIMIT_PART}`;
  }
  orgCurrentConcurrencyKeyFromQueue(queue) {
    let orgId = this.normalizeQueue(queue).split(":")[1];
    return `${constants.ORG_PART}:${orgId}:${constants.CURRENT_CONCURRENCY_PART}`;
  }
  envConcurrencyLimitKeyFromQueue(queue) {
    let envId = this.normalizeQueue(queue).split(":")[3];
    return `${constants.ENV_PART}:${envId}:${constants.CONCURRENCY_LIMIT_PART}`;
  }
  envCurrentConcurrencyKeyFromQueue(queue) {
    let envId = this.normalizeQueue(queue).split(":")[3];
    return `${constants.ENV_PART}:${envId}:${constants.CURRENT_CONCURRENCY_PART}`;
  }
  orgCurrentConcurrencyKey(env6) {
    return [this.orgKeySection(env6.organizationId), constants.CURRENT_CONCURRENCY_PART].join(":");
  }
  envCurrentConcurrencyKey(env6) {
    return [this.envKeySection(env6.id), constants.CURRENT_CONCURRENCY_PART].join(":");
  }
  messageKey(messageId) {
    return `${constants.MESSAGE_PART}:${messageId}`;
  }
  shortId(id) {
    return id.slice(-12);
  }
  envKeySection(envId) {
    return `${constants.ENV_PART}:${this.shortId(envId)}`;
  }
  orgKeySection(orgId) {
    return `${constants.ORG_PART}:${this.shortId(orgId)}`;
  }
  queueSection(queue) {
    return `${constants.QUEUE_PART}:${queue}`;
  }
  concurrencyKeySection(concurrencyKey) {
    return `${constants.CONCURRENCY_KEY_PART}:${concurrencyKey}`;
  }
  // This removes the leading prefix from the queue name if it exists
  normalizeQueue(queue) {
    return queue.startsWith(this._prefix) ? queue.slice(this._prefix.length) : queue;
  }
};

// app/v3/marqs/simpleWeightedPriorityStrategy.server.ts
var import_nanoid = require("nanoid"), SimpleWeightedChoiceStrategy = class {
  constructor(options2) {
    this.options = options2;
    this._nextRangesByParentQueue = /* @__PURE__ */ new Map();
  }
  nextRangeForParentQueue(parentQueue, consumerId) {
    return this._nextRangesByParentQueue.get(`${consumerId}:${parentQueue}`) ?? {
      offset: 0,
      count: this.options.queueSelectionCount
    };
  }
  chooseQueue(queues, parentQueue, consumerId, previousRange) {
    let filteredQueues = filterQueuesAtCapacity(queues);
    if (queues.length === this.options.queueSelectionCount) {
      let nextRange = {
        offset: previousRange.offset + this.options.queueSelectionCount,
        count: this.options.queueSelectionCount
      };
      this._nextRangesByParentQueue.set(`${consumerId}:${parentQueue}`, nextRange);
    } else
      this._nextRangesByParentQueue.delete(`${consumerId}:${parentQueue}`);
    if (filteredQueues.length === 0)
      return { abort: !0 };
    let queueWeights = this.#calculateQueueWeights(filteredQueues);
    return weightedRandomChoice(queueWeights);
  }
  async nextCandidateSelection(parentQueue, consumerId) {
    return {
      range: this.nextRangeForParentQueue(parentQueue, consumerId)
    };
  }
  #calculateQueueWeights(queues) {
    let avgQueueSize = queues.reduce((acc, { size }) => acc + size, 0) / queues.length, avgMessageAge = queues.reduce((acc, { age }) => acc + age, 0) / queues.length;
    return queues.map(({ capacities, age, queue, size }) => {
      let totalWeight = 1;
      return size > avgQueueSize && (totalWeight += Math.min(size / avgQueueSize, 4)), age > avgMessageAge && (totalWeight += Math.min(age / avgMessageAge, 4)), {
        queue,
        totalWeight: age
      };
    });
  }
};
function filterQueuesAtCapacity(queues) {
  return queues.filter(
    (queue) => queue.capacities.queue.current < queue.capacities.queue.limit && queue.capacities.env.current < queue.capacities.env.limit && queue.capacities.org.current < queue.capacities.org.limit
  );
}
function weightedRandomChoice(queues) {
  let totalWeight = queues.reduce((acc, queue) => acc + queue.totalWeight, 0), randomNum = Math.random() * totalWeight;
  for (let queue of queues) {
    if (randomNum < queue.totalWeight)
      return queue.queue;
    randomNum -= queue.totalWeight;
  }
  return queues[Math.floor(Math.random() * queues.length)].queue;
}
var NoopWeightedChoiceStrategy = class {
  chooseQueue(queues, parentQueue, selectionId) {
    return { abort: !0 };
  }
  nextCandidateSelection(parentQueue) {
    return Promise.resolve({ range: { offset: 0, count: 0 }, selectionId: (0, import_nanoid.nanoid)(24) });
  }
};

// app/v3/marqs/types.ts
var import_zod38 = require("zod"), MessagePayload = import_zod38.z.object({
  version: import_zod38.z.literal("1"),
  data: import_zod38.z.record(import_zod38.z.unknown()),
  queue: import_zod38.z.string(),
  messageId: import_zod38.z.string(),
  timestamp: import_zod38.z.number(),
  parentQueue: import_zod38.z.string(),
  concurrencyKey: import_zod38.z.string().optional()
});

// app/v3/requeueTaskRun.server.ts
var import_assert_never = __toESM(require("assert-never"));

// app/v3/services/baseService.server.ts
var import_api7 = require("@opentelemetry/api");
var BaseService = class {
  constructor(_prisma = prisma) {
    this._prisma = _prisma;
  }
  async traceWithEnv(trace9, env6, fn) {
    return tracer2.startActiveSpan(
      `${this.constructor.name}.${trace9}`,
      { attributes: attributesFromAuthenticatedEnv(env6), kind: import_api7.SpanKind.SERVER },
      async (span) => {
        try {
          return await fn(span);
        } catch (e) {
          throw e instanceof ServiceValidationError || (e instanceof Error ? span.recordException(e) : span.recordException(new Error(String(e)))), e;
        } finally {
          span.end();
        }
      }
    );
  }
}, ServiceValidationError = class extends Error {
  constructor(message, status) {
    super(message);
    this.status = status;
    this.name = "ServiceValidationError";
  }
};

// app/v3/failedTaskRun.server.ts
var FAILABLE_TASK_RUN_STATUSES = ["EXECUTING", "PENDING", "WAITING_FOR_DEPLOY"], FailedTaskRunService = class extends BaseService {
  async call(anyRunId, completion) {
    let isFriendlyId = anyRunId.startsWith("run_"), taskRun = await this._prisma.taskRun.findUnique({
      where: {
        friendlyId: isFriendlyId ? anyRunId : void 0,
        id: isFriendlyId ? void 0 : anyRunId
      }
    });
    if (!taskRun) {
      logger.error("[FailedTaskRunService] Task run not found", {
        anyRunId,
        completion
      });
      return;
    }
    if (!FAILABLE_TASK_RUN_STATUSES.includes(taskRun.status)) {
      logger.error("[FailedTaskRunService] Task run is not in a failable state", {
        taskRun,
        completion
      });
      return;
    }
    logger.debug("[FailedTaskRunService] Failing task run", { taskRun, completion }), await marqs?.acknowledgeMessage(taskRun.id), await eventRepository.completeEvent(taskRun.spanId, {
      endTime: /* @__PURE__ */ new Date(),
      attributes: {
        isError: !0
      },
      events: [
        {
          name: "exception",
          time: /* @__PURE__ */ new Date(),
          properties: {
            exception: createExceptionPropertiesFromError(completion.error)
          }
        }
      ]
    }), await this._prisma.taskRun.update({
      where: {
        id: taskRun.id
      },
      data: {
        status: "SYSTEM_FAILURE"
      }
    });
  }
};

// app/v3/requeueTaskRun.server.ts
var RequeueTaskRunService = class extends BaseService {
  async call(runId) {
    let taskRun = await this._prisma.taskRun.findUnique({
      where: { id: runId }
    });
    if (!taskRun) {
      logger.error("[RequeueTaskRunService] Task run not found", {
        runId
      });
      return;
    }
    switch (taskRun.status) {
      case "PENDING": {
        logger.debug("[RequeueTaskRunService] Requeueing task run", { taskRun }), await marqs?.nackMessage(taskRun.id);
        break;
      }
      case "EXECUTING":
      case "RETRYING_AFTER_FAILURE": {
        logger.debug("[RequeueTaskRunService] Failing task run", { taskRun }), await new FailedTaskRunService().call(taskRun.friendlyId, {
          ok: !1,
          id: taskRun.friendlyId,
          retry: void 0,
          error: {
            type: "INTERNAL_ERROR",
            code: "TASK_RUN_HEARTBEAT_TIMEOUT",
            message: "Did not receive a heartbeat from the worker in time"
          }
        });
        break;
      }
      case "DELAYED":
      case "WAITING_FOR_DEPLOY": {
        logger.debug("[RequeueTaskRunService] Removing task run from queue", { taskRun }), await marqs?.acknowledgeMessage(taskRun.id);
        break;
      }
      case "WAITING_TO_RESUME":
      case "PAUSED": {
        logger.debug("[RequeueTaskRunService] Requeueing task run", { taskRun }), await marqs?.nackMessage(taskRun.id);
        break;
      }
      case "SYSTEM_FAILURE":
      case "INTERRUPTED":
      case "CRASHED":
      case "COMPLETED_WITH_ERRORS":
      case "COMPLETED_SUCCESSFULLY":
      case "EXPIRED":
      case "CANCELED": {
        logger.debug("[RequeueTaskRunService] Task run is completed", { taskRun }), await marqs?.acknowledgeMessage(taskRun.id);
        break;
      }
      default:
        (0, import_assert_never.default)(taskRun.status);
    }
  }
  static async enqueue(runId, runAt, tx) {
    return await workerQueue.enqueue(
      "v3.requeueTaskRun",
      { runId },
      { runAt, jobKey: `requeueTaskRun:${runId}` }
    );
  }
  static async dequeue(runId, tx) {
    return await workerQueue.dequeue(`requeueTaskRun:${runId}`, { tx });
  }
};

// app/v3/marqs/v3VisibilityTimeout.server.ts
var V3VisibilityTimeout = class {
  async heartbeat(messageId, timeoutInMs) {
    await RequeueTaskRunService.enqueue(messageId, new Date(Date.now() + timeoutInMs));
  }
  async cancelHeartbeat(messageId) {
    await RequeueTaskRunService.dequeue(messageId);
  }
};

// app/v3/marqs/index.server.ts
var KEY_PREFIX = "marqs:", constants2 = {
  MESSAGE_VISIBILITY_TIMEOUT_QUEUE: "msgVisibilityTimeout"
}, SemanticAttributes = {
  QUEUE: "marqs.queue",
  PARENT_QUEUE: "marqs.parentQueue",
  MESSAGE_ID: "marqs.messageId",
  CONCURRENCY_KEY: "marqs.concurrencyKey"
}, MarQS = class {
  constructor(options2) {
    this.options = options2;
    this.#requeueingWorkers = [];
    this.#rebalanceWorkers = [];
    this.redis = new import_ioredis2.default(options2.redis), this.keys = options2.keysProducer, this.queuePriorityStrategy = options2.queuePriorityStrategy, this.#startRebalanceWorkers(), this.#registerCommands();
  }
  #requeueingWorkers;
  #rebalanceWorkers;
  get name() {
    return this.options.name;
  }
  get tracer() {
    return this.options.tracer;
  }
  async updateQueueConcurrencyLimits(env6, queue, concurrency) {
    return this.redis.set(this.keys.queueConcurrencyLimitKey(env6, queue), concurrency);
  }
  async removeQueueConcurrencyLimits(env6, queue) {
    return this.redis.del(this.keys.queueConcurrencyLimitKey(env6, queue));
  }
  async updateEnvConcurrencyLimits(env6) {
    await this.#callUpdateGlobalConcurrencyLimits({
      envConcurrencyLimitKey: this.keys.envConcurrencyLimitKey(env6),
      orgConcurrencyLimitKey: this.keys.orgConcurrencyLimitKey(env6),
      envConcurrencyLimit: env6.maximumConcurrencyLimit,
      orgConcurrencyLimit: env6.organization.maximumConcurrencyLimit
    });
  }
  async getQueueConcurrencyLimit(env6, queue) {
    let result = await this.redis.get(this.keys.queueConcurrencyLimitKey(env6, queue));
    return result ? Number(result) : void 0;
  }
  async getEnvConcurrencyLimit(env6) {
    let result = await this.redis.get(this.keys.envConcurrencyLimitKey(env6));
    return result ? Number(result) : this.options.defaultEnvConcurrency;
  }
  async getOrgConcurrencyLimit(env6) {
    let result = await this.redis.get(this.keys.orgConcurrencyLimitKey(env6));
    return result ? Number(result) : this.options.defaultOrgConcurrency;
  }
  async lengthOfQueue(env6, queue, concurrencyKey) {
    return this.redis.zcard(this.keys.queueKey(env6, queue, concurrencyKey));
  }
  async oldestMessageInQueue(env6, queue, concurrencyKey) {
    let result = await this.redis.zrange(
      this.keys.queueKey(env6, queue, concurrencyKey),
      0,
      0,
      "WITHSCORES"
    );
    if (result.length !== 0)
      return Number(result[1]);
  }
  async currentConcurrencyOfQueue(env6, queue, concurrencyKey) {
    return this.redis.scard(this.keys.currentConcurrencyKey(env6, queue, concurrencyKey));
  }
  async currentConcurrencyOfEnvironment(env6) {
    return this.redis.scard(this.keys.envCurrentConcurrencyKey(env6));
  }
  async currentConcurrencyOfOrg(env6) {
    return this.redis.scard(this.keys.orgCurrentConcurrencyKey(env6));
  }
  async enqueueMessage(env6, queue, messageId, messageData, concurrencyKey, timestamp) {
    return await this.#trace(
      "enqueueMessage",
      async (span) => {
        let messageQueue = this.keys.queueKey(env6, queue, concurrencyKey), parentQueue = this.keys.envSharedQueueKey(env6);
        import_api8.propagation.inject(import_api8.context.active(), messageData);
        let messagePayload = {
          version: "1",
          data: messageData,
          queue: messageQueue,
          concurrencyKey,
          timestamp: timestamp ?? Date.now(),
          messageId,
          parentQueue
        };
        span.setAttributes({
          [SemanticAttributes.QUEUE]: queue,
          [SemanticAttributes.MESSAGE_ID]: messageId,
          [SemanticAttributes.CONCURRENCY_KEY]: concurrencyKey,
          [SemanticAttributes.PARENT_QUEUE]: parentQueue
        }), await this.#callEnqueueMessage(messagePayload);
      },
      {
        kind: import_api8.SpanKind.PRODUCER,
        attributes: {
          [import_semantic_conventions3.SEMATTRS_MESSAGING_OPERATION]: "publish",
          [import_semantic_conventions3.SEMATTRS_MESSAGE_ID]: messageId,
          [import_semantic_conventions3.SEMATTRS_MESSAGING_SYSTEM]: "marqs",
          ...attributesFromAuthenticatedEnv(env6)
        }
      }
    );
  }
  async dequeueMessageInEnv(env6) {
    return this.#trace(
      "dequeueMessageInEnv",
      async (span) => {
        let parentQueue = this.keys.envSharedQueueKey(env6), messageQueue = await this.#getRandomQueueFromParentQueue(
          parentQueue,
          this.options.envQueuePriorityStrategy,
          (queue) => this.#calculateMessageQueueCapacities(queue, { checkForDisabled: !1 }),
          env6.id
        );
        if (!messageQueue)
          return;
        let messageData = await this.#callDequeueMessage({
          messageQueue,
          parentQueue,
          visibilityQueue: constants2.MESSAGE_VISIBILITY_TIMEOUT_QUEUE,
          concurrencyLimitKey: this.keys.concurrencyLimitKeyFromQueue(messageQueue),
          currentConcurrencyKey: this.keys.currentConcurrencyKeyFromQueue(messageQueue),
          envConcurrencyLimitKey: this.keys.envConcurrencyLimitKeyFromQueue(messageQueue),
          envCurrentConcurrencyKey: this.keys.envCurrentConcurrencyKeyFromQueue(messageQueue),
          orgConcurrencyLimitKey: this.keys.orgConcurrencyLimitKeyFromQueue(messageQueue),
          orgCurrentConcurrencyKey: this.keys.orgCurrentConcurrencyKeyFromQueue(messageQueue)
        });
        if (!messageData)
          return;
        let message = await this.readMessage(messageData.messageId);
        return message ? span.setAttributes({
          [import_semantic_conventions3.SEMATTRS_MESSAGE_ID]: message.messageId,
          [SemanticAttributes.QUEUE]: message.queue,
          [SemanticAttributes.MESSAGE_ID]: message.messageId,
          [SemanticAttributes.CONCURRENCY_KEY]: message.concurrencyKey,
          [SemanticAttributes.PARENT_QUEUE]: message.parentQueue
        }) : (logger.error("Failed to read message, undoing the dequeueing of the message", {
          messageData,
          service: this.name
        }), await this.#callAcknowledgeMessage({
          parentQueue,
          messageKey: this.keys.messageKey(messageData.messageId),
          messageQueue,
          visibilityQueue: constants2.MESSAGE_VISIBILITY_TIMEOUT_QUEUE,
          concurrencyKey: this.keys.currentConcurrencyKeyFromQueue(messageQueue),
          envConcurrencyKey: this.keys.envCurrentConcurrencyKeyFromQueue(messageQueue),
          orgConcurrencyKey: this.keys.orgCurrentConcurrencyKeyFromQueue(messageQueue),
          messageId: messageData.messageId
        })), await this.options.visibilityTimeoutStrategy.heartbeat(
          messageData.messageId,
          this.visibilityTimeoutInMs
        ), message;
      },
      {
        kind: import_api8.SpanKind.CONSUMER,
        attributes: {
          [import_semantic_conventions3.SEMATTRS_MESSAGING_OPERATION]: "receive",
          [import_semantic_conventions3.SEMATTRS_MESSAGING_SYSTEM]: "marqs",
          ...attributesFromAuthenticatedEnv(env6)
        }
      }
    );
  }
  async getSharedQueueDetails() {
    let parentQueue = this.keys.sharedQueueKey(), { range } = await this.queuePriorityStrategy.nextCandidateSelection(
      parentQueue,
      "getSharedQueueDetails"
    ), queues = await this.#getChildQueuesWithScores(parentQueue, range), queuesWithScores = await this.#calculateQueueScores(
      queues,
      (queue) => this.#calculateMessageQueueCapacities(queue)
    ), choice = this.queuePriorityStrategy.chooseQueue(
      queuesWithScores,
      parentQueue,
      "getSharedQueueDetails",
      range
    );
    return {
      selectionId: "getSharedQueueDetails",
      queues,
      queuesWithScores,
      nextRange: range,
      queueCount: queues.length,
      queueChoice: choice
    };
  }
  /**
   * Dequeue a message from the shared queue (this should be used in production environments)
   */
  async dequeueMessageInSharedQueue(consumerId) {
    return this.#trace(
      "dequeueMessageInSharedQueue",
      async (span) => {
        let parentQueue = this.keys.sharedQueueKey(), messageQueue = await this.#getRandomQueueFromParentQueue(
          parentQueue,
          this.options.queuePriorityStrategy,
          (queue) => this.#calculateMessageQueueCapacities(queue, { checkForDisabled: !0 }),
          consumerId
        );
        if (!messageQueue)
          return;
        let messageData = await this.#callDequeueMessage({
          messageQueue,
          parentQueue,
          visibilityQueue: constants2.MESSAGE_VISIBILITY_TIMEOUT_QUEUE,
          concurrencyLimitKey: this.keys.concurrencyLimitKeyFromQueue(messageQueue),
          currentConcurrencyKey: this.keys.currentConcurrencyKeyFromQueue(messageQueue),
          envConcurrencyLimitKey: this.keys.envConcurrencyLimitKeyFromQueue(messageQueue),
          envCurrentConcurrencyKey: this.keys.envCurrentConcurrencyKeyFromQueue(messageQueue),
          orgConcurrencyLimitKey: this.keys.orgConcurrencyLimitKeyFromQueue(messageQueue),
          orgCurrentConcurrencyKey: this.keys.orgCurrentConcurrencyKeyFromQueue(messageQueue)
        });
        if (!messageData)
          return;
        let message = await this.readMessage(messageData.messageId);
        return message && span.setAttributes({
          [import_semantic_conventions3.SEMATTRS_MESSAGE_ID]: message.messageId,
          [SemanticAttributes.QUEUE]: message.queue,
          [SemanticAttributes.MESSAGE_ID]: message.messageId,
          [SemanticAttributes.CONCURRENCY_KEY]: message.concurrencyKey,
          [SemanticAttributes.PARENT_QUEUE]: message.parentQueue
        }), await this.options.visibilityTimeoutStrategy.heartbeat(
          messageData.messageId,
          this.visibilityTimeoutInMs
        ), message;
      },
      {
        kind: import_api8.SpanKind.CONSUMER,
        attributes: {
          [import_semantic_conventions3.SEMATTRS_MESSAGING_OPERATION]: "receive",
          [import_semantic_conventions3.SEMATTRS_MESSAGING_SYSTEM]: "marqs"
        }
      }
    );
  }
  async acknowledgeMessage(messageId) {
    return this.#trace(
      "acknowledgeMessage",
      async (span) => {
        let message = await this.readMessage(messageId);
        message && (span.setAttributes({
          [SemanticAttributes.QUEUE]: message.queue,
          [SemanticAttributes.MESSAGE_ID]: message.messageId,
          [SemanticAttributes.CONCURRENCY_KEY]: message.concurrencyKey,
          [SemanticAttributes.PARENT_QUEUE]: message.parentQueue
        }), await this.options.visibilityTimeoutStrategy.cancelHeartbeat(messageId), await this.#callAcknowledgeMessage({
          parentQueue: message.parentQueue,
          messageKey: this.keys.messageKey(messageId),
          messageQueue: message.queue,
          visibilityQueue: constants2.MESSAGE_VISIBILITY_TIMEOUT_QUEUE,
          concurrencyKey: this.keys.currentConcurrencyKeyFromQueue(message.queue),
          envConcurrencyKey: this.keys.envCurrentConcurrencyKeyFromQueue(message.queue),
          orgConcurrencyKey: this.keys.orgCurrentConcurrencyKeyFromQueue(message.queue),
          messageId
        }));
      },
      {
        kind: import_api8.SpanKind.CONSUMER,
        attributes: {
          [import_semantic_conventions3.SEMATTRS_MESSAGING_OPERATION]: "ack",
          [import_semantic_conventions3.SEMATTRS_MESSAGE_ID]: messageId,
          [import_semantic_conventions3.SEMATTRS_MESSAGING_SYSTEM]: "marqs"
        }
      }
    );
  }
  async replaceMessage(messageId, messageData, timestamp, inplace) {
    return this.#trace(
      "replaceMessage",
      async (span) => {
        let oldMessage = await this.readMessage(messageId);
        if (!oldMessage)
          return;
        span.setAttributes({
          [SemanticAttributes.QUEUE]: oldMessage.queue,
          [SemanticAttributes.MESSAGE_ID]: oldMessage.messageId,
          [SemanticAttributes.CONCURRENCY_KEY]: oldMessage.concurrencyKey,
          [SemanticAttributes.PARENT_QUEUE]: oldMessage.parentQueue
        });
        let traceContext = {
          traceparent: oldMessage.data.traceparent,
          tracestate: oldMessage.data.tracestate
        }, newMessage = {
          version: "1",
          // preserve original trace context
          data: { ...messageData, ...traceContext },
          queue: oldMessage.queue,
          concurrencyKey: oldMessage.concurrencyKey,
          timestamp: timestamp ?? Date.now(),
          messageId,
          parentQueue: oldMessage.parentQueue
        };
        if (inplace) {
          await this.#callReplaceMessage(newMessage);
          return;
        }
        await this.options.visibilityTimeoutStrategy.cancelHeartbeat(messageId), await this.#callAcknowledgeMessage({
          parentQueue: oldMessage.parentQueue,
          messageKey: this.keys.messageKey(messageId),
          messageQueue: oldMessage.queue,
          visibilityQueue: constants2.MESSAGE_VISIBILITY_TIMEOUT_QUEUE,
          concurrencyKey: this.keys.currentConcurrencyKeyFromQueue(oldMessage.queue),
          envConcurrencyKey: this.keys.envCurrentConcurrencyKeyFromQueue(oldMessage.queue),
          orgConcurrencyKey: this.keys.orgCurrentConcurrencyKeyFromQueue(oldMessage.queue),
          messageId
        }), await this.#callEnqueueMessage(newMessage);
      },
      {
        kind: import_api8.SpanKind.CONSUMER,
        attributes: {
          [import_semantic_conventions3.SEMATTRS_MESSAGING_OPERATION]: "replace",
          [import_semantic_conventions3.SEMATTRS_MESSAGE_ID]: messageId,
          [import_semantic_conventions3.SEMATTRS_MESSAGING_SYSTEM]: "marqs"
        }
      }
    );
  }
  async #trace(name, fn, options2) {
    return this.tracer.startActiveSpan(
      name,
      {
        ...options2,
        attributes: {
          ...options2?.attributes
        }
      },
      async (span) => {
        try {
          return await fn(span);
        } catch (e) {
          throw e instanceof Error ? span.recordException(e) : span.recordException(new Error(String(e))), e;
        } finally {
          span.end();
        }
      }
    );
  }
  /**
   * Negative acknowledge a message, which will requeue the message
   */
  async nackMessage(messageId, retryAt = Date.now(), updates) {
    return this.#trace(
      "nackMessage",
      async (span) => {
        let message = await this.readMessage(messageId);
        message && (span.setAttributes({
          [SemanticAttributes.QUEUE]: message.queue,
          [SemanticAttributes.MESSAGE_ID]: message.messageId,
          [SemanticAttributes.CONCURRENCY_KEY]: message.concurrencyKey,
          [SemanticAttributes.PARENT_QUEUE]: message.parentQueue
        }), updates && await this.replaceMessage(messageId, updates, retryAt, !0), await this.options.visibilityTimeoutStrategy.cancelHeartbeat(messageId), await this.#callNackMessage({
          messageKey: this.keys.messageKey(messageId),
          messageQueue: message.queue,
          parentQueue: message.parentQueue,
          concurrencyKey: this.keys.currentConcurrencyKeyFromQueue(message.queue),
          envConcurrencyKey: this.keys.envCurrentConcurrencyKeyFromQueue(message.queue),
          orgConcurrencyKey: this.keys.orgCurrentConcurrencyKeyFromQueue(message.queue),
          visibilityQueue: constants2.MESSAGE_VISIBILITY_TIMEOUT_QUEUE,
          messageId,
          messageScore: retryAt
        }));
      },
      {
        kind: import_api8.SpanKind.CONSUMER,
        attributes: {
          [import_semantic_conventions3.SEMATTRS_MESSAGING_OPERATION]: "nack",
          [import_semantic_conventions3.SEMATTRS_MESSAGE_ID]: messageId,
          [import_semantic_conventions3.SEMATTRS_MESSAGING_SYSTEM]: "marqs"
        }
      }
    );
  }
  // This should increment by the number of seconds, but with a max value of Date.now() + visibilityTimeoutInMs
  async heartbeatMessage(messageId, seconds = 30) {
    await this.options.visibilityTimeoutStrategy.heartbeat(messageId, seconds * 1e3);
  }
  get visibilityTimeoutInMs() {
    return this.options.visibilityTimeoutInMs ?? 3e5;
  }
  async readMessage(messageId) {
    return this.#trace(
      "readMessage",
      async (span) => {
        let rawMessage = await this.redis.get(this.keys.messageKey(messageId));
        if (!rawMessage)
          return;
        let message = MessagePayload.safeParse(JSON.parse(rawMessage));
        if (!message.success) {
          logger.error(`[${this.name}] Failed to parse message`, {
            messageId,
            error: message.error,
            service: this.name
          });
          return;
        }
        return message.data;
      },
      {
        attributes: {
          [import_semantic_conventions3.SEMATTRS_MESSAGING_OPERATION]: "receive",
          [import_semantic_conventions3.SEMATTRS_MESSAGE_ID]: messageId,
          [import_semantic_conventions3.SEMATTRS_MESSAGING_SYSTEM]: "marqs",
          [SemanticAttributes.MESSAGE_ID]: messageId
        }
      }
    );
  }
  async #getRandomQueueFromParentQueue(parentQueue, queuePriorityStrategy, calculateCapacities, consumerId) {
    return this.#trace(
      "getRandomQueueFromParentQueue",
      async (span) => {
        let { range } = await queuePriorityStrategy.nextCandidateSelection(
          parentQueue,
          consumerId
        ), queues = await this.#getChildQueuesWithScores(parentQueue, range), queuesWithScores = await this.#calculateQueueScores(queues, calculateCapacities), choice = this.queuePriorityStrategy.chooseQueue(
          queuesWithScores,
          parentQueue,
          consumerId,
          range
        );
        if (span.setAttributes({
          ...flattenAttributes(queues, "marqs.queues")
        }), span.setAttributes({
          ...flattenAttributes(queuesWithScores, "marqs.queuesWithScores")
        }), span.setAttribute("nextRange.offset", range.offset), span.setAttribute("nextRange.count", range.count), span.setAttribute("queueCount", queues.length), this.options.verbose && (typeof choice == "string" ? logger.debug(`[${this.name}] getRandomQueueFromParentQueue`, {
          queues,
          queuesWithScores,
          nextRange: range,
          queueCount: queues.length,
          queueChoice: choice,
          consumerId
        }) : logger.debug(`[${this.name}] getRandomQueueFromParentQueue`, {
          queues,
          queuesWithScores,
          nextRange: range,
          queueCount: queues.length,
          noQueueChoice: !0,
          consumerId
        })), typeof choice != "string") {
          span.setAttribute("noQueueChoice", !0);
          return;
        } else
          return span.setAttribute("queueChoice", choice), choice;
      },
      {
        kind: import_api8.SpanKind.CONSUMER,
        attributes: {
          [import_semantic_conventions3.SEMATTRS_MESSAGING_OPERATION]: "receive",
          [import_semantic_conventions3.SEMATTRS_MESSAGING_SYSTEM]: "marqs",
          [SemanticAttributes.PARENT_QUEUE]: parentQueue
        }
      }
    );
  }
  // Calculate the weights of the queues based on the age and the capacity
  async #calculateQueueScores(queues, calculateCapacities) {
    let now = Date.now();
    return await Promise.all(
      queues.map(async (queue) => ({
        queue: queue.value,
        capacities: await calculateCapacities(queue.value),
        age: now - queue.score,
        size: await this.redis.zcard(queue.value)
      }))
    );
  }
  async #calculateMessageQueueCapacities(queue, options2) {
    return await this.#callCalculateMessageCapacities({
      currentConcurrencyKey: this.keys.currentConcurrencyKeyFromQueue(queue),
      currentEnvConcurrencyKey: this.keys.envCurrentConcurrencyKeyFromQueue(queue),
      currentOrgConcurrencyKey: this.keys.orgCurrentConcurrencyKeyFromQueue(queue),
      concurrencyLimitKey: this.keys.concurrencyLimitKeyFromQueue(queue),
      envConcurrencyLimitKey: this.keys.envConcurrencyLimitKeyFromQueue(queue),
      orgConcurrencyLimitKey: this.keys.orgConcurrencyLimitKeyFromQueue(queue),
      disabledConcurrencyLimitKey: options2?.checkForDisabled ? this.keys.disabledConcurrencyLimitKeyFromQueue(queue) : void 0
    });
  }
  async #getChildQueuesWithScores(key, range) {
    let valuesWithScores = await this.redis.zrangebyscore(
      key,
      "-inf",
      Date.now(),
      "WITHSCORES",
      "LIMIT",
      range.offset,
      range.count
    ), result = [];
    for (let i = 0; i < valuesWithScores.length; i += 2)
      result.push({
        value: valuesWithScores[i],
        score: Number(valuesWithScores[i + 1])
      });
    return result;
  }
  #startRebalanceWorkers() {
    if (this.options.enableRebalancing)
      for (let i = 0; i < this.options.workers; i++) {
        let worker = new AsyncWorker(this.#rebalanceParentQueues.bind(this), 6e4);
        this.#rebalanceWorkers.push(worker), worker.start();
      }
  }
  queueConcurrencyScanStream(count = 100, onEndCallback, onErrorCallback) {
    let pattern = this.keys.queueCurrentConcurrencyScanPattern();
    logger.debug("Starting queue concurrency scan stream", {
      pattern,
      component: "marqs",
      operation: "queueConcurrencyScanStream",
      service: this.name,
      count
    });
    let redis = this.redis.duplicate(), stream = redis.scanStream({
      match: pattern,
      type: "set",
      count
    });
    return stream.on("end", () => {
      onEndCallback?.(), redis.quit();
    }), stream.on("error", (error) => {
      onErrorCallback?.(error), redis.quit();
    }), { stream, redis };
  }
  async #rebalanceParentQueues() {
    return await new Promise((resolve, reject) => {
      let pattern = this.keys.sharedQueueScanPattern(), redis = this.redis.duplicate(), stream = redis.scanStream({
        match: pattern,
        type: "zset",
        count: 100
      });
      logger.debug("Streaming parent queues based on pattern", {
        pattern,
        component: "marqs",
        operation: "rebalanceParentQueues",
        service: this.name
      }), stream.on("data", async (keys) => {
        stream.pause();
        let uniqueKeys = Array.from(new Set(keys));
        logger.debug("Rebalancing parent queues", {
          component: "marqs",
          operation: "rebalanceParentQueues",
          parentQueues: uniqueKeys,
          service: this.name
        }), Promise.all(
          uniqueKeys.map(async (key) => this.#rebalanceParentQueue(this.keys.stripKeyPrefix(key)))
        ).finally(() => {
          stream.resume();
        });
      }), stream.on("end", () => {
        redis.quit().finally(() => {
          resolve();
        });
      }), stream.on("error", (e) => {
        redis.quit().finally(() => {
          reject(e);
        });
      });
    });
  }
  // Parent queue is a sorted set, the values of which are queue keys and the scores are is the oldest message in the queue
  // We need to scan the parent queue and rebalance the queues based on the oldest message in the queue
  async #rebalanceParentQueue(parentQueue) {
    return await new Promise((resolve, reject) => {
      let redis = this.redis.duplicate(), stream = redis.zscanStream(parentQueue, {
        match: "*",
        count: 100
      });
      stream.on("data", async (childQueues) => {
        stream.pause();
        let childQueuesWithScores = {};
        for (let i = 0; i < childQueues.length; i += 2)
          childQueuesWithScores[childQueues[i]] = childQueues[i + 1];
        logger.debug("Rebalancing child queues", {
          parentQueue,
          childQueuesWithScores,
          component: "marqs",
          operation: "rebalanceParentQueues",
          service: this.name
        }), await Promise.all(
          Object.entries(childQueuesWithScores).map(
            async ([childQueue, currentScore]) => this.#callRebalanceParentQueueChild({ parentQueue, childQueue, currentScore })
          )
        ).finally(() => {
          stream.resume();
        });
      }), stream.on("end", () => {
        redis.quit().finally(() => {
          resolve();
        });
      }), stream.on("error", (e) => {
        redis.quit().finally(() => {
          reject(e);
        });
      });
    });
  }
  async #callEnqueueMessage(message) {
    return logger.debug("Calling enqueueMessage", {
      messagePayload: message,
      service: this.name
    }), this.redis.enqueueMessage(
      message.queue,
      message.parentQueue,
      this.keys.messageKey(message.messageId),
      message.queue,
      message.messageId,
      JSON.stringify(message),
      String(message.timestamp)
    );
  }
  async #callDequeueMessage({
    messageQueue,
    parentQueue,
    visibilityQueue,
    concurrencyLimitKey,
    envConcurrencyLimitKey,
    orgConcurrencyLimitKey,
    currentConcurrencyKey,
    envCurrentConcurrencyKey,
    orgCurrentConcurrencyKey
  }) {
    let result = await this.redis.dequeueMessage(
      messageQueue,
      parentQueue,
      concurrencyLimitKey,
      envConcurrencyLimitKey,
      orgConcurrencyLimitKey,
      currentConcurrencyKey,
      envCurrentConcurrencyKey,
      orgCurrentConcurrencyKey,
      messageQueue,
      String(Date.now()),
      String(this.options.defaultEnvConcurrency),
      String(this.options.defaultOrgConcurrency)
    );
    if (result && (logger.debug("Dequeue message result", {
      result,
      service: this.name
    }), result.length === 2))
      return {
        messageId: result[0],
        messageScore: result[1]
      };
  }
  async #callReplaceMessage(message) {
    return logger.debug("Calling replaceMessage", {
      messagePayload: message,
      service: this.name
    }), this.redis.replaceMessage(
      this.keys.messageKey(message.messageId),
      JSON.stringify(message)
    );
  }
  async #callAcknowledgeMessage({
    parentQueue,
    messageKey,
    messageQueue,
    visibilityQueue,
    concurrencyKey,
    envConcurrencyKey,
    orgConcurrencyKey,
    messageId
  }) {
    return logger.debug("Calling acknowledgeMessage", {
      messageKey,
      messageQueue,
      visibilityQueue,
      concurrencyKey,
      envConcurrencyKey,
      orgConcurrencyKey,
      messageId,
      parentQueue,
      service: this.name
    }), this.redis.acknowledgeMessage(
      parentQueue,
      messageKey,
      messageQueue,
      visibilityQueue,
      concurrencyKey,
      envConcurrencyKey,
      orgConcurrencyKey,
      messageId,
      messageQueue
    );
  }
  async #callNackMessage({
    messageKey,
    messageQueue,
    parentQueue,
    concurrencyKey,
    envConcurrencyKey,
    orgConcurrencyKey,
    visibilityQueue,
    messageId,
    messageScore
  }) {
    return logger.debug("Calling nackMessage", {
      messageKey,
      messageQueue,
      parentQueue,
      concurrencyKey,
      envConcurrencyKey,
      orgConcurrencyKey,
      visibilityQueue,
      messageId,
      messageScore,
      service: this.name
    }), this.redis.nackMessage(
      messageKey,
      messageQueue,
      parentQueue,
      concurrencyKey,
      envConcurrencyKey,
      orgConcurrencyKey,
      visibilityQueue,
      messageQueue,
      messageId,
      String(Date.now()),
      String(messageScore)
    );
  }
  async #callCalculateMessageCapacities({
    currentConcurrencyKey,
    currentEnvConcurrencyKey,
    currentOrgConcurrencyKey,
    concurrencyLimitKey,
    envConcurrencyLimitKey,
    orgConcurrencyLimitKey,
    disabledConcurrencyLimitKey
  }) {
    let capacities = disabledConcurrencyLimitKey ? await this.redis.calculateMessageQueueCapacitiesWithDisabling(
      currentConcurrencyKey,
      currentEnvConcurrencyKey,
      currentOrgConcurrencyKey,
      concurrencyLimitKey,
      envConcurrencyLimitKey,
      orgConcurrencyLimitKey,
      disabledConcurrencyLimitKey,
      String(this.options.defaultEnvConcurrency),
      String(this.options.defaultOrgConcurrency)
    ) : await this.redis.calculateMessageQueueCapacities(
      currentConcurrencyKey,
      currentEnvConcurrencyKey,
      currentOrgConcurrencyKey,
      concurrencyLimitKey,
      envConcurrencyLimitKey,
      orgConcurrencyLimitKey,
      String(this.options.defaultEnvConcurrency),
      String(this.options.defaultOrgConcurrency)
    ), queueCurrent = Number(capacities[0]), envLimit = Number(capacities[3]), orgLimit = Number(capacities[5]), queueLimit = capacities[1] ? Number(capacities[1]) : Math.min(envLimit, orgLimit), envCurrent = Number(capacities[2]), orgCurrent = Number(capacities[4]);
    return {
      queue: { current: queueCurrent, limit: queueLimit },
      env: { current: envCurrent, limit: envLimit },
      org: { current: orgCurrent, limit: orgLimit }
    };
  }
  #callUpdateGlobalConcurrencyLimits({
    envConcurrencyLimitKey,
    orgConcurrencyLimitKey,
    envConcurrencyLimit,
    orgConcurrencyLimit
  }) {
    return this.redis.updateGlobalConcurrencyLimits(
      envConcurrencyLimitKey,
      orgConcurrencyLimitKey,
      String(envConcurrencyLimit),
      String(orgConcurrencyLimit)
    );
  }
  async #callRebalanceParentQueueChild({
    parentQueue,
    childQueue,
    currentScore
  }) {
    let rebalanceResult = await this.redis.rebalanceParentQueueChild(
      childQueue,
      parentQueue,
      childQueue,
      currentScore
    );
    return rebalanceResult && logger.debug("Rebalanced parent queue child", {
      parentQueue,
      childQueue,
      currentScore,
      rebalanceResult,
      operation: "rebalanceParentQueueChild",
      service: this.name
    }), rebalanceResult;
  }
  #registerCommands() {
    this.redis.defineCommand("enqueueMessage", {
      numberOfKeys: 3,
      lua: `
local queue = KEYS[1]
local parentQueue = KEYS[2]
local messageKey = KEYS[3]

local queueName = ARGV[1]
local messageId = ARGV[2]
local messageData = ARGV[3]
local messageScore = ARGV[4]

-- Write the message to the message key
redis.call('SET', messageKey, messageData)

-- Add the message to the queue
redis.call('ZADD', queue, messageScore, messageId)

-- Rebalance the parent queue
local earliestMessage = redis.call('ZRANGE', queue, 0, 0, 'WITHSCORES')
if #earliestMessage == 0 then
    redis.call('ZREM', parentQueue, queueName)
else
    redis.call('ZADD', parentQueue, earliestMessage[2], queueName)
end
      `
    }), this.redis.defineCommand("dequeueMessage", {
      numberOfKeys: 8,
      lua: `
-- Keys: childQueue, parentQueue, concurrencyLimitKey, envConcurrencyLimitKey, orgConcurrencyLimitKey, currentConcurrencyKey, envCurrentConcurrencyKey, orgCurrentConcurrencyKey
local childQueue = KEYS[1]
local parentQueue = KEYS[2]
local concurrencyLimitKey = KEYS[3]
local envConcurrencyLimitKey = KEYS[4]
local orgConcurrencyLimitKey = KEYS[5]
local currentConcurrencyKey = KEYS[6]
local envCurrentConcurrencyKey = KEYS[7]
local orgCurrentConcurrencyKey = KEYS[8]

-- Args: childQueueName, currentTime, defaultEnvConcurrencyLimit, defaultOrgConcurrencyLimit
local childQueueName = ARGV[1]
local currentTime = tonumber(ARGV[2])
local defaultEnvConcurrencyLimit = ARGV[3]
local defaultOrgConcurrencyLimit = ARGV[4]

-- Check current org concurrency against the limit
local orgCurrentConcurrency = tonumber(redis.call('SCARD', orgCurrentConcurrencyKey) or '0')
local orgConcurrencyLimit = tonumber(redis.call('GET', orgConcurrencyLimitKey) or defaultOrgConcurrencyLimit)

if orgCurrentConcurrency >= orgConcurrencyLimit then
    return nil
end

-- Check current env concurrency against the limit
local envCurrentConcurrency = tonumber(redis.call('SCARD', envCurrentConcurrencyKey) or '0')
local envConcurrencyLimit = tonumber(redis.call('GET', envConcurrencyLimitKey) or defaultEnvConcurrencyLimit)

if envCurrentConcurrency >= envConcurrencyLimit then
    return nil
end

-- Check current queue concurrency against the limit
local currentConcurrency = tonumber(redis.call('SCARD', currentConcurrencyKey) or '0')
local concurrencyLimit = tonumber(redis.call('GET', concurrencyLimitKey) or '1000000')

-- Check condition only if concurrencyLimit exists
if currentConcurrency >= concurrencyLimit then
    return nil
end

-- Attempt to dequeue the next message
local messages = redis.call('ZRANGEBYSCORE', childQueue, '-inf', currentTime, 'WITHSCORES', 'LIMIT', 0, 1)

if #messages == 0 then
    return nil
end

local messageId = messages[1]
local messageScore = tonumber(messages[2])

-- Move message to timeout queue and update concurrency
redis.call('ZREM', childQueue, messageId)
redis.call('SADD', currentConcurrencyKey, messageId)
redis.call('SADD', envCurrentConcurrencyKey, messageId)
redis.call('SADD', orgCurrentConcurrencyKey, messageId)

-- Rebalance the parent queue
local earliestMessage = redis.call('ZRANGE', childQueue, 0, 0, 'WITHSCORES')
if #earliestMessage == 0 then
    redis.call('ZREM', parentQueue, childQueueName)
else
    redis.call('ZADD', parentQueue, earliestMessage[2], childQueueName)
end

return {messageId, messageScore} -- Return message details
      `
    }), this.redis.defineCommand("replaceMessage", {
      numberOfKeys: 1,
      lua: `
local messageKey = KEYS[1]
local messageData = ARGV[1]

-- Check if message exists
local existingMessage = redis.call('GET', messageKey)

-- Do nothing if it doesn't
if #existingMessage == nil then
    return nil
end

-- Replace the message
redis.call('SET', messageKey, messageData, 'GET')
      `
    }), this.redis.defineCommand("acknowledgeMessage", {
      numberOfKeys: 7,
      lua: `
-- Keys: parentQueue, messageKey, messageQueue, visibilityQueue, concurrencyKey, envCurrentConcurrencyKey, orgCurrentConcurrencyKey
local parentQueue = KEYS[1]
local messageKey = KEYS[2]
local messageQueue = KEYS[3]
local visibilityQueue = KEYS[4]
local concurrencyKey = KEYS[5]
local envCurrentConcurrencyKey = KEYS[6]
local orgCurrentConcurrencyKey = KEYS[7]

-- Args: messageId, messageQueueName
local messageId = ARGV[1]
local messageQueueName = ARGV[2]

-- Remove the message from the message key
redis.call('DEL', messageKey)

-- Remove the message from the queue
redis.call('ZREM', messageQueue, messageId)

-- Rebalance the parent queue
local earliestMessage = redis.call('ZRANGE', messageQueue, 0, 0, 'WITHSCORES')
if #earliestMessage == 0 then
    redis.call('ZREM', parentQueue, messageQueueName)
else
    redis.call('ZADD', parentQueue, earliestMessage[2], messageQueueName)
end

-- Remove the message from the timeout queue (deprecated, will eventually remove this)
redis.call('ZREM', visibilityQueue, messageId)

-- Update the concurrency keys
redis.call('SREM', concurrencyKey, messageId)
redis.call('SREM', envCurrentConcurrencyKey, messageId)
redis.call('SREM', orgCurrentConcurrencyKey, messageId)
`
    }), this.redis.defineCommand("nackMessage", {
      numberOfKeys: 7,
      lua: `
-- Keys: childQueueKey, parentQueueKey, visibilityQueue, concurrencyKey, envConcurrencyKey, orgConcurrencyKey, messageId
local messageKey = KEYS[1]
local childQueueKey = KEYS[2]
local parentQueueKey = KEYS[3]
local concurrencyKey = KEYS[4]
local envConcurrencyKey = KEYS[5]
local orgConcurrencyKey = KEYS[6]
local visibilityQueue = KEYS[7]

-- Args: childQueueName, messageId, currentTime, messageScore
local childQueueName = ARGV[1]
local messageId = ARGV[2]
local currentTime = tonumber(ARGV[3])
local messageScore = tonumber(ARGV[4])

-- Update the concurrency keys
redis.call('SREM', concurrencyKey, messageId)
redis.call('SREM', envConcurrencyKey, messageId)
redis.call('SREM', orgConcurrencyKey, messageId)

-- Check to see if the message is still in the visibilityQueue
local messageVisibility = tonumber(redis.call('ZSCORE', visibilityQueue, messageId)) or 0

if messageVisibility > 0 then
-- Remove the message from the timeout queue (deprecated, will eventually remove this)
    redis.call('ZREM', visibilityQueue, messageId)
end

-- Enqueue the message into the queue
redis.call('ZADD', childQueueKey, messageScore, messageId)

-- Rebalance the parent queue
local earliestMessage = redis.call('ZRANGE', childQueueKey, 0, 0, 'WITHSCORES')
if #earliestMessage == 0 then
    redis.call('ZREM', parentQueueKey, childQueueName)
else
    redis.call('ZADD', parentQueueKey, earliestMessage[2], childQueueName)
end
`
    }), this.redis.defineCommand("heartbeatMessage", {
      numberOfKeys: 1,
      lua: `
-- Keys: visibilityQueue
local visibilityQueue = KEYS[1]

-- Args: messageId, milliseconds, maxVisibilityTimeout
local messageId = ARGV[1]
local milliseconds = tonumber(ARGV[2])
local maxVisibilityTimeout = tonumber(ARGV[3])

-- Get the current visibility timeout
local zscoreResult = redis.call('ZSCORE', visibilityQueue, messageId)

-- If there's no currentVisibilityTimeout, return and do not execute ZADD
if zscoreResult == false then
    return
end

local currentVisibilityTimeout = tonumber(zscoreResult)


-- Calculate the new visibility timeout
local newVisibilityTimeout = math.min(currentVisibilityTimeout + milliseconds * 1000, maxVisibilityTimeout)

-- Update the visibility timeout
redis.call('ZADD', visibilityQueue, newVisibilityTimeout, messageId)
      `
    }), this.redis.defineCommand("calculateMessageQueueCapacitiesWithDisabling", {
      numberOfKeys: 7,
      lua: `
-- Keys: currentConcurrencyKey, currentEnvConcurrencyKey, currentOrgConcurrencyKey, concurrencyLimitKey, envConcurrencyLimitKey, orgConcurrencyLimitKey, disabledConcurrencyLimitKey
local currentConcurrencyKey = KEYS[1]
local currentEnvConcurrencyKey = KEYS[2]
local currentOrgConcurrencyKey = KEYS[3]
local concurrencyLimitKey = KEYS[4]
local envConcurrencyLimitKey = KEYS[5]
local orgConcurrencyLimitKey = KEYS[6]
local disabledConcurrencyLimitKey = KEYS[7]

-- Args defaultEnvConcurrencyLimit, defaultOrgConcurrencyLimit
local defaultEnvConcurrencyLimit = tonumber(ARGV[1])
local defaultOrgConcurrencyLimit = tonumber(ARGV[2])

local currentOrgConcurrency = tonumber(redis.call('SCARD', currentOrgConcurrencyKey) or '0')

-- Check if disabledConcurrencyLimitKey exists
local orgConcurrencyLimit
if redis.call('EXISTS', disabledConcurrencyLimitKey) == 1 then
  orgConcurrencyLimit = 0
else
  orgConcurrencyLimit = tonumber(redis.call('GET', orgConcurrencyLimitKey) or defaultOrgConcurrencyLimit)
end

local currentEnvConcurrency = tonumber(redis.call('SCARD', currentEnvConcurrencyKey) or '0')
local envConcurrencyLimit = tonumber(redis.call('GET', envConcurrencyLimitKey) or defaultEnvConcurrencyLimit)

local currentConcurrency = tonumber(redis.call('SCARD', currentConcurrencyKey) or '0')
local concurrencyLimit = redis.call('GET', concurrencyLimitKey)

-- Return current capacity and concurrency limits for the queue, env, org
return { currentConcurrency, concurrencyLimit, currentEnvConcurrency, envConcurrencyLimit, currentOrgConcurrency, orgConcurrencyLimit } 
      `
    }), this.redis.defineCommand("calculateMessageQueueCapacities", {
      numberOfKeys: 6,
      lua: `
-- Keys: currentConcurrencyKey, currentEnvConcurrencyKey, currentOrgConcurrencyKey, concurrencyLimitKey, envConcurrencyLimitKey, orgConcurrencyLimitKey
local currentConcurrencyKey = KEYS[1]
local currentEnvConcurrencyKey = KEYS[2]
local currentOrgConcurrencyKey = KEYS[3]
local concurrencyLimitKey = KEYS[4]
local envConcurrencyLimitKey = KEYS[5]
local orgConcurrencyLimitKey = KEYS[6]

-- Args defaultEnvConcurrencyLimit, defaultOrgConcurrencyLimit
local defaultEnvConcurrencyLimit = tonumber(ARGV[1])
local defaultOrgConcurrencyLimit = tonumber(ARGV[2])

local currentOrgConcurrency = tonumber(redis.call('SCARD', currentOrgConcurrencyKey) or '0')
local orgConcurrencyLimit = tonumber(redis.call('GET', orgConcurrencyLimitKey) or defaultOrgConcurrencyLimit)

local currentEnvConcurrency = tonumber(redis.call('SCARD', currentEnvConcurrencyKey) or '0')
local envConcurrencyLimit = tonumber(redis.call('GET', envConcurrencyLimitKey) or defaultEnvConcurrencyLimit)

local currentConcurrency = tonumber(redis.call('SCARD', currentConcurrencyKey) or '0')
local concurrencyLimit = redis.call('GET', concurrencyLimitKey)

-- Return current capacity and concurrency limits for the queue, env, org
return { currentConcurrency, concurrencyLimit, currentEnvConcurrency, envConcurrencyLimit, currentOrgConcurrency, orgConcurrencyLimit } 
      `
    }), this.redis.defineCommand("updateGlobalConcurrencyLimits", {
      numberOfKeys: 2,
      lua: `
-- Keys: envConcurrencyLimitKey, orgConcurrencyLimitKey
local envConcurrencyLimitKey = KEYS[1]
local orgConcurrencyLimitKey = KEYS[2]

-- Args: envConcurrencyLimit, orgConcurrencyLimit
local envConcurrencyLimit = ARGV[1]
local orgConcurrencyLimit = ARGV[2]

redis.call('SET', envConcurrencyLimitKey, envConcurrencyLimit)
redis.call('SET', orgConcurrencyLimitKey, orgConcurrencyLimit)
      `
    }), this.redis.defineCommand("rebalanceParentQueueChild", {
      numberOfKeys: 2,
      lua: `
-- Keys: childQueueKey, parentQueueKey
local childQueueKey = KEYS[1]
local parentQueueKey = KEYS[2]

-- Args: childQueueName, currentScore
local childQueueName = ARGV[1]
local currentScore = ARGV[2]

-- Rebalance the parent queue
local earliestMessage = redis.call('ZRANGE', childQueueKey, 0, 0, 'WITHSCORES')
if #earliestMessage == 0 then
    redis.call('ZREM', parentQueueKey, childQueueName)

    -- Return true because the parent queue was rebalanced
    return true
else
    -- If the earliest message is different, update the parent queue and return true, else return false
    if earliestMessage[2] == currentScore then
        return false
    end

    redis.call('ZADD', parentQueueKey, earliestMessage[2], childQueueName)

    return earliestMessage[2]
end
`
    });
  }
}, marqs = singleton("marqs", getMarQSClient);
function getMarQSClient() {
  if (env2.V3_ENABLED)
    if (env2.REDIS_HOST && env2.REDIS_PORT) {
      let redisOptions = {
        keyPrefix: KEY_PREFIX,
        port: env2.REDIS_PORT,
        host: env2.REDIS_HOST,
        username: env2.REDIS_USERNAME,
        password: env2.REDIS_PASSWORD,
        enableAutoPipelining: !0,
        ...env2.REDIS_TLS_DISABLED === "true" ? {} : { tls: {} }
      };
      return new MarQS({
        name: "marqs",
        tracer: import_api8.trace.getTracer("marqs"),
        keysProducer: new MarQSShortKeyProducer(KEY_PREFIX),
        visibilityTimeoutStrategy: new V3VisibilityTimeout(),
        queuePriorityStrategy: new SimpleWeightedChoiceStrategy({ queueSelectionCount: 36 }),
        envQueuePriorityStrategy: new SimpleWeightedChoiceStrategy({ queueSelectionCount: 12 }),
        workers: 1,
        redis: redisOptions,
        defaultEnvConcurrency: env2.DEFAULT_ENV_EXECUTION_CONCURRENCY_LIMIT,
        defaultOrgConcurrency: env2.DEFAULT_ORG_EXECUTION_CONCURRENCY_LIMIT,
        visibilityTimeoutInMs: 120 * 1e3,
        // 2 minutes,
        enableRebalancing: !env2.MARQS_DISABLE_REBALANCING
      });
    } else
      console.warn(
        "Could not initialize MarQS because process.env.REDIS_HOST and process.env.REDIS_PORT are required to be set. Trigger.dev v3 will not work without this."
      );
}
function sanitizeQueueName(queueName) {
  return queueName.replace(/[^a-zA-Z0-9_\-\/]/g, "").substring(0, 128);
}

// app/v3/marqs/v2.server.ts
var import_api10 = require("@opentelemetry/api");
var import_zod42 = require("zod");

// app/services/runs/performRunExecutionV3.server.ts
var import_zod_error = require("zod-error");

// app/api.server.ts
function eventRecordToApiJson(eventRecord) {
  return {
    id: eventRecord.eventId,
    name: eventRecord.name,
    payload: eventRecord.payload,
    context: eventRecord.context,
    timestamp: eventRecord.timestamp,
    deliverAt: eventRecord.deliverAt,
    deliveredAt: eventRecord.deliveredAt,
    cancelledAt: eventRecord.cancelledAt
  };
}

// app/consts.ts
var CURRENT_DEPLOYMENT_LABEL = "current";
var VERCEL_RESPONSE_TIMEOUT_STATUS_CODES = [408, 504], MAX_BATCH_TRIGGER_ITEMS = 100, MAX_TASK_RUN_ATTEMPTS = 250, BULK_ACTION_RUN_LIMIT = 250, MAX_JOB_RUN_EXECUTION_COUNT = 250;

// app/models/endpoint.server.ts
async function findEndpoint(id) {
  return await prisma.endpoint.findUniqueOrThrow({
    where: {
      id
    },
    include: {
      environment: {
        include: {
          project: !0,
          organization: !0
        }
      }
    }
  });
}
function detectResponseIsTimeout(rawBody, response) {
  return response ? isResponseVercelTimeout(response) || isResponseCloudfrontTimeout(response) || isResponseDenoDeployTimeout(rawBody, response) || isResponseCloudflareTimeout(rawBody, response) : !1;
}
function isResponseCloudflareTimeout(rawBody, response) {
  return response.status === 503 && rawBody.includes("Worker exceeded resource limits") && typeof response.headers.get("cf-ray") == "string";
}
function isResponseVercelTimeout(response) {
  return VERCEL_RESPONSE_TIMEOUT_STATUS_CODES.includes(response.status) || response.headers.get("x-vercel-error") === "FUNCTION_INVOCATION_TIMEOUT";
}
function isResponseDenoDeployTimeout(rawBody, response) {
  return response.status === 502 && rawBody.includes("TIME_LIMIT");
}
function isResponseCloudfrontTimeout(response) {
  return response.status === 504 && typeof response.headers.get("x-amz-cf-id") == "string";
}

// app/models/jobRun.server.ts
var COMPLETED_STATUSES = [
  "CANCELED",
  "ABORTED",
  "SUCCESS",
  "TIMED_OUT",
  "INVALID_PAYLOAD",
  "FAILURE",
  "UNRESOLVED_AUTH"
];
function isRunCompleted(status) {
  return COMPLETED_STATUSES.includes(status);
}
function runBasicStatus(status) {
  switch (status) {
    case "WAITING_ON_CONNECTIONS":
    case "QUEUED":
    case "PREPROCESSING":
    case "PENDING":
      return "PENDING";
    case "STARTED":
    case "EXECUTING":
    case "WAITING_TO_CONTINUE":
    case "WAITING_TO_EXECUTE":
      return "RUNNING";
    case "FAILURE":
    case "TIMED_OUT":
    case "UNRESOLVED_AUTH":
    case "CANCELED":
    case "ABORTED":
    case "INVALID_PAYLOAD":
      return "FAILED";
    case "SUCCESS":
      return "COMPLETED";
    default: {
      let _exhaustiveCheck = status;
      throw new Error(`Non-exhaustive match for value: ${status}`);
    }
  }
}
function runOriginalStatus(status) {
  switch (status) {
    case "EXECUTING":
    case "WAITING_TO_CONTINUE":
    case "WAITING_TO_EXECUTE":
      return "STARTED";
    default:
      return status;
  }
}

// app/services/externalApis/integrationAuthRepository.server.ts
var import_jsonpointer2 = __toESM(require("jsonpointer")), crypto2 = __toESM(require("node:crypto"));

// app/services/secrets/secretStore.server.ts
var import_zod39 = require("zod");
var import_node_crypto2 = __toESM(require("node:crypto"));
var SecretStore = class {
  constructor(provider) {
    this.provider = provider;
  }
  getSecret(schema18, key) {
    return this.provider.getSecret(schema18, key);
  }
  async getSecretOrThrow(schema18, key) {
    let value = await this.getSecret(schema18, key);
    if (!value)
      throw new Error(`Unable to find secret ${key} in ${this.provider}`);
    return value;
  }
  setSecret(key, value) {
    return this.provider.setSecret(key, value);
  }
  getSecrets(schema18, keyPrefix) {
    return this.provider.getSecrets(schema18, keyPrefix);
  }
  deleteSecret(key) {
    return this.provider.deleteSecret(key);
  }
}, EncryptedSecretValueSchema = import_zod39.z.object({
  nonce: import_zod39.z.string(),
  ciphertext: import_zod39.z.string(),
  tag: import_zod39.z.string()
}), PrismaSecretStore = class {
  constructor(encryptionKey, options2) {
    this.encryptionKey = encryptionKey;
    this.options = options2;
    this.#prismaClient = options2?.prismaClient ?? prisma;
  }
  #prismaClient;
  async getSecret(schema18, key) {
    let secret2 = await this.#prismaClient.secretStore.findUnique({
      where: {
        key
      }
    });
    if (!secret2)
      return;
    if (secret2.version === "1")
      return schema18.parse(secret2.value);
    let encryptedData = EncryptedSecretValueSchema.safeParse(secret2.value);
    if (!encryptedData.success)
      throw new Error(`Unable to parse encrypted secret ${key}: ${encryptedData.error.message}`);
    let decrypted = await this.#decrypt(
      encryptedData.data.nonce,
      encryptedData.data.ciphertext,
      encryptedData.data.tag
    ), parsedDecrypted = safeJsonParse3(decrypted);
    if (parsedDecrypted)
      return schema18.parse(parsedDecrypted);
  }
  async getSecrets(schema18, keyPrefix) {
    let secrets = await this.#prismaClient.secretStore.findMany({
      where: {
        key: {
          startsWith: keyPrefix
        }
      }
    }), results = [];
    for (let secret2 of secrets) {
      secret2.version === "1" && results.push({ key: secret2.key, value: schema18.parse(secret2.value) });
      let encryptedData = EncryptedSecretValueSchema.safeParse(secret2.value);
      if (!encryptedData.success)
        throw new Error(
          `Unable to parse encrypted secret ${secret2.key}: ${encryptedData.error.message}`
        );
      let decrypted = await this.#decrypt(
        encryptedData.data.nonce,
        encryptedData.data.ciphertext,
        encryptedData.data.tag
      ), parsedDecrypted = safeJsonParse3(decrypted);
      if (!parsedDecrypted) {
        logger.error(`Secret isn't JSON ${secret2.key}`);
        continue;
      }
      results.push({ key: secret2.key, value: schema18.parse(parsedDecrypted) });
    }
    return results;
  }
  async setSecret(key, value) {
    let encrypted = await this.#encrypt(JSON.stringify(value));
    await this.#prismaClient.secretStore.upsert({
      create: {
        key,
        value: encrypted,
        version: "2"
      },
      update: {
        value: encrypted,
        version: "2"
      },
      where: {
        key
      }
    });
  }
  async deleteSecret(key) {
    await this.#prismaClient.secretStore.delete({
      where: {
        key
      }
    });
  }
  async #decrypt(nonce, ciphertext, tag) {
    return await decryptSecret(this.encryptionKey, {
      nonce,
      ciphertext,
      tag
    });
  }
  async #encrypt(value) {
    return await encryptSecret(this.encryptionKey, value);
  }
};
function getSecretStore(provider, options2) {
  switch (provider) {
    case "DATABASE":
      return new SecretStore(
        new PrismaSecretStore(
          env2.ENCRYPTION_KEY,
          options2
        )
      );
    default:
      throw new Error(`Unsupported secret store option ${provider}`);
  }
}
async function decryptSecret(encryptionKey, secret2) {
  let decipher = import_node_crypto2.default.createDecipheriv(
    "aes-256-gcm",
    encryptionKey,
    Buffer.from(secret2.nonce, "hex")
  );
  decipher.setAuthTag(Buffer.from(secret2.tag, "hex"));
  let decrypted = decipher.update(secret2.ciphertext, "hex", "utf8");
  return decrypted += decipher.final("utf8"), decrypted;
}
async function encryptSecret(encryptionKey, value) {
  let nonce = import_node_crypto2.default.randomBytes(12), cipher = import_node_crypto2.default.createCipheriv("aes-256-gcm", encryptionKey, nonce), encrypted = cipher.update(value, "utf8", "hex");
  encrypted += cipher.final("hex");
  let tag = cipher.getAuthTag().toString("hex");
  return {
    nonce: nonce.toString("hex"),
    ciphertext: encrypted,
    tag
  };
}

// app/services/externalApis/integrations/airtable.ts
function usageSample(hasApiKey) {
  return {
    title: "Using the client",
    code: `
import { Airtable } from "@trigger.dev/airtable";

const airtable = new Airtable({
  id: "__SLUG__"${hasApiKey ? `,
  token: process.env.AIRTABLE_TOKEN!` : ""}
});

//you can define your Airtable table types
type LaunchGoalsAndOkRs = {
  "Launch goals"?: string;
  DRI?: Collaborator;
  Team?: string;
  Status?: "On track" | "In progress" | "At risk";
  "Key results"?: Array<string>;
  "Features (from \u{1F4BB} Features table)"?: Array<string>;
  "Status (from \u{1F4BB} Features)": Array<"Live" | "Complete" | "In progress" | "Planning" | "In reviews">;
};

client.defineJob({
  id: "airtable-example-1",
  name: "Airtable Example 1: getRecords",
  version: "0.1.0",
  trigger: eventTrigger({
    name: "airtable.example",
    schema: z.object({
      baseId: z.string(),
      tableName: z.string(),
    }),
  }),
  integrations: {
    airtable,
  },
  run: async (payload, io, ctx) => {
    //then you can set the types for your table, so you get type safety
    const table = io.airtable.base(payload.baseId).table<LaunchGoalsAndOkRs>(payload.tableName);

    const records = await table.getRecords("muliple records", { fields: ["Status"] });
    //this will be type checked
    await io.logger.log(records[0].fields.Status ?? "no status");
  },
});
  `
  };
}
var airtable = {
  identifier: "airtable",
  name: "Airtable",
  packageName: "@trigger.dev/airtable",
  authenticationMethods: {
    oauth2: {
      name: "OAuth2",
      type: "oauth2",
      client: {
        id: {
          envName: "CLOUD_AIRTABLE_CLIENT_ID"
        },
        secret: {
          envName: "CLOUD_AIRTABLE_CLIENT_SECRET"
        }
      },
      config: {
        authorization: {
          url: "https://airtable.com/oauth2/v1/authorize",
          scopeSeparator: " ",
          authorizationLocation: "header",
          extraParameters: {
            response_type: "code"
          }
        },
        token: {
          url: "https://airtable.com/oauth2/v1/token",
          metadata: {}
        },
        refresh: {
          url: "https://airtable.com/oauth2/v1/token"
        }
      },
      scopes: [
        {
          name: "data.records:read",
          description: "See the data in records",
          defaultChecked: !0
        },
        {
          name: "data.records:write",
          description: "Create, edit, and delete records",
          defaultChecked: !0
        },
        {
          name: "data.recordComments:read",
          description: "See comments in records",
          defaultChecked: !0
        },
        {
          name: "data.recordComments:write",
          description: "Create, edit, and delete record comments",
          defaultChecked: !0
        },
        {
          name: "schema.bases:read",
          description: "See the structure of a base, like table names or field types"
        },
        {
          name: "schema.bases:write",
          description: "Edit the structure of a base, like adding new fields or tables"
        },
        {
          name: "webhook:manage",
          description: "View, create, delete webhooks for a base, as well as fetch webhook payloads.",
          defaultChecked: !0
        }
      ],
      help: {
        samples: [usageSample(!1)]
      }
    },
    apiKey: {
      type: "apikey",
      help: {
        samples: [usageSample(!0)]
      }
    }
  }
};

// app/services/externalApis/integrations/github.ts
var repoAnnotation = {
  label: "Repo"
}, webhookAnnotation = {
  label: "Webhooks"
}, orgAnnotation = {
  label: "Orgs"
}, keysAnnotation = {
  label: "Keys"
}, userAnnotation = {
  label: "User"
}, usageSample2 = {
  title: "Using the client",
  code: `
import { Github, events } from "@trigger.dev/github";

const github = new Github({
  id: "__SLUG__",
  token: process.env.GITHUB_TOKEN!,
});

client.defineJob({
  id: "github-integration-on-issue-opened",
  name: "GitHub Integration - On Issue Opened",
  version: "0.1.0",
  integrations: { github },
  trigger: github.triggers.repo({
    event: events.onIssueOpened,
    owner: "triggerdotdev",
    repo: "empty",
  }),
  run: async (payload, io, ctx) => {
    await io.github.addIssueAssignees("add assignee", {
      owner: payload.repository.owner.login,
      repo: payload.repository.name,
      issueNumber: payload.issue.number,
      assignees: ["matt-aitken"],
    });

    await io.github.addIssueLabels("add label", {
      owner: payload.repository.owner.login,
      repo: payload.repository.name,
      issueNumber: payload.issue.number,
      labels: ["bug"],
    });

    return { payload, ctx };
  },
});
  
  `
}, github = {
  identifier: "github",
  name: "GitHub",
  packageName: "@trigger.dev/github@latest",
  authenticationMethods: {
    oauth2: {
      name: "OAuth",
      type: "oauth2",
      client: {
        id: {
          envName: "CLOUD_GITHUB_CLIENT_ID"
        },
        secret: {
          envName: "CLOUD_GITHUB_CLIENT_SECRET"
        }
      },
      config: {
        authorization: {
          url: "https://github.com/login/oauth/authorize",
          scopeSeparator: " "
        },
        token: {
          url: "https://github.com/login/oauth/access_token",
          metadata: {
            accountPointer: "/team/name"
          }
        },
        refresh: {
          url: "https://github.com/login/oauth/authorize"
        }
      },
      scopes: [
        {
          name: "repo",
          description: "Grants full access to public and private repositories including read and write access to code, commit statuses, repository invitations, collaborators, deployment statuses, and repository webhooks. Note: In addition to repository related resources, the repo scope also grants access to manage organization-owned resources including projects, invitations, team memberships and webhooks. This scope also grants the ability to manage projects owned by users.",
          annotations: [repoAnnotation]
        },
        {
          name: "repo:status",
          description: "Grants read/write access to commit statuses in public and private repositories. This scope is only necessary to grant other users or services access to private repository commit statuses without granting access to the code.",
          annotations: [repoAnnotation]
        },
        {
          name: "repo_deployment",
          description: "Grants access to deployment statuses for public and private repositories. This scope is only necessary to grant other users or services access to deployment statuses, without granting access to the code.",
          annotations: [repoAnnotation]
        },
        {
          name: "public_repo",
          description: "Limits access to public repositories. That includes read/write access to code, commit statuses, repository projects, collaborators, and deployment statuses for public repositories and organizations. Also required for starring public repositories.",
          annotations: [repoAnnotation]
        },
        {
          name: "repo:invite",
          description: "Grants accept/decline abilities for invitations to collaborate on a repository. This scope is only necessary to grant other users or services access to invites without granting access to the code.",
          annotations: [repoAnnotation]
        },
        {
          name: "delete_repo",
          description: "Grants access to delete adminable repositories.",
          annotations: [repoAnnotation]
        },
        {
          name: "security_events",
          description: "Grants read and write access to security events in the code scanning API. This scope is only necessary to grant other users or services access to security events without granting access to the code."
        },
        {
          name: "admin:repo_hook",
          description: "Grants read, write, ping, and delete access to repository hooks in public or private repositories. The repo and public_repo scopes grant full access to repositories, including repository hooks. Use the admin:repo_hook scope to limit access to only repository hooks.",
          defaultChecked: !0,
          annotations: [webhookAnnotation]
        },
        {
          name: "write:repo_hook",
          description: "Grants read, write, and ping access to hooks in public or private repositories.",
          annotations: [webhookAnnotation]
        },
        {
          name: "read:repo_hook",
          description: "Grants read and ping access to hooks in public or private repositories.",
          annotations: [webhookAnnotation]
        },
        {
          name: "admin:org",
          description: "Fully manage the organization and its teams, projects, and memberships.",
          annotations: [orgAnnotation]
        },
        {
          name: "write:org",
          description: "Read and write access to organization membership, organization projects, and team membership.",
          annotations: [orgAnnotation]
        },
        {
          name: "read:org",
          description: "Read-only access to organization membership, organization projects, and team membership.",
          annotations: [orgAnnotation]
        },
        {
          name: "admin:public_key",
          description: "Fully manage public keys.",
          annotations: [keysAnnotation]
        },
        {
          name: "write:public_key",
          description: "Create, list, and view details for public keys.",
          annotations: [keysAnnotation]
        },
        {
          name: "read:public_key",
          description: "List and view details for public keys.",
          annotations: [keysAnnotation]
        },
        {
          name: "admin:org_hook",
          description: "Grants read, write, ping, and delete access to organization hooks. Note: OAuth tokens will only be able to perform these actions on organization hooks which were created by the OAuth App. Personal access tokens will only be able to perform these actions on organization hooks created by a user.",
          annotations: [orgAnnotation, webhookAnnotation]
        },
        {
          name: "gist",
          description: "Grants write access to gists."
        },
        {
          name: "notifications",
          description: "Grants read access to a user's notifications, mark as read access to threads, watch and unwatch access to a repository, and read, write, and delete access to thread subscriptions."
        },
        {
          name: "user",
          description: "	Grants read/write access to profile info only. Note that this scope includes user:email and user:follow.",
          annotations: [userAnnotation]
        },
        {
          name: "read:user",
          description: "Grants read access to a user's profile data.",
          annotations: [userAnnotation]
        },
        {
          name: "user:email",
          description: "Grants read access to a user's email addresses.",
          annotations: [userAnnotation]
        },
        {
          name: "user:follow",
          description: "Grants access to follow or unfollow other users.",
          annotations: [userAnnotation]
        },
        {
          name: "project",
          description: "Grants read/write access to user and organization projects."
        },
        {
          name: "read:project",
          description: "Grants read only access to user and organization projects."
        },
        {
          name: "write:discussion",
          description: "Allows read and write access for team discussions."
        },
        {
          name: "read:discussion",
          description: "Allows read access for team discussions."
        },
        {
          name: "write:packages",
          description: "Grants access to upload or publish a package in GitHub Packages."
        },
        {
          name: "read:packages",
          description: "Grants access to download or install packages from GitHub Packages."
        },
        {
          name: "delete:packages",
          description: "Grants access to delete packages from GitHub Packages."
        },
        {
          name: "admin:gpg_key",
          description: "Fully manage GPG keys."
        },
        {
          name: "write:gpg_key",
          description: "Create, list, and view details for GPG keys."
        },
        {
          name: "read:gpg_key",
          description: "List and view details for GPG keys."
        },
        {
          name: "codespace",
          description: "Grants the ability to create and manage codespaces. Codespaces can expose a GITHUB_TOKEN which may have a different set of scopes"
        },
        {
          name: "workflow",
          description: "Grants the ability to add and update GitHub Actions workflow files. Workflow files can be committed without this scope if the same file (with both the same path and contents) exists on another branch in the same repository. Workflow files can expose GITHUB_TOKEN which may have a different set of scopes."
        }
      ],
      help: {
        samples: [
          {
            title: "Creating the client",
            code: `
import { Github } from "@trigger.dev/github";

const github = new Github({
  id: "__SLUG__"
});
`
          },
          usageSample2
        ]
      }
    },
    apikey: {
      type: "apikey",
      help: {
        samples: [
          {
            title: "Creating the client",
            code: `
import { Github } from "@trigger.dev/github";

const github = new Github({
  id: "__SLUG__",
  token: process.env.GITHUB_TOKEN!
});
`
          },
          usageSample2
        ]
      }
    }
  }
};

// app/services/externalApis/integrations/linear.ts
function usageSample3(hasApiKey) {
  return {
    title: "Using the client",
    code: `
import { Linear } from "@trigger.dev/linear";

const linear = new Linear({
  id: "__SLUG__",${hasApiKey ? `
  apiKey: process.env.LINEAR_API_KEY!,` : ""}
});

client.defineJob({
  id: "linear-react-to-new-issue",
  name: "Linear - React To New Issue",
  version: "0.1.0",
  integrations: { linear },
  trigger: linear.onIssueCreated(),
  run: async (payload, io, ctx) => {
    await io.linear.createComment("create-comment", {
      issueId: payload.data.id,
      body: "Thank's for opening this issue!"
    });

    await io.linear.createReaction("create-reaction", {
      issueId: payload.data.id,
      emoji: "+1"
    });

    return { payload, ctx };
  },
});
  `
  };
}
var linear = {
  identifier: "linear",
  name: "Linear",
  packageName: "@trigger.dev/linear@latest",
  authenticationMethods: {
    oauth2: {
      name: "OAuth",
      type: "oauth2",
      client: {
        id: {
          envName: "CLOUD_LINEAR_CLIENT_ID"
        },
        secret: {
          envName: "CLOUD_LINEAR_CLIENT_SECRET"
        }
      },
      config: {
        authorization: {
          url: "https://linear.app/oauth/authorize",
          scopeSeparator: ","
        },
        token: {
          url: "https://api.linear.app/oauth/token",
          metadata: {}
        },
        refresh: {
          url: "https://linear.app/oauth/authorize"
        },
        pkce: !1
      },
      scopes: [
        {
          name: "read",
          description: "Read access for the user's account. This scope must always be present.",
          defaultChecked: !0
        },
        {
          name: "write",
          description: "Grants global write access to the user's account. Use a more targeted scope if you don't need full access.",
          defaultChecked: !0
        },
        {
          name: "issues:create",
          description: "Grants access to create issues and attachments only.",
          annotations: [{ label: "Issues" }]
        },
        {
          name: "comments:create",
          description: "Grants access to create new issue comments.",
          annotations: [{ label: "Comments" }]
        },
        {
          name: "admin",
          description: "Grants full access to admin-level endpoints. Don't use this unless you really need it."
        }
      ],
      help: {
        samples: [usageSample3(!1)]
      }
    },
    apikey: {
      type: "apikey",
      help: {
        samples: [usageSample3(!0)]
      }
    }
  }
};

// app/services/externalApis/integrations/openai.ts
var openai = {
  identifier: "openai",
  name: "OpenAI",
  description: "You can perform very long completions with the integration",
  packageName: "@trigger.dev/openai@latest",
  authenticationMethods: {
    apikey: {
      type: "apikey",
      help: {
        samples: [
          {
            title: "Creating the client",
            code: `
import { OpenAI } from "@trigger.dev/openai";

const openai = new OpenAI({
  id: "__SLUG__",
  apiKey: process.env.OPENAI_API_KEY!,
});
`
          },
          {
            title: "Using the client",
            code: `
client.defineJob({
  id: "openai-tasks",
  name: "OpenAI Tasks",
  version: "0.0.1",
  trigger: eventTrigger({
    name: "openai.tasks",
    schema: z.object({}),
  }),
  integrations: {
    openai,
  },
  run: async (payload, io, ctx) => {
    //this background function can take longer than a serverless timeout
    const response = await io.openai.backgroundCreateChatCompletion(
      "background-chat-completion",
      {
        model: "gpt-3.5-turbo",
        messages: [
          {
            role: "user",
            content: "Create a good programming joke about background jobs",
          },
        ],
      }
    );

    await io.logger.info("choices", response.choices);
  },
});
            `,
            highlight: [
              [10, 10],
              [13, 24]
            ]
          }
        ]
      }
    }
  }
};

// app/services/externalApis/integrations/plain.ts
var plain = {
  identifier: "plain",
  name: "Plain",
  packageName: "@trigger.dev/plain@latest",
  authenticationMethods: {
    apikey: {
      type: "apikey",
      help: {
        samples: [
          {
            title: "Creating the client",
            code: `
import { Plain } from "@trigger.dev/plain";

export const plain = new Plain({
  id: "__SLUG__",
  apiKey: process.env.PLAIN_API_KEY!,
});
`
          },
          {
            title: "Using the client",
            code: `
client.defineJob({
  id: "plain-playground",
  name: "Plain Playground",
  version: "0.1.1",
  integrations: {
    plain,
  },
  trigger: eventTrigger({
    name: "plain.playground",
  }),
  run: async (payload, io, ctx) => {
    const { customer } = await io.plain.upsertCustomer("upsert-customer", {
      identifier: {
        emailAddress: "rick.astley@gmail.com",
      },
      onCreate: {
        email: {
          email: "rick.astley@gmail.com",
          isVerified: true,
        },
        fullName: "Rick Astley",
        externalId: "u_123",
      },
      onUpdate: {
        fullName: {
          value: "Rick Astley",
        },
        externalId: {
          value: "u_123",
        },
      },
    });

    const foundCustomer = await io.plain.getCustomerById("get-customer", {
      customerId: customer.id,
    });

    const timelineEntry = await io.plain.upsertCustomTimelineEntry(
      "upsert-timeline-entry",
      {
        customerId: customer.id,
        title: "My timeline entry",
        components: [
          {
            componentText: {
              text: \`This is a nice title\`,
            },
          },
          {
            componentDivider: {
              dividerSpacingSize: ComponentDividerSpacingSize.M,
            },
          },
          {
            componentText: {
              textSize: ComponentTextSize.S,
              textColor: ComponentTextColor.Muted,
              text: "External id",
            },
          },
          {
            componentText: {
              text: foundCustomer?.externalId ?? "",
            },
          },
        ],
      }
    );
  },
});
            `,
            highlight: [[12, 68]]
          }
        ]
      }
    }
  }
};

// app/services/externalApis/integrations/replicate.ts
function usageSample4(hasApiKey) {
  return {
    title: "Using the client",
    code: `
import { Replicate } from "@trigger.dev/replicate";

const replicate = new Replicate({
  id: "__SLUG__",${hasApiKey ? `
  apiKey: process.env.REPLICATE_API_KEY!,` : ""}
});

client.defineJob({
  id: "replicate-create-prediction",
  name: "Replicate - Create Prediction",
  version: "0.1.0",
  integrations: { replicate },
  trigger: eventTrigger({
    name: "replicate.predict",
    schema: z.object({
      prompt: z.string(),
      version: z.string(),
    }),
  }),
  run: async (payload, io, ctx) => {
    return io.replicate.predictions.createAndAwait("await-prediction", {
      version: payload.version,
      input: { prompt: payload.prompt },
    });
  },
});
  `
  };
}
var replicate = {
  identifier: "replicate",
  name: "Replicate",
  packageName: "@trigger.dev/replicate@latest",
  authenticationMethods: {
    apikey: {
      type: "apikey",
      help: {
        samples: [usageSample4(!0)]
      }
    }
  }
};

// app/services/externalApis/integrations/resend.ts
var resend = {
  identifier: "resend",
  name: "Resend",
  packageName: "@trigger.dev/resend@latest",
  authenticationMethods: {
    apikey: {
      type: "apikey",
      help: {
        samples: [
          {
            title: "Creating the client",
            code: `
import { Resend } from "@trigger.dev/resend";

const resend = new Resend({
  id: "__SLUG__",
  apiKey: process.env.RESEND_API_KEY!,
});
`
          },
          {
            title: "Using the client",
            code: `
client.defineJob({
  id: "send-resend-email",
  name: "Send Resend Email",
  version: "0.1.0",
  trigger: eventTrigger({
    name: "send.email",
    schema: z.object({
      to: z.union([z.string(), z.array(z.string())]),
      subject: z.string(),
      text: z.string(),
    }),
  }),
  integrations: {
    resend,
  },
  run: async (payload, io, ctx) => {
    await io.resend.sendEmail("send-email", {
      to: payload.to,
      subject: payload.subject,
      text: payload.text,
      from: "Trigger.dev <hello@email.trigger.dev>",
    });
  },
});
            `,
            highlight: [
              [13, 15],
              [17, 22]
            ]
          }
        ]
      }
    }
  }
};

// app/services/externalApis/integrations/sendgrid.ts
var sendgrid = {
  identifier: "sendgrid",
  name: "SendGrid",
  packageName: "@trigger.dev/sendgrid@latest",
  authenticationMethods: {
    apikey: {
      type: "apikey",
      help: {
        samples: [
          {
            title: "Creating the client",
            code: `
import { SendGrid } from "@trigger.dev/sendgrid";

const sendgrid = new SendGrid({
  id: "__SLUG__",
  apiKey: process.env.SENDGRID_API_KEY!,
});
`
          },
          {
            title: "Using the client",
            code: `
client.defineJob({
  id: "send-sendgrid-email",
  name: "Send SendGrid Email",
  version: "0.1.0",
  trigger: eventTrigger({
    name: "send.email",
    schema: z.object({
      to: z.string(),
      subject: z.string(),
      text: z.string(),
    }),
  }),
  integrations: {
    sendgrid,
  },
  run: async (payload, io, ctx) => {
    await io.sendgrid.sendEmail({
      to: payload.to,
      from: "Trigger.dev <hello@email.trigger.dev>",
      subject: payload.subject,
      text: payload.text,
    });
  },
});
            `,
            highlight: [
              [13, 15],
              [17, 22]
            ]
          }
        ]
      }
    }
  }
};

// app/services/externalApis/integrations/shopify.ts
function usageSample5(hasApiKey) {
  return {
    title: "Using the client",
    code: `
import { Shopify } from "@trigger.dev/shopify";

const shopify = new Shopify({
  id: "__SLUG__",${hasApiKey ? `
  apiKey: process.env.SHOPIFY_API_KEY!,` : ""}
  apiSecretKey: process.env.SHOPIFY_API_SECRET_KEY!,
  adminAccessToken: process.env.SHOPIFY_ADMIN_ACCESS_TOKEN!,
  hostName: process.env.SHOPIFY_SHOP_DOMAIN!,
});

client.defineJob({
  id: "shopify-create-product",
  name: "Shopify: Create Product",
  version: "0.1.0",
  integrations: { shopify },
  trigger: eventTrigger({
    name: "shopify.product.create",
    schema: z.object({
      title: z.string(),
    }),
  }),
  run: async (payload, io, ctx) => {
    const product = await io.shopify.rest.Product.save("create-product", {
      fromData: {
        title: payload.title,
      },
    });

    await io.logger.info(\`Created product \${product.id}: \${product.title}\`);
  },
});
  `
  };
}
var shopify = {
  identifier: "shopify",
  name: "Shopify",
  packageName: "@trigger.dev/shopify@latest",
  authenticationMethods: {
    apikey: {
      type: "apikey",
      help: {
        samples: [usageSample5(!0)]
      }
    }
  }
};

// app/services/externalApis/integrations/slack.ts
var help = {
  samples: [
    {
      title: "Creating the client",
      code: `
import { Slack } from "@trigger.dev/slack";

const slack = new Slack({
  id: "__SLUG__",
});
`
    },
    {
      title: "Using the client",
      code: `
client.defineJob({
  id: "slack-test",
  name: "Slack test",
  version: "0.0.1",
  trigger: eventTrigger({
    name: "slack.test",
    schema: z.object({}),
  }),
  integrations: {
    slack,
  },
  run: async (payload, io, ctx) => {
    const response = await io.slack.postMessage("post message", {
      channel: "C04GWUTDC3W",
      text: "My first Slack message",
    });
  },
});
      `,
      highlight: [
        [9, 11],
        [13, 16]
      ]
    }
  ]
}, slack = {
  identifier: "slack",
  name: "Slack",
  packageName: "@trigger.dev/slack@latest",
  authenticationMethods: {
    oauth2Bot: {
      name: "OAuth2 (Bot)",
      description: "Authenticate as a bot. This is the recommended method.",
      type: "oauth2",
      client: {
        id: {
          envName: "CLOUD_SLACK_CLIENT_ID"
        },
        secret: {
          envName: "CLOUD_SLACK_CLIENT_SECRET"
        }
      },
      config: {
        authorization: {
          url: "https://slack.com/oauth/v2/authorize",
          scopeSeparator: ","
        },
        token: {
          url: "https://slack.com/api/oauth.v2.access",
          metadata: {
            accountPointer: "/team/name"
          }
        },
        refresh: {
          url: "https://slack.com/api/oauth.v2.access"
        },
        appHostEnvName: "CLOUD_SLACK_APP_HOST"
      },
      scopes: [
        {
          name: "app_mentions:read",
          description: "View messages that directly mention @your_slack_app in conversations that the app is in"
        },
        {
          name: "bookmarks:read",
          description: "List bookmarks"
        },
        {
          name: "bookmarks:write",
          description: "Create, edit, and remove bookmarks"
        },
        {
          name: "calls:read",
          description: "View information about ongoing and past calls"
        },
        {
          name: "calls:write",
          description: "Start and manage calls in a workspace"
        },
        {
          name: "channels:history",
          description: "View messages and other content in public channels that your slack app has been added to"
        },
        {
          name: "channels:join",
          description: "Join public channels in a workspace",
          defaultChecked: !0
        },
        {
          name: "channels:manage",
          description: "Manage public channels that your slack app has been added to and create new ones"
        },
        {
          name: "channels:read",
          description: "View basic information about public channels in a workspace"
        },
        {
          name: "channels:write",
          description: "Manage a user\u2019s public channels and create new ones on a user\u2019s behalf"
        },
        {
          name: "channels:write.invites",
          description: "Invite members to public channels"
        },
        {
          name: "channels:write.topic",
          description: "Set the description of public channels"
        },
        {
          name: "chat:write",
          description: "Post messages in approved channels & conversations",
          defaultChecked: !0
        },
        {
          name: "chat:write.customize",
          description: "Send messages as @your_slack_app with a customized username and avatar",
          defaultChecked: !0
        },
        {
          name: "chat:write.public",
          description: "Send messages to channels @your_slack_app isn't a member of",
          defaultChecked: !0
        },
        {
          name: "commands",
          description: "Add shortcuts and/or slash commands that people can use"
        },
        {
          name: "conversations.connect:manage",
          description: "Allows your slack app to manage Slack Connect channels"
        },
        {
          name: "conversations.connect:read",
          description: "Receive Slack Connect invite events sent to the channels your slack app is in"
        },
        {
          name: "conversations.connect:write",
          description: "Create Slack Connect invitations for channels that your slack app has been added to, and accept invitations sent to your slack app"
        },
        {
          name: "dnd:read",
          description: "View Do Not Disturb settings for people in a workspace"
        },
        {
          name: "emoji:read",
          description: "View custom emoji in a workspace"
        },
        {
          name: "files:read",
          description: "View files shared in channels and conversations that your slack app has been added to"
        },
        {
          name: "files:write",
          description: "Upload, edit, and delete files as your slack app"
        },
        {
          name: "groups:history",
          description: "View messages and other content in private channels that your slack app has been added to"
        },
        {
          name: "groups:read",
          description: "View basic information about private channels that your slack app has been added to"
        },
        {
          name: "groups:write",
          description: "Manage private channels that your slack app has been added to and create new ones"
        },
        {
          name: "groups:write.invites",
          description: "Invite members to private channels"
        },
        {
          name: "groups:write.topic",
          description: "Set the description of private channels"
        },
        {
          name: "im:history",
          description: "View messages and other content in direct messages that your slack app has been added to"
        },
        {
          name: "im:read",
          description: "View basic information about direct messages that your slack app has been added to"
        },
        {
          name: "im:write",
          description: "Start direct messages with people"
        },
        {
          name: "incoming-webhook",
          description: "Create one-way webhooks to post messages to a specific channel"
        },
        {
          name: "links.embed:write",
          description: "Embed video player URLs in messages and app surfaces"
        },
        {
          name: "links:read",
          description: "View URLs in messages"
        },
        {
          name: "links:write",
          description: "Show previews of URLs in messages"
        },
        {
          name: "metadata.message:read",
          description: "Allows your slack app to read message metadata in channels that your slack app has been added to"
        },
        {
          name: "mpim:history",
          description: "View messages and other content in group direct messages that your slack app has been added to"
        },
        {
          name: "mpim:read",
          description: "View basic information about group direct messages that your slack app has been added to"
        },
        {
          name: "mpim:write",
          description: "Start group direct messages with people"
        },
        {
          name: "mpim:write.invites",
          description: "Invite members to group direct messages"
        },
        {
          name: "mpim:write.topic",
          description: "Set the description in group direct messages"
        },
        {
          name: "none",
          description: "Execute methods without needing a scope"
        },
        {
          name: "pins:read",
          description: "View pinned content in channels and conversations that your slack app has been added to"
        },
        {
          name: "pins:write",
          description: "Add and remove pinned messages and files"
        },
        {
          name: "reactions:read",
          description: "View emoji reactions and their associated content in channels and conversations that your slack app has been added to"
        },
        {
          name: "reactions:write",
          description: "Add and edit emoji reactions"
        },
        {
          name: "reminders:read",
          description: "View reminders created by your slack app"
        },
        {
          name: "reminders:write",
          description: "Add, remove, or mark reminders as complete"
        },
        {
          name: "remote_files:read",
          description: "View remote files added by the app in a workspace"
        },
        {
          name: "remote_files:share",
          description: "Share remote files on a user\u2019s behalf"
        },
        {
          name: "remote_files:write",
          description: "Add, edit, and delete remote files on a user\u2019s behalf"
        },
        {
          name: "search:read.public",
          description: "Search a workspace's messages in public channels"
        },
        {
          name: "team.billing:read",
          description: "Allows your slack app to read the billing plan for workspaces your slack app has been installed to"
        },
        {
          name: "team.preferences:read",
          description: "Allows your slack app to read the preferences for workspaces your slack app has been installed to"
        },
        {
          name: "team:read",
          description: "View the name, email domain, and icon for workspaces your slack app is connected to"
        },
        {
          name: "tokens.basic",
          description: "Execute methods without needing a scope"
        },
        {
          name: "triggers:read",
          description: "Read new Platform triggers"
        },
        {
          name: "triggers:write",
          description: "Create new Platform triggers"
        },
        {
          name: "usergroups:read",
          description: "View user groups in a workspace"
        },
        {
          name: "usergroups:write",
          description: "Create and manage user groups"
        },
        {
          name: "users.profile:read",
          description: "View profile details about people in a workspace"
        },
        {
          name: "users:read",
          description: "View people in a workspace"
        },
        {
          name: "users:read.email",
          description: "View email addresses of people in a workspace"
        },
        {
          name: "users:write",
          description: "Set presence for your slack app"
        },
        {
          name: "workflow.steps:execute",
          description: "Add steps that people can use in Workflow Builder"
        }
      ],
      help
    },
    oauth2User: {
      name: "OAuth2 (User)",
      description: "Authenticate as a user",
      type: "oauth2",
      client: {
        id: {
          envName: "CLOUD_SLACK_CLIENT_ID"
        },
        secret: {
          envName: "CLOUD_SLACK_CLIENT_SECRET"
        }
      },
      config: {
        authorization: {
          url: "https://slack.com/oauth/v2/authorize",
          scopeSeparator: ",",
          scopeParamName: "user_scope"
        },
        token: {
          url: "https://slack.com/api/oauth.v2.access",
          metadata: {
            accountPointer: "/team/name"
          },
          accessTokenPointer: "/authed_user/access_token",
          scopePointer: "/authed_user/scope"
        },
        refresh: {
          url: "https://slack.com/api/oauth.v2.access"
        },
        appHostEnvName: "CLOUD_SLACK_APP_HOST"
      },
      scopes: [
        {
          name: "admin",
          description: "Administer a workspace"
        },
        {
          name: "admin.analytics:read",
          description: "Access analytics data about the organization"
        },
        {
          name: "admin.apps:read",
          description: "View apps and app requests in a workspace"
        },
        {
          name: "admin.apps:write",
          description: "Manage apps in a workspace"
        },
        {
          name: "admin.barriers:read",
          description: "Read information barriers in the organization"
        },
        {
          name: "admin.barriers:write",
          description: "Manage information barriers in the organization"
        },
        {
          name: "admin.conversations:read",
          description: "View the channel\u2019s member list, topic, purpose and channel name"
        },
        {
          name: "admin.conversations:write",
          description: "Start a new conversation, modify a conversation and modify channel details"
        },
        {
          name: "admin.invites:read",
          description: "Gain information about invite requests in a Grid organization."
        },
        {
          name: "admin.invites:write",
          description: "Approve or deny invite requests in a Grid organization."
        },
        {
          name: "admin.roles:read",
          description: "List role assignments for your workspace."
        },
        {
          name: "admin.roles:write",
          description: "Add and remove role assignments for your workspace."
        },
        {
          name: "admin.teams:read",
          description: "Access information about a workspace"
        },
        {
          name: "admin.teams:write",
          description: "Make changes to a workspace"
        },
        {
          name: "admin.usergroups:read",
          description: "Access information about user groups"
        },
        {
          name: "admin.usergroups:write",
          description: "Make changes to your usergroups"
        },
        {
          name: "admin.users:read",
          description: "Access a workspace\u2019s profile information"
        },
        {
          name: "admin.users:write",
          description: "Modify account information"
        },
        {
          name: "admin.workflows:read",
          description: "View all workflows in a workspace"
        },
        {
          name: "admin.workflows:write",
          description: "Manage workflows in a workspace"
        },
        {
          name: "auditlogs:read",
          description: "View events from all workspaces, channels and users (Enterprise Grid only)"
        },
        {
          name: "bookmarks:read",
          description: "List bookmarks"
        },
        {
          name: "bookmarks:write",
          description: "Create, edit, and remove bookmarks"
        },
        {
          name: "calls:read",
          description: "View information about ongoing and past calls"
        },
        {
          name: "calls:write",
          description: "Start and manage calls in a workspace"
        },
        {
          name: "channels:history",
          description: "View messages and other content in public channels that your slack app has been added to"
        },
        {
          name: "channels:read",
          description: "View basic information about public channels in a workspace"
        },
        {
          name: "channels:write.invites",
          description: "Invite members to public channels"
        },
        {
          name: "channels:write.topic",
          description: "Set the description of public channels"
        },
        {
          name: "chat:write",
          description: "Post messages in approved channels & conversations"
        },
        {
          name: "chat:write:bot",
          description: "Send messages as your slack app",
          defaultChecked: !0
        },
        {
          name: "chat:write:user",
          description: "Send messages on a user\u2019s behalf",
          defaultChecked: !0
        },
        {
          name: "commands",
          description: "Add shortcuts and/or slash commands that people can use"
        },
        {
          name: "dnd:read",
          description: "View Do Not Disturb settings for people in a workspace"
        },
        {
          name: "dnd:write",
          description: "Edit a user\u2019s Do Not Disturb settings"
        },
        {
          name: "email",
          description: "View a user\u2019s email address"
        },
        {
          name: "emoji:read",
          description: "View custom emoji in a workspace"
        },
        {
          name: "files:read",
          description: "View files shared in channels and conversations that your slack app has been added to"
        },
        {
          name: "files:write",
          description: "Upload, edit, and delete files as your slack app"
        },
        {
          name: "files:write:user",
          description: "Upload, edit, and delete files as your slack app"
        },
        {
          name: "groups:history",
          description: "View messages and other content in private channels that your slack app has been added to"
        },
        {
          name: "groups:read",
          description: "View basic information about private channels that your slack app has been added to"
        },
        {
          name: "groups:write",
          description: "Manage private channels that your slack app has been added to and create new ones"
        },
        {
          name: "groups:write.invites",
          description: "Invite members to private channels"
        },
        {
          name: "groups:write.topic",
          description: "Set the description of private channels"
        },
        {
          name: "identity.avatar",
          description: "View a user\u2019s Slack avatar"
        },
        {
          name: "identity.basic",
          description: "View information about a user\u2019s identity"
        },
        {
          name: "identity.email",
          description: "View a user\u2019s email address"
        },
        {
          name: "identity.team",
          description: "View a user\u2019s Slack workspace name"
        },
        {
          name: "im:history",
          description: "View messages and other content in direct messages that your slack app has been added to"
        },
        {
          name: "im:read",
          description: "View basic information about direct messages that your slack app has been added to"
        },
        {
          name: "im:write",
          description: "Start direct messages with people"
        },
        {
          name: "incoming-webhook",
          description: "Create one-way webhooks to post messages to a specific channel"
        },
        {
          name: "links.embed:write",
          description: "Embed video player URLs in messages and app surfaces"
        },
        {
          name: "links:read",
          description: "View URLs in messages"
        },
        {
          name: "links:write",
          description: "Show previews of URLs in messages"
        },
        {
          name: "mpim:history",
          description: "View messages and other content in group direct messages that your slack app has been added to"
        },
        {
          name: "mpim:read",
          description: "View basic information about group direct messages that your slack app has been added to"
        },
        {
          name: "mpim:write",
          description: "Start group direct messages with people"
        },
        {
          name: "mpim:write.invites",
          description: "Invite members to group direct messages"
        },
        {
          name: "mpim:write.topic",
          description: "Set the description in group direct messages"
        },
        {
          name: "openid",
          description: "View information about a user\u2019s identity"
        },
        {
          name: "pins:read",
          description: "View pinned content in channels and conversations that your slack app has been added to"
        },
        {
          name: "pins:write",
          description: "Add and remove pinned messages and files"
        },
        {
          name: "profile",
          description: "View a user\u2019s Slack avatar and Slack workspace's basic information"
        },
        {
          name: "reactions:read",
          description: "View emoji reactions and their associated content in channels and conversations that your slack app has been added to"
        },
        {
          name: "reactions:write",
          description: "Add and edit emoji reactions"
        },
        {
          name: "reminders:read",
          description: "View reminders created by your slack app"
        },
        {
          name: "reminders:write",
          description: "Add, remove, or mark reminders as complete"
        },
        {
          name: "remote_files:read",
          description: "View remote files added by the app in a workspace"
        },
        {
          name: "remote_files:share",
          description: "Share remote files on a user\u2019s behalf"
        },
        {
          name: "search:read",
          description: "Search a workspace\u2019s content"
        },
        {
          name: "stars:read",
          description: "View messages and files that your slack app has starred"
        },
        {
          name: "stars:write",
          description: "Add or remove stars"
        },
        {
          name: "team.billing:read",
          description: "Allows your slack app to read the billing plan for workspaces your slack app has been installed to"
        },
        {
          name: "team.preferences:read",
          description: "Allows your slack app to read the preferences for workspaces your slack app has been installed to"
        },
        {
          name: "team:read",
          description: "View the name, email domain, and icon for workspaces your slack app is connected to"
        },
        {
          name: "tokens.basic",
          description: "Execute methods without needing a scope"
        },
        {
          name: "usergroups:read",
          description: "View user groups in a workspace"
        },
        {
          name: "usergroups:write",
          description: "Create and manage user groups"
        },
        {
          name: "users.profile:read",
          description: "View profile details about people in a workspace"
        },
        {
          name: "users.profile:write",
          description: "Edit a user\u2019s profile information and status"
        },
        {
          name: "users:read",
          description: "View people in a workspace"
        },
        {
          name: "users:read.email",
          description: "View email addresses of people in a workspace"
        },
        {
          name: "users:write",
          description: "Set presence for your slack app"
        }
      ],
      help
    }
  }
};

// app/services/externalApis/integrations/stripe.ts
var stripe = {
  identifier: "stripe",
  name: "Stripe",
  packageName: "@trigger.dev/stripe",
  authenticationMethods: {
    apikey: {
      type: "apikey",
      help: {
        samples: [
          {
            title: "Creating the integration",
            code: `
import { Stripe } from "@trigger.dev/stripe";

export const stripe = new Stripe({
  id: "__SLUG__",
  apiKey: process.env.PLAIN_API_KEY!,
});
`
          },
          {
            title: "Using the integration",
            code: `
client.defineJob({
  id: "stripe-playground",
  name: "Stripe Playground",
  version: "0.1.1",
  integrations: {
    stripe,
  },
  trigger: eventTrigger({
    name: "stripe.playground",
  }),
  run: async (payload, io, ctx) => {
    await io.stripe.createCharge("charge-customer", {
      amount: 100,
      currency: "usd",
      source: payload.source,
      customer: payload.customerId,
    });
  },
});
            `,
            highlight: [
              [5, 7],
              [12, 17]
            ]
          },
          {
            title: "Using Stripe triggers",
            code: `
client.defineJob({
  id: "stripe-on-subscription-created",
  name: "Stripe On Subscription Created",
  version: "0.1.0",
  trigger: stripe.onCustomerSubscriptionCreated({
    filter: {
      currency: ["usd"],
    },
  }),
  run: async (payload, io, ctx) => {
    await io.logger.info("Subscription created in USD!");
  },
});
            `,
            highlight: [[5, 9]]
          }
        ]
      }
    }
  }
};

// app/services/externalApis/integrations/supabase.ts
var managementUsageSample = {
  title: "Using the client",
  code: `
import { SupabaseManagement } from "@trigger.dev/supabase";

const supabase = new SupabaseManagement({
  id: "__SLUG__",
});

client.defineJob({
  id: "on-new-todos",
  name: "On New Todos",
  version: "0.1.1",
  trigger: supabase.onInserted({
    table: "todos",
  }),
  run: async (payload, io, ctx) => {
  },
});
  `
}, managementApiKeyUsageSample = {
  title: "Using the client",
  code: `
import { SupabaseManagement } from "@trigger.dev/supabase";

const supabase = new SupabaseManagement({
  id: "__SLUG__",
  apiKey: process.env.SUPABASE_API_KEY!,
});

client.defineJob({
  id: "on-new-todos",
  name: "On New Todos",
  version: "0.1.1",
  trigger: supabase.onInserted({
    table: "todos",
  }),
  run: async (payload, io, ctx) => {
  },
});
  `
}, supabaseManagement = {
  identifier: "supabase-management",
  icon: "supabase",
  name: "Supabase Management",
  packageName: "@trigger.dev/supabase",
  description: "Use database webhooks, manage your organizations and projects.",
  authenticationMethods: {
    apikey: {
      type: "apikey",
      help: {
        samples: [
          {
            title: "Creating the client",
            code: `
import { SupabaseManagement } from "@trigger.dev/supabase";

const supabase = new SupabaseManagement({
  id: "__SLUG__"
  apiKey: process.env.SUPABASE_API_KEY!,
});
`
          },
          managementApiKeyUsageSample
        ]
      }
    },
    oauth2: {
      name: "OAuth",
      type: "oauth2",
      client: {
        id: {
          envName: "CLOUD_SUPABASE_CLIENT_ID"
        },
        secret: {
          envName: "CLOUD_SUPABASE_CLIENT_SECRET"
        }
      },
      config: {
        authorization: {
          url: "https://api.supabase.com/v1/oauth/authorize",
          scopeSeparator: " "
        },
        token: {
          url: "https://api.supabase.com/v1/oauth/token",
          metadata: { accountPointer: "/team/name" },
          authorizationMethod: "body"
        },
        refresh: {
          url: "https://api.supabase.com/v1/oauth/token",
          skipScopes: !0
        }
      },
      scopes: [
        {
          name: "all",
          description: "Grants full access to all resources available in the Supabase Management API.",
          defaultChecked: !0
        }
      ],
      help: {
        samples: [
          {
            title: "Creating the client",
            code: `
import { SupabaseManagement } from "@trigger.dev/supabase";

const supabase = new SupabaseManagement({
  id: "__SLUG__"
});
`
          },
          managementUsageSample
        ]
      }
    }
  }
};
var supabase = {
  identifier: "supabase",
  icon: "supabase",
  name: "Supabase",
  packageName: "@trigger.dev/supabase",
  authenticationMethods: {
    apikey: {
      type: "apikey",
      help: {
        samples: [
          {
            title: "Creating the client",
            code: `
import { Supabase } from "@trigger.dev/supabase";

const supabase = new Supabase({
  id: "__SLUG__"
  projectId: process.env.SUPABASE_ID!,
  supabaseKey: process.env.SUPABASE_KEY!,
});
`
          }
        ]
      }
    }
  }
};

// app/services/externalApis/integrations/typeform.ts
var typeform = {
  identifier: "typeform",
  name: "Typeform",
  description: "Use the Typeform API and trigger on new responses",
  packageName: "@trigger.dev/typeform@latest",
  authenticationMethods: {
    apikey: {
      type: "apikey",
      help: {
        samples: [
          {
            title: "Creating the client",
            code: `
import { Typeform } from "@trigger.dev/typeform";

const typeform = new Typeform({
  id: "__SLUG__",
  apiKey: process.env.TYPEFORM_TOKEN!,
});
`
          },
          {
            title: "Using the client",
            code: `
client.defineJob({
  id: "typeform-response",
  name: "Typeform Response",
  version: "0.0.1",
  trigger: typeform.onFormResponse({
    uid: "<form uid>",
    tag: "<webhook tag>",
  }),
  integrations: {
    typeform,
  },
  run: async (payload, io, ctx) => {
    await io.typeform.getForm(payload.form_response.form_id);
  },
});
            `,
            highlight: [
              [5, 8],
              [9, 11],
              [13, 13]
            ]
          }
        ]
      }
    }
  }
};

// app/services/externalApis/integrationCatalog.server.ts
var IntegrationCatalog = class {
  #integrations;
  constructor(integrations) {
    this.#integrations = integrations;
  }
  getIntegrations() {
    return this.#integrations;
  }
  getIntegration(identifier) {
    let api = this.#integrations[identifier];
    if (api)
      return api;
  }
}, integrationCatalog = new IntegrationCatalog({
  airtable,
  github,
  linear,
  openai,
  plain,
  replicate,
  resend,
  shopify,
  slack,
  stripe,
  supabaseManagement,
  supabase,
  sendgrid,
  typeform
});

// app/services/externalApis/oauth2.server.ts
var import_jsonpointer = __toESM(require("jsonpointer")), crypto = __toESM(require("node:crypto")), import_simple_oauth2 = __toESM(require("simple-oauth2"));
function getClientConfig({
  env: env6,
  customOAuthClient
}) {
  if (customOAuthClient)
    return customOAuthClient;
  let id = process.env[env6.idName];
  if (!id)
    throw new Error(`Client id environment variable not found: ${env6.idName}`);
  let secret2 = process.env[env6.secretName];
  if (!secret2)
    throw new Error(`Client secret environment variable not found: ${env6.secretName}`);
  return {
    id,
    secret: secret2
  };
}
function createOAuth2Url({
  authorizationUrl,
  clientId,
  clientSecret,
  key,
  callbackUrl,
  scopeParamName,
  scopes,
  scopeSeparator,
  pkceCode,
  authorizationLocation,
  extraParameters
}, strategy) {
  if (strategy)
    throw new Error(`createOauth2Url ${strategy} not implemented`);
  let authUrl = new URL(authorizationUrl), authHost = `${authUrl.protocol}//${authUrl.host}`, clientConfig = {
    client: {
      id: clientId,
      secret: clientSecret
    },
    auth: {
      authorizeHost: authHost,
      authorizePath: authUrl.pathname,
      tokenHost: authHost
    },
    options: {
      scopeSeparator,
      authorizationMethod: authorizationLocation
    }
  }, simpleOAuthClient = new import_simple_oauth2.default.AuthorizationCode(clientConfig), codeChallenge;
  pkceCode && (codeChallenge = crypto.createHash("sha256").update(pkceCode).digest("base64").replace(/\+/g, "-").replace(/\//g, "_").replace(/=+$/, ""));
  let pkceParams = {
    code_challenge: codeChallenge ?? void 0,
    code_challenge_method: codeChallenge ? "S256" : void 0
  }, scopeParams = {};
  return scopeParams[scopeParamName] = scopes.join(scopeSeparator), simpleOAuthClient.authorizeURL({
    redirect_uri: callbackUrl,
    state: key,
    ...pkceParams,
    ...extraParameters,
    ...scopeParams
  });
}
async function grantOAuth2Token({
  tokenUrl,
  clientId,
  clientSecret,
  code,
  callbackUrl,
  requestedScopes,
  scopeSeparator,
  accessTokenPointer,
  refreshTokenPointer,
  expiresInPointer,
  scopePointer,
  pkceCode,
  authorizationMethod,
  bodyFormat
}, strategy) {
  if (strategy)
    throw new Error(`grantOAuth2Token ${strategy} not implemented`);
  let tokenUrlObj = new URL(tokenUrl), clientConfig = {
    client: {
      id: clientId,
      secret: clientSecret
    },
    auth: {
      tokenHost: `${tokenUrlObj.protocol}//${tokenUrlObj.host}`,
      tokenPath: tokenUrlObj.pathname
    },
    options: {
      authorizationMethod,
      bodyFormat
    }
  }, simpleOAuthClient = new import_simple_oauth2.default.AuthorizationCode(clientConfig), codeVerifier;
  pkceCode && (codeVerifier = pkceCode);
  let pkceParams = {
    code_verifier: codeVerifier ?? void 0
  }, token = await simpleOAuthClient.getToken({
    code,
    redirect_uri: callbackUrl,
    ...pkceParams
  });
  return convertToken({
    token,
    scopeSeparator,
    requestedScopes,
    scopePointer,
    accessTokenPointer,
    refreshTokenPointer,
    expiresInPointer
  });
}
async function refreshOAuth2Token({
  refreshUrl,
  clientId,
  clientSecret,
  requestedScopes,
  scopeSeparator,
  token: { accessToken, refreshToken, expiresAt },
  accessTokenPointer,
  refreshTokenPointer,
  expiresInPointer,
  scopePointer,
  authorizationMethod,
  bodyFormat,
  skipScopes
}, strategy) {
  if (strategy)
    throw new Error(`refreshOAuth2Token ${strategy} not implemented`);
  let tokenUrlObj = new URL(refreshUrl), clientConfig = {
    client: {
      id: clientId,
      secret: clientSecret
    },
    auth: {
      tokenHost: `${tokenUrlObj.protocol}//${tokenUrlObj.host}`,
      tokenPath: tokenUrlObj.pathname,
      refreshPath: tokenUrlObj.pathname
    },
    options: {
      authorizationMethod,
      bodyFormat
    }
  }, newToken = await new import_simple_oauth2.default.AuthorizationCode(clientConfig).createToken({
    access_token: accessToken,
    expires_at: expiresAt,
    refresh_token: refreshToken
  }).refresh({
    ...skipScopes ? {} : { scope: requestedScopes.join(scopeSeparator) }
  });
  return convertToken({
    token: newToken,
    scopeSeparator,
    requestedScopes,
    scopePointer,
    accessTokenPointer,
    refreshTokenPointer,
    expiresInPointer
  });
}
function convertToken({
  token,
  accessTokenPointer,
  refreshTokenPointer,
  expiresInPointer,
  scopePointer,
  requestedScopes,
  scopeSeparator
}) {
  let accessTokenValue = import_jsonpointer.default.compile(accessTokenPointer).get(token.token);
  if (typeof accessTokenValue != "string")
    throw new Error("Invalid access token");
  let actualScopes = requestedScopes, scopesValue = import_jsonpointer.default.compile(scopePointer).get(token.token);
  typeof scopesValue == "string" && (actualScopes = scopesValue.split(scopeSeparator));
  let refreshToken = import_jsonpointer.default.compile(refreshTokenPointer).get(token.token), expiresIn = import_jsonpointer.default.compile(expiresInPointer).get(token.token);
  return {
    type: "oauth2",
    accessToken: accessTokenValue,
    refreshToken,
    expiresIn,
    scopes: actualScopes,
    raw: token.token
  };
}

// app/services/externalApis/types.ts
var import_zod40 = require("zod"), HelpSampleSchema = import_zod40.z.object({
  title: import_zod40.z.string(),
  code: import_zod40.z.string(),
  highlight: import_zod40.z.array(import_zod40.z.tuple([import_zod40.z.number(), import_zod40.z.number()])).optional()
}), HelpSchema = import_zod40.z.object({
  samples: import_zod40.z.array(HelpSampleSchema)
}), OAuth2AccessTokenSchema = import_zod40.z.object({
  type: import_zod40.z.literal("oauth2"),
  accessToken: import_zod40.z.string(),
  expiresIn: import_zod40.z.number().optional(),
  refreshToken: import_zod40.z.string().optional(),
  scopes: import_zod40.z.array(import_zod40.z.string()).optional(),
  raw: import_zod40.z.record(import_zod40.z.any()).optional()
}), AccessTokenSchema = OAuth2AccessTokenSchema, ConnectionMetadataSchema = import_zod40.z.object({
  account: import_zod40.z.string().optional()
}), OAuthClientSchema = import_zod40.z.object({
  id: import_zod40.z.string(),
  secret: import_zod40.z.string()
});

// app/services/externalApis/integrationAuthRepository.server.ts
var tokenRefreshThreshold = 5 * 60, IntegrationAuthRepository = class {
  #integrationCatalog;
  #prismaClient;
  constructor(catalog = integrationCatalog, prismaClient = prisma) {
    this.#integrationCatalog = catalog, this.#prismaClient = prismaClient;
  }
  /** Get all API connections for the organization, for a specific API */
  async getClientsForIntegration(organizationId, identifier) {
    return (await this.#prismaClient.integration.findMany({
      where: {
        organizationId,
        definitionId: identifier
      },
      include: {
        authMethod: !0,
        definition: !0
      }
    })).map((c) => this.#enrichIntegration(c, c.definition, c.authMethod));
  }
  async createConnectionClient({
    id,
    slug: slug3,
    customClient,
    organizationId,
    integrationIdentifier,
    integrationAuthMethod,
    clientType,
    scopes,
    title: title2,
    description,
    url,
    redirectTo
  }) {
    return this.#prismaClient.$transaction(async (tx) => {
      let customClientReference;
      if (customClient) {
        let key = `connectionClient/customClient/${id}`;
        await getSecretStore(env2.SECRET_STORE, {
          prismaClient: tx
        }).setSecret(key, { ...customClient }), customClientReference = await tx.secretReference.create({
          data: {
            key,
            provider: env2.SECRET_STORE
          }
        });
      }
      logger.debug("Creating Integration", {
        id,
        clientType,
        scopes,
        title: title2,
        slug: slug3,
        integrationIdentifier,
        integrationAuthMethod
      });
      let client3 = await tx.integration.create({
        data: {
          id,
          connectionType: clientType,
          scopes,
          title: title2,
          slug: slug3,
          authSource: "HOSTED",
          description,
          customClientReference: customClientReference ? {
            connect: {
              id: customClientReference.id
            }
          } : void 0,
          organization: {
            connect: {
              id: organizationId
            }
          },
          authMethod: {
            connect: {
              definitionId_key: {
                definitionId: integrationIdentifier,
                key: integrationAuthMethod
              }
            }
          },
          definition: {
            connect: {
              id: integrationIdentifier
            }
          }
        }
      });
      return await this.createConnectionAttempt({
        tx,
        integration: client3,
        customOAuthClient: customClient,
        redirectTo,
        url
      });
    });
  }
  async populateMissingConnectionClientFields({
    id,
    customClient,
    organizationId,
    integrationIdentifier,
    integrationAuthMethod,
    clientType,
    scopes,
    title: title2,
    description,
    url,
    redirectTo
  }) {
    return this.#prismaClient.$transaction(async (tx) => {
      let customClientReference;
      if (customClient) {
        let key = `connectionClient/customClient/${id}`;
        await getSecretStore(env2.SECRET_STORE, {
          prismaClient: tx
        }).setSecret(key, { ...customClient }), customClientReference = await tx.secretReference.create({
          data: {
            key,
            provider: env2.SECRET_STORE
          }
        });
      }
      let client3 = await tx.integration.update({
        where: {
          id
        },
        data: {
          connectionType: clientType,
          scopes,
          title: title2,
          description,
          setupStatus: "COMPLETE",
          customClientReference: customClientReference ? {
            connect: {
              id: customClientReference.id
            }
          } : void 0,
          organization: {
            connect: {
              id: organizationId
            }
          },
          authMethod: {
            connect: {
              definitionId_key: {
                definitionId: integrationIdentifier,
                key: integrationAuthMethod
              }
            }
          },
          definition: {
            connect: {
              id: integrationIdentifier
            }
          }
        }
      });
      return await this.createConnectionAttempt({
        tx,
        integration: client3,
        customOAuthClient: customClient,
        redirectTo,
        url
      });
    });
  }
  async createConnectionAttempt({
    tx,
    integration,
    customOAuthClient,
    redirectTo,
    url
  }) {
    let { authMethod } = await this.#getDefinitionAndAuthMethod(integration);
    switch (authMethod.type) {
      case "oauth2": {
        let pkceCode;
        authMethod.config.pkce !== !1 && (pkceCode = crypto2.randomBytes(24).toString("hex"));
        let connectionAttempt = await tx.connectionAttempt.create({
          data: {
            integrationId: integration.id,
            redirectTo,
            securityCode: pkceCode
          }
        }), clientConfig = getClientConfig({
          env: {
            idName: authMethod.client.id.envName,
            secretName: authMethod.client.secret.envName
          },
          customOAuthClient
        }), callbackUrl = this.#buildCallbackUrl({
          authenticationMethod: authMethod,
          url,
          hasCustomClient: !!customOAuthClient,
          clientId: integration.id
        }), createAuthorizationParams = {
          authorizationUrl: authMethod.config.authorization.url,
          clientId: clientConfig.id,
          clientSecret: clientConfig.secret,
          key: connectionAttempt.id,
          callbackUrl,
          scopeParamName: authMethod.config.authorization.scopeParamName ?? "scope",
          scopes: integration.scopes,
          scopeSeparator: authMethod.config.authorization.scopeSeparator,
          pkceCode,
          authorizationLocation: authMethod.config.authorization.authorizationLocation ?? "body",
          extraParameters: authMethod.config.authorization.extraParameters
        };
        return await createOAuth2Url(
          createAuthorizationParams,
          authMethod.config.authorization.createUrlStrategy
        );
      }
      default:
        throw new Error(`Authentication method type ${authMethod.type} not supported`);
    }
  }
  async createConnectionFromAttempt({
    attempt,
    code,
    url,
    customOAuthClient
  }) {
    let { definition, authMethod } = await this.#getDefinitionAndAuthMethod(attempt.integration);
    switch (authMethod.type) {
      case "oauth2": {
        let clientConfig = getClientConfig({
          env: {
            idName: authMethod.client.id.envName,
            secretName: authMethod.client.secret.envName
          },
          customOAuthClient
        }), callbackUrl = this.#buildCallbackUrl({
          authenticationMethod: authMethod,
          url,
          hasCustomClient: !!customOAuthClient,
          clientId: attempt.integration.id
        }), params = {
          tokenUrl: authMethod.config.token.url,
          clientId: clientConfig.id,
          clientSecret: clientConfig.secret,
          code,
          callbackUrl,
          requestedScopes: attempt.integration.scopes,
          scopeSeparator: authMethod.config.authorization.scopeSeparator,
          pkceCode: attempt.securityCode ?? void 0,
          accessTokenPointer: authMethod.config.token.accessTokenPointer ?? "/access_token",
          refreshTokenPointer: authMethod.config.token.refreshTokenPointer ?? "/refresh_token",
          expiresInPointer: authMethod.config.token.expiresInPointer ?? "/expires_in",
          scopePointer: authMethod.config.token.scopePointer ?? "/scope",
          authorizationMethod: authMethod.config.token.authorizationMethod,
          bodyFormat: authMethod.config.token.bodyFormat
        }, token = await grantOAuth2Token(params, authMethod.config.token.grantTokenStrategy), hashedAccessToken = crypto2.createHash("sha256").update(token.accessToken).digest("base64"), key = secretStoreKeyForToken(definition.identifier, hashedAccessToken), metadata = this.#getMetadataFromToken({
          token,
          authenticationMethod: authMethod
        });
        return await this.#prismaClient.$transaction(async (tx) => {
          let secretReference = await tx.secretReference.findUnique({
            where: {
              key
            }
          });
          secretReference ? await tx.integrationConnection.updateMany({
            where: {
              dataReferenceId: secretReference.id
            },
            data: {
              scopes: token.scopes,
              metadata
            }
          }) : secretReference = await tx.secretReference.create({
            data: {
              key,
              provider: env2.SECRET_STORE
            }
          }), await getSecretStore(env2.SECRET_STORE, {
            prismaClient: tx
          }).setSecret(key, token);
          let expiresAt = this.#getExpiresAtFromToken({ token }), connection = await tx.integrationConnection.create({
            data: {
              organizationId: attempt.integration.organizationId,
              integrationId: attempt.integration.id,
              metadata,
              dataReferenceId: secretReference.id,
              scopes: token.scopes,
              expiresAt
            }
          });
          return await workerQueue.enqueue(
            "connectionCreated",
            {
              id: connection.id
            },
            { tx }
          ), await this.#scheduleRefresh(expiresAt, connection, tx), connection;
        });
      }
    }
  }
  async createConnectionFromToken({
    token,
    integration,
    externalAccount
  }) {
    let { definition, authMethod } = await this.#getDefinitionAndAuthMethod(integration);
    switch (authMethod.type) {
      case "oauth2": {
        let hashedAccessToken = crypto2.createHash("sha256").update(token.accessToken).digest("base64"), key = secretStoreKeyForToken(definition.identifier, hashedAccessToken), metadata = this.#getMetadataFromToken({
          token,
          authenticationMethod: authMethod
        });
        return await this.#prismaClient.$transaction(async (tx) => {
          let secretReference = await tx.secretReference.findUnique({
            where: {
              key
            }
          });
          secretReference ? await tx.integrationConnection.updateMany({
            where: {
              dataReferenceId: secretReference.id
            },
            data: {
              scopes: token.scopes,
              metadata
            }
          }) : secretReference = await tx.secretReference.create({
            data: {
              key,
              provider: env2.SECRET_STORE
            }
          }), await getSecretStore(env2.SECRET_STORE, {
            prismaClient: tx
          }).setSecret(key, token);
          let expiresAt = this.#getExpiresAtFromToken({ token }), connection = await tx.integrationConnection.create({
            data: {
              organizationId: integration.organizationId,
              integrationId: integration.id,
              metadata,
              dataReferenceId: secretReference.id,
              scopes: token.scopes,
              expiresAt,
              externalAccountId: externalAccount?.id,
              connectionType: externalAccount ? "EXTERNAL" : "DEVELOPER"
            }
          });
          return await workerQueue.enqueue(
            "connectionCreated",
            {
              id: connection.id
            },
            { tx }
          ), await this.#scheduleRefresh(expiresAt, connection, tx), connection;
        });
      }
    }
  }
  async refreshConnection({ connectionId }) {
    let connection = await this.#prismaClient.integrationConnection.findUnique({
      where: {
        id: connectionId
      },
      include: {
        dataReference: !0,
        integration: {
          include: {
            customClientReference: !0
          }
        }
      }
    });
    if (!connection)
      throw new Error(`Connection ${connectionId} not found`);
    if (!connection.enabled) {
      logger.info("Connection is disabled", {
        connection
      });
      return;
    }
    let customOAuthClient;
    connection.integration.customClientReference && (customOAuthClient = await getSecretStore(env2.SECRET_STORE).getSecret(
      OAuthClientSchema,
      connection.integration.customClientReference.key
    ));
    let { authMethod } = await this.#getDefinitionAndAuthMethod(connection.integration);
    switch (authMethod.type) {
      case "oauth2": {
        let clientConfig = getClientConfig({
          env: {
            idName: authMethod.client.id.envName,
            secretName: authMethod.client.secret.envName
          },
          customOAuthClient
        }), secretStore = getSecretStore(connection.dataReference.provider), accessToken = await secretStore.getSecret(
          AccessTokenSchema,
          connection.dataReference.key
        );
        if (!accessToken)
          throw new Error(
            `Access token not found for connection ${connectionId} with key ${connection.dataReference.key}`
          );
        if (!accessToken.refreshToken)
          throw new Error(
            `Refresh token not found for connection ${connectionId} with key ${connection.dataReference.key}`
          );
        if (!accessToken.expiresIn)
          throw new Error(
            `Expires in not found for connection ${connectionId} with key ${connection.dataReference.key}`
          );
        let params = {
          refreshUrl: authMethod.config.refresh.url,
          clientId: clientConfig.id,
          clientSecret: clientConfig.secret,
          requestedScopes: connection.integration.scopes,
          scopeSeparator: authMethod.config.authorization.scopeSeparator,
          token: {
            accessToken: accessToken.accessToken,
            refreshToken: accessToken.refreshToken,
            expiresAt: new Date(connection.updatedAt.getTime() + accessToken.expiresIn * 1e3)
          },
          accessTokenPointer: authMethod.config.token.accessTokenPointer ?? "/access_token",
          refreshTokenPointer: authMethod.config.token.refreshTokenPointer ?? "/refresh_token",
          expiresInPointer: authMethod.config.token.expiresInPointer ?? "/expires_in",
          scopePointer: authMethod.config.token.scopePointer ?? "/scope",
          authorizationMethod: authMethod.config.token.authorizationMethod,
          bodyFormat: authMethod.config.token.bodyFormat,
          skipScopes: authMethod.config.refresh.skipScopes
        }, token = await refreshOAuth2Token(
          params,
          authMethod.config.refresh.refreshTokenStrategy
        );
        await secretStore.setSecret(connection.dataReference.key, token);
        let metadata = this.#getMetadataFromToken({
          token,
          authenticationMethod: authMethod
        }), expiresAt = this.#getExpiresAtFromToken({ token }), newConnection = await this.#prismaClient.integrationConnection.update({
          where: {
            id: connectionId
          },
          data: {
            metadata,
            scopes: token.scopes,
            expiresAt
          },
          include: {
            dataReference: !0
          }
        });
        return await this.#scheduleRefresh(expiresAt, connection), newConnection;
      }
      default:
        throw new Error(`Authentication method type ${authMethod.type} not supported`);
    }
  }
  /** Get credentials for the ApiConnection */
  async getCredentials(connection) {
    if (connection.expiresAt && new Date(connection.expiresAt.getTime() - tokenRefreshThreshold * 1e3) < /* @__PURE__ */ new Date()) {
      let refreshedConnection = await this.refreshConnection({
        connectionId: connection.id
      });
      if (!refreshedConnection)
        return;
      connection = refreshedConnection;
    }
    return getSecretStore(connection.dataReference.provider).getSecret(AccessTokenSchema, connection.dataReference.key);
  }
  #enrichIntegration(integration, definition, authMethod) {
    if (!authMethod)
      throw new Error(
        `Auth method ${integration.authMethodId} not found for integration ${definition.id}`
      );
    if (authMethod.type !== "oauth2")
      throw new Error(`Authentication method type ${authMethod.type} not supported`);
    return {
      ...integration,
      definition: {
        identifier: definition.id,
        name: definition.name
      },
      authMethod: {
        type: authMethod.type,
        name: authMethod.name,
        possibleScopes: authMethod.scopes
      }
    };
  }
  async #getDefinitionAndAuthMethod(integration) {
    let definition = await this.#prismaClient.integrationDefinition.findUniqueOrThrow({
      where: {
        id: integration.definitionId
      }
    }), authMethod = integration.authMethodId ? await this.#prismaClient.integrationAuthMethod.findUniqueOrThrow({
      where: {
        id: integration.authMethodId
      }
    }) : void 0;
    if (!authMethod)
      throw new Error(
        `Auth method ${integration.authMethodId} not found for integration ${definition.id}`
      );
    return {
      definition: {
        identifier: definition.id,
        name: definition.name
      },
      authMethod: {
        name: authMethod.name,
        description: authMethod.description,
        type: authMethod.type,
        client: authMethod.client,
        config: authMethod.config,
        scopes: authMethod.scopes
      }
    };
  }
  #buildCallbackUrl({
    authenticationMethod,
    url,
    hasCustomClient,
    clientId
  }) {
    return new URL(
      "/oauth2/callback",
      authenticationMethod.config.appHostEnvName ? process.env[authenticationMethod.config.appHostEnvName] ?? url : url
    ).href;
  }
  #getMetadataFromToken({
    authenticationMethod,
    token
  }) {
    let metadata = {};
    if (authenticationMethod.config.token.metadata.accountPointer) {
      let account = import_jsonpointer2.default.compile(
        authenticationMethod.config.token.metadata.accountPointer
      ).get(token.raw ?? {});
      typeof account == "string" && (metadata.account = account);
    }
    return metadata;
  }
  #getExpiresAtFromToken({ token }) {
    if (token.expiresIn)
      return new Date((/* @__PURE__ */ new Date()).getTime() + token.expiresIn * 1e3);
  }
  async #scheduleRefresh(expiresAt, connection, tx) {
    expiresAt && await workerQueue.enqueue(
      "refreshOAuthToken",
      {
        organizationId: connection.organizationId,
        connectionId: connection.id
      },
      {
        //attempt refreshing 5 minutes before the token expires
        runAt: new Date(expiresAt.getTime() - tokenRefreshThreshold * 1e3),
        tx
      }
    );
  }
};
function secretStoreKeyForToken(integrationIdentifier, hashedAccessToken) {
  return `connection/token/${integrationIdentifier}-${hashedAccessToken}`;
}
var integrationAuthRepository = new IntegrationAuthRepository();

// app/models/runConnection.server.ts
async function resolveRunConnections(connections) {
  let allResolved = !0, result = {};
  for (let connection of connections) {
    if (connection.integration.authSource !== "HOSTED")
      continue;
    let auth = await resolveRunConnection(connection);
    if (!auth) {
      allResolved = !1;
      continue;
    }
    result[connection.key] = auth;
  }
  return { auth: result, success: allResolved };
}
async function resolveRunConnection(connection) {
  if (!connection.connection)
    return;
  let response = await integrationAuthRepository.getCredentials(connection.connection);
  if (response)
    return {
      type: "oauth2",
      scopes: response.scopes,
      accessToken: response.accessToken
    };
}
async function resolveApiConnection(connection) {
  if (!connection)
    return;
  let response = await integrationAuthRepository.getCredentials(connection);
  if (response)
    return {
      type: "oauth2",
      scopes: response.scopes,
      accessToken: response.accessToken
    };
}

// app/models/task.server.ts
function taskWithAttemptsToServerTask(task) {
  return {
    id: task.id,
    name: task.name,
    icon: task.icon,
    noop: task.noop,
    startedAt: task.startedAt,
    completedAt: task.completedAt,
    delayUntil: task.delayUntil,
    status: task.status,
    description: task.description,
    params: task.params,
    output: task.outputIsUndefined ? void 0 : task.output,
    context: task.context,
    properties: task.properties,
    style: task.style,
    error: task.error,
    parentId: task.parentId,
    attempts: task.attempts.length,
    idempotencyKey: task.idempotencyKey,
    operation: task.operation,
    callbackUrl: task.callbackUrl,
    forceYield: task.run.forceYieldImmediately,
    childExecutionMode: task.childExecutionMode
  };
}
function prepareTasksForCaching(possibleTasks, maxSize) {
  let tasks = possibleTasks.filter((task) => task.status === "COMPLETED" && !task.noop), tasksToRun = [], remainingSize = maxSize;
  for (let task of tasks) {
    let cachedTask = prepareTaskForCaching(task), size = calculateCachedTaskSize(cachedTask);
    size <= remainingSize && (tasksToRun.push(cachedTask), remainingSize -= size);
  }
  return {
    tasks: tasksToRun,
    cursor: tasks.length > tasksToRun.length ? tasks[tasksToRun.length].id : void 0
  };
}
function prepareTasksForCachingLegacy(possibleTasks, maxSize) {
  let availableTasks = possibleTasks.filter((task) => task.status === "COMPLETED").map((task) => {
    let cachedTask = prepareTaskForCaching(task);
    return { task: cachedTask, size: calculateCachedTaskSize(cachedTask) };
  });
  availableTasks.sort((a, b) => a.size - b.size);
  let tasksToRun = [], remainingSize = maxSize;
  for (let { task, size } of availableTasks)
    size <= remainingSize && (tasksToRun.push(task), remainingSize -= size);
  return {
    tasks: tasksToRun,
    cursor: void 0
  };
}
function prepareTaskForCaching(task) {
  return {
    id: task.idempotencyKey,
    // We should eventually move this back to task.id
    status: task.status,
    idempotencyKey: task.idempotencyKey,
    noop: task.noop,
    output: task.outputIsUndefined ? void 0 : task.output,
    parentId: task.parentId
  };
}
function calculateCachedTaskSize(task) {
  return JSON.stringify(task).length;
}

// app/routes/api.v1.runs.$runId.tasks.$id.complete/CompleteRunTaskService.server.ts
var CompleteRunTaskService = class {
  #prismaClient;
  constructor(prismaClient = prisma) {
    this.#prismaClient = prismaClient;
  }
  async call(environment, runId, id, taskBody) {
    return startActiveSpan("CompleteRunTaskService.call", async (span) => {
      span.setAttribute("runId", runId), span.setAttribute("taskId", id);
      let existingTask = await this.#prismaClient.task.findUnique({
        where: {
          id
        },
        include: {
          run: !0,
          attempts: {
            where: {
              status: "PENDING"
            },
            orderBy: {
              number: "desc"
            },
            take: 1
          }
        }
      });
      if (!existingTask || existingTask.runId !== runId || existingTask.run.environmentId !== environment.id)
        return;
      if (existingTask.status === "COMPLETED" || existingTask.status === "ERRORED" || existingTask.status === "CANCELED")
        return logger.debug("Task already completed", {
          taskId: id
        }), taskWithAttemptsToServerTask(existingTask);
      existingTask.attempts.length === 1 && await this.#prismaClient.taskAttempt.update({
        where: {
          id: existingTask.attempts[0].id
        },
        data: {
          status: "COMPLETED"
        }
      });
      let updatedTask = await this.#prismaClient.task.update({
        where: {
          id
        },
        data: {
          status: "COMPLETED",
          output: taskBody.output,
          outputIsUndefined: typeof taskBody.output > "u",
          completedAt: /* @__PURE__ */ new Date(),
          outputProperties: taskBody.properties
        },
        include: {
          attempts: !0,
          run: !0
        }
      });
      return taskWithAttemptsToServerTask(updatedTask);
    });
  }
};

// app/utils/formatErrors.server.ts
function formatError(error, style2 = "short") {
  return style2 === "short" ? error.name ? `${error.name}: ${error.message}` : error.message : formatError(error, "short") + `
` + error.stack;
}
function formatUnknownError(error, style2 = "short") {
  let parsedError = ErrorWithStackSchema.safeParse(error);
  return parsedError.success ? formatError(parsedError.data, style2) : "Unknown error";
}

// app/services/endpointApi.server.ts
var import_node_perf_hooks = require("node:perf_hooks");
var import_zod41 = require("zod"), HttpSourceRequestSchema = import_zod41.z.object({
  url: import_zod41.z.string().url(),
  method: import_zod41.z.string(),
  headers: import_zod41.z.record(import_zod41.z.string()),
  rawBody: import_zod41.z.instanceof(Buffer).optional().nullable()
}), EndpointApiError = class extends Error {
  constructor(message, stack) {
    super(`EndpointApiError: ${message}`), this.stack = stack, this.name = "EndpointApiError";
  }
}, EndpointApi = class {
  constructor(apiKey, url) {
    this.apiKey = apiKey;
    this.url = url;
  }
  async ping(endpointId) {
    let response = await safeFetch(this.url, {
      method: "POST",
      headers: {
        "x-trigger-api-key": this.apiKey,
        "x-trigger-endpoint-id": endpointId,
        "x-trigger-action": "PING"
      }
    });
    if (!response)
      return {
        ok: !1,
        error: `Could not connect to endpoint ${this.url}`
      };
    if (response.status === 401) {
      let body = await safeBodyFromResponse(response, ErrorWithStackSchema);
      return body ? {
        ok: !1,
        error: body.message
      } : {
        ok: !1,
        error: "Trigger API key is invalid"
      };
    }
    if (!response.ok)
      return {
        ok: !1,
        error: `Could not connect to endpoint ${this.url}. Status code: ${response.status}`
      };
    let pongResponse = await safeParseBodyFromResponse(response, PongResponseSchema);
    if (!pongResponse)
      return {
        ok: !1,
        error: "Could not parse response from endpoint. Make sure it points to the correct URL (you might be missing /api/trigger)"
      };
    if (!pongResponse.success)
      return {
        ok: !1,
        error: `Endpoint ${this.url} responded with error: ${pongResponse.error.message}`
      };
    let headers = EndpointHeadersSchema.safeParse(Object.fromEntries(response.headers.entries()));
    return headers.success && headers.data["trigger-version"] ? {
      ...pongResponse.data,
      triggerVersion: headers.data["trigger-version"],
      triggerSdkVersion: headers.data["trigger-sdk-version"]
    } : pongResponse.data;
  }
  async indexEndpoint() {
    let startTimeInMs = import_node_perf_hooks.performance.now();
    return {
      response: await safeFetch(this.url, {
        method: "POST",
        headers: {
          Accept: "application/json",
          "x-trigger-api-key": this.apiKey,
          "x-trigger-action": "INDEX_ENDPOINT"
        },
        redirect: "manual",
        signal: AbortSignal.timeout(5e3)
      }),
      headerParser: EndpointHeadersSchema,
      parser: IndexEndpointResponseSchema,
      errorParser: ErrorWithStackSchema,
      durationInMs: Math.floor(import_node_perf_hooks.performance.now() - startTimeInMs)
    };
  }
  async executeJobRequest(options2, timeoutInMs) {
    let startTimeInMs = import_node_perf_hooks.performance.now(), response = await safeFetch(this.url, {
      method: "POST",
      headers: {
        "content-type": "application/json",
        "x-trigger-api-key": this.apiKey,
        "x-trigger-action": "EXECUTE_JOB"
      },
      body: JSON.stringify(options2),
      signal: timeoutInMs ? AbortSignal.timeout(timeoutInMs) : void 0
    });
    return response ? logger.debug("executeJobRequest() response from endpoint", {
      status: response.status,
      headers: Object.fromEntries(response.headers.entries())
    }) : logger.debug("executeJobRequest() no response from endpoint"), {
      response,
      parser: RunJobResponseSchema,
      errorParser: ErrorWithStackSchema,
      headersParser: ExecuteJobHeadersSchema,
      durationInMs: Math.floor(import_node_perf_hooks.performance.now() - startTimeInMs)
    };
  }
  async preprocessRunRequest(options2) {
    return { response: await safeFetch(this.url, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "x-trigger-api-key": this.apiKey,
        "x-trigger-action": "PREPROCESS_RUN"
      },
      body: JSON.stringify(options2)
    }), parser: PreprocessRunResponseSchema };
  }
  async initializeTrigger(id, params) {
    let response = await safeFetch(this.url, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "x-trigger-api-key": this.apiKey,
        "x-trigger-action": "INITIALIZE_TRIGGER"
      },
      body: JSON.stringify({ id, params })
    });
    if (!response)
      throw new Error(`Could not connect to endpoint ${this.url}`);
    if (!response.ok) {
      let anyBody2 = await response.json(), error = ErrorWithStackSchema.safeParse(anyBody2);
      throw error.success ? new EndpointApiError(error.data.message, error.data.stack) : new Error(`Could not connect to endpoint ${this.url}. Status code: ${response.status}`);
    }
    let anyBody = await response.json();
    return logger.debug("initializeTrigger() response from endpoint", {
      body: anyBody
    }), RegisterTriggerBodySchemaV1.parse(anyBody);
  }
  async deliverHttpSourceRequest(options2) {
    let response = await safeFetch(this.url, {
      method: "POST",
      headers: {
        "Content-Type": "application/octet-stream",
        "x-trigger-api-key": this.apiKey,
        "x-trigger-action": "DELIVER_HTTP_SOURCE_REQUEST",
        "x-ts-key": options2.key,
        "x-ts-secret": options2.secret,
        "x-ts-params": JSON.stringify(options2.params ?? {}),
        "x-ts-data": JSON.stringify(options2.data ?? {}),
        "x-ts-http-url": options2.request.url,
        "x-ts-http-method": options2.request.method,
        "x-ts-http-headers": JSON.stringify(options2.request.headers),
        ...options2.auth && { "x-ts-auth": JSON.stringify(options2.auth) },
        ...options2.dynamicId && { "x-ts-dynamic-id": options2.dynamicId },
        ...options2.metadata && { "x-ts-metadata": JSON.stringify(options2.metadata) }
      },
      body: options2.request.rawBody
    });
    if (!response)
      throw new Error(`Could not connect to endpoint ${this.url}`);
    if (!response.ok)
      throw new Error(`Could not connect to endpoint ${this.url}. Status code: ${response.status}`);
    let anyBody = await response.json();
    return logger.debug("deliverHttpSourceRequest() response from endpoint", {
      body: anyBody
    }), HttpSourceResponseSchema.parse(anyBody);
  }
  async deliverWebhookRequest(options2) {
    let response = await safeFetch(this.url, {
      method: "POST",
      headers: {
        "Content-Type": "application/octet-stream",
        "x-trigger-api-key": this.apiKey,
        "x-trigger-action": "DELIVER_WEBHOOK_REQUEST",
        "x-ts-key": options2.key,
        "x-ts-secret": options2.secret,
        "x-ts-params": JSON.stringify(options2.params ?? {}),
        "x-ts-http-url": options2.request.url,
        "x-ts-http-method": options2.request.method,
        "x-ts-http-headers": JSON.stringify(options2.request.headers)
      },
      body: options2.request.rawBody
    });
    if (!response)
      throw new Error(`Could not connect to endpoint ${this.url}`);
    if (!response.ok)
      throw new Error(`Could not connect to endpoint ${this.url}. Status code: ${response.status}`);
    let anyBody = await response.json();
    return logger.debug("deliverWebhookRequest() response from endpoint", {
      body: anyBody
    }), WebhookDeliveryResponseSchema.parse(anyBody);
  }
  async deliverHttpEndpointRequestForResponse(options2) {
    let response = await safeFetch(this.url, {
      method: "POST",
      headers: {
        "Content-Type": "application/octet-stream",
        "x-trigger-api-key": this.apiKey,
        "x-trigger-action": "DELIVER_HTTP_ENDPOINT_REQUEST_FOR_RESPONSE",
        "x-ts-key": options2.key,
        "x-ts-http-url": options2.request.url,
        "x-ts-http-method": options2.request.method,
        "x-ts-http-headers": JSON.stringify(options2.request.headers)
      },
      body: options2.request.rawBody
    });
    if (!response)
      throw new Error(`Could not connect to endpoint ${this.url}`);
    if (!response.ok)
      throw new Error(`Could not connect to endpoint ${this.url}. Status code: ${response.status}`);
    return { response, parser: NormalizedResponseSchema };
  }
  async validate() {
    let response = await safeFetch(this.url, {
      method: "POST",
      headers: {
        "x-trigger-api-key": this.apiKey,
        "x-trigger-action": "VALIDATE"
      }
    });
    if (!response)
      return {
        ok: !1,
        error: `Could not connect to endpoint ${this.url}`
      };
    if (response.status === 401) {
      let body = await safeBodyFromResponse(response, ErrorWithStackSchema);
      return body ? {
        ok: !1,
        error: body.message
      } : {
        ok: !1,
        error: "Trigger API key is invalid"
      };
    }
    if (!response.ok)
      return {
        ok: !1,
        error: `Could not connect to endpoint ${this.url}. Status code: ${response.status}`
      };
    let validateResponse = await safeParseBodyFromResponse(response, ValidateResponseSchema);
    if (!validateResponse)
      return {
        ok: !1,
        error: "Could not parse response from endpoint. Make sure it points to the correct URL (you might be missing /api/trigger)"
      };
    if (!validateResponse.success)
      return {
        ok: !1,
        error: `Endpoint ${this.url} responded with error: ${validateResponse.error.message}`
      };
    let headers = EndpointHeadersSchema.safeParse(Object.fromEntries(response.headers.entries()));
    return headers.success && headers.data["trigger-version"] ? {
      ...validateResponse.data,
      triggerVersion: headers.data["trigger-version"]
    } : validateResponse.data;
  }
  async probe(timeout) {
    let startTimeInMs = import_node_perf_hooks.performance.now();
    return {
      response: await safeFetch(this.url, {
        method: "POST",
        headers: {
          "content-type": "application/json",
          "x-trigger-api-key": this.apiKey,
          "x-trigger-action": "PROBE_EXECUTION_TIMEOUT"
        },
        body: JSON.stringify({
          timeout
        })
      }),
      durationInMs: Math.floor(import_node_perf_hooks.performance.now() - startTimeInMs)
    };
  }
  async deliverRunNotification(notification) {
    return await safeFetch(this.url, {
      method: "POST",
      headers: {
        "content-type": "application/json",
        "x-trigger-api-key": this.apiKey,
        "x-trigger-action": "RUN_NOTIFICATION"
      },
      body: JSON.stringify(notification)
    });
  }
};
async function safeFetch(url, options2) {
  try {
    return await fetch(url, addStandardRequestOptions(options2));
  } catch (error) {
    logger.debug("Error while trying to connect to endpoint", {
      url,
      error: error instanceof Error ? { name: error.name, message: error.message, stack: error.stack } : String(error)
    });
  }
}
function addStandardRequestOptions(options2) {
  return {
    ...options2,
    headers: {
      ...options2.headers,
      "user-agent": "triggerdotdev-server/2.0.0",
      "x-trigger-version": API_VERSIONS.LAZY_LOADED_CACHED_TASKS,
      accept: "application/json"
    }
  };
}

// app/services/executions/createExecutionEvent.server.ts
var CreateExecutionEventService = class {
  constructor(prismaClient = prisma) {
    this.prismaClient = prismaClient;
  }
  async call(input) {
    await this.prismaClient.$executeRaw`
      INSERT INTO "triggerdotdev_events"."run_executions" (
        "organization_id",
        "project_id",
        "environment_id",
        "job_id",
        "run_id",
        "event_time",
        "event_type",
        "drift_amount_in_ms",
        "concurrency_limit_group_id"
      ) VALUES (
        ${input.organizationId},
        ${input.projectId},
        ${input.environmentId},
        ${input.jobId},
        ${input.runId},
        ${input.eventTime},
        ${input.eventType === "start" ? 1 : -1},
        ${input.drift},
        ${input.concurrencyLimitGroupId}
      )
    `;
  }
};
async function createExecutionEvent(input, options2) {
  let service = new CreateExecutionEventService(options2?.prismaClient);
  try {
    return await service.call(input);
  } catch (error) {
    logger.error("Error creating execution event", { error });
  }
}

// app/services/runExecutionRateLimiter.server.ts
var import_ioredis3 = require("ioredis");
var FORBIDDEN_FLAG_KEY = "forbiddenFlags", PAUSED_FLAG_KEY = "pausedFlags", KEY_PREFIX2 = "tr:exec:", RedisRunExecutionRateLimiter = class {
  constructor(options2) {
    this.redis = options2?.cluster ? new import_ioredis3.Redis.Cluster(options2.cluster.startupNodes, options2.cluster.options) : new import_ioredis3.Redis(options2?.redis ?? {}), this.defaultMaxSize = options2?.defaultConcurrency ?? 10, this.windowSize = options2?.windowSize ?? 1e3 * 15 * 60, this.redis.defineCommand("beforeTask", {
      numberOfKeys: 3,
      lua: `
local setKey = KEYS[1]
local maxSizeKey = KEYS[2]
local forbiddenFlagsKey = KEYS[3]
local jobId = ARGV[1]
local timestamp = ARGV[2]
local windowSize = ARGV[3]
local forbiddenFlag = ARGV[4]
local defaultMaxSize = ARGV[5]

local maxSize = tonumber(redis.call('GET', maxSizeKey) or defaultMaxSize)
local currentSize = redis.call('ZCOUNT', setKey, timestamp - windowSize, timestamp)

if currentSize < maxSize then
    redis.call('ZADD', setKey, timestamp, jobId)

    if currentSize + 1 >= maxSize then
        redis.call('SADD', forbiddenFlagsKey, forbiddenFlag)
    end

    return true
else
    redis.call('SADD', forbiddenFlagsKey, forbiddenFlag)
  
    return false
end
      `
    }), this.redis.defineCommand("rollbackBeforeTask", {
      lua: `
for i, key in ipairs(KEYS) do
  redis.call('ZREM', key, ARGV[1])
end
      `
    }), this.redis.defineCommand("afterTask", {
      numberOfKeys: 3,
      lua: `
local setKey = KEYS[1]
local maxSizeKey = KEYS[2]
local forbiddenFlagsKey = KEYS[3]
local jobId = ARGV[1]
local timestamp = ARGV[2]
local windowSize = ARGV[3]
local forbiddenFlag = ARGV[4]
local defaultMaxSize = ARGV[5]

local maxSize = tonumber(redis.call('GET', maxSizeKey) or defaultMaxSize)

-- Remove the job ID from the ZSET
redis.call('ZREM', setKey, jobId)

-- Count the current number of jobs in the window
local currentSize = redis.call('ZCOUNT', setKey, timestamp - windowSize, timestamp)

-- The cleanup of old job IDs is now an essential part of maintaining the ZSET's size
redis.call('ZREMRANGEBYSCORE', setKey, '-inf', timestamp - windowSize)

-- Update the forbidden flags based on the current size
if currentSize < maxSize then
    -- Only remove the forbidden flag if it's no longer needed
    redis.call('SREM', forbiddenFlagsKey, forbiddenFlag)
    return true
else
    -- No need to add the forbidden flag here as it should be handled in beforeTask
    return false
end

      `
    }), this.redis instanceof import_ioredis3.Redis ? logger.debug("\u26A1 RedisGraphileRateLimiter connected to Redis", {
      host: this.redis.options.host,
      port: this.redis.options.port
    }) : logger.debug("\u26A1 RedisGraphileRateLimiter connected to Redis Cluster", {
      nodes: this.redis.nodes
    });
  }
  async forbiddenFlags() {
    return this.redis.sunion(FORBIDDEN_FLAG_KEY, PAUSED_FLAG_KEY);
  }
  async putConcurrencyLimitGroup(concurrencyLimitGroup, env6) {
    await this.setMaxSizeForFlag(
      this.flagForConcurrencyLimitGroup(concurrencyLimitGroup, env6),
      concurrencyLimitGroup.concurrencyLimit
    );
  }
  async putJobVersionConcurrencyLimit(jobVersion, env6) {
    let flag = this.flagForJobVersion(jobVersion, env6);
    typeof jobVersion.concurrencyLimit == "number" && jobVersion.concurrencyLimit > 0 ? await this.setMaxSizeForFlag(flag, jobVersion.concurrencyLimit) : await this.delMaxSizeForFlag(flag);
  }
  flagsForRun(run, version3) {
    let flags = [this.flagForOrganization(run)];
    return version3.concurrencyLimitGroup ? flags.push(
      this.flagForConcurrencyLimitGroup(version3.concurrencyLimitGroup, version3.environment)
    ) : typeof version3.concurrencyLimit == "number" && version3.concurrencyLimit > 0 && flags.push(this.flagForJobVersion(version3, version3.environment)), flags;
  }
  flagForConcurrencyLimitGroup(concurrencyLimitGroup, env6) {
    return `rl:group:${env6.id}:${env6.slug}:${concurrencyLimitGroup.name}`;
  }
  flagForOrganization(run) {
    return `rl:org:${run.organizationId}`;
  }
  flagForJobVersion(version3, env6) {
    return `rl:job:${env6.slug}:${version3.id}`;
  }
  async setMaxSizeForFlag(flag, maxSize) {
    await this.redis.set(`${flag}:maxSize`, String(maxSize));
  }
  async delMaxSizeForFlag(flag) {
    await this.redis.del(`${flag}:maxSize`);
  }
  wrapTask(t, rescheduler) {
    return async (payload, helpers) => {
      let flags = Object.keys(helpers.job.flags ?? {}).filter((flag) => flag.startsWith("rl:"));
      if (flags.length === 0)
        return t(payload, helpers);
      let passedFlags = [];
      for (let flag of flags) {
        let result = await this.#callBeforeTask(flag, String(helpers.job.id));
        if (result.status === "fulfilled" && result.value === null || result.status === "rejected")
          return logger.debug("Rolling back passed flags", {
            flag,
            passedFlags,
            jobId: String(helpers.job.id),
            result
          }), await this.#rollbackPassedFlags(passedFlags, String(helpers.job.id)), await rescheduler(payload, helpers);
        passedFlags.push(flag);
      }
      try {
        await t(payload, helpers);
      } finally {
        let afterResults = await Promise.allSettled(
          flags.map(async (flag) => this.#callAfterTask(flag, String(helpers.job.id)))
        );
      }
    };
  }
  async #callBeforeTask(flag, jobId) {
    try {
      let now = performance.now(), value = await this.redis.beforeTask(
        flag,
        `${flag}:maxSize`,
        FORBIDDEN_FLAG_KEY,
        jobId,
        String(Date.now()),
        String(this.windowSize),
        flag,
        String(this.defaultMaxSize)
      ), durationInMs = performance.now() - now;
      return {
        status: "fulfilled",
        value,
        durationInMs
      };
    } catch (error) {
      return logger.error("Failed to call beforeTask", { error, flag, jobId }), {
        status: "rejected",
        error
      };
    }
  }
  // Method for rolling back passed flags using a single Lua script
  async #rollbackPassedFlags(passedFlags, jobId) {
    passedFlags.length > 0 && await this.redis.rollbackBeforeTask(passedFlags.length, ...passedFlags, jobId);
  }
  async #callAfterTask(flag, jobId) {
    try {
      let now = performance.now(), results = await this.redis.afterTask(
        flag,
        `${flag}:maxSize`,
        FORBIDDEN_FLAG_KEY,
        jobId,
        String(Date.now()),
        String(this.windowSize),
        flag,
        String(this.defaultMaxSize)
      ), durationInMs = performance.now() - now;
      return {
        results,
        durationInMs
      };
    } catch (error) {
      logger.error("Failed to call afterTask", { error, flag, jobId });
    }
  }
}, executionRateLimiter = singleton("execution-rate-limiter", getRateLimiter);
function getRateLimiter() {
  if (env2.REDIS_HOST && env2.REDIS_PORT)
    return env2.REDIS_READER_HOST ? new RedisRunExecutionRateLimiter({
      cluster: {
        startupNodes: [
          { host: env2.REDIS_HOST, port: env2.REDIS_PORT },
          { host: env2.REDIS_READER_HOST, port: env2.REDIS_READER_PORT ?? env2.REDIS_PORT }
        ],
        options: {
          keyPrefix: KEY_PREFIX2,
          scaleReads: "slave",
          redisOptions: {
            password: env2.REDIS_PASSWORD,
            tls: {
              checkServerIdentity: () => {
              }
            },
            enableAutoPipelining: !0
          },
          dnsLookup: (address, callback) => callback(null, address),
          slotsRefreshTimeout: 1e4
        }
      },
      defaultConcurrency: env2.DEFAULT_ORG_EXECUTION_CONCURRENCY_LIMIT
    }) : new RedisRunExecutionRateLimiter({
      redis: {
        keyPrefix: KEY_PREFIX2,
        port: env2.REDIS_PORT,
        host: env2.REDIS_HOST,
        username: env2.REDIS_USERNAME,
        password: env2.REDIS_PASSWORD,
        enableAutoPipelining: !0,
        ...env2.REDIS_TLS_DISABLED === "true" ? {} : { tls: {} }
      },
      defaultConcurrency: env2.DEFAULT_ORG_EXECUTION_CONCURRENCY_LIMIT
    });
}

// app/services/runs/resumeRun.server.ts
var ResumeRunService = class {
  #prismaClient;
  constructor(prismaClient = prisma) {
    this.#prismaClient = prismaClient;
  }
  async call(id) {
    let run = await findRun(this.#prismaClient, id);
    if (run)
      switch (run.status) {
        case "ABORTED":
        case "CANCELED":
        case "FAILURE":
        case "INVALID_PAYLOAD":
        case "SUCCESS":
        case "TIMED_OUT":
        case "UNRESOLVED_AUTH":
          return;
        case "QUEUED": {
          await this.#resumeQueuedRun(run);
          break;
        }
        case "WAITING_TO_EXECUTE": {
          await this.#executeRun(run, "resume");
          break;
        }
        case "WAITING_TO_CONTINUE": {
          await this.#resumeWaitingToContinueRun(run);
          break;
        }
        case "STARTED": {
          await this.#resumeStartedRun(run);
          break;
        }
        case "PENDING":
        case "PREPROCESSING": {
          await this.#resumePendingRun(run);
          break;
        }
        case "EXECUTING":
          throw new Error("Cannot resume a run that is currently executing");
        case "WAITING_ON_CONNECTIONS":
          throw new Error("Cannot resume a run that is waiting on connections");
        default: {
          let _exhaustiveCheck = run.status;
          throw new Error(`Non-exhaustive match for value: ${run.status}`);
        }
      }
  }
  async #resumeQueuedRun(run) {
    await this.#prismaClient.jobRun.update({
      where: {
        id: run.id
      },
      data: {
        startedAt: run.startedAt ?? /* @__PURE__ */ new Date()
      }
    }), await this.#executeRun(run, "initial");
  }
  async #resumeStartedRun(run) {
    await this.#prismaClient.jobRun.update({
      where: {
        id: run.id
      },
      data: {
        status: "WAITING_TO_EXECUTE"
      }
    }), await this.#executeRun(run, "initial");
  }
  async #resumeWaitingToContinueRun(run) {
    await this.#prismaClient.jobRun.update({
      where: {
        id: run.id
      },
      data: {
        status: "WAITING_TO_EXECUTE"
      }
    }), await this.#executeRun(run, "resume");
  }
  async #resumePendingRun(run) {
    await this.#prismaClient.jobRun.update({
      where: {
        id: run.id
      },
      data: {
        status: "QUEUED",
        startedAt: /* @__PURE__ */ new Date()
      }
    }), await this.#executeRun(run, "initial");
  }
  async #executeRun(run, priority) {
    await PerformRunExecutionV3Service.enqueue(run, priority, this.#prismaClient, {
      skipRetrying: run.version.environment.type === src_exports.RuntimeEnvironmentType.DEVELOPMENT
    });
  }
  static async enqueue(run, tx, runAt) {
    return await workerQueue.enqueue(
      "resumeRun",
      {
        id: run.id
      },
      {
        tx,
        runAt: runAt ?? run.createdAt,
        jobKey: `run_resume:${run.id}`
      }
    );
  }
  static async dequeue(run, tx) {
    await workerQueue.dequeue(`run_resume:${run.id}`, {
      tx
    });
  }
};
async function findRun(prisma5, id) {
  return await prisma5.jobRun.findUnique({
    where: { id },
    include: {
      job: !0,
      version: {
        include: {
          environment: {
            include: {
              organization: !0,
              project: !0
            }
          },
          concurrencyLimitGroup: !0
        }
      }
    }
  });
}

// app/services/tasks/resumeTask.server.ts
var ResumeTaskService = class {
  #prismaClient;
  constructor(prismaClient = prisma) {
    this.#prismaClient = prismaClient;
  }
  async call(id) {
    let task = await findTask(this.#prismaClient, id);
    if (!task)
      return;
    if (task.status === "COMPLETED" || task.status === "ERRORED")
      return await this.#resumeRunExecution(task);
    let updatedTask = await this.#prismaClient.task.update({
      where: {
        id: task.id
      },
      data: {
        status: task.noop ? "COMPLETED" : "RUNNING",
        completedAt: task.noop ? /* @__PURE__ */ new Date() : void 0
      },
      include: {
        attempts: !0,
        run: {
          include: {
            environment: !0
          }
        },
        parent: !0
      }
    });
    return await this.#resumeRunExecution(updatedTask);
  }
  async #resumeRunExecution(task) {
    if (logger.debug("ResumeTaskService.call resuming run execution", {
      parent: task.parent,
      taskId: task.id,
      runId: task.run.id,
      org: task.run.organizationId,
      environment: task.run.environmentId
    }), task.parent && task.parent.childExecutionMode === "PARALLEL") {
      let children = await this.#prismaClient.task.findMany({
        where: {
          parentId: task.parent.id
        },
        select: {
          id: !0,
          status: !0
        }
      }), allChildrenCompleted = children.every(
        (child) => child.status === "COMPLETED" || child.status === "ERRORED" || child.status === "CANCELED"
      );
      if (logger.debug("ResumeTaskService.call parent executing children in parallel", {
        parentId: task.parent.id,
        allChildrenCompleted,
        children
      }), !allChildrenCompleted)
        return;
    }
    await ResumeRunService.enqueue(task.run, this.#prismaClient);
  }
  static async enqueue(id, runAt, tx) {
    return await workerQueue.enqueue("resumeTask", { id }, { tx, jobKey: `resume:${id}`, runAt });
  }
};
async function findTask(prisma5, id) {
  return prisma5.task.findUnique({
    where: { id },
    include: {
      attempts: !0,
      run: {
        include: {
          environment: !0
        }
      },
      parent: !0
    }
  });
}

// app/services/runs/forceYieldCoordinator.server.ts
var ForceYieldCoordinator = class {
  constructor(prismaClient) {
    this.inFlightRuns = /* @__PURE__ */ new Set();
    // Handle forced yield on SIGTERM
    this.handleForceYield = async () => {
      let runIds = Array.from(this.inFlightRuns), results = await this.prismaClient.jobRun.updateMany({
        where: {
          id: {
            in: runIds
          },
          forceYieldImmediately: !1
        },
        data: {
          forceYieldImmediately: !0
        }
      });
      logger.debug(
        `ForceYieldCoordinator: ${results.count}/${runIds.length} runs set to immediately force yield`
      );
    };
    this.prismaClient = prismaClient, process.on("SIGTERM", this.handleForceYield);
  }
  // Add a run to the in-flight set
  registerRun(runId) {
    this.inFlightRuns.add(runId);
  }
  // Remove a run from the in-flight set
  deregisterRun(runId) {
    this.inFlightRuns.delete(runId);
  }
}, forceYieldCoordinator = new ForceYieldCoordinator(prisma);

// app/services/runs/performRunExecutionV3.server.ts
var TOTAL_CACHED_TASK_BYTE_LIMIT = 35e5, PerformRunExecutionV3Service = class {
  #prismaClient;
  constructor(prismaClient = prisma) {
    this.#prismaClient = prismaClient;
  }
  async call(input, driftInMs = 0) {
    if (logger.debug("PerformRunExecutionV3Service.call", { input, driftInMs }), Array.isArray(input.id))
      throw logger.error("PerformRunExecutionV3Service.call: input.id is an array", { input }), new Error("input.id must be a string");
    let run = await findRun2(this.#prismaClient, input.id);
    run && await this.#executeJob(run, input, driftInMs);
  }
  static async enqueue(run, priority, tx, options2 = {}) {
    if (marqsv2 && run.version.environment.organization.v2MarqsEnabled) {
      let queue = `job/${run.job.slug}`;
      run.version.concurrencyLimitGroup && (queue = `group/${run.version.concurrencyLimitGroup.name}`);
      let runAt = priority === "initial" ? options2.runAt ?? /* @__PURE__ */ new Date() : run.startedAt ?? run.createdAt;
      await marqsv2.enqueueMessage(
        run.version.environment,
        queue,
        run.id,
        { runId: run.id, attempt: 1 },
        void 0,
        runAt.getTime()
      );
    } else
      return await executionWorker.enqueue(
        "performRunExecutionV3",
        {
          id: run.id,
          reason: "EXECUTE_JOB"
        },
        {
          tx,
          runAt: options2.runAt,
          jobKey: `job_run:EXECUTE_JOB:${run.id}`,
          maxAttempts: options2.skipRetrying ? env2.DEFAULT_DEV_ENV_EXECUTION_ATTEMPTS : void 0,
          flags: executionRateLimiter?.flagsForRun(run, run.version) ?? [],
          priority: priority === "initial" ? 0 : -1
        }
      );
  }
  static async dequeue(run, tx) {
    await executionWorker.dequeue(`job_run:EXECUTE_JOB:${run.id}`, {
      tx
    }), await marqsv2?.acknowledgeMessage(run.id);
  }
  async #executeJob(run, input, driftInMs = 0) {
    try {
      if (isRunCompleted(run.status))
        return;
      if (!run.organization.runsEnabled)
        return await this.#failRunExecution(this.#prismaClient, run, {
          message: "Unable to execute run."
        });
      if (!run.endpoint.url)
        return await this.#failRunExecution(this.#prismaClient, run, {
          message: "Endpoint has no URL set"
        });
      if (run.version.status === "DISABLED")
        return await this.#failRunExecution(
          this.#prismaClient,
          run,
          {
            message: `Job version ${run.version.version} is disabled, aborting run.`
          },
          "ABORTED"
        );
      if (run.executionDuration >= run.organization.maximumExecutionTimePerRunInMs) {
        await this.#failRunExecution(
          this.#prismaClient,
          run,
          {
            message: `Execution timed out after ${run.organization.maximumExecutionTimePerRunInMs / 1e3} seconds`
          },
          "TIMED_OUT",
          0
        );
        return;
      }
      if (run.executionCount >= MAX_JOB_RUN_EXECUTION_COUNT) {
        await this.#failRunExecution(
          this.#prismaClient,
          run,
          {
            message: `Execution timed out after ${run.executionCount} executions`
          },
          "TIMED_OUT",
          0
        );
        return;
      }
      let client3 = new EndpointApi(run.environment.apiKey, run.endpoint.url), event = eventRecordToApiJson(run.event), startedAt = /* @__PURE__ */ new Date(), connections = await resolveRunConnections(run.runConnections);
      if (!connections.success)
        return this.#failRunExecution(this.#prismaClient, run, {
          message: `Could not resolve all connections for run ${run.id}. This should not happen`
        });
      let taskCount = await getTaskCountForRun(this.#prismaClient, run.id), tasks = await getCompletedTasksForRun(this.#prismaClient, run.id), sourceContext = RunSourceContextSchema.safeParse(run.event.sourceContext), executionBody = await this.#createExecutionBody(
        run,
        tasks,
        startedAt,
        !1,
        connections.auth,
        event,
        sourceContext.success ? sourceContext.data : void 0
      );
      await this.#prismaClient.jobRun.update({
        where: {
          id: run.id
        },
        data: {
          status: "EXECUTING"
        }
      }), await createExecutionEvent({
        eventType: "start",
        eventTime: /* @__PURE__ */ new Date(),
        drift: driftInMs,
        organizationId: run.organizationId,
        environmentId: run.environmentId,
        projectId: run.projectId,
        jobId: run.jobId,
        runId: run.id,
        concurrencyLimitGroupId: run.version.concurrencyLimitGroupId
      }), forceYieldCoordinator.registerRun(run.id);
      let { response, parser, errorParser, headersParser, durationInMs } = await client3.executeJobRequest(
        executionBody,
        run.environment.type === "DEVELOPMENT" ? 6e4 * 5 : void 0
      );
      await createExecutionEvent({
        eventType: "finish",
        eventTime: /* @__PURE__ */ new Date(),
        drift: 0,
        organizationId: run.organizationId,
        environmentId: run.environmentId,
        projectId: run.projectId,
        jobId: run.jobId,
        runId: run.id,
        concurrencyLimitGroupId: run.version.concurrencyLimitGroupId
      }), forceYieldCoordinator.deregisterRun(run.id), marqsv2 && run.organization.v2MarqsEnabled && await marqsv2.acknowledgeMessage(run.id);
      let updatedRun = await this.#prismaClient.jobRun.findUnique({
        select: {
          status: !0
        },
        where: {
          id: run.id
        }
      });
      if (!updatedRun || updatedRun.status === "CANCELED")
        return;
      if (!response)
        return await this.#failRunExecutionWithRetry(
          run,
          input.lastAttempt,
          {
            message: `Connection could not be established to the endpoint (${run.endpoint.url})`
          },
          durationInMs
        );
      let rawHeaders = Object.fromEntries(response.headers.entries()), headers = headersParser.safeParse(rawHeaders);
      headers.success && headers.data["trigger-version"] && headers.data["trigger-version"] !== run.endpoint.version && await this.#prismaClient.endpoint.update({
        where: {
          id: run.endpoint.id
        },
        data: {
          version: headers.data["trigger-version"]
        }
      }), headers.success && headers.data["x-trigger-run-metadata"] && !run.internal && (logger.debug("Endpoint responded with run metadata", {
        metadata: headers.data["x-trigger-run-metadata"]
      }), headers.data["x-trigger-run-metadata"].successSubscription && !run.subscriptions.some((s) => s.event === "SUCCESS") && await this.#prismaClient.jobRunSubscription.upsert({
        where: {
          runId_recipient_event: {
            runId: run.id,
            recipient: run.endpoint.id,
            event: "SUCCESS"
          }
        },
        create: {
          runId: run.id,
          recipient: run.endpoint.id,
          recipientMethod: "ENDPOINT",
          event: "SUCCESS",
          status: "ACTIVE"
        },
        update: {}
      }), headers.data["x-trigger-run-metadata"].failedSubscription && !run.subscriptions.some((s) => s.event === "FAILURE") && await this.#prismaClient.jobRunSubscription.upsert({
        where: {
          runId_recipient_event: {
            runId: run.id,
            recipient: run.endpoint.id,
            event: "FAILURE"
          }
        },
        create: {
          runId: run.id,
          recipient: run.endpoint.id,
          recipientMethod: "ENDPOINT",
          event: "FAILURE",
          status: "ACTIVE"
        },
        update: {}
      }));
      let rawBody = await response.text();
      if (!response.ok) {
        logger.debug("Endpoint responded with non-200 status code", {
          status: response.status,
          runId: run.id,
          endpoint: run.endpoint.url,
          headers: rawHeaders,
          rawBody
        });
        let errorBody = safeJsonZodParse(errorParser, rawBody);
        return errorBody && errorBody.success ? response.status >= 400 && response.status <= 499 ? await this.#failRunExecution(this.#prismaClient, run, errorBody.data) : await this.#failRunExecutionWithRetry(
          run,
          input.lastAttempt,
          errorBody.data,
          durationInMs
        ) : response.status >= 400 && response.status <= 499 && response.status !== 408 ? await this.#failRunExecution(
          this.#prismaClient,
          run,
          {
            message: `Endpoint responded with ${response.status} status code`
          },
          "FAILURE",
          durationInMs
        ) : detectResponseIsTimeout(rawBody, response) ? await this.#resumeRunExecutionAfterTimeout(
          this.#prismaClient,
          run,
          input,
          durationInMs,
          taskCount
        ) : await this.#failRunExecutionWithRetry(
          run,
          input.lastAttempt,
          {
            message: `Endpoint responded with ${response.status} status code`
          },
          durationInMs
        );
      }
      let safeBody = safeJsonZodParse(parser, rawBody);
      if (!safeBody)
        return await this.#failRunExecution(
          this.#prismaClient,
          run,
          {
            message: "Endpoint responded with invalid JSON"
          },
          "FAILURE",
          durationInMs
        );
      if (!safeBody.success)
        return await this.#failRunExecution(
          this.#prismaClient,
          run,
          {
            message: (0, import_zod_error.generateErrorMessage)(safeBody.error.issues)
          },
          "FAILURE",
          durationInMs
        );
      let status = safeBody.data.status;
      switch (logger.debug("Endpoint responded with status", {
        status,
        data: safeBody.data
      }), status) {
        case "SUCCESS": {
          await this.#completeRunWithSuccess(run, safeBody.data, durationInMs);
          break;
        }
        case "RESUME_WITH_TASK": {
          await this.#resumeRunWithTask(run, safeBody.data, durationInMs);
          break;
        }
        case "ERROR": {
          await this.#failRunWithError(run, safeBody.data, durationInMs);
          break;
        }
        case "RETRY_WITH_TASK": {
          await this.#retryRunWithTask(run, safeBody.data, durationInMs);
          break;
        }
        case "CANCELED":
          break;
        case "UNRESOLVED_AUTH_ERROR": {
          await this.#failRunWithUnresolvedAuthError(run, safeBody.data, durationInMs);
          break;
        }
        case "INVALID_PAYLOAD": {
          await this.#failRunWithInvalidPayloadError(run, safeBody.data, durationInMs);
          break;
        }
        case "YIELD_EXECUTION": {
          await this.#resumeYieldedRun(run, safeBody.data.key, durationInMs);
          break;
        }
        case "AUTO_YIELD_EXECUTION": {
          await this.#resumeAutoYieldedRun(run, safeBody.data, durationInMs);
          break;
        }
        case "AUTO_YIELD_EXECUTION_WITH_COMPLETED_TASK": {
          await this.#resumeAutoYieldedRunWithCompletedTask(run, safeBody.data, durationInMs);
          break;
        }
        case "AUTO_YIELD_RATE_LIMIT": {
          await this.#rescheduleRun(run, safeBody.data.reset, durationInMs);
          break;
        }
        case "RESUME_WITH_PARALLEL_TASK": {
          await this.#resumeParallelRunWithTask(run, safeBody.data, durationInMs);
          break;
        }
        default: {
          let _exhaustiveCheck = status;
          throw new Error(`Non-exhaustive match for value: ${status}`);
        }
      }
    } finally {
      forceYieldCoordinator.deregisterRun(run.id);
    }
  }
  async #createExecutionBody(run, tasks, startedAt, isRetry, connections, event, source) {
    if (supportsFeature("lazyLoadedCachedTasks", run.endpoint.version)) {
      let preparedTasks2 = prepareTasksForCaching(tasks, TOTAL_CACHED_TASK_BYTE_LIMIT);
      return {
        event,
        job: {
          id: run.version.job.slug,
          version: run.version.version
        },
        run: {
          id: run.id,
          isTest: run.isTest,
          startedAt,
          isRetry
        },
        environment: {
          id: run.environment.id,
          slug: run.environment.slug,
          type: run.environment.type
        },
        organization: {
          id: run.organization.id,
          slug: run.organization.slug,
          title: run.organization.title
        },
        project: {
          id: run.project.id,
          slug: run.project.slug,
          name: run.project.name
        },
        account: run.externalAccount ? {
          id: run.externalAccount.identifier,
          metadata: run.externalAccount.metadata
        } : void 0,
        connections,
        source,
        tasks: preparedTasks2.tasks,
        cachedTaskCursor: preparedTasks2.cursor,
        noopTasksSet: prepareNoOpTasksBloomFilter(tasks),
        yieldedExecutions: run.yieldedExecutions,
        runChunkExecutionLimit: run.endpoint.runChunkExecutionLimit - 350,
        autoYieldConfig: {
          startTaskThreshold: run.endpoint.startTaskThreshold,
          beforeExecuteTaskThreshold: run.endpoint.beforeExecuteTaskThreshold,
          beforeCompleteTaskThreshold: run.endpoint.beforeCompleteTaskThreshold,
          afterCompleteTaskThreshold: run.endpoint.afterCompleteTaskThreshold
        }
      };
    }
    let preparedTasks = prepareTasksForCachingLegacy(tasks, TOTAL_CACHED_TASK_BYTE_LIMIT);
    return {
      event,
      job: {
        id: run.version.job.slug,
        version: run.version.version
      },
      run: {
        id: run.id,
        isTest: run.isTest,
        startedAt,
        isRetry
      },
      environment: {
        id: run.environment.id,
        slug: run.environment.slug,
        type: run.environment.type
      },
      organization: {
        id: run.organization.id,
        slug: run.organization.slug,
        title: run.organization.title
      },
      project: {
        id: run.project.id,
        slug: run.project.slug,
        name: run.project.name
      },
      account: run.externalAccount ? {
        id: run.externalAccount.identifier,
        metadata: run.externalAccount.metadata
      } : void 0,
      connections,
      source,
      tasks: preparedTasks.tasks
    };
  }
  async #completeRunWithSuccess(run, data2, durationInMs) {
    await $transaction(this.#prismaClient, async (tx) => {
      await tx.jobRun.update({
        where: { id: run.id },
        data: {
          completedAt: /* @__PURE__ */ new Date(),
          status: "SUCCESS",
          output: data2.output ?? void 0,
          executionDuration: {
            increment: durationInMs
          },
          executionCount: {
            increment: 1
          }
        }
      }), await workerQueue.enqueue(
        "deliverRunSubscriptions",
        {
          id: run.id
        },
        { tx }
      );
    });
  }
  async #resumeRunWithTask(run, data2, durationInMs, executionCountIncrement = 1) {
    return await $transaction(this.#prismaClient, async (tx) => {
      await tx.jobRun.update({
        where: { id: run.id },
        data: {
          status: "WAITING_TO_CONTINUE",
          executionDuration: {
            increment: durationInMs
          },
          executionCount: {
            increment: executionCountIncrement
          }
        }
      }), data2.task.outputProperties && await tx.task.update({
        where: {
          id: data2.task.id
        },
        data: {
          outputProperties: data2.task.outputProperties
        }
      }), !data2.task.operation && !data2.task.callbackUrl && await ResumeTaskService.enqueue(data2.task.id, data2.task.delayUntil ?? void 0, tx);
    });
  }
  async #resumeParallelRunWithTask(run, data2, durationInMs) {
    await this.#prismaClient.jobRun.update({
      where: { id: run.id },
      data: {
        executionDuration: {
          increment: durationInMs
        },
        executionCount: {
          increment: 1
        },
        forceYieldImmediately: !1
      }
    }), data2.task.outputProperties && await this.#prismaClient.task.update({
      where: {
        id: data2.task.id
      },
      data: {
        outputProperties: data2.task.outputProperties
      }
    });
    for (let childError of data2.childErrors)
      switch (childError.status) {
        case "AUTO_YIELD_EXECUTION": {
          await this.#resumeAutoYieldedRun(run, childError, 0, 0);
          break;
        }
        case "AUTO_YIELD_EXECUTION_WITH_COMPLETED_TASK": {
          await this.#resumeAutoYieldedRunWithCompletedTask(run, childError, 0, 0);
          break;
        }
        case "AUTO_YIELD_RATE_LIMIT": {
          await this.#rescheduleRun(run, childError.reset, durationInMs);
          break;
        }
        case "CANCELED":
          break;
        case "ERROR":
          return await this.#failRunExecution(
            this.#prismaClient,
            run,
            childError.error ?? void 0,
            "FAILURE",
            durationInMs
          );
        case "INVALID_PAYLOAD":
          return await this.#failRunExecution(
            this.#prismaClient,
            run,
            childError.errors,
            "INVALID_PAYLOAD",
            durationInMs
          );
        case "RESUME_WITH_TASK": {
          await this.#resumeRunWithTask(run, childError, 0, 0);
          break;
        }
        case "RETRY_WITH_TASK": {
          await this.#retryRunWithTask(run, childError, 0, 0);
          break;
        }
        case "UNRESOLVED_AUTH_ERROR":
          return await this.#failRunExecution(
            this.#prismaClient,
            run,
            childError.issues,
            "UNRESOLVED_AUTH",
            durationInMs
          );
        case "YIELD_EXECUTION": {
          await this.#resumeYieldedRun(run, childError.key, 0, 0);
          break;
        }
      }
  }
  async #failRunWithError(execution, data2, durationInMs) {
    return await $transaction(this.#prismaClient, async (tx) => {
      data2.task && await tx.task.update({
        where: {
          id: data2.task.id
        },
        data: {
          status: "ERRORED",
          completedAt: /* @__PURE__ */ new Date(),
          output: data2.error ?? void 0
        }
      }), await this.#failRunExecution(tx, execution, data2.error ?? void 0, "FAILURE", durationInMs);
    });
  }
  async #failRunWithUnresolvedAuthError(execution, data2, durationInMs) {
    return await $transaction(this.#prismaClient, async (tx) => {
      await this.#failRunExecution(tx, execution, data2.issues, "UNRESOLVED_AUTH", durationInMs);
    });
  }
  async #failRunWithInvalidPayloadError(execution, data2, durationInMs) {
    return await $transaction(this.#prismaClient, async (tx) => {
      await this.#failRunExecution(tx, execution, data2.errors, "INVALID_PAYLOAD", durationInMs);
    });
  }
  async #resumeYieldedRun(run, key, durationInMs, executionCount = 1) {
    await $transaction(this.#prismaClient, async (tx) => {
      if (run.yieldedExecutions.length + 1 > 100)
        return await this.#failRunExecution(
          tx,
          run,
          {
            message: `Run has yielded too many times, the maximum is ${100}`
          },
          "FAILURE",
          durationInMs
        );
      await tx.jobRun.update({
        where: {
          id: run.id
        },
        data: {
          status: "WAITING_TO_EXECUTE",
          executionDuration: {
            increment: durationInMs
          },
          executionCount: {
            increment: executionCount
          },
          yieldedExecutions: {
            push: key
          },
          forceYieldImmediately: !1
        },
        select: {
          yieldedExecutions: !0,
          executionCount: !0
        }
      }), await ResumeRunService.enqueue(run, tx);
    });
  }
  async #rescheduleRun(run, reset, durationInMs, executionCount = 1) {
    await $transaction(this.#prismaClient, async (tx) => {
      await tx.jobRun.update({
        where: {
          id: run.id
        },
        data: {
          status: "WAITING_TO_EXECUTE",
          executionDuration: {
            increment: durationInMs
          },
          executionCount: {
            increment: executionCount
          },
          forceYieldImmediately: !1
        },
        select: {
          executionCount: !0
        }
      }), await ResumeRunService.enqueue(run, tx, new Date(reset));
    });
  }
  async #resumeAutoYieldedRunWithCompletedTask(run, data2, durationInMs, executionCount = 1) {
    await $transaction(this.#prismaClient, async (tx) => {
      let task = await new CompleteRunTaskService(tx).call(run.environment, run.id, data2.id, {
        properties: data2.properties,
        output: data2.output ? JSON.parse(data2.output) : void 0
      });
      if (!task || task.status === "ERRORED")
        return await this.#failRunExecution(
          tx,
          run,
          {
            message: task ? `Task '${task.name}' failed to complete` : "Task failed to complete"
          },
          "FAILURE",
          durationInMs
        );
      await tx.jobRun.update({
        where: {
          id: run.id
        },
        data: {
          executionDuration: {
            increment: durationInMs
          },
          executionCount: {
            increment: executionCount
          },
          autoYieldExecution: {
            create: [
              {
                location: data2.data.location,
                timeRemaining: data2.data.timeRemaining,
                timeElapsed: data2.data.timeElapsed,
                limit: data2.data.limit ?? 0
              }
            ]
          },
          forceYieldImmediately: !1,
          status: "WAITING_TO_EXECUTE"
        },
        select: {
          executionCount: !0
        }
      }), await ResumeRunService.enqueue(run, tx);
    });
  }
  async #resumeAutoYieldedRun(run, data2, durationInMs, executionCount = 1) {
    await $transaction(this.#prismaClient, async (tx) => {
      await tx.jobRun.update({
        where: {
          id: run.id
        },
        data: {
          status: "WAITING_TO_EXECUTE",
          executionDuration: {
            increment: durationInMs
          },
          executionCount: {
            increment: executionCount
          },
          autoYieldExecution: {
            create: [
              {
                location: data2.location,
                timeRemaining: data2.timeRemaining,
                timeElapsed: data2.timeElapsed,
                limit: data2.limit ?? 0
              }
            ]
          },
          forceYieldImmediately: !1
        },
        select: {
          executionCount: !0
        }
      }), await ResumeRunService.enqueue(run, tx);
    });
  }
  async #retryRunWithTask(run, data2, durationInMs, executionCount = 1) {
    return await $transaction(this.#prismaClient, async (tx) => {
      let existingAttempt = await tx.taskAttempt.findFirst({
        where: {
          taskId: data2.task.id,
          status: "PENDING"
        },
        orderBy: {
          number: "desc"
        }
      });
      existingAttempt && await tx.taskAttempt.update({
        where: {
          id: existingAttempt.id
        },
        data: {
          status: "ERRORED",
          error: formatError(data2.error)
        }
      }), await tx.taskAttempt.create({
        data: {
          taskId: data2.task.id,
          number: existingAttempt ? existingAttempt.number + 1 : 1,
          status: "PENDING",
          runAt: data2.retryAt
        }
      }), await tx.task.update({
        where: {
          id: data2.task.id
        },
        data: {
          status: "WAITING",
          run: {
            update: {
              status: "WAITING_TO_CONTINUE",
              executionDuration: {
                increment: durationInMs
              },
              executionCount: {
                increment: executionCount
              }
            }
          }
        }
      }), await ResumeTaskService.enqueue(data2.task.id, data2.retryAt, tx);
    });
  }
  async #resumeRunExecutionAfterTimeout(prisma5, run, input, durationInMs, existingTaskCount) {
    await $transaction(prisma5, async (tx) => {
      if (run.executionDuration + durationInMs >= run.organization.maximumExecutionTimePerRunInMs) {
        await this.#failRunExecution(
          tx,
          run,
          {
            message: `Execution timed out after ${run.organization.maximumExecutionTimePerRunInMs / 1e3} seconds`
          },
          "TIMED_OUT",
          durationInMs
        );
        return;
      }
      if (await getTaskCountForRun(tx, run.id) === existingTaskCount) {
        let latestTask = await tx.task.findFirst({
          select: {
            id: !0,
            name: !0,
            status: !0,
            displayKey: !0
          },
          where: {
            runId: run.id,
            status: "RUNNING"
          },
          orderBy: {
            createdAt: "desc"
          },
          take: 1
        }), cause = latestTask?.status === "RUNNING" ? `This is likely caused by task "${latestTask.displayKey ?? latestTask.name}" execution exceeding the function timeout` : "This is likely caused by executing code outside of a task that exceeded the function timeout";
        await this.#failRunExecution(
          tx,
          run,
          {
            message: `Function timeout detected in ${durationInMs / 1e3}s without any task creation. This is unexpected behavior and could lead to an infinite execution error because the run will never finish. ${cause}`
          },
          "TIMED_OUT",
          durationInMs
        );
        return;
      }
      await tx.jobRun.update({
        where: {
          id: run.id
        },
        data: {
          executionDuration: {
            increment: durationInMs
          },
          executionCount: {
            increment: 1
          },
          endpoint: {
            update: {
              // Never allow the execution limit to be less than 10 seconds or more than MAX_RUN_CHUNK_EXECUTION_LIMIT
              runChunkExecutionLimit: Math.min(
                Math.max(durationInMs, 1e4),
                12e4
              )
            }
          },
          forceYieldImmediately: !1,
          status: "WAITING_TO_EXECUTE"
        }
      }), await ResumeRunService.enqueue(run, tx);
    });
  }
  async #failRunExecutionWithRetry(run, lastAttempt, output, durationInMs = 0) {
    if (lastAttempt)
      return await this.#failRunExecution(this.#prismaClient, run, output);
    let updatedJob = await this.#prismaClient.jobRun.update({
      where: { id: run.id },
      data: {
        status: "WAITING_TO_EXECUTE",
        executionFailureCount: {
          increment: 1
        }
      }
    });
    if (updatedJob.executionFailureCount >= 10)
      return await this.#failRunExecution(this.#prismaClient, run, output);
    let runAt = new Date(Date.now() + Math.pow(1.5, updatedJob.executionFailureCount) * 500);
    await ResumeRunService.enqueue(run, this.#prismaClient, runAt);
  }
  async #failRunExecution(prisma5, run, output, status = "FAILURE", durationInMs = 0) {
    await $transaction(prisma5, async (tx) => {
      await tx.jobRun.update({
        where: { id: run.id },
        data: {
          completedAt: /* @__PURE__ */ new Date(),
          status,
          output,
          executionDuration: {
            increment: durationInMs
          },
          executionCount: {
            increment: 1
          },
          tasks: {
            updateMany: {
              where: {
                status: {
                  in: ["WAITING", "RUNNING", "PENDING"]
                }
              },
              data: {
                status: status === "TIMED_OUT" ? "CANCELED" : "ERRORED",
                completedAt: /* @__PURE__ */ new Date()
              }
            }
          },
          forceYieldImmediately: !1
        }
      }), await workerQueue.enqueue(
        "deliverRunSubscriptions",
        {
          id: run.id
        },
        { tx }
      );
    });
  }
};
function prepareNoOpTasksBloomFilter(possibleTasks) {
  let tasks = possibleTasks.filter((task) => task.status === "COMPLETED" && task.noop), filter = new BloomFilter(BloomFilter.NOOP_TASK_SET_SIZE);
  for (let task of tasks)
    filter.add(task.idempotencyKey);
  return filter.serialize();
}
async function getTaskCountForRun(prisma5, runId) {
  return await prisma5.task.count({
    where: {
      runId
    }
  });
}
async function getCompletedTasksForRun(prisma5, runId) {
  return await prisma5.task.findMany({
    where: {
      runId,
      status: "COMPLETED"
    },
    select: {
      id: !0,
      idempotencyKey: !0,
      status: !0,
      noop: !0,
      output: !0,
      outputIsUndefined: !0,
      parentId: !0
    },
    orderBy: {
      id: "asc"
    }
  });
}
async function findRun2(prisma5, id) {
  return await prisma5.jobRun.findUnique({
    where: { id },
    include: {
      environment: {
        include: {
          project: !0,
          organization: !0
        }
      },
      endpoint: !0,
      organization: !0,
      project: !0,
      externalAccount: !0,
      runConnections: {
        include: {
          integration: !0,
          connection: {
            include: {
              dataReference: !0
            }
          }
        }
      },
      event: !0,
      version: {
        include: {
          job: !0,
          organization: !0
        }
      },
      subscriptions: {
        where: {
          recipientMethod: "ENDPOINT"
        }
      }
    }
  });
}

// app/v3/friendlyIdentifiers.ts
var import_nanoid2 = require("nanoid"), idGenerator = (0, import_nanoid2.customAlphabet)("123456789abcdefghijkmnopqrstuvwxyz", 21);
function generateFriendlyId(prefix, size) {
  return `${prefix}_${idGenerator(size)}`;
}

// app/v3/marqs/requeueV2Message.server.ts
var RequeueV2Message = class extends BaseService {
  async call(runId) {
    logger.debug("[RequeueV2Message] Requeueing task run", { runId }), marqsv2?.nackMessage(runId);
  }
  static async enqueue(runId, runAt, tx) {
    return await workerQueue.enqueue(
      "v2.requeueMessage",
      { runId },
      { runAt, jobKey: `requeueV2Message:${runId}` }
    );
  }
  static async dequeue(runId, tx) {
    return await workerQueue.dequeue(`requeueV2Message:${runId}`, { tx });
  }
};

// app/v3/marqs/v2.server.ts
var KEY_PREFIX3 = "marqsv2:", SHARED_QUEUE_NAME = "sharedQueue", V2VisibilityTimeout = class {
  async heartbeat(messageId, timeoutInMs) {
    RequeueV2Message.enqueue(messageId, new Date(Date.now() + timeoutInMs));
  }
  async cancelHeartbeat(messageId) {
    RequeueV2Message.dequeue(messageId);
  }
}, MarQSV2KeyProducer = class extends MarQSShortKeyProducer {
  constructor(prefix) {
    super(prefix);
  }
  envSharedQueueKey(env6) {
    return SHARED_QUEUE_NAME;
  }
  sharedQueueKey() {
    return SHARED_QUEUE_NAME;
  }
}, marqsv2 = singleton("marqsv2", getMarQSClient2);
function getMarQSClient2() {
  if (env2.V2_MARQS_ENABLED === "0")
    return;
  if (!env2.REDIS_HOST || !env2.REDIS_PORT)
    throw new Error(
      "Could not initialize marqsv2 because process.env.REDIS_HOST and process.env.REDIS_PORT are required to be set. Trigger.dev v2 will not work without this."
    );
  let redisOptions = {
    keyPrefix: KEY_PREFIX3,
    port: env2.REDIS_PORT,
    host: env2.REDIS_HOST,
    username: env2.REDIS_USERNAME,
    password: env2.REDIS_PASSWORD,
    enableAutoPipelining: !0,
    ...env2.REDIS_TLS_DISABLED === "true" ? {} : { tls: {} }
  };
  return new MarQS({
    verbose: env2.V2_MARQS_VERBOSE === "1",
    name: "marqsv2",
    tracer: import_api10.trace.getTracer("marqsv2"),
    visibilityTimeoutStrategy: new V2VisibilityTimeout(),
    keysProducer: new MarQSV2KeyProducer(KEY_PREFIX3),
    queuePriorityStrategy: new SimpleWeightedChoiceStrategy({
      queueSelectionCount: env2.V2_MARQS_QUEUE_SELECTION_COUNT
    }),
    envQueuePriorityStrategy: new NoopWeightedChoiceStrategy(),
    // We don't use this in v2, since all queues go through the shared queue
    workers: 0,
    redis: redisOptions,
    defaultEnvConcurrency: env2.V2_MARQS_DEFAULT_ENV_CONCURRENCY,
    // this is so we aren't limited by the environment concurrency
    defaultOrgConcurrency: env2.DEFAULT_ORG_EXECUTION_CONCURRENCY_LIMIT,
    visibilityTimeoutInMs: env2.V2_MARQS_VISIBILITY_TIMEOUT_MS,
    // 15 minutes
    enableRebalancing: !1
  });
}
var MessageBody = import_zod42.z.object({
  version: import_zod42.z.literal("v1").default("v1"),
  runId: import_zod42.z.string(),
  attempt: import_zod42.z.number().default(1)
}), V2QueueConsumer = class {
  constructor(_options = {}) {
    this._options = _options;
    this._enabled = !1;
    this._retryOptions = {
      maxAttempts: 3,
      factor: 2,
      minTimeoutInMs: 1e3,
      maxTimeoutInMs: 6e4,
      randomize: !0
    };
    this._pollInterval = this._options.pollInterval || 1e3, this._retryOptions = {
      ...this._retryOptions,
      ...this._options.retryOptions
    }, this._id = generateFriendlyId("v2-consumer", 6);
  }
  async start(startDelay = 0) {
    if (!this._enabled)
      return this._enabled = !0, await new Promise((resolve) => setTimeout(resolve, startDelay)), await new Promise((resolve) => setTimeout(resolve, startDelay)), logger.debug("[marqsv2] Starting V2QueueConsumer", {
        startDelay
      }), this.#doWork().catch(console.error);
  }
  async stop() {
    this._enabled && (logger.debug("[marqsv2] Stopping V2QueueConsumer"), this._enabled = !1);
  }
  async #doWork() {
    this._enabled && await this.#doWorkInternal();
  }
  async #doWorkInternal() {
    let message = await marqsv2?.dequeueMessageInSharedQueue(this._id);
    if (!message) {
      setTimeout(() => this.#doWork(), this._pollInterval);
      return;
    }
    let messageBody = MessageBody.safeParse(message.data);
    if (!messageBody.success) {
      logger.error("[marqsv2] Failed to parse message", {
        queueMessage: message.data,
        error: messageBody.error
      }), await marqsv2?.acknowledgeMessage(message.messageId), setTimeout(() => this.#doWork(), this._pollInterval);
      return;
    }
    logger.debug("[V2QueueConsumer] Received message", {
      messageData: messageBody.data
    });
    try {
      await new PerformRunExecutionV3Service().call({
        id: messageBody.data.runId,
        reason: "EXECUTE_JOB",
        isRetry: !1,
        lastAttempt: !1
      });
    } catch (error) {
      logger.error("[marqsv2] Failed to execute job", {
        runId: messageBody.data.runId,
        error
      });
      let attempt = messageBody.data.attempt + 1, retryDelay = calculateNextRetryDelay(this._retryOptions, attempt);
      retryDelay ? await marqsv2?.nackMessage(message.messageId, Date.now() + retryDelay, {
        attempt
      }) : (logger.error("[marqsv2] Job failed after max attempts", {
        runId: messageBody.data.runId,
        attempt
      }), await marqsv2?.acknowledgeMessage(message.messageId));
    } finally {
      setTimeout(() => this.#doWork(), this._pollInterval);
    }
  }
}, V2QueueConsumerPool = class {
  constructor(opts) {
    this.opts = opts;
    this.#consumers = Array(opts.poolSize).fill(null).map((_, i) => new V2QueueConsumer({ pollInterval: opts.pollInterval })), process.on("SIGTERM", this.#handleSignal.bind(this)), process.on("SIGINT", this.#handleSignal.bind(this));
  }
  #consumers;
  #shuttingDown = !1;
  async start() {
    await Promise.allSettled(
      this.#consumers.map(
        (consumer, i) => consumer.start(i * (this.opts.pollInterval / this.opts.poolSize))
      )
    );
  }
  async stop() {
    await Promise.allSettled(this.#consumers.map((consumer) => consumer.stop()));
  }
  async #handleSignal(signal) {
    this.#shuttingDown || (this.#shuttingDown = !0, logger.debug(`[V2QueueConsumerPool] Received ${signal}, shutting down...`), this.stop().finally(() => {
      logger.debug("V2QueueConsumerPool shutdown");
    }));
  }
}, v2QueueConsumerPool = singleton("v2QueueConsumerPool", initalizePool);
async function initalizePool() {
  if (env2.V2_MARQS_ENABLED === "0" || env2.V2_MARQS_CONSUMER_POOL_ENABLED === "0")
    return;
  console.log(
    `\u{1F3B1} Initializing V2QueueConsumerPool (poolSize=${env2.V2_MARQS_CONSUMER_POOL_SIZE}, pollInterval=${env2.V2_MARQS_CONSUMER_POLL_INTERVAL_MS})`
  );
  let pool = new V2QueueConsumerPool({
    poolSize: env2.V2_MARQS_CONSUMER_POOL_SIZE,
    pollInterval: env2.V2_MARQS_CONSUMER_POLL_INTERVAL_MS
  });
  return await pool.start(), pool;
}
async function putConcurrencyLimitGroup(concurrencyLimitGroup, env6) {
  logger.debug("[marqsv2] Updating concurrency limit group", {
    concurrencyLimitGroup,
    environment: env6
  }), await marqsv2?.updateQueueConcurrencyLimits(
    env6,
    `group/${concurrencyLimitGroup.name}`,
    concurrencyLimitGroup.concurrencyLimit
  );
}
async function putJobConcurrencyLimit(job, version3, env6) {
  logger.debug("[marqsv2] Updating job concurrency limit", {
    job,
    version: version3,
    environment: env6
  }), typeof version3.concurrencyLimit == "number" && version3.concurrencyLimit > 0 ? await marqsv2?.updateQueueConcurrencyLimits(env6, `job/${job.slug}`, version3.concurrencyLimit) : await marqsv2?.removeQueueConcurrencyLimits(env6, `job/${job.slug}`);
}

// app/v3/marqs/concurrencyMonitor.server.ts
var MarqsConcurrencyMonitor = class {
  constructor(marqs2, callback, options2 = {}) {
    this.marqs = marqs2;
    this.callback = callback;
    this.options = options2;
    this._logger = logger.child({
      component: "marqs",
      operation: "concurrencyMonitor",
      dryRun: this.dryRun,
      marqs: marqs2.name
    });
  }
  get dryRun() {
    return typeof this.options.dryRun == "boolean" ? this.options.dryRun : !1;
  }
  get keys() {
    return this.marqs.keys;
  }
  get signal() {
    return this.options.abortSignal;
  }
  async call() {
    this._logger.debug("[MarqsConcurrencyMonitor] Initiating monitoring");
    let stats = {
      streamCallbacks: 0,
      processedKeys: 0
    }, { stream, redis } = this.marqs.queueConcurrencyScanStream(
      10,
      () => {
        this._logger.debug("[MarqsConcurrencyMonitor] stream closed", {
          stats
        });
      },
      (error) => {
        this._logger.debug("[MarqsConcurrencyMonitor] stream error", {
          stats,
          error: {
            name: error.name,
            message: error.message,
            stack: error.stack
          }
        });
      }
    );
    stream.on("data", async (keys) => {
      if (stream.pause(), this.signal?.aborted) {
        stream.destroy();
        return;
      }
      stats.streamCallbacks++;
      let uniqueKeys = Array.from(new Set(keys));
      if (uniqueKeys.length === 0) {
        stream.resume();
        return;
      }
      this._logger.debug("[MarqsConcurrencyMonitor] correcting queues concurrency", {
        keys: uniqueKeys
      }), stats.processedKeys += uniqueKeys.length, await Promise.allSettled(uniqueKeys.map((key) => this.#processKey(key, redis))).finally(
        () => {
          stream.resume();
        }
      );
    });
  }
  async #processKey(key, redis) {
    key = this.keys.stripKeyPrefix(key);
    let orgKey = this.keys.orgCurrentConcurrencyKeyFromQueue(key), envKey = this.keys.envCurrentConcurrencyKeyFromQueue(key), runIds = [];
    try {
      runIds = await redis.sunion(orgKey, envKey, key);
    } catch (e) {
      this._logger.error("[MarqsConcurrencyMonitor] error during sunion", {
        key,
        orgKey,
        envKey,
        runIds,
        error: e
      });
    }
    if (runIds.length === 0)
      return;
    let perfNow = performance.now(), completeRuns = await this.callback(runIds), durationMs = performance.now() - perfNow, completedRunIds = completeRuns.map((run) => run.id);
    if (completedRunIds.length === 0) {
      this._logger.debug("[MarqsConcurrencyMonitor] no completed runs found", {
        key,
        orgKey,
        envKey,
        runIds,
        durationMs
      });
      return;
    }
    if (this._logger.debug("[MarqsConcurrencyMonitor] removing completed runs from queue", {
      key,
      orgKey,
      envKey,
      completedRunIds,
      durationMs
    }), this.dryRun)
      return;
    let pipeline2 = redis.pipeline();
    pipeline2.srem(key, ...completedRunIds), pipeline2.srem(orgKey, ...completedRunIds), pipeline2.srem(envKey, ...completedRunIds);
    try {
      await pipeline2.exec();
    } catch (e) {
      this._logger.error("[MarqsConcurrencyMonitor] error removing completed runs from queue", {
        key,
        orgKey,
        envKey,
        completedRunIds,
        error: e
      });
    }
  }
  static async initiateV3Monitoring(abortSignal) {
    if (!marqs)
      return;
    await new MarqsConcurrencyMonitor(
      marqs,
      (runIds) => prisma.taskRun.findMany({
        select: { id: !0 },
        where: {
          id: {
            in: runIds
          },
          status: {
            in: [
              "CANCELED",
              "COMPLETED_SUCCESSFULLY",
              "COMPLETED_WITH_ERRORS",
              "CRASHED",
              "SYSTEM_FAILURE",
              "INTERRUPTED"
            ]
          }
        }
      }),
      { dryRun: env2.V3_MARQS_CONCURRENCY_MONITOR_ENABLED === "0", abortSignal }
    ).call();
  }
  static async initiateV2Monitoring(abortSignal) {
    if (!marqsv2)
      return;
    await new MarqsConcurrencyMonitor(
      marqsv2,
      (runIds) => prisma.jobRun.findMany({
        select: { id: !0 },
        where: {
          id: {
            in: runIds
          },
          status: {
            in: [
              "CANCELED",
              "SUCCESS",
              "FAILURE",
              "TIMED_OUT",
              "ABORTED",
              "CANCELED",
              "INVALID_PAYLOAD"
            ]
          }
        }
      }),
      { dryRun: env2.V2_MARQS_CONCURRENCY_MONITOR_ENABLED === "0", abortSignal }
    ).call();
  }
};

// app/v3/services/alerts/deliverAlert.server.ts
var import_web_api2 = require("@slack/web-api");
var import_assert_never2 = __toESM(require("assert-never")), import_crypto = require("crypto");

// app/models/orgIntegration.server.ts
var import_web_api = require("@slack/web-api"), import_zod43 = require("zod");

// app/services/sessionStorage.server.ts
var import_node = require("@remix-run/node");
var sessionStorage = (0, import_node.createCookieSessionStorage)({
  cookie: {
    name: "__session",
    // use any name you want here
    sameSite: "lax",
    // this helps with CSRF
    path: "/",
    // remember to add this so the cookie will work in all routes
    httpOnly: !0,
    // for security reasons, make this cookie http only
    secrets: [env2.SESSION_SECRET],
    secure: env2.NODE_ENV === "production",
    // enable this in prod only
    maxAge: 60 * 60 * 24 * 365
    // 7 days
  }
});
function getUserSession(request) {
  return sessionStorage.getSession(request.headers.get("Cookie"));
}
var { getSession, commitSession, destroySession } = sessionStorage;

// app/models/orgIntegration.server.ts
var SlackSecretSchema = import_zod43.z.object({
  botAccessToken: import_zod43.z.string(),
  userAccessToken: import_zod43.z.string().optional(),
  expiresIn: import_zod43.z.number().optional(),
  refreshToken: import_zod43.z.string().optional(),
  botScopes: import_zod43.z.array(import_zod43.z.string()).optional(),
  userScopes: import_zod43.z.array(import_zod43.z.string()).optional(),
  raw: import_zod43.z.record(import_zod43.z.any()).optional()
}), REDIRECT_AFTER_AUTH_KEY = "redirect-back-after-auth", OrgIntegrationRepository = class {
  static async getAuthenticatedClientForIntegration(integration, options2) {
    let secretStore = getSecretStore(integration.tokenReference.provider);
    switch (integration.service) {
      case "SLACK": {
        let secret2 = await secretStore.getSecret(
          SlackSecretSchema,
          integration.tokenReference.key
        );
        if (!secret2)
          throw new Error("Failed to get access token");
        return new import_web_api.WebClient(
          options2?.forceBotToken ? secret2.botAccessToken : secret2.userAccessToken ?? secret2.botAccessToken
        );
      }
      default:
        throw new Error(`Unsupported service ${integration.service}`);
    }
  }
  static slackAuthorizationUrl(state, scopes = [
    "channels:read",
    "groups:read",
    "im:read",
    "mpim:read",
    "chat:write",
    "chat:write.public"
  ], userScopes = ["channels:read", "groups:read", "im:read", "mpim:read", "chat:write"]) {
    return `https://slack.com/oauth/v2/authorize?client_id=${env2.ORG_SLACK_INTEGRATION_CLIENT_ID}&scope=${scopes.join(",")}&user_scope=${userScopes.join(",")}&state=${state}&redirect_uri=${env2.APP_ORIGIN}/integrations/slack/callback`;
  }
  static async redirectToAuthService(service, state, request, redirectTo) {
    let session = await getUserSession(request);
    session.set(REDIRECT_AFTER_AUTH_KEY, redirectTo);
    let authUrl = service === "SLACK" ? this.slackAuthorizationUrl(state) : void 0;
    if (!authUrl)
      throw new Response("Unsupported service", { status: 400 });
    return logger.debug("Redirecting to auth service", {
      service,
      authUrl,
      redirectTo
    }), new Response(null, {
      status: 302,
      headers: {
        location: authUrl,
        "Set-Cookie": await commitSession(session)
      }
    });
  }
  static async redirectAfterAuth(request) {
    let session = await getUserSession(request);
    logger.debug("Redirecting back after auth", {
      sessionData: session.data
    });
    let redirectTo = session.get(REDIRECT_AFTER_AUTH_KEY);
    if (!redirectTo)
      throw new Response("Invalid redirect", { status: 400 });
    return session.unset(REDIRECT_AFTER_AUTH_KEY), new Response(null, {
      status: 302,
      headers: {
        location: redirectTo,
        "Set-Cookie": await commitSession(session)
      }
    });
  }
  static async createOrgIntegration(serviceName, code, org) {
    switch (serviceName) {
      case "slack": {
        if (!env2.ORG_SLACK_INTEGRATION_CLIENT_ID || !env2.ORG_SLACK_INTEGRATION_CLIENT_SECRET)
          throw new Error("Slack integration not configured");
        let result = await new import_web_api.WebClient().oauth.v2.access({
          client_id: env2.ORG_SLACK_INTEGRATION_CLIENT_ID,
          client_secret: env2.ORG_SLACK_INTEGRATION_CLIENT_SECRET,
          code,
          redirect_uri: `${env2.APP_ORIGIN}/integrations/slack/callback`
        });
        if (result.ok) {
          if (logger.debug("Received slack access token", {
            result
          }), !result.access_token)
            throw new Error("Failed to get access token");
          return await $transaction(prisma, async (tx) => {
            let secretStore = getSecretStore("DATABASE", {
              prismaClient: tx
            }), integrationFriendlyId = generateFriendlyId("org_integration"), secretValue = {
              botAccessToken: result.access_token,
              userAccessToken: result.authed_user ? result.authed_user.access_token : void 0,
              expiresIn: result.expires_in,
              refreshToken: result.refresh_token,
              botScopes: result.scope ? result.scope.split(",") : [],
              userScopes: result.authed_user?.scope ? result.authed_user.scope.split(",") : [],
              raw: result
            };
            logger.debug("Setting secret", {
              secretValue
            }), await secretStore.setSecret(integrationFriendlyId, secretValue);
            let reference = await tx.secretReference.create({
              data: {
                provider: "DATABASE",
                key: integrationFriendlyId
              }
            });
            return await tx.organizationIntegration.create({
              data: {
                friendlyId: integrationFriendlyId,
                organizationId: org.id,
                service: "SLACK",
                tokenReferenceId: reference.id,
                integrationData: {
                  team: result.team,
                  user: result.authed_user ? {
                    id: result.authed_user.id
                  } : void 0
                }
              }
            });
          });
        }
      }
      default:
        throw new Error(`Service ${serviceName} not supported`);
    }
  }
};
OrgIntegrationRepository.isSlackSupported = !!env2.ORG_SLACK_INTEGRATION_CLIENT_ID && !!env2.ORG_SLACK_INTEGRATION_CLIENT_SECRET;

// app/models/projectAlert.server.ts
var import_zod44 = require("zod");
var ProjectAlertWebhookProperties = import_zod44.z.object({
  secret: EncryptedSecretValueSchema,
  url: import_zod44.z.string()
}), ProjectAlertEmailProperties = import_zod44.z.object({
  email: import_zod44.z.string()
}), DeleteProjectAlertChannel = import_zod44.z.object({
  id: import_zod44.z.string()
}), ProjectAlertSlackProperties = import_zod44.z.object({
  channelId: import_zod44.z.string(),
  channelName: import_zod44.z.string(),
  integrationId: import_zod44.z.string().nullish()
}), ProjectAlertSlackStorage = import_zod44.z.object({
  message_ts: import_zod44.z.string()
});

// app/utils/username.ts
function getUsername(user) {
  if (user) {
    if (user.displayName)
      return user.displayName;
    if (user.name)
      return user.name;
  }
}

// app/presenters/v3/DeploymentPresenter.server.ts
var DeploymentPresenter = class {
  #prismaClient;
  constructor(prismaClient = prisma) {
    this.#prismaClient = prismaClient;
  }
  async call({
    userId,
    projectSlug,
    organizationSlug,
    deploymentShortCode
  }) {
    let project = await this.#prismaClient.project.findFirstOrThrow({
      select: {
        id: !0,
        organizationId: !0
      },
      where: {
        slug: projectSlug,
        organization: {
          slug: organizationSlug,
          members: {
            some: {
              userId
            }
          }
        }
      }
    }), deployment = await this.#prismaClient.workerDeployment.findUniqueOrThrow({
      where: {
        projectId_shortCode: {
          projectId: project.id,
          shortCode: deploymentShortCode
        }
      },
      select: {
        id: !0,
        shortCode: !0,
        version: !0,
        errorData: !0,
        imageReference: !0,
        externalBuildData: !0,
        projectId: !0,
        environment: {
          select: {
            id: !0,
            type: !0,
            slug: !0,
            orgMember: {
              select: {
                user: {
                  select: {
                    id: !0,
                    name: !0,
                    displayName: !0
                  }
                }
              }
            }
          }
        },
        status: !0,
        deployedAt: !0,
        createdAt: !0,
        promotions: {
          select: {
            label: !0
          }
        },
        worker: {
          select: {
            tasks: {
              select: {
                slug: !0,
                exportName: !0,
                filePath: !0
              },
              orderBy: {
                exportName: "asc"
              }
            },
            sdkVersion: !0
          }
        },
        triggeredBy: {
          select: {
            id: !0,
            name: !0,
            displayName: !0,
            avatarUrl: !0
          }
        }
      }
    }), externalBuildData = deployment.externalBuildData ? ExternalBuildData.safeParse(deployment.externalBuildData) : void 0;
    return {
      deployment: {
        id: deployment.id,
        shortCode: deployment.shortCode,
        version: deployment.version,
        status: deployment.status,
        createdAt: deployment.createdAt,
        deployedAt: deployment.deployedAt,
        tasks: deployment.worker?.tasks,
        label: deployment.promotions?.[0]?.label,
        environment: {
          id: deployment.environment.id,
          type: deployment.environment.type,
          slug: deployment.environment.slug,
          userId: deployment.environment.orgMember?.user.id,
          userName: getUsername(deployment.environment.orgMember?.user)
        },
        deployedBy: deployment.triggeredBy,
        sdkVersion: deployment.worker?.sdkVersion,
        imageReference: deployment.imageReference,
        externalBuildData: externalBuildData && externalBuildData.success ? externalBuildData.data : void 0,
        projectId: deployment.projectId,
        organizationId: project.organizationId,
        errorData: DeploymentPresenter.prepareErrorData(deployment.errorData)
      }
    };
  }
  static prepareErrorData(errorData) {
    if (!errorData)
      return;
    let parsedErrorData = DeploymentErrorData.safeParse(errorData);
    if (parsedErrorData.success) {
      if (parsedErrorData.data.name === "TaskMetadataParseError") {
        let errorJson = safeJsonParse3(parsedErrorData.data.stack);
        if (errorJson) {
          let parsedError = TaskMetadataFailedToParseData.safeParse(errorJson);
          return parsedError.success ? {
            name: parsedErrorData.data.name,
            message: parsedErrorData.data.message,
            stack: createTaskMetadataFailedErrorStack(parsedError.data),
            stderr: parsedErrorData.data.stderr
          } : {
            name: parsedErrorData.data.name,
            message: parsedErrorData.data.message,
            stderr: parsedErrorData.data.stderr
          };
        } else
          return {
            name: parsedErrorData.data.name,
            message: parsedErrorData.data.message,
            stderr: parsedErrorData.data.stderr
          };
      }
      return {
        name: parsedErrorData.data.name,
        message: parsedErrorData.data.message,
        stack: parsedErrorData.data.stack,
        stderr: parsedErrorData.data.stderr
      };
    }
  }
};
function createTaskMetadataFailedErrorStack(data2) {
  let stack = [], groupedIssues = groupTaskMetadataIssuesByTask(data2.tasks, data2.zodIssues);
  for (let key in groupedIssues) {
    let taskWithIssues = groupedIssues[key];
    if (taskWithIssues) {
      stack.push(`
`), stack.push(`  \u276F ${taskWithIssues.exportName} in ${taskWithIssues.filePath}`);
      for (let issue of taskWithIssues.issues)
        issue.path ? stack.push(`    x ${issue.path} ${issue.message}`) : stack.push(`    x ${issue.message}`);
    }
  }
  return stack.join(`
`);
}

// app/services/email.server.ts
var import_remix_typedjson = require("remix-typedjson");
var client = singleton(
  "email-client",
  () => new EmailClient({
    apikey: env2.RESEND_API_KEY,
    imagesBaseUrl: env2.APP_ORIGIN,
    from: env2.FROM_EMAIL ?? "team@email.trigger.dev",
    replyTo: env2.REPLY_TO_EMAIL ?? "help@email.trigger.dev"
  })
), alertsClient = singleton(
  "alerts-email-client",
  () => new EmailClient({
    apikey: env2.ALERT_RESEND_API_KEY,
    imagesBaseUrl: env2.APP_ORIGIN,
    from: env2.ALERT_FROM_EMAIL ?? "noreply@alerts.trigger.dev",
    replyTo: env2.REPLY_TO_EMAIL ?? "help@email.trigger.dev"
  })
);
async function sendMagicLinkEmail(options2) {
  if (env2.NODE_ENV === "development")
    throw (0, import_remix_typedjson.redirect)(options2.magicLink);
  logger.debug("Sending magic link email", { emailAddress: options2.emailAddress });
  try {
    return await client.send({
      email: "magic_link",
      to: options2.emailAddress,
      magicLink: options2.magicLink
    });
  } catch (error) {
    throw logger.error("Error sending magic link email", { error: JSON.stringify(error) }), error;
  }
}
async function scheduleEmail(data2, delay) {
  let runAt = delay ? new Date(Date.now() + delay.seconds * 1e3) : void 0;
  await workerQueue.enqueue("scheduleEmail", data2, { runAt });
}
async function sendEmail(data2) {
  return client.send(data2);
}
async function sendAlertEmail(data2) {
  return alertsClient.send(data2);
}

// app/v3/services/alerts/deliverAlert.server.ts
var DeliverAlertService = class extends BaseService {
  async call(alertId) {
    let alert = await this._prisma.projectAlert.findUnique({
      where: { id: alertId },
      include: {
        channel: !0,
        project: {
          include: {
            organization: !0
          }
        },
        environment: !0,
        taskRunAttempt: {
          include: {
            taskRun: !0,
            backgroundWorkerTask: !0,
            backgroundWorker: !0
          }
        },
        workerDeployment: {
          include: {
            worker: {
              include: {
                tasks: !0
              }
            }
          }
        }
      }
    });
    if (alert && alert.status === "PENDING") {
      switch (alert.channel.type) {
        case "EMAIL": {
          await this.#sendEmail(alert);
          break;
        }
        case "SLACK": {
          await this.#sendSlack(alert);
          break;
        }
        case "WEBHOOK": {
          await this.#sendWebhook(alert);
          break;
        }
        default:
          (0, import_assert_never2.default)(alert.channel.type);
      }
      await this._prisma.projectAlert.update({
        where: { id: alertId },
        data: {
          status: "SENT"
        }
      });
    }
  }
  async #sendEmail(alert) {
    let emailProperties = ProjectAlertEmailProperties.safeParse(alert.channel.properties);
    if (!emailProperties.success) {
      logger.error("[DeliverAlert] Failed to parse email properties", {
        issues: emailProperties.error.issues,
        properties: alert.channel.properties
      });
      return;
    }
    switch (alert.type) {
      case "TASK_RUN_ATTEMPT": {
        if (alert.taskRunAttempt) {
          let taskRunError = TaskRunError.safeParse(alert.taskRunAttempt.error);
          if (!taskRunError.success) {
            logger.error("[DeliverAlert] Failed to parse task run error", {
              issues: taskRunError.error.issues,
              taskAttemptError: alert.taskRunAttempt.error
            });
            return;
          }
          await sendAlertEmail({
            email: "alert-attempt",
            to: emailProperties.data.email,
            taskIdentifier: alert.taskRunAttempt.taskRun.taskIdentifier,
            fileName: alert.taskRunAttempt.backgroundWorkerTask.filePath,
            exportName: alert.taskRunAttempt.backgroundWorkerTask.exportName,
            version: alert.taskRunAttempt.backgroundWorker.version,
            environment: alert.environment.slug,
            error: createJsonErrorObject(taskRunError.data),
            attemptLink: `${env2.APP_ORIGIN}/projects/v3/${alert.project.externalRef}/runs/${alert.taskRunAttempt.taskRun.friendlyId}`
          });
        } else
          logger.error("[DeliverAlert] Task run attempt not found", {
            alert
          });
        break;
      }
      case "DEPLOYMENT_FAILURE": {
        if (alert.workerDeployment) {
          let preparedError = DeploymentPresenter.prepareErrorData(
            alert.workerDeployment.errorData
          );
          if (!preparedError) {
            logger.error("[DeliverAlert] Failed to prepare deployment error data", {
              errorData: alert.workerDeployment.errorData
            });
            return;
          }
          await sendAlertEmail({
            email: "alert-deployment-failure",
            to: emailProperties.data.email,
            version: alert.workerDeployment.version,
            environment: alert.environment.slug,
            shortCode: alert.workerDeployment.shortCode,
            failedAt: alert.workerDeployment.failedAt ?? /* @__PURE__ */ new Date(),
            error: preparedError,
            deploymentLink: `${env2.APP_ORIGIN}/projects/v3/${alert.project.externalRef}/deployments/${alert.workerDeployment.shortCode}`
          });
        } else
          logger.error("[DeliverAlert] Worker deployment not found", {
            alert
          });
        break;
      }
      case "DEPLOYMENT_SUCCESS": {
        alert.workerDeployment ? await sendAlertEmail({
          email: "alert-deployment-success",
          to: emailProperties.data.email,
          version: alert.workerDeployment.version,
          environment: alert.environment.slug,
          shortCode: alert.workerDeployment.shortCode,
          deployedAt: alert.workerDeployment.deployedAt ?? /* @__PURE__ */ new Date(),
          deploymentLink: `${env2.APP_ORIGIN}/projects/v3/${alert.project.externalRef}/deployments/${alert.workerDeployment.shortCode}`,
          taskCount: alert.workerDeployment.worker?.tasks.length ?? 0
        }) : logger.error("[DeliverAlert] Worker deployment not found", {
          alert
        });
        break;
      }
      default:
        (0, import_assert_never2.default)(alert.type);
    }
  }
  async #sendWebhook(alert) {
    let webhookProperties = ProjectAlertWebhookProperties.safeParse(alert.channel.properties);
    if (!webhookProperties.success) {
      logger.error("[DeliverAlert] Failed to parse webhook properties", {
        issues: webhookProperties.error.issues,
        properties: alert.channel.properties
      });
      return;
    }
    switch (alert.type) {
      case "TASK_RUN_ATTEMPT": {
        if (alert.taskRunAttempt) {
          let taskRunError = TaskRunError.safeParse(alert.taskRunAttempt.error);
          if (!taskRunError.success) {
            logger.error("[DeliverAlert] Failed to parse task run error", {
              issues: taskRunError.error.issues,
              taskAttemptError: alert.taskRunAttempt.error
            });
            return;
          }
          let error = createJsonErrorObject(taskRunError.data), payload = {
            task: {
              id: alert.taskRunAttempt.taskRun.taskIdentifier,
              filePath: alert.taskRunAttempt.backgroundWorkerTask.filePath,
              exportName: alert.taskRunAttempt.backgroundWorkerTask.exportName
            },
            attempt: {
              id: alert.taskRunAttempt.friendlyId,
              number: alert.taskRunAttempt.number,
              startedAt: alert.taskRunAttempt.startedAt,
              status: alert.taskRunAttempt.status
            },
            run: {
              id: alert.taskRunAttempt.taskRun.friendlyId,
              isTest: alert.taskRunAttempt.taskRun.isTest,
              createdAt: alert.taskRunAttempt.taskRun.createdAt,
              idempotencyKey: alert.taskRunAttempt.taskRun.idempotencyKey
            },
            environment: {
              id: alert.environment.id,
              type: alert.environment.type,
              slug: alert.environment.slug
            },
            organization: {
              id: alert.project.organizationId,
              slug: alert.project.organization.slug,
              name: alert.project.organization.title
            },
            project: {
              id: alert.project.id,
              ref: alert.project.externalRef,
              slug: alert.project.slug,
              name: alert.project.name
            },
            error
          };
          await this.#deliverWebhook(payload, webhookProperties.data);
        } else
          logger.error("[DeliverAlert] Task run attempt not found", {
            alert
          });
        break;
      }
      case "DEPLOYMENT_FAILURE": {
        if (alert.workerDeployment) {
          let preparedError = DeploymentPresenter.prepareErrorData(
            alert.workerDeployment.errorData
          );
          if (!preparedError) {
            logger.error("[DeliverAlert] Failed to prepare deployment error data", {
              errorData: alert.workerDeployment.errorData
            });
            return;
          }
          let payload = {
            deployment: {
              id: alert.workerDeployment.friendlyId,
              status: alert.workerDeployment.status,
              version: alert.workerDeployment.version,
              shortCode: alert.workerDeployment.shortCode,
              failedAt: alert.workerDeployment.failedAt ?? /* @__PURE__ */ new Date()
            },
            environment: {
              id: alert.environment.id,
              type: alert.environment.type,
              slug: alert.environment.slug
            },
            organization: {
              id: alert.project.organizationId,
              slug: alert.project.organization.slug,
              name: alert.project.organization.title
            },
            project: {
              id: alert.project.id,
              ref: alert.project.externalRef,
              slug: alert.project.slug,
              name: alert.project.name
            },
            error: preparedError
          };
          await this.#deliverWebhook(payload, webhookProperties.data);
        } else
          logger.error("[DeliverAlert] Worker deployment not found", {
            alert
          });
        break;
      }
      case "DEPLOYMENT_SUCCESS": {
        if (alert.workerDeployment) {
          let payload = {
            deployment: {
              id: alert.workerDeployment.friendlyId,
              status: alert.workerDeployment.status,
              version: alert.workerDeployment.version,
              shortCode: alert.workerDeployment.shortCode,
              deployedAt: alert.workerDeployment.deployedAt ?? /* @__PURE__ */ new Date()
            },
            tasks: alert.workerDeployment.worker?.tasks.map((task) => ({
              id: task.slug,
              filePath: task.filePath,
              exportName: task.exportName,
              triggerSource: task.triggerSource
            })) ?? [],
            environment: {
              id: alert.environment.id,
              type: alert.environment.type,
              slug: alert.environment.slug
            },
            organization: {
              id: alert.project.organizationId,
              slug: alert.project.organization.slug,
              name: alert.project.organization.title
            },
            project: {
              id: alert.project.id,
              ref: alert.project.externalRef,
              slug: alert.project.slug,
              name: alert.project.name
            }
          };
          await this.#deliverWebhook(payload, webhookProperties.data);
        } else
          logger.error("[DeliverAlert] Worker deployment not found", {
            alert
          });
        break;
      }
      default:
        (0, import_assert_never2.default)(alert.type);
    }
  }
  async #sendSlack(alert) {
    let slackProperties = ProjectAlertSlackProperties.safeParse(alert.channel.properties);
    if (!slackProperties.success) {
      logger.error("[DeliverAlert] Failed to parse slack properties", {
        issues: slackProperties.error.issues,
        properties: alert.channel.properties
      });
      return;
    }
    let integration = slackProperties.data.integrationId ? await this._prisma.organizationIntegration.findUnique({
      where: {
        id: slackProperties.data.integrationId,
        organizationId: alert.project.organizationId
      },
      include: {
        tokenReference: !0
      }
    }) : await this._prisma.organizationIntegration.findFirst({
      where: {
        service: "SLACK",
        organizationId: alert.project.organizationId
      },
      orderBy: {
        createdAt: "desc"
      },
      include: {
        tokenReference: !0
      }
    });
    if (!integration) {
      logger.error("[DeliverAlert] Slack integration not found", {
        alert
      });
      return;
    }
    switch (alert.type) {
      case "TASK_RUN_ATTEMPT": {
        if (alert.taskRunAttempt) {
          let storage = await this._prisma.projectAlertStorage.findFirst({
            where: {
              alertChannelId: alert.channel.id,
              alertType: alert.type,
              storageId: alert.taskRunAttempt.taskRunId
            }
          }), storageData = storage ? ProjectAlertSlackStorage.safeParse(storage.storageData) : void 0, thread_ts = storageData && storageData.success ? storageData.data.message_ts : void 0, taskRunError = TaskRunError.safeParse(alert.taskRunAttempt.error);
          if (!taskRunError.success) {
            logger.error("[DeliverAlert] Failed to parse task run error", {
              issues: taskRunError.error.issues,
              taskAttemptError: alert.taskRunAttempt.error
            });
            return;
          }
          let error = createJsonErrorObject(taskRunError.data), exportName = alert.taskRunAttempt.backgroundWorkerTask.exportName, version3 = alert.taskRunAttempt.backgroundWorker.version, environment = alert.environment.slug, taskIdentifier = alert.taskRunAttempt.backgroundWorkerTask.slug, timestamp = alert.taskRunAttempt.completedAt ?? /* @__PURE__ */ new Date(), runId = alert.taskRunAttempt.taskRun.friendlyId, attemptNumber = alert.taskRunAttempt.number, message = await this.#postSlackMessage(integration, {
            thread_ts,
            channel: slackProperties.data.channelId,
            text: `Task error in ${alert.taskRunAttempt.backgroundWorkerTask.exportName} [${alert.taskRunAttempt.backgroundWorker.version}.${alert.environment.slug}]`,
            blocks: [
              {
                type: "section",
                text: {
                  type: "mrkdwn",
                  text: `:rotating_light: Error in *${exportName}* _<!date^${Math.round(
                    timestamp.getTime() / 1e3
                  )}^at {date_num} {time_secs}|${timestamp.toLocaleString()}>_`
                }
              },
              {
                type: "section",
                text: {
                  type: "mrkdwn",
                  text: `\`\`\`${error.stackTrace ?? error.message}\`\`\``
                }
              },
              {
                type: "context",
                elements: [
                  {
                    type: "mrkdwn",
                    text: `${runId}.${attemptNumber} | ${taskIdentifier} | ${version3}.${environment} | ${alert.project.name}`
                  }
                ]
              },
              {
                type: "divider"
              },
              {
                type: "actions",
                elements: [
                  {
                    type: "button",
                    text: {
                      type: "plain_text",
                      text: "Investigate"
                    },
                    url: `${env2.APP_ORIGIN}/projects/v3/${alert.project.externalRef}/runs/${alert.taskRunAttempt.taskRun.friendlyId}`
                  }
                ]
              }
            ]
          });
          message.ts && (storage ? await this._prisma.projectAlertStorage.update({
            where: {
              id: storage.id
            },
            data: {
              storageData: {
                message_ts: message.ts
              }
            }
          }) : await this._prisma.projectAlertStorage.create({
            data: {
              alertChannelId: alert.channel.id,
              alertType: alert.type,
              storageId: alert.taskRunAttempt.taskRunId,
              storageData: {
                message_ts: message.ts
              },
              projectId: alert.project.id
            }
          }));
        } else
          logger.error("[DeliverAlert] Task run attempt not found", {
            alert
          });
        break;
      }
      case "DEPLOYMENT_FAILURE": {
        if (alert.workerDeployment) {
          let preparedError = DeploymentPresenter.prepareErrorData(
            alert.workerDeployment.errorData
          );
          if (!preparedError) {
            logger.error("[DeliverAlert] Failed to prepare deployment error data", {
              errorData: alert.workerDeployment.errorData
            });
            return;
          }
          let version3 = alert.workerDeployment.version, environment = alert.environment.slug, timestamp = alert.workerDeployment.failedAt ?? /* @__PURE__ */ new Date();
          await this.#postSlackMessage(integration, {
            channel: slackProperties.data.channelId,
            blocks: [
              {
                type: "section",
                text: {
                  type: "mrkdwn",
                  text: `:rotating_light: Deployment failed *${version3}.${environment}* _<!date^${Math.round(
                    timestamp.getTime() / 1e3
                  )}^at {date_num} {time_secs}|${timestamp.toLocaleString()}>_`
                }
              },
              {
                type: "section",
                text: {
                  type: "mrkdwn",
                  text: `\`\`\`${preparedError.stack ?? preparedError.message}\`\`\``
                }
              },
              {
                type: "context",
                elements: [
                  {
                    type: "mrkdwn",
                    text: `${alert.workerDeployment.shortCode} | ${version3}.${environment} | ${alert.project.name}`
                  }
                ]
              },
              {
                type: "actions",
                elements: [
                  {
                    type: "button",
                    text: {
                      type: "plain_text",
                      text: "View Deployment"
                    },
                    url: `${env2.APP_ORIGIN}/projects/v3/${alert.project.externalRef}/deployments/${alert.workerDeployment.shortCode}`
                  }
                ]
              }
            ]
          });
        } else
          logger.error("[DeliverAlert] Worker deployment not found", {
            alert
          });
        break;
      }
      case "DEPLOYMENT_SUCCESS":
        if (alert.workerDeployment) {
          let version3 = alert.workerDeployment.version, environment = alert.environment.slug, numberOfTasks = alert.workerDeployment.worker?.tasks.length ?? 0, timestamp = alert.workerDeployment.deployedAt ?? /* @__PURE__ */ new Date();
          await this.#postSlackMessage(integration, {
            channel: slackProperties.data.channelId,
            text: `Deployment ${alert.workerDeployment.version} [${alert.environment.slug}] succeeded`,
            blocks: [
              {
                type: "section",
                text: {
                  type: "mrkdwn",
                  text: `:rocket: Deployed *${version3}.${environment}* successfully _<!date^${Math.round(
                    timestamp.getTime() / 1e3
                  )}^at {date_num} {time_secs}|${timestamp.toLocaleString()}>_`
                }
              },
              {
                type: "context",
                elements: [
                  {
                    type: "mrkdwn",
                    text: `${numberOfTasks} tasks | ${alert.workerDeployment.shortCode} | ${version3}.${environment} | ${alert.project.name}`
                  }
                ]
              },
              {
                type: "actions",
                elements: [
                  {
                    type: "button",
                    text: {
                      type: "plain_text",
                      text: "View Deployment"
                    },
                    url: `${env2.APP_ORIGIN}/projects/v3/${alert.project.externalRef}/deployments/${alert.workerDeployment.shortCode}`
                  }
                ]
              }
            ]
          });
          return;
        } else {
          logger.error("[DeliverAlert] Worker deployment not found", {
            alert
          });
          return;
        }
    }
  }
  async #deliverWebhook(payload, webhook) {
    let rawPayload = JSON.stringify(payload), hashPayload = Buffer.from(rawPayload, "utf-8"), secret2 = await decryptSecret(env2.ENCRYPTION_KEY, webhook.secret), hmacSecret = Buffer.from(secret2, "utf-8"), key = await import_crypto.subtle.importKey(
      "raw",
      hmacSecret,
      { name: "HMAC", hash: "SHA-256" },
      !1,
      ["sign"]
    ), signature = await import_crypto.subtle.sign("HMAC", key, hashPayload), signatureHex = Buffer.from(signature).toString("hex"), response = await fetch(webhook.url, {
      method: "POST",
      headers: {
        "content-type": "application/json",
        "x-trigger-signature-hmacsha256": signatureHex
      },
      body: rawPayload,
      signal: AbortSignal.timeout(5e3)
    });
    if (!response.ok)
      throw logger.error("[DeliverAlert] Failed to send alert webhook", {
        status: response.status,
        statusText: response.statusText,
        url: webhook.url,
        body: payload,
        signature
      }), new Error(`Failed to send alert webhook to ${webhook.url}`);
  }
  async #postSlackMessage(integration, message) {
    let client3 = await OrgIntegrationRepository.getAuthenticatedClientForIntegration(
      integration,
      { forceBotToken: !0 }
    );
    try {
      return await client3.chat.postMessage(message);
    } catch (error) {
      throw isWebAPIRateLimitedError(error) ? (logger.error("[DeliverAlert] Slack rate limited", {
        error,
        message
      }), new Error("Slack rate limited")) : isWebAPIHTTPError(error) ? (logger.error("[DeliverAlert] Slack HTTP error", {
        error,
        message
      }), new Error("Slack HTTP error")) : isWebAPIRequestError(error) ? (logger.error("[DeliverAlert] Slack request error", {
        error,
        message
      }), new Error("Slack request error")) : isWebAPIPlatformError(error) ? (logger.error("[DeliverAlert] Slack platform error", {
        error,
        message
      }), new Error("Slack platform error")) : (logger.error("[DeliverAlert] Failed to send slack message", {
        error,
        message
      }), error);
    }
  }
  static async enqueue(alertId, tx, options2) {
    return await workerQueue.enqueue(
      "v3.deliverAlert",
      {
        alertId
      },
      {
        tx,
        runAt: options2?.runAt,
        jobKey: `deliverAlert:${alertId}`
      }
    );
  }
};
function isWebAPIPlatformError(error) {
  return error.code === import_web_api2.ErrorCode.PlatformError;
}
function isWebAPIRequestError(error) {
  return error.code === import_web_api2.ErrorCode.RequestError;
}
function isWebAPIHTTPError(error) {
  return error.code === import_web_api2.ErrorCode.HTTPError;
}
function isWebAPIRateLimitedError(error) {
  return error.code === import_web_api2.ErrorCode.RateLimitedError;
}

// app/v3/services/alerts/performDeploymentAlerts.server.ts
var PerformDeploymentAlertsService = class extends BaseService {
  async call(deploymentId) {
    let deployment = await this._prisma.workerDeployment.findUnique({
      where: { id: deploymentId },
      include: {
        environment: !0
      }
    });
    if (!deployment)
      return;
    let alertType = deployment.status === "DEPLOYED" ? "DEPLOYMENT_SUCCESS" : "DEPLOYMENT_FAILURE", alertChannels = await this._prisma.projectAlertChannel.findMany({
      where: {
        projectId: deployment.projectId,
        alertTypes: {
          has: alertType
        },
        environmentTypes: {
          has: deployment.environment.type
        },
        enabled: !0
      }
    });
    for (let alertChannel of alertChannels)
      await this.#createAndSendAlert(alertChannel, deployment, alertType);
  }
  async #createAndSendAlert(alertChannel, deployment, alertType) {
    await $transaction(this._prisma, async (tx) => {
      let alert = await this._prisma.projectAlert.create({
        data: {
          friendlyId: generateFriendlyId("alert"),
          channelId: alertChannel.id,
          projectId: deployment.projectId,
          environmentId: deployment.environmentId,
          status: "PENDING",
          type: alertType,
          workerDeploymentId: deployment.id
        }
      });
      await DeliverAlertService.enqueue(alert.id, tx);
    });
  }
  static async enqueue(deploymentId, tx, runAt) {
    return await workerQueue.enqueue(
      "v3.performDeploymentAlerts",
      {
        deploymentId
      },
      {
        tx,
        runAt,
        jobKey: `performDeploymentAlerts:${deploymentId}`
      }
    );
  }
};

// app/v3/services/alerts/performTaskAttemptAlerts.server.ts
var PerformTaskAttemptAlertsService = class extends BaseService {
  async call(attemptId) {
    let taskAttempt = await this._prisma.taskRunAttempt.findUnique({
      where: { id: attemptId },
      include: {
        taskRun: !0,
        backgroundWorkerTask: !0,
        runtimeEnvironment: !0
      }
    });
    if (!taskAttempt)
      return;
    let alertChannels = await this._prisma.projectAlertChannel.findMany({
      where: {
        projectId: taskAttempt.taskRun.projectId,
        alertTypes: {
          has: "TASK_RUN_ATTEMPT"
        },
        environmentTypes: {
          has: taskAttempt.runtimeEnvironment.type
        },
        enabled: !0
      }
    });
    for (let alertChannel of alertChannels)
      await this.#createAndSendAlert(alertChannel, taskAttempt);
  }
  async #createAndSendAlert(alertChannel, taskAttempt) {
    await $transaction(this._prisma, async (tx) => {
      let alert = await this._prisma.projectAlert.create({
        data: {
          friendlyId: generateFriendlyId("alert"),
          channelId: alertChannel.id,
          projectId: taskAttempt.taskRun.projectId,
          environmentId: taskAttempt.runtimeEnvironmentId,
          status: "PENDING",
          type: "TASK_RUN_ATTEMPT",
          taskRunAttemptId: taskAttempt.id
        }
      });
      await DeliverAlertService.enqueue(alert.id, tx);
    });
  }
  static async enqueue(attemptId, tx, runAt) {
    return await workerQueue.enqueue(
      "v3.performTaskAttemptAlerts",
      {
        attemptId
      },
      {
        tx,
        runAt,
        jobKey: `performTaskAttemptAlerts:${attemptId}`
      }
    );
  }
};

// app/v3/services/bulk/performBulkAction.server.ts
var import_assert_never4 = __toESM(require("assert-never"));

// app/v3/services/cancelTaskRun.server.ts
var import_assert_never3 = __toESM(require("assert-never"));

// ../../packages/core/src/v3/zodMessageHandler.ts
var import_zod45 = require("zod"), ZodSchemaParsedError = class extends Error {
  constructor(error, payload) {
    super(error.message);
    this.error = error;
    this.payload = payload;
  }
}, ZodMessageSchema = import_zod45.z.object({
  version: import_zod45.z.literal("v1").default("v1"),
  type: import_zod45.z.string(),
  payload: import_zod45.z.unknown()
}), ZodMessageHandler = class {
  #schema;
  #handlers;
  constructor(options2) {
    this.#schema = options2.schema, this.#handlers = options2.messages;
  }
  async handleMessage(message) {
    let parsedMessage = this.parseMessage(message);
    if (!this.#handlers)
      throw new Error("No handlers provided");
    let handler = this.#handlers[parsedMessage.type];
    if (!handler) {
      console.error(`No handler for message type: ${String(parsedMessage.type)}`);
      return;
    }
    return await handler(parsedMessage.payload);
  }
  parseMessage(message) {
    let parsedMessage = ZodMessageSchema.safeParse(message);
    if (!parsedMessage.success)
      throw new Error(`Failed to parse message: ${JSON.stringify(parsedMessage.error)}`);
    let schema18 = this.#schema[parsedMessage.data.type];
    if (!schema18)
      throw new Error(`Unknown message type: ${parsedMessage.data.type}`);
    let parsedPayload = schema18.safeParse(parsedMessage.data.payload);
    if (!parsedPayload.success)
      throw new Error(`Failed to parse message payload: ${JSON.stringify(parsedPayload.error)}`);
    return {
      type: parsedMessage.data.type,
      payload: parsedPayload.data
    };
  }
  registerHandlers(emitter, logger3) {
    let log = logger3 ?? console;
    if (!this.#handlers) {
      log.info("No handlers provided");
      return;
    }
    for (let eventName of Object.keys(this.#schema))
      emitter.on(eventName, async (message, callback) => {
        log.info(`handling ${eventName}`, {
          payload: message,
          hasCallback: !!callback
        });
        let ack;
        if ("payload" in message)
          ack = await this.handleMessage({ type: eventName, ...message });
        else {
          let { version: version3, ...payload } = message;
          ack = await this.handleMessage({ type: eventName, version: version3, payload });
        }
        callback && typeof callback == "function" && callback(ack);
      });
  }
}, ZodMessageSender = class {
  #schema;
  #sender;
  constructor(options2) {
    this.#schema = options2.schema, this.#sender = options2.sender;
  }
  async send(type, payload) {
    let schema18 = this.#schema[type];
    if (!schema18)
      throw new Error(`Unknown message type: ${type}`);
    let parsedPayload = schema18.safeParse(payload);
    if (!parsedPayload.success)
      throw new ZodSchemaParsedError(parsedPayload.error, payload);
    try {
      await this.#sender({ type, payload, version: "v1" });
    } catch (error) {
      console.error("[ZodMessageSender] Failed to send message", error);
    }
  }
  async forwardMessage(message) {
    let parsedMessage = ZodMessageSchema.safeParse(message);
    if (!parsedMessage.success)
      throw new Error(`Failed to parse message: ${JSON.stringify(parsedMessage.error)}`);
    let schema18 = this.#schema[parsedMessage.data.type];
    if (!schema18)
      throw new Error(`Unknown message type: ${parsedMessage.data.type}`);
    let parsedPayload = schema18.safeParse(parsedMessage.data.payload);
    if (!parsedPayload.success)
      throw new Error(`Failed to parse message payload: ${JSON.stringify(parsedPayload.error)}`);
    try {
      await this.#sender({
        type: parsedMessage.data.type,
        payload: parsedPayload.data,
        version: "v1"
      });
    } catch (error) {
      console.error("[ZodMessageSender] Failed to forward message", error);
    }
  }
};

// ../../packages/core/src/v3/zodSocket.ts
var import_socket = require("socket.io-client"), import_zod46 = require("zod");

// ../../packages/core/src/v3/utils/structuredLogger.ts
var SimpleStructuredLogger = class {
  constructor(name, level = ["1", "true"].includes(process.env.DEBUG ?? "") ? 4 /* debug */ : 3 /* info */, fields) {
    this.name = name;
    this.level = level;
    this.fields = fields;
  }
  child(fields, level) {
    return new SimpleStructuredLogger(this.name, level, { ...this.fields, ...fields });
  }
  log(message, ...args) {
    this.level < 0 /* log */ || this.#structuredLog(console.log, message, "log", ...args);
  }
  error(message, ...args) {
    this.level < 1 /* error */ || this.#structuredLog(console.error, message, "error", ...args);
  }
  warn(message, ...args) {
    this.level < 2 /* warn */ || this.#structuredLog(console.warn, message, "warn", ...args);
  }
  info(message, ...args) {
    this.level < 3 /* info */ || this.#structuredLog(console.info, message, "info", ...args);
  }
  debug(message, ...args) {
    this.level < 4 /* debug */ || this.#structuredLog(console.debug, message, "debug", ...args);
  }
  #structuredLog(loggerFunction, message, level, ...args) {
    let structuredLog = {
      ...args.length === 1 ? args[0] : args,
      ...this.fields,
      timestamp: /* @__PURE__ */ new Date(),
      name: this.name,
      message,
      level
    };
    loggerFunction(JSON.stringify(structuredLog));
  }
};

// ../../packages/core/src/v3/zodSocket.ts
var import_zod_validation_error2 = require("zod-validation-error"), messageSchema = import_zod46.z.object({
  version: import_zod46.z.string(),
  type: import_zod46.z.string(),
  payload: import_zod46.z.unknown()
}), ZodSocketMessageHandler = class {
  #schema;
  #handlers;
  #logger;
  constructor(options2) {
    this.#schema = options2.schema, this.#handlers = options2.handlers, this.#logger = options2.logger ?? new SimpleStructuredLogger("socket-message-handler", 3 /* info */);
  }
  async handleMessage(message) {
    let parseResult = this.parseMessage(message);
    if (!parseResult.success) {
      this.#logger.error("Failed to parse message, skipping handler", {
        rawMessage: message,
        error: parseResult.reason
      });
      return;
    }
    if (!this.#handlers)
      throw new Error("No handlers provided");
    let { type, payload } = parseResult.data, handler = this.#handlers[type];
    if (!handler) {
      console.error(`No handler for message type: ${String(type)}`);
      return;
    }
    return await handler(payload);
  }
  parseMessage(message) {
    let parsedMessage = messageSchema.safeParse(message);
    if (!parsedMessage.success)
      return {
        success: !1,
        reason: `Failed to parse message: ${(0, import_zod_validation_error2.fromZodError)(parsedMessage.error).toString()}`
      };
    let schema18 = this.#schema[parsedMessage.data.type].message;
    if (!schema18)
      return {
        success: !1,
        reason: `Unknown message type: ${parsedMessage.data.type}`
      };
    let messageWithVersion = {
      version: parsedMessage.data.version,
      ...typeof parsedMessage.data.payload == "object" ? parsedMessage.data.payload : {}
    }, parsedPayload = schema18.safeParse(messageWithVersion);
    return parsedPayload.success ? {
      success: !0,
      data: {
        type: parsedMessage.data.type,
        payload: parsedPayload.data
      }
    } : (console.error("Failed to parse message payload", {
      message,
      payload: messageWithVersion
    }), {
      success: !1,
      reason: (0, import_zod_validation_error2.fromZodError)(parsedPayload.error).toString()
    });
  }
  registerHandlers(emitter, logger3) {
    let log = logger3 ?? console;
    if (!this.#handlers) {
      log.info("No handlers provided");
      return;
    }
    for (let eventName of Object.keys(this.#handlers))
      emitter.on(eventName, async (message, callback) => {
        log.info(`handling ${eventName}`, {
          payload: message,
          hasCallback: !!callback
        });
        let ack;
        try {
          if ("payload" in message)
            ack = await this.handleMessage({ type: eventName, ...message });
          else {
            let { version: version3, ...payload } = message;
            ack = await this.handleMessage({ type: eventName, version: version3, payload });
          }
        } catch (error) {
          log.error("Error while handling message", {
            error: error instanceof Error ? {
              message: error.message,
              stack: error.stack
            } : error
          });
          return;
        }
        callback && typeof callback == "function" && callback(ack);
      });
  }
};

// ../../packages/core/src/v3/zodNamespace.ts
var ZodNamespace = class {
  #logger;
  #handler;
  constructor(opts) {
    this.#logger = opts.logger ?? new SimpleStructuredLogger(opts.name), this.#handler = new ZodSocketMessageHandler({
      schema: opts.clientMessages,
      handlers: opts.handlers
    }), this.io = opts.io, this.namespace = this.io.of(opts.name), this.sender = new ZodMessageSender({
      schema: opts.serverMessages,
      sender: async (message) => new Promise((resolve, reject) => {
        try {
          this.namespace.emit(message.type, message.payload), resolve();
        } catch (err) {
          reject(err);
        }
      })
    }), opts.preAuth && this.namespace.use(async (socket, next) => {
      let logger3 = this.#logger.child({ socketId: socket.id, socketStage: "preAuth" });
      typeof opts.preAuth == "function" && await opts.preAuth(socket, next, logger3);
    }), opts.authToken && this.namespace.use((socket, next) => {
      let logger3 = this.#logger.child({ socketId: socket.id, socketStage: "auth" }), { auth } = socket.handshake;
      if (!("token" in auth))
        return logger3.error("no token"), socket.disconnect(!0);
      if (auth.token !== opts.authToken)
        return logger3.error("invalid token"), socket.disconnect(!0);
      logger3.info("success"), next();
    }), opts.postAuth && this.namespace.use(async (socket, next) => {
      let logger3 = this.#logger.child({ socketId: socket.id, socketStage: "auth" });
      typeof opts.postAuth == "function" && await opts.postAuth(socket, next, logger3);
    }), this.namespace.on("connection", async (socket) => {
      let logger3 = this.#logger.child({ socketId: socket.id, socketStage: "connection" });
      logger3.info("connected"), this.#handler.registerHandlers(socket, logger3), socket.on("disconnect", async (reason, description) => {
        logger3.info("disconnect", { reason, description }), opts.onDisconnect && await opts.onDisconnect(socket, reason, description, logger3);
      }), socket.on("error", async (error) => {
        logger3.error("error", { error }), opts.onError && await opts.onError(socket, error, logger3);
      }), opts.onConnection && await opts.onConnection(socket, this.#handler, this.sender, logger3);
    });
  }
  fetchSockets() {
    return this.namespace.fetchSockets();
  }
};

// app/v3/handleSocketIo.server.ts
var import_socket2 = require("socket.io");

// app/v3/sharedSocketConnection.ts
var import_evt = require("evt"), import_node_crypto4 = require("node:crypto");

// app/v3/marqs/sharedQueueConsumer.server.ts
var import_api11 = require("@opentelemetry/api"), import_zod51 = require("zod");

// app/models/runtimeEnvironment.server.ts
async function findEnvironmentByApiKey(apiKey) {
  let environment = await prisma.runtimeEnvironment.findUnique({
    where: {
      apiKey
    },
    include: {
      project: !0,
      organization: !0,
      orgMember: !0
    }
  });
  return environment?.project.deletedAt !== null ? null : environment;
}
async function findEnvironmentByPublicApiKey(apiKey) {
  let environment = await prisma.runtimeEnvironment.findUnique({
    where: {
      pkApiKey: apiKey
    },
    include: {
      project: !0,
      organization: !0,
      orgMember: !0
    }
  });
  return environment?.project.deletedAt !== null ? null : environment;
}
async function findEnvironmentById(id) {
  let environment = await prisma.runtimeEnvironment.findUnique({
    where: {
      id
    },
    include: {
      project: !0,
      organization: !0,
      orgMember: !0
    }
  });
  return environment?.project.deletedAt !== null ? null : environment;
}
async function createNewSession(environment, ipAddress) {
  let session = await prisma.runtimeEnvironmentSession.create({
    data: {
      environmentId: environment.id,
      ipAddress
    }
  });
  return await prisma.runtimeEnvironment.update({
    where: {
      id: environment.id
    },
    data: {
      currentSessionId: session.id
    }
  }), session;
}
async function disconnectSession(environmentId) {
  let environment = await prisma.runtimeEnvironment.findUnique({
    where: {
      id: environmentId
    }
  });
  if (!environment || !environment.currentSessionId)
    return null;
  let session = await prisma.runtimeEnvironmentSession.update({
    where: {
      id: environment.currentSessionId
    },
    data: {
      disconnectedAt: /* @__PURE__ */ new Date()
    }
  });
  return await prisma.runtimeEnvironment.update({
    where: {
      id: environment.id
    },
    data: {
      currentSessionId: null
    }
  }), session;
}
function displayableEnvironment(environment, userId) {
  let userName;
  return environment.type === "DEVELOPMENT" && (environment.orgMember ? environment.orgMember.user.id !== userId && (userName = getUsername(environment.orgMember.user)) : userName = "Deleted"), {
    id: environment.id,
    type: environment.type,
    slug: environment.slug,
    userName
  };
}

// app/v3/environmentVariables/environmentVariablesRepository.server.ts
var import_zod47 = require("zod");

// app/utils/cn.ts
var import_clsx = require("clsx"), import_tailwind_merge = require("tailwind-merge"), customTwMerge = (0, import_tailwind_merge.extendTailwindMerge)({
  classGroups: {
    text: [
      {
        text: [
          "xxs",
          "xs",
          "sm",
          "md",
          "lg",
          "xl",
          "2xl",
          "3xl",
          "4xl",
          "5xl",
          "6xl",
          "7xl",
          "8xl",
          "9xl"
        ]
      }
    ]
  }
});
function cn(...inputs) {
  return customTwMerge((0, import_clsx.clsx)(inputs));
}

// app/utils/environmentSort.ts
var environmentSortOrder = [
  "DEVELOPMENT",
  "PREVIEW",
  "STAGING",
  "PRODUCTION"
];
function sortEnvironments(environments2) {
  return environments2.sort((a, b) => {
    let aIndex = environmentSortOrder.indexOf(a.type), bIndex = environmentSortOrder.indexOf(b.type), difference2 = aIndex - bIndex;
    if (difference2 === 0) {
      let usernameA = a.userName || "", usernameB = b.userName || "";
      return usernameA.localeCompare(usernameB);
    }
    return difference2;
  });
}
function filterOrphanedEnvironments(environments2) {
  return environments2.filter((environment) => environment.type !== "DEVELOPMENT" ? !0 : "orgMemberId" in environment ? !!environment.orgMemberId : "orgMember" in environment ? !!environment.orgMember : !1);
}
function onlyDevEnvironments(environments2) {
  return environments2.filter((e) => e.type === "DEVELOPMENT");
}
function exceptDevEnvironments(environments2) {
  return environments2.filter((e) => e.type !== "DEVELOPMENT");
}

// app/components/primitives/Tooltip.tsx
var React = __toESM(require("react")), TooltipPrimitive = __toESM(require("@radix-ui/react-tooltip"));
var import_solid = require("@heroicons/react/20/solid"), import_jsx_runtime10 = require("react/jsx-runtime"), variantClasses = {
  basic: "bg-background-bright border border-grid-bright rounded px-3 py-2 text-sm text-text-bright shadow-md fade-in-50",
  dark: "bg-background-dimmed border border-grid-bright rounded px-3 py-2 text-sm text-text-bright shadow-md fade-in-50"
}, TooltipProvider = TooltipPrimitive.Provider, TooltipArrow = React.forwardRef(({ ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(TooltipPrimitive.Arrow, { className: "fill-popover z-50", ...props }));
TooltipArrow.displayName = TooltipPrimitive.Arrow.displayName;
var Tooltip = React.forwardRef(({ delayDuration = 0, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(TooltipPrimitive.Root, { delayDuration, ...props }));
Tooltip.displayName = TooltipPrimitive.Root.displayName;
var TooltipTrigger = TooltipPrimitive.Trigger, TooltipContent = React.forwardRef(({ className, sideOffset = 4, variant: variant3 = "basic", ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(
  TooltipPrimitive.Content,
  {
    ref,
    sideOffset,
    className: cn(
      "z-50 overflow-hidden animate-in data-[side=bottom]:slide-in-from-top-1 data-[side=left]:slide-in-from-right-1 data-[side=right]:slide-in-from-left-1 data-[side=top]:slide-in-from-bottom-1",
      variantClasses[variant3],
      className
    ),
    ...props
  }
));
TooltipContent.displayName = TooltipPrimitive.Content.displayName;
function SimpleTooltip({
  button,
  content,
  side,
  hidden,
  variant: variant3,
  disableHoverableContent = !1,
  className,
  buttonClassName
}) {
  return /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(TooltipProvider, { disableHoverableContent, children: /* @__PURE__ */ (0, import_jsx_runtime10.jsxs)(Tooltip, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(TooltipTrigger, { className: cn("h-fit", buttonClassName), children: button }),
    /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(
      TooltipContent,
      {
        side,
        hidden,
        className: cn("text-xs", className),
        variant: variant3,
        children: content
      }
    )
  ] }) });
}
function InfoIconTooltip({
  content,
  buttonClassName,
  contentClassName,
  variant: variant3 = "basic"
}) {
  return /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(
    SimpleTooltip,
    {
      button: /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(import_solid.InformationCircleIcon, { className: cn("size-3.5 text-text-dimmed", buttonClassName) }),
      content,
      variant: variant3,
      className: contentClassName
    }
  );
}

// app/components/environments/EnvironmentLabel.tsx
var import_jsx_runtime11 = require("react/jsx-runtime"), variants = {
  small: "h-4 text-xxs px-[0.1875rem] rounded-[2px]",
  large: "h-6 text-xs px-1.5 rounded"
};
function EnvironmentTypeLabel({
  environment,
  size = "small",
  className
}) {
  return /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(
    "span",
    {
      className: cn(
        "text-midnight-900 inline-flex items-center justify-center whitespace-nowrap border font-medium uppercase tracking-wider",
        environmentBorderClassName(environment),
        environmentTextClassName(environment),
        variants[size],
        className
      ),
      children: environmentTypeTitle(environment)
    }
  );
}
function EnvironmentLabel({
  environment,
  size = "small",
  userName,
  className
}) {
  return /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(
    "span",
    {
      className: cn(
        "text-midnight-900 inline-flex items-center justify-center whitespace-nowrap border font-medium uppercase tracking-wider",
        environmentBorderClassName(environment),
        environmentTextClassName(environment),
        variants[size],
        className
      ),
      children: environmentTitle(environment, userName)
    }
  );
}
function EnvironmentLabels({
  environments: environments2,
  size = "small",
  className
}) {
  let devEnvironments = sortEnvironments(
    environments2.filter((env6) => env6.type === "DEVELOPMENT")
  ), firstDevEnvironment = devEnvironments[0], otherDevEnvironments = devEnvironments.slice(1), otherEnvironments = environments2.filter((env6) => env6.type !== "DEVELOPMENT");
  return /* @__PURE__ */ (0, import_jsx_runtime11.jsxs)("div", { className: cn("flex items-baseline gap-2", className), children: [
    firstDevEnvironment && /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(
      EnvironmentLabel,
      {
        environment: firstDevEnvironment,
        userName: firstDevEnvironment.userName,
        size
      }
    ),
    otherDevEnvironments.length > 0 ? /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(
      SimpleTooltip,
      {
        disableHoverableContent: !0,
        button: /* @__PURE__ */ (0, import_jsx_runtime11.jsxs)(
          "span",
          {
            className: cn(
              "inline-flex items-center justify-center whitespace-nowrap border font-medium uppercase tracking-wider",
              environmentBorderClassName({ type: "DEVELOPMENT" }),
              environmentTextClassName({ type: "DEVELOPMENT" }),
              variants[size]
            ),
            children: [
              "+",
              otherDevEnvironments.length
            ]
          }
        ),
        content: /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("div", { className: "flex gap-1 py-1", children: otherDevEnvironments.map((environment, index) => /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(
          EnvironmentLabel,
          {
            environment,
            userName: environment.userName,
            size
          },
          index
        )) })
      }
    ) : null,
    otherEnvironments.map((environment, index) => /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(
      EnvironmentLabel,
      {
        environment,
        userName: environment.userName,
        size
      },
      index
    ))
  ] });
}
function environmentTitle(environment, username) {
  switch (environment.type) {
    case "PRODUCTION":
      return "Prod";
    case "STAGING":
      return "Staging";
    case "DEVELOPMENT":
      return username ? `Dev: ${username}` : "Dev: You";
    case "PREVIEW":
      return "Preview";
  }
}
function environmentTypeTitle(environment) {
  switch (environment.type) {
    case "PRODUCTION":
      return "Prod";
    case "STAGING":
      return "Staging";
    case "DEVELOPMENT":
      return "Dev";
    case "PREVIEW":
      return "Preview";
  }
}
function environmentBorderClassName(environment) {
  switch (environment.type) {
    case "PRODUCTION":
      return "border-green-500/50";
    case "STAGING":
      return "border-amber-500/50";
    case "DEVELOPMENT":
      return "border-pink-500/50";
    case "PREVIEW":
      return "border-yellow-500/50";
  }
}
function environmentTextClassName(environment) {
  switch (environment.type) {
    case "PRODUCTION":
      return "text-green-500";
    case "STAGING":
      return "text-amber-500";
    case "DEVELOPMENT":
      return "text-pink-500";
    case "PREVIEW":
      return "text-yellow-500";
  }
}

// app/v3/environmentVariables/environmentVariablesRepository.server.ts
function secretKeyProjectPrefix(projectId) {
  return `environmentvariable:${projectId}:`;
}
function secretKeyEnvironmentPrefix(projectId, environmentId) {
  return `${secretKeyProjectPrefix(projectId)}${environmentId}:`;
}
function secretKey(projectId, environmentId, key) {
  return `${secretKeyEnvironmentPrefix(projectId, environmentId)}${key}`;
}
function parseSecretKey(key) {
  let parts = key.split(":");
  return {
    projectId: parts[1],
    environmentId: parts[2],
    key: parts[3]
  };
}
var SecretValue = import_zod47.z.object({ secret: import_zod47.z.string() }), EnvironmentVariablesRepository = class {
  constructor(prismaClient = prisma) {
    this.prismaClient = prismaClient;
  }
  async create(projectId, options2) {
    let project = await this.prismaClient.project.findUnique({
      where: {
        id: projectId,
        deletedAt: null
      },
      select: {
        environments: {
          select: {
            id: !0
          }
        },
        environmentVariables: {
          select: {
            key: !0,
            values: {
              select: {
                environment: {
                  select: { id: !0, type: !0 }
                }
              }
            }
          }
        }
      }
    });
    if (!project)
      return { success: !1, error: "Project not found" };
    if (options2.environmentIds.every((v) => !project.environments.some((e) => e.id === v)))
      return { success: !1, error: "Environment not found" };
    let triggerKeys = options2.variables.map((v) => v.key);
    if (triggerKeys.includes("TRIGGER_SECRET_KEY") || triggerKeys.includes("TRIGGER_API_URL"))
      return {
        success: !1,
        error: "You cannot set the variables TRIGGER_SECRET_KEY or TRIGGER_API_URL as they will be set automatically"
      };
    let values = options2.variables.filter((v) => v.key.trim() !== "" && v.value.trim() !== "");
    if (values.length === 0)
      return { success: !1, error: "You must set at least one value" };
    if (!options2.override) {
      let existingVariableKeys = [];
      for (let variable of values) {
        let existingVariable = project.environmentVariables.find((v) => v.key === variable.key);
        existingVariable && existingVariable.values.some((v) => options2.environmentIds.includes(v.environment.id)) && existingVariableKeys.push({
          key: variable.key,
          environments: existingVariable.values.filter((v) => options2.environmentIds.includes(v.environment.id)).map((v) => v.environment.type)
        });
      }
      if (existingVariableKeys.length > 0)
        return {
          success: !1,
          error: "Some of the variables are already set for these environments. Set override to true to override them.",
          variableErrors: existingVariableKeys.map((val) => ({
            key: val.key,
            error: `Variable already set in ${val.environments.map((e) => environmentTitle({ type: e })).join(", ")}.`
          }))
        };
    }
    try {
      let result = await $transaction(this.prismaClient, async (tx) => {
        for (let variable of values) {
          let environmentVariable = await tx.environmentVariable.upsert({
            where: {
              projectId_key: {
                key: variable.key,
                projectId
              }
            },
            create: {
              key: variable.key,
              friendlyId: generateFriendlyId("envvar"),
              project: {
                connect: {
                  id: projectId
                }
              }
            },
            update: {}
          }), secretStore = getSecretStore("DATABASE", {
            prismaClient: tx
          });
          for (let environmentId of options2.environmentIds) {
            let key = secretKey(projectId, environmentId, variable.key), secretReference = await tx.secretReference.upsert({
              where: {
                key
              },
              create: {
                key,
                provider: "DATABASE"
              },
              update: {}
            }), variableValue = await tx.environmentVariableValue.upsert({
              where: {
                variableId_environmentId: {
                  variableId: environmentVariable.id,
                  environmentId
                }
              },
              create: {
                variableId: environmentVariable.id,
                environmentId,
                valueReferenceId: secretReference.id
              },
              update: {}
            });
            await secretStore.setSecret(key, {
              secret: variable.value
            });
          }
        }
      });
      return {
        success: !0
      };
    } catch (error) {
      return error instanceof src_exports.Prisma.PrismaClientKnownRequestError && error.code === "P2002" ? {
        success: !1,
        error: "There was already an existing field"
      } : {
        success: !1,
        error: error instanceof Error ? error.message : "Something went wrong"
      };
    }
  }
  async edit(projectId, options2) {
    let project = await this.prismaClient.project.findUnique({
      where: {
        id: projectId,
        deletedAt: null
      },
      select: {
        environments: {
          select: {
            id: !0
          }
        }
      }
    });
    if (!project)
      return { success: !1, error: "Project not found" };
    if (options2.values.every((v) => !project.environments.some((e) => e.id === v.environmentId)))
      return { success: !1, error: "Environment not found" };
    let values = options2.values.filter((v) => v.value.trim() !== ""), environmentIds = project.environments.map((e) => e.id);
    if (!options2.keepEmptyValues)
      for (let environmentId of environmentIds)
        values.some((v) => v.environmentId === environmentId) || values.push({
          environmentId,
          value: ""
        });
    let environmentVariable = await this.prismaClient.environmentVariable.findUnique({
      select: {
        id: !0,
        key: !0
      },
      where: {
        id: options2.id
      }
    });
    if (!environmentVariable)
      return { success: !1, error: "Environment variable not found" };
    try {
      return await $transaction(this.prismaClient, async (tx) => {
        let secretStore = getSecretStore("DATABASE", {
          prismaClient: tx
        });
        for (let value of values) {
          let key = secretKey(projectId, value.environmentId, environmentVariable.key), existingValue = await tx.environmentVariableValue.findUnique({
            where: {
              variableId_environmentId: {
                variableId: environmentVariable.id,
                environmentId: value.environmentId
              }
            }
          });
          if (existingValue && existingValue.valueReferenceId) {
            value.value === "" ? (await secretStore.deleteSecret(key), await tx.secretReference.delete({
              where: {
                id: existingValue.valueReferenceId
              }
            }), await tx.environmentVariableValue.delete({
              where: {
                variableId_environmentId: {
                  variableId: environmentVariable.id,
                  environmentId: value.environmentId
                }
              }
            })) : await secretStore.setSecret(key, {
              secret: value.value
            });
            continue;
          }
          let secretReference = await tx.secretReference.create({
            data: {
              key,
              provider: "DATABASE"
            }
          }), variableValue = await tx.environmentVariableValue.create({
            data: {
              variableId: environmentVariable.id,
              environmentId: value.environmentId,
              valueReferenceId: secretReference.id
            }
          });
          await secretStore.setSecret(key, {
            secret: value.value
          });
        }
      }), {
        success: !0
      };
    } catch (error) {
      return {
        success: !1,
        error: error instanceof Error ? error.message : "Something went wrong"
      };
    }
  }
  async getProject(projectId) {
    let project = await this.prismaClient.project.findUnique({
      where: {
        id: projectId,
        deletedAt: null
      },
      select: {
        environments: {
          select: {
            id: !0,
            type: !0
          }
        }
      }
    });
    if (!project)
      return [];
    let values = (await getSecretStore("DATABASE", {
      prismaClient: this.prismaClient
    }).getSecrets(SecretValue, secretKeyProjectPrefix(projectId))).map((secret2) => {
      let { projectId: projectId2, environmentId, key } = parseSecretKey(secret2.key);
      return {
        projectId: projectId2,
        environmentId,
        key,
        value: secret2.value.secret
      };
    }), results = [];
    for (let value of values) {
      let environment = project.environments.find((e) => e.id === value.environmentId);
      if (!environment)
        throw new Error("Environment not found");
      let existing = results.find((r) => r.key === value.key);
      existing ? existing.values.push({
        value: value.value,
        environment: {
          id: value.environmentId,
          type: environment.type
        }
      }) : results.push({
        key: value.key,
        values: [
          {
            value: value.value,
            environment: {
              id: value.environmentId,
              type: environment.type
            }
          }
        ]
      });
    }
    return results;
  }
  async getEnvironment(projectId, environmentId) {
    let project = await this.prismaClient.project.findUnique({
      where: {
        id: projectId,
        deletedAt: null
      },
      select: {
        environments: {
          select: {
            id: !0
          },
          where: {
            id: environmentId
          }
        }
      }
    });
    return !project || project.environments.length === 0 ? [] : this.getEnvironmentVariables(projectId, environmentId);
  }
  async #getSecretEnvironmentVariables(projectId, environmentId) {
    return (await getSecretStore("DATABASE", {
      prismaClient: this.prismaClient
    }).getSecrets(
      SecretValue,
      secretKeyEnvironmentPrefix(projectId, environmentId)
    )).map((secret2) => {
      let { key } = parseSecretKey(secret2.key);
      return {
        key,
        value: secret2.value.secret
      };
    });
  }
  async getEnvironmentVariables(projectId, environmentId) {
    return this.#getSecretEnvironmentVariables(projectId, environmentId);
  }
  async delete(projectId, options2) {
    if (!await this.prismaClient.project.findUnique({
      where: {
        id: projectId,
        deletedAt: null
      },
      select: {
        environments: {
          select: {
            id: !0
          }
        }
      }
    }))
      return { success: !1, error: "Project not found" };
    let environmentVariable = await this.prismaClient.environmentVariable.findUnique({
      select: {
        id: !0,
        key: !0,
        values: {
          select: {
            id: !0,
            environmentId: !0,
            valueReference: {
              select: {
                key: !0
              }
            }
          }
        }
      },
      where: {
        id: options2.id
      }
    });
    if (!environmentVariable)
      return { success: !1, error: "Environment variable not found" };
    try {
      return await $transaction(this.prismaClient, async (tx) => {
        await tx.environmentVariable.delete({
          where: {
            id: options2.id
          }
        });
        let secretStore = getSecretStore("DATABASE", {
          prismaClient: tx
        });
        for (let value of environmentVariable.values) {
          let key = secretKey(projectId, value.environmentId, environmentVariable.key);
          await secretStore.deleteSecret(key), value.valueReference && await tx.secretReference.delete({
            where: {
              key: value.valueReference.key
            }
          });
        }
      }), {
        success: !0
      };
    } catch (error) {
      return {
        success: !1,
        error: error instanceof Error ? error.message : "Something went wrong"
      };
    }
  }
  async deleteValue(projectId, options2) {
    if (!await this.prismaClient.project.findUnique({
      where: {
        id: projectId,
        deletedAt: null
      },
      select: {
        environments: {
          select: {
            id: !0
          }
        }
      }
    }))
      return { success: !1, error: "Project not found" };
    let environmentVariable = await this.prismaClient.environmentVariable.findUnique({
      select: {
        id: !0,
        key: !0,
        values: {
          select: {
            id: !0,
            environmentId: !0,
            valueReference: {
              select: {
                key: !0
              }
            }
          }
        }
      },
      where: {
        id: options2.id
      }
    });
    if (!environmentVariable)
      return { success: !1, error: "Environment variable not found" };
    let value = environmentVariable.values.find((v) => v.environmentId === options2.environmentId);
    if (!value)
      return { success: !1, error: "Environment variable value not found" };
    if (environmentVariable.values.length === 1)
      return this.delete(projectId, { id: options2.id });
    try {
      return await $transaction(this.prismaClient, async (tx) => {
        let secretStore = getSecretStore("DATABASE", {
          prismaClient: tx
        }), key = secretKey(projectId, options2.environmentId, environmentVariable.key);
        await secretStore.deleteSecret(key), value.valueReference && await tx.secretReference.delete({
          where: {
            key: value.valueReference.key
          }
        }), await tx.environmentVariableValue.delete({
          where: {
            id: value.id
          }
        });
      }), {
        success: !0
      };
    } catch (error) {
      return {
        success: !1,
        error: error instanceof Error ? error.message : "Something went wrong"
      };
    }
  }
}, environmentVariablesRepository = new EnvironmentVariablesRepository();
async function resolveVariablesForEnvironment(runtimeEnvironment) {
  let projectSecrets = await environmentVariablesRepository.getEnvironmentVariables(
    runtimeEnvironment.projectId,
    runtimeEnvironment.id
  ), builtInVariables = runtimeEnvironment.type === "DEVELOPMENT" ? await resolveBuiltInDevVariables(runtimeEnvironment) : await resolveBuiltInProdVariables(runtimeEnvironment);
  return [...projectSecrets, ...builtInVariables];
}
async function resolveBuiltInDevVariables(runtimeEnvironment) {
  let result = [
    {
      key: "OTEL_EXPORTER_OTLP_ENDPOINT",
      value: env2.DEV_OTEL_EXPORTER_OTLP_ENDPOINT ?? env2.APP_ORIGIN
    }
  ];
  env2.DEV_OTEL_BATCH_PROCESSING_ENABLED === "1" && (result = result.concat([
    {
      key: "OTEL_BATCH_PROCESSING_ENABLED",
      value: "1"
    },
    {
      key: "OTEL_SPAN_MAX_EXPORT_BATCH_SIZE",
      value: env2.DEV_OTEL_SPAN_MAX_EXPORT_BATCH_SIZE
    },
    {
      key: "OTEL_SPAN_SCHEDULED_DELAY_MILLIS",
      value: env2.DEV_OTEL_SPAN_SCHEDULED_DELAY_MILLIS
    },
    {
      key: "OTEL_SPAN_EXPORT_TIMEOUT_MILLIS",
      value: env2.DEV_OTEL_SPAN_EXPORT_TIMEOUT_MILLIS
    },
    {
      key: "OTEL_SPAN_MAX_QUEUE_SIZE",
      value: env2.DEV_OTEL_SPAN_MAX_QUEUE_SIZE
    },
    {
      key: "OTEL_LOG_MAX_EXPORT_BATCH_SIZE",
      value: env2.DEV_OTEL_LOG_MAX_EXPORT_BATCH_SIZE
    },
    {
      key: "OTEL_LOG_SCHEDULED_DELAY_MILLIS",
      value: env2.DEV_OTEL_LOG_SCHEDULED_DELAY_MILLIS
    },
    {
      key: "OTEL_LOG_EXPORT_TIMEOUT_MILLIS",
      value: env2.DEV_OTEL_LOG_EXPORT_TIMEOUT_MILLIS
    },
    {
      key: "OTEL_LOG_MAX_QUEUE_SIZE",
      value: env2.DEV_OTEL_LOG_MAX_QUEUE_SIZE
    }
  ]));
  let commonVariables = await resolveCommonBuiltInVariables(runtimeEnvironment);
  return [...result, ...commonVariables];
}
async function resolveBuiltInProdVariables(runtimeEnvironment) {
  let result = [
    {
      key: "TRIGGER_SECRET_KEY",
      value: runtimeEnvironment.apiKey
    },
    {
      key: "TRIGGER_API_URL",
      value: env2.APP_ORIGIN
    },
    {
      key: "TRIGGER_RUNTIME_WAIT_THRESHOLD_IN_MS",
      value: String(env2.CHECKPOINT_THRESHOLD_IN_MS)
    },
    {
      key: "TRIGGER_ORG_ID",
      value: runtimeEnvironment.organizationId
    }
  ];
  env2.PROD_OTEL_BATCH_PROCESSING_ENABLED === "1" && (result = result.concat([
    {
      key: "OTEL_BATCH_PROCESSING_ENABLED",
      value: "1"
    },
    {
      key: "OTEL_SPAN_MAX_EXPORT_BATCH_SIZE",
      value: env2.PROD_OTEL_SPAN_MAX_EXPORT_BATCH_SIZE
    },
    {
      key: "OTEL_SPAN_SCHEDULED_DELAY_MILLIS",
      value: env2.PROD_OTEL_SPAN_SCHEDULED_DELAY_MILLIS
    },
    {
      key: "OTEL_SPAN_EXPORT_TIMEOUT_MILLIS",
      value: env2.PROD_OTEL_SPAN_EXPORT_TIMEOUT_MILLIS
    },
    {
      key: "OTEL_SPAN_MAX_QUEUE_SIZE",
      value: env2.PROD_OTEL_SPAN_MAX_QUEUE_SIZE
    },
    {
      key: "OTEL_LOG_MAX_EXPORT_BATCH_SIZE",
      value: env2.PROD_OTEL_LOG_MAX_EXPORT_BATCH_SIZE
    },
    {
      key: "OTEL_LOG_SCHEDULED_DELAY_MILLIS",
      value: env2.PROD_OTEL_LOG_SCHEDULED_DELAY_MILLIS
    },
    {
      key: "OTEL_LOG_EXPORT_TIMEOUT_MILLIS",
      value: env2.PROD_OTEL_LOG_EXPORT_TIMEOUT_MILLIS
    },
    {
      key: "OTEL_LOG_MAX_QUEUE_SIZE",
      value: env2.PROD_OTEL_LOG_MAX_QUEUE_SIZE
    }
  ])), env2.PROD_USAGE_HEARTBEAT_INTERVAL_MS && env2.USAGE_EVENT_URL && (result = result.concat([
    {
      key: "USAGE_HEARTBEAT_INTERVAL_MS",
      value: String(env2.PROD_USAGE_HEARTBEAT_INTERVAL_MS)
    },
    {
      key: "USAGE_EVENT_URL",
      value: env2.USAGE_EVENT_URL
    }
  ]));
  let commonVariables = await resolveCommonBuiltInVariables(runtimeEnvironment);
  return [...result, ...commonVariables];
}
async function resolveCommonBuiltInVariables(runtimeEnvironment) {
  return [];
}

// app/v3/models/workerDeployment.server.ts
async function findCurrentWorkerDeployment(environmentId) {
  return (await prisma.workerDeploymentPromotion.findUnique({
    where: {
      environmentId_label: {
        environmentId,
        label: CURRENT_DEPLOYMENT_LABEL
      }
    },
    include: {
      deployment: {
        include: {
          worker: {
            include: {
              tasks: !0
            }
          }
        }
      }
    }
  }))?.deployment;
}
async function getWorkerDeploymentFromWorker(workerId) {
  let worker = await prisma.backgroundWorker.findUnique({
    where: {
      id: workerId
    },
    include: {
      deployment: !0,
      tasks: !0
    }
  });
  if (!worker?.deployment)
    return;
  let { deployment, ...workerWithoutDeployment } = worker;
  return {
    ...deployment,
    worker: workerWithoutDeployment
  };
}
async function getWorkerDeploymentFromWorkerTask(workerTaskId) {
  let workerTask = await prisma.backgroundWorkerTask.findUnique({
    where: {
      id: workerTaskId
    },
    include: {
      worker: {
        include: {
          deployment: !0,
          tasks: !0
        }
      }
    }
  });
  if (!workerTask?.worker.deployment)
    return;
  let { deployment, ...workerWithoutDeployment } = workerTask.worker;
  return {
    ...deployment,
    worker: workerWithoutDeployment
  };
}

// app/v3/services/resumeBatchRun.server.ts
var ResumeBatchRunService = class extends BaseService {
  async call(batchRunId, sourceTaskAttemptId) {
    let batchRun = await this._prisma.batchTaskRun.findFirst({
      where: {
        id: batchRunId,
        dependentTaskAttemptId: {
          not: null
        },
        status: "PENDING",
        items: {
          every: {
            taskRunAttemptId: {
              not: null
            }
          }
        }
      },
      include: {
        dependentTaskAttempt: {
          include: {
            runtimeEnvironment: {
              include: {
                project: !0,
                organization: !0
              }
            },
            taskRun: !0
          }
        },
        items: !0
      }
    });
    if (!batchRun || !batchRun.dependentTaskAttempt)
      return;
    await this._prisma.batchTaskRun.update({
      where: {
        id: batchRun.id
      },
      data: {
        status: "COMPLETED"
      }
    });
    let environment = batchRun.dependentTaskAttempt.runtimeEnvironment;
    if (environment.type === "DEVELOPMENT")
      return;
    let dependentRun = batchRun.dependentTaskAttempt.taskRun;
    if (batchRun.dependentTaskAttempt.status === "PAUSED") {
      if (!batchRun.checkpointEventId) {
        logger.error("Can't resume paused attempt without checkpoint event", {
          batchRunId: batchRun.id
        }), await marqs?.acknowledgeMessage(dependentRun.id);
        return;
      }
      await marqs?.enqueueMessage(
        environment,
        dependentRun.queue,
        dependentRun.id,
        {
          type: "RESUME",
          completedAttemptIds: [sourceTaskAttemptId],
          resumableAttemptId: batchRun.dependentTaskAttempt.id,
          checkpointEventId: batchRun.checkpointEventId
        },
        dependentRun.concurrencyKey ?? void 0
      );
    } else
      await marqs?.replaceMessage(dependentRun.id, {
        type: "RESUME",
        completedAttemptIds: batchRun.items.map((item) => item.taskRunAttemptId).filter(Boolean),
        resumableAttemptId: batchRun.dependentTaskAttempt.id
      });
  }
  static async enqueue(batchRunId, sourceTaskAttemptId, tx, runAt) {
    return await workerQueue.enqueue(
      "v3.resumeBatchRun",
      {
        batchRunId,
        sourceTaskAttemptId
      },
      {
        tx,
        runAt,
        jobKey: `resumeBatchRun-${batchRunId}`
      }
    );
  }
};

// app/v3/services/resumeTaskDependency.server.ts
var ResumeTaskDependencyService = class extends BaseService {
  async call(dependencyId, sourceTaskAttemptId) {
    let dependency = await this._prisma.taskRunDependency.findUnique({
      where: { id: dependencyId },
      include: {
        taskRun: {
          include: {
            runtimeEnvironment: {
              include: {
                project: !0,
                organization: !0
              }
            }
          }
        },
        dependentAttempt: {
          include: {
            taskRun: !0
          }
        }
      }
    });
    if (!dependency || !dependency.dependentAttempt || dependency.taskRun.runtimeEnvironment.type === "DEVELOPMENT")
      return;
    let dependentRun = dependency.dependentAttempt.taskRun;
    if (dependency.dependentAttempt.status === "PAUSED") {
      if (!dependency.checkpointEventId) {
        logger.error("Can't resume paused attempt without checkpoint event", {
          attemptId: dependency.id
        }), await marqs?.acknowledgeMessage(dependentRun.id);
        return;
      }
      await marqs?.enqueueMessage(
        dependency.taskRun.runtimeEnvironment,
        dependentRun.queue,
        dependentRun.id,
        {
          type: "RESUME",
          completedAttemptIds: [sourceTaskAttemptId],
          resumableAttemptId: dependency.dependentAttempt.id,
          checkpointEventId: dependency.checkpointEventId
        },
        dependentRun.concurrencyKey ?? void 0
      );
    } else
      await marqs?.replaceMessage(dependentRun.id, {
        type: "RESUME",
        completedAttemptIds: [sourceTaskAttemptId],
        resumableAttemptId: dependency.dependentAttempt.id
      });
  }
  static async enqueue(dependencyId, sourceTaskAttemptId, tx, runAt) {
    return await workerQueue.enqueue(
      "v3.resumeTaskDependency",
      {
        dependencyId,
        sourceTaskAttemptId
      },
      {
        tx,
        runAt
      }
    );
  }
};

// app/v3/services/resumeTaskRunDependencies.server.ts
var ResumeTaskRunDependenciesService = class extends BaseService {
  async call(attemptId) {
    let taskAttempt = await this._prisma.taskRunAttempt.findUnique({
      where: { id: attemptId },
      include: {
        taskRun: {
          include: {
            batchItems: !0,
            dependency: {
              include: {
                dependentAttempt: !0,
                dependentBatchRun: !0
              }
            }
          }
        },
        backgroundWorkerTask: !0,
        runtimeEnvironment: !0
      }
    });
    if (!taskAttempt || taskAttempt.runtimeEnvironment.type === "DEVELOPMENT")
      return;
    let { batchItems, dependency } = taskAttempt.taskRun;
    if (!(!batchItems.length && !dependency)) {
      if (batchItems.length) {
        for (let batchItem of batchItems)
          await this.#resumeBatchItem(batchItem, taskAttempt);
        return;
      }
      if (dependency) {
        await this.#resumeDependency(dependency, taskAttempt);
        return;
      }
    }
  }
  async #resumeBatchItem(batchItem, taskAttempt) {
    await $transaction(this._prisma, async (tx) => {
      await tx.batchTaskRunItem.update({
        where: {
          id: batchItem.id
        },
        data: {
          status: "COMPLETED",
          taskRunAttemptId: taskAttempt.id
        }
      }), await ResumeBatchRunService.enqueue(batchItem.batchTaskRunId, taskAttempt.id, tx);
    });
  }
  async #resumeDependency(dependency, taskAttempt) {
    await ResumeTaskDependencyService.enqueue(dependency.id, taskAttempt.id, this._prisma);
  }
  static async enqueue(attemptId, tx, runAt) {
    return await workerQueue.enqueue(
      "v3.resumeTaskRunDependencies",
      {
        attemptId
      },
      {
        tx,
        runAt,
        jobKey: `resumeTaskRunDependencies:${attemptId}`
      }
    );
  }
};

// app/v3/taskStatus.ts
var CANCELLABLE_RUN_STATUSES = [
  "DELAYED",
  "PENDING",
  "WAITING_FOR_DEPLOY",
  "EXECUTING",
  "PAUSED",
  "WAITING_TO_RESUME",
  "PAUSED",
  "RETRYING_AFTER_FAILURE"
], CANCELLABLE_ATTEMPT_STATUSES = [
  "EXECUTING",
  "PAUSED",
  "PENDING"
];
function isCancellableRunStatus(status) {
  return CANCELLABLE_RUN_STATUSES.includes(status);
}
var CRASHABLE_RUN_STATUSES = CANCELLABLE_RUN_STATUSES, CRASHABLE_ATTEMPT_STATUSES = CANCELLABLE_ATTEMPT_STATUSES;
function isCrashableRunStatus(status) {
  return CRASHABLE_RUN_STATUSES.includes(status);
}
var FINAL_RUN_STATUSES = [
  "CANCELED",
  "COMPLETED_SUCCESSFULLY",
  "COMPLETED_WITH_ERRORS",
  "INTERRUPTED",
  "SYSTEM_FAILURE",
  "EXPIRED"
], FINAL_ATTEMPT_STATUSES = ["CANCELED", "COMPLETED", "FAILED"], FREEZABLE_RUN_STATUSES = ["EXECUTING", "RETRYING_AFTER_FAILURE"], FREEZABLE_ATTEMPT_STATUSES = ["EXECUTING", "FAILED"];
function isFreezableRunStatus(status) {
  return FREEZABLE_RUN_STATUSES.includes(status);
}
function isFreezableAttemptStatus(status) {
  return FREEZABLE_ATTEMPT_STATUSES.includes(status);
}
function isFinalRunStatus(status) {
  return FINAL_RUN_STATUSES.includes(status);
}
function isFinalAttemptStatus(status) {
  return FINAL_ATTEMPT_STATUSES.includes(status);
}
var RESTORABLE_RUN_STATUSES = ["WAITING_TO_RESUME"], RESTORABLE_ATTEMPT_STATUSES = ["PAUSED"];
function isRestorableRunStatus(status) {
  return RESTORABLE_RUN_STATUSES.includes(status);
}
function isRestorableAttemptStatus(status) {
  return RESTORABLE_ATTEMPT_STATUSES.includes(status);
}

// app/v3/services/crashTaskRun.server.ts
var CrashTaskRunService = class extends BaseService {
  async call(runId, options2) {
    let opts = {
      reason: "Worker crashed",
      crashAttempts: !0,
      crashedAt: /* @__PURE__ */ new Date(),
      ...options2
    }, taskRun = await this._prisma.taskRun.findFirst({
      where: {
        id: runId
      }
    });
    if (!taskRun) {
      logger.error("Task run not found", { runId });
      return;
    }
    if (!opts.overrideCompletion && !isCrashableRunStatus(taskRun.status)) {
      logger.error("Task run is not in a crashable state", { runId, status: taskRun.status });
      return;
    }
    await marqs?.acknowledgeMessage(taskRun.id);
    let crashedTaskRun = await this._prisma.taskRun.update({
      where: {
        id: taskRun.id
      },
      data: {
        status: "CRASHED"
      },
      include: {
        attempts: {
          where: {
            status: {
              in: CRASHABLE_ATTEMPT_STATUSES
            }
          },
          include: {
            backgroundWorker: !0,
            runtimeEnvironment: !0
          }
        },
        dependency: !0,
        runtimeEnvironment: {
          include: {
            organization: !0,
            project: !0
          }
        }
      }
    }), inProgressEvents = await eventRepository.queryIncompleteEvents(
      {
        runId: taskRun.friendlyId
      },
      options2?.overrideCompletion
    );
    if (logger.debug("Crashing in-progress events", {
      inProgressEvents: inProgressEvents.map((event) => event.id)
    }), await Promise.all(
      inProgressEvents.map((event) => eventRepository.crashEvent({
        event,
        crashedAt: opts.crashedAt,
        exception: {
          type: "Worker crashed",
          message: opts.reason,
          stacktrace: opts.logs
        }
      }))
    ), !!opts.crashAttempts)
      for (let attempt of crashedTaskRun.attempts)
        await this.#failAttempt(
          attempt,
          crashedTaskRun,
          /* @__PURE__ */ new Date(),
          crashedTaskRun.runtimeEnvironment
        );
  }
  async #failAttempt(attempt, run, failedAt, environment) {
    return await this.traceWithEnv("failAttempt()", environment, async (span) => {
      span.setAttribute("taskRunId", run.id), span.setAttribute("attemptId", attempt.id), await marqs?.acknowledgeMessage(run.id), await this._prisma.taskRunAttempt.update({
        where: {
          id: attempt.id
        },
        data: {
          status: "FAILED",
          completedAt: failedAt
        }
      }), environment.type !== "DEVELOPMENT" && await ResumeTaskRunDependenciesService.enqueue(attempt.id, this._prisma);
    });
  }
};

// app/v3/machinePresets.server.ts
var import_v38 = require("@trigger.dev/platform/v3");
function machinePresetFromConfig(config) {
  let parsedConfig = MachineConfig.safeParse(config);
  if (!parsedConfig.success)
    return logger.error("Failed to parse machine config", { config }), machinePresetFromName("small-1x");
  if (parsedConfig.data.preset)
    return machinePresetFromName(parsedConfig.data.preset);
  if (parsedConfig.data.cpu && parsedConfig.data.memory) {
    let name = derivePresetNameFromValues(parsedConfig.data.cpu, parsedConfig.data.memory);
    return machinePresetFromName(name);
  }
  return machinePresetFromName("small-1x");
}
function machinePresetFromName(name) {
  return {
    name,
    ...import_v38.machines[name]
  };
}
function derivePresetNameFromValues(cpu, memory) {
  for (let [name, preset] of Object.entries(import_v38.machines))
    if (preset.cpu >= cpu && preset.memory >= memory)
      return name;
  return import_v38.defaultMachine;
}

// app/v3/services/createTaskRunAttempt.server.ts
var CreateTaskRunAttemptService = class extends BaseService {
  async call(runId, authenticatedEnv, setToExecuting = !0) {
    let environment = authenticatedEnv ?? await getAuthenticatedEnvironmentFromRun(runId, this._prisma);
    if (!environment)
      throw new ServiceValidationError("Environment not found", 404);
    let isFriendlyId = runId.startsWith("run_");
    return await this.traceWithEnv("call()", environment, async (span) => {
      isFriendlyId ? span.setAttribute("taskRunFriendlyId", runId) : span.setAttribute("taskRunId", runId);
      let taskRun = await this._prisma.taskRun.findUnique({
        where: {
          id: isFriendlyId ? void 0 : runId,
          friendlyId: isFriendlyId ? runId : void 0,
          runtimeEnvironmentId: environment.id
        },
        include: {
          tags: !0,
          attempts: {
            take: 1,
            orderBy: {
              number: "desc"
            }
          },
          lockedBy: {
            include: {
              worker: {
                select: {
                  id: !0,
                  version: !0,
                  sdkVersion: !0,
                  cliVersion: !0,
                  supportsLazyAttempts: !0
                }
              }
            }
          },
          batchItems: {
            include: {
              batchTaskRun: !0
            }
          }
        }
      });
      if (logger.debug("Creating a task run attempt", { taskRun }), !taskRun)
        throw new ServiceValidationError("Task run not found", 404);
      if (span.setAttribute("taskRunId", taskRun.id), span.setAttribute("taskRunFriendlyId", taskRun.friendlyId), taskRun.status === "CANCELED")
        throw new ServiceValidationError("Task run is cancelled", 400);
      if (!taskRun.lockedBy)
        throw new ServiceValidationError("Task run is not locked", 400);
      let queue = await this._prisma.taskQueue.findUnique({
        where: {
          runtimeEnvironmentId_name: {
            runtimeEnvironmentId: environment.id,
            name: taskRun.queue
          }
        }
      });
      if (!queue)
        throw new ServiceValidationError("Queue not found", 404);
      let nextAttemptNumber = taskRun.attempts[0] ? taskRun.attempts[0].number + 1 : 1;
      if (nextAttemptNumber > MAX_TASK_RUN_ATTEMPTS)
        throw await new CrashTaskRunService(this._prisma).call(taskRun.id, {
          reason: taskRun.lockedBy.worker.supportsLazyAttempts ? "Max attempts reached." : "Max attempts reached. Please upgrade your CLI and SDK."
        }), new ServiceValidationError("Max attempts reached", 400);
      let taskRunAttempt = await $transaction(this._prisma, async (tx) => {
        let taskRunAttempt2 = await tx.taskRunAttempt.create({
          data: {
            number: nextAttemptNumber,
            friendlyId: generateFriendlyId("attempt"),
            taskRunId: taskRun.id,
            startedAt: /* @__PURE__ */ new Date(),
            backgroundWorkerId: taskRun.lockedBy.worker.id,
            backgroundWorkerTaskId: taskRun.lockedBy.id,
            status: setToExecuting ? "EXECUTING" : "PENDING",
            queueId: queue.id,
            runtimeEnvironmentId: environment.id
          }
        });
        return setToExecuting && await tx.taskRun.update({
          where: {
            id: taskRun.id
          },
          data: {
            status: "EXECUTING"
          }
        }), taskRunAttempt2;
      });
      if (!taskRunAttempt)
        throw logger.error("Failed to create task run attempt", { runId: taskRun.id, nextAttemptNumber }), new ServiceValidationError("Failed to create task run attempt", 500);
      taskRunAttempt.number === 1 && taskRun.baseCostInCents > 0 && await workerQueue.enqueue("v3.reportUsage", {
        orgId: environment.organizationId,
        data: {
          costInCents: String(taskRun.baseCostInCents)
        },
        additionalData: {
          runId: taskRun.id
        }
      });
      let machinePreset = machinePresetFromConfig(taskRun.lockedBy.machineConfig ?? {});
      return {
        execution: {
          task: {
            id: taskRun.lockedBy.slug,
            filePath: taskRun.lockedBy.filePath,
            exportName: taskRun.lockedBy.exportName
          },
          attempt: {
            id: taskRunAttempt.friendlyId,
            number: taskRunAttempt.number,
            startedAt: taskRunAttempt.startedAt ?? taskRunAttempt.createdAt,
            backgroundWorkerId: taskRun.lockedBy.worker.id,
            backgroundWorkerTaskId: taskRun.lockedBy.id,
            status: "EXECUTING"
          },
          run: {
            id: taskRun.friendlyId,
            payload: taskRun.payload,
            payloadType: taskRun.payloadType,
            context: taskRun.context,
            createdAt: taskRun.createdAt,
            tags: taskRun.tags.map((tag) => tag.name),
            isTest: taskRun.isTest,
            idempotencyKey: taskRun.idempotencyKey ?? void 0,
            startedAt: taskRun.startedAt ?? taskRun.createdAt,
            durationMs: taskRun.usageDurationMs,
            costInCents: taskRun.costInCents,
            baseCostInCents: taskRun.baseCostInCents,
            maxAttempts: taskRun.maxAttempts ?? void 0
          },
          queue: {
            id: queue.friendlyId,
            name: queue.name
          },
          environment: {
            id: environment.id,
            slug: environment.slug,
            type: environment.type
          },
          organization: {
            id: environment.organization.id,
            slug: environment.organization.slug,
            name: environment.organization.title
          },
          project: {
            id: environment.project.id,
            ref: environment.project.externalRef,
            slug: environment.project.slug,
            name: environment.project.name
          },
          batch: taskRun.batchItems[0] && taskRun.batchItems[0].batchTaskRun ? { id: taskRun.batchItems[0].batchTaskRun.friendlyId } : void 0,
          machine: machinePreset
        },
        run: taskRun,
        attempt: taskRunAttempt
      };
    });
  }
};
async function getAuthenticatedEnvironmentFromRun(friendlyId, prismaClient) {
  let taskRun = await (prismaClient ?? prisma).taskRun.findUnique({
    where: {
      friendlyId
    },
    include: {
      runtimeEnvironment: {
        include: {
          organization: !0,
          project: !0
        }
      }
    }
  });
  if (taskRun)
    return taskRun?.runtimeEnvironment;
}

// app/v3/services/createCheckpointRestoreEvent.server.ts
var CreateCheckpointRestoreEventService = class extends BaseService {
  async checkpoint(params) {
    return this.#call({ ...params, type: "CHECKPOINT" });
  }
  async restore(params) {
    return this.#call({ ...params, type: "RESTORE" });
  }
  async #call(params) {
    if (params.dependencyFriendlyRunId && params.batchDependencyFriendlyId) {
      logger.error("Only one dependency can be set", { params });
      return;
    }
    let checkpoint = await this._prisma.checkpoint.findUnique({
      where: {
        id: params.checkpointId
      }
    });
    if (!checkpoint) {
      logger.error("Checkpoint not found", { id: params.checkpointId });
      return;
    }
    logger.debug("Creating checkpoint/restore event", { params });
    let taskRunDependencyId;
    if (params.dependencyFriendlyRunId && (taskRunDependencyId = (await this._prisma.taskRun.findUnique({
      where: {
        friendlyId: params.dependencyFriendlyRunId
      },
      select: {
        id: !0,
        dependency: {
          select: {
            id: !0
          }
        }
      }
    }))?.dependency?.id, !taskRunDependencyId)) {
      logger.error("Dependency or run not found", { runId: params.dependencyFriendlyRunId });
      return;
    }
    return await this._prisma.checkpointRestoreEvent.create({
      data: {
        checkpointId: checkpoint.id,
        runtimeEnvironmentId: checkpoint.runtimeEnvironmentId,
        projectId: checkpoint.projectId,
        attemptId: checkpoint.attemptId,
        runId: checkpoint.runId,
        type: params.type,
        reason: checkpoint.reason,
        metadata: checkpoint.metadata,
        ...taskRunDependencyId ? {
          taskRunDependency: {
            connect: {
              id: taskRunDependencyId
            }
          }
        } : void 0,
        ...params.batchDependencyFriendlyId ? {
          batchTaskRunDependency: {
            connect: {
              friendlyId: params.batchDependencyFriendlyId
            }
          }
        } : void 0
      }
    });
  }
};

// app/v3/services/restoreCheckpoint.server.ts
var RestoreCheckpointService = class extends BaseService {
  async call(params) {
    logger.debug("Restoring checkpoint", params);
    let checkpointEvent = await this._prisma.checkpointRestoreEvent.findUnique({
      where: {
        id: params.eventId,
        type: "CHECKPOINT"
      },
      include: {
        checkpoint: {
          include: {
            run: {
              select: {
                status: !0
              }
            },
            attempt: {
              select: {
                status: !0,
                backgroundWorkerTask: {
                  select: {
                    machineConfig: !0
                  }
                }
              }
            },
            runtimeEnvironment: !0
          }
        }
      }
    });
    if (!checkpointEvent) {
      logger.error("Checkpoint event not found", { eventId: params.eventId });
      return;
    }
    let checkpoint = checkpointEvent.checkpoint;
    if (!isRestorableRunStatus(checkpoint.run.status)) {
      logger.error("Run is unrestorable", {
        eventId: params.eventId,
        runId: checkpoint.runId,
        runStatus: checkpoint.run.status,
        attemptId: checkpoint.attemptId
      });
      return;
    }
    if (!isRestorableAttemptStatus(checkpoint.attempt.status) && !params.isRetry) {
      logger.error("Attempt is unrestorable", {
        eventId: params.eventId,
        runId: checkpoint.runId,
        attemptId: checkpoint.attemptId,
        attemptStatus: checkpoint.attempt.status
      });
      return;
    }
    let { machineConfig } = checkpoint.attempt.backgroundWorkerTask, machine = machinePresetFromConfig(machineConfig ?? {}), restoreEvent = await this._prisma.checkpointRestoreEvent.findFirst({
      where: {
        checkpointId: checkpoint.id,
        type: "RESTORE"
      }
    });
    if (restoreEvent) {
      logger.error("Restore event already exists", {
        runId: checkpoint.runId,
        attemptId: checkpoint.attemptId,
        checkpointId: checkpoint.id,
        restoreEventId: restoreEvent.id
      });
      return;
    }
    return await new CreateCheckpointRestoreEventService(this._prisma).restore({ checkpointId: checkpoint.id }), socketIo.providerNamespace.emit("RESTORE", {
      version: "v1",
      type: checkpoint.type,
      location: checkpoint.location,
      reason: checkpoint.reason ?? void 0,
      imageRef: checkpoint.imageRef,
      machine,
      // identifiers
      checkpointId: checkpoint.id,
      envId: checkpoint.runtimeEnvironment.id,
      envType: checkpoint.runtimeEnvironment.type,
      orgId: checkpoint.runtimeEnvironment.organizationId,
      projectId: checkpoint.runtimeEnvironment.projectId,
      runId: checkpoint.runId
    }), checkpoint;
  }
};

// app/services/apiAuth.server.ts
var import_zod50 = require("zod");

// app/services/personalAccessToken.server.ts
var import_nanoid3 = require("nanoid"), import_node_crypto3 = __toESM(require("node:crypto")), import_zod48 = require("zod");
var tokenValueLength = 40, tokenGenerator = (0, import_nanoid3.customAlphabet)("123456789abcdefghijkmnopqrstuvwxyz", tokenValueLength);
async function getValidPersonalAccessTokens(userId) {
  return (await prisma.personalAccessToken.findMany({
    select: {
      id: !0,
      name: !0,
      obfuscatedToken: !0,
      createdAt: !0,
      lastAccessedAt: !0
    },
    where: {
      userId,
      revokedAt: null
    }
  })).map((pat) => ({
    id: pat.id,
    name: pat.name,
    obfuscatedToken: pat.obfuscatedToken,
    createdAt: pat.createdAt,
    lastAccessedAt: pat.lastAccessedAt
  }));
}
async function getPersonalAccessTokenFromAuthorizationCode(authorizationCode) {
  let tenMinutesAgo = new Date(Date.now() - 6e5), code = await prisma.authorizationCode.findUnique({
    select: {
      personalAccessToken: !0
    },
    where: {
      code: authorizationCode,
      createdAt: {
        gte: tenMinutesAgo
      }
    }
  });
  if (!code)
    throw new Error("Invalid authorization code, or code expired");
  return code.personalAccessToken ? {
    token: {
      token: decryptPersonalAccessToken(code.personalAccessToken),
      obfuscatedToken: code.personalAccessToken.obfuscatedToken
    }
  } : {
    token: null
  };
}
async function revokePersonalAccessToken(tokenId) {
  await prisma.personalAccessToken.update({
    where: {
      id: tokenId
    },
    data: {
      revokedAt: /* @__PURE__ */ new Date()
    }
  });
}
var EncryptedSecretValueSchema2 = import_zod48.z.object({
  nonce: import_zod48.z.string(),
  ciphertext: import_zod48.z.string(),
  tag: import_zod48.z.string()
}), AuthorizationHeaderSchema = import_zod48.z.string().regex(/^Bearer .+$/);
async function authenticateApiRequestWithPersonalAccessToken(request) {
  let token = getPersonalAccessTokenFromRequest(request);
  if (token)
    return authenticatePersonalAccessToken(token);
}
function getPersonalAccessTokenFromRequest(request) {
  let rawAuthorization = request.headers.get("Authorization"), authorization = AuthorizationHeaderSchema.safeParse(rawAuthorization);
  return authorization.success ? authorization.data.replace(/^Bearer /, "") : void 0;
}
async function authenticatePersonalAccessToken(token) {
  if (!token.startsWith(tokenPrefix))
    return;
  let hashedToken = hashToken(token), personalAccessToken = await prisma.personalAccessToken.findFirst({
    where: {
      hashedToken,
      revokedAt: null
    }
  });
  if (!personalAccessToken)
    return;
  if (await prisma.personalAccessToken.update({
    where: {
      id: personalAccessToken.id
    },
    data: {
      lastAccessedAt: /* @__PURE__ */ new Date()
    }
  }), decryptPersonalAccessToken(personalAccessToken) !== token) {
    logger.error(
      `PersonalAccessToken with id: ${personalAccessToken.id} was found in the database with hash ${hashedToken}, but the decrypted token did not match the provided token.`
    );
    return;
  }
  return {
    userId: personalAccessToken.userId
  };
}
function isPersonalAccessToken(token) {
  return token.startsWith(tokenPrefix);
}
function createAuthorizationCode() {
  return prisma.authorizationCode.create({
    data: {
      code: (0, import_nanoid3.nanoid)(64)
    }
  });
}
async function createPersonalAccessTokenFromAuthorizationCode(authorizationCode, userId) {
  let tenMinutesAgo = new Date(Date.now() - 6e5);
  if (!await prisma.authorizationCode.findUnique({
    where: {
      code: authorizationCode,
      personalAccessTokenId: null,
      createdAt: {
        gte: tenMinutesAgo
      }
    }
  }))
    throw new Error("Invalid authorization code, code already used, or code expired");
  let existingCliPersonalAccessToken = await prisma.personalAccessToken.findFirst({
    where: {
      userId,
      name: "cli"
    }
  });
  if (existingCliPersonalAccessToken)
    return await prisma.authorizationCode.update({
      where: {
        code: authorizationCode
      },
      data: {
        personalAccessTokenId: existingCliPersonalAccessToken.id
      }
    }), existingCliPersonalAccessToken.revokedAt && await prisma.personalAccessToken.update({
      where: {
        id: existingCliPersonalAccessToken.id
      },
      data: {
        revokedAt: null
      }
    }), {
      id: existingCliPersonalAccessToken.id,
      name: existingCliPersonalAccessToken.name,
      userId: existingCliPersonalAccessToken.userId,
      obfuscateToken: existingCliPersonalAccessToken.obfuscatedToken
    };
  let token = await createPersonalAccessToken({
    name: "cli",
    userId
  });
  return await prisma.authorizationCode.update({
    where: {
      code: authorizationCode
    },
    data: {
      personalAccessTokenId: token.id
    }
  }), token;
}
async function createPersonalAccessToken({
  name,
  userId
}) {
  let token = createToken(), encryptedToken = encryptToken(token), personalAccessToken = await prisma.personalAccessToken.create({
    data: {
      name,
      userId,
      encryptedToken,
      obfuscatedToken: obfuscateToken(token),
      hashedToken: hashToken(token)
    }
  });
  return {
    id: personalAccessToken.id,
    name,
    userId,
    token,
    obfuscatedToken: personalAccessToken.obfuscatedToken
  };
}
var tokenPrefix = "tr_pat_";
function createToken() {
  return `${tokenPrefix}${tokenGenerator()}`;
}
function obfuscateToken(token) {
  let withoutPrefix = token.replace(tokenPrefix, ""), obfuscated = `${withoutPrefix.slice(0, 4)}${"\u2022".repeat(18)}${withoutPrefix.slice(-4)}`;
  return `${tokenPrefix}${obfuscated}`;
}
function encryptToken(value) {
  let nonce = import_node_crypto3.default.randomBytes(12), cipher = import_node_crypto3.default.createCipheriv("aes-256-gcm", env2.ENCRYPTION_KEY, nonce), encrypted = cipher.update(value, "utf8", "hex");
  encrypted += cipher.final("hex");
  let tag = cipher.getAuthTag().toString("hex");
  return {
    nonce: nonce.toString("hex"),
    ciphertext: encrypted,
    tag
  };
}
function decryptPersonalAccessToken(personalAccessToken) {
  let encryptedData = EncryptedSecretValueSchema2.safeParse(personalAccessToken.encryptedToken);
  if (!encryptedData.success)
    throw new Error(
      `Unable to parse encrypted PersonalAccessToken with id: ${personalAccessToken.id}: ${encryptedData.error.message}`
    );
  return decryptToken(
    encryptedData.data.nonce,
    encryptedData.data.ciphertext,
    encryptedData.data.tag
  );
}
function decryptToken(nonce, ciphertext, tag) {
  let decipher = import_node_crypto3.default.createDecipheriv(
    "aes-256-gcm",
    env2.ENCRYPTION_KEY,
    Buffer.from(nonce, "hex")
  );
  decipher.setAuthTag(Buffer.from(tag, "hex"));
  let decrypted = decipher.update(ciphertext, "hex", "utf8");
  return decrypted += decipher.final("utf8"), decrypted;
}
function hashToken(token) {
  let hash = import_node_crypto3.default.createHash("sha256");
  return hash.update(token), hash.digest("hex");
}

// app/services/apiAuth.server.ts
var import_server_runtime = require("@remix-run/server-runtime");

// app/models/project.server.ts
var import_nanoid6 = require("nanoid"), import_slug2 = __toESM(require("slug"));

// app/models/organization.server.ts
var import_nanoid5 = require("nanoid"), import_slug = __toESM(require("slug"));

// ../../node_modules/.pnpm/random-words@2.0.0/node_modules/random-words/index.js
var import_seedrandom = __toESM(require("seedrandom"), 1), wordList = [
  "ability",
  "able",
  "aboard",
  "about",
  "above",
  "accept",
  "accident",
  "according",
  "account",
  "accurate",
  "acres",
  "across",
  "act",
  "action",
  "active",
  "activity",
  "actual",
  "actually",
  "add",
  "addition",
  "additional",
  "adjective",
  "adult",
  "adventure",
  "advice",
  "affect",
  "afraid",
  "after",
  "afternoon",
  "again",
  "against",
  "age",
  "ago",
  "agree",
  "ahead",
  "aid",
  "air",
  "airplane",
  "alike",
  "alive",
  "all",
  "allow",
  "almost",
  "alone",
  "along",
  "aloud",
  "alphabet",
  "already",
  "also",
  "although",
  "am",
  "among",
  "amount",
  "ancient",
  "angle",
  "angry",
  "animal",
  "announced",
  "another",
  "answer",
  "ants",
  "any",
  "anybody",
  "anyone",
  "anything",
  "anyway",
  "anywhere",
  "apart",
  "apartment",
  "appearance",
  "apple",
  "applied",
  "appropriate",
  "are",
  "area",
  "arm",
  "army",
  "around",
  "arrange",
  "arrangement",
  "arrive",
  "arrow",
  "art",
  "article",
  "as",
  "aside",
  "ask",
  "asleep",
  "at",
  "ate",
  "atmosphere",
  "atom",
  "atomic",
  "attached",
  "attack",
  "attempt",
  "attention",
  "audience",
  "author",
  "automobile",
  "available",
  "average",
  "avoid",
  "aware",
  "away",
  "baby",
  "back",
  "bad",
  "badly",
  "bag",
  "balance",
  "ball",
  "balloon",
  "band",
  "bank",
  "bar",
  "bare",
  "bark",
  "barn",
  "base",
  "baseball",
  "basic",
  "basis",
  "basket",
  "bat",
  "battle",
  "be",
  "bean",
  "bear",
  "beat",
  "beautiful",
  "beauty",
  "became",
  "because",
  "become",
  "becoming",
  "bee",
  "been",
  "before",
  "began",
  "beginning",
  "begun",
  "behavior",
  "behind",
  "being",
  "believed",
  "bell",
  "belong",
  "below",
  "belt",
  "bend",
  "beneath",
  "bent",
  "beside",
  "best",
  "bet",
  "better",
  "between",
  "beyond",
  "bicycle",
  "bigger",
  "biggest",
  "bill",
  "birds",
  "birth",
  "birthday",
  "bit",
  "bite",
  "black",
  "blank",
  "blanket",
  "blew",
  "blind",
  "block",
  "blood",
  "blow",
  "blue",
  "board",
  "boat",
  "body",
  "bone",
  "book",
  "border",
  "born",
  "both",
  "bottle",
  "bottom",
  "bound",
  "bow",
  "bowl",
  "box",
  "boy",
  "brain",
  "branch",
  "brass",
  "brave",
  "bread",
  "break",
  "breakfast",
  "breath",
  "breathe",
  "breathing",
  "breeze",
  "brick",
  "bridge",
  "brief",
  "bright",
  "bring",
  "broad",
  "broke",
  "broken",
  "brother",
  "brought",
  "brown",
  "brush",
  "buffalo",
  "build",
  "building",
  "built",
  "buried",
  "burn",
  "burst",
  "bus",
  "bush",
  "business",
  "busy",
  "but",
  "butter",
  "buy",
  "by",
  "cabin",
  "cage",
  "cake",
  "call",
  "calm",
  "came",
  "camera",
  "camp",
  "can",
  "canal",
  "cannot",
  "cap",
  "capital",
  "captain",
  "captured",
  "car",
  "carbon",
  "card",
  "care",
  "careful",
  "carefully",
  "carried",
  "carry",
  "case",
  "cast",
  "castle",
  "cat",
  "catch",
  "cattle",
  "caught",
  "cause",
  "cave",
  "cell",
  "cent",
  "center",
  "central",
  "century",
  "certain",
  "certainly",
  "chain",
  "chair",
  "chamber",
  "chance",
  "change",
  "changing",
  "chapter",
  "character",
  "characteristic",
  "charge",
  "chart",
  "check",
  "cheese",
  "chemical",
  "chest",
  "chicken",
  "chief",
  "child",
  "children",
  "choice",
  "choose",
  "chose",
  "chosen",
  "church",
  "circle",
  "circus",
  "citizen",
  "city",
  "class",
  "classroom",
  "claws",
  "clay",
  "clean",
  "clear",
  "clearly",
  "climate",
  "climb",
  "clock",
  "close",
  "closely",
  "closer",
  "cloth",
  "clothes",
  "clothing",
  "cloud",
  "club",
  "coach",
  "coal",
  "coast",
  "coat",
  "coffee",
  "cold",
  "collect",
  "college",
  "colony",
  "color",
  "column",
  "combination",
  "combine",
  "come",
  "comfortable",
  "coming",
  "command",
  "common",
  "community",
  "company",
  "compare",
  "compass",
  "complete",
  "completely",
  "complex",
  "composed",
  "composition",
  "compound",
  "concerned",
  "condition",
  "congress",
  "connected",
  "consider",
  "consist",
  "consonant",
  "constantly",
  "construction",
  "contain",
  "continent",
  "continued",
  "contrast",
  "control",
  "conversation",
  "cook",
  "cookies",
  "cool",
  "copper",
  "copy",
  "corn",
  "corner",
  "correct",
  "correctly",
  "cost",
  "cotton",
  "could",
  "count",
  "country",
  "couple",
  "courage",
  "course",
  "court",
  "cover",
  "cow",
  "cowboy",
  "crack",
  "cream",
  "create",
  "creature",
  "crew",
  "crop",
  "cross",
  "crowd",
  "cry",
  "cup",
  "curious",
  "current",
  "curve",
  "customs",
  "cut",
  "cutting",
  "daily",
  "damage",
  "dance",
  "danger",
  "dangerous",
  "dark",
  "darkness",
  "date",
  "daughter",
  "dawn",
  "day",
  "dead",
  "deal",
  "dear",
  "death",
  "decide",
  "declared",
  "deep",
  "deeply",
  "deer",
  "definition",
  "degree",
  "depend",
  "depth",
  "describe",
  "desert",
  "design",
  "desk",
  "detail",
  "determine",
  "develop",
  "development",
  "diagram",
  "diameter",
  "did",
  "die",
  "differ",
  "difference",
  "different",
  "difficult",
  "difficulty",
  "dig",
  "dinner",
  "direct",
  "direction",
  "directly",
  "dirt",
  "dirty",
  "disappear",
  "discover",
  "discovery",
  "discuss",
  "discussion",
  "disease",
  "dish",
  "distance",
  "distant",
  "divide",
  "division",
  "do",
  "doctor",
  "does",
  "dog",
  "doing",
  "doll",
  "dollar",
  "done",
  "donkey",
  "door",
  "dot",
  "double",
  "doubt",
  "down",
  "dozen",
  "draw",
  "drawn",
  "dream",
  "dress",
  "drew",
  "dried",
  "drink",
  "drive",
  "driven",
  "driver",
  "driving",
  "drop",
  "dropped",
  "drove",
  "dry",
  "duck",
  "due",
  "dug",
  "dull",
  "during",
  "dust",
  "duty",
  "each",
  "eager",
  "ear",
  "earlier",
  "early",
  "earn",
  "earth",
  "easier",
  "easily",
  "east",
  "easy",
  "eat",
  "eaten",
  "edge",
  "education",
  "effect",
  "effort",
  "egg",
  "eight",
  "either",
  "electric",
  "electricity",
  "element",
  "elephant",
  "eleven",
  "else",
  "empty",
  "end",
  "enemy",
  "energy",
  "engine",
  "engineer",
  "enjoy",
  "enough",
  "enter",
  "entire",
  "entirely",
  "environment",
  "equal",
  "equally",
  "equator",
  "equipment",
  "escape",
  "especially",
  "essential",
  "establish",
  "even",
  "evening",
  "event",
  "eventually",
  "ever",
  "every",
  "everybody",
  "everyone",
  "everything",
  "everywhere",
  "evidence",
  "exact",
  "exactly",
  "examine",
  "example",
  "excellent",
  "except",
  "exchange",
  "excited",
  "excitement",
  "exciting",
  "exclaimed",
  "exercise",
  "exist",
  "expect",
  "experience",
  "experiment",
  "explain",
  "explanation",
  "explore",
  "express",
  "expression",
  "extra",
  "eye",
  "face",
  "facing",
  "fact",
  "factor",
  "factory",
  "failed",
  "fair",
  "fairly",
  "fall",
  "fallen",
  "familiar",
  "family",
  "famous",
  "far",
  "farm",
  "farmer",
  "farther",
  "fast",
  "fastened",
  "faster",
  "fat",
  "father",
  "favorite",
  "fear",
  "feathers",
  "feature",
  "fed",
  "feed",
  "feel",
  "feet",
  "fell",
  "fellow",
  "felt",
  "fence",
  "few",
  "fewer",
  "field",
  "fierce",
  "fifteen",
  "fifth",
  "fifty",
  "fight",
  "fighting",
  "figure",
  "fill",
  "film",
  "final",
  "finally",
  "find",
  "fine",
  "finest",
  "finger",
  "finish",
  "fire",
  "fireplace",
  "firm",
  "first",
  "fish",
  "five",
  "fix",
  "flag",
  "flame",
  "flat",
  "flew",
  "flies",
  "flight",
  "floating",
  "floor",
  "flow",
  "flower",
  "fly",
  "fog",
  "folks",
  "follow",
  "food",
  "foot",
  "football",
  "for",
  "force",
  "foreign",
  "forest",
  "forget",
  "forgot",
  "forgotten",
  "form",
  "former",
  "fort",
  "forth",
  "forty",
  "forward",
  "fought",
  "found",
  "four",
  "fourth",
  "fox",
  "frame",
  "free",
  "freedom",
  "frequently",
  "fresh",
  "friend",
  "friendly",
  "frighten",
  "frog",
  "from",
  "front",
  "frozen",
  "fruit",
  "fuel",
  "full",
  "fully",
  "fun",
  "function",
  "funny",
  "fur",
  "furniture",
  "further",
  "future",
  "gain",
  "game",
  "garage",
  "garden",
  "gas",
  "gasoline",
  "gate",
  "gather",
  "gave",
  "general",
  "generally",
  "gentle",
  "gently",
  "get",
  "getting",
  "giant",
  "gift",
  "girl",
  "give",
  "given",
  "giving",
  "glad",
  "glass",
  "globe",
  "go",
  "goes",
  "gold",
  "golden",
  "gone",
  "good",
  "goose",
  "got",
  "government",
  "grabbed",
  "grade",
  "gradually",
  "grain",
  "grandfather",
  "grandmother",
  "graph",
  "grass",
  "gravity",
  "gray",
  "great",
  "greater",
  "greatest",
  "greatly",
  "green",
  "grew",
  "ground",
  "group",
  "grow",
  "grown",
  "growth",
  "guard",
  "guess",
  "guide",
  "gulf",
  "gun",
  "habit",
  "had",
  "hair",
  "half",
  "halfway",
  "hall",
  "hand",
  "handle",
  "handsome",
  "hang",
  "happen",
  "happened",
  "happily",
  "happy",
  "harbor",
  "hard",
  "harder",
  "hardly",
  "has",
  "hat",
  "have",
  "having",
  "hay",
  "he",
  "headed",
  "heading",
  "health",
  "heard",
  "hearing",
  "heart",
  "heat",
  "heavy",
  "height",
  "held",
  "hello",
  "help",
  "helpful",
  "her",
  "herd",
  "here",
  "herself",
  "hidden",
  "hide",
  "high",
  "higher",
  "highest",
  "highway",
  "hill",
  "him",
  "himself",
  "his",
  "history",
  "hit",
  "hold",
  "hole",
  "hollow",
  "home",
  "honor",
  "hope",
  "horn",
  "horse",
  "hospital",
  "hot",
  "hour",
  "house",
  "how",
  "however",
  "huge",
  "human",
  "hundred",
  "hung",
  "hungry",
  "hunt",
  "hunter",
  "hurried",
  "hurry",
  "hurt",
  "husband",
  "ice",
  "idea",
  "identity",
  "if",
  "ill",
  "image",
  "imagine",
  "immediately",
  "importance",
  "important",
  "impossible",
  "improve",
  "in",
  "inch",
  "include",
  "including",
  "income",
  "increase",
  "indeed",
  "independent",
  "indicate",
  "individual",
  "industrial",
  "industry",
  "influence",
  "information",
  "inside",
  "instance",
  "instant",
  "instead",
  "instrument",
  "interest",
  "interior",
  "into",
  "introduced",
  "invented",
  "involved",
  "iron",
  "is",
  "island",
  "it",
  "its",
  "itself",
  "jack",
  "jar",
  "jet",
  "job",
  "join",
  "joined",
  "journey",
  "joy",
  "judge",
  "jump",
  "jungle",
  "just",
  "keep",
  "kept",
  "key",
  "kids",
  "kill",
  "kind",
  "kitchen",
  "knew",
  "knife",
  "know",
  "knowledge",
  "known",
  "label",
  "labor",
  "lack",
  "lady",
  "laid",
  "lake",
  "lamp",
  "land",
  "language",
  "large",
  "larger",
  "largest",
  "last",
  "late",
  "later",
  "laugh",
  "law",
  "lay",
  "layers",
  "lead",
  "leader",
  "leaf",
  "learn",
  "least",
  "leather",
  "leave",
  "leaving",
  "led",
  "left",
  "leg",
  "length",
  "lesson",
  "let",
  "letter",
  "level",
  "library",
  "lie",
  "life",
  "lift",
  "light",
  "like",
  "likely",
  "limited",
  "line",
  "lion",
  "lips",
  "liquid",
  "list",
  "listen",
  "little",
  "live",
  "living",
  "load",
  "local",
  "locate",
  "location",
  "log",
  "lonely",
  "long",
  "longer",
  "look",
  "loose",
  "lose",
  "loss",
  "lost",
  "lot",
  "loud",
  "love",
  "lovely",
  "low",
  "lower",
  "luck",
  "lucky",
  "lunch",
  "lungs",
  "lying",
  "machine",
  "machinery",
  "mad",
  "made",
  "magic",
  "magnet",
  "mail",
  "main",
  "mainly",
  "major",
  "make",
  "making",
  "man",
  "managed",
  "manner",
  "manufacturing",
  "many",
  "map",
  "mark",
  "market",
  "married",
  "mass",
  "massage",
  "master",
  "material",
  "mathematics",
  "matter",
  "may",
  "maybe",
  "me",
  "meal",
  "mean",
  "means",
  "meant",
  "measure",
  "meat",
  "medicine",
  "meet",
  "melted",
  "member",
  "memory",
  "men",
  "mental",
  "merely",
  "met",
  "metal",
  "method",
  "mice",
  "middle",
  "might",
  "mighty",
  "mile",
  "military",
  "milk",
  "mill",
  "mind",
  "mine",
  "minerals",
  "minute",
  "mirror",
  "missing",
  "mission",
  "mistake",
  "mix",
  "mixture",
  "model",
  "modern",
  "molecular",
  "moment",
  "money",
  "monkey",
  "month",
  "mood",
  "moon",
  "more",
  "morning",
  "most",
  "mostly",
  "mother",
  "motion",
  "motor",
  "mountain",
  "mouse",
  "mouth",
  "move",
  "movement",
  "movie",
  "moving",
  "mud",
  "muscle",
  "music",
  "musical",
  "must",
  "my",
  "myself",
  "mysterious",
  "nails",
  "name",
  "nation",
  "national",
  "native",
  "natural",
  "naturally",
  "nature",
  "near",
  "nearby",
  "nearer",
  "nearest",
  "nearly",
  "necessary",
  "neck",
  "needed",
  "needle",
  "needs",
  "negative",
  "neighbor",
  "neighborhood",
  "nervous",
  "nest",
  "never",
  "new",
  "news",
  "newspaper",
  "next",
  "nice",
  "night",
  "nine",
  "no",
  "nobody",
  "nodded",
  "noise",
  "none",
  "noon",
  "nor",
  "north",
  "nose",
  "not",
  "note",
  "noted",
  "nothing",
  "notice",
  "noun",
  "now",
  "number",
  "numeral",
  "nuts",
  "object",
  "observe",
  "obtain",
  "occasionally",
  "occur",
  "ocean",
  "of",
  "off",
  "offer",
  "office",
  "officer",
  "official",
  "oil",
  "old",
  "older",
  "oldest",
  "on",
  "once",
  "one",
  "only",
  "onto",
  "open",
  "operation",
  "opinion",
  "opportunity",
  "opposite",
  "or",
  "orange",
  "orbit",
  "order",
  "ordinary",
  "organization",
  "organized",
  "origin",
  "original",
  "other",
  "ought",
  "our",
  "ourselves",
  "out",
  "outer",
  "outline",
  "outside",
  "over",
  "own",
  "owner",
  "oxygen",
  "pack",
  "package",
  "page",
  "paid",
  "pain",
  "paint",
  "pair",
  "palace",
  "pale",
  "pan",
  "paper",
  "paragraph",
  "parallel",
  "parent",
  "park",
  "part",
  "particles",
  "particular",
  "particularly",
  "partly",
  "parts",
  "party",
  "pass",
  "passage",
  "past",
  "path",
  "pattern",
  "pay",
  "peace",
  "pen",
  "pencil",
  "people",
  "per",
  "percent",
  "perfect",
  "perfectly",
  "perhaps",
  "period",
  "person",
  "personal",
  "pet",
  "phrase",
  "physical",
  "piano",
  "pick",
  "picture",
  "pictured",
  "pie",
  "piece",
  "pig",
  "pile",
  "pilot",
  "pine",
  "pink",
  "pipe",
  "pitch",
  "place",
  "plain",
  "plan",
  "plane",
  "planet",
  "planned",
  "planning",
  "plant",
  "plastic",
  "plate",
  "plates",
  "play",
  "pleasant",
  "please",
  "pleasure",
  "plenty",
  "plural",
  "plus",
  "pocket",
  "poem",
  "poet",
  "poetry",
  "point",
  "pole",
  "police",
  "policeman",
  "political",
  "pond",
  "pony",
  "pool",
  "poor",
  "popular",
  "population",
  "porch",
  "port",
  "position",
  "positive",
  "possible",
  "possibly",
  "post",
  "pot",
  "potatoes",
  "pound",
  "pour",
  "powder",
  "power",
  "powerful",
  "practical",
  "practice",
  "prepare",
  "present",
  "president",
  "press",
  "pressure",
  "pretty",
  "prevent",
  "previous",
  "price",
  "pride",
  "primitive",
  "principal",
  "principle",
  "printed",
  "private",
  "prize",
  "probably",
  "problem",
  "process",
  "produce",
  "product",
  "production",
  "program",
  "progress",
  "promised",
  "proper",
  "properly",
  "property",
  "protection",
  "proud",
  "prove",
  "provide",
  "public",
  "pull",
  "pupil",
  "pure",
  "purple",
  "purpose",
  "push",
  "put",
  "putting",
  "quarter",
  "queen",
  "question",
  "quick",
  "quickly",
  "quiet",
  "quietly",
  "quite",
  "rabbit",
  "race",
  "radio",
  "railroad",
  "rain",
  "raise",
  "ran",
  "ranch",
  "range",
  "rapidly",
  "rate",
  "rather",
  "raw",
  "rays",
  "reach",
  "read",
  "reader",
  "ready",
  "real",
  "realize",
  "rear",
  "reason",
  "recall",
  "receive",
  "recent",
  "recently",
  "recognize",
  "record",
  "red",
  "refer",
  "refused",
  "region",
  "regular",
  "related",
  "relationship",
  "religious",
  "remain",
  "remarkable",
  "remember",
  "remove",
  "repeat",
  "replace",
  "replied",
  "report",
  "represent",
  "require",
  "research",
  "respect",
  "rest",
  "result",
  "return",
  "review",
  "rhyme",
  "rhythm",
  "rice",
  "rich",
  "ride",
  "riding",
  "right",
  "ring",
  "rise",
  "rising",
  "river",
  "road",
  "roar",
  "rock",
  "rocket",
  "rocky",
  "rod",
  "roll",
  "roof",
  "room",
  "root",
  "rope",
  "rose",
  "rough",
  "round",
  "route",
  "row",
  "rubbed",
  "rubber",
  "rule",
  "ruler",
  "run",
  "running",
  "rush",
  "sad",
  "saddle",
  "safe",
  "safety",
  "said",
  "sail",
  "sale",
  "salmon",
  "salt",
  "same",
  "sand",
  "sang",
  "sat",
  "satellites",
  "satisfied",
  "save",
  "saved",
  "saw",
  "say",
  "scale",
  "scared",
  "scene",
  "school",
  "science",
  "scientific",
  "scientist",
  "score",
  "screen",
  "sea",
  "search",
  "season",
  "seat",
  "second",
  "secret",
  "section",
  "see",
  "seed",
  "seeing",
  "seems",
  "seen",
  "seldom",
  "select",
  "selection",
  "sell",
  "send",
  "sense",
  "sent",
  "sentence",
  "separate",
  "series",
  "serious",
  "serve",
  "service",
  "sets",
  "setting",
  "settle",
  "settlers",
  "seven",
  "several",
  "shade",
  "shadow",
  "shake",
  "shaking",
  "shall",
  "shallow",
  "shape",
  "share",
  "sharp",
  "she",
  "sheep",
  "sheet",
  "shelf",
  "shells",
  "shelter",
  "shine",
  "shinning",
  "ship",
  "shirt",
  "shoe",
  "shoot",
  "shop",
  "shore",
  "short",
  "shorter",
  "shot",
  "should",
  "shoulder",
  "shout",
  "show",
  "shown",
  "shut",
  "sick",
  "sides",
  "sight",
  "sign",
  "signal",
  "silence",
  "silent",
  "silk",
  "silly",
  "silver",
  "similar",
  "simple",
  "simplest",
  "simply",
  "since",
  "sing",
  "single",
  "sink",
  "sister",
  "sit",
  "sitting",
  "situation",
  "six",
  "size",
  "skill",
  "skin",
  "sky",
  "slabs",
  "slave",
  "sleep",
  "slept",
  "slide",
  "slight",
  "slightly",
  "slip",
  "slipped",
  "slope",
  "slow",
  "slowly",
  "small",
  "smaller",
  "smallest",
  "smell",
  "smile",
  "smoke",
  "smooth",
  "snake",
  "snow",
  "so",
  "soap",
  "social",
  "society",
  "soft",
  "softly",
  "soil",
  "solar",
  "sold",
  "soldier",
  "solid",
  "solution",
  "solve",
  "some",
  "somebody",
  "somehow",
  "someone",
  "something",
  "sometime",
  "somewhere",
  "son",
  "song",
  "soon",
  "sort",
  "sound",
  "source",
  "south",
  "southern",
  "space",
  "speak",
  "special",
  "species",
  "specific",
  "speech",
  "speed",
  "spell",
  "spend",
  "spent",
  "spider",
  "spin",
  "spirit",
  "spite",
  "split",
  "spoken",
  "sport",
  "spread",
  "spring",
  "square",
  "stage",
  "stairs",
  "stand",
  "standard",
  "star",
  "stared",
  "start",
  "state",
  "statement",
  "station",
  "stay",
  "steady",
  "steam",
  "steel",
  "steep",
  "stems",
  "step",
  "stepped",
  "stick",
  "stiff",
  "still",
  "stock",
  "stomach",
  "stone",
  "stood",
  "stop",
  "stopped",
  "store",
  "storm",
  "story",
  "stove",
  "straight",
  "strange",
  "stranger",
  "straw",
  "stream",
  "street",
  "strength",
  "stretch",
  "strike",
  "string",
  "strip",
  "strong",
  "stronger",
  "struck",
  "structure",
  "struggle",
  "stuck",
  "student",
  "studied",
  "studying",
  "subject",
  "substance",
  "success",
  "successful",
  "such",
  "sudden",
  "suddenly",
  "sugar",
  "suggest",
  "suit",
  "sum",
  "summer",
  "sun",
  "sunlight",
  "supper",
  "supply",
  "support",
  "suppose",
  "sure",
  "surface",
  "surprise",
  "surrounded",
  "swam",
  "sweet",
  "swept",
  "swim",
  "swimming",
  "swing",
  "swung",
  "syllable",
  "symbol",
  "system",
  "table",
  "tail",
  "take",
  "taken",
  "tales",
  "talk",
  "tall",
  "tank",
  "tape",
  "task",
  "taste",
  "taught",
  "tax",
  "tea",
  "teach",
  "teacher",
  "team",
  "tears",
  "teeth",
  "telephone",
  "television",
  "tell",
  "temperature",
  "ten",
  "tent",
  "term",
  "terrible",
  "test",
  "than",
  "thank",
  "that",
  "thee",
  "them",
  "themselves",
  "then",
  "theory",
  "there",
  "therefore",
  "these",
  "they",
  "thick",
  "thin",
  "thing",
  "think",
  "third",
  "thirty",
  "this",
  "those",
  "thou",
  "though",
  "thought",
  "thousand",
  "thread",
  "three",
  "threw",
  "throat",
  "through",
  "throughout",
  "throw",
  "thrown",
  "thumb",
  "thus",
  "thy",
  "tide",
  "tie",
  "tight",
  "tightly",
  "till",
  "time",
  "tin",
  "tiny",
  "tip",
  "tired",
  "title",
  "to",
  "tobacco",
  "today",
  "together",
  "told",
  "tomorrow",
  "tone",
  "tongue",
  "tonight",
  "too",
  "took",
  "tool",
  "top",
  "topic",
  "torn",
  "total",
  "touch",
  "toward",
  "tower",
  "town",
  "toy",
  "trace",
  "track",
  "trade",
  "traffic",
  "trail",
  "train",
  "transportation",
  "trap",
  "travel",
  "treated",
  "tree",
  "triangle",
  "tribe",
  "trick",
  "tried",
  "trip",
  "troops",
  "tropical",
  "trouble",
  "truck",
  "trunk",
  "truth",
  "try",
  "tube",
  "tune",
  "turn",
  "twelve",
  "twenty",
  "twice",
  "two",
  "type",
  "typical",
  "uncle",
  "under",
  "underline",
  "understanding",
  "unhappy",
  "union",
  "unit",
  "universe",
  "unknown",
  "unless",
  "until",
  "unusual",
  "up",
  "upon",
  "upper",
  "upward",
  "us",
  "use",
  "useful",
  "using",
  "usual",
  "usually",
  "valley",
  "valuable",
  "value",
  "vapor",
  "variety",
  "various",
  "vast",
  "vegetable",
  "verb",
  "vertical",
  "very",
  "vessels",
  "victory",
  "view",
  "village",
  "visit",
  "visitor",
  "voice",
  "volume",
  "vote",
  "vowel",
  "voyage",
  "wagon",
  "wait",
  "walk",
  "wall",
  "want",
  "war",
  "warm",
  "warn",
  "was",
  "wash",
  "waste",
  "watch",
  "water",
  "wave",
  "way",
  "we",
  "weak",
  "wealth",
  "wear",
  "weather",
  "week",
  "weigh",
  "weight",
  "welcome",
  "well",
  "went",
  "were",
  "west",
  "western",
  "wet",
  "whale",
  "what",
  "whatever",
  "wheat",
  "wheel",
  "when",
  "whenever",
  "where",
  "wherever",
  "whether",
  "which",
  "while",
  "whispered",
  "whistle",
  "white",
  "who",
  "whole",
  "whom",
  "whose",
  "why",
  "wide",
  "widely",
  "wife",
  "wild",
  "will",
  "willing",
  "win",
  "wind",
  "window",
  "wing",
  "winter",
  "wire",
  "wise",
  "wish",
  "with",
  "within",
  "without",
  "wolf",
  "women",
  "won",
  "wonder",
  "wonderful",
  "wood",
  "wooden",
  "wool",
  "word",
  "wore",
  "work",
  "worker",
  "world",
  "worried",
  "worry",
  "worse",
  "worth",
  "would",
  "wrapped",
  "write",
  "writer",
  "writing",
  "written",
  "wrong",
  "wrote",
  "yard",
  "year",
  "yellow",
  "yes",
  "yesterday",
  "yet",
  "you",
  "young",
  "younger",
  "your",
  "yourself",
  "youth",
  "zero",
  "zebra",
  "zipper",
  "zoo",
  "zulu"
], shortestWordSize = wordList.reduce(
  (shortestWord, currentWord) => currentWord.length < shortestWord.length ? currentWord : shortestWord
).length, longestWordSize = wordList.reduce(
  (longestWord, currentWord) => currentWord.length > longestWord.length ? currentWord : longestWord
).length;
function generate(options2) {
  let random = options2?.seed ? new import_seedrandom.default(options2.seed) : null, { minLength, maxLength, ...rest } = options2 || {};
  function word() {
    let min = typeof minLength != "number" ? shortestWordSize : limitWordSize(minLength), max = typeof maxLength != "number" ? longestWordSize : limitWordSize(maxLength);
    min > max && (min = max);
    let rightSize = !1, wordUsed;
    for (; !rightSize; )
      wordUsed = generateRandomWord(), rightSize = wordUsed.length <= max && wordUsed.length >= min;
    return wordUsed;
  }
  function generateRandomWord() {
    return wordList[randInt(wordList.length)];
  }
  function limitWordSize(wordSize) {
    return wordSize < shortestWordSize && (wordSize = shortestWordSize), wordSize > longestWordSize && (wordSize = longestWordSize), wordSize;
  }
  function randInt(lessThan) {
    let r = random ? random() : Math.random();
    return Math.floor(r * lessThan);
  }
  if (options2 === void 0)
    return word();
  if (typeof options2 == "number")
    options2 = { exactly: options2 };
  else if (Object.keys(rest).length === 0)
    return word();
  options2.exactly && (options2.min = options2.exactly, options2.max = options2.exactly), typeof options2.wordsPerString != "number" && (options2.wordsPerString = 1), typeof options2.formatter != "function" && (options2.formatter = (word2) => word2), typeof options2.separator != "string" && (options2.separator = " ");
  let total = options2.min + randInt(options2.max + 1 - options2.min), results = [], token = "", relativeIndex = 0;
  for (let i = 0; i < total * options2.wordsPerString; i++)
    relativeIndex === options2.wordsPerString - 1 ? token += options2.formatter(word(), relativeIndex) : token += options2.formatter(word(), relativeIndex) + options2.separator, relativeIndex++, (i + 1) % options2.wordsPerString === 0 && (results.push(token), token = "", relativeIndex = 0);
  return typeof options2.join == "string" && (results = results.join(options2.join)), results;
}

// app/models/api-key.server.ts
var import_nanoid4 = require("nanoid");

// app/database-types.ts
var BatchTaskRunItemStatus = {
  PENDING: "PENDING",
  FAILED: "FAILED",
  CANCELED: "CANCELED",
  COMPLETED: "COMPLETED"
}, TaskRunAttemptStatus = {
  PENDING: "PENDING",
  EXECUTING: "EXECUTING",
  PAUSED: "PAUSED",
  FAILED: "FAILED",
  CANCELED: "CANCELED",
  COMPLETED: "COMPLETED"
}, TaskRunStatus = {
  PENDING: "PENDING",
  WAITING_FOR_DEPLOY: "WAITING_FOR_DEPLOY",
  EXECUTING: "EXECUTING",
  WAITING_TO_RESUME: "WAITING_TO_RESUME",
  RETRYING_AFTER_FAILURE: "RETRYING_AFTER_FAILURE",
  PAUSED: "PAUSED",
  CANCELED: "CANCELED",
  INTERRUPTED: "INTERRUPTED",
  COMPLETED_SUCCESSFULLY: "COMPLETED_SUCCESSFULLY",
  COMPLETED_WITH_ERRORS: "COMPLETED_WITH_ERRORS",
  SYSTEM_FAILURE: "SYSTEM_FAILURE",
  CRASHED: "CRASHED",
  DELAYED: "DELAYED",
  EXPIRED: "EXPIRED"
}, JobRunStatus = {
  PENDING: "PENDING",
  QUEUED: "QUEUED",
  WAITING_ON_CONNECTIONS: "WAITING_ON_CONNECTIONS",
  PREPROCESSING: "PREPROCESSING",
  STARTED: "STARTED",
  EXECUTING: "EXECUTING",
  WAITING_TO_CONTINUE: "WAITING_TO_CONTINUE",
  WAITING_TO_EXECUTE: "WAITING_TO_EXECUTE",
  SUCCESS: "SUCCESS",
  FAILURE: "FAILURE",
  TIMED_OUT: "TIMED_OUT",
  ABORTED: "ABORTED",
  CANCELED: "CANCELED",
  UNRESOLVED_AUTH: "UNRESOLVED_AUTH",
  INVALID_PAYLOAD: "INVALID_PAYLOAD"
}, RuntimeEnvironmentType3 = {
  PRODUCTION: "PRODUCTION",
  STAGING: "STAGING",
  DEVELOPMENT: "DEVELOPMENT",
  PREVIEW: "PREVIEW"
};

// app/models/api-key.server.ts
var apiKeyId = (0, import_nanoid4.customAlphabet)(
  "1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ",
  12
);
async function regenerateApiKey({ userId, environmentId }) {
  let environment = await prisma.runtimeEnvironment.findUnique({
    where: {
      id: environmentId
    },
    include: {
      organization: !0,
      project: !0
    }
  });
  if (!environment)
    throw new Error("Environment does not exist");
  let organization = await prisma.organization.findFirst({
    where: {
      id: environment.organization.id,
      members: { some: { userId } }
    }
  });
  if (!organization)
    throw new Error("User does not have permission to regenerate API key");
  if (environment.type === RuntimeEnvironmentType3.DEVELOPMENT) {
    if (!environment.orgMemberId)
      throw new Error("User does not have permission to regenerate API key");
    if (!await prisma.orgMember.findFirst({
      where: {
        organizationId: organization.id,
        userId,
        id: environment.orgMemberId
      }
    }))
      throw new Error("User does not have permission to regenerate API key");
  }
  let newApiKey = createApiKeyForEnv(environment.type), newPkApiKey = createPkApiKeyForEnv(environment.type);
  return await prisma.runtimeEnvironment.update({
    data: {
      apiKey: newApiKey,
      pkApiKey: newPkApiKey
    },
    where: {
      id: environmentId
    }
  });
}
function createApiKeyForEnv(envType) {
  return `tr_${envSlug(envType)}_${apiKeyId(20)}`;
}
function createPkApiKeyForEnv(envType) {
  return `pk_${envSlug(envType)}_${apiKeyId(20)}`;
}
function envSlug(environmentType) {
  switch (environmentType) {
    case "DEVELOPMENT":
      return "dev";
    case "PRODUCTION":
      return "prod";
    case "STAGING":
      return "stg";
    case "PREVIEW":
      return "prev";
  }
}
function isEnvSlug(maybeSlug) {
  return ["dev", "stg", "prod", "prev"].includes(maybeSlug);
}

// app/utils/requestUrl.server.ts
function requestUrl(request) {
  let url = new URL(request.url);
  return request.headers.get("x-forwarded-proto") === "https" && (url.protocol = "https:"), url;
}

// app/features.server.ts
function isManagedCloud(host) {
  return host === "cloud.trigger.dev" || host === "test-cloud.trigger.dev" || host === "internal.trigger.dev" || process.env.CLOUD_ENV === "development";
}
function featuresForHost(host) {
  return {
    isManagedCloud: isManagedCloud(host),
    v3Enabled: env2.V3_ENABLED === "true",
    alertsEnabled: env2.ALERT_FROM_EMAIL !== void 0 && env2.ALERT_RESEND_API_KEY !== void 0
  };
}
function featuresForRequest(request) {
  let url = requestUrl(request);
  return featuresForUrl(url);
}
function featuresForUrl(url) {
  return featuresForHost(url.host);
}

// app/models/organization.server.ts
var nanoid3 = (0, import_nanoid5.customAlphabet)("1234567890abcdef", 4);
async function createOrganization({
  title: title2,
  userId,
  companySize
}, attemptCount = 0) {
  if (typeof process.env.BLOCKED_USERS == "string" && process.env.BLOCKED_USERS.includes(userId))
    throw new Error("Organization could not be created.");
  let uniqueOrgSlug = `${(0, import_slug.default)(title2)}-${nanoid3(4)}`, orgWithSameSlug = await prisma.organization.findFirst({
    where: { slug: uniqueOrgSlug }
  });
  if (attemptCount > 100)
    throw new Error(`Unable to create organization with slug ${uniqueOrgSlug} after 100 attempts`);
  if (orgWithSameSlug)
    return createOrganization(
      {
        title: title2,
        userId,
        companySize
      },
      attemptCount + 1
    );
  let features = featuresForUrl(new URL(env2.APP_ORIGIN));
  return { ...await prisma.organization.create({
    data: {
      title: title2,
      slug: uniqueOrgSlug,
      companySize,
      maximumConcurrencyLimit: env2.DEFAULT_ORG_EXECUTION_CONCURRENCY_LIMIT,
      members: {
        create: {
          userId,
          role: "ADMIN"
        }
      },
      v3Enabled: features.v3Enabled && !features.isManagedCloud
    },
    include: {
      members: !0
    }
  }) };
}
async function createEnvironment(organization, project, type, member, prismaClient = prisma) {
  let slug3 = envSlug(type), apiKey = createApiKeyForEnv(type), pkApiKey = createPkApiKeyForEnv(type), shortcode = createShortcode().join("-");
  return await prismaClient.runtimeEnvironment.create({
    data: {
      slug: slug3,
      apiKey,
      pkApiKey,
      shortcode,
      autoEnableInternalSources: type !== "DEVELOPMENT",
      maximumConcurrencyLimit: organization.maximumConcurrencyLimit / 3,
      organization: {
        connect: {
          id: organization.id
        }
      },
      project: {
        connect: {
          id: project.id
        }
      },
      orgMember: member ? { connect: { id: member.id } } : void 0,
      type
    }
  });
}
function createShortcode() {
  return generate({ exactly: 2 });
}

// app/services/platform.v3.server.ts
var import_v39 = require("@trigger.dev/platform/v3"), import_remix_typedjson3 = require("remix-typedjson");

// app/models/message.server.ts
var import_node2 = require("@remix-run/node"), import_node3 = require("@remix-run/node"), import_remix_typedjson2 = require("remix-typedjson");
var ONE_YEAR = 1e3 * 60 * 60 * 24 * 365, { commitSession: commitSession2, getSession: getSession2 } = (0, import_node3.createCookieSessionStorage)({
  cookie: {
    name: "__message",
    path: "/",
    httpOnly: !0,
    sameSite: "lax",
    secrets: [env2.SESSION_SECRET],
    secure: env2.NODE_ENV === "production"
  }
});
function setSuccessMessage(session, message, options2) {
  session.flash("toastMessage", {
    message,
    type: "success",
    options: {
      ephemeral: options2?.ephemeral ?? !0
    }
  });
}
function setErrorMessage(session, message, options2) {
  session.flash("toastMessage", {
    message,
    type: "error",
    options: {
      ephemeral: options2?.ephemeral ?? !0
    }
  });
}
async function jsonWithSuccessMessage(data2, request, message, options2) {
  let session = await getSession2(request.headers.get("cookie"));
  return setSuccessMessage(session, message, options2), (0, import_node2.json)(data2, {
    headers: {
      "Set-Cookie": await commitSession2(session, {
        expires: new Date(Date.now() + ONE_YEAR)
      })
    }
  });
}
async function jsonWithErrorMessage(data2, request, message, options2) {
  let session = await getSession2(request.headers.get("cookie"));
  return setErrorMessage(session, message, options2), (0, import_node2.json)(data2, {
    headers: {
      "Set-Cookie": await commitSession2(session, {
        expires: new Date(Date.now() + ONE_YEAR)
      })
    }
  });
}
async function redirectWithSuccessMessage(path2, request, message, options2) {
  let session = await getSession2(request.headers.get("cookie"));
  return setSuccessMessage(session, message, options2), (0, import_remix_typedjson2.redirect)(path2, {
    headers: {
      "Set-Cookie": await commitSession2(session, {
        expires: new Date(Date.now() + ONE_YEAR)
      })
    }
  });
}
async function redirectWithErrorMessage(path2, request, message, options2) {
  let session = await getSession2(request.headers.get("cookie"));
  return setErrorMessage(session, message, options2), (0, import_remix_typedjson2.redirect)(path2, {
    headers: {
      "Set-Cookie": await commitSession2(session, {
        expires: new Date(Date.now() + ONE_YEAR)
      })
    }
  });
}
async function redirectBackWithErrorMessage(request, message, options2) {
  let url = new URL(request.url);
  return redirectWithErrorMessage(url.pathname, request, message, options2);
}

// app/utils/pathBuilder.ts
var import_zod49 = require("zod");

// app/utils/searchParams.ts
var import_zod_validation_error3 = require("zod-validation-error");
function objectToSearchParams(obj) {
  if (!obj)
    return;
  let searchParams = new URLSearchParams();
  return Object.entries(obj).forEach(([key, value]) => {
    value !== void 0 && (Array.isArray(value) ? searchParams.append(key, value.join(",")) : searchParams.append(key, value.toString()));
  }), searchParams;
}
var SearchParams = class {
  constructor(params, schema18) {
    this.params = params;
    this.schema = schema18;
  }
  get(key) {
    return this.params[key];
  }
  getAll() {
    return this.params;
  }
  set(key, value) {
    let newParams = { ...this.params, [key]: value }, result = parseSearchParams(newParams, this.schema);
    return result.success ? (this.params = newParams, { success: !0 }) : { success: !1, error: result.error };
  }
};
function createSearchParams(url, schema18) {
  let searchParams = new URL(url).searchParams, params = Object.fromEntries(searchParams.entries()), parsed = parseSearchParams(params, schema18);
  return parsed.success ? { success: !0, params: new SearchParams(parsed.params, schema18) } : { success: !1, error: parsed.error };
}
function parseSearchParams(params, schema18) {
  let parsedParams = schema18.safeParse(params);
  return parsedParams.success ? { success: !0, params: parsedParams.data } : { success: !1, error: (0, import_zod_validation_error3.fromZodError)(parsedParams.error, {
    prefix: "There's an issue with your search params"
  }).message };
}

// app/utils/pathBuilder.ts
var OrganizationParamsSchema = import_zod49.z.object({
  organizationSlug: import_zod49.z.string()
}), ProjectParamSchema = OrganizationParamsSchema.extend({
  projectParam: import_zod49.z.string()
}), JobParamsSchema = ProjectParamSchema.extend({
  jobParam: import_zod49.z.string()
}), RunParamsSchema = JobParamsSchema.extend({
  runParam: import_zod49.z.string()
}), TaskParamsSchema = RunParamsSchema.extend({
  taskParam: import_zod49.z.string()
}), IntegrationClientParamSchema = OrganizationParamsSchema.extend({
  clientParam: import_zod49.z.string()
}), TriggerSourceParamSchema = ProjectParamSchema.extend({
  triggerParam: import_zod49.z.string()
}), EventParamSchema = ProjectParamSchema.extend({
  eventParam: import_zod49.z.string()
}), TriggerSourceRunParamsSchema = TriggerSourceParamSchema.extend({
  runParam: import_zod49.z.string()
}), TriggerSourceRunTaskParamsSchema = TriggerSourceRunParamsSchema.extend({
  taskParam: import_zod49.z.string()
}), HttpEndpointParamSchema = ProjectParamSchema.extend({
  httpEndpointParam: import_zod49.z.string()
}), v3TaskParamsSchema = ProjectParamSchema.extend({
  taskParam: import_zod49.z.string()
}), v3RunParamsSchema = ProjectParamSchema.extend({
  runParam: import_zod49.z.string()
}), v3SpanParamsSchema = v3RunParamsSchema.extend({
  spanParam: import_zod49.z.string()
}), v3DeploymentParams = ProjectParamSchema.extend({
  deploymentParam: import_zod49.z.string()
}), v3ScheduleParams = ProjectParamSchema.extend({
  scheduleParam: import_zod49.z.string()
});
function rootPath() {
  return "/";
}
function accountPath() {
  return "/account";
}
function personalAccessTokensPath() {
  return "/account/tokens";
}
function invitesPath() {
  return "/invites";
}
function confirmBasicDetailsPath() {
  return "/confirm-basic-details";
}
function acceptInvitePath(token) {
  return `/invite-accept?token=${token}`;
}
function resendInvitePath() {
  return "/invite-resend";
}
function logoutPath() {
  return "/logout";
}
function revokeInvitePath() {
  return "/invite-revoke";
}
function organizationPath(organization) {
  return `/orgs/${organizationParam(organization)}`;
}
function newOrganizationPath() {
  return "/orgs/new";
}
function selectPlanPath(organization) {
  return `${organizationPath(organization)}/select-plan`;
}
function organizationTeamPath(organization) {
  return `${organizationPath(organization)}/team`;
}
function inviteTeamMemberPath(organization) {
  return `${organizationPath(organization)}/invite`;
}
function organizationBillingPath(organization) {
  return `${organizationPath(organization)}/billing`;
}
function organizationSettingsPath(organization) {
  return `${organizationPath(organization)}/settings`;
}
function organizationIntegrationsPath(organization) {
  return `${organizationPath(organization)}/integrations`;
}
function usagePath(organization) {
  return `${organizationPath(organization)}/billing`;
}
function stripePortalPath(organization) {
  return `/resources/${organization.slug}/subscription/portal`;
}
function plansPath(organization) {
  return `${organizationPath(organization)}/billing/plans`;
}
function subscribedPath(organization) {
  return `${organizationPath(organization)}/subscribed`;
}
function organizationParam(organization) {
  return organization.slug;
}
function projectPath(organization, project) {
  return `/orgs/${organizationParam(organization)}/projects/${projectParam(project)}`;
}
function projectRunsPath(organization, project) {
  return `${projectPath(organization, project)}/runs`;
}
function projectSetupPath(organization, project) {
  return `${projectPath(organization, project)}/setup`;
}
function projectSetupNextjsPath(organization, project) {
  return `${projectPath(organization, project)}/setup/nextjs`;
}
function projectSetupRemixPath(organization, project) {
  return `${projectPath(organization, project)}/setup/remix`;
}
function projectSetupExpressPath(organization, project) {
  return `${projectPath(organization, project)}/setup/express`;
}
function projectSetupRedwoodPath(organization, project) {
  return `${projectPath(organization, project)}/setup/redwood`;
}
function projectSetupNuxtPath(organization, project) {
  return `${projectPath(organization, project)}/setup/nuxt`;
}
function projectSetupSvelteKitPath(organization, project) {
  return `${projectPath(organization, project)}/setup/sveltekit`;
}
function projectSetupFastifyPath(organization, project) {
  return `${projectPath(organization, project)}/setup/fastify`;
}
function projectSetupAstroPath(organization, project) {
  return `${projectPath(organization, project)}/setup/astro`;
}
function projectSetupNestjsPath(organization, project) {
  return `${projectPath(organization, project)}/setup/nestjs`;
}
function projectJobsPath(organization, project) {
  return projectPath(organization, project);
}
function projectTriggersPath(organization, project) {
  return `${projectPath(organization, project)}/triggers`;
}
function projectEventsPath(organization, project) {
  return `${projectPath(organization, project)}/events`;
}
function projectSettingsPath(organization, project) {
  return `${projectPath(organization, project)}/settings`;
}
function projectHttpEndpointsPath(organization, project) {
  return `${projectPath(organization, project)}/http-endpoints`;
}
function projectHttpEndpointPath(organization, project, httpEndpoint2) {
  return `${projectHttpEndpointsPath(organization, project)}/${httpEndpoint2.key}`;
}
function projectEnvironmentsPath(organization, project) {
  return `${projectPath(organization, project)}/environments`;
}
function projectStreamingPath(id) {
  return `/resources/projects/${id}/jobs/stream`;
}
function projectEnvironmentsStreamingPath(organization, project) {
  return `${projectEnvironmentsPath(organization, project)}/stream`;
}
function endpointStreamingPath(environment) {
  return `/resources/environments/${environment.id}/endpoint/stream`;
}
function newProjectPath(organization, message) {
  return `${organizationPath(organization)}/projects/new${message ? `?message=${encodeURIComponent(message)}` : ""}`;
}
function projectParam(project) {
  return project.slug;
}
function v3ProjectPath(organization, project) {
  return `/orgs/${organizationParam(organization)}/projects/v3/${projectParam(project)}`;
}
function v3TasksStreamingPath(organization, project) {
  return `${v3ProjectPath(organization, project)}/tasks/stream`;
}
function v3ApiKeysPath(organization, project) {
  return `${v3ProjectPath(organization, project)}/apikeys`;
}
function v3EnvironmentVariablesPath(organization, project) {
  return `${v3ProjectPath(organization, project)}/environment-variables`;
}
function v3NewEnvironmentVariablesPath(organization, project) {
  return `${v3EnvironmentVariablesPath(organization, project)}/new`;
}
function v3ProjectAlertsPath(organization, project) {
  return `${v3ProjectPath(organization, project)}/alerts`;
}
function v3NewProjectAlertPath(organization, project) {
  return `${v3ProjectAlertsPath(organization, project)}/new`;
}
function v3NewProjectAlertPathConnectToSlackPath(organization, project) {
  return `${v3ProjectAlertsPath(organization, project)}/new/connect-to-slack`;
}
function v3TestPath(organization, project, environmentSlug) {
  return `${v3ProjectPath(organization, project)}/test${environmentSlug ? `?environment=${environmentSlug}` : ""}`;
}
function v3TestTaskPath(organization, project, task, environmentSlug) {
  return `${v3TestPath(organization, project)}/tasks/${task.friendlyId}?environment=${environmentSlug}`;
}
function v3RunsPath(organization, project, filters) {
  let searchParams = objectToSearchParams(filters), query = searchParams ? `?${searchParams.toString()}` : "";
  return `${v3ProjectPath(organization, project)}/runs${query}`;
}
function v3RunPath(organization, project, run) {
  return `${v3RunsPath(organization, project)}/${run.friendlyId}`;
}
function v3RunDownloadLogsPath(run) {
  return `/resources/runs/${run.friendlyId}/logs/download`;
}
function v3RunSpanPath(organization, project, run, span) {
  return `${v3RunPath(organization, project, run)}?span=${span.spanId}`;
}
function v3TraceSpanPath(organization, project, traceId, spanId) {
  return `${v3ProjectPath(organization, project)}/traces/${traceId}/spans/${spanId}`;
}
function v3RunStreamingPath(organization, project, run) {
  return `${v3RunPath(organization, project, run)}/stream`;
}
function v3SchedulesPath(organization, project) {
  return `${v3ProjectPath(organization, project)}/schedules`;
}
function v3SchedulePath(organization, project, schedule) {
  return `${v3ProjectPath(organization, project)}/schedules/${schedule.friendlyId}`;
}
function v3EditSchedulePath(organization, project, schedule) {
  return `${v3ProjectPath(organization, project)}/schedules/edit/${schedule.friendlyId}`;
}
function v3NewSchedulePath(organization, project) {
  return `${v3ProjectPath(organization, project)}/schedules/new`;
}
function v3ProjectSettingsPath(organization, project) {
  return `${v3ProjectPath(organization, project)}/settings`;
}
function v3DeploymentsPath(organization, project) {
  return `${v3ProjectPath(organization, project)}/deployments`;
}
function v3DeploymentPath(organization, project, deployment) {
  return `${v3DeploymentsPath(organization, project)}/${deployment.shortCode}`;
}
function v3BillingPath(organization) {
  return `${organizationPath(organization)}/v3/billing`;
}
function v3StripePortalPath(organization) {
  return `/resources/${organization.slug}/subscription/v3/portal`;
}
function v3UsagePath(organization) {
  return `${organizationPath(organization)}/v3/usage`;
}
function integrationClientPath(organization, client3) {
  return `${organizationIntegrationsPath(organization)}/${clientParam(client3)}`;
}
function integrationClientConnectionsPath(organization, client3) {
  return `${integrationClientPath(organization, client3)}/connections`;
}
function integrationClientScopesPath(organization, client3) {
  return `${integrationClientPath(organization, client3)}/scopes`;
}
function clientParam(integration) {
  return integration.slug;
}
function projectScheduledTriggersPath(organization, project) {
  return `${projectTriggersPath(organization, project)}/scheduled`;
}
function externalTriggerPath(organization, project, trigger) {
  return `${projectTriggersPath(organization, project)}/external/${triggerSourceParam(trigger)}`;
}
function externalTriggerRunsParentPath(organization, project, trigger) {
  return `${externalTriggerPath(organization, project, trigger)}/runs`;
}
function externalTriggerRunPath(organization, project, trigger, run) {
  return `${externalTriggerRunsParentPath(organization, project, trigger)}/${run.id}`;
}
function externalTriggerRunStreamingPath(organization, project, trigger, run) {
  return `${externalTriggerRunPath(organization, project, trigger, run)}/stream`;
}
function triggerSourceParam(trigger) {
  return trigger.id;
}
function projectWebhookTriggersPath(organization, project) {
  return `${projectTriggersPath(organization, project)}/webhooks`;
}
function webhookTriggerPath(organization, project, webhook) {
  return `${projectTriggersPath(organization, project)}/webhooks/${webhookSourceParam(webhook)}`;
}
function webhookTriggerRunsParentPath(organization, project, webhook) {
  return `${webhookTriggerPath(organization, project, webhook)}/runs`;
}
function webhookTriggerRunPath(organization, project, webhook, run) {
  return `${webhookTriggerRunsParentPath(organization, project, webhook)}/${run.id}`;
}
function webhookTriggerRunStreamingPath(organization, project, webhook, run) {
  return `${webhookTriggerRunPath(organization, project, webhook, run)}/stream`;
}
function webhookDeliveryPath(organization, project, webhook) {
  return `${webhookTriggerPath(organization, project, webhook)}/delivery`;
}
function webhookTriggerDeliveryRunsParentPath(organization, project, webhook) {
  return `${webhookTriggerRunsParentPath(organization, project, webhook)}/delivery`;
}
function webhookTriggerDeliveryRunPath(organization, project, webhook, run) {
  return `${webhookTriggerDeliveryRunsParentPath(organization, project, webhook)}/${run.id}`;
}
function webhookSourceParam(webhook) {
  return webhook.id;
}
function jobPath(organization, project, job) {
  return `${projectPath(organization, project)}/jobs/${jobParam(job)}`;
}
function jobTestPath(organization, project, job) {
  return `${jobPath(organization, project, job)}/test`;
}
function jobSettingsPath(organization, project, job) {
  return `${jobPath(organization, project, job)}/settings`;
}
function jobParam(job) {
  return job.slug;
}
function jobRunsParentPath(organization, project, job) {
  return `${jobPath(organization, project, job)}/runs`;
}
function runPath(organization, project, job, run) {
  return `${jobRunsParentPath(organization, project, job)}/${runParam(run)}`;
}
function jobRunDashboardPath(organization, project, job, run) {
  return runTriggerPath(runPath(organization, project, job, run));
}
function runStreamingPath(organization, project, job, run) {
  return `${runPath(organization, project, job, run)}/stream`;
}
function runParam(run) {
  return run.id;
}
function runTaskPath(runPath3, taskId) {
  return `${runPath3}/tasks/${taskId}`;
}
function runTriggerPath(runPath3) {
  return `${runPath3}/trigger`;
}
function runCompletedPath(runPath3) {
  return `${runPath3}/completed`;
}
function docsRoot() {
  return "https://trigger.dev/docs";
}
function docsPath(path2) {
  return `${docsRoot()}/${path2}`;
}
function docsIntegrationPath(api) {
  return `${docsRoot()}/integrations/apis/${api}`;
}
function apiReferencePath(apiSlug) {
  return `https://trigger.dev/apis/${apiSlug}`;
}

// app/services/platform.v3.server.ts
async function getCurrentPlan(orgId) {
  let client3 = getClient2();
  if (client3)
    try {
      let result = await client3.currentPlan(orgId), firstDayOfMonth = /* @__PURE__ */ new Date();
      firstDayOfMonth.setUTCDate(1), firstDayOfMonth.setUTCHours(0, 0, 0, 0);
      let firstDayOfNextMonth = /* @__PURE__ */ new Date();
      firstDayOfNextMonth.setUTCDate(1), firstDayOfNextMonth.setUTCMonth(firstDayOfNextMonth.getUTCMonth() + 1), firstDayOfNextMonth.setUTCHours(0, 0, 0, 0);
      let currentRunCount = await $replica.jobRun.count({
        where: {
          organizationId: orgId,
          createdAt: {
            gte: firstDayOfMonth
          }
        }
      });
      if (!result.success) {
        logger.error("Error getting current plan", { orgId, error: result.error });
        return;
      }
      let periodStart = firstDayOfMonth, periodEnd = firstDayOfNextMonth, periodRemainingDuration = periodEnd.getTime() - (/* @__PURE__ */ new Date()).getTime(), usage = {
        currentRunCount,
        runCountCap: result.subscription?.plan.runs?.freeAllowance,
        exceededRunCount: result.subscription?.plan.runs?.freeAllowance ? currentRunCount > result.subscription?.plan.runs?.freeAllowance : !1,
        periodStart,
        periodEnd,
        periodRemainingDuration
      };
      return { ...result, usage };
    } catch (e) {
      logger.error("Error getting current plan", { orgId, error: e });
      return;
    }
}
async function getLimits(orgId) {
  let client3 = getClient2();
  if (client3)
    try {
      let result = await client3.currentPlan(orgId);
      if (!result.success) {
        logger.error("Error getting limits", { orgId, error: result.error });
        return;
      }
      return result.v3Subscription?.plan?.limits;
    } catch (e) {
      logger.error("Error getting limits", { orgId, error: e });
      return;
    }
}
async function getLimit(orgId, limit, fallback) {
  let limits = await getLimits(orgId);
  if (!limits)
    return fallback;
  let result = limits[limit];
  return result ? typeof result == "number" ? result : typeof result == "object" && "number" in result ? result.number : fallback : fallback;
}
async function customerPortalUrl(orgId, orgSlug) {
  let client3 = getClient2();
  if (client3)
    try {
      return client3.createPortalSession(orgId, {
        returnUrl: `${env2.APP_ORIGIN}${organizationBillingPath({ slug: orgSlug })}`
      });
    } catch (e) {
      logger.error("Error getting customer portal Url", { orgId, error: e });
      return;
    }
}
async function getPlans() {
  let client3 = getClient2();
  if (client3)
    try {
      let result = await client3.plans();
      if (!result.success) {
        logger.error("Error getting plans", { error: result.error });
        return;
      }
      return result;
    } catch (e) {
      logger.error("Error getting plans", { error: e });
      return;
    }
}
async function setPlan(organization, request, callerPath, plan) {
  let client3 = getClient2();
  if (!client3)
    throw redirectWithErrorMessage(callerPath, request, "Error setting plan");
  try {
    let result = await client3.setPlan(organization.id, plan);
    if (!result)
      throw redirectWithErrorMessage(callerPath, request, "Error setting plan");
    if (!result.success)
      throw redirectWithErrorMessage(callerPath, request, result.error);
    switch (result.action) {
      case "free_connect_required":
        return (0, import_remix_typedjson3.redirect)(result.connectUrl);
      case "free_connected":
        return result.accepted ? (0, import_remix_typedjson3.redirect)(newProjectPath(organization, "You're on the Free plan.")) : redirectWithErrorMessage(
          callerPath,
          request,
          "Free tier unlock failed, your GitHub account is too new."
        );
      case "create_subscription_flow_start":
        return (0, import_remix_typedjson3.redirect)(result.checkoutUrl);
      case "updated_subscription":
        return redirectWithSuccessMessage(
          callerPath,
          request,
          "Subscription updated successfully."
        );
      case "canceled_subscription":
        return redirectWithSuccessMessage(callerPath, request, "Subscription canceled.");
    }
  } catch (e) {
    throw logger.error("Error setting plan", { organizationId: organization.id, error: e }), redirectWithErrorMessage(
      callerPath,
      request,
      e instanceof Error ? e.message : "Error setting plan"
    );
  }
}
async function getUsage(organizationId, { from, to }) {
  let client3 = getClient2();
  if (client3)
    try {
      let result = await client3.usage(organizationId, { from, to });
      if (!result.success) {
        logger.error("Error getting usage", { error: result.error });
        return;
      }
      return result;
    } catch (e) {
      logger.error("Error getting usage", { error: e });
      return;
    }
}
async function getUsageSeries(organizationId, params) {
  let client3 = getClient2();
  if (client3)
    try {
      let result = await client3.usageSeries(organizationId, params);
      if (!result.success) {
        logger.error("Error getting usage series", { error: result.error });
        return;
      }
      return result;
    } catch (e) {
      logger.error("Error getting usage series", { error: e });
      return;
    }
}
async function reportInvocationUsage(organizationId, costInCents, additionalData) {
  let client3 = getClient2();
  if (client3)
    try {
      let result = await client3.reportInvocationUsage({
        organizationId,
        costInCents,
        additionalData
      });
      if (!result.success) {
        logger.error("Error reporting invocation", { error: result.error });
        return;
      }
      return result;
    } catch (e) {
      logger.error("Error reporting invocation", { error: e });
      return;
    }
}
async function reportComputeUsage(request) {
  if (getClient2())
    return fetch(`${process.env.BILLING_API_URL}/api/v1/usage/ingest/compute`, {
      method: "POST",
      headers: request.headers,
      body: await request.text()
    });
}
async function getEntitlement(organizationId) {
  let client3 = getClient2();
  if (client3)
    try {
      let result = await client3.getEntitlement(organizationId);
      return result.success ? result : (logger.error("Error getting entitlement", { error: result.error }), {
        hasAccess: !0
      });
    } catch (e) {
      return logger.error("Error getting entitlement", { error: e }), {
        hasAccess: !0
      };
    }
}
async function projectCreated(organization, project) {
  project.version === "V2" || !isCloud() ? await createEnvironment(organization, project, "STAGING") : (await getCurrentPlan(organization.id))?.v3Subscription.plan?.limits.hasStagingEnvironment && await createEnvironment(organization, project, "STAGING");
}
function getClient2() {
  if (isCloud() && process.env.BILLING_API_URL && process.env.BILLING_API_KEY) {
    let client3 = new import_v39.BillingClient({
      url: process.env.BILLING_API_URL,
      apiKey: process.env.BILLING_API_KEY
    });
    return console.log(`Billing client initialized: ${process.env.BILLING_API_URL}`), client3;
  } else
    console.log("Billing client not initialized");
}
function isCloud() {
  return [
    "https://cloud.trigger.dev",
    "https://test-cloud.trigger.dev",
    "https://internal.trigger.dev"
  ].includes(env2.LOGIN_ORIGIN) ? !0 : (process.env.CLOUD_ENV, !1);
}

// app/models/project.server.ts
var externalRefGenerator = (0, import_nanoid6.customAlphabet)("abcdefghijklmnopqrstuvwxyz", 20);
async function createProject({ organizationSlug, name, userId, version: version3 }, attemptCount = 0) {
  let organization = await prisma.organization.findFirst({
    where: {
      slug: organizationSlug,
      members: { some: { userId } }
    }
  });
  if (!organization)
    throw new Error(
      `User ${userId} does not have permission to create a project in organization ${organizationSlug}`
    );
  if (version3 === "v3") {
    if (!organization.v3Enabled)
      throw new Error("Organization can't create v3 projects.");
    if (!env2.V3_ENABLED)
      throw new Error("v3 is not available yet.");
  }
  let uniqueProjectSlug = `${(0, import_slug2.default)(name)}-${(0, import_nanoid6.nanoid)(4)}`, projectWithSameSlug = await prisma.project.findFirst({
    where: { slug: uniqueProjectSlug }
  });
  if (attemptCount > 100)
    throw new Error(`Unable to create project with slug ${uniqueProjectSlug} after 100 attempts`);
  if (projectWithSameSlug)
    return createProject(
      {
        organizationSlug,
        name,
        userId,
        version: version3
      },
      attemptCount + 1
    );
  let project = await prisma.project.create({
    data: {
      name,
      slug: uniqueProjectSlug,
      organization: {
        connect: {
          slug: organizationSlug
        }
      },
      externalRef: `proj_${externalRefGenerator()}`,
      version: version3 === "v3" ? "V3" : "V2"
    },
    include: {
      organization: {
        include: {
          members: !0
        }
      }
    }
  });
  await createEnvironment(organization, project, "PRODUCTION");
  for (let member of project.organization.members)
    await createEnvironment(organization, project, "DEVELOPMENT", member);
  return await projectCreated(organization, project), project;
}
async function findProjectBySlug(orgSlug, projectSlug, userId) {
  return await prisma.project.findFirst({
    where: {
      slug: projectSlug,
      organization: {
        slug: orgSlug,
        members: { some: { userId } }
      }
    }
  });
}
async function findProjectByRef(externalRef, userId) {
  return await prisma.project.findFirst({
    where: {
      externalRef,
      organization: {
        members: { some: { userId } }
      }
    }
  });
}

// app/services/apiAuth.server.ts
var import_jose = require("jose");
var AuthorizationHeaderSchema2 = import_zod50.z.string().regex(/^Bearer .+$/);
async function authenticateApiRequest(request, { allowPublicKey = !1 } = {}) {
  let apiKey = getApiKeyFromRequest(request);
  if (apiKey)
    return authenticateApiKey(apiKey, { allowPublicKey });
}
async function authenticateApiKey(apiKey, { allowPublicKey = !1 } = {}) {
  let result = getApiKeyResult(apiKey);
  if (result) {
    if (!allowPublicKey) {
      let environment = await findEnvironmentByApiKey(result.apiKey);
      return environment ? {
        ...result,
        environment
      } : void 0;
    }
    switch (result.type) {
      case "PUBLIC": {
        let environment = await findEnvironmentByPublicApiKey(result.apiKey);
        return environment ? {
          ...result,
          environment
        } : void 0;
      }
      case "PRIVATE": {
        let environment = await findEnvironmentByApiKey(result.apiKey);
        return environment ? {
          ...result,
          environment
        } : void 0;
      }
    }
  }
}
function isPublicApiKey(key) {
  return key.startsWith("pk_");
}
function getApiKeyFromRequest(request) {
  let rawAuthorization = request.headers.get("Authorization"), authorization = AuthorizationHeaderSchema2.safeParse(rawAuthorization);
  return authorization.success ? authorization.data.replace(/^Bearer /, "") : void 0;
}
function getApiKeyResult(apiKey) {
  let type = isPublicApiKey(apiKey) ? "PUBLIC" : "PRIVATE";
  return { apiKey, type };
}
async function authenticateProjectApiKeyOrPersonalAccessToken(request) {
  let apiKey = getApiKeyFromRequest(request);
  if (!apiKey)
    return;
  if (isPersonalAccessToken(apiKey)) {
    let result2 = await authenticateApiRequestWithPersonalAccessToken(request);
    return result2 ? {
      type: "personalAccessToken",
      result: result2
    } : void 0;
  }
  let result = await authenticateApiKey(apiKey, { allowPublicKey: !1 });
  if (result)
    return {
      type: "apiKey",
      result
    };
}
async function authenticatedEnvironmentForAuthentication(auth, projectRef, slug3) {
  switch (auth.type) {
    case "apiKey": {
      if (auth.result.environment.project.externalRef !== projectRef)
        throw (0, import_server_runtime.json)(
          {
            error: "Invalid project ref for this API key. Make sure you are using an API key associated with that project."
          },
          { status: 400 }
        );
      if (auth.result.environment.slug !== slug3)
        throw (0, import_server_runtime.json)(
          {
            error: "Invalid environment slug for this API key. Make sure you are using an API key associated with that environment."
          },
          { status: 400 }
        );
      return auth.result.environment;
    }
    case "personalAccessToken": {
      let user = await prisma.user.findUnique({
        where: {
          id: auth.result.userId
        }
      });
      if (!user)
        throw (0, import_server_runtime.json)({ error: "Invalid or Missing API key" }, { status: 401 });
      let project = await findProjectByRef(projectRef, user.id);
      if (!project)
        throw (0, import_server_runtime.json)({ error: "Project not found" }, { status: 404 });
      let environment = await prisma.runtimeEnvironment.findFirst({
        where: {
          projectId: project.id,
          slug: slug3
        },
        include: {
          project: !0,
          organization: !0
        }
      });
      if (!environment)
        throw (0, import_server_runtime.json)({ error: "Environment not found" }, { status: 404 });
      return environment;
    }
  }
}
var JWT_SECRET = new TextEncoder().encode(env2.SESSION_SECRET), JWT_ALGORITHM = "HS256", DEFAULT_JWT_EXPIRATION_IN_MS = 1e3 * 60 * 60;
async function generateJWTTokenForEnvironment(environment, payload) {
  return await new import_jose.SignJWT({
    environment_id: environment.id,
    org_id: environment.organizationId,
    project_id: environment.projectId,
    ...payload
  }).setProtectedHeader({ alg: JWT_ALGORITHM }).setIssuedAt().setIssuer("https://id.trigger.dev").setAudience("https://api.trigger.dev").setExpirationTime(calculateJWTExpiration()).sign(JWT_SECRET);
}
function calculateJWTExpiration() {
  return env2.PROD_USAGE_HEARTBEAT_INTERVAL_MS ? (Date.now() + Math.max(DEFAULT_JWT_EXPIRATION_IN_MS, env2.PROD_USAGE_HEARTBEAT_INTERVAL_MS)) / 1e3 : (Date.now() + DEFAULT_JWT_EXPIRATION_IN_MS) / 1e3;
}

// app/v3/marqs/sharedQueueConsumer.server.ts
var WithTraceContext = import_zod51.z.object({
  traceparent: import_zod51.z.string().optional(),
  tracestate: import_zod51.z.string().optional()
}), SharedQueueMessageBody = import_zod51.z.discriminatedUnion("type", [
  WithTraceContext.extend({
    type: import_zod51.z.literal("EXECUTE"),
    taskIdentifier: import_zod51.z.string(),
    checkpointEventId: import_zod51.z.string().optional()
  }),
  WithTraceContext.extend({
    type: import_zod51.z.literal("RESUME"),
    completedAttemptIds: import_zod51.z.string().array(),
    resumableAttemptId: import_zod51.z.string(),
    checkpointEventId: import_zod51.z.string().optional()
  }),
  WithTraceContext.extend({
    type: import_zod51.z.literal("RESUME_AFTER_DURATION"),
    resumableAttemptId: import_zod51.z.string(),
    checkpointEventId: import_zod51.z.string()
  }),
  WithTraceContext.extend({
    type: import_zod51.z.literal("FAIL"),
    reason: import_zod51.z.string()
  })
]), SharedQueueConsumer = class {
  constructor(_sender, options2 = {}) {
    this._sender = _sender;
    this._backgroundWorkers = /* @__PURE__ */ new Map();
    this._deprecatedWorkers = /* @__PURE__ */ new Map();
    this._enabled = !1;
    this._taskFailures = 0;
    this._taskSuccesses = 0;
    this._endSpanInNextIteration = !1;
    this._tasks = sharedQueueTasks;
    this._options = {
      maximumItemsPerTrace: options2.maximumItemsPerTrace ?? 1e3,
      // 1k items per trace
      traceTimeoutSeconds: options2.traceTimeoutSeconds ?? 60,
      // 60 seconds
      nextTickInterval: options2.nextTickInterval ?? 1e3,
      // 1 second
      interval: options2.interval ?? 100
      // 100ms
    }, this._id = generateFriendlyId("shared-queue", 6);
  }
  // This method is called when a background worker is deprecated and will no longer be used unless a run is locked to it
  async deprecateBackgroundWorker(id) {
    let backgroundWorker = this._backgroundWorkers.get(id);
    backgroundWorker && (this._deprecatedWorkers.set(id, backgroundWorker), this._backgroundWorkers.delete(id));
  }
  async registerBackgroundWorker(id, envId) {
    if (!envId) {
      logger.error("Environment ID is required for background worker registration", {
        backgroundWorkerId: id
      });
      return;
    }
    let backgroundWorker = await prisma.backgroundWorker.findUnique({
      where: {
        friendlyId: id,
        runtimeEnvironmentId: envId
      },
      include: {
        tasks: !0
      }
    });
    backgroundWorker && (this._backgroundWorkers.set(backgroundWorker.id, backgroundWorker), logger.debug("Registered background worker", { backgroundWorker: backgroundWorker.id }), this.#enable());
  }
  async start() {
    this.#enable();
  }
  async stop(reason = "Provider disconnected") {
    this._enabled && (logger.debug("Stopping shared queue consumer"), this._enabled = !1, this._currentSpan && this._currentSpan.end());
  }
  #enable() {
    this._enabled || (this._enabled = !0, this._perTraceCountdown = this._options.maximumItemsPerTrace, this._lastNewTrace = /* @__PURE__ */ new Date(), this._taskFailures = 0, this._taskSuccesses = 0, this.#doWork().finally(() => {
    }));
  }
  #endCurrentSpan() {
    this._currentSpan && (this._currentSpan.setAttribute("tasks.period.failures", this._taskFailures), this._currentSpan.setAttribute("tasks.period.successes", this._taskSuccesses), this._currentSpan.end());
  }
  async #doWork() {
    if (!this._enabled) {
      this.#endCurrentSpan();
      return;
    }
    return (this._perTraceCountdown === 0 || Date.now() - this._lastNewTrace.getTime() > this._options.traceTimeoutSeconds * 1e3 || this._currentSpanContext === void 0 || this._endSpanInNextIteration) && (this.#endCurrentSpan(), this._currentSpan = tracer2.startSpan(
      "SharedQueueConsumer.doWork()",
      {
        kind: import_api11.SpanKind.CONSUMER
      },
      import_api11.ROOT_CONTEXT
    ), this._currentSpanContext = import_api11.trace.setSpan(import_api11.ROOT_CONTEXT, this._currentSpan), this._perTraceCountdown = this._options.maximumItemsPerTrace, this._lastNewTrace = /* @__PURE__ */ new Date(), this._taskFailures = 0, this._taskSuccesses = 0, this._endSpanInNextIteration = !1), import_api11.context.with(this._currentSpanContext ?? import_api11.ROOT_CONTEXT, async () => {
      await this.#doWorkInternal(), this._perTraceCountdown = this._perTraceCountdown - 1;
    });
  }
  async #doWorkInternal() {
    let message = await marqs?.dequeueMessageInSharedQueue(this._id);
    if (!message) {
      this.#doMoreWork(this._options.nextTickInterval);
      return;
    }
    logger.log("dequeueMessageInSharedQueue()", { queueMessage: message });
    let messageBody = SharedQueueMessageBody.safeParse(message.data);
    if (!messageBody.success) {
      logger.error("Failed to parse message", {
        queueMessage: message.data,
        error: messageBody.error
      }), await this.#ackAndDoMoreWork(message.messageId);
      return;
    }
    switch (messageBody.data.type) {
      case "EXECUTE": {
        let existingTaskRun = await prisma.taskRun.findUnique({
          where: {
            id: message.messageId
          },
          include: {
            lockedToVersion: {
              include: {
                deployment: !0,
                tasks: !0
              }
            }
          }
        });
        if (!existingTaskRun) {
          logger.error("No existing task run", {
            queueMessage: message.data,
            messageId: message.messageId
          }), await this.#ackAndDoMoreWork(message.messageId);
          return;
        }
        let retryingFromCheckpoint = !!messageBody.data.checkpointEventId, EXECUTABLE_RUN_STATUSES = {
          fromCheckpoint: ["WAITING_TO_RESUME"],
          withoutCheckpoint: ["PENDING", "RETRYING_AFTER_FAILURE"]
        };
        if (retryingFromCheckpoint && !EXECUTABLE_RUN_STATUSES.fromCheckpoint.includes(existingTaskRun.status) || !retryingFromCheckpoint && !EXECUTABLE_RUN_STATUSES.withoutCheckpoint.includes(existingTaskRun.status)) {
          logger.error("Task run has invalid status for execution", {
            queueMessage: message.data,
            messageId: message.messageId,
            taskRun: existingTaskRun.id,
            status: existingTaskRun.status,
            retryingFromCheckpoint
          }), await new CrashTaskRunService().call(existingTaskRun.id, {
            crashAttempts: !0,
            reason: `Invalid run status for execution: ${existingTaskRun.status}`
          }), await this.#ackAndDoMoreWork(message.messageId);
          return;
        }
        let deployment = existingTaskRun.lockedById ? await getWorkerDeploymentFromWorkerTask(existingTaskRun.lockedById) : existingTaskRun.lockedToVersionId ? await getWorkerDeploymentFromWorker(existingTaskRun.lockedToVersionId) : await findCurrentWorkerDeployment(existingTaskRun.runtimeEnvironmentId);
        if (!deployment || !deployment.worker) {
          logger.error("No matching deployment found for task run", {
            queueMessage: message.data,
            messageId: message.messageId
          }), await this.#markRunAsWaitingForDeploy(existingTaskRun.id), await this.#ackAndDoMoreWork(message.messageId);
          return;
        }
        if (!deployment.imageReference) {
          logger.error("Deployment is missing an image reference", {
            queueMessage: message.data,
            messageId: message.messageId,
            deployment: deployment.id
          }), await this.#markRunAsWaitingForDeploy(existingTaskRun.id), await this.#ackAndDoMoreWork(message.messageId);
          return;
        }
        let backgroundTask = deployment.worker.tasks.find(
          (task) => task.slug === existingTaskRun.taskIdentifier
        );
        if (!backgroundTask) {
          await prisma.backgroundWorkerTask.findFirst({
            where: {
              slug: existingTaskRun.taskIdentifier,
              projectId: existingTaskRun.projectId,
              runtimeEnvironmentId: existingTaskRun.runtimeEnvironmentId
            },
            include: {
              worker: {
                include: {
                  deployment: {
                    include: {}
                  }
                }
              }
            }
          }) ? logger.warn("Task for this run exists but is not part of the current deploy", {
            taskRun: existingTaskRun.id,
            taskIdentifier: existingTaskRun.taskIdentifier
          }) : logger.warn("Task for this run has never been deployed", {
            taskRun: existingTaskRun.id,
            taskIdentifier: existingTaskRun.taskIdentifier
          }), await this.#markRunAsWaitingForDeploy(existingTaskRun.id), await this.#ackAndDoMoreWork(message.messageId);
          return;
        }
        let lockedTaskRun = await prisma.taskRun.update({
          where: {
            id: message.messageId
          },
          data: {
            lockedAt: /* @__PURE__ */ new Date(),
            lockedById: backgroundTask.id,
            lockedToVersionId: deployment.worker.id,
            startedAt: existingTaskRun.startedAt ?? /* @__PURE__ */ new Date(),
            baseCostInCents: env2.CENTS_PER_RUN,
            machinePreset: machinePresetFromConfig(backgroundTask.machineConfig ?? {}).name
          },
          include: {
            runtimeEnvironment: !0,
            attempts: {
              take: 1,
              orderBy: { number: "desc" }
            },
            tags: !0,
            checkpoints: {
              take: 1,
              orderBy: {
                createdAt: "desc"
              }
            },
            lockedBy: !0
          }
        });
        if (!lockedTaskRun) {
          logger.warn("Failed to lock task run", {
            taskRun: existingTaskRun.id,
            taskIdentifier: existingTaskRun.taskIdentifier,
            deployment: deployment.id,
            backgroundWorker: deployment.worker.id,
            messageId: message.messageId
          }), await this.#ackAndDoMoreWork(message.messageId);
          return;
        }
        if (!await prisma.taskQueue.findUnique({
          where: {
            runtimeEnvironmentId_name: {
              runtimeEnvironmentId: lockedTaskRun.runtimeEnvironmentId,
              name: sanitizeQueueName(lockedTaskRun.queue)
            }
          }
        })) {
          logger.debug("SharedQueueConsumer queue not found, so nacking message", {
            queueMessage: message,
            taskRunQueue: lockedTaskRun.queue,
            runtimeEnvironmentId: lockedTaskRun.runtimeEnvironmentId
          }), await this.#nackAndDoMoreWork(message.messageId, this._options.nextTickInterval);
          return;
        }
        if (!this._enabled) {
          logger.debug("SharedQueueConsumer not enabled, so nacking message", {
            queueMessage: message
          }), await marqs?.nackMessage(message.messageId);
          return;
        }
        let nextAttemptNumber = lockedTaskRun.attempts[0] ? lockedTaskRun.attempts[0].number + 1 : 1, isRetry = lockedTaskRun.status === "WAITING_TO_RESUME" && nextAttemptNumber > 1;
        try {
          if (messageBody.data.checkpointEventId) {
            if (!await new RestoreCheckpointService().call({
              eventId: messageBody.data.checkpointEventId,
              isRetry
            })) {
              logger.error("Failed to restore checkpoint", {
                queueMessage: message.data,
                messageId: message.messageId,
                runStatus: lockedTaskRun.status,
                isRetry
              }), await this.#ackAndDoMoreWork(message.messageId);
              return;
            }
            break;
          }
          if (!deployment.worker.supportsLazyAttempts)
            try {
              await new CreateTaskRunAttemptService().call(lockedTaskRun.friendlyId, void 0, !1);
            } catch (error) {
              logger.error("Failed to create task run attempt for outdate worker", {
                error,
                taskRun: lockedTaskRun.id
              }), await this.#ackAndDoMoreWork(message.messageId);
              return;
            }
          if (isRetry)
            socketIo.coordinatorNamespace.emit("READY_FOR_RETRY", {
              version: "v1",
              runId: lockedTaskRun.id
            });
          else {
            let machineConfig = lockedTaskRun.lockedBy?.machineConfig, machine = machinePresetFromConfig(machineConfig ?? {});
            await this._sender.send("BACKGROUND_WORKER_MESSAGE", {
              backgroundWorkerId: deployment.worker.friendlyId,
              data: {
                type: "SCHEDULE_ATTEMPT",
                image: deployment.imageReference,
                version: deployment.version,
                machine,
                // identifiers
                id: "placeholder",
                // TODO: Remove this completely in a future release
                envId: lockedTaskRun.runtimeEnvironment.id,
                envType: lockedTaskRun.runtimeEnvironment.type,
                orgId: lockedTaskRun.runtimeEnvironment.organizationId,
                projectId: lockedTaskRun.runtimeEnvironment.projectId,
                runId: lockedTaskRun.id
              }
            });
          }
        } catch (e) {
          e instanceof Error ? this._currentSpan?.recordException(e) : this._currentSpan?.recordException(new Error(String(e))), this._endSpanInNextIteration = !0, await prisma.$transaction([
            prisma.taskRun.update({
              where: {
                id: lockedTaskRun.id
              },
              data: {
                lockedAt: null,
                lockedById: null,
                status: lockedTaskRun.status,
                startedAt: existingTaskRun.startedAt
              }
            })
          ]), logger.error("SharedQueueConsumer errored, so nacking message", {
            queueMessage: message,
            error: e instanceof Error ? { name: e.name, message: e.message, stack: e.stack } : e
          }), await this.#nackAndDoMoreWork(message.messageId);
          return;
        }
        break;
      }
      case "RESUME": {
        if (messageBody.data.checkpointEventId) {
          try {
            if (!await new RestoreCheckpointService().call({
              eventId: messageBody.data.checkpointEventId
            })) {
              logger.error("Failed to restore checkpoint", {
                queueMessage: message.data,
                messageId: message.messageId
              }), await this.#ackAndDoMoreWork(message.messageId);
              return;
            }
          } catch (e) {
            e instanceof Error ? this._currentSpan?.recordException(e) : this._currentSpan?.recordException(new Error(String(e))), this._endSpanInNextIteration = !0, await this.#nackAndDoMoreWork(message.messageId);
            return;
          }
          this.#doMoreWork();
          return;
        }
        if (messageBody.data.completedAttemptIds.length < 1) {
          logger.error("No attempt IDs provided", {
            queueMessage: message.data,
            messageId: message.messageId
          }), await this.#ackAndDoMoreWork(message.messageId);
          return;
        }
        let resumableRun = await prisma.taskRun.findUnique({
          where: {
            id: message.messageId
          }
        });
        if (!resumableRun) {
          logger.error("Resumable run not found", {
            queueMessage: message.data,
            messageId: message.messageId
          }), await this.#ackAndDoMoreWork(message.messageId);
          return;
        }
        let resumableAttempt = await prisma.taskRunAttempt.findUnique({
          where: {
            id: messageBody.data.resumableAttemptId
          },
          include: {
            checkpoints: {
              take: 1,
              orderBy: {
                createdAt: "desc"
              }
            }
          }
        });
        if (!resumableAttempt) {
          logger.error("Resumable attempt not found", {
            queueMessage: message.data,
            messageId: message.messageId
          }), await this.#ackAndDoMoreWork(message.messageId);
          return;
        }
        if (!await prisma.taskQueue.findUnique({
          where: {
            runtimeEnvironmentId_name: {
              runtimeEnvironmentId: resumableAttempt.runtimeEnvironmentId,
              name: sanitizeQueueName(resumableRun.queue)
            }
          }
        })) {
          logger.debug("SharedQueueConsumer queue not found, so nacking message", {
            queueName: sanitizeQueueName(resumableRun.queue),
            attempt: resumableAttempt
          }), await this.#nackAndDoMoreWork(message.messageId, this._options.nextTickInterval);
          return;
        }
        if (!this._enabled) {
          await marqs?.nackMessage(message.messageId);
          return;
        }
        let completions = [], executions = [];
        for (let completedAttemptId of messageBody.data.completedAttemptIds) {
          let completedAttempt = await prisma.taskRunAttempt.findUnique({
            where: {
              id: completedAttemptId,
              taskRun: {
                lockedAt: {
                  not: null
                },
                lockedById: {
                  not: null
                }
              }
            }
          });
          if (!completedAttempt) {
            logger.error("Completed attempt not found", {
              queueMessage: message.data,
              messageId: message.messageId
            }), await this.#ackAndDoMoreWork(message.messageId);
            return;
          }
          let completion = await this._tasks.getCompletionPayloadFromAttempt(completedAttempt.id);
          if (!completion) {
            await this.#ackAndDoMoreWork(message.messageId);
            return;
          }
          completions.push(completion);
          let executionPayload = await this._tasks.getExecutionPayloadFromAttempt(
            completedAttempt.id
          );
          if (!executionPayload) {
            await this.#ackAndDoMoreWork(message.messageId);
            return;
          }
          executions.push(executionPayload.execution);
        }
        try {
          logger.debug("Broadcasting RESUME_AFTER_DEPENDENCY", {
            runId: resumableAttempt.taskRunId,
            attemptId: resumableAttempt.id
          }), socketIo.coordinatorNamespace.emit("RESUME_AFTER_DEPENDENCY", {
            version: "v1",
            runId: resumableAttempt.taskRunId,
            attemptId: resumableAttempt.id,
            attemptFriendlyId: resumableAttempt.friendlyId,
            completions,
            executions
          });
        } catch (e) {
          e instanceof Error ? this._currentSpan?.recordException(e) : this._currentSpan?.recordException(new Error(String(e))), this._endSpanInNextIteration = !0, await this.#nackAndDoMoreWork(message.messageId);
          return;
        }
        break;
      }
      case "RESUME_AFTER_DURATION": {
        try {
          if (!await new RestoreCheckpointService().call({
            eventId: messageBody.data.checkpointEventId
          })) {
            logger.error("Failed to restore checkpoint", {
              queueMessage: message.data,
              messageId: message.messageId
            }), await this.#ackAndDoMoreWork(message.messageId);
            return;
          }
        } catch (e) {
          e instanceof Error ? this._currentSpan?.recordException(e) : this._currentSpan?.recordException(new Error(String(e))), this._endSpanInNextIteration = !0, await this.#nackAndDoMoreWork(message.messageId);
          return;
        }
        break;
      }
      case "FAIL": {
        let existingTaskRun = await prisma.taskRun.findUnique({
          where: {
            id: message.messageId
          }
        });
        if (!existingTaskRun) {
          logger.error("No existing task run to fail", {
            queueMessage: messageBody,
            messageId: message.messageId
          }), await this.#ackAndDoMoreWork(message.messageId);
          return;
        }
        await new CrashTaskRunService().call(existingTaskRun.id, {
          crashAttempts: !0,
          reason: messageBody.data.reason
        }), await this.#ackAndDoMoreWork(message.messageId);
        return;
      }
    }
    this.#doMoreWork();
  }
  #doMoreWork(intervalInMs = this._options.interval) {
    setTimeout(() => this.#doWork(), intervalInMs);
  }
  async #ackAndDoMoreWork(messageId, intervalInMs) {
    await marqs?.acknowledgeMessage(messageId), this.#doMoreWork(intervalInMs);
  }
  async #nackAndDoMoreWork(messageId, queueIntervalInMs, nackRetryInMs) {
    let retryAt = nackRetryInMs ? Date.now() + nackRetryInMs : void 0;
    await marqs?.nackMessage(messageId, retryAt), this.#doMoreWork(queueIntervalInMs);
  }
  async #markRunAsWaitingForDeploy(runId) {
    return logger.debug("Marking run as waiting for deploy", { runId }), await prisma.taskRun.update({
      where: {
        id: runId
      },
      data: {
        status: "WAITING_FOR_DEPLOY"
      }
    });
  }
}, SharedQueueTasks = class {
  async getCompletionPayloadFromAttempt(id) {
    let attempt = await prisma.taskRunAttempt.findUnique({
      where: {
        id,
        status: {
          in: ["COMPLETED", "FAILED"]
        }
      },
      include: {
        backgroundWorker: !0,
        backgroundWorkerTask: !0,
        taskRun: {
          include: {
            runtimeEnvironment: {
              include: {
                organization: !0,
                project: !0
              }
            },
            tags: !0
          }
        },
        queue: !0
      }
    });
    if (!attempt) {
      logger.error("No completed attempt found", { id });
      return;
    }
    let ok = attempt.status === "COMPLETED";
    return ok ? {
      ok,
      id: attempt.taskRun.friendlyId,
      output: attempt.output ?? void 0,
      outputType: attempt.outputType
    } : {
      ok,
      id: attempt.taskRun.friendlyId,
      error: attempt.error
    };
  }
  async getExecutionPayloadFromAttempt(id, setToExecuting, isRetrying) {
    let attempt = await prisma.taskRunAttempt.findUnique({
      where: {
        id
      },
      include: {
        backgroundWorker: !0,
        backgroundWorkerTask: !0,
        runtimeEnvironment: {
          include: {
            organization: !0,
            project: !0
          }
        },
        taskRun: {
          include: {
            tags: !0,
            batchItems: {
              include: {
                batchTaskRun: !0
              }
            }
          }
        },
        queue: !0
      }
    });
    if (!attempt) {
      logger.error("No attempt found", { id });
      return;
    }
    switch (attempt.status) {
      case "CANCELED":
      case "EXECUTING": {
        logger.error("Invalid attempt status for execution payload retrieval", {
          attemptId: id,
          status: attempt.status
        });
        return;
      }
    }
    switch (attempt.taskRun.status) {
      case "CANCELED":
      case "EXECUTING":
      case "INTERRUPTED": {
        logger.error("Invalid run status for execution payload retrieval", {
          attemptId: id,
          runId: attempt.taskRunId,
          status: attempt.taskRun.status
        });
        return;
      }
    }
    if (setToExecuting) {
      if (isFinalAttemptStatus(attempt.status) || isFinalRunStatus(attempt.taskRun.status)) {
        logger.error("Status already in final state", {
          attempt: {
            id: attempt.id,
            status: attempt.status
          },
          run: {
            id: attempt.taskRunId,
            status: attempt.taskRun.status
          }
        });
        return;
      }
      await prisma.taskRunAttempt.update({
        where: {
          id
        },
        data: {
          status: "EXECUTING",
          taskRun: {
            update: {
              data: {
                status: isRetrying ? "RETRYING_AFTER_FAILURE" : "EXECUTING"
              }
            }
          }
        }
      });
    }
    let { backgroundWorkerTask, taskRun, queue } = attempt, machinePreset = machinePresetFromConfig(backgroundWorkerTask.machineConfig ?? {}), execution = {
      task: {
        id: backgroundWorkerTask.slug,
        filePath: backgroundWorkerTask.filePath,
        exportName: backgroundWorkerTask.exportName
      },
      attempt: {
        id: attempt.friendlyId,
        number: attempt.number,
        startedAt: attempt.startedAt ?? attempt.createdAt,
        backgroundWorkerId: attempt.backgroundWorkerId,
        backgroundWorkerTaskId: attempt.backgroundWorkerTaskId,
        status: "EXECUTING"
      },
      run: {
        id: taskRun.friendlyId,
        payload: taskRun.payload,
        payloadType: taskRun.payloadType,
        context: taskRun.context,
        createdAt: taskRun.createdAt,
        startedAt: taskRun.startedAt ?? taskRun.createdAt,
        tags: taskRun.tags.map((tag) => tag.name),
        isTest: taskRun.isTest,
        idempotencyKey: taskRun.idempotencyKey ?? void 0,
        durationMs: taskRun.usageDurationMs,
        costInCents: taskRun.costInCents,
        baseCostInCents: taskRun.baseCostInCents
      },
      queue: {
        id: queue.friendlyId,
        name: queue.name
      },
      environment: {
        id: attempt.runtimeEnvironment.id,
        slug: attempt.runtimeEnvironment.slug,
        type: attempt.runtimeEnvironment.type
      },
      organization: {
        id: attempt.runtimeEnvironment.organization.id,
        slug: attempt.runtimeEnvironment.organization.slug,
        name: attempt.runtimeEnvironment.organization.title
      },
      project: {
        id: attempt.runtimeEnvironment.project.id,
        ref: attempt.runtimeEnvironment.project.externalRef,
        slug: attempt.runtimeEnvironment.project.slug,
        name: attempt.runtimeEnvironment.project.name
      },
      batch: taskRun.batchItems[0] && taskRun.batchItems[0].batchTaskRun ? { id: taskRun.batchItems[0].batchTaskRun.friendlyId } : void 0,
      worker: {
        id: attempt.backgroundWorkerId,
        contentHash: attempt.backgroundWorker.contentHash,
        version: attempt.backgroundWorker.version
      },
      machine: machinePreset
    }, variables = await this.#buildEnvironmentVariables(
      attempt.runtimeEnvironment,
      taskRun,
      machinePreset
    );
    return {
      execution,
      traceContext: taskRun.traceContext,
      environment: variables.reduce((acc, curr) => (acc[curr.key] = curr.value, acc), {})
    };
  }
  async getLatestExecutionPayloadFromRun(id, setToExecuting, isRetrying) {
    let latestAttempt = (await prisma.taskRun.findUnique({
      where: {
        id
      },
      include: {
        attempts: {
          take: 1,
          orderBy: {
            createdAt: "desc"
          }
        }
      }
    }))?.attempts[0];
    if (!latestAttempt) {
      logger.error("No attempts for run", { id });
      return;
    }
    return this.getExecutionPayloadFromAttempt(latestAttempt.id, setToExecuting, isRetrying);
  }
  async getLazyAttemptPayload(envId, runId) {
    let environment = await findEnvironmentById(envId);
    if (!environment) {
      logger.error("Environment not found", { id: envId });
      return;
    }
    let run = await prisma.taskRun.findUnique({
      where: {
        id: runId,
        runtimeEnvironmentId: environment.id
      },
      include: {
        lockedBy: !0,
        _count: {
          select: {
            attempts: !0
          }
        }
      }
    });
    if (!run) {
      logger.error("Run not found", { id: runId, envId });
      return;
    }
    let machinePreset = machinePresetFromConfig(run.lockedBy?.machineConfig ?? {}), variables = await this.#buildEnvironmentVariables(environment, run, machinePreset);
    return {
      traceContext: run.traceContext,
      environment: variables.reduce((acc, curr) => (acc[curr.key] = curr.value, acc), {}),
      runId: run.friendlyId,
      messageId: run.id,
      isTest: run.isTest,
      attemptCount: run._count.attempts
    };
  }
  async taskHeartbeat(attemptFriendlyId, seconds = 60) {
    logger.debug("[SharedQueueConsumer] taskHeartbeat()", { id: attemptFriendlyId, seconds });
    let taskRunAttempt = await prisma.taskRunAttempt.findUnique({
      where: { friendlyId: attemptFriendlyId }
    });
    taskRunAttempt && await marqs?.heartbeatMessage(taskRunAttempt.taskRunId, seconds);
  }
  async taskRunHeartbeat(runId, seconds = 60) {
    logger.debug("[SharedQueueConsumer] taskRunHeartbeat()", { runId, seconds }), await marqs?.heartbeatMessage(runId, seconds);
  }
  async taskRunFailed(completion) {
    logger.debug("[SharedQueueConsumer] taskRunFailed()", { completion }), await new FailedTaskRunService().call(completion.id, completion);
  }
  async #buildEnvironmentVariables(environment, run, machinePreset) {
    let variables = await resolveVariablesForEnvironment(environment), jwt = await generateJWTTokenForEnvironment(environment, {
      run_id: run.id,
      machine_preset: machinePreset.name
    });
    return [
      ...variables,
      { key: "TRIGGER_JWT", value: jwt },
      { key: "TRIGGER_RUN_ID", value: run.id },
      {
        key: "TRIGGER_MACHINE_PRESET",
        value: machinePreset.name
      }
    ];
  }
}, sharedQueueTasks = singleton("sharedQueueTasks", () => new SharedQueueTasks());

// app/v3/sharedSocketConnection.ts
var SharedQueueConsumerPool = class {
  #consumers;
  constructor(opts) {
    this.#consumers = Array(opts.poolSize).fill(null).map(
      () => new SharedQueueConsumer(opts.sender, {
        interval: env2.SHARED_QUEUE_CONSUMER_INTERVAL_MS,
        nextTickInterval: env2.SHARED_QUEUE_CONSUMER_NEXT_TICK_INTERVAL_MS
      })
    );
  }
  async start() {
    await Promise.allSettled(this.#consumers.map((consumer) => consumer.start()));
  }
  async stop() {
    await Promise.allSettled(this.#consumers.map((consumer) => consumer.stop()));
  }
}, SharedSocketConnection = class {
  constructor(opts) {
    this.onClose = new import_evt.Evt();
    this._defaultPoolSize = 10;
    this.id = (0, import_node_crypto4.randomUUID)(), this._sender = new ZodMessageSender({
      schema: serverWebsocketMessages,
      sender: async (message) => new Promise((resolve, reject) => {
        try {
          let { type, ...payload } = message;
          opts.namespace.emit(type, payload), resolve();
        } catch (err) {
          reject(err);
        }
      })
    }), logger.debug("Starting SharedQueueConsumer pool", {
      poolSize: opts.poolSize ?? this._defaultPoolSize
    }), this._sharedQueueConsumerPool = new SharedQueueConsumerPool({
      poolSize: opts.poolSize ?? this._defaultPoolSize,
      sender: this._sender
    }), opts.socket.on("disconnect", this.#handleClose.bind(this)), opts.socket.on("error", this.#handleError.bind(this)), this._messageHandler = new ZodMessageHandler({
      schema: clientWebsocketMessages,
      messages: {
        READY_FOR_TASKS: async (payload) => {
          this._sharedQueueConsumerPool.start();
        },
        BACKGROUND_WORKER_DEPRECATED: async (payload) => {
        },
        BACKGROUND_WORKER_MESSAGE: async (payload) => {
          switch (payload.data.type) {
            case "TASK_RUN_COMPLETED":
              break;
            case "TASK_HEARTBEAT":
              break;
          }
        }
      }
    }), this._messageHandler.registerHandlers(opts.socket, opts.logger ?? logger);
  }
  async initialize() {
    this._sender.send("SERVER_READY", { id: this.id });
  }
  async #handleClose(ev) {
    await this._sharedQueueConsumerPool.stop(), this.onClose.post(ev);
  }
  async #handleError(ev) {
    logger.error("Websocket error", { ev });
  }
};

// app/v3/services/createCheckpoint.server.ts
var CreateCheckpointService = class extends BaseService {
  async call(params) {
    logger.debug("Creating checkpoint", params);
    let attempt = await this._prisma.taskRunAttempt.findUnique({
      where: {
        friendlyId: params.attemptFriendlyId
      },
      include: {
        taskRun: !0,
        backgroundWorker: {
          select: {
            id: !0,
            deployment: {
              select: {
                imageReference: !0
              }
            }
          }
        }
      }
    });
    if (!attempt) {
      logger.error("Attempt not found", { attemptFriendlyId: params.attemptFriendlyId });
      return;
    }
    if (!isFreezableAttemptStatus(attempt.status) || !isFreezableRunStatus(attempt.taskRun.status)) {
      logger.error("Unfreezable state", {
        attempt: {
          id: attempt.id,
          status: attempt.status
        },
        run: {
          id: attempt.taskRunId,
          status: attempt.taskRun.status
        }
      }), await new CrashTaskRunService(this._prisma).call(attempt.taskRunId, {
        crashAttempts: !0,
        reason: "Unfreezable state: Please upgrade your CLI"
      });
      return;
    }
    let imageRef = attempt.backgroundWorker.deployment?.imageReference;
    if (!imageRef) {
      logger.error("Missing deployment or image ref", {
        attemptId: attempt.id,
        workerId: attempt.backgroundWorker.id
      });
      return;
    }
    let checkpoint = await this._prisma.checkpoint.create({
      data: {
        friendlyId: generateFriendlyId("checkpoint"),
        runtimeEnvironmentId: attempt.taskRun.runtimeEnvironmentId,
        projectId: attempt.taskRun.projectId,
        attemptId: attempt.id,
        runId: attempt.taskRunId,
        location: params.location,
        type: params.docker ? "DOCKER" : "KUBERNETES",
        reason: params.reason.type,
        metadata: JSON.stringify(params.reason),
        imageRef
      }
    }), eventService = new CreateCheckpointRestoreEventService(this._prisma);
    await this._prisma.taskRunAttempt.update({
      where: {
        id: attempt.id
      },
      data: {
        status: params.reason.type === "RETRYING_AFTER_FAILURE" ? void 0 : "PAUSED",
        taskRun: {
          update: {
            status: "WAITING_TO_RESUME"
          }
        }
      }
    });
    let { reason } = params, checkpointEvent, keepRunAlive = !1;
    switch (reason.type) {
      case "WAIT_FOR_DURATION": {
        checkpointEvent = await eventService.checkpoint({
          checkpointId: checkpoint.id
        });
        break;
      }
      case "WAIT_FOR_TASK": {
        checkpointEvent = await eventService.checkpoint({
          checkpointId: checkpoint.id,
          dependencyFriendlyRunId: reason.friendlyId
        }), keepRunAlive = await this.#isRunCompleted(reason.friendlyId), keepRunAlive || await marqs?.acknowledgeMessage(attempt.taskRunId);
        break;
      }
      case "WAIT_FOR_BATCH": {
        checkpointEvent = await eventService.checkpoint({
          checkpointId: checkpoint.id,
          batchDependencyFriendlyId: reason.batchFriendlyId
        }), keepRunAlive = await this.#isBatchCompleted(reason.batchFriendlyId), keepRunAlive || await marqs?.acknowledgeMessage(attempt.taskRunId);
        break;
      }
      case "RETRYING_AFTER_FAILURE": {
        checkpointEvent = await eventService.checkpoint({
          checkpointId: checkpoint.id
        });
        break;
      }
      default:
        break;
    }
    if (!checkpointEvent) {
      logger.error("No checkpoint event", {
        attemptId: attempt.id,
        checkpointId: checkpoint.id
      }), await marqs?.acknowledgeMessage(attempt.taskRunId);
      return;
    }
    return reason.type === "WAIT_FOR_DURATION" && await marqs?.replaceMessage(
      attempt.taskRunId,
      {
        type: "RESUME_AFTER_DURATION",
        resumableAttemptId: attempt.id,
        checkpointEventId: checkpointEvent.id
      },
      reason.now + reason.ms
    ), {
      checkpoint,
      event: checkpointEvent,
      keepRunAlive
    };
  }
  async #isBatchCompleted(friendlyId) {
    let batch = await this._prisma.batchTaskRun.findUnique({
      where: {
        friendlyId
      }
    });
    return batch ? batch.status === "COMPLETED" : (logger.error("Batch not found", { friendlyId }), !1);
  }
  async #isRunCompleted(friendlyId) {
    let run = await this._prisma.taskRun.findUnique({
      where: {
        friendlyId
      }
    });
    return run ? isFinalRunStatus(run.status) : (logger.error("Run not found", { friendlyId }), !1);
  }
};

// app/v3/services/cancelAttempt.server.ts
var CancelAttemptService = class extends BaseService {
  async call(attemptId, taskRunId, cancelledAt, reason, env6) {
    let environment = env6;
    if (!(!environment && (environment = await getAuthenticatedEnvironmentFromAttempt(attemptId), !environment)))
      return await this.traceWithEnv("call()", environment, async (span) => {
        span.setAttribute("taskRunId", taskRunId), span.setAttribute("attemptId", attemptId);
        let taskRunAttempt = await this._prisma.taskRunAttempt.findUnique({
          where: {
            friendlyId: attemptId
          },
          include: {
            taskRun: !0
          }
        });
        if (!taskRunAttempt)
          return;
        if (taskRunAttempt.status === "CANCELED") {
          logger.warn("Task run attempt is already cancelled", {
            attemptId
          });
          return;
        }
        await marqs?.acknowledgeMessage(taskRunId), await this._prisma.taskRunAttempt.update({
          where: {
            friendlyId: attemptId
          },
          data: {
            status: "CANCELED",
            completedAt: cancelledAt,
            taskRun: {
              update: {
                data: {
                  status: isCancellableRunStatus(taskRunAttempt.taskRun.status) ? "INTERRUPTED" : void 0
                }
              }
            }
          }
        });
        let inProgressEvents = await eventRepository.queryIncompleteEvents({
          runId: taskRunAttempt.taskRun.friendlyId
        });
        logger.debug("Cancelling in-progress events", {
          inProgressEvents: inProgressEvents.map((event) => event.id)
        }), await Promise.all(
          inProgressEvents.map((event) => eventRepository.cancelEvent(event, cancelledAt, reason))
        ), environment?.type !== "DEVELOPMENT" && await ResumeTaskRunDependenciesService.enqueue(taskRunAttempt.id, this._prisma);
      });
  }
};
async function getAuthenticatedEnvironmentFromAttempt(friendlyId, prismaClient) {
  let taskRunAttempt = await (prismaClient ?? prisma).taskRunAttempt.findUnique({
    where: {
      friendlyId
    },
    include: {
      runtimeEnvironment: {
        include: {
          organization: !0,
          project: !0
        }
      }
    }
  });
  if (taskRunAttempt)
    return taskRunAttempt?.runtimeEnvironment;
}

// app/v3/services/retryAttempt.server.ts
var RetryAttemptService = class extends BaseService {
  async call(runId) {
    if (!await this._prisma.taskRun.findFirst({
      where: {
        id: runId
      }
    })) {
      logger.error("Task run not found", { runId });
      return;
    }
    socketIo.coordinatorNamespace.emit("READY_FOR_RETRY", {
      version: "v1",
      runId
    });
  }
  static async enqueue(runId, tx, runAt) {
    return await workerQueue.enqueue(
      "v3.retryAttempt",
      {
        runId
      },
      {
        tx,
        runAt,
        jobKey: `retryAttempt:${runId}`
      }
    );
  }
};

// app/v3/services/completeAttempt.server.ts
var CompleteAttemptService = class extends BaseService {
  async call({
    completion,
    execution,
    env: env6,
    checkpoint
  }) {
    let taskRunAttempt = await findAttempt(this._prisma, execution.attempt.id);
    return taskRunAttempt ? isFinalAttemptStatus(taskRunAttempt.status) || isFinalRunStatus(taskRunAttempt.taskRun.status) ? (logger.debug("[CompleteAttemptService] Attempt or run is already in a final state", {
      taskRunAttempt,
      completion
    }), "COMPLETED") : completion.ok ? await this.#completeAttemptSuccessfully(completion, taskRunAttempt, env6) : await this.#completeAttemptFailed(
      completion,
      execution,
      taskRunAttempt,
      env6,
      checkpoint
    ) : (logger.error("[CompleteAttemptService] Task run attempt not found", {
      id: execution.attempt.id
    }), await this._prisma.taskRun.update({
      where: {
        friendlyId: execution.run.id
      },
      data: {
        status: "SYSTEM_FAILURE"
      }
    }), "COMPLETED");
  }
  async #completeAttemptSuccessfully(completion, taskRunAttempt, env6) {
    return await this._prisma.taskRunAttempt.update({
      where: { id: taskRunAttempt.id },
      data: {
        status: "COMPLETED",
        completedAt: /* @__PURE__ */ new Date(),
        output: completion.output,
        outputType: completion.outputType,
        usageDurationMs: completion.usage?.durationMs,
        taskRun: {
          update: {
            data: {
              status: "COMPLETED_SUCCESSFULLY"
            }
          }
        }
      }
    }), logger.debug("Completed attempt successfully, ACKing message"), await marqs?.acknowledgeMessage(taskRunAttempt.taskRunId), await eventRepository.completeEvent(taskRunAttempt.taskRun.spanId, {
      endTime: /* @__PURE__ */ new Date(),
      attributes: {
        isError: !1,
        output: completion.outputType === "application/store" || completion.outputType === "text/plain" ? completion.output : completion.output ? safeJsonParse3(completion.output) : void 0,
        outputType: completion.outputType
      }
    }), (!env6 || env6.type !== "DEVELOPMENT") && await ResumeTaskRunDependenciesService.enqueue(taskRunAttempt.id, this._prisma), "COMPLETED";
  }
  async #completeAttemptFailed(completion, execution, taskRunAttempt, env6, checkpoint) {
    if (completion.error.type === "INTERNAL_ERROR" && completion.error.code === "TASK_RUN_CANCELLED")
      return await new CancelAttemptService().call(
        taskRunAttempt.friendlyId,
        taskRunAttempt.taskRunId,
        /* @__PURE__ */ new Date(),
        "Cancelled by user",
        env6
      ), "COMPLETED";
    let sanitizedError = sanitizeError(completion.error);
    await this._prisma.taskRunAttempt.update({
      where: { id: taskRunAttempt.id },
      data: {
        status: "FAILED",
        completedAt: /* @__PURE__ */ new Date(),
        error: sanitizedError,
        usageDurationMs: completion.usage?.durationMs
      }
    });
    let environment = env6 ?? await this.#getEnvironment(execution.environment.id);
    if (environment.type !== "DEVELOPMENT" && await PerformTaskAttemptAlertsService.enqueue(taskRunAttempt.id, this._prisma), completion.retry !== void 0 && taskRunAttempt.number < MAX_TASK_RUN_ATTEMPTS) {
      let retryAt = new Date(completion.retry.timestamp);
      if (await eventRepository.recordEvent(`Retry #${execution.attempt.number} delay`, {
        taskSlug: taskRunAttempt.taskRun.taskIdentifier,
        environment,
        attributes: {
          metadata: this.#generateMetadataAttributesForNextAttempt(execution),
          properties: {
            retryAt: retryAt.toISOString()
          },
          runId: taskRunAttempt.taskRun.friendlyId,
          style: {
            icon: "schedule-attempt"
          },
          queueId: taskRunAttempt.queueId,
          queueName: taskRunAttempt.taskRun.queue
        },
        context: taskRunAttempt.taskRun.traceContext,
        spanIdSeed: `retry-${taskRunAttempt.number + 1}`,
        endTime: retryAt
      }), logger.debug("Retrying", {
        taskRun: taskRunAttempt.taskRun.friendlyId,
        retry: completion.retry
      }), await this._prisma.taskRun.update({
        where: {
          id: taskRunAttempt.taskRunId
        },
        data: {
          status: "RETRYING_AFTER_FAILURE"
        }
      }), environment.type === "DEVELOPMENT")
        return await marqs?.nackMessage(taskRunAttempt.taskRunId, completion.retry.timestamp), "RETRIED";
      if (!checkpoint)
        return await this.#retryAttempt(
          taskRunAttempt.taskRun,
          completion.retry.timestamp,
          void 0,
          taskRunAttempt.backgroundWorker.supportsLazyAttempts
        ), "RETRIED";
      let checkpointCreateResult = await new CreateCheckpointService(this._prisma).call({
        attemptFriendlyId: execution.attempt.id,
        docker: checkpoint.docker,
        location: checkpoint.location,
        reason: {
          type: "RETRYING_AFTER_FAILURE",
          attemptNumber: execution.attempt.number
        }
      });
      return checkpointCreateResult ? (await this.#retryAttempt(
        taskRunAttempt.taskRun,
        completion.retry.timestamp,
        checkpointCreateResult.event.id
      ), "RETRIED") : (logger.error("Failed to create checkpoint", { checkpoint, execution: execution.run.id }), await this._prisma.taskRun.update({
        where: {
          friendlyId: execution.run.id
        },
        data: {
          status: "SYSTEM_FAILURE"
        }
      }), await marqs?.acknowledgeMessage(taskRunAttempt.taskRunId), "COMPLETED");
    } else {
      if (logger.debug("Completed attempt, ACKing message", taskRunAttempt), await marqs?.acknowledgeMessage(taskRunAttempt.taskRunId), await eventRepository.completeEvent(taskRunAttempt.taskRun.spanId, {
        endTime: /* @__PURE__ */ new Date(),
        attributes: {
          isError: !0
        },
        events: [
          {
            name: "exception",
            time: /* @__PURE__ */ new Date(),
            properties: {
              exception: createExceptionPropertiesFromError(sanitizedError)
            }
          }
        ]
      }), sanitizedError.type === "INTERNAL_ERROR" && sanitizedError.code === "GRACEFUL_EXIT_TIMEOUT") {
        let inProgressEvents = await eventRepository.queryIncompleteEvents({
          attemptId: execution.attempt.id
        });
        logger.debug("Failing in-progress events", {
          inProgressEvents: inProgressEvents.map((event) => event.id)
        });
        let exception = {
          type: "Graceful exit timeout",
          message: sanitizedError.message
        };
        await Promise.all(
          inProgressEvents.map((event) => eventRepository.crashEvent({
            event,
            crashedAt: /* @__PURE__ */ new Date(),
            exception
          }))
        ), await this._prisma.taskRun.update({
          where: {
            id: taskRunAttempt.taskRunId
          },
          data: {
            status: "SYSTEM_FAILURE"
          }
        });
      } else
        await this._prisma.taskRun.update({
          where: {
            id: taskRunAttempt.taskRunId
          },
          data: {
            status: "COMPLETED_WITH_ERRORS"
          }
        });
      return (!env6 || env6.type !== "DEVELOPMENT") && await ResumeTaskRunDependenciesService.enqueue(taskRunAttempt.id, this._prisma), "COMPLETED";
    }
  }
  async #retryAttempt(run, retryTimestamp, checkpointEventId, supportsLazyAttempts) {
    if (checkpointEventId || !supportsLazyAttempts)
      return await marqs?.replaceMessage(
        run.id,
        {
          type: "EXECUTE",
          taskIdentifier: run.taskIdentifier,
          checkpointEventId
        },
        retryTimestamp
      );
    RetryAttemptService.enqueue(run.id, this._prisma, new Date(retryTimestamp));
  }
  #generateMetadataAttributesForNextAttempt(execution) {
    let context7 = TaskRunContext.parse(execution);
    return context7.attempt = {
      number: context7.attempt.number + 1
    }, flattenAttributes(context7, "ctx");
  }
  async #getEnvironment(id) {
    return await this._prisma.runtimeEnvironment.findUniqueOrThrow({
      where: {
        id
      },
      include: {
        project: !0,
        organization: !0
      }
    });
  }
};
async function findAttempt(prismaClient, friendlyId) {
  return prismaClient.taskRunAttempt.findUnique({
    where: { friendlyId },
    include: {
      taskRun: !0,
      backgroundWorkerTask: !0,
      backgroundWorker: {
        select: {
          id: !0,
          supportsLazyAttempts: !0
        }
      }
    }
  });
}

// app/v3/utils/calculateNextBuildVersion.ts
function calculateNextBuildVersion(latestVersion) {
  let today = /* @__PURE__ */ new Date(), year = today.getFullYear(), month = today.getMonth() + 1, day = today.getDate(), todayFormatted = `${year}${month < 10 ? "0" : ""}${month}${day < 10 ? "0" : ""}${day}`;
  if (!latestVersion)
    return `${todayFormatted}.1`;
  let [date, buildNumber] = latestVersion.split(".");
  if (date === todayFormatted) {
    let nextBuildNumber = parseInt(buildNumber, 10) + 1;
    return `${date}.${nextBuildNumber}`;
  }
  return `${todayFormatted}.1`;
}

// app/v3/services/projectPubSub.server.ts
var import_zod52 = require("zod");

// app/v3/utils/zodPubSub.server.ts
var import_evt2 = require("evt"), import_ioredis4 = __toESM(require("ioredis"));
var RedisZodSubscriber = class {
  constructor(_pattern, _options, _logger) {
    this._pattern = _pattern;
    this._options = _options;
    this._logger = _logger;
    this._listeners = /* @__PURE__ */ new Map();
    this.onUnsubscribed = new import_evt2.Evt();
    this._subscriber = new import_ioredis4.default(_options.redis), this._messageHandler = new ZodMessageHandler({
      schema: _options.schema
    });
  }
  async initialize() {
    await this._subscriber.psubscribe(this._pattern), this._subscriber.on("pmessage", this.#onMessage.bind(this));
  }
  on(eventName, listener) {
    this._listeners.set(eventName, listener);
  }
  async stopListening() {
    this._listeners.clear(), await this._subscriber.punsubscribe(), this.onUnsubscribed.post({ pattern: this._pattern }), this._subscriber.quit();
  }
  async #onMessage(pattern, channel, serializedMessage) {
    if (pattern !== this._pattern)
      return;
    let parsedMessage = safeJsonParse3(serializedMessage);
    if (!parsedMessage)
      return;
    let message = this._messageHandler.parseMessage(parsedMessage);
    if (typeof message.type != "string")
      return;
    let listener = this._listeners.get(message.type);
    if (!listener) {
      this._logger.debug(`No listener for message type: ${message.type}`, { parsedMessage });
      return;
    }
    try {
      await listener(message.payload);
    } catch (error) {
      this._logger.error("Error handling message", { error, message });
    }
  }
}, ZodPubSub = class {
  constructor(_options) {
    this._options = _options;
    this._logger = logger.child({ module: "ZodPubSub" });
    this._subscriberCount = 0;
    this._publisher = new import_ioredis4.default(_options.redis);
  }
  get subscriberCount() {
    return this._subscriberCount;
  }
  async publish(channel, type, payload) {
    try {
      await this._publisher.publish(channel, JSON.stringify({ type, payload, version: "v1" }));
    } catch (e) {
      logger.error("Failed to publish message", { channel, type, payload, error: e });
    }
  }
  async subscribe(channel) {
    let subscriber = new RedisZodSubscriber(channel, this._options, this._logger);
    return await subscriber.initialize(), this._subscriberCount++, subscriber.onUnsubscribed.attachOnce(({ pattern }) => {
      logger.debug("Subscriber unsubscribed", { pattern }), this._subscriberCount--;
    }), subscriber;
  }
};

// app/v3/services/projectPubSub.server.ts
var import_prom_client3 = require("prom-client");
var messageCatalog = {
  WORKER_CREATED: import_zod52.z.object({
    environmentId: import_zod52.z.string(),
    environmentType: import_zod52.z.string(),
    createdAt: import_zod52.z.coerce.date(),
    taskCount: import_zod52.z.number(),
    type: import_zod52.z.union([import_zod52.z.literal("local"), import_zod52.z.literal("deployed")])
  })
}, projectPubSub = singleton("projectPubSub", initializeProjectPubSub);
function initializeProjectPubSub() {
  let pubSub = new ZodPubSub({
    redis: {
      port: env2.REDIS_PORT,
      host: env2.REDIS_HOST,
      username: env2.REDIS_USERNAME,
      password: env2.REDIS_PASSWORD,
      enableAutoPipelining: !0,
      ...env2.REDIS_TLS_DISABLED === "true" ? {} : { tls: {} }
    },
    schema: messageCatalog
  });
  return new import_prom_client3.Gauge({
    name: "project_pub_sub_subscribers",
    help: "Number of project pub sub subscribers",
    collect() {
      this.set(pubSub.subscriberCount);
    },
    registers: [metricsRegister]
  }), pubSub;
}

// app/v3/services/createBackgroundWorker.server.ts
var CreateBackgroundWorkerService = class extends BaseService {
  async call(projectRef, environment, body) {
    return this.traceWithEnv("call", environment, async (span) => {
      span.setAttribute("projectRef", projectRef);
      let project = await this._prisma.project.findUniqueOrThrow({
        where: {
          externalRef: projectRef,
          environments: {
            some: {
              id: environment.id
            }
          }
        },
        include: {
          backgroundWorkers: {
            where: {
              runtimeEnvironmentId: environment.id
            },
            orderBy: {
              createdAt: "desc"
            },
            take: 1
          }
        }
      }), latestBackgroundWorker = project.backgroundWorkers[0];
      if (latestBackgroundWorker?.contentHash === body.metadata.contentHash)
        return latestBackgroundWorker;
      let nextVersion = calculateNextBuildVersion(project.backgroundWorkers[0]?.version);
      logger.debug("Creating background worker", {
        nextVersion,
        lastVersion: project.backgroundWorkers[0]?.version
      });
      let backgroundWorker = await this._prisma.backgroundWorker.create({
        data: {
          friendlyId: generateFriendlyId("worker"),
          version: nextVersion,
          runtimeEnvironmentId: environment.id,
          projectId: project.id,
          metadata: body.metadata,
          contentHash: body.metadata.contentHash,
          cliVersion: body.metadata.cliPackageVersion,
          sdkVersion: body.metadata.packageVersion,
          supportsLazyAttempts: body.supportsLazyAttempts
        }
      });
      await createBackgroundTasks(body.metadata.tasks, backgroundWorker, environment, this._prisma);
      try {
        await projectPubSub.publish(
          `project:${project.id}:env:${environment.id}`,
          "WORKER_CREATED",
          {
            environmentId: environment.id,
            environmentType: environment.type,
            createdAt: backgroundWorker.createdAt,
            taskCount: body.metadata.tasks.length,
            type: "local"
          }
        ), await marqs?.updateEnvConcurrencyLimits(environment);
      } catch (err) {
        logger.error(
          "Error publishing WORKER_CREATED event or updating global concurrency limits",
          {
            error: err instanceof Error ? {
              name: err.name,
              message: err.message,
              stack: err.stack
            } : err,
            project,
            environment,
            backgroundWorker
          }
        );
      }
      return backgroundWorker;
    });
  }
};
async function createBackgroundTasks(tasks, worker, environment, prisma5) {
  for (let task of tasks)
    try {
      await prisma5.backgroundWorkerTask.create({
        data: {
          friendlyId: generateFriendlyId("task"),
          projectId: worker.projectId,
          runtimeEnvironmentId: worker.runtimeEnvironmentId,
          workerId: worker.id,
          slug: task.id,
          filePath: task.filePath,
          exportName: task.exportName,
          retryConfig: task.retry,
          queueConfig: task.queue,
          machineConfig: task.machine,
          triggerSource: task.triggerSource === "schedule" ? "SCHEDULED" : "STANDARD"
        }
      });
      let queueName = sanitizeQueueName(task.queue?.name ?? `task/${task.id}`);
      queueName || (queueName = sanitizeQueueName(`task/${task.id}`));
      let concurrencyLimit = typeof task.queue?.concurrencyLimit == "number" ? Math.max(
        Math.min(
          task.queue.concurrencyLimit,
          environment.maximumConcurrencyLimit,
          environment.organization.maximumConcurrencyLimit
        ),
        0
      ) : null, taskQueue = await prisma5.taskQueue.upsert({
        where: {
          runtimeEnvironmentId_name: {
            runtimeEnvironmentId: worker.runtimeEnvironmentId,
            name: queueName
          }
        },
        update: {
          concurrencyLimit,
          rateLimit: task.queue?.rateLimit
        },
        create: {
          friendlyId: generateFriendlyId("queue"),
          name: queueName,
          concurrencyLimit,
          runtimeEnvironmentId: worker.runtimeEnvironmentId,
          projectId: worker.projectId,
          rateLimit: task.queue?.rateLimit,
          type: task.queue?.name ? "NAMED" : "VIRTUAL"
        }
      });
      typeof taskQueue.concurrencyLimit == "number" ? await marqs?.updateQueueConcurrencyLimits(
        environment,
        taskQueue.name,
        taskQueue.concurrencyLimit
      ) : await marqs?.removeQueueConcurrencyLimits(environment, taskQueue.name);
    } catch (error) {
      error instanceof src_exports.Prisma.PrismaClientKnownRequestError ? error.code === "P2002" ? logger.warn("Task already exists", {
        task,
        worker
      }) : logger.error("Prisma Error creating background worker task", {
        error: {
          code: error.code,
          message: error.message
        },
        task,
        worker
      }) : error instanceof Error ? logger.error("Error creating background worker task", {
        error: {
          name: error.name,
          message: error.message,
          stack: error.stack
        },
        task,
        worker
      }) : logger.error("Unknown error creating background worker task", {
        error,
        task,
        worker
      });
    }
}

// app/v3/services/executeTasksWaitingForDeploy.ts
var ExecuteTasksWaitingForDeployService = class extends BaseService {
  async call(backgroundWorkerId) {
    let backgroundWorker = await this._prisma.backgroundWorker.findFirst({
      where: {
        id: backgroundWorkerId
      },
      include: {
        runtimeEnvironment: {
          include: {
            project: !0,
            organization: !0
          }
        },
        tasks: !0
      }
    });
    if (!backgroundWorker) {
      logger.error("Background worker not found", { id: backgroundWorkerId });
      return;
    }
    let runsWaitingForDeploy = await this._prisma.taskRun.findMany({
      where: {
        runtimeEnvironmentId: backgroundWorker.runtimeEnvironmentId,
        projectId: backgroundWorker.projectId,
        status: "WAITING_FOR_DEPLOY",
        taskIdentifier: {
          in: backgroundWorker.tasks.map((task) => task.slug)
        }
      },
      orderBy: {
        number: "asc"
      }
    });
    if (!runsWaitingForDeploy.length)
      return;
    let pendingRuns = await this._prisma.taskRun.updateMany({
      where: {
        id: {
          in: runsWaitingForDeploy.map((run) => run.id)
        }
      },
      data: {
        status: "PENDING"
      }
    });
    if (pendingRuns.count && logger.debug("Task runs waiting for deploy are now ready for execution", {
      tasks: runsWaitingForDeploy.map((run) => run.id),
      total: pendingRuns.count
    }), !marqs)
      return;
    let enqueues = [], i = 0;
    for (let run of runsWaitingForDeploy)
      enqueues.push(
        marqs.enqueueMessage(
          backgroundWorker.runtimeEnvironment,
          run.queue,
          run.id,
          {
            type: "EXECUTE",
            taskIdentifier: run.taskIdentifier
          },
          run.concurrencyKey ?? void 0,
          Date.now() + i * 5
          // slight delay to help preserve order
        )
      ), i++;
    let settled = await Promise.allSettled(enqueues);
    if (settled.some((s) => s.status === "rejected")) {
      let rejectedRuns = [];
      runsWaitingForDeploy.forEach((run, i2) => {
        if (settled[i2].status === "rejected") {
          let rejected = settled[i2];
          rejectedRuns.push({ id: run.id, reason: rejected.reason });
        }
      }), logger.error("Failed to requeue task runs for immediate execution", {
        rejectedRuns
      });
    }
  }
  static async enqueue(backgroundWorkerId, tx, runAt) {
    return await workerQueue.enqueue(
      "v3.executeTasksWaitingForDeploy",
      {
        backgroundWorkerId
      },
      {
        tx,
        runAt
      }
    );
  }
};

// app/v3/services/createDeployedBackgroundWorker.server.ts
var CreateDeployedBackgroundWorkerService = class extends BaseService {
  async call(projectRef, environment, deploymentId, body) {
    return this.traceWithEnv("call", environment, async (span) => {
      span.setAttribute("projectRef", projectRef);
      let deployment = await this._prisma.workerDeployment.findUnique({
        where: {
          friendlyId: deploymentId
        }
      });
      if (!deployment || deployment.status !== "DEPLOYING")
        return;
      let backgroundWorker = await this._prisma.backgroundWorker.create({
        data: {
          friendlyId: generateFriendlyId("worker"),
          version: deployment.version,
          runtimeEnvironmentId: environment.id,
          projectId: environment.projectId,
          metadata: body.metadata,
          contentHash: body.metadata.contentHash,
          cliVersion: body.metadata.cliPackageVersion,
          sdkVersion: body.metadata.packageVersion,
          supportsLazyAttempts: body.supportsLazyAttempts
        }
      });
      await createBackgroundTasks(body.metadata.tasks, backgroundWorker, environment, this._prisma), await this._prisma.workerDeployment.update({
        where: {
          id: deployment.id
        },
        data: {
          status: "DEPLOYED",
          workerId: backgroundWorker.id,
          deployedAt: /* @__PURE__ */ new Date()
        }
      }), await this._prisma.workerDeploymentPromotion.upsert({
        where: {
          environmentId_label: {
            environmentId: environment.id,
            label: CURRENT_DEPLOYMENT_LABEL
          }
        },
        create: {
          deploymentId: deployment.id,
          environmentId: environment.id,
          label: CURRENT_DEPLOYMENT_LABEL
        },
        update: {
          deploymentId: deployment.id
        }
      });
      try {
        await projectPubSub.publish(
          `project:${environment.projectId}:env:${environment.id}`,
          "WORKER_CREATED",
          {
            environmentId: environment.id,
            environmentType: environment.type,
            createdAt: backgroundWorker.createdAt,
            taskCount: body.metadata.tasks.length,
            type: "deployed"
          }
        ), await marqs?.updateEnvConcurrencyLimits(environment);
      } catch (err) {
        logger.error("Failed to publish WORKER_CREATED event", { err });
      }
      return await ExecuteTasksWaitingForDeployService.enqueue(backgroundWorker.id, this._prisma), await PerformDeploymentAlertsService.enqueue(deployment.id, this._prisma), backgroundWorker;
    });
  }
};

// app/v3/services/resumeAttempt.server.ts
var ResumeAttemptService = class extends BaseService {
  async call(params) {
    logger.debug("ResumeAttemptService.call()", params), await $transaction(this._prisma, async (tx) => {
      let attempt = await tx.taskRunAttempt.findUnique({
        where: {
          friendlyId: params.attemptFriendlyId
        },
        include: {
          taskRun: !0,
          dependencies: {
            include: {
              taskRun: {
                include: {
                  attempts: {
                    orderBy: {
                      number: "desc"
                    },
                    take: 1,
                    select: {
                      id: !0
                    }
                  }
                }
              }
            },
            orderBy: {
              createdAt: "desc"
            },
            take: 1
          },
          batchDependencies: {
            include: {
              items: {
                include: {
                  taskRun: {
                    include: {
                      attempts: {
                        orderBy: {
                          number: "desc"
                        },
                        take: 1,
                        select: {
                          id: !0
                        }
                      }
                    }
                  }
                }
              }
            },
            orderBy: {
              createdAt: "desc"
            },
            take: 1
          }
        }
      });
      if (!attempt) {
        logger.error("Could not find attempt", { attemptFriendlyId: params.attemptFriendlyId });
        return;
      }
      if (isFinalRunStatus(attempt.taskRun.status)) {
        logger.error("Run is not resumable", {
          attemptId: attempt.id,
          runId: attempt.taskRunId,
          status: attempt.taskRun.status
        });
        return;
      }
      let completedAttemptIds = [];
      switch (params.type) {
        case "WAIT_FOR_DURATION": {
          logger.debug("Sending duration wait resume message", {
            attemptId: attempt.id,
            attemptFriendlyId: params.attemptFriendlyId
          }), await this.#setPostResumeStatuses(attempt, tx), socketIo.coordinatorNamespace.emit("RESUME_AFTER_DURATION", {
            version: "v1",
            attemptId: attempt.id,
            attemptFriendlyId: attempt.friendlyId
          });
          break;
        }
        case "WAIT_FOR_TASK": {
          if (attempt.dependencies.length) {
            let dependentAttempt = attempt.dependencies[0].taskRun.attempts[0];
            if (!dependentAttempt) {
              logger.error("No dependent attempt", { attemptId: attempt.id });
              return;
            }
            completedAttemptIds = [dependentAttempt.id];
          } else {
            logger.error("No task dependency", { attemptId: attempt.id });
            return;
          }
          await this.#handleDependencyResume(attempt, completedAttemptIds, tx);
          break;
        }
        case "WAIT_FOR_BATCH": {
          if (attempt.batchDependencies) {
            let dependentBatchItems = attempt.batchDependencies[0].items;
            if (!dependentBatchItems) {
              logger.error("No dependent batch items", { attemptId: attempt.id });
              return;
            }
            completedAttemptIds = dependentBatchItems.map((item) => item.taskRun.attempts[0]?.id);
          } else {
            logger.error("No batch dependency", { attemptId: attempt.id });
            return;
          }
          await this.#handleDependencyResume(attempt, completedAttemptIds, tx);
          break;
        }
        default:
          break;
      }
      await this.#replaceResumeWithFailMessage(attempt.taskRunId, params.type);
    });
  }
  async #handleDependencyResume(attempt, completedAttemptIds, tx) {
    if (completedAttemptIds.length === 0) {
      logger.error("No completed attempt IDs", { attemptId: attempt.id });
      return;
    }
    let completions = [], executions = [];
    for (let completedAttemptId of completedAttemptIds) {
      let completedAttempt = await tx.taskRunAttempt.findUnique({
        where: {
          id: completedAttemptId,
          taskRun: {
            lockedAt: {
              not: null
            },
            lockedById: {
              not: null
            }
          }
        }
      });
      if (!completedAttempt) {
        logger.error("Completed attempt not found", {
          attemptId: attempt.id,
          completedAttemptId
        }), await marqs?.acknowledgeMessage(attempt.taskRunId);
        return;
      }
      let completion = await sharedQueueTasks.getCompletionPayloadFromAttempt(
        completedAttempt.id
      );
      if (!completion) {
        logger.error("Failed to get completion payload", {
          attemptId: attempt.id,
          completedAttemptId
        }), await marqs?.acknowledgeMessage(attempt.taskRunId);
        return;
      }
      completions.push(completion);
      let executionPayload = await sharedQueueTasks.getExecutionPayloadFromAttempt(
        completedAttempt.id
      );
      if (!executionPayload) {
        logger.error("Failed to get execution payload", {
          attemptId: attempt.id,
          completedAttemptId
        }), await marqs?.acknowledgeMessage(attempt.taskRunId);
        return;
      }
      executions.push(executionPayload.execution);
    }
    await this.#setPostResumeStatuses(attempt, tx), socketIo.coordinatorNamespace.emit("RESUME_AFTER_DEPENDENCY", {
      version: "v1",
      runId: attempt.taskRunId,
      attemptId: attempt.id,
      attemptFriendlyId: attempt.friendlyId,
      completions,
      executions
    });
  }
  async #setPostResumeStatuses(attempt, tx) {
    return await tx.taskRunAttempt.update({
      where: {
        id: attempt.id
      },
      data: {
        status: "EXECUTING",
        taskRun: {
          update: {
            data: {
              status: attempt.number > 1 ? "RETRYING_AFTER_FAILURE" : "EXECUTING"
            }
          }
        }
      }
    });
  }
  async #replaceResumeWithFailMessage(messageId, waitReason) {
    let currentMessage = await marqs?.readMessage(messageId);
    if (!currentMessage) {
      logger.debug("No message to replace", { messageId, waitReason });
      return;
    }
    let currentBody = SharedQueueMessageBody.safeParse(currentMessage.data);
    if (!currentBody.success) {
      logger.debug("Invalid message body", { messageId, waitReason, currentBody });
      return;
    }
    let currentType = currentBody.data.type;
    if (currentType !== "RESUME" && currentType !== "RESUME_AFTER_DURATION") {
      logger.debug("Not a resume message", { messageId, waitReason, currentBody });
      return;
    }
    let reason = "Worker unresponsive after restore";
    switch (waitReason) {
      case "WAIT_FOR_DURATION":
        reason = "Worker unresponsive after waiting for duration";
        break;
      case "WAIT_FOR_TASK":
        reason = "Worker unresponsive after waiting for task";
        break;
      case "WAIT_FOR_BATCH":
        reason = "Worker unresponsive after waiting for batch task";
        break;
      default:
        break;
    }
    let failMessage = {
      type: "FAIL",
      reason
    };
    return await marqs?.replaceMessage(messageId, failMessage, void 0, !0);
  }
};

// app/v3/services/deploymentIndexFailed.server.ts
var FINAL_DEPLOYMENT_STATUSES = [
  "CANCELED",
  "DEPLOYED",
  "FAILED",
  "TIMED_OUT"
], DeploymentIndexFailed = class extends BaseService {
  async call(maybeFriendlyId, error, overrideCompletion = !1) {
    let isFriendlyId = maybeFriendlyId.startsWith("deployment_"), deployment = await this._prisma.workerDeployment.findUnique({
      where: isFriendlyId ? {
        friendlyId: maybeFriendlyId
      } : {
        id: maybeFriendlyId
      }
    });
    if (!deployment) {
      logger.error("Worker deployment not found", { maybeFriendlyId });
      return;
    }
    if (FINAL_DEPLOYMENT_STATUSES.includes(deployment.status)) {
      overrideCompletion && logger.error("No support for overriding final deployment statuses just yet", {
        id: deployment.id,
        status: deployment.status,
        previousError: deployment.errorData,
        incomingError: error
      }), logger.error("Worker deployment already in final state", {
        id: deployment.id,
        status: deployment.status
      });
      return;
    }
    let failedDeployment = await this._prisma.workerDeployment.update({
      where: {
        id: deployment.id
      },
      data: {
        status: "FAILED",
        failedAt: /* @__PURE__ */ new Date(),
        errorData: error
      }
    });
    return await PerformDeploymentAlertsService.enqueue(failedDeployment.id, this._prisma), failedDeployment;
  }
};

// app/v3/handleSocketIo.server.ts
var import_ioredis5 = require("ioredis"), import_redis_adapter = require("@socket.io/redis-adapter");
var socketIo = singleton("socketIo", initalizeIoServer);
function initalizeIoServer() {
  let io2 = initializeSocketIOServerInstance();
  io2.on("connection", (socket) => {
    logger.log(`[socket.io][${socket.id}] connection at url: ${socket.request.url}`);
  });
  let coordinatorNamespace = createCoordinatorNamespace(io2), providerNamespace = createProviderNamespace(io2), sharedQueueConsumerNamespace = createSharedQueueConsumerNamespace(io2);
  return {
    io: io2,
    coordinatorNamespace,
    providerNamespace,
    sharedQueueConsumerNamespace
  };
}
function initializeSocketIOServerInstance() {
  if (env2.REDIS_HOST && env2.REDIS_PORT) {
    let pubClient = new import_ioredis5.Redis({
      port: env2.REDIS_PORT,
      host: env2.REDIS_HOST,
      username: env2.REDIS_USERNAME,
      password: env2.REDIS_PASSWORD,
      enableAutoPipelining: !0,
      ...env2.REDIS_TLS_DISABLED === "true" ? {} : { tls: {} }
    }), subClient = pubClient.duplicate();
    return new import_socket2.Server({
      adapter: (0, import_redis_adapter.createAdapter)(pubClient, subClient, {
        key: "tr:socket.io:",
        publishOnSpecificResponseChannel: !0
      })
    });
  }
  return new import_socket2.Server();
}
function createCoordinatorNamespace(io2) {
  return new ZodNamespace({
    // @ts-ignore - for some reason the built ZodNamespace Server type is not compatible with the Server type here, but only when doing typechecking
    io: io2,
    name: "coordinator",
    authToken: env2.COORDINATOR_SECRET,
    clientMessages: CoordinatorToPlatformMessages,
    serverMessages: PlatformToCoordinatorMessages,
    socketData: CoordinatorSocketData,
    handlers: {
      READY_FOR_EXECUTION: async (message) => {
        let payload = await sharedQueueTasks.getLatestExecutionPayloadFromRun(
          message.runId,
          !0,
          !!message.totalCompletions
        );
        return payload ? { success: !0, payload } : (logger.error("Failed to retrieve execution payload", message), { success: !1 });
      },
      READY_FOR_LAZY_ATTEMPT: async (message) => {
        try {
          let payload = await sharedQueueTasks.getLazyAttemptPayload(
            message.envId,
            message.runId
          );
          return payload ? { success: !0, lazyPayload: payload } : (logger.error("Failed to retrieve lazy attempt payload", message), { success: !1, reason: "Failed to retrieve payload" });
        } catch (error) {
          return logger.error("Error while creating lazy attempt", {
            runId: message.runId,
            envId: message.envId,
            totalCompletions: message.totalCompletions,
            error
          }), { success: !1 };
        }
      },
      READY_FOR_RESUME: async (message) => {
        await new ResumeAttemptService().call(message);
      },
      TASK_RUN_COMPLETED: async (message) => {
        await new CompleteAttemptService().call({
          completion: message.completion,
          execution: message.execution,
          checkpoint: message.checkpoint
        });
      },
      TASK_RUN_FAILED_TO_RUN: async (message) => {
        await sharedQueueTasks.taskRunFailed(message.completion);
      },
      TASK_HEARTBEAT: async (message) => {
        await sharedQueueTasks.taskHeartbeat(message.attemptFriendlyId);
      },
      TASK_RUN_HEARTBEAT: async (message) => {
        await sharedQueueTasks.taskRunHeartbeat(message.runId);
      },
      CHECKPOINT_CREATED: async (message) => {
        try {
          return { keepRunAlive: (await new CreateCheckpointService().call(message))?.keepRunAlive ?? !1 };
        } catch (error) {
          return logger.error("Error while creating checkpoint", {
            rawMessage: message,
            error: error instanceof Error ? error.message : error
          }), { keepRunAlive: !1 };
        }
      },
      CREATE_WORKER: async (message) => {
        try {
          let environment = await findEnvironmentById(message.envId);
          return environment ? { success: !!await new CreateDeployedBackgroundWorkerService().call(message.projectRef, environment, message.deploymentId, {
            localOnly: !1,
            metadata: message.metadata,
            supportsLazyAttempts: message.version !== "v1" && message.supportsLazyAttempts
          }) } : (logger.error("Environment not found", { id: message.envId }), { success: !1 });
        } catch (error) {
          return logger.error("Error while creating worker", {
            error,
            envId: message.envId,
            projectRef: message.projectRef,
            deploymentId: message.deploymentId,
            version: message.version
          }), { success: !1 };
        }
      },
      CREATE_TASK_RUN_ATTEMPT: async (message) => {
        try {
          let environment = await findEnvironmentById(message.envId);
          if (!environment)
            return logger.error("Environment not found", { id: message.envId }), { success: !1, reason: "Environment not found" };
          let service = new CreateTaskRunAttemptService(), { attempt } = await service.call(message.runId, environment, !1), payload = await sharedQueueTasks.getExecutionPayloadFromAttempt(attempt.id, !0);
          return payload ? { success: !0, executionPayload: payload } : (logger.error("Failed to retrieve payload after attempt creation", {
            id: message.envId
          }), { success: !1, reason: "Failed to retrieve payload" });
        } catch (error) {
          return logger.error("Error while creating attempt", {
            runId: message.runId,
            error
          }), { success: !1 };
        }
      },
      INDEXING_FAILED: async (message) => {
        try {
          await new DeploymentIndexFailed().call(message.deploymentId, message.error);
        } catch (error) {
          logger.error("Error while processing index failure", {
            deploymentId: message.deploymentId,
            error
          });
        }
      },
      RUN_CRASHED: async (message) => {
        try {
          await new CrashTaskRunService().call(message.runId, {
            reason: `${message.error.name}: ${message.error.message}`,
            logs: message.error.stack
          });
        } catch (error) {
          logger.error("Error while processing run failure", {
            runId: message.runId,
            error
          });
        }
      }
    },
    onConnection: async (socket, handler, sender, logger3) => {
      socket.data.supportsDynamicConfig && socket.emit("DYNAMIC_CONFIG", {
        version: "v1",
        checkpointThresholdInMs: env2.CHECKPOINT_THRESHOLD_IN_MS
      });
    },
    postAuth: async (socket, next, logger3) => {
      function setSocketDataFromHeader(dataKey, headerName, required = !0) {
        let value = socket.handshake.headers[headerName];
        if (value) {
          socket.data[dataKey] = Array.isArray(value) ? value[0] : value;
          return;
        }
        if (required)
          throw logger3.error("missing required header", { headerName }), new Error("missing header");
      }
      try {
        setSocketDataFromHeader("supportsDynamicConfig", "x-supports-dynamic-config", !1);
      } catch (error) {
        logger3.error("setSocketDataFromHeader error", { error }), socket.disconnect(!0);
        return;
      }
      logger3.debug("success", socket.data), next();
    }
  }).namespace;
}
function createProviderNamespace(io2) {
  return new ZodNamespace({
    // @ts-ignore - for some reason the built ZodNamespace Server type is not compatible with the Server type here, but only when doing typechecking
    io: io2,
    name: "provider",
    authToken: env2.PROVIDER_SECRET,
    clientMessages: ProviderToPlatformMessages,
    serverMessages: PlatformToProviderMessages,
    handlers: {
      WORKER_CRASHED: async (message) => {
        try {
          await new CrashTaskRunService().call(message.runId, {
            ...message
          });
        } catch (error) {
          logger.error("Error while handling crashed worker", { error });
        }
      },
      INDEXING_FAILED: async (message) => {
        try {
          await new DeploymentIndexFailed().call(message.deploymentId, message.error, message.overrideCompletion);
        } catch (e) {
          logger.error("Error while indexing", { error: e });
        }
      }
    }
  }).namespace;
}
function createSharedQueueConsumerNamespace(io2) {
  let sharedQueue = new ZodNamespace({
    // @ts-ignore - for some reason the built ZodNamespace Server type is not compatible with the Server type here, but only when doing typechecking
    io: io2,
    name: "shared-queue",
    authToken: env2.PROVIDER_SECRET,
    clientMessages: ClientToSharedQueueMessages,
    serverMessages: SharedQueueToClientMessages,
    onConnection: async (socket, handler, sender, logger3) => {
      let sharedSocketConnection = new SharedSocketConnection({
        // @ts-ignore - for some reason the built ZodNamespace Server type is not compatible with the Server type here, but only when doing typechecking
        namespace: sharedQueue.namespace,
        // @ts-ignore - for some reason the built ZodNamespace Server type is not compatible with the Server type here, but only when doing typechecking
        socket,
        logger: logger3,
        poolSize: env2.SHARED_QUEUE_CONSUMER_POOL_SIZE
      });
      sharedSocketConnection.onClose.attach((closeEvent) => {
        logger3.info("Socket closed", { closeEvent });
      }), await sharedSocketConnection.initialize();
    }
  });
  return sharedQueue.namespace;
}

// app/v3/marqs/devPubSub.server.ts
var import_zod53 = require("zod");
var import_prom_client4 = require("prom-client");
var messageCatalog2 = {
  CANCEL_ATTEMPT: import_zod53.z.object({
    version: import_zod53.z.literal("v1").default("v1"),
    backgroundWorkerId: import_zod53.z.string(),
    attemptId: import_zod53.z.string(),
    taskRunId: import_zod53.z.string()
  })
}, devPubSub = singleton("devPubSub", initializeDevPubSub);
function initializeDevPubSub() {
  let pubSub = new ZodPubSub({
    redis: {
      port: env2.REDIS_PORT,
      host: env2.REDIS_HOST,
      username: env2.REDIS_USERNAME,
      password: env2.REDIS_PASSWORD,
      enableAutoPipelining: !0,
      ...env2.REDIS_TLS_DISABLED === "true" ? {} : { tls: {} }
    },
    schema: messageCatalog2
  });
  return new import_prom_client4.Gauge({
    name: "dev_pub_sub_subscribers",
    help: "Number of dev pub sub subscribers",
    collect() {
      this.set(pubSub.subscriberCount);
    },
    registers: [metricsRegister]
  }), pubSub;
}

// app/v3/services/cancelTaskAttemptDependencies.server.ts
var CancelTaskAttemptDependenciesService = class extends BaseService {
  async call(attemptId) {
    let taskAttempt = await this._prisma.taskRunAttempt.findUnique({
      where: { id: attemptId },
      include: {
        dependencies: {
          include: {
            taskRun: !0
          }
        },
        batchDependencies: {
          include: {
            runDependencies: {
              include: {
                taskRun: !0
              }
            }
          }
        }
      }
    });
    if (!taskAttempt)
      return;
    taskAttempt.status !== "CANCELED" && logger.debug("Task attempt is not cancelled, continuing anyway", {
      attemptId,
      status: taskAttempt.status
    });
    let cancelRunService = new CancelTaskRunService();
    logger.debug("Cancelling task attempt dependencies", {
      taskAttempt,
      dependencies: taskAttempt.dependencies,
      batchDependencies: taskAttempt.batchDependencies
    });
    for (let dependency of taskAttempt.dependencies)
      await cancelRunService.call(dependency.taskRun);
    for (let batchDependency of taskAttempt.batchDependencies)
      for (let runDependency of batchDependency.runDependencies)
        await cancelRunService.call(runDependency.taskRun);
  }
  static async enqueue(attemptId, tx, runAt) {
    return await workerQueue.enqueue(
      "v3.cancelTaskAttemptDependencies",
      {
        attemptId
      },
      {
        tx,
        runAt,
        jobKey: `cancelTaskAttemptDependencies:${attemptId}`
      }
    );
  }
};

// app/v3/services/cancelTaskRun.server.ts
var CancelTaskRunService = class extends BaseService {
  async call(taskRun, options2) {
    let opts = {
      reason: "Task run was cancelled by user",
      cancelAttempts: !0,
      cancelledAt: /* @__PURE__ */ new Date(),
      ...options2
    };
    if (!isCancellableRunStatus(taskRun.status)) {
      logger.error("Task run is not in a cancellable state", {
        runId: taskRun.id,
        status: taskRun.status
      });
      return;
    }
    await marqs?.acknowledgeMessage(taskRun.id);
    let cancelledTaskRun = await this._prisma.taskRun.update({
      where: {
        id: taskRun.id
      },
      data: {
        status: "CANCELED"
      },
      include: {
        attempts: {
          where: {
            status: {
              in: CANCELLABLE_ATTEMPT_STATUSES
            }
          },
          include: {
            backgroundWorker: !0,
            dependencies: {
              include: {
                taskRun: !0
              }
            },
            batchTaskRunItems: {
              include: {
                taskRun: !0
              }
            }
          }
        },
        runtimeEnvironment: !0,
        lockedToVersion: !0
      }
    }), inProgressEvents = await eventRepository.queryIncompleteEvents({
      runId: taskRun.friendlyId
    });
    return logger.debug("Cancelling in-progress events", {
      inProgressEvents: inProgressEvents.map((event) => event.id)
    }), await Promise.all(
      inProgressEvents.map((event) => eventRepository.cancelEvent(event, opts.cancelledAt, opts.reason))
    ), opts.cancelAttempts && (await this.#cancelPotentiallyRunningAttempts(cancelledTaskRun, cancelledTaskRun.attempts), await this.#cancelRemainingRunWorkers(cancelledTaskRun)), {
      id: cancelledTaskRun.id
    };
  }
  async #cancelPotentiallyRunningAttempts(run, attempts) {
    for (let attempt of attempts)
      if (await CancelTaskAttemptDependenciesService.enqueue(attempt.id, this._prisma), run.runtimeEnvironment.type === "DEVELOPMENT")
        await devPubSub.publish(
          `backgroundWorker:${attempt.backgroundWorkerId}:${attempt.id}`,
          "CANCEL_ATTEMPT",
          {
            attemptId: attempt.friendlyId,
            backgroundWorkerId: attempt.backgroundWorker.friendlyId,
            taskRunId: run.friendlyId
          }
        );
      else
        switch (attempt.status) {
          case "EXECUTING": {
            socketIo.coordinatorNamespace.emit("REQUEST_ATTEMPT_CANCELLATION", {
              version: "v1",
              attemptId: attempt.id,
              attemptFriendlyId: attempt.friendlyId
            });
            break;
          }
          case "PENDING":
          case "PAUSED": {
            logger.debug("Cancelling pending or paused attempt", {
              attempt
            }), await new CancelAttemptService().call(
              attempt.friendlyId,
              run.id,
              /* @__PURE__ */ new Date(),
              "Task run was cancelled by user"
            );
            break;
          }
          case "CANCELED":
          case "COMPLETED":
          case "FAILED":
            break;
          default:
            (0, import_assert_never3.default)(attempt.status);
        }
  }
  async #cancelRemainingRunWorkers(run) {
    run.runtimeEnvironment.type !== "DEVELOPMENT" && socketIo.coordinatorNamespace.emit("REQUEST_RUN_CANCELLATION", {
      version: "v1",
      runId: run.id,
      // Give the attempts some time to exit gracefully. If the runs supports lazy attempts, it also supports exit delays.
      delayInMs: run.lockedToVersion?.supportsLazyAttempts ? 5e3 : void 0
    });
  }
};

// app/services/autoIncrementCounter.server.ts
var import_ioredis6 = __toESM(require("ioredis"));
var AutoIncrementCounter = class {
  constructor(options2) {
    this.options = options2;
    this._redis = new import_ioredis6.default(options2.redis);
  }
  async incrementInTransaction(key, callback, backfiller, client3 = prisma, transactionOptions) {
    let performedIncrement = !1, performedBackfill = !1;
    try {
      return await $transaction(
        client3,
        async (tx) => {
          let newNumber = await this.#increment(key);
          if (performedIncrement = !0, newNumber === 1 && backfiller) {
            let backfilledNumber = await backfiller(key, tx);
            backfilledNumber && backfilledNumber > 1 && (newNumber = backfilledNumber + 1, await this._redis.set(key, newNumber), performedBackfill = !0);
          }
          return await callback(newNumber, tx);
        },
        transactionOptions
      );
    } catch (e) {
      throw (e instanceof src_exports.Prisma.PrismaClientKnownRequestError || e instanceof src_exports.Prisma.PrismaClientUnknownRequestError || e instanceof src_exports.Prisma.PrismaClientValidationError) && performedIncrement && !performedBackfill && await this._redis.decr(key), e;
    }
  }
  async #increment(key) {
    return await this._redis.incr(key);
  }
}, autoIncrementCounter = singleton("auto-increment-counter", getAutoIncrementCounter);
function getAutoIncrementCounter() {
  if (!env2.REDIS_HOST || !env2.REDIS_PORT)
    throw new Error(
      "Could not initialize auto-increment counter because process.env.REDIS_HOST and process.env.REDIS_PORT are required to be set. "
    );
  return new AutoIncrementCounter({
    redis: {
      keyPrefix: "auto-counter:",
      port: env2.REDIS_PORT,
      host: env2.REDIS_HOST,
      username: env2.REDIS_USERNAME,
      password: env2.REDIS_PASSWORD,
      enableAutoPipelining: !0,
      ...env2.REDIS_TLS_DISABLED === "true" ? {} : { tls: {} }
    }
  });
}

// app/v3/r2.server.ts
var import_aws4fetch = require("aws4fetch");
var r2 = singleton("r2", initializeR2);
function initializeR2() {
  if (!(!env2.OBJECT_STORE_ACCESS_KEY_ID || !env2.OBJECT_STORE_SECRET_ACCESS_KEY))
    return new import_aws4fetch.AwsClient({
      accessKeyId: env2.OBJECT_STORE_ACCESS_KEY_ID,
      secretAccessKey: env2.OBJECT_STORE_SECRET_ACCESS_KEY
    });
}
async function uploadToObjectStore(filename, data2, contentType, environment) {
  return await startActiveSpan("uploadToObjectStore()", async (span) => {
    if (!r2)
      throw new Error("Object store credentials are not set");
    if (!env2.OBJECT_STORE_BASE_URL)
      throw new Error("Object store base URL is not set");
    span.setAttributes({
      projectRef: environment.project.externalRef,
      environmentSlug: environment.slug,
      filename
    });
    let url = new URL(env2.OBJECT_STORE_BASE_URL);
    url.pathname = `/packets/${environment.project.externalRef}/${environment.slug}/${filename}`, logger.debug("Uploading to object store", { url: url.href });
    let response = await r2.fetch(url.toString(), {
      method: "PUT",
      headers: {
        "Content-Type": contentType
      },
      body: data2
    });
    if (!response.ok)
      throw new Error(`Failed to upload output to ${url}: ${response.statusText}`);
    return url.href;
  });
}
async function generatePresignedRequest(projectRef, envSlug2, filename, method = "PUT") {
  if (!env2.OBJECT_STORE_BASE_URL || !r2)
    return;
  let url = new URL(env2.OBJECT_STORE_BASE_URL);
  url.pathname = `/packets/${projectRef}/${envSlug2}/${filename}`, url.searchParams.set("X-Amz-Expires", "300");
  let signed = await r2.sign(
    new Request(url, {
      method
    }),
    {
      aws: { signQuery: !0 }
    }
  );
  return logger.debug("Generated presigned URL", {
    url: signed.url,
    headers: Object.fromEntries(signed.headers),
    projectRef,
    envSlug: envSlug2,
    filename
  }), signed;
}
async function generatePresignedUrl(projectRef, envSlug2, filename, method = "PUT") {
  return (await generatePresignedRequest(projectRef, envSlug2, filename, method))?.url;
}

// app/v3/services/triggerTask.server.ts
var OutOfEntitlementError = class extends Error {
  constructor() {
    super("You can't trigger a task because you have run out of credits.");
  }
}, TriggerTaskService = class extends BaseService {
  async call(taskId, environment, body, options2 = {}) {
    return await this.traceWithEnv("call()", environment, async (span) => {
      span.setAttribute("taskId", taskId);
      let idempotencyKey = options2.idempotencyKey ?? body.options?.idempotencyKey, delayUntil = await parseDelay(body.options?.delay), ttl = typeof body.options?.ttl == "number" ? stringifyDuration(body.options?.ttl) : body.options?.ttl ?? (environment.type === "DEVELOPMENT" ? "10m" : void 0), existingRun = idempotencyKey ? await this._prisma.taskRun.findUnique({
        where: {
          runtimeEnvironmentId_taskIdentifier_idempotencyKey: {
            runtimeEnvironmentId: environment.id,
            idempotencyKey,
            taskIdentifier: taskId
          }
        }
      }) : void 0;
      if (existingRun)
        return span.setAttribute("runId", existingRun.friendlyId), existingRun;
      if (environment.type !== "DEVELOPMENT") {
        let result = await getEntitlement(environment.organizationId);
        if (result && result.hasAccess === !1)
          throw new OutOfEntitlementError();
      }
      let runFriendlyId = generateFriendlyId("run"), payloadPacket = await this.#handlePayloadPacket(
        body.payload,
        body.options?.payloadType ?? "application/json",
        runFriendlyId,
        environment
      ), dependentAttempt = body.options?.dependentAttempt ? await this._prisma.taskRunAttempt.findUnique({
        where: { friendlyId: body.options.dependentAttempt },
        include: {
          taskRun: {
            select: {
              id: !0,
              status: !0
            }
          }
        }
      }) : void 0;
      if (dependentAttempt && (isFinalAttemptStatus(dependentAttempt.status) || isFinalRunStatus(dependentAttempt.taskRun.status)))
        throw logger.debug("Dependent attempt or run is in a terminal state", {
          dependentAttempt
        }), isFinalAttemptStatus(dependentAttempt.status) ? new ServiceValidationError(
          `Cannot trigger ${taskId} as the parent attempt has a status of ${dependentAttempt.status}`
        ) : new ServiceValidationError(
          `Cannot trigger ${taskId} as the parent run has a status of ${dependentAttempt.taskRun.status}`
        );
      let dependentBatchRun = body.options?.dependentBatch ? await this._prisma.batchTaskRun.findUnique({
        where: { friendlyId: body.options.dependentBatch },
        include: {
          dependentTaskAttempt: {
            include: {
              taskRun: {
                select: {
                  id: !0,
                  status: !0
                }
              }
            }
          }
        }
      }) : void 0;
      if (dependentBatchRun && dependentBatchRun.dependentTaskAttempt && (isFinalAttemptStatus(dependentBatchRun.dependentTaskAttempt.status) || isFinalRunStatus(dependentBatchRun.dependentTaskAttempt.taskRun.status)))
        throw logger.debug("Dependent batch run task attempt or run has been canceled", {
          dependentBatchRunId: dependentBatchRun.id,
          status: dependentBatchRun.status,
          attempt: dependentBatchRun.dependentTaskAttempt
        }), isFinalAttemptStatus(dependentBatchRun.dependentTaskAttempt.status) ? new ServiceValidationError(
          `Cannot trigger ${taskId} as the parent attempt has a status of ${dependentBatchRun.dependentTaskAttempt.status}`
        ) : new ServiceValidationError(
          `Cannot trigger ${taskId} as the parent run has a status of ${dependentBatchRun.dependentTaskAttempt.taskRun.status}`
        );
      return await eventRepository.traceEvent(
        taskId,
        {
          context: options2.traceContext,
          spanParentAsLink: options2.spanParentAsLink,
          parentAsLinkType: options2.parentAsLinkType,
          kind: "SERVER",
          environment,
          taskSlug: taskId,
          attributes: {
            properties: {
              [SemanticInternalAttributes.SHOW_ACTIONS]: !0
            },
            style: {
              icon: options2.customIcon ?? "task"
            },
            runIsTest: body.options?.test ?? !1,
            batchId: options2.batchId,
            idempotencyKey
          },
          incomplete: !0,
          immediate: !0
        },
        async (event, traceContext) => {
          let run = await autoIncrementCounter.incrementInTransaction(
            `v3-run:${environment.id}:${taskId}`,
            async (num, tx) => {
              let lockedToBackgroundWorker = body.options?.lockToVersion ? await tx.backgroundWorker.findUnique({
                where: {
                  projectId_runtimeEnvironmentId_version: {
                    projectId: environment.projectId,
                    runtimeEnvironmentId: environment.id,
                    version: body.options?.lockToVersion
                  }
                }
              }) : void 0, queueName = sanitizeQueueName(body.options?.queue?.name ?? `task/${taskId}`);
              queueName || (queueName = sanitizeQueueName(`task/${taskId}`)), event.setAttribute("queueName", queueName), span.setAttribute("queueName", queueName);
              let taskRun = await tx.taskRun.create({
                data: {
                  status: delayUntil ? "DELAYED" : "PENDING",
                  number: num,
                  friendlyId: runFriendlyId,
                  runtimeEnvironmentId: environment.id,
                  projectId: environment.projectId,
                  idempotencyKey,
                  taskIdentifier: taskId,
                  payload: payloadPacket.data ?? "",
                  payloadType: payloadPacket.dataType,
                  context: body.context,
                  traceContext,
                  traceId: event.traceId,
                  spanId: event.spanId,
                  lockedToVersionId: lockedToBackgroundWorker?.id,
                  concurrencyKey: body.options?.concurrencyKey,
                  queue: queueName,
                  isTest: body.options?.test ?? !1,
                  delayUntil,
                  queuedAt: delayUntil ? void 0 : /* @__PURE__ */ new Date(),
                  maxAttempts: body.options?.maxAttempts,
                  ttl
                }
              });
              if (payloadPacket.data && (payloadPacket.dataType === "application/json" || payloadPacket.dataType === "application/super+json" ? event.setAttribute("payload", JSON.parse(payloadPacket.data)) : event.setAttribute("payload", payloadPacket.data), event.setAttribute("payloadType", payloadPacket.dataType)), event.setAttribute("runId", taskRun.friendlyId), span.setAttribute("runId", taskRun.friendlyId), dependentAttempt ? await tx.taskRunDependency.create({
                data: {
                  taskRunId: taskRun.id,
                  dependentAttemptId: dependentAttempt.id
                }
              }) : dependentBatchRun && await tx.taskRunDependency.create({
                data: {
                  taskRunId: taskRun.id,
                  dependentBatchRunId: dependentBatchRun.id
                }
              }), body.options?.queue) {
                let concurrencyLimit = typeof body.options.queue.concurrencyLimit == "number" ? Math.max(0, body.options.queue.concurrencyLimit) : void 0, taskQueue = await tx.taskQueue.upsert({
                  where: {
                    runtimeEnvironmentId_name: {
                      runtimeEnvironmentId: environment.id,
                      name: queueName
                    }
                  },
                  update: {
                    concurrencyLimit,
                    rateLimit: body.options.queue.rateLimit
                  },
                  create: {
                    friendlyId: generateFriendlyId("queue"),
                    name: queueName,
                    concurrencyLimit,
                    runtimeEnvironmentId: environment.id,
                    projectId: environment.projectId,
                    rateLimit: body.options.queue.rateLimit,
                    type: "NAMED"
                  }
                });
                typeof taskQueue.concurrencyLimit == "number" ? await marqs?.updateQueueConcurrencyLimits(
                  environment,
                  taskQueue.name,
                  taskQueue.concurrencyLimit
                ) : await marqs?.removeQueueConcurrencyLimits(environment, taskQueue.name);
              }
              if (taskRun.delayUntil && await workerQueue.enqueue(
                "v3.enqueueDelayedRun",
                { runId: taskRun.id },
                { tx, runAt: delayUntil, jobKey: `v3.enqueueDelayedRun.${taskRun.id}` }
              ), !taskRun.delayUntil && taskRun.ttl) {
                let expireAt = parseNaturalLanguageDuration(taskRun.ttl);
                expireAt && await workerQueue.enqueue(
                  "v3.expireRun",
                  { runId: taskRun.id },
                  { tx, runAt: expireAt, jobKey: `v3.expireRun.${taskRun.id}` }
                );
              }
              return taskRun;
            },
            async (_, tx) => (await tx.taskRunNumberCounter.findUnique({
              where: {
                taskIdentifier_environmentId: {
                  taskIdentifier: taskId,
                  environmentId: environment.id
                }
              },
              select: { lastNumber: !0 }
            }))?.lastNumber,
            this._prisma
          );
          if (run)
            return run.status === "PENDING" && await marqs?.enqueueMessage(
              environment,
              run.queue,
              run.id,
              { type: "EXECUTE", taskIdentifier: taskId },
              body.options?.concurrencyKey
            ), run;
        }
      );
    });
  }
  async #handlePayloadPacket(payload, payloadType, pathPrefix, environment) {
    return await startActiveSpan("handlePayloadPacket()", async (span) => {
      let packet = this.#createPayloadPacket(payload, payloadType);
      if (!packet.data)
        return packet;
      let { needsOffloading, size } = packetRequiresOffloading(
        packet,
        env2.TASK_PAYLOAD_OFFLOAD_THRESHOLD
      );
      if (!needsOffloading)
        return packet;
      let filename = `${pathPrefix}/payload.json`;
      return await uploadToObjectStore(filename, packet.data, packet.dataType, environment), {
        data: filename,
        dataType: "application/store"
      };
    });
  }
  #createPayloadPacket(payload, payloadType) {
    return payloadType === "application/json" ? { data: JSON.stringify(payload), dataType: "application/json" } : typeof payload == "string" ? { data: payload, dataType: payloadType } : { dataType: payloadType };
  }
};
async function parseDelay(value) {
  if (value) {
    if (value instanceof Date)
      return value;
    try {
      let date = new Date(value);
      return isNaN(date.getTime()) ? parseNaturalLanguageDuration(value) : date.getTime() <= Date.now() ? void 0 : date;
    } catch {
      return parseNaturalLanguageDuration(value);
    }
  }
}
function parseNaturalLanguageDuration(duration) {
  let regexPattern = /^(\d+w)?(\d+d)?(\d+h)?(\d+m)?(\d+s)?$/, result = /* @__PURE__ */ new Date(), hasMatch = !1, elements2 = duration.match(regexPattern);
  if (elements2) {
    if (elements2[1]) {
      let weeks = Number(elements2[1].slice(0, -1));
      weeks >= 0 && (result.setDate(result.getDate() + 7 * weeks), hasMatch = !0);
    }
    if (elements2[2]) {
      let days = Number(elements2[2].slice(0, -1));
      days >= 0 && (result.setDate(result.getDate() + days), hasMatch = !0);
    }
    if (elements2[3]) {
      let hours = Number(elements2[3].slice(0, -1));
      hours >= 0 && (result.setHours(result.getHours() + hours), hasMatch = !0);
    }
    if (elements2[4]) {
      let minutes = Number(elements2[4].slice(0, -1));
      minutes >= 0 && (result.setMinutes(result.getMinutes() + minutes), hasMatch = !0);
    }
    if (elements2[5]) {
      let seconds = Number(elements2[5].slice(0, -1));
      seconds >= 0 && (result.setSeconds(result.getSeconds() + seconds), hasMatch = !0);
    }
  }
  if (hasMatch)
    return result;
}
function stringifyDuration(seconds) {
  if (seconds <= 0)
    return;
  let units = {
    w: Math.floor(seconds / 604800),
    d: Math.floor(seconds % 604800 / 86400),
    h: Math.floor(seconds % 86400 / 3600),
    m: Math.floor(seconds % 3600 / 60),
    s: Math.floor(seconds % 60)
  };
  return Object.entries(units).filter(([unit, val]) => val != 0).map(([unit, val]) => `${val}${unit}`).join("");
}

// app/v3/services/replayTaskRun.server.ts
var ReplayTaskRunService = class extends BaseService {
  async call(existingTaskRun) {
    let authenticatedEnvironment = await findEnvironmentById(
      existingTaskRun.runtimeEnvironmentId
    );
    if (!authenticatedEnvironment)
      return;
    logger.info("Replaying task run", {
      taskRunId: existingTaskRun.id,
      taskRunFriendlyId: existingTaskRun.friendlyId
    });
    let payloadPacket = await conditionallyImportPacket({
      data: existingTaskRun.payload,
      dataType: existingTaskRun.payloadType
    }), parsedPayload = payloadPacket.dataType === "application/json" ? await parsePacket(payloadPacket) : payloadPacket.data;
    logger.info("Replaying task run payload", {
      taskRunId: existingTaskRun.id,
      taskRunFriendlyId: existingTaskRun.friendlyId,
      payloadPacketType: payloadPacket.dataType
    });
    try {
      return await new TriggerTaskService().call(
        existingTaskRun.taskIdentifier,
        authenticatedEnvironment,
        {
          payload: parsedPayload,
          options: {
            queue: {
              name: existingTaskRun.queue
            },
            concurrencyKey: existingTaskRun.concurrencyKey ?? void 0,
            test: existingTaskRun.isTest,
            payloadType: payloadPacket.dataType
          }
        },
        {
          spanParentAsLink: !0,
          parentAsLinkType: "replay",
          traceContext: {
            traceparent: `00-${existingTaskRun.traceId}-${existingTaskRun.spanId}-01`
          }
        }
      );
    } catch (error) {
      if (error instanceof OutOfEntitlementError)
        return;
      logger.error("Failed to replay a run", { error });
      return;
    }
  }
};

// app/v3/services/bulk/performBulkAction.server.ts
var PerformBulkActionService = class extends BaseService {
  async performBulkActionItem(bulkActionItemId) {
    let item = await this._prisma.bulkActionItem.findUnique({
      where: { id: bulkActionItemId },
      include: {
        group: !0,
        sourceRun: !0,
        destinationRun: !0
      }
    });
    if (!item || item.status !== "PENDING")
      return;
    switch (item.group.type) {
      case "REPLAY": {
        let result = await new ReplayTaskRunService(this._prisma).call(item.sourceRun);
        await this._prisma.bulkActionItem.update({
          where: { id: item.id },
          data: {
            destinationRunId: result?.id,
            status: result ? "COMPLETED" : "FAILED",
            error: result ? void 0 : "Failed to replay task run"
          }
        });
        break;
      }
      case "CANCEL": {
        let result = await new CancelTaskRunService(this._prisma).call(item.sourceRun);
        await this._prisma.bulkActionItem.update({
          where: { id: item.id },
          data: {
            destinationRunId: item.sourceRun.id,
            status: result ? "COMPLETED" : "FAILED",
            error: result ? void 0 : "Task wasn't cancelable"
          }
        });
        break;
      }
      default:
        (0, import_assert_never4.default)(item.group.type);
    }
    (await this._prisma.bulkActionItem.findMany({
      where: { groupId: item.groupId },
      select: {
        status: !0
      }
    })).every((item2) => item2.status !== "PENDING") && await this._prisma.bulkActionItem.update({
      where: { id: item.id },
      data: {
        status: "COMPLETED"
      }
    });
  }
  async enqueueBulkActionItem(bulkActionItemId, groupId) {
    await workerQueue.enqueue(
      "v3.performBulkActionItem",
      {
        bulkActionItemId
      },
      {
        jobKey: `performBulkActionItem:${bulkActionItemId}`
      }
    );
  }
  async call(bulkActionGroupId) {
    let actionGroup = await this._prisma.bulkActionGroup.findUnique({
      include: {
        items: !0
      },
      where: { id: bulkActionGroupId }
    });
    if (actionGroup)
      for (let item of actionGroup.items)
        await this.enqueueBulkActionItem(item.id, bulkActionGroupId);
  }
  static async enqueue(bulkActionGroupId, tx, runAt) {
    return await workerQueue.enqueue(
      "v3.performBulkAction",
      {
        bulkActionGroupId
      },
      {
        tx,
        runAt,
        jobKey: `performBulkAction:${bulkActionGroupId}`
      }
    );
  }
};

// app/v3/services/enqueueDelayedRun.server.ts
var EnqueueDelayedRunService = class extends BaseService {
  async call(runId) {
    let run = await this._prisma.taskRun.findUnique({
      where: {
        id: runId
      },
      include: {
        runtimeEnvironment: {
          include: {
            organization: !0,
            project: !0
          }
        }
      }
    });
    if (!run) {
      logger.debug("Could not find delayed run to enqueue", {
        runId
      });
      return;
    }
    if (run.status !== "DELAYED") {
      logger.debug("Delayed run cannot be enqueued because it's not in DELAYED status", {
        run
      });
      return;
    }
    await $transaction(this._prisma, async (tx) => {
      if (await tx.taskRun.update({
        where: {
          id: run.id
        },
        data: {
          status: "PENDING",
          queuedAt: /* @__PURE__ */ new Date()
        }
      }), run.ttl) {
        let expireAt = parseNaturalLanguageDuration(run.ttl);
        expireAt && await workerQueue.enqueue(
          "v3.expireRun",
          { runId: run.id },
          { tx, runAt: expireAt, jobKey: `v3.expireRun.${run.id}` }
        );
      }
    }), await marqs?.enqueueMessage(
      run.runtimeEnvironment,
      run.queue,
      run.id,
      { type: "EXECUTE", taskIdentifier: run.taskIdentifier },
      run.concurrencyKey ?? void 0
    );
  }
};

// app/v3/services/expireEnqueuedRun.server.ts
var ExpireEnqueuedRunService = class extends BaseService {
  async call(runId) {
    let run = await this._prisma.taskRun.findUnique({
      where: {
        id: runId
      },
      include: {
        runtimeEnvironment: {
          include: {
            organization: !0,
            project: !0
          }
        }
      }
    });
    if (!run) {
      logger.debug("Could not find enqueued run to expire", {
        runId
      });
      return;
    }
    if (run.status !== "PENDING") {
      logger.debug("Run cannot be expired because it's not in PENDING status", {
        run
      });
      return;
    }
    logger.debug("Expiring enqueued run", {
      run
    }), await this._prisma.taskRun.update({
      where: {
        id: run.id
      },
      data: {
        status: "EXPIRED",
        expiredAt: /* @__PURE__ */ new Date()
      }
    }), await marqs?.acknowledgeMessage(run.id);
  }
};

// app/v3/services/timeoutDeployment.server.ts
var TimeoutDeploymentService = class extends BaseService {
  async call(id, fromStatus, errorMessage) {
    let deployment = await this._prisma.workerDeployment.findUnique({
      where: {
        id
      },
      include: {
        environment: !0
      }
    });
    if (!deployment) {
      logger.error(`No worker deployment with this ID: ${id}`);
      return;
    }
    deployment.status === fromStatus && (await this._prisma.workerDeployment.update({
      where: {
        id: deployment.id
      },
      data: {
        status: "TIMED_OUT",
        failedAt: /* @__PURE__ */ new Date(),
        errorData: { message: errorMessage, name: "TimeoutError" }
      }
    }), await PerformDeploymentAlertsService.enqueue(deployment.id, this._prisma));
  }
  static async enqueue(deploymentId, fromStatus, errorMessage, runAt) {
    await workerQueue.enqueue(
      "v3.timeoutDeployment",
      {
        deploymentId,
        fromStatus,
        errorMessage
      },
      {
        runAt,
        jobKey: `timeoutDeployment:${deploymentId}`,
        jobKeyMode: "replace"
      }
    );
  }
};

// app/v3/services/indexDeployment.server.ts
var IndexDeploymentService = class extends BaseService {
  async call(id) {
    let deployment = await this._prisma.workerDeployment.findUnique({
      where: {
        id
      },
      include: {
        environment: !0
      }
    });
    if (!deployment) {
      logger.error(`No worker deployment with this ID: ${id}`);
      return;
    }
    if (!deployment.imageReference) {
      logger.error(`No image reference for worker deployment: ${id}`);
      return;
    }
    if (deployment.workerId) {
      logger.debug(
        `Deployment have already been indexed for ${deployment.friendlyId}. Refreshing worker timestamp.`
      ), await this._prisma.backgroundWorker.update({
        where: {
          id: deployment.workerId
        },
        data: {
          updatedAt: /* @__PURE__ */ new Date()
        }
      });
      return;
    }
    try {
      let responses = await socketIo.providerNamespace.timeout(3e4).emitWithAck("INDEX", {
        version: "v1",
        shortCode: deployment.shortCode,
        imageTag: deployment.imageReference,
        apiKey: deployment.environment.apiKey,
        apiUrl: env2.APP_ORIGIN,
        // identifiers
        envId: deployment.environmentId,
        envType: deployment.environment.type,
        projectId: deployment.projectId,
        orgId: deployment.environment.organizationId,
        deploymentId: deployment.id
      });
      if (logger.debug("Index ACK received", { responses }), responses.length === 0)
        await TimeoutDeploymentService.enqueue(
          deployment.id,
          "DEPLOYING",
          "Could not index deployment in time",
          new Date(Date.now() + 18e4)
        );
      else {
        let indexFailed = new DeploymentIndexFailed();
        for (let response of responses)
          response.success || await indexFailed.call(deployment.friendlyId, response.error);
      }
    } catch (error) {
      logger.error("No index ACK received within timeout", { error }), await new DeploymentIndexFailed().call(
        deployment.friendlyId,
        error instanceof Error ? { message: error.message, name: error.name } : { message: "Could not index deployment in time", name: "TimeoutError" }
      );
    }
  }
  static async enqueue(id) {
    let runAt = new Date(Date.now() + 1e3);
    await workerQueue.enqueue("v3.indexDeployment", { id }, { runAt });
  }
};

// app/v3/utils/calculateNextSchedule.server.ts
var import_cron_parser = require("cron-parser");
function calculateNextScheduledTimestamp(schedule, timezone, lastScheduledTimestamp = /* @__PURE__ */ new Date()) {
  let nextStep = calculateNextStep(schedule, timezone, lastScheduledTimestamp);
  for (; nextStep.getTime() < Date.now(); )
    nextStep = calculateNextStep(schedule, timezone, nextStep);
  return nextStep;
}
function calculateNextStep(schedule, timezone, currentDate2) {
  return (0, import_cron_parser.parseExpression)(schedule, {
    currentDate: currentDate2,
    utc: timezone === null,
    tz: timezone ?? void 0
  }).next().toDate();
}
function nextScheduledTimestamps(cron, timezone, lastScheduledTimestamp, count = 1) {
  let result = [], nextScheduledTimestamp = lastScheduledTimestamp;
  for (let i = 0; i < count; i++)
    nextScheduledTimestamp = calculateNextScheduledTimestamp(
      cron,
      timezone,
      nextScheduledTimestamp
    ), result.push(nextScheduledTimestamp);
  return result;
}

// app/v3/services/registerNextTaskScheduleInstance.server.ts
var RegisterNextTaskScheduleInstanceService = class extends BaseService {
  async call(instanceId) {
    let instance = await this._prisma.taskScheduleInstance.findUnique({
      where: {
        id: instanceId
      },
      include: {
        taskSchedule: !0,
        environment: !0
      }
    });
    if (!instance)
      return;
    let nextScheduledTimestamp = calculateNextScheduledTimestamp(
      instance.taskSchedule.generatorExpression,
      instance.taskSchedule.timezone,
      instance.lastScheduledTimestamp ?? /* @__PURE__ */ new Date()
    );
    await this._prisma.taskScheduleInstance.update({
      where: {
        id: instanceId
      },
      data: {
        nextScheduledTimestamp
      }
    }), await TriggerScheduledTaskService.enqueue(instanceId, nextScheduledTimestamp);
  }
};

// app/v3/services/triggerScheduledTask.server.ts
var TriggerScheduledTaskService = class extends BaseService {
  async call(instanceId) {
    let instance = await this._prisma.taskScheduleInstance.findUnique({
      where: {
        id: instanceId
      },
      include: {
        taskSchedule: !0,
        environment: {
          include: {
            project: !0,
            organization: !0,
            currentSession: !0
          }
        }
      }
    });
    if (!instance)
      return;
    let shouldTrigger = !0;
    if (instance.active || (shouldTrigger = !1), instance.taskSchedule.active || (shouldTrigger = !1), instance.nextScheduledTimestamp || (shouldTrigger = !1), instance.environment.type === "DEVELOPMENT" && (!instance.environment.currentSession || instance.environment.currentSession.disconnectedAt) && (shouldTrigger = !1), instance.environment.type !== "DEVELOPMENT") {
      let currentWorkerDeployment = await findCurrentWorkerDeployment(instance.environment.id);
      currentWorkerDeployment ? (!currentWorkerDeployment.worker || !currentWorkerDeployment.worker.tasks.some(
        (t) => t.slug === instance.taskSchedule.taskIdentifier
      )) && (logger.debug(
        "Current worker deployment does not contain the scheduled task identifier, skipping task trigger",
        {
          instanceId,
          scheduleId: instance.taskSchedule.friendlyId,
          environmentId: instance.environment.id,
          workerDeploymentId: currentWorkerDeployment.id,
          workerId: currentWorkerDeployment.worker?.id,
          taskIdentifier: instance.taskSchedule.taskIdentifier
        }
      ), shouldTrigger = !1) : (logger.debug("No current worker deployment found, skipping task trigger", {
        instanceId,
        scheduleId: instance.taskSchedule.friendlyId,
        environmentId: instance.environment.id
      }), shouldTrigger = !1);
    }
    let registerNextService = new RegisterNextTaskScheduleInstanceService();
    if (shouldTrigger) {
      let triggerTask = new TriggerTaskService(), payload = {
        scheduleId: instance.taskSchedule.friendlyId,
        timestamp: instance.nextScheduledTimestamp,
        lastTimestamp: instance.lastScheduledTimestamp ?? void 0,
        externalId: instance.taskSchedule.externalId ?? void 0,
        timezone: instance.taskSchedule.timezone,
        upcoming: nextScheduledTimestamps(
          instance.taskSchedule.generatorExpression,
          instance.taskSchedule.timezone,
          instance.nextScheduledTimestamp,
          10
        )
      }, payloadPacket = await stringifyIO(payload);
      logger.debug("Triggering scheduled task", {
        instance,
        payloadPacket
      });
      let run = await triggerTask.call(
        instance.taskSchedule.taskIdentifier,
        instance.environment,
        { payload: payloadPacket.data, options: { payloadType: payloadPacket.dataType } },
        { customIcon: "scheduled" }
      );
      run ? await this._prisma.taskRun.update({
        where: {
          id: run.id
        },
        data: {
          scheduleId: instance.taskSchedule.id,
          scheduleInstanceId: instance.id
        }
      }) : logger.error("Failed to trigger task", {
        instanceId,
        scheduleId: instance.taskSchedule.friendlyId,
        payloadPacket
      });
    }
    await this._prisma.taskScheduleInstance.update({
      where: {
        id: instanceId
      },
      data: {
        lastScheduledTimestamp: instance.nextScheduledTimestamp
      }
    }), await registerNextService.call(instanceId);
  }
  static async enqueue(instanceId, runAt, tx) {
    return await workerQueue.enqueue(
      "v3.triggerScheduledTask",
      { instanceId },
      { tx, jobKey: `scheduled-task-instance:${instanceId}`, runAt }
    );
  }
};

// app/services/db/graphileMigrationHelper.server.ts
var import_graphile_worker2 = require("graphile-worker");

// app/services/db/pgNotify.server.ts
var PgNotifyService = class {
  #prismaClient;
  constructor(prismaClient = prisma) {
    this.#prismaClient = prismaClient;
  }
  async call(channelName, payload) {
    this.#logDebug("Sending notification", { channelName, notifyPayload: payload }), await this.#prismaClient.$executeRaw`
      SELECT pg_notify(${channelName}, ${JSON.stringify(payload)})
    `;
  }
  #logDebug(message, args) {
    logger.debug(`[pgNotify] ${message}`, args);
  }
};

// app/services/db/graphileMigrationHelper.server.ts
var import_zod54 = require("zod"), GraphileMigrationHelperService = class {
  #prismaClient;
  constructor(prismaClient = prisma) {
    this.#prismaClient = prismaClient;
  }
  async call() {
    this.#logDebug("GraphileMigrationHelperService.call"), await this.#detectAndPrepareForMigrations(), await (0, import_graphile_worker2.runMigrations)({
      connectionString: env2.DATABASE_URL,
      schema: env2.WORKER_SCHEMA
    });
  }
  #logDebug(message, args) {
    logger.debug(`[migrationHelper] ${message}`, args);
  }
  async #getLatestMigration() {
    let migrationQueryResult = await this.#prismaClient.$queryRawUnsafe(`
      SELECT id FROM ${env2.WORKER_SCHEMA}.migrations
      ORDER BY id DESC LIMIT 1
    `), migrationResults = import_zod54.z.array(import_zod54.z.object({ id: import_zod54.z.number() })).parse(migrationQueryResult);
    return migrationResults.length ? migrationResults[0].id : -1;
  }
  async #graphileSchemaExists() {
    return await this.#prismaClient.$executeRaw`
      SELECT schema_name FROM information_schema.schemata
      WHERE schema_name = ${env2.WORKER_SCHEMA}
    ` === 1;
  }
  /** Helper for graphile-worker v0.14.0 migration. No-op if already migrated. */
  async #detectAndPrepareForMigrations() {
    if (!await this.#graphileSchemaExists())
      return;
    let latestMigration = await this.#getLatestMigration();
    if (latestMigration < 0 || latestMigration > 10)
      return;
    let migrationDelayInMs = env2.GRACEFUL_SHUTDOWN_TIMEOUT + 15e3;
    this.#logDebug("Delaying worker startup due to pending migration", {
      latestMigration,
      migrationDelayInMs
    }), console.log("\u26A0\uFE0F  detected pending graphile migration"), console.log("\u26A0\uFE0F  notifying running workers"), await new PgNotifyService().call("trigger:graphile:migrate", { latestMigration }), console.log(`\u26A0\uFE0F  delaying worker startup by ${migrationDelayInMs}ms`), await new Promise((resolve) => setTimeout(resolve, migrationDelayInMs));
  }
};

// app/services/dispatchers/expireDispatcher.server.ts
var ExpireDispatcherService = class {
  #prismaClient;
  constructor(prismaClient = prisma) {
    this.#prismaClient = prismaClient;
  }
  async call(id) {
    await this.#prismaClient.eventDispatcher.delete({
      where: {
        id
      }
    });
  }
  static async dequeue(id, tx) {
    await workerQueue.dequeue(`expire:${id}`, { tx });
  }
  static async enqueue(id, timeoutInSeconds, tx) {
    await workerQueue.enqueue(
      "expireDispatcher",
      {
        id
      },
      {
        tx,
        runAt: new Date(Date.now() + 1e3 * timeoutInSeconds),
        jobKey: `expire:${id}`
      }
    );
  }
};

// app/models/eventDispatcher.server.ts
var import_zod55 = require("zod"), JobVersionDispatchableSchema = import_zod55.z.object({
  type: import_zod55.z.literal("JOB_VERSION"),
  id: import_zod55.z.string()
}), DynamicTriggerDispatchableSchema = import_zod55.z.object({
  type: import_zod55.z.literal("DYNAMIC_TRIGGER"),
  id: import_zod55.z.string()
}), EphemeralDispatchableSchema = import_zod55.z.object({
  type: import_zod55.z.literal("EPHEMERAL"),
  url: import_zod55.z.string()
}), DispatchableSchema = import_zod55.z.discriminatedUnion("type", [
  JobVersionDispatchableSchema,
  DynamicTriggerDispatchableSchema,
  EphemeralDispatchableSchema
]);

// app/services/dispatchers/invokeEphemeralEventDispatcher.server.ts
var InvokeEphemeralDispatcherService = class {
  #prismaClient;
  constructor(prismaClient = prisma) {
    this.#prismaClient = prismaClient;
  }
  async call(id, eventRecordId) {
    let eventDispatcher = await this.#prismaClient.eventDispatcher.findUnique({
      where: {
        id
      }
    });
    if (!eventDispatcher || !eventDispatcher.enabled)
      return;
    let eventRecord = await this.#prismaClient.eventRecord.findUnique({
      where: {
        id: eventRecordId
      },
      include: {
        externalAccount: !0
      }
    });
    if (!eventRecord || eventRecord.cancelledAt)
      return;
    let dispatchable = EphemeralDispatchableSchema.safeParse(eventDispatcher.dispatchable);
    if (!dispatchable.success)
      return;
    let url = dispatchable.data.url, body = {
      id: eventRecord.eventId,
      source: eventRecord.source,
      name: eventRecord.name,
      payload: eventRecord.payload,
      context: eventRecord.context,
      timestamp: eventRecord.timestamp,
      accountId: eventRecord.externalAccount ? eventRecord.externalAccount.identifier : void 0
    }, response = await fetch(url, {
      method: "POST",
      headers: {
        "Content-Type": "application/json; charset=utf-8"
      },
      body: JSON.stringify(body)
    });
    if (!response.ok)
      throw new Error(
        `Failed to invoke ephemeral dispatcher: ${response.statusText} [${response.status}]`
      );
    await ExpireDispatcherService.enqueue(id, 0);
  }
  static async dequeue(id, tx) {
    await taskOperationWorker.dequeue(`invoke:ephemeral:${id}`, { tx });
  }
  static async enqueue(id, eventRecordId, tx) {
    await taskOperationWorker.enqueue(
      "invokeEphemeralDispatcher",
      {
        id,
        eventRecordId
      },
      {
        tx,
        jobKey: `invoke:ephemeral:${id}`
      }
    );
  }
};

// app/services/schedules/nextScheduledEvent.server.ts
var import_cron_parser2 = require("cron-parser");

// app/services/rateLimiter.server.ts
var import_ratelimit = require("@upstash/ratelimit"), import_ioredis7 = __toESM(require("ioredis"));
var RateLimiter = class {
  constructor(options2) {
    this.options = options2;
    let { redis, keyPrefix, limiter } = options2, prefix = `ratelimit:${keyPrefix}`;
    this.#ratelimit = new import_ratelimit.Ratelimit({
      redis: createRedisRateLimitClient(
        redis ?? {
          port: env2.REDIS_PORT,
          host: env2.REDIS_HOST,
          username: env2.REDIS_USERNAME,
          password: env2.REDIS_PASSWORD,
          enableAutoPipelining: !0,
          ...env2.REDIS_TLS_DISABLED === "true" ? {} : { tls: {} }
        }
      ),
      limiter,
      ephemeralCache: /* @__PURE__ */ new Map(),
      analytics: !1,
      prefix
    }), logger.info(`RateLimiter (${keyPrefix}): initialized`, {
      keyPrefix,
      redisKeyspace: prefix
    });
  }
  #ratelimit;
  async limit(identifier, rate = 1) {
    let result = this.#ratelimit.limit(identifier, { rate }), { success, limit, reset, remaining } = await result;
    return success && this.options.logSuccess && logger.info(`RateLimiter (${this.options.keyPrefix}): under rate limit`, {
      limit,
      reset,
      remaining,
      identifier
    }), !success && this.options.logFailure !== !1 && logger.info(`RateLimiter (${this.options.keyPrefix}): rate limit exceeded`, {
      limit,
      reset,
      remaining,
      identifier
    }), result;
  }
};
function createRedisRateLimitClient(redisOptions) {
  let redis = new import_ioredis7.default(redisOptions);
  return {
    sadd: async (key, ...members) => redis.sadd(key, members),
    hset: (key, obj) => redis.hset(key, obj),
    eval: (...args) => {
      let script2 = args[0], keys = args[1], argsArray = args[2];
      return redis.eval(
        script2,
        keys.length,
        ...keys,
        ...argsArray
      );
    }
  };
}

// app/services/events/ingestSendEvent.server.ts
var import_ratelimit2 = require("@upstash/ratelimit");
var EVENT_UPDATE_THRESHOLD_WINDOW_IN_MSECS = 5 * 1e3, rateLimiter = singleton("eventRateLimiter", getSharedRateLimiter);
function getSharedRateLimiter() {
  if (env2.INGEST_EVENT_RATE_LIMIT_MAX)
    return new RateLimiter({
      keyPrefix: "ingestsendevent",
      limiter: import_ratelimit2.Ratelimit.slidingWindow(
        env2.INGEST_EVENT_RATE_LIMIT_MAX,
        env2.INGEST_EVENT_RATE_LIMIT_WINDOW
      )
    });
}
var IngestSendEvent = class {
  constructor(prismaClient = prisma, deliverEvents = !0) {
    this.deliverEvents = deliverEvents;
    this.#prismaClient = prismaClient;
  }
  #prismaClient;
  #calculateDeliverAt(options2) {
    if (options2?.deliverAt)
      return options2?.deliverAt;
    if (options2?.deliverAfter)
      return new Date(Date.now() + options2.deliverAfter * 1e3);
  }
  async call(environment, event, options2, sourceContext, eventSource) {
    try {
      let deliverAt = this.#calculateDeliverAt(options2);
      if (!environment.organization.runsEnabled) {
        logger.debug("IngestSendEvent: Runs are disabled for this organization", environment);
        return;
      }
      let createdEvent = await $transaction(this.#prismaClient, async (tx) => {
        let externalAccount = options2?.accountId ? await tx.externalAccount.upsert({
          where: {
            environmentId_identifier: {
              environmentId: environment.id,
              identifier: options2.accountId
            }
          },
          create: {
            environmentId: environment.id,
            organizationId: environment.organizationId,
            identifier: options2.accountId
          },
          update: {}
        }) : void 0, existingEventLog = await tx.eventRecord.findUnique({
          where: {
            eventId_environmentId: {
              eventId: event.id,
              environmentId: environment.id
            }
          }
        });
        return existingEventLog?.deliveredAt ? (logger.debug("Event already delivered", {
          eventRecordId: existingEventLog.id,
          deliveredAt: existingEventLog.deliveredAt
        }), existingEventLog) : await (existingEventLog ? this.updateEvent({ tx, existingEventLog, reqEvent: event, deliverAt }) : this.createEvent({
          tx,
          event,
          environment,
          deliverAt,
          sourceContext,
          externalAccount,
          eventSource
        }));
      });
      if (!createdEvent)
        return;
      if (createdEvent.deliveredAt)
        return logger.debug("Event already delivered", {
          eventRecordId: createdEvent.id,
          deliveredAt: createdEvent.deliveredAt
        }), createdEvent;
      let result = await rateLimiter?.limit(environment.organizationId);
      if (result && !result.success) {
        logger.info("IngestSendEvent: Rate limit exceeded", {
          eventRecordId: createdEvent.id,
          organizationId: environment.organizationId,
          reset: result.reset,
          limit: result.limit
        });
        return;
      }
      return await this.enqueueWorkerEvent(this.#prismaClient, createdEvent), createdEvent;
    } catch (error) {
      let prismaError = PrismaErrorSchema.safeParse(error);
      throw prismaError.success || logger.debug("Error parsing prisma error", {
        error,
        parseError: prismaError.error.format()
      }), error;
    }
  }
  async createEvent({
    tx,
    event,
    environment,
    deliverAt,
    sourceContext,
    externalAccount,
    eventSource
  }) {
    return await tx.eventRecord.create({
      data: {
        organizationId: environment.organizationId,
        projectId: environment.projectId,
        environmentId: environment.id,
        eventId: event.id,
        name: event.name,
        timestamp: event.timestamp ?? /* @__PURE__ */ new Date(),
        payload: event.payload ?? {},
        payloadType: event.payloadType,
        context: event.context ?? {},
        source: event.source ?? "trigger.dev",
        sourceContext,
        deliverAt,
        externalAccountId: externalAccount ? externalAccount.id : void 0,
        httpEndpointId: eventSource?.httpEndpointId,
        httpEndpointEnvironmentId: eventSource?.httpEndpointEnvironmentId
      }
    });
  }
  async updateEvent({ tx, existingEventLog, reqEvent, deliverAt }) {
    return this.shouldUpdateEvent(existingEventLog) ? await tx.eventRecord.update({
      where: {
        eventId_environmentId: {
          eventId: existingEventLog.eventId,
          environmentId: existingEventLog.environmentId
        }
      },
      data: {
        payload: reqEvent.payload ?? existingEventLog.payload,
        payloadType: reqEvent.payloadType,
        context: reqEvent.context ?? existingEventLog.context,
        deliverAt: deliverAt ?? /* @__PURE__ */ new Date()
      }
    }) : (logger.debug(`not updating event for event id: ${existingEventLog.eventId}`), existingEventLog);
  }
  shouldUpdateEvent(eventLog) {
    let thresholdTime = new Date(Date.now() + EVENT_UPDATE_THRESHOLD_WINDOW_IN_MSECS);
    return eventLog.deliverAt >= thresholdTime;
  }
  async enqueueWorkerEvent(tx, eventLog) {
    this.deliverEvents && await workerQueue.enqueue(
      "deliverEvent",
      {
        id: eventLog.id
      },
      { runAt: eventLog.deliverAt, tx, jobKey: `event:${eventLog.id}` }
    );
  }
};

// app/services/runs/createRun.server.ts
var CreateRunService = class {
  #prismaClient;
  constructor(prismaClient = prisma) {
    this.#prismaClient = prismaClient;
  }
  async call({
    environment,
    eventId,
    job,
    version: version3
  }, options2 = {}) {
    if (!environment.organization.runsEnabled) {
      logger.debug("Runs are disabled for this organization", environment);
      return;
    }
    let endpoint = await this.#prismaClient.endpoint.findUniqueOrThrow({
      where: {
        id: version3.endpointId
      }
    });
    if (!endpoint.url) {
      logger.debug("Endpoint has no url", endpoint);
      return;
    }
    let eventRecord = await this.#prismaClient.eventRecord.findUniqueOrThrow({
      where: {
        id: eventId
      }
    });
    return await $transaction(this.#prismaClient, async (tx) => {
      let run = await tx.jobRun.create({
        data: {
          preprocess: version3.preprocessRuns,
          jobId: job.id,
          versionId: version3.id,
          eventId,
          environmentId: environment.id,
          organizationId: environment.organizationId,
          projectId: environment.projectId,
          endpointId: endpoint.id,
          externalAccountId: eventRecord.externalAccountId ? eventRecord.externalAccountId : void 0,
          isTest: eventRecord.isTest,
          internal: job.internal
        }
      });
      return options2.callbackUrl && await tx.jobRunSubscription.createMany({
        data: [
          {
            runId: run.id,
            recipientMethod: "WEBHOOK",
            recipient: options2.callbackUrl,
            event: "SUCCESS"
          },
          {
            runId: run.id,
            recipientMethod: "WEBHOOK",
            recipient: options2.callbackUrl,
            event: "FAILURE"
          }
        ]
      }), await workerQueue.enqueue(
        "startRun",
        {
          id: run.id
        },
        { tx }
      ), run;
    });
  }
};

// app/services/events/invokeDispatcher.server.ts
var InvokeDispatcherService = class {
  #prismaClient;
  constructor(prismaClient = prisma) {
    this.#prismaClient = prismaClient;
  }
  async call(id, eventRecordId) {
    let eventDispatcher = await this.#prismaClient.eventDispatcher.findUniqueOrThrow({
      where: {
        id
      },
      include: {
        environment: {
          include: {
            project: !0,
            organization: !0
          }
        }
      }
    });
    if (!eventDispatcher.enabled) {
      logger.debug("Event dispatcher is disabled", {
        eventDispatcher
      });
      return;
    }
    let eventRecord = await this.#prismaClient.eventRecord.findUniqueOrThrow({
      where: {
        id: eventRecordId
      }
    });
    logger.debug("Invoking event dispatcher", {
      eventDispatcher,
      eventRecord: eventRecord.id
    });
    let dispatchable = DispatchableSchema.safeParse(eventDispatcher.dispatchable);
    if (!dispatchable.success) {
      logger.debug("Invalid dispatchable", {
        eventDispatcher,
        errors: dispatchable.error.flatten()
      });
      return;
    }
    switch (dispatchable.data.type) {
      case "JOB_VERSION": {
        let jobVersion = await this.#prismaClient.jobVersion.findUniqueOrThrow({
          where: {
            id: dispatchable.data.id
          },
          include: {
            job: !0
          }
        });
        await new CreateRunService(this.#prismaClient).call({
          eventId: eventRecord.id,
          job: jobVersion.job,
          version: jobVersion,
          environment: eventDispatcher.environment
        });
        break;
      }
      case "DYNAMIC_TRIGGER": {
        let dynamicTrigger = await this.#prismaClient.dynamicTrigger.findUniqueOrThrow({
          where: {
            id: dispatchable.data.id
          },
          include: {
            endpoint: {
              include: {
                environment: {
                  include: {
                    project: !0,
                    organization: !0
                  }
                }
              }
            },
            jobs: !0
          }
        });
        for (let job of dynamicTrigger.jobs) {
          let latestJobVersion = await this.#prismaClient.jobVersion.findFirst({
            where: {
              jobId: job.id,
              aliases: {
                some: {
                  name: "latest"
                }
              },
              environmentId: dynamicTrigger.endpoint.environmentId
            },
            orderBy: { createdAt: "desc" },
            take: 1
          });
          if (!latestJobVersion)
            continue;
          await new CreateRunService(this.#prismaClient).call({
            eventId: eventRecord.id,
            job,
            version: latestJobVersion,
            environment: eventDispatcher.environment
          });
        }
        break;
      }
      case "EPHEMERAL": {
        await InvokeEphemeralDispatcherService.enqueue(eventDispatcher.id, eventRecord.id);
        break;
      }
    }
  }
};

// app/services/schedules/deliverScheduledEvent.server.ts
var DEFERRED_ENQUEUE_THRESHOLD_IN_SECONDS = 60 * 60 * 2 - 1, DeliverScheduledEventService = class {
  #prismaClient;
  constructor(prismaClient = prisma) {
    this.#prismaClient = prismaClient;
  }
  // This runs every 10 minutes
  static async scheduleImminentDeferredEvents() {
    let deferredEvents = await prisma.deferredScheduledEventService.findMany({
      where: {
        runAt: {
          lte: new Date(Date.now() + DEFERRED_ENQUEUE_THRESHOLD_IN_SECONDS / 2 * 1e3)
        }
      }
    });
    for (let deferredEvent of deferredEvents) {
      logger.debug("Enqueuing deferred scheduled event", {
        scheduleSourceId: deferredEvent.scheduleSourceId,
        runAt: deferredEvent.runAt
      });
      try {
        await DeliverScheduledEventService.enqueue(
          deferredEvent.scheduleSourceId,
          deferredEvent.runAt,
          {
            ts: deferredEvent.runAt,
            lastTimestamp: deferredEvent.lastTimestamp ?? void 0
          }
        );
      } catch (error) {
        logger.error("Error enqueuing deferred scheduled event", {
          scheduleSourceId: deferredEvent.scheduleSourceId,
          runAt: deferredEvent.runAt,
          error
        });
      }
    }
  }
  static async dequeue(id, tx = prisma) {
    await tx.deferredScheduledEventService.deleteMany({
      where: {
        scheduleSourceId: id
      }
    }), await workerQueue.dequeue(`scheduled:${id}`), await tx.scheduleSource.update({
      where: {
        id
      },
      data: {
        workerJobId: null
      }
    });
  }
  static async enqueue(id, runAt, payload, tx = prisma) {
    if (runAt.getTime() - Date.now() > DEFERRED_ENQUEUE_THRESHOLD_IN_SECONDS * 1e3)
      logger.debug("Deferring enqueueing events.deliverScheduled", {
        id,
        runAt,
        payload
      }), await tx.deferredScheduledEventService.upsert({
        where: {
          scheduleSourceId: id
        },
        create: {
          scheduleSourceId: id,
          runAt,
          lastTimestamp: payload.lastTimestamp
        },
        update: {
          runAt,
          lastTimestamp: payload.lastTimestamp
        }
      }), await tx.scheduleSource.update({
        where: {
          id
        },
        data: {
          workerJobId: null,
          nextEventTimestamp: runAt
        }
      }), await workerQueue.dequeue(`scheduled:${id}`);
    else {
      await tx.deferredScheduledEventService.deleteMany({
        where: {
          scheduleSourceId: id
        }
      });
      let workerJob = await workerQueue.enqueue(
        "events.deliverScheduled",
        {
          id,
          payload
        },
        {
          runAt,
          tx,
          jobKey: `scheduled:${id}`
        }
      );
      await tx.scheduleSource.update({
        where: {
          id
        },
        data: {
          workerJobId: workerJob.id,
          nextEventTimestamp: runAt
        }
      });
    }
  }
  async call(id, payload) {
    return await $transaction(
      this.#prismaClient,
      async (tx) => {
        let scheduleSource = await tx.scheduleSource.findUniqueOrThrow({
          where: {
            id
          },
          include: {
            dispatcher: !0,
            environment: {
              include: {
                organization: !0,
                project: !0
              }
            },
            externalAccount: !0
          }
        });
        if (!scheduleSource.active)
          return;
        let eventId = `${scheduleSource.id}:${payload.ts.getTime()}`, eventRecord = await new IngestSendEvent(tx, !1).call(
          scheduleSource.environment,
          {
            id: eventId,
            name: SCHEDULED_EVENT,
            payload
          },
          { accountId: scheduleSource.externalAccount?.identifier },
          {
            id: scheduleSource.key,
            metadata: scheduleSource.metadata
          }
        );
        if (!eventRecord)
          throw new Error(
            `Unable to create an event record when delivering scheduled event for scheduleSource.id = ${scheduleSource.id}`
          );
        await new InvokeDispatcherService(tx).call(scheduleSource.dispatcher.id, eventRecord.id), logger.debug("updating lastEventTimestamp", {
          id,
          lastEventTimestamp: payload.ts
        }), await tx.scheduleSource.update({
          where: {
            id
          },
          data: {
            lastEventTimestamp: payload.ts
          }
        }), await new NextScheduledEventService(tx).call(scheduleSource.id);
      },
      { timeout: 1e4 }
    );
  }
};

// app/services/schedules/nextScheduledEvent.server.ts
var NextScheduledEventService = class {
  #prismaClient;
  constructor(prismaClient = prisma) {
    this.#prismaClient = prismaClient;
  }
  async call(id) {
    return await $transaction(this.#prismaClient, async (tx) => {
      let scheduleSource = await this.#prismaClient.scheduleSource.findUniqueOrThrow({
        where: {
          id
        }
      });
      if (!scheduleSource.active)
        return;
      let schedule = ScheduleMetadataSchema.safeParse(scheduleSource.schedule);
      if (!schedule.success)
        return;
      let scheduleTime = calculateNextScheduledEvent(
        schedule.data,
        scheduleSource.lastEventTimestamp ?? scheduleSource.createdAt
      );
      return logger.debug("enqueuing scheduled event", {
        scheduleSource,
        scheduleTime,
        lastTimestamp: scheduleSource.lastEventTimestamp
      }), await DeliverScheduledEventService.enqueue(
        scheduleSource.id,
        scheduleTime,
        {
          ts: scheduleTime,
          lastTimestamp: scheduleSource.lastEventTimestamp ?? void 0
        },
        tx
      ), scheduleSource;
    });
  }
};
function calculateNextScheduledEvent(schedule, previousTimestamp) {
  let nextStep = calculateNextStep2(schedule, previousTimestamp);
  for (; nextStep.getTime() < (/* @__PURE__ */ new Date()).getTime(); )
    nextStep = calculateNextStep2(schedule, nextStep);
  return nextStep;
}
function calculateNextStep2(schedule, previousTimestamp) {
  switch (schedule.type) {
    case "interval":
      return calculateNextIntervalOfEvent(schedule, previousTimestamp);
    case "cron":
      return calculateNextCronEvent(schedule, previousTimestamp);
  }
}
function calculateNextIntervalOfEvent(interval, previousTimestamp) {
  let now = previousTimestamp ? previousTimestamp.getTime() : (/* @__PURE__ */ new Date()).getTime();
  return new Date(now + calculateDurationInMs(interval));
}
function calculateDurationInMs(schedule) {
  return schedule.options.seconds * 1e3;
}
function calculateNextCronEvent(schedule, previousTimestamp) {
  return (0, import_cron_parser2.parseExpression)(schedule.options.cron, {
    currentDate: previousTimestamp || /* @__PURE__ */ new Date()
  }).next().toDate();
}

// app/services/schedules/registerScheduleSource.server.ts
var RegisterScheduleSourceService = class {
  #prismaClient;
  constructor(prismaClient = prisma) {
    this.#prismaClient = prismaClient;
  }
  async call({
    key,
    dispatcher,
    schedule,
    accountId,
    dynamicTrigger,
    organizationId
  }) {
    let validatedSchedule = validateSchedule(schedule);
    return await $transaction(this.#prismaClient, async (tx) => {
      let externalAccount = accountId ? await tx.externalAccount.upsert({
        where: {
          environmentId_identifier: {
            environmentId: dispatcher.environmentId,
            identifier: accountId
          }
        },
        create: {
          environmentId: dispatcher.environmentId,
          organizationId,
          identifier: accountId
        },
        update: {}
      }) : void 0, environment = await tx.runtimeEnvironment.findUniqueOrThrow({
        where: {
          id: dispatcher.environmentId
        }
      }), scheduleSource = await this.#prismaClient.scheduleSource.upsert({
        where: {
          key_environmentId: {
            key,
            environmentId: dispatcher.environmentId
          }
        },
        create: {
          key,
          environmentId: dispatcher.environmentId,
          dispatcherId: dispatcher.id,
          schedule: {
            type: validatedSchedule.type,
            options: validatedSchedule.options
          },
          active: environment.autoEnableInternalSources,
          metadata: schedule.metadata,
          externalAccountId: externalAccount ? externalAccount.id : void 0,
          dynamicTriggerId: dynamicTrigger ? dynamicTrigger.id : void 0
        },
        update: {
          schedule: {
            type: validatedSchedule.type,
            options: validatedSchedule.options
          },
          metadata: schedule.metadata ?? {},
          externalAccountId: externalAccount ? externalAccount.id : void 0,
          active: environment.autoEnableInternalSources
        }
      });
      return scheduleSource.active && await new NextScheduledEventService(tx).call(scheduleSource.id), scheduleSource;
    });
  }
};
function validateSchedule(schedule) {
  switch (schedule.type) {
    case "cron":
      return schedule;
    case "interval":
      return validateInterval(schedule);
  }
}
function validateInterval(schedule) {
  return schedule.options.seconds < 20 ? {
    type: "interval",
    options: {
      seconds: 20
    }
  } : schedule;
}

// app/services/jobs/registerJob.server.ts
var RegisterJobService = class {
  #prismaClient;
  constructor(prismaClient = prisma) {
    this.#prismaClient = prismaClient;
  }
  async call(endpointIdOrEndpoint, metadata) {
    let endpoint = typeof endpointIdOrEndpoint == "string" ? await findEndpoint(endpointIdOrEndpoint) : endpointIdOrEndpoint;
    return this.#upsertJob(endpoint, endpoint.environment, metadata);
  }
  async #upsertJob(endpoint, environment, metadata) {
    let existingJob = await this.#prismaClient.job.findUnique({
      where: {
        projectId_slug: {
          projectId: environment.projectId,
          slug: metadata.id
        }
      }
    });
    if (existingJob && existingJob.deletedAt && !metadata.enabled)
      return;
    let integrations = /* @__PURE__ */ new Map();
    for (let [, jobIntegration] of Object.entries(metadata.integrations)) {
      let integration = await this.#prismaClient.integration.findUnique({
        where: {
          organizationId_slug: {
            organizationId: environment.organizationId,
            slug: jobIntegration.id
          }
        }
      });
      integration || (integration = await this.#upsertIntegrationForJobIntegration(environment, jobIntegration)), integrations.set(jobIntegration.id, integration);
    }
    let job = await this.#prismaClient.job.upsert({
      where: {
        projectId_slug: {
          projectId: environment.projectId,
          slug: metadata.id
        }
      },
      create: {
        organization: {
          connect: {
            id: environment.organizationId
          }
        },
        project: {
          connect: {
            id: environment.projectId
          }
        },
        slug: metadata.id,
        title: metadata.name,
        internal: metadata.internal
      },
      update: {
        title: metadata.name,
        deletedAt: metadata.enabled ? null : void 0
      },
      include: {
        integrations: {
          include: {
            integration: !0
          }
        }
      }
    }), { examples: examples3, ...eventSpecification } = metadata.event, concurrencyLimitGroup = typeof metadata.concurrencyLimit == "object" ? await this.#prismaClient.concurrencyLimitGroup.upsert({
      where: {
        environmentId_name: {
          environmentId: environment.id,
          name: metadata.concurrencyLimit.id
        }
      },
      create: {
        environmentId: environment.id,
        name: metadata.concurrencyLimit.id,
        concurrencyLimit: metadata.concurrencyLimit.limit
      },
      update: {
        concurrencyLimit: metadata.concurrencyLimit.limit
      }
    }) : null, jobVersion = await this.#prismaClient.jobVersion.upsert({
      where: {
        jobId_version_environmentId: {
          jobId: job.id,
          version: metadata.version,
          environmentId: environment.id
        }
      },
      create: {
        jobId: job.id,
        endpointId: endpoint.id,
        environmentId: environment.id,
        organizationId: environment.organizationId,
        projectId: environment.projectId,
        version: metadata.version,
        eventSpecification,
        preprocessRuns: metadata.preprocessRuns,
        startPosition: "LATEST",
        status: "ACTIVE",
        concurrencyLimitGroupId: concurrencyLimitGroup?.id ?? null,
        concurrencyLimit: typeof metadata.concurrencyLimit == "number" ? metadata.concurrencyLimit : null
      },
      update: {
        status: "ACTIVE",
        startPosition: "LATEST",
        eventSpecification,
        preprocessRuns: metadata.preprocessRuns,
        endpointId: endpoint.id,
        concurrencyLimitGroupId: concurrencyLimitGroup?.id ?? null,
        concurrencyLimit: typeof metadata.concurrencyLimit == "number" ? metadata.concurrencyLimit : null
      },
      include: {
        integrations: {
          include: {
            integration: !0
          }
        },
        concurrencyLimitGroup: !0
      }
    });
    try {
      jobVersion.concurrencyLimitGroup && (await putConcurrencyLimitGroup(jobVersion.concurrencyLimitGroup, environment), await executionRateLimiter?.putConcurrencyLimitGroup(
        jobVersion.concurrencyLimitGroup,
        environment
      )), await putJobConcurrencyLimit(job, jobVersion, environment), await executionRateLimiter?.putJobVersionConcurrencyLimit(jobVersion, environment);
    } catch (error) {
      logger.error("Error setting concurrency limit", {
        error,
        jobVersionId: jobVersion.id,
        environmentId: environment.id
      });
    }
    let upsertedExamples = /* @__PURE__ */ new Set();
    if (examples3)
      for (let example of examples3) {
        let e = await this.#prismaClient.eventExample.upsert({
          where: {
            slug_jobVersionId: {
              slug: example.id,
              jobVersionId: jobVersion.id
            }
          },
          create: {
            slug: example.id,
            name: example.name,
            icon: example.icon,
            jobVersionId: jobVersion.id,
            payload: example.payload
          },
          update: {
            name: example.name,
            icon: example.icon ?? null,
            payload: example.payload
          }
        });
        upsertedExamples.add(e.id);
      }
    await this.#prismaClient.eventExample.deleteMany({
      where: {
        jobVersionId: jobVersion.id,
        id: {
          notIn: Array.from(upsertedExamples)
        }
      }
    });
    let jobIntegrations = /* @__PURE__ */ new Set();
    for (let [key, integration] of Object.entries(metadata.integrations)) {
      let jobIntegration = await this.#upsertJobIntegration(
        job,
        jobVersion,
        integration,
        integrations,
        key
      );
      jobIntegrations.add(jobIntegration.id);
    }
    return await this.#prismaClient.jobVersion.count({
      where: {
        jobId: job.id,
        version: {
          gt: metadata.version
        },
        environmentId: environment.id
      }
    }) === 0 && await this.#prismaClient.jobAlias.upsert({
      where: {
        jobId_environmentId_name: {
          jobId: job.id,
          environmentId: environment.id,
          name: "latest"
        }
      },
      create: {
        jobId: job.id,
        versionId: jobVersion.id,
        environmentId: environment.id,
        name: "latest",
        value: jobVersion.version
      },
      update: {
        versionId: jobVersion.id,
        value: jobVersion.version
      }
    }), await this.#prismaClient.jobIntegration.deleteMany({
      where: {
        versionId: jobVersion.id,
        id: {
          notIn: Array.from(jobIntegrations)
        }
      }
    }), await this.#upsertEventDispatcher(metadata.trigger, job, jobVersion, environment), jobVersion;
  }
  async #upsertEventDispatcher(trigger, job, jobVersion, environment) {
    switch (trigger.type) {
      case "static": {
        await this.#prismaClient.eventDispatcher.upsert({
          where: {
            dispatchableId_environmentId: {
              dispatchableId: job.id,
              environmentId: environment.id
            }
          },
          create: {
            event: typeof trigger.rule.event == "string" ? [trigger.rule.event] : trigger.rule.event,
            source: trigger.rule.source,
            payloadFilter: trigger.rule.payload,
            contextFilter: trigger.rule.context,
            environmentId: environment.id,
            enabled: !0,
            dispatchable: {
              type: "JOB_VERSION",
              id: jobVersion.id
            },
            dispatchableId: job.id
          },
          update: {
            event: typeof trigger.rule.event == "string" ? [trigger.rule.event] : trigger.rule.event,
            source: trigger.rule.source,
            payloadFilter: trigger.rule.payload,
            contextFilter: trigger.rule.context,
            dispatchable: {
              type: "JOB_VERSION",
              id: jobVersion.id
            },
            enabled: !0
          }
        }), (trigger.properties || trigger.link || trigger.help) && await this.#prismaClient.jobVersion.update({
          where: {
            id: jobVersion.id
          },
          data: {
            properties: trigger.properties,
            triggerLink: trigger.link,
            triggerHelp: trigger.help
          }
        });
        break;
      }
      case "scheduled": {
        let eventDispatcher = await this.#prismaClient.eventDispatcher.upsert({
          where: {
            dispatchableId_environmentId: {
              dispatchableId: job.id,
              environmentId: environment.id
            }
          },
          create: {
            event: [SCHEDULED_EVENT],
            source: "trigger.dev",
            payloadFilter: {},
            contextFilter: {},
            environmentId: environment.id,
            enabled: !0,
            dispatchable: {
              type: "JOB_VERSION",
              id: jobVersion.id
            },
            dispatchableId: job.id,
            manual: !0
          },
          update: {
            dispatchable: {
              type: "JOB_VERSION",
              id: jobVersion.id
            },
            enabled: !0
          }
        });
        await new RegisterScheduleSourceService().call({
          key: job.id,
          dispatcher: eventDispatcher,
          schedule: trigger.schedule,
          organizationId: job.organizationId
        });
        break;
      }
    }
  }
  async #upsertIntegrationForJobIntegration(environment, jobIntegration) {
    switch (jobIntegration.authSource) {
      case "LOCAL":
        return await this.#prismaClient.integration.upsert({
          where: {
            organizationId_slug: {
              organizationId: environment.organizationId,
              slug: jobIntegration.id
            }
          },
          create: {
            slug: jobIntegration.id,
            title: jobIntegration.metadata.name,
            authSource: "LOCAL",
            connectionType: "DEVELOPER",
            organization: {
              connect: {
                id: environment.organizationId
              }
            },
            definition: {
              connectOrCreate: {
                where: {
                  id: jobIntegration.metadata.id
                },
                create: {
                  id: jobIntegration.metadata.id,
                  name: jobIntegration.metadata.name,
                  instructions: jobIntegration.metadata.instructions
                }
              }
            }
          },
          update: {
            title: jobIntegration.metadata.name,
            authSource: "LOCAL",
            connectionType: "DEVELOPER",
            setupStatus: "COMPLETE",
            definition: {
              connectOrCreate: {
                where: {
                  id: jobIntegration.metadata.id
                },
                create: {
                  id: jobIntegration.metadata.id,
                  name: jobIntegration.metadata.name,
                  instructions: jobIntegration.metadata.instructions
                }
              }
            }
          }
        });
      case "HOSTED":
        return await this.#prismaClient.integration.create({
          data: {
            slug: jobIntegration.id,
            title: jobIntegration.id,
            authSource: "HOSTED",
            setupStatus: "MISSING_FIELDS",
            connectionType: "DEVELOPER",
            organization: {
              connect: {
                id: environment.organizationId
              }
            },
            definition: {
              connectOrCreate: {
                where: {
                  id: jobIntegration.metadata.id
                },
                create: {
                  id: jobIntegration.metadata.id,
                  name: jobIntegration.metadata.name,
                  instructions: jobIntegration.metadata.instructions
                }
              }
            }
          }
        });
      case "RESOLVER":
        return await this.#prismaClient.integration.upsert({
          where: {
            organizationId_slug: {
              organizationId: environment.organizationId,
              slug: jobIntegration.id
            }
          },
          create: {
            slug: jobIntegration.id,
            title: jobIntegration.metadata.name,
            authSource: "RESOLVER",
            connectionType: "EXTERNAL",
            organization: {
              connect: {
                id: environment.organizationId
              }
            },
            definition: {
              connectOrCreate: {
                where: {
                  id: jobIntegration.metadata.id
                },
                create: {
                  id: jobIntegration.metadata.id,
                  name: jobIntegration.metadata.name,
                  instructions: jobIntegration.metadata.instructions
                }
              }
            }
          },
          update: {
            title: jobIntegration.metadata.name,
            authSource: "RESOLVER",
            connectionType: "EXTERNAL",
            setupStatus: "COMPLETE",
            definition: {
              connectOrCreate: {
                where: {
                  id: jobIntegration.metadata.id
                },
                create: {
                  id: jobIntegration.metadata.id,
                  name: jobIntegration.metadata.name,
                  instructions: jobIntegration.metadata.instructions
                }
              }
            }
          }
        });
      default:
        assertExhaustive(jobIntegration.authSource);
    }
  }
  async #upsertJobIntegration(job, jobVersion, config, integrations, key) {
    let integration = integrations.get(config.id);
    if (!integration)
      throw new Error(`Could not find integration with id ${config.id} for job ${job.id}`);
    let existingInstanceConnection = jobVersion.integrations.find(
      (integration2) => integration2.key === key
    );
    if (existingInstanceConnection)
      return await this.#prismaClient.jobIntegration.update({
        where: {
          id: existingInstanceConnection.id
        },
        data: {
          integrationId: integration.id
        }
      });
    let existingJobIntegration = job.integrations.find((integration2) => integration2.key === key);
    return existingJobIntegration ? (logger.debug("Creating new job integration from existing", {
      existingJobIntegration,
      key,
      jobVersionId: jobVersion.id
    }), this.#prismaClient.jobIntegration.create({
      data: {
        version: {
          connect: {
            id: jobVersion.id
          }
        },
        job: {
          connect: {
            id: job.id
          }
        },
        key,
        integration: {
          connect: {
            id: integration.id
          }
        }
      }
    })) : (logger.debug("Creating new job integration", {
      key,
      jobVersionId: jobVersion.id,
      config
    }), this.#prismaClient.jobIntegration.create({
      data: {
        version: {
          connect: {
            id: jobVersion.id
          }
        },
        job: {
          connect: {
            id: job.id
          }
        },
        key,
        integration: {
          connect: {
            id: integration.id
          }
        }
      }
    }));
  }
};

// app/services/sources/utils.server.ts
var import_node_crypto5 = __toESM(require("node:crypto"));
function generateSecret(sizeInBytes = 32) {
  return import_node_crypto5.default.randomBytes(sizeInBytes).toString("hex");
}

// app/services/sources/registerSourceV1.server.ts
var RegisterSourceServiceV1 = class {
  #prismaClient;
  constructor(prismaClient = prisma) {
    this.#prismaClient = prismaClient;
  }
  async call(endpointIdOrEndpoint, metadata, dynamicTriggerId, accountId, dynamicSource) {
    let endpoint = typeof endpointIdOrEndpoint == "string" ? await findEndpoint(endpointIdOrEndpoint) : endpointIdOrEndpoint;
    return this.#upsertSource(
      endpoint,
      endpoint.environment,
      metadata,
      dynamicTriggerId,
      accountId,
      dynamicSource
    );
  }
  async #upsertSource(endpoint, environment, metadata, dynamicTriggerId, accountId, dynamicSource) {
    let key = [dynamicTriggerId, dynamicSource?.id, metadata.key].filter(Boolean).join(":"), registrationJob = metadata.registerSourceJob ? await this.#prismaClient.job.findUnique({
      where: {
        projectId_slug: {
          projectId: endpoint.projectId,
          slug: metadata.registerSourceJob.id
        }
      }
    }) : void 0, source = await $transaction(
      this.#prismaClient,
      async (tx) => {
        let integration = await this.#findOrCreateIntegration(
          tx,
          environment.organizationId,
          metadata.integration
        );
        if (!integration)
          throw new Error("Integration not found");
        let externalAccount = accountId ? await tx.externalAccount.upsert({
          where: {
            environmentId_identifier: {
              environmentId: environment.id,
              identifier: accountId
            }
          },
          create: {
            environmentId: environment.id,
            organizationId: environment.organizationId,
            identifier: accountId
          },
          update: {}
        }) : void 0, triggerSource2 = await tx.triggerSource.upsert({
          where: {
            key_environmentId: {
              environmentId: environment.id,
              key
            }
          },
          create: {
            params: metadata.params,
            key,
            channel: metadata.channel,
            organization: {
              connect: {
                id: environment.organizationId
              }
            },
            endpoint: {
              connect: {
                id: endpoint.id
              }
            },
            project: {
              connect: {
                id: environment.projectId
              }
            },
            environment: {
              connect: {
                id: environment.id
              }
            },
            integration: { connect: { id: integration.id } },
            dynamicTrigger: dynamicTriggerId ? {
              connect: {
                id: dynamicTriggerId
              }
            } : void 0,
            externalAccount: externalAccount ? { connect: { id: externalAccount.id } } : void 0,
            options: {
              create: metadata.events.map((event) => ({
                name: "event",
                value: event
              }))
            },
            secretReference: {
              connectOrCreate: {
                where: {
                  key: `${endpoint.id}:${key}`
                },
                create: {
                  key: `${endpoint.id}:${key}`,
                  provider: "DATABASE"
                }
              }
            },
            dynamicSourceId: dynamicSource?.id,
            dynamicSourceMetadata: dynamicSource?.metadata,
            sourceRegistrationJob: registrationJob && metadata.registerSourceJob ? {
              connect: {
                jobId_version_environmentId: {
                  jobId: registrationJob.id,
                  version: metadata.registerSourceJob.version,
                  environmentId: endpoint.environmentId
                }
              }
            } : void 0
          },
          update: {
            endpoint: {
              connect: {
                id: endpoint.id
              }
            },
            integration: { connect: { id: integration.id } },
            dynamicSourceId: dynamicSource?.id,
            dynamicSourceMetadata: dynamicSource?.metadata,
            sourceRegistrationJob: registrationJob && metadata.registerSourceJob ? {
              connect: {
                jobId_version_environmentId: {
                  jobId: registrationJob.id,
                  version: metadata.registerSourceJob.version,
                  environmentId: endpoint.environmentId
                }
              }
            } : void 0
          },
          include: {
            options: !0,
            secretReference: !0
          }
        });
        switch (metadata.channel) {
          case "HTTP":
            await tx.secretStore.upsert({
              where: {
                key: triggerSource2.secretReference.key
              },
              create: {
                key: triggerSource2.secretReference.key,
                value: {
                  secret: generateSecret()
                }
              },
              update: {}
            });
        }
        let newEvents = new Set(metadata.events), orphanedEvents2 = /* @__PURE__ */ new Set();
        for (let option of triggerSource2.options)
          newEvents.has(option.value) || orphanedEvents2.add(option.value);
        for (let event of newEvents)
          await tx.triggerSourceOption.upsert({
            where: {
              name_value_sourceId: {
                name: "event",
                value: event,
                sourceId: triggerSource2.id
              }
            },
            create: {
              name: "event",
              value: event,
              source: {
                connect: {
                  id: triggerSource2.id
                }
              }
            },
            update: {}
          });
        return {
          id: triggerSource2.id,
          orphanedEvents: Array.from(orphanedEvents2)
        };
      },
      { timeout: 15e3 }
    );
    if (!source)
      return;
    let { id, orphanedEvents } = source, triggerSource = await this.#prismaClient.triggerSource.findUniqueOrThrow({
      where: {
        id
      },
      include: {
        options: !0,
        secretReference: !0,
        integration: !0
      }
    });
    if (dynamicTriggerId)
      return triggerSource;
    let triggerIsActive = triggerSource.active, triggerHasOrphanedEvents = orphanedEvents.length > 0, triggerHasUnregisteredEvents = triggerSource.options.some((option) => !option.registered);
    return (!triggerIsActive || triggerHasOrphanedEvents || triggerHasUnregisteredEvents) && await workerQueue.enqueue("activateSource", {
      version: "1",
      id: triggerSource.id,
      orphanedEvents
    }), triggerSource;
  }
  async #findOrCreateIntegration(tx, organizationId, config) {
    return config.authSource === "HOSTED" ? tx.integration.findUnique({
      where: {
        organizationId_slug: {
          organizationId,
          slug: config.id
        }
      }
    }) : tx.integration.upsert({
      where: {
        organizationId_slug: {
          organizationId,
          slug: config.id
        }
      },
      create: {
        slug: config.id,
        title: config.metadata.name,
        authSource: "LOCAL",
        connectionType: "DEVELOPER",
        organization: {
          connect: {
            id: organizationId
          }
        },
        definition: {
          connectOrCreate: {
            where: {
              id: config.metadata.id
            },
            create: {
              id: config.metadata.id,
              name: config.metadata.name,
              instructions: config.metadata.instructions
            }
          }
        }
      },
      update: {
        title: config.metadata.name,
        authSource: "LOCAL",
        connectionType: "DEVELOPER",
        definition: {
          connectOrCreate: {
            where: {
              id: config.metadata.id
            },
            create: {
              id: config.metadata.id,
              name: config.metadata.name,
              instructions: config.metadata.instructions
            }
          }
        }
      }
    });
  }
};

// app/services/triggers/registerDynamicSchedule.server.ts
var RegisterDynamicScheduleService = class {
  #prismaClient;
  constructor(prismaClient = prisma) {
    this.#prismaClient = prismaClient;
  }
  async call(endpointIdOrEndpoint, metadata) {
    let endpoint = typeof endpointIdOrEndpoint == "string" ? await findEndpoint(endpointIdOrEndpoint) : endpointIdOrEndpoint, dynamicTrigger = await this.#prismaClient.dynamicTrigger.upsert({
      where: {
        endpointId_slug_type: {
          endpointId: endpoint.id,
          slug: metadata.id,
          type: "SCHEDULE"
        }
      },
      create: {
        slug: metadata.id,
        type: "SCHEDULE",
        endpoint: {
          connect: {
            id: endpoint.id
          }
        }
      },
      update: {},
      include: {
        jobs: !0,
        endpoint: !0
      }
    }), jobs = await this.#prismaClient.job.findMany({
      where: {
        slug: {
          in: metadata.jobs.map((job) => job.id)
        },
        versions: {
          some: {
            endpointId: endpoint.id
          }
        }
      }
    });
    await this.#prismaClient.dynamicTrigger.update({
      where: {
        id: dynamicTrigger.id
      },
      data: {
        jobs: {
          connect: jobs.map((job) => ({
            id: job.id
          })),
          disconnect: dynamicTrigger.jobs.filter((job) => !jobs.find((j) => j.id === job.id))
        }
      }
    }), await this.#prismaClient.eventDispatcher.upsert({
      where: {
        dispatchableId_environmentId: {
          dispatchableId: dynamicTrigger.id,
          environmentId: dynamicTrigger.endpoint.environmentId
        }
      },
      create: {
        event: [SCHEDULED_EVENT],
        source: "trigger.dev",
        payloadFilter: {},
        contextFilter: {},
        environmentId: dynamicTrigger.endpoint.environmentId,
        enabled: !0,
        dispatchable: {
          type: "DYNAMIC_TRIGGER",
          id: dynamicTrigger.id
        },
        dispatchableId: dynamicTrigger.id,
        manual: !0
      },
      update: {
        dispatchable: {
          type: "DYNAMIC_TRIGGER",
          id: dynamicTrigger.id
        }
      }
    });
  }
};

// app/services/triggers/registerDynamicTrigger.server.ts
var RegisterDynamicTriggerService = class {
  #prismaClient;
  constructor(prismaClient = prisma) {
    this.#prismaClient = prismaClient;
  }
  async call(endpointIdOrEndpoint, metadata) {
    let endpoint = typeof endpointIdOrEndpoint == "string" ? await findEndpoint(endpointIdOrEndpoint) : endpointIdOrEndpoint, registrationJob = metadata.registerSourceJob ? await this.#prismaClient.job.findUnique({
      where: {
        projectId_slug: {
          projectId: endpoint.projectId,
          slug: metadata.registerSourceJob.id
        }
      }
    }) : void 0, dynamicTrigger = await this.#prismaClient.dynamicTrigger.upsert({
      where: {
        endpointId_slug_type: {
          endpointId: endpoint.id,
          slug: metadata.id,
          type: "EVENT"
        }
      },
      create: {
        slug: metadata.id,
        type: "EVENT",
        endpoint: {
          connect: {
            id: endpoint.id
          }
        },
        sourceRegistrationJob: registrationJob && metadata.registerSourceJob ? {
          connect: {
            jobId_version_environmentId: {
              jobId: registrationJob.id,
              version: metadata.registerSourceJob.version,
              environmentId: endpoint.environmentId
            }
          }
        } : void 0
      },
      update: {
        sourceRegistrationJob: registrationJob && metadata.registerSourceJob ? {
          connect: {
            jobId_version_environmentId: {
              jobId: registrationJob.id,
              version: metadata.registerSourceJob.version,
              environmentId: endpoint.environmentId
            }
          }
        } : void 0
      },
      include: {
        jobs: !0
      }
    }), jobs = await this.#prismaClient.job.findMany({
      where: {
        slug: {
          in: metadata.jobs.map((job) => job.id)
        },
        versions: {
          some: {
            endpointId: endpoint.id
          }
        }
      }
    });
    await this.#prismaClient.dynamicTrigger.update({
      where: {
        id: dynamicTrigger.id
      },
      data: {
        jobs: {
          connect: jobs.map((job) => ({
            id: job.id
          })),
          disconnect: dynamicTrigger.jobs.filter((job) => !jobs.find((j) => j.id === job.id))
        }
      }
    });
  }
};

// app/services/schedules/disableScheduleSource.server.ts
var DisableScheduleSourceService = class {
  #prismaClient;
  constructor(prismaClient = prisma) {
    this.#prismaClient = prismaClient;
  }
  async call({ key, dispatcher }) {
    if (await this.#prismaClient.scheduleSource.findUnique({
      where: {
        key_environmentId: {
          key,
          environmentId: dispatcher.environmentId
        }
      }
    }))
      return await $transaction(this.#prismaClient, async (tx) => {
        let scheduleSource = await this.#prismaClient.scheduleSource.update({
          where: {
            key_environmentId: {
              key,
              environmentId: dispatcher.environmentId
            }
          },
          data: {
            active: !1
          }
        });
        return await DeliverScheduledEventService.dequeue(scheduleSource.id, tx), scheduleSource;
      });
  }
};

// app/services/jobs/disableJob.server.ts
var DisableJobService = class {
  #prismaClient;
  constructor(prismaClient = prisma) {
    this.#prismaClient = prismaClient;
  }
  async call(endpointIdOrEndpoint, options2) {
    let endpoint = typeof endpointIdOrEndpoint == "string" ? await findEndpoint(endpointIdOrEndpoint) : endpointIdOrEndpoint;
    return this.#disableJob(endpoint.environment, options2);
  }
  async #disableJob(environment, options2) {
    let job = await this.#prismaClient.job.findUnique({
      where: {
        projectId_slug: {
          projectId: environment.projectId,
          slug: options2.slug
        }
      }
    });
    if (!job)
      return;
    let jobVersion = await this.#prismaClient.jobVersion.findUnique({
      where: {
        jobId_version_environmentId: {
          jobId: job.id,
          version: options2.version,
          environmentId: environment.id
        }
      }
    });
    if (!jobVersion || jobVersion.status === "DISABLED")
      return;
    let updatedJobVersion = await this.#prismaClient.jobVersion.update({
      where: {
        id: jobVersion.id
      },
      data: {
        status: "DISABLED"
      }
    });
    return await this.#disableEventDispatcher(updatedJobVersion), updatedJobVersion;
  }
  async #disableEventDispatcher(jobVersion) {
    let eventDispatcher = await this.#prismaClient.eventDispatcher.update({
      where: {
        dispatchableId_environmentId: {
          dispatchableId: jobVersion.jobId,
          environmentId: jobVersion.environmentId
        }
      },
      data: {
        enabled: !1
      }
    });
    await new DisableScheduleSourceService().call({
      key: jobVersion.jobId,
      dispatcher: eventDispatcher
    });
  }
};

// app/services/sources/registerSourceV2.server.ts
var RegisterSourceServiceV2 = class {
  #prismaClient;
  constructor(prismaClient = prisma) {
    this.#prismaClient = prismaClient;
  }
  async call(endpointIdOrEndpoint, metadata, dynamicTriggerId, accountId, dynamicSource) {
    let endpoint = typeof endpointIdOrEndpoint == "string" ? await findEndpoint(endpointIdOrEndpoint) : endpointIdOrEndpoint;
    return this.#upsertSource(
      endpoint,
      endpoint.environment,
      metadata,
      dynamicTriggerId,
      accountId,
      dynamicSource
    );
  }
  async #upsertSource(endpoint, environment, metadata, dynamicTriggerId, accountId, dynamicSource) {
    let key = [dynamicTriggerId, dynamicSource?.id, metadata.key].filter(Boolean).join(":"), registrationJob = metadata.registerSourceJob ? await this.#prismaClient.job.findUnique({
      where: {
        projectId_slug: {
          projectId: endpoint.projectId,
          slug: metadata.registerSourceJob.id
        }
      }
    }) : void 0, source = await $transaction(
      this.#prismaClient,
      async (tx) => {
        let integration = await this.#findOrCreateIntegration(
          tx,
          environment.organizationId,
          metadata.integration
        );
        if (!integration)
          throw new Error("Integration not found");
        let externalAccount = accountId ? await tx.externalAccount.upsert({
          where: {
            environmentId_identifier: {
              environmentId: environment.id,
              identifier: accountId
            }
          },
          create: {
            environmentId: environment.id,
            organizationId: environment.organizationId,
            identifier: accountId
          },
          update: {}
        }) : void 0, createOptions = Object.entries(metadata.options).flatMap(([name, values]) => [...new Set(values)].map((value) => ({ name, value }))), triggerSource2 = await tx.triggerSource.upsert({
          where: {
            key_environmentId: {
              environmentId: environment.id,
              key
            }
          },
          create: {
            version: "2",
            params: metadata.params,
            key,
            channel: metadata.channel,
            organization: {
              connect: {
                id: environment.organizationId
              }
            },
            endpoint: {
              connect: {
                id: endpoint.id
              }
            },
            project: {
              connect: {
                id: environment.projectId
              }
            },
            environment: {
              connect: {
                id: environment.id
              }
            },
            integration: { connect: { id: integration.id } },
            dynamicTrigger: dynamicTriggerId ? {
              connect: {
                id: dynamicTriggerId
              }
            } : void 0,
            externalAccount: externalAccount ? { connect: { id: externalAccount.id } } : void 0,
            options: {
              create: createOptions
            },
            secretReference: {
              connectOrCreate: {
                where: {
                  key: `${endpoint.id}:${key}`
                },
                create: {
                  key: `${endpoint.id}:${key}`,
                  provider: "DATABASE"
                }
              }
            },
            dynamicSourceId: dynamicSource?.id,
            dynamicSourceMetadata: dynamicSource?.metadata,
            sourceRegistrationJob: registrationJob && metadata.registerSourceJob ? {
              connect: {
                jobId_version_environmentId: {
                  jobId: registrationJob.id,
                  version: metadata.registerSourceJob.version,
                  environmentId: endpoint.environmentId
                }
              }
            } : void 0
          },
          update: {
            version: "2",
            endpoint: {
              connect: {
                id: endpoint.id
              }
            },
            integration: { connect: { id: integration.id } },
            dynamicSourceId: dynamicSource?.id,
            dynamicSourceMetadata: dynamicSource?.metadata,
            sourceRegistrationJob: registrationJob && metadata.registerSourceJob ? {
              connect: {
                jobId_version_environmentId: {
                  jobId: registrationJob.id,
                  version: metadata.registerSourceJob.version,
                  environmentId: endpoint.environmentId
                }
              }
            } : void 0
          },
          include: {
            options: !0,
            secretReference: !0
          }
        });
        switch (metadata.channel) {
          case "HTTP":
            await tx.secretStore.upsert({
              where: {
                key: triggerSource2.secretReference.key
              },
              create: {
                key: triggerSource2.secretReference.key,
                value: {
                  secret: generateSecret()
                }
              },
              update: {}
            });
        }
        let newOptions = metadata.options, orphanedOptions2 = {};
        for (let option of triggerSource2.options) {
          let newValues = newOptions[option.name];
          if (orphanedOptions2[option.name] || (orphanedOptions2[option.name] = /* @__PURE__ */ new Set()), newValues === void 0) {
            orphanedOptions2[option.name] = /* @__PURE__ */ new Set([...orphanedOptions2[option.name], option.value]);
            continue;
          }
          newValues.includes(option.value) || (orphanedOptions2[option.name] = /* @__PURE__ */ new Set([...orphanedOptions2[option.name], option.value]));
        }
        let flatOptions = Object.entries(newOptions).flatMap(
          ([name, values]) => values.map((v) => ({ name, value: v }))
        );
        for (let { name, value } of flatOptions)
          await tx.triggerSourceOption.upsert({
            where: {
              name_value_sourceId: {
                name,
                value,
                sourceId: triggerSource2.id
              }
            },
            create: {
              name,
              value,
              source: {
                connect: {
                  id: triggerSource2.id
                }
              }
            },
            update: {}
          });
        for (let [name, values] of Object.entries(orphanedOptions2))
          for (let value of values)
            await tx.triggerSourceOption.delete({
              where: {
                name_value_sourceId: {
                  name,
                  value,
                  sourceId: triggerSource2.id
                }
              }
            });
        return {
          id: triggerSource2.id,
          orphanedOptions: Object.fromEntries(
            Object.entries(orphanedOptions2).map(([name, values]) => [name, Array.from(values)])
          )
        };
      },
      { timeout: 15e3 }
    );
    if (!source)
      return;
    let { id, orphanedOptions } = source, triggerSource = await this.#prismaClient.triggerSource.findUniqueOrThrow({
      where: {
        id
      },
      include: {
        options: !0,
        secretReference: !0,
        integration: !0
      }
    });
    if (dynamicTriggerId)
      return triggerSource;
    let triggerIsActive = triggerSource.active, triggerHasOrphanedEvents = Object.values(orphanedOptions).some(
      (values) => values.length > 0
    ), triggerHasUnregisteredEvents = triggerSource.options.some((option) => !option.registered);
    return logger.debug("Deciding whether to activate source", {
      triggerIsActive,
      triggerHasOrphanedEvents,
      triggerHasUnregisteredEvents,
      orphanedOptions,
      options: triggerSource.options
    }), (!triggerIsActive || triggerHasOrphanedEvents || triggerHasUnregisteredEvents) && await workerQueue.enqueue("activateSource", {
      version: "2",
      id: triggerSource.id,
      orphanedOptions
    }), triggerSource;
  }
  async #findOrCreateIntegration(tx, organizationId, config) {
    return config.authSource === "HOSTED" ? tx.integration.findUnique({
      where: {
        organizationId_slug: {
          organizationId,
          slug: config.id
        }
      }
    }) : tx.integration.upsert({
      where: {
        organizationId_slug: {
          organizationId,
          slug: config.id
        }
      },
      create: {
        slug: config.id,
        title: config.metadata.name,
        authSource: "LOCAL",
        connectionType: "DEVELOPER",
        organization: {
          connect: {
            id: organizationId
          }
        },
        definition: {
          connectOrCreate: {
            where: {
              id: config.metadata.id
            },
            create: {
              id: config.metadata.id,
              name: config.metadata.name,
              instructions: config.metadata.instructions
            }
          }
        }
      },
      update: {
        title: config.metadata.name,
        authSource: "LOCAL",
        connectionType: "DEVELOPER",
        definition: {
          connectOrCreate: {
            where: {
              id: config.metadata.id
            },
            create: {
              id: config.metadata.id,
              name: config.metadata.name,
              instructions: config.metadata.instructions
            }
          }
        }
      }
    });
  }
};

// app/services/endpoints/performEndpointIndexService.ts
var import_zod_validation_error4 = require("zod-validation-error");

// app/services/triggers/registerHttpEndpoint.server.ts
var import_zod56 = require("zod");
var RegisterHttpEndpointService = class {
  #prismaClient;
  constructor(prismaClient = prisma) {
    this.#prismaClient = prismaClient;
  }
  async call(endpointIdOrEndpoint, httpEndpointMetadata) {
    let endpoint = typeof endpointIdOrEndpoint == "string" ? await findEndpoint(endpointIdOrEndpoint) : endpointIdOrEndpoint, secretKey2 = `httpendpoint:${endpoint.projectId}:${httpEndpointMetadata.id}`;
    return await $transaction(this.#prismaClient, async (tx) => {
      let httpEndpoint2 = await tx.triggerHttpEndpoint.upsert({
        where: {
          key_projectId: {
            key: httpEndpointMetadata.id,
            projectId: endpoint.projectId
          }
        },
        create: {
          key: httpEndpointMetadata.id,
          title: httpEndpointMetadata.title,
          icon: httpEndpointMetadata.icon,
          properties: httpEndpointMetadata.properties,
          secretReference: {
            connectOrCreate: {
              where: {
                key: secretKey2
              },
              create: {
                key: secretKey2,
                provider: "DATABASE"
              }
            }
          },
          project: {
            connect: {
              id: endpoint.projectId
            }
          }
        },
        update: {
          title: httpEndpointMetadata.title,
          icon: httpEndpointMetadata.icon,
          properties: httpEndpointMetadata.properties
        },
        include: {
          secretReference: !0
        }
      }), httpEndpointEnvironment = await tx.triggerHttpEndpointEnvironment.upsert({
        where: {
          environmentId_httpEndpointId: {
            environmentId: endpoint.environment.id,
            httpEndpointId: httpEndpoint2.id
          }
        },
        create: {
          active: httpEndpointMetadata.enabled,
          immediateResponseFilter: httpEndpointMetadata.immediateResponseFilter,
          environmentId: endpoint.environment.id,
          endpointId: endpoint.id,
          httpEndpointId: httpEndpoint2.id,
          skipTriggeringRuns: httpEndpointMetadata.skipTriggeringRuns,
          source: httpEndpointMetadata.source
        },
        update: {
          active: httpEndpointMetadata.enabled,
          immediateResponseFilter: httpEndpointMetadata.immediateResponseFilter ? httpEndpointMetadata.immediateResponseFilter : src_exports.Prisma.DbNull,
          environmentId: endpoint.environment.id,
          endpointId: endpoint.id,
          httpEndpointId: httpEndpoint2.id,
          skipTriggeringRuns: httpEndpointMetadata.skipTriggeringRuns,
          source: httpEndpointMetadata.source
        }
      }), secretStore = getSecretStore(httpEndpoint2.secretReference.provider, {
        prismaClient: tx
      });
      await secretStore.getSecret(
        import_zod56.z.object({
          secret: import_zod56.z.string()
        }),
        httpEndpoint2.secretReference.key
      ) || await secretStore.setSecret(secretKey2, {
        secret: generateSecret()
      });
    });
  }
};

// app/services/ulid.server.ts
var import_ulid = require("ulid"), factory = (0, import_ulid.monotonicFactory)();
function ulid2() {
  return factory().toLowerCase();
}

// app/services/triggers/registerWebhook.server.ts
var import_zod58 = require("zod");

// app/services/httpendpoint/HandleHttpEndpointService.ts
var import_zod57 = require("zod");
var import_server_runtime2 = require("@remix-run/server-runtime");

// app/utils/createHttpSourceRequest.ts
async function createHttpSourceRequest(request) {
  let url = requestUrl(request), arrayBuffer;
  try {
    arrayBuffer = await request.arrayBuffer();
  } catch {
  }
  return {
    headers: Object.fromEntries(request.headers),
    url: url.href,
    method: request.method,
    rawBody: arrayBuffer ? Buffer.from(arrayBuffer) : void 0
  };
}

// app/services/sources/handleWebhookRequest.server.ts
var import_crypto2 = require("crypto");
var HandleWebhookRequestService = class {
  #prismaClient;
  constructor(prismaClient = prisma) {
    this.#prismaClient = prismaClient;
  }
  async call(id, request, metadata) {
    let webhookEnvironment = await this.#prismaClient.webhookEnvironment.findUnique({
      where: {
        id
      },
      include: {
        endpoint: !0,
        environment: !0
      }
    });
    if (!webhookEnvironment)
      return { status: 404 };
    if (!webhookEnvironment.active)
      return { status: 200 };
    let webhookRequest = await createHttpSourceRequest(request), lockId = webhookIdToLockId(webhookEnvironment.webhookId);
    return await this.#prismaClient.$transaction(async (tx) => {
      let counter = await tx.webhookDeliveryCounter.upsert({
        where: { webhookId: webhookEnvironment.id },
        update: { lastNumber: { increment: 1 } },
        create: { webhookId: webhookEnvironment.id, lastNumber: 1 },
        select: { lastNumber: !0 }
      }), delivery = await tx.webhookRequestDelivery.create({
        data: {
          number: counter.lastNumber,
          webhookId: webhookEnvironment.webhookId,
          webhookEnvironmentId: webhookEnvironment.id,
          endpointId: webhookEnvironment.endpointId,
          environmentId: webhookEnvironment.environmentId,
          url: webhookRequest.url,
          method: webhookRequest.method,
          headers: webhookRequest.headers,
          body: webhookRequest.rawBody
        }
      });
      await workerQueue.enqueue(
        "deliverWebhookRequest",
        {
          id: delivery.id
        },
        {
          tx,
          maxAttempts: webhookEnvironment.environment.type === RuntimeEnvironmentType3.DEVELOPMENT ? 1 : void 0
        }
      );
    }), { status: 200 };
  }
};
function webhookIdToLockId(webhookId) {
  return parseInt((0, import_crypto2.createHash)("sha256").update(webhookId).digest("hex").slice(0, 8), 16);
}

// app/services/httpendpoint/HandleHttpEndpointService.ts
var HttpEndpointParamsSchema = import_zod57.z.object({
  httpEndpointId: import_zod57.z.string(),
  envType: import_zod57.z.string(),
  shortcode: import_zod57.z.string()
}), HandleHttpEndpointService = class {
  #prismaClient;
  constructor(prismaClient = prisma) {
    this.#prismaClient = prismaClient;
  }
  async call(params, request) {
    let httpEndpoint2 = await this.#prismaClient.triggerHttpEndpoint.findUnique({
      where: {
        id: params.httpEndpointId
      },
      include: {
        secretReference: !0,
        webhook: !0,
        project: {
          include: {
            environments: {
              where: {
                shortcode: params.shortcode
              },
              include: {
                organization: !0,
                project: !0
              }
            }
          }
        }
      }
    });
    if (!httpEndpoint2)
      return logger.error("Could not find http endpoint", { httpEndpointId: params.httpEndpointId }), (0, import_server_runtime2.json)(
        { error: !0, message: "Could not find http endpoint" },
        {
          status: 404
        }
      );
    let environment = httpEndpoint2.project.environments.at(0);
    if (!environment)
      return logger.error("Could not find environment", { shortcode: params.shortcode }), (0, import_server_runtime2.json)({ error: !0, message: "Could not find environment" }, { status: 404 });
    let httpEndpointEnvironment = await this.#prismaClient.triggerHttpEndpointEnvironment.findUnique({
      where: {
        environmentId_httpEndpointId: {
          environmentId: environment.id,
          httpEndpointId: httpEndpoint2.id
        }
      },
      include: {
        endpoint: !0
      }
    });
    if (!httpEndpointEnvironment)
      return logger.debug("Could not find http endpoint environment", {
        httpEndpointId: httpEndpoint2.id,
        environmentId: environment.id
      }), (0, import_server_runtime2.json)(
        { error: !0, message: "Could not find http endpoint environment" },
        { status: 404 }
      );
    if (!httpEndpointEnvironment.endpoint.url)
      return logger.debug("Endpoint has no url", {
        httpEndpointId: httpEndpoint2.id,
        environmentId: environment.id
      }), (0, import_server_runtime2.json)({ error: !0, message: "Endpoint has no url" }, { status: 404 });
    let immediateResponseFilter = RequestFilterSchema.nullable().safeParse(
      httpEndpointEnvironment.immediateResponseFilter
    );
    if (!immediateResponseFilter.success)
      return logger.error("Could not parse immediate response filter", {
        httpEndpointId: httpEndpoint2.id,
        environmentId: environment.id,
        errors: immediateResponseFilter.error
      }), (0, import_server_runtime2.json)(
        { error: !0, message: "Could not parse immediate response filter" },
        { status: 500 }
      );
    let secretStore = getSecretStore(httpEndpoint2.secretReference.provider), secret2;
    try {
      secret2 = (await secretStore.getSecretOrThrow(
        import_zod57.z.object({ secret: import_zod57.z.string() }),
        httpEndpoint2.secretReference.key
      )).secret;
    } catch (e) {
      let error = e instanceof Error ? e.message : JSON.stringify(e);
      return logger.error("Getting secret threw", { error }), (0, import_server_runtime2.json)({ error: !0, message: "Could not retrieve secret" }, { status: 404 });
    }
    if (!secret2)
      return logger.error("Could not find secret", {
        httpEndpointId: httpEndpoint2.id,
        environmentId: environment.id,
        secretReference: httpEndpoint2.secretReference
      }), (0, import_server_runtime2.json)({ error: !0, message: "Could not find secret" }, { status: 404 });
    let callClientImmediately = immediateResponseFilter.data ? await requestFilterMatches(request, immediateResponseFilter.data) : !1, httpResponse;
    if (callClientImmediately) {
      logger.info("Calling client immediately", {
        httpEndpointId: httpEndpoint2.id,
        environmentId: environment.id,
        immediateResponseFilter: immediateResponseFilter.data
      });
      let clonedRequest = request.clone(), client3 = new EndpointApi(environment.apiKey, httpEndpointEnvironment.endpoint.url), httpRequest2 = await createHttpSourceRequest(clonedRequest), { response, parser } = await client3.deliverHttpEndpointRequestForResponse({
        key: httpEndpoint2.key,
        secret: secret2,
        request: httpRequest2
      }), responseJson = await response.json(), parsedResponseResult = parser.safeParse(responseJson);
      if (!parsedResponseResult.success)
        return logger.error("Could not parse response from client", {
          httpEndpointId: httpEndpoint2.id,
          environmentId: environment.id,
          responseJson,
          errors: parsedResponseResult.error
        }), (0, import_server_runtime2.json)(
          { error: !0, message: "Could not parse response from client" },
          { status: 500 }
        );
      let endpointResponse = parsedResponseResult.data;
      if (httpResponse = new Response(endpointResponse.body, {
        status: endpointResponse.status,
        headers: endpointResponse.headers
      }), httpEndpointEnvironment.skipTriggeringRuns)
        return httpResponse || (0, import_server_runtime2.json)(
          { error: !0, message: "Should only skip triggering runs, if there's a Response" },
          { status: 400 }
        );
    }
    if (httpResponse && httpResponse.status !== 200)
      return httpResponse;
    if (httpEndpoint2.webhook)
      return await this.#handleWebhookRequest(request, environment, httpEndpoint2.webhook, secret2);
    let ingestService = new IngestSendEvent(), rawBody;
    try {
      rawBody = await request.text();
    } catch {
    }
    let url = requestUrl(request), event = {
      headers: Object.fromEntries(request.headers),
      url: url.href,
      method: request.method,
      rawBody
    }, headerId = request.headers.get("idempotency-key") ?? request.headers.get("x-request-id") ?? ulid2();
    return await ingestService.call(
      environment,
      {
        id: `${httpEndpoint2.id}.${headerId}`,
        name: `httpendpoint.${httpEndpoint2.key}`,
        source: httpEndpointEnvironment.source,
        payload: event,
        payloadType: "REQUEST"
      },
      void 0,
      void 0,
      { httpEndpointId: httpEndpoint2.id, httpEndpointEnvironmentId: httpEndpointEnvironment.id }
    ), httpResponse ?? new Response(void 0, {
      status: 200
    });
  }
  async #handleWebhookRequest(request, environment, webhook, secret2) {
    let webhookEnvironment = await this.#prismaClient.webhookEnvironment.findUnique({
      where: {
        environmentId_webhookId: {
          environmentId: environment.id,
          webhookId: webhook.id
        }
      },
      include: {
        endpoint: !0
      }
    });
    if (!webhookEnvironment)
      return logger.debug("Could not find webhook environment", {
        webhookId: webhook.id,
        environmentId: environment.id
      }), (0, import_server_runtime2.json)({ error: !0, message: "Could not find webhook environment" }, { status: 404 });
    let rawContext = {
      secret: secret2,
      config: webhookEnvironment.config,
      params: webhook.params
    }, webhookContextMetadata = WebhookContextMetadataSchema.parse(rawContext);
    return await new HandleWebhookRequestService(this.#prismaClient).call(webhookEnvironment.id, request, webhookContextMetadata);
  }
};
function httpEndpointUrl({
  httpEndpointId,
  environment: { slug: slug3, shortcode }
}) {
  return `${env2.APP_ORIGIN}/api/v1/http-endpoints/${httpEndpointId}/env/${slug3}/${shortcode}`;
}

// app/services/triggers/registerWebhook.server.ts
var import_ohash = require("ohash"), RegisterWebhookService = class {
  #prismaClient;
  constructor(prismaClient = prisma) {
    this.#prismaClient = prismaClient;
  }
  async call(endpointIdOrEndpoint, webhookMetadata) {
    let endpoint = typeof endpointIdOrEndpoint == "string" ? await findEndpoint(endpointIdOrEndpoint) : endpointIdOrEndpoint, upsertResult = await this.#upsertWebhook(endpoint, webhookMetadata);
    if (!upsertResult)
      return;
    let { webhook, webhookEnvironment } = upsertResult, { config, desiredConfig } = webhookEnvironment;
    if (!(webhook.active && (0, import_ohash.isEqual)(config, desiredConfig)))
      return await this.#activateWebhook(endpoint, webhook, webhookEnvironment);
  }
  async #upsertWebhook(endpoint, webhookMetadata) {
    return await $transaction(this.#prismaClient, async (tx) => {
      let webhook = await tx.webhook.upsert({
        where: {
          key_projectId: {
            key: webhookMetadata.key,
            projectId: endpoint.projectId
          }
        },
        create: {
          key: webhookMetadata.key,
          params: webhookMetadata.params,
          httpEndpoint: {
            connect: {
              key_projectId: {
                key: webhookMetadata.httpEndpoint.id,
                projectId: endpoint.projectId
              }
            }
          },
          project: {
            connect: {
              id: endpoint.projectId
            }
          },
          integration: {
            connect: {
              organizationId_slug: {
                organizationId: endpoint.organizationId,
                slug: webhookMetadata.integration.id
              }
            }
          }
        },
        update: {
          key: webhookMetadata.key,
          params: webhookMetadata.params
        },
        include: {
          httpEndpoint: {
            include: {
              secretReference: !0
            }
          }
        }
      }), webhookEnvironment = await tx.webhookEnvironment.upsert({
        where: {
          environmentId_webhookId: {
            environmentId: endpoint.environmentId,
            webhookId: webhook.id
          }
        },
        create: {
          desiredConfig: webhookMetadata.config,
          webhook: {
            connect: {
              id: webhook.id
            }
          },
          environment: {
            connect: {
              id: endpoint.environmentId
            }
          },
          endpoint: {
            connect: {
              id: endpoint.id
            }
          }
        },
        update: {
          desiredConfig: webhookMetadata.config
        }
      });
      return { webhook, webhookEnvironment };
    });
  }
  async #activateWebhook(endpoint, webhook, webhookEnvironment) {
    let { httpEndpoint: httpEndpoint2 } = webhook, secretData = await getSecretStore(httpEndpoint2.secretReference.provider).getSecretOrThrow(
      import_zod58.z.object({ secret: import_zod58.z.string() }),
      httpEndpoint2.secretReference.key
    );
    await new IngestSendEvent().call(endpoint.environment, {
      id: ulid2(),
      name: `${REGISTER_WEBHOOK}.${webhook.key}`,
      payload: {
        active: webhook.active,
        url: httpEndpointUrl({
          httpEndpointId: httpEndpoint2.id,
          environment: endpoint.environment
        }),
        secret: secretData.secret,
        params: webhook.params,
        config: {
          current: webhookEnvironment.config ?? {},
          desired: webhookEnvironment.desiredConfig ?? {}
        }
      }
    });
  }
};

// app/services/endpoints/performEndpointIndexService.ts
var MAX_SEQUENTIAL_FAILURE_COUNT = env2.MAX_SEQUENTIAL_INDEX_FAILURE_COUNT, PerformEndpointIndexService = class {
  #prismaClient;
  #registerJobService = new RegisterJobService();
  #disableJobService = new DisableJobService();
  #registerSourceServiceV1 = new RegisterSourceServiceV1();
  #registerSourceServiceV2 = new RegisterSourceServiceV2();
  #registerDynamicTriggerService = new RegisterDynamicTriggerService();
  #registerDynamicScheduleService = new RegisterDynamicScheduleService();
  #registerHttpEndpointService = new RegisterHttpEndpointService();
  #registerWebhookService = new RegisterWebhookService();
  constructor(prismaClient = prisma) {
    this.#prismaClient = prismaClient;
  }
  async call(id, redirectCount = 0) {
    let endpointIndex = await this.#prismaClient.endpointIndex.update({
      where: {
        id
      },
      data: {
        status: "STARTED"
      },
      include: {
        endpoint: {
          include: {
            environment: {
              include: {
                organization: !0,
                project: !0
              }
            }
          }
        }
      }
    });
    if (logger.debug("Performing endpoint index", endpointIndex), !endpointIndex.endpoint.url)
      return logger.debug("Endpoint URL is not set", endpointIndex), updateEndpointIndexWithError(
        this.#prismaClient,
        id,
        endpointIndex.endpoint.id,
        {
          message: "Endpoint URL is not set"
        },
        !1
      );
    let client3 = new EndpointApi(
      endpointIndex.endpoint.environment.apiKey,
      endpointIndex.endpoint.url
    ), { response, parser, headerParser, errorParser } = await client3.indexEndpoint();
    if (!response)
      return updateEndpointIndexWithError(
        this.#prismaClient,
        id,
        endpointIndex.endpoint.id,
        {
          message: `Could not connect to endpoint ${endpointIndex.endpoint.url}`
        },
        endpointIndex.endpoint.environment.type !== "DEVELOPMENT"
      );
    if (isRedirect(response.status)) {
      logger.debug("Endpoint is redirecting", {
        headers: Object.fromEntries(response.headers.entries())
      });
      let location = response.headers.get("location");
      return location ? redirectCount > 5 ? updateEndpointIndexWithError(
        this.#prismaClient,
        id,
        endpointIndex.endpoint.id,
        {
          message: `Endpoint ${endpointIndex.endpoint.url} is redirecting too many times`
        },
        endpointIndex.endpoint.environment.type !== "DEVELOPMENT"
      ) : (await this.#prismaClient.endpoint.update({
        where: {
          id: endpointIndex.endpoint.id
        },
        data: {
          url: location
        }
      }), await this.call(id, redirectCount + 1)) : updateEndpointIndexWithError(
        this.#prismaClient,
        id,
        endpointIndex.endpoint.id,
        {
          message: `Endpoint ${endpointIndex.endpoint.url} is redirecting but no location header is present`
        },
        endpointIndex.endpoint.environment.type !== "DEVELOPMENT"
      );
    }
    if (response.status === 401) {
      let body = await safeBodyFromResponse(response, errorParser);
      return body ? updateEndpointIndexWithError(
        this.#prismaClient,
        id,
        endpointIndex.endpoint.id,
        {
          message: body.message
        },
        endpointIndex.endpoint.environment.type !== "DEVELOPMENT"
      ) : updateEndpointIndexWithError(
        this.#prismaClient,
        id,
        endpointIndex.endpoint.id,
        {
          message: "Trigger API key is invalid"
        },
        endpointIndex.endpoint.environment.type !== "DEVELOPMENT"
      );
    }
    if (!response.ok)
      return updateEndpointIndexWithError(
        this.#prismaClient,
        id,
        endpointIndex.endpoint.id,
        {
          message: `Could not connect to endpoint ${endpointIndex.endpoint.url}. Status code: ${response.status}`
        },
        endpointIndex.endpoint.environment.type !== "DEVELOPMENT"
      );
    let anyBody = await response.json(), bodyResult = parser.safeParse(anyBody);
    if (!bodyResult.success) {
      let issues = [];
      bodyResult.error.issues.forEach((issue) => {
        if (issue.path.at(0) === "jobs") {
          let jobIndex = issue.path.at(1), job = anyBody.jobs[jobIndex];
          job && issues.push(`Job "${job.id}": ${issue.message} at "${issue.path.slice(2).join(".")}".`);
        }
      });
      let friendlyError;
      return issues.length > 0 ? friendlyError = `Your Jobs have issues:
${issues.map((issue) => `- ${issue}`).join(`
`)}` : friendlyError = (0, import_zod_validation_error4.fromZodError)(bodyResult.error, {
        prefix: "There's an issue with the format of your Jobs"
      }).message, updateEndpointIndexWithError(
        this.#prismaClient,
        id,
        endpointIndex.endpoint.id,
        {
          message: friendlyError,
          raw: (0, import_zod_validation_error4.fromZodError)(bodyResult.error).message
        },
        endpointIndex.endpoint.environment.type !== "DEVELOPMENT"
      );
    }
    let headerResult = headerParser.safeParse(Object.fromEntries(response.headers.entries()));
    if (!headerResult.success) {
      let friendlyError = (0, import_zod_validation_error4.fromZodError)(headerResult.error, {
        prefix: "Your headers are invalid"
      });
      return updateEndpointIndexWithError(
        this.#prismaClient,
        id,
        endpointIndex.endpoint.id,
        {
          message: friendlyError.message,
          raw: headerResult.error.issues
        },
        endpointIndex.endpoint.environment.type !== "DEVELOPMENT"
      );
    }
    let { jobs, sources, dynamicTriggers, dynamicSchedules, httpEndpoints, webhooks } = bodyResult.data, { "trigger-version": triggerVersion, "trigger-sdk-version": triggerSdkVersion } = headerResult.data, { endpoint } = endpointIndex;
    (triggerVersion && triggerVersion !== endpoint.version || triggerSdkVersion && triggerSdkVersion !== endpoint.sdkVersion) && await this.#prismaClient.endpoint.update({
      where: {
        id: endpoint.id
      },
      data: {
        version: triggerVersion,
        sdkVersion: triggerSdkVersion
      }
    });
    let indexStats = {
      jobs: 0,
      sources: 0,
      webhooks: 0,
      dynamicTriggers: 0,
      dynamicSchedules: 0,
      disabledJobs: 0,
      httpEndpoints: 0
    }, existingJobs = await this.#prismaClient.job.findMany({
      where: {
        projectId: endpoint.projectId,
        deletedAt: null
      },
      include: {
        aliases: {
          where: {
            name: "latest",
            environmentId: endpoint.environmentId
          },
          include: {
            version: !0
          },
          take: 1
        }
      }
    });
    for (let job of jobs)
      if (!job.enabled)
        await this.#disableJobService.call(endpoint, { slug: job.id, version: job.version }).catch((error) => {
          logger.error("Failed to disable job", {
            endpointId: endpoint.id,
            job,
            error
          });
        }) && indexStats.disabledJobs++;
      else
        try {
          await this.#registerJobService.call(endpoint, job) && (job.internal || indexStats.jobs++);
        } catch (error) {
          logger.error("Failed to register job", {
            endpointId: endpoint.id,
            job,
            error
          });
        }
    let missingJobs = existingJobs.filter((job) => !jobs.find((j) => j.id === job.slug));
    if (missingJobs.length > 0) {
      logger.debug("Disabling missing jobs", {
        endpointId: endpoint.id,
        missingJobIds: missingJobs.map((job) => job.slug)
      });
      for (let job of missingJobs) {
        let latestVersion = job.aliases[0]?.version;
        if (!latestVersion)
          continue;
        await this.#disableJobService.call(endpoint, {
          slug: job.slug,
          version: latestVersion.version
        }).catch((error) => {
          logger.error("Failed to disable job", {
            endpointId: endpoint.id,
            job,
            error
          });
        }) && indexStats.disabledJobs++;
      }
    }
    for (let source of sources)
      try {
        switch (source.version) {
          default:
          case "1": {
            await this.#registerSourceServiceV1.call(endpoint, source);
            break;
          }
          case "2": {
            await this.#registerSourceServiceV2.call(endpoint, source);
            break;
          }
        }
        indexStats.sources++;
      } catch (error) {
        logger.error("Failed to register source", {
          endpointId: endpoint.id,
          source,
          error
        });
      }
    for (let dynamicTrigger of dynamicTriggers)
      try {
        await this.#registerDynamicTriggerService.call(endpoint, dynamicTrigger), indexStats.dynamicTriggers++;
      } catch (error) {
        logger.error("Failed to register dynamic trigger", {
          endpointId: endpoint.id,
          dynamicTrigger,
          error
        });
      }
    for (let dynamicSchedule of dynamicSchedules)
      try {
        await this.#registerDynamicScheduleService.call(endpoint, dynamicSchedule), indexStats.dynamicSchedules++;
      } catch (error) {
        logger.error("Failed to register dynamic schedule", {
          endpointId: endpoint.id,
          dynamicSchedule,
          error
        });
      }
    if (httpEndpoints)
      for (let httpEndpoint2 of httpEndpoints)
        try {
          await this.#registerHttpEndpointService.call(endpoint, httpEndpoint2), indexStats.httpEndpoints++;
        } catch (error) {
          logger.error("Failed to register http endpoint", {
            endpointId: endpoint.id,
            httpEndpoint: httpEndpoint2,
            error
          });
        }
    if (webhooks)
      for (let webhook of webhooks)
        try {
          await this.#registerWebhookService.call(endpoint, webhook), indexStats.webhooks = indexStats.webhooks ?? 0 + 1;
        } catch (error) {
          logger.error("Failed to register webhook", {
            endpointId: endpoint.id,
            webhook,
            error
          });
        }
    return logger.debug("Endpoint indexing complete", {
      endpointId: endpoint.id,
      indexStats,
      source: endpointIndex.source,
      sourceData: endpointIndex.sourceData,
      reason: endpointIndex.reason
    }), await this.#prismaClient.endpointIndex.update({
      where: {
        id
      },
      data: {
        status: "SUCCESS",
        stats: indexStats,
        data: {
          jobs,
          sources,
          webhooks,
          dynamicTriggers,
          dynamicSchedules,
          httpEndpoints
        }
      }
    });
  }
};
async function updateEndpointIndexWithError(prismaClient, id, endpointId, error, checkDisabling = !0) {
  if (checkDisabling) {
    let recentIndexes = await prismaClient.endpointIndex.findMany({
      where: {
        endpointId,
        id: {
          not: id
        }
      },
      orderBy: {
        createdAt: "desc"
      },
      take: MAX_SEQUENTIAL_FAILURE_COUNT - 1,
      select: {
        status: !0
      }
    });
    recentIndexes.length === MAX_SEQUENTIAL_FAILURE_COUNT - 1 && recentIndexes.every((index) => index.status === "FAILURE") && (logger.debug("Disabling endpoint", {
      endpointId,
      error
    }), await prismaClient.endpoint.update({
      where: {
        id: endpointId
      },
      data: {
        url: null
      }
    }));
  }
  return await prismaClient.endpointIndex.update({
    where: {
      id
    },
    data: {
      status: "FAILURE",
      error
    }
  });
}
var redirectStatus = [301, 302, 303, 307, 308], redirectStatusSet = new Set(redirectStatus);
function isRedirect(status) {
  return redirectStatusSet.has(status);
}

// app/services/endpoints/indexEndpoint.server.ts
var IndexEndpointService = class {
  #prismaClient;
  constructor(prismaClient = prisma) {
    this.#prismaClient = prismaClient;
  }
  async call(id, source = "INTERNAL", reason, sourceData) {
    let endpointIndex = await this.#prismaClient.endpointIndex.create({
      data: {
        endpointId: id,
        status: "PENDING",
        source,
        reason,
        sourceData
      }
    });
    return await new PerformEndpointIndexService().call(endpointIndex.id);
  }
};

// app/services/endpoints/probeEndpoint.server.ts
var ProbeEndpointService = class {
  #prismaClient;
  constructor(prismaClient = prisma) {
    this.#prismaClient = prismaClient;
  }
  async call(id) {
    let endpoint = await this.#prismaClient.endpoint.findUnique({
      where: {
        id
      },
      include: {
        environment: !0
      }
    });
    if (!endpoint)
      return;
    if (logger.debug("Probing endpoint", {
      id
    }), !endpoint.url) {
      logger.debug("Endpoint has no url", {
        id
      });
      return;
    }
    let client3 = new EndpointApi(endpoint.environment.apiKey, endpoint.url), { response, durationInMs } = await client3.probe(12e4);
    if (!response)
      return;
    logger.debug("Probing endpoint complete", {
      id,
      durationInMs,
      response: {
        status: response.status,
        headers: Object.fromEntries(response.headers.entries())
      }
    });
    let rawBody = await response.text();
    (response.status === 200 || detectResponseIsTimeout(rawBody, response)) && await this.#prismaClient.endpoint.update({
      where: {
        id
      },
      data: {
        runChunkExecutionLimit: Math.min(
          Math.max(durationInMs, 1e4),
          12e4
        )
      }
    });
  }
};

// app/services/endpoints/recurringEndpointIndex.server.ts
var RecurringEndpointIndexService = class {
  #prismaClient;
  constructor(prismaClient = prisma) {
    this.#prismaClient = prismaClient;
  }
  async call(ts) {
    let currentTimestamp = ts.getTime(), endpoints = await this.#prismaClient.endpoint.findMany({
      where: {
        url: {
          not: null
        },
        environment: {
          type: {
            in: [src_exports.RuntimeEnvironmentType.PRODUCTION, src_exports.RuntimeEnvironmentType.STAGING]
          }
        },
        indexings: {
          none: {
            createdAt: {
              gt: new Date(currentTimestamp - 60 * 60 * 1e3)
            }
          }
        }
      }
    });
    logger.debug("Found endpoints that haven't been indexed in the last 10 minutes", {
      count: endpoints.length
    });
    for (let endpoint of endpoints) {
      let index = await this.#prismaClient.endpointIndex.create({
        data: {
          endpointId: endpoint.id,
          status: "PENDING",
          source: "INTERNAL"
        }
      });
      await workerQueue.enqueue("performEndpointIndexing", {
        id: index.id
      });
    }
  }
};

// app/services/events/deliverEvent.server.ts
var import_zod_validation_error5 = require("zod-validation-error");
var AlreadyDeliveredError = class extends Error {
  constructor() {
    super("Event already delivered");
  }
}, DeliverEventService = class {
  #prismaClient;
  constructor(prismaClient = prisma) {
    this.#prismaClient = prismaClient;
  }
  async call(id) {
    try {
      await $transaction(
        this.#prismaClient,
        async (tx) => {
          let eventRecord = await tx.eventRecord.findUniqueOrThrow({
            where: {
              id
            },
            include: {
              environment: {
                include: {
                  organization: !0,
                  project: !0
                }
              }
            }
          });
          if (eventRecord.deliveredAt) {
            logger.debug("Event already delivered", {
              eventRecord: eventRecord.id
            });
            return;
          }
          let possibleEventDispatchers = await tx.eventDispatcher.findMany({
            where: {
              environmentId: eventRecord.environmentId,
              event: {
                has: eventRecord.name
              },
              source: eventRecord.source,
              enabled: !0,
              manual: !1
            }
          });
          logger.debug("Found possible event dispatchers", {
            possibleEventDispatchers,
            eventRecord: eventRecord.id
          });
          let matchingEventDispatchers = possibleEventDispatchers.filter(
            (eventDispatcher) => this.#evaluateEventRule(eventDispatcher, eventRecord)
          );
          if (matchingEventDispatchers.length === 0) {
            logger.debug("No matching event dispatchers", {
              eventRecord: eventRecord.id
            });
            return;
          }
          if (logger.debug("Found matching event dispatchers", {
            matchingEventDispatchers,
            eventRecord: eventRecord.id
          }), await Promise.all(
            matchingEventDispatchers.map(
              (eventDispatcher) => workerQueue.enqueue(
                "events.invokeDispatcher",
                {
                  id: eventDispatcher.id,
                  eventRecordId: eventRecord.id
                },
                { tx }
              )
            )
          ), (await tx.eventRecord.updateMany({
            where: {
              id: eventRecord.id,
              deliveredAt: null
            },
            data: {
              deliveredAt: /* @__PURE__ */ new Date()
            }
          })).count === 0)
            throw new AlreadyDeliveredError();
        },
        { timeout: 1e4 }
      );
    } catch (error) {
      if (error instanceof AlreadyDeliveredError) {
        logger.debug("Event already delivered, AlreadyDeliveredError", {
          eventRecord: id
        });
        return;
      }
      throw error;
    }
  }
  #evaluateEventRule(dispatcher, eventRecord) {
    if (!dispatcher.payloadFilter && !dispatcher.contextFilter)
      return !0;
    if (dispatcher.externalAccountId && dispatcher.externalAccountId !== eventRecord.externalAccountId)
      return !1;
    let payloadFilter = EventFilterSchema.safeParse(dispatcher.payloadFilter ?? {}), contextFilter = EventFilterSchema.safeParse(dispatcher.contextFilter ?? {});
    return !payloadFilter.success || !contextFilter.success ? (logger.error("Invalid event filter", {
      payloadFilter,
      contextFilter
    }), !1) : new EventMatcher(eventRecord).matches({
      payload: payloadFilter.data,
      context: contextFilter.data
    });
  }
}, EventMatcher = class {
  constructor(event) {
    this.event = event;
  }
  matches(filter) {
    switch (this.event.payloadType) {
      case "REQUEST": {
        let result = RequestWithRawBodySchema.safeParse(this.event.payload);
        if (!result.success)
          return logger.error("Invalid payload, not a valid Raw REQUEST", {
            payload: this.event.payload,
            error: (0, import_zod_validation_error5.fromZodError)(result.error).message
          }), !1;
        if (result.data.headers["content-type"]?.includes("application/json")) {
          let body = JSON.parse(result.data.rawBody), requestPayload = {
            url: result.data.url,
            method: result.data.method,
            headers: result.data.headers,
            body
          };
          return eventFilterMatches(
            {
              context: this.event.context,
              payload: requestPayload
            },
            filter
          );
        }
        return eventFilterMatches(result.data, filter);
      }
      default:
        return eventFilterMatches(this.event, filter);
    }
  }
};

// app/services/externalApis/integrationConnectionCreated.server.ts
var IntegrationConnectionCreatedService = class {
  #prismaClient;
  constructor(prismaClient = prisma) {
    this.#prismaClient = prismaClient;
  }
  async call(id) {
    logger.debug("IntegrationConnectionCreatedService.call", { id });
    let connection = await this.#prismaClient.integrationConnection.findUniqueOrThrow({
      where: {
        id
      },
      include: {
        externalAccount: !0,
        integration: !0
      }
    }), missingConnection = await this.#prismaClient.missingConnection.findUnique({
      where: {
        integrationId_connectionType_accountIdentifier: {
          integrationId: connection.integrationId,
          connectionType: connection.connectionType,
          accountIdentifier: connection.externalAccount ? connection.externalAccount.id : "DEVELOPER"
        }
      },
      include: {
        runs: {
          include: {
            queue: !0,
            environment: {
              include: {
                project: !0,
                organization: !0
              }
            }
          },
          orderBy: {
            createdAt: "asc"
          }
        },
        integration: !0,
        externalAccount: !0
      }
    });
    if (!missingConnection || missingConnection.resolved)
      return;
    let firstRun = missingConnection.runs[0];
    if (!firstRun)
      return;
    let eventId = `${missingConnection.id}-resolved`;
    await new IngestSendEvent().call(firstRun.environment, {
      id: eventId,
      name: MISSING_CONNECTION_RESOLVED_NOTIFICATION,
      payload: {
        id: missingConnection.id,
        type: missingConnection.connectionType,
        client: {
          id: missingConnection.integration.slug,
          title: missingConnection.integration.title,
          scopes: missingConnection.integration.scopes,
          createdAt: missingConnection.integration.createdAt,
          updatedAt: missingConnection.integration.updatedAt
        },
        expiresAt: connection.expiresAt ?? void 0,
        account: missingConnection.externalAccount ? {
          id: missingConnection.externalAccount.identifier,
          metadata: missingConnection.externalAccount.metadata
        } : void 0
      },
      context: {}
    }), await this.#prismaClient.missingConnection.delete({
      where: {
        id: missingConnection.id
      }
    });
    for (let run of missingConnection.runs)
      logger.debug("[IntegrationConnectionCreatedService] restarting run", {
        run
      }), await workerQueue.enqueue("startRun", {
        id: run.id
      });
  }
};

// app/services/runs/deliverRunSubscription.server.ts
var import_node_crypto6 = require("node:crypto");
var DeliverRunSubscriptionService = class {
  #prismaClient;
  constructor(prismaClient = prisma) {
    this.#prismaClient = prismaClient;
  }
  async call(id) {
    let subscription = await this._findSubscription(id);
    if (!subscription || subscription.deliveredAt || subscription.status !== "ACTIVE")
      return;
    let { run } = subscription, payload = this.#getPayload(run);
    if (await this.#deliverPayload(subscription, payload))
      await this.#prismaClient.jobRunSubscription.update({
        where: {
          id
        },
        data: {
          deliveredAt: /* @__PURE__ */ new Date()
        }
      });
    else
      throw new Error(`Failed to deliver subscription ${id}`);
  }
  async #deliverPayload(subscription, payload) {
    switch (subscription.recipientMethod) {
      case "WEBHOOK": {
        let url = subscription.recipient, rawPayload = JSON.stringify(payload), hashPayload = Buffer.from(rawPayload, "utf-8"), hmacSecret = Buffer.from(subscription.run.environment.apiKey, "utf-8"), key = await import_node_crypto6.subtle.importKey(
          "raw",
          hmacSecret,
          { name: "HMAC", hash: "SHA-256" },
          !1,
          ["sign"]
        ), signature = await import_node_crypto6.subtle.sign("HMAC", key, hashPayload), signatureHex = Buffer.from(signature).toString("hex"), response = await fetch(url, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            "X-Trigger-Signature-256": signatureHex
          },
          body: rawPayload
        });
        if (!response.ok)
          throw new Error(
            `Failed to deliver webhook to ${url}: [${response.status}] ${response.statusText}`
          );
        return !0;
      }
      case "ENDPOINT": {
        if (subscription.recipient !== subscription.run.endpointId || subscription.run.endpoint.url === null)
          return !0;
        let response = await new EndpointApi(
          subscription.run.environment.apiKey,
          subscription.run.endpoint.url
        ).deliverRunNotification(payload);
        if (!response)
          throw new Error(
            `Failed to deliver endpoint notification to ${subscription.run.endpoint.url}`
          );
        if (!response.ok)
          throw new Error(
            `Failed to deliver endpoint notification to ${subscription.run.endpoint.url}: [${response.status}] ${response.statusText}`
          );
        return !0;
      }
    }
  }
  async _findSubscription(id) {
    return this.#prismaClient.jobRunSubscription.findUnique({
      where: {
        id
      },
      include: {
        run: {
          include: {
            job: !0,
            version: !0,
            statuses: !0,
            environment: !0,
            organization: !0,
            project: !0,
            event: !0,
            endpoint: !0,
            tasks: {
              where: {
                status: "ERRORED"
              },
              take: 1,
              orderBy: {
                startedAt: "desc"
              },
              include: {
                attempts: !0
              }
            }
          }
        }
      }
    });
  }
  #getPayload(run) {
    let { id, job, version: version3, statuses: statuses4, environment, organization, project, event, tasks } = run, task = tasks[0] ? {
      id: tasks[0].idempotencyKey,
      cacheKey: tasks[0].displayKey,
      status: tasks[0].status,
      name: tasks[0].name,
      icon: tasks[0].icon,
      startedAt: tasks[0].startedAt,
      error: tasks[0].output,
      params: tasks[0].params
    } : void 0;
    return {
      id,
      ok: run.status === "SUCCESS",
      status: run.status,
      startedAt: run.startedAt,
      updatedAt: run.updatedAt,
      completedAt: run.completedAt,
      isTest: run.isTest,
      executionDurationInMs: run.executionDuration,
      executionCount: run.executionCount,
      job: {
        id: job.slug,
        version: version3.version
      },
      statuses: statuses4.map((status) => ({
        key: status.key,
        label: status.label,
        state: status.state,
        data: status.data,
        history: status.history
      })),
      environment: {
        slug: environment.slug,
        id: environment.id,
        type: environment.type
      },
      organization: {
        slug: organization.slug,
        id: organization.id,
        title: organization.title
      },
      project: {
        slug: project.slug,
        id: project.id,
        name: project.name
      },
      invocation: {
        id: event.id,
        context: event.context,
        timestamp: event.timestamp,
        payload: event.payload
      },
      ...run.status === "SUCCESS" ? { output: run.output } : {
        error: run.output,
        task
      }
    };
  }
};

// app/services/runs/deliverRunSubscriptions.server.ts
var DeliverRunSubscriptionsService = class {
  #prismaClient;
  constructor(prismaClient = prisma) {
    this.#prismaClient = prismaClient;
  }
  async call(id) {
    let run = await this.#prismaClient.jobRun.findUnique({
      where: {
        id
      }
    });
    if (!run)
      return;
    let subscriptions = await this.#findSubscriptions(run);
    for (let subscription of subscriptions)
      await workerQueue.enqueue("deliverRunSubscription", {
        id: subscription.id
      });
  }
  async #findSubscriptions(run) {
    return await this.#prismaClient.jobRunSubscription.findMany({
      where: {
        runId: run.id,
        deliveredAt: null,
        status: "ACTIVE",
        event: run.status === "SUCCESS" ? "SUCCESS" : "FAILURE"
      }
    });
  }
};

// app/services/runs/missingConnectionCreated.server.ts
var MissingConnectionCreatedService = class {
  #prismaClient;
  constructor(prismaClient = prisma) {
    this.#prismaClient = prismaClient;
  }
  async call(id) {
    return await $transaction(this.#prismaClient, async (tx) => {
      let missingConnection = await tx.missingConnection.findUniqueOrThrow({
        where: {
          id
        },
        include: {
          runs: {
            include: {
              environment: {
                include: {
                  project: !0,
                  organization: !0
                }
              }
            },
            take: 1,
            orderBy: {
              createdAt: "asc"
            }
          },
          externalAccount: !0,
          integration: !0
        }
      });
      if (missingConnection.resolved)
        return;
      let firstRun = missingConnection.runs[0];
      if (!firstRun)
        return;
      let eventId = missingConnection.id;
      await new IngestSendEvent(tx).call(firstRun.environment, {
        id: eventId,
        name: MISSING_CONNECTION_NOTIFICATION,
        payload: {
          id: missingConnection.id,
          type: missingConnection.connectionType,
          client: {
            id: missingConnection.integration.slug,
            title: missingConnection.integration.title,
            scopes: missingConnection.integration.scopes,
            createdAt: missingConnection.integration.createdAt,
            updatedAt: missingConnection.integration.updatedAt
          },
          authorizationUrl: `${env2.APP_ORIGIN}/api/missing-connections/${missingConnection.id}/authorize`,
          // TODO: make this real
          account: missingConnection.externalAccount ? {
            id: missingConnection.externalAccount.identifier,
            metadata: missingConnection.externalAccount.metadata
          } : void 0
        },
        context: {}
      });
    });
  }
};

// app/services/runs/startRun.server.ts
var StartRunService = class {
  #prismaClient;
  constructor(prismaClient = prisma) {
    this.#prismaClient = prismaClient;
  }
  async call(id) {
    let run = await findRun3(this.#prismaClient, id);
    if (!run || !this.#runIsStartable(run))
      return;
    let runConnectionsByKey = await createRunConnections(this.#prismaClient, run);
    hasMissingConnections(runConnectionsByKey) ? await this.#handleMissingConnections(id, runConnectionsByKey) : await this.#startRun(id, run, runConnectionsByKey);
  }
  #runIsStartable(run) {
    return run.organization.runsEnabled ? ["PENDING", "WAITING_ON_CONNECTIONS"].includes(run.status) : (logger.debug("StartRunService: Runs are disabled for this organization", {
      organizationId: run.organization.id
    }), !1);
  }
  async #startRun(id, run, runConnectionsByKey) {
    let createRunConnections2 = Object.entries(runConnectionsByKey).map(
      ([key, runConnection]) => runConnection.result === "resolvedHosted" ? {
        key,
        connectionId: runConnection.connection.id,
        integrationId: runConnection.integration.id,
        authSource: "HOSTED"
      } : runConnection.result === "resolvedLocal" || runConnection.result === "resolvedResolver" ? {
        key,
        integrationId: runConnection.integration.id,
        authSource: runConnection.result === "resolvedLocal" ? "LOCAL" : "RESOLVER"
      } : void 0
    ).filter(Boolean);
    await autoIncrementCounter.incrementInTransaction(
      `v2-run:${run.jobId}`,
      async (num, tx) => {
        let updatedRun = await tx.jobRun.update({
          where: { id },
          data: {
            number: num,
            status: "QUEUED",
            queuedAt: /* @__PURE__ */ new Date(),
            runConnections: {
              create: createRunConnections2
            }
          }
        });
        await ResumeRunService.enqueue(updatedRun, tx);
      },
      async (_, tx) => (await tx.jobCounter.findUnique({
        where: { jobId: run.jobId },
        select: { lastNumber: !0 }
      }))?.lastNumber,
      this.#prismaClient,
      { timeout: 1e4 }
    );
  }
  async #handleMissingConnections(id, runConnectionsByKey) {
    let missingConnections = Object.values(runConnectionsByKey).map((runConnection) => runConnection.result === "missing" ? runConnection : void 0).filter(Boolean), updatedRun = await this.#prismaClient.jobRun.update({
      where: { id },
      data: {
        status: "WAITING_ON_CONNECTIONS",
        missingConnections: {
          connectOrCreate: missingConnections.map((connection) => ({
            where: {
              integrationId_connectionType_accountIdentifier: {
                integrationId: connection.integration.id,
                connectionType: connection.connectionType,
                accountIdentifier: connection.externalAccountId ?? "DEVELOPER"
              }
            },
            create: {
              integrationId: connection.integration.id,
              connectionType: connection.connectionType,
              accountIdentifier: connection.externalAccountId ?? "DEVELOPER",
              externalAccountId: connection.externalAccountId,
              resolved: !1
            }
          }))
        }
      },
      include: {
        missingConnections: {
          include: {
            _count: {
              select: { runs: !0 }
            }
          }
        }
      }
    });
    for (let missingConnection of updatedRun.missingConnections)
      missingConnection._count.runs === 1 && workerQueue.enqueue("missingConnectionCreated", {
        id: missingConnection.id
      });
  }
};
async function findRun3(tx, id) {
  return await tx.jobRun.findUnique({
    where: { id },
    include: {
      queue: !0,
      environment: !0,
      organization: !0,
      version: {
        include: {
          integrations: {
            include: {
              integration: !0
            }
          }
        }
      }
    }
  });
}
async function createRunConnections(tx, run) {
  return await run.version.integrations.reduce(
    async (accP, jobIntegration) => {
      let acc = await accP;
      if (jobIntegration.integration.authSource === "LOCAL")
        acc[jobIntegration.key] = {
          result: "resolvedLocal",
          integration: jobIntegration.integration
        };
      else if (jobIntegration.integration.authSource === "RESOLVER")
        acc[jobIntegration.key] = {
          result: "resolvedResolver",
          integration: jobIntegration.integration
        };
      else {
        let connection = run.externalAccountId ? await tx.integrationConnection.findFirst({
          where: {
            integrationId: jobIntegration.integration.id,
            connectionType: "EXTERNAL",
            externalAccountId: run.externalAccountId
          }
        }) : await tx.integrationConnection.findFirst({
          where: {
            integrationId: jobIntegration.integration.id,
            connectionType: "DEVELOPER"
          }
        });
        connection ? acc[jobIntegration.key] = {
          result: "resolvedHosted",
          connection,
          integration: jobIntegration.integration
        } : acc[jobIntegration.key] = {
          result: "missing",
          connectionType: run.externalAccountId ? "EXTERNAL" : "DEVELOPER",
          externalAccountId: run.externalAccountId ?? void 0,
          integration: jobIntegration.integration
        };
      }
      return acc;
    },
    Promise.resolve({})
  );
}
function hasMissingConnections(runConnectionsByKey) {
  return Object.values(runConnectionsByKey).some((connection) => connection.result === "missing");
}

// app/services/sources/activateSource.server.ts
var import_zod59 = require("zod");
var import_nanoid7 = require("nanoid"), ActivateSourceService = class {
  #prismaClient;
  constructor(prismaClient = prisma) {
    this.#prismaClient = prismaClient;
  }
  async call(id, jobId, orphanedOptions) {
    let triggerSource = await this.#prismaClient.triggerSource.findUniqueOrThrow({
      where: {
        id
      },
      include: {
        endpoint: !0,
        environment: {
          include: {
            organization: !0,
            project: !0
          }
        },
        options: !0,
        secretReference: !0
      }
    }), eventId = `${id}:${jobId ?? (0, import_nanoid7.nanoid)()}`;
    switch (triggerSource.channel) {
      case "HTTP":
        await this.#activateHttpSource(
          triggerSource.environment,
          triggerSource,
          triggerSource.options,
          triggerSource.secretReference,
          eventId,
          orphanedOptions
        );
    }
  }
  async #activateHttpSource(environment, triggerSource, options2, secretReference, eventId, orphanedOptions) {
    let httpSecret = await getSecretStore(secretReference.provider).getSecret(
      import_zod59.z.object({
        secret: import_zod59.z.string()
      }),
      secretReference.key
    );
    if (!httpSecret)
      throw new Error("HTTP Secret not found");
    let service = new IngestSendEvent(), source = {
      key: triggerSource.key,
      active: triggerSource.active,
      secret: httpSecret.secret,
      data: triggerSource.channelData,
      channel: {
        type: "HTTP",
        url: `${env2.APP_ORIGIN}/api/v1/sources/http/${triggerSource.id}`
      }
    };
    switch (triggerSource.version) {
      case "1": {
        let events = triggerSource.active ? options2.filter((e) => e.registered).map((e) => e.value) : options2.map((e) => e.value), missingEvents = triggerSource.active ? options2.filter((e) => !e.registered).map((e) => e.value) : [], orphanedEvents = orphanedOptions ? Object.values(orphanedOptions).flatMap((vals) => vals) : [], payload = {
          id: triggerSource.id,
          source,
          events,
          missingEvents,
          orphanedEvents
        };
        await service.call(environment, {
          id: eventId,
          name: REGISTER_SOURCE_EVENT_V1,
          source: "trigger.dev",
          payload
        });
        break;
      }
      case "2": {
        let optionsRecord = options2.reduce((acc, option) => (acc[option.name] || (acc[option.name] = []), acc[option.name].push(option), acc), {}), payloadOptions = Object.entries(optionsRecord).reduce(
          (acc, [key, value]) => ({
            ...acc,
            [key]: getOptionsDiff(triggerSource.active, orphanedOptions?.[key] ?? [], value)
          }),
          {}
        ), payload = {
          id: triggerSource.id,
          source,
          options: payloadOptions
        };
        await service.call(environment, {
          id: eventId,
          name: REGISTER_SOURCE_EVENT_V2,
          source: "trigger.dev",
          payload
        });
      }
    }
  }
};
function getOptionsDiff(sourceIsActive, orphaned, options2) {
  let desired = sourceIsActive ? options2.filter((e) => e.registered).map((e) => e.value) : options2.map((e) => e.value), missing = sourceIsActive ? options2.filter((e) => !e.registered).map((e) => e.value) : [];
  return {
    desired: [...new Set(desired)],
    missing: [...new Set(missing)],
    orphaned: [...new Set(orphaned)]
  };
}

// app/services/sources/deliverHttpSourceRequest.server.ts
var import_zod60 = require("zod");

// app/models/sourceConnection.server.ts
async function resolveSourceConnection(tx, source) {
  if (source.integration.authSource !== "HOSTED")
    return;
  let connection = await getConnection(tx, source);
  if (!connection) {
    logger.error(
      `Integration connection not found for source ${source.id}, integration ${source.integration.id}`
    );
    return;
  }
  let response = await integrationAuthRepository.getCredentials(connection);
  if (response)
    return {
      type: "oauth2",
      scopes: response.scopes,
      accessToken: response.accessToken
    };
}
function getConnection(tx, source) {
  return source.externalAccount ? tx.integrationConnection.findFirst({
    where: {
      integrationId: source.integration.id,
      externalAccountId: source.externalAccount.id
    },
    include: {
      dataReference: !0
    }
  }) : tx.integrationConnection.findFirst({
    where: {
      integrationId: source.integration.id
    },
    include: {
      dataReference: !0
    }
  });
}

// app/services/sources/deliverHttpSourceRequest.server.ts
var DeliverHttpSourceRequestService = class {
  #prismaClient;
  constructor(prismaClient = prisma) {
    this.#prismaClient = prismaClient;
  }
  async call(id) {
    let httpSourceRequest = await this.#prismaClient.httpSourceRequestDelivery.findUniqueOrThrow({
      where: { id },
      include: {
        endpoint: !0,
        environment: {
          include: {
            organization: !0,
            project: !0
          }
        },
        source: {
          include: {
            secretReference: !0,
            dynamicTrigger: !0,
            externalAccount: !0,
            integration: {
              include: {
                connections: !0
              }
            }
          }
        }
      }
    });
    if (!httpSourceRequest.source.active || !httpSourceRequest.endpoint.url)
      return;
    let secret2 = await getSecretStore(httpSourceRequest.source.secretReference.provider).getSecret(
      import_zod60.z.object({
        secret: import_zod60.z.string()
      }),
      httpSourceRequest.source.secretReference.key
    );
    if (!secret2)
      throw new Error(`Secret not found for ${httpSourceRequest.source.key}`);
    let auth = await resolveSourceConnection(this.#prismaClient, httpSourceRequest.source), clientApi = new EndpointApi(
      httpSourceRequest.environment.apiKey,
      httpSourceRequest.endpoint.url
    ), { response, events, metadata } = await clientApi.deliverHttpSourceRequest({
      key: httpSourceRequest.source.key,
      dynamicId: httpSourceRequest.source.dynamicTrigger?.slug,
      secret: secret2.secret,
      params: httpSourceRequest.source.params,
      data: httpSourceRequest.source.channelData,
      request: {
        url: httpSourceRequest.url,
        method: httpSourceRequest.method,
        headers: httpSourceRequest.headers,
        rawBody: httpSourceRequest.body
      },
      auth,
      metadata: httpSourceRequest.source.metadata
    });
    await this.#prismaClient.httpSourceRequestDelivery.update({
      where: {
        id
      },
      data: {
        deliveredAt: /* @__PURE__ */ new Date()
      }
    }), metadata && await this.#prismaClient.triggerSource.update({
      where: {
        id: httpSourceRequest.source.id
      },
      data: {
        metadata
      }
    });
    let ingestService = new IngestSendEvent();
    for (let event of events)
      await ingestService.call(
        httpSourceRequest.environment,
        event,
        {
          accountId: httpSourceRequest.source.externalAccount?.identifier
        },
        httpSourceRequest.source.dynamicSourceId ? {
          id: httpSourceRequest.source.dynamicSourceId,
          metadata: httpSourceRequest.source.dynamicSourceMetadata
        } : void 0
      );
    return response;
  }
};

// app/services/sources/deliverWebhookRequest.server.ts
var import_zod61 = require("zod");
var DeliverWebhookRequestService = class {
  #prismaClient;
  constructor(prismaClient = prisma) {
    this.#prismaClient = prismaClient;
  }
  async call(id) {
    let requestDelivery = await this.#prismaClient.webhookRequestDelivery.findUniqueOrThrow({
      where: {
        id
      },
      include: {
        webhook: {
          include: {
            integration: {
              include: {
                connections: !0
              }
            },
            httpEndpoint: {
              include: {
                secretReference: !0
              }
            }
          }
        },
        webhookEnvironment: {
          include: {
            environment: {
              include: {
                organization: !0,
                project: !0
              }
            }
          }
        },
        endpoint: !0
      }
    });
    if (!requestDelivery.webhookEnvironment.active || !requestDelivery.endpoint.url)
      return;
    let { secretReference } = requestDelivery.webhook.httpEndpoint, secret2 = await getSecretStore(secretReference.provider).getSecret(
      import_zod61.z.object({
        secret: import_zod61.z.string()
      }),
      secretReference.key
    );
    if (!secret2)
      throw new Error(`Secret not found for ${requestDelivery.webhook.key}`);
    let clientApi = new EndpointApi(
      requestDelivery.webhookEnvironment.environment.apiKey,
      requestDelivery.endpoint.url
    ), { response, verified, error } = await clientApi.deliverWebhookRequest({
      key: requestDelivery.webhook.key,
      secret: secret2.secret,
      params: requestDelivery.webhook.params,
      request: {
        url: requestDelivery.url,
        method: requestDelivery.method,
        headers: requestDelivery.headers,
        rawBody: requestDelivery.body
      }
    });
    return await this.#prismaClient.webhookRequestDelivery.update({
      where: {
        id
      },
      data: {
        deliveredAt: /* @__PURE__ */ new Date(),
        verified,
        error
      }
    }), response;
  }
};

// app/services/tasks/performTaskOperation.server.ts
var import_fetch = require("@whatwg-node/fetch"), import_zod_validation_error6 = require("zod-validation-error");
var PerformTaskOperationService = class {
  #prismaClient;
  constructor(prismaClient = prisma) {
    this.#prismaClient = prismaClient;
  }
  async call(id) {
    let task = await findTask2(this.#prismaClient, id);
    if (task && task.status !== "CANCELED") {
      if (task.status === "COMPLETED" || task.status === "ERRORED")
        return await this.#resumeRunExecution(task, this.#prismaClient);
      if (!task.operation)
        return await this.#resumeTask(task, null, null, 200, "fetch", 0);
      switch (task.operation) {
        case "fetch-poll": {
          let pollOperation = FetchPollOperationSchema.safeParse(task.params);
          if (!pollOperation.success)
            return await this.#resumeTaskWithError(
              task,
              (0, import_zod_validation_error6.fromZodError)(pollOperation.error, {
                prefix: "Invalid fetch poll params"
              }).message
            );
          let { url, requestInit, timeout, interval, responseFilter, requestTimeout } = pollOperation.data, startedAt = task.startedAt;
          if (!startedAt)
            return await this.#resumeTaskWithError(task, {
              message: "Task has not been started"
            });
          if (Date.now() - startedAt.getTime() > timeout * 1e3)
            return await this.#resumeTaskWithError(task, {
              message: `Task timed out after ${timeout} seconds`
            });
          let startTimeInMs = performance.now(), abortController = new AbortController(), actualTimeoutInMs = Math.min(
            Math.max(requestTimeout?.durationInMs ?? 5e3, 1e3),
            5e3
          ), timeoutId = setTimeout(() => {
            abortController.abort();
          }, actualTimeoutInMs);
          try {
            logger.debug("PerformTaskOperationService.call poll request", {
              task,
              actualTimeoutInMs,
              url,
              responseFilter
            });
            let startedAt2 = /* @__PURE__ */ new Date(), method = requestInit?.method ?? "GET", response = await (0, import_fetch.fetch)(url, {
              method,
              headers: normalizeHeaders(requestInit?.headers ?? {}),
              body: requestInit?.body,
              signal: abortController.signal
            });
            clearTimeout(timeoutId);
            let durationInMs = Math.floor(performance.now() - startTimeInMs), headers = Object.fromEntries(response.headers.entries());
            logger.debug("PerformTaskOperationService.call poll response", {
              url,
              requestInit,
              statusCode: response.status,
              headers: Object.fromEntries(response.headers.entries()),
              durationInMs
            });
            let matchResult = await responseFilterMatches(response, responseFilter);
            if (await this.#prismaClient.task.create({
              data: {
                id: ulid2(),
                idempotencyKey: ulid2(),
                runId: task.runId,
                parentId: task.id,
                name: "poll attempt",
                icon: "activity",
                status: "COMPLETED",
                noop: !0,
                style: { style: "minimal", variant: "info" },
                description: `${method} ${url} ${response.status}`,
                params: {
                  status: response.status,
                  headers,
                  body: matchResult.body
                },
                startedAt: startedAt2,
                completedAt: /* @__PURE__ */ new Date()
              }
            }), matchResult.match)
              return logger.debug("PerformTaskOperationService.call poll response matched", {
                url,
                matchResult
              }), await this.#resumeTask(
                task,
                matchResult.body,
                Object.fromEntries(response.headers.entries()),
                response.status,
                "fetch",
                durationInMs
              );
            {
              let retryAt = new Date(Date.now() + interval * 1e3);
              return await this.#retryTask(task, retryAt);
            }
          } catch (error) {
            if (error instanceof Error && error.name === "AbortError") {
              let durationInMs = Math.floor(performance.now() - startTimeInMs);
              logger.debug("PerformTaskOperationService.call poll timed out", {
                url,
                durationInMs,
                error
              });
              let retryAt = this.#calculateRetryForTimeout(task, requestTimeout?.retry);
              return retryAt ? await this.#retryTask(task, retryAt) : await this.#resumeTaskWithError(task, {
                message: `Fetch timed out after ${actualTimeoutInMs.toFixed(0)}ms`
              });
            }
            throw error;
          }
        }
        case "fetch":
        case "fetch-response": {
          let fetchOperation = FetchOperationSchema.safeParse(task.params);
          if (!fetchOperation.success)
            return await this.#resumeTaskWithError(
              task,
              `Invalid fetch operation: ${fetchOperation.error.message}`
            );
          let { url, requestInit, retry: retry2, timeout } = fetchOperation.data, startTimeInMs = performance.now(), abortController = new AbortController(), actualTimeoutInMs = Math.min(Math.max(timeout?.durationInMs ?? 12e4, 1e3), 3e5), timeoutId = setTimeout(() => {
            abortController.abort();
          }, actualTimeoutInMs);
          try {
            logger.debug("PerformTaskOperationService.call fetch request", {
              task,
              actualTimeoutInMs,
              url,
              retry: retry2
            });
            let response = await (0, import_fetch.fetch)(url, {
              method: requestInit?.method ?? "GET",
              headers: normalizeHeaders(requestInit?.headers ?? {}),
              body: requestInit?.body,
              signal: abortController.signal
            });
            clearTimeout(timeoutId);
            let durationInMs = Math.floor(performance.now() - startTimeInMs), jsonBody = await safeJsonFromResponse(response);
            if (logger.debug("PerformTaskOperationService.call fetch response", {
              url,
              requestInit,
              retry: retry2,
              statusCode: response.status,
              headers: Object.fromEntries(response.headers.entries()),
              jsonBody,
              durationInMs
            }), !response.ok) {
              let retryAt = this.#calculateRetryForResponse(task, retry2, response, jsonBody);
              return retryAt ? await this.#retryTaskWithError(
                task,
                `Fetch failed with status ${response.status}`,
                retryAt
              ) : jsonBody ? await this.#resumeTaskWithError(task, jsonBody) : await this.#resumeTaskWithError(task, {
                message: `Fetch failed with status ${response.status}`
              });
            }
            return await this.#resumeTask(
              task,
              jsonBody,
              Object.fromEntries(response.headers.entries()),
              response.status,
              task.operation,
              durationInMs
            );
          } catch (error) {
            if (error instanceof Error && error.name === "AbortError") {
              let durationInMs = Math.floor(performance.now() - startTimeInMs);
              logger.debug("PerformTaskOperationService.call fetch timed out", {
                url,
                durationInMs,
                error
              });
              let retryAt = this.#calculateRetryForTimeout(task, timeout?.retry);
              return retryAt ? await this.#retryTaskWithError(
                task,
                `Fetch timed out after ${actualTimeoutInMs.toFixed(0)}ms`,
                retryAt
              ) : await this.#resumeTaskWithError(task, {
                message: `Fetch timed out after ${actualTimeoutInMs.toFixed(0)}ms`
              });
            }
            throw error;
          }
        }
        default:
          await this.#resumeTaskWithError(task, {
            message: `Unknown operation: ${task.operation}`
          });
      }
    }
  }
  #calculateRetryForResponse(task, retry2, response, body) {
    if (!retry2)
      return;
    let strategy = this.#getRetryStrategyForResponse(response, body, retry2);
    if (strategy)
      switch (logger.debug("Calculating retry at for strategy", {
        strategy,
        status: response.status,
        retry: retry2
      }), strategy.strategy) {
        case "backoff":
          return calculateRetryAt(strategy, task.attempts.length - 1);
        case "headers": {
          let resetAt = response.headers.get(strategy.resetHeader);
          if (typeof resetAt == "string")
            return calculateResetAt(resetAt, strategy.resetFormat);
        }
      }
  }
  #calculateRetryForTimeout(task, retry2) {
    if (retry2)
      return calculateRetryAt(retry2, task.attempts.length - 1);
  }
  #getRetryStrategyForResponse(response, body, retry2) {
    let statusCodes = Object.keys(retry2);
    for (let i = 0; i < statusCodes.length; i++) {
      let statusRange = statusCodes[i], strategy = retry2[statusRange];
      if (isStatusCodeInRange(response.status, statusRange)) {
        if (strategy.bodyFilter) {
          if (!body)
            continue;
          if (eventFilterMatches(body, strategy.bodyFilter))
            return strategy;
          continue;
        }
        return strategy;
      }
    }
  }
  async #retryTaskWithError(task, error, retryAt) {
    await $transaction(this.#prismaClient, async (tx) => {
      await tx.taskAttempt.updateMany({
        where: {
          taskId: task.id,
          status: "PENDING"
        },
        data: {
          status: "ERRORED",
          error
        }
      });
      let newNumber = ((await tx.taskAttempt.aggregate({
        where: { taskId: task.id },
        _max: { number: !0 }
      }))._max.number ?? 0) + 1;
      await tx.taskAttempt.create({
        data: {
          status: "PENDING",
          taskId: task.id,
          number: newNumber,
          runAt: retryAt
        }
      }), await taskOperationWorker.enqueue(
        "performTaskOperation",
        {
          id: task.id
        },
        { tx, runAt: retryAt, jobKey: `operation:${task.id}` }
      );
    });
  }
  async #retryTask(task, retryAt) {
    await taskOperationWorker.enqueue(
      "performTaskOperation",
      {
        id: task.id
      },
      { runAt: retryAt, jobKey: `operation:${task.id}` }
    );
  }
  async #resumeTaskWithError(task, output) {
    await $transaction(this.#prismaClient, async (tx) => {
      await tx.task.update({
        where: { id: task.id },
        data: {
          status: "ERRORED",
          completedAt: /* @__PURE__ */ new Date(),
          output
        }
      }), await tx.taskAttempt.updateMany({
        where: {
          taskId: task.id,
          status: "PENDING"
        },
        data: {
          status: "ERRORED",
          error: formatUnknownError(output)
        }
      }), await this.#resumeRunExecution(task, tx);
    });
  }
  async #resumeTask(task, output, context7, status, operation, durationInMs) {
    await $transaction(this.#prismaClient, async (tx) => {
      await tx.taskAttempt.updateMany({
        where: {
          taskId: task.id,
          status: "PENDING"
        },
        data: {
          status: "COMPLETED"
        }
      });
      let taskOutput = operation === "fetch" ? output : {
        data: output,
        headers: context7,
        status
      };
      await tx.task.update({
        where: { id: task.id },
        data: {
          status: "COMPLETED",
          completedAt: /* @__PURE__ */ new Date(),
          output: taskOutput,
          context: context7 || void 0,
          run: {
            update: {
              executionDuration: {
                increment: durationInMs
              }
            }
          }
        }
      }), await this.#resumeRunExecution(task, tx);
    });
  }
  async #resumeRunExecution(task, prisma5) {
    await ResumeTaskService.enqueue(task.id, void 0, prisma5);
  }
};
function normalizeHeaders(headers) {
  return headers ? Object.fromEntries(
    Object.entries(headers).map(([key, value]) => [
      key,
      typeof value == "string" ? value : hydrateRedactedString(value)
    ])
  ) : {};
}
function hydrateRedactedString(value) {
  let result = "";
  for (let i = 0; i < value.strings.length; i++)
    result += value.strings[i], i < value.interpolations.length && (result += value.interpolations[i]);
  return result;
}
async function findTask2(prisma5, id) {
  return prisma5.task.findUnique({
    where: { id },
    include: {
      attempts: !0,
      run: {
        include: {
          environment: !0,
          queue: !0
        }
      }
    }
  });
}
function isStatusCodeInRange(statusCode, statusRange) {
  if (statusRange === "all")
    return !0;
  if (statusRange.includes(","))
    return statusRange.split(",").map((s) => s.trim()).includes(statusCode.toString());
  let [start, end] = statusRange.split("-");
  if (end)
    return statusCode >= parseInt(start, 10) && statusCode <= parseInt(end, 10);
  if (start.endsWith("xx")) {
    let prefix = start.slice(0, -2);
    return Math.floor(statusCode / 100).toString() === prefix;
  }
  let statusCodeString = statusCode.toString(), rangePrefix = start.slice(0, -1);
  return start.endsWith("x") && statusCodeString.startsWith(rangePrefix) ? !0 : statusCode === parseInt(start, 10);
}

// app/services/tasks/processCallbackTimeout.server.ts
var ProcessCallbackTimeoutService = class {
  #prismaClient;
  constructor(prismaClient = prisma) {
    this.#prismaClient = prismaClient;
  }
  async call(id) {
    let task = await findTask3(this.#prismaClient, id);
    if (task && !(task.status !== "WAITING" || !task.callbackUrl))
      return logger.debug("ProcessCallbackTimeoutService.call", { task }), await this.#failTask(task, "Remote callback timeout - no requests received");
  }
  async #failTask(task, error) {
    await $transaction(this.#prismaClient, async (tx) => {
      await tx.taskAttempt.updateMany({
        where: {
          taskId: task.id,
          status: "PENDING"
        },
        data: {
          status: "ERRORED",
          error
        }
      }), await tx.task.update({
        where: { id: task.id },
        data: {
          status: "ERRORED",
          completedAt: /* @__PURE__ */ new Date(),
          output: error
        }
      }), await this.#resumeRunExecution(task, tx);
    });
  }
  async #resumeRunExecution(task, prisma5) {
    await ResumeTaskService.enqueue(task.id, void 0, prisma5);
  }
};
async function findTask3(prisma5, id) {
  return prisma5.task.findUnique({
    where: { id },
    include: {
      run: {
        include: {
          environment: !0,
          queue: !0
        }
      }
    }
  });
}

// app/services/worker.server.ts
var workerCatalog = {
  indexEndpoint: import_zod62.z.object({
    id: import_zod62.z.string(),
    source: import_zod62.z.enum(["MANUAL", "API", "INTERNAL", "HOOK"]).optional(),
    sourceData: import_zod62.z.any().optional(),
    reason: import_zod62.z.string().optional()
  }),
  performEndpointIndexing: import_zod62.z.object({
    id: import_zod62.z.string()
  }),
  scheduleEmail: DeliverEmailSchema,
  startRun: import_zod62.z.object({ id: import_zod62.z.string() }),
  processCallbackTimeout: import_zod62.z.object({
    id: import_zod62.z.string()
  }),
  deliverHttpSourceRequest: import_zod62.z.object({ id: import_zod62.z.string() }),
  deliverWebhookRequest: import_zod62.z.object({ id: import_zod62.z.string() }),
  refreshOAuthToken: import_zod62.z.object({
    organizationId: import_zod62.z.string(),
    connectionId: import_zod62.z.string()
  }),
  activateSource: import_zod62.z.preprocess(
    addMissingVersionField,
    import_zod62.z.discriminatedUnion("version", [
      import_zod62.z.object({
        version: import_zod62.z.literal("1"),
        id: import_zod62.z.string(),
        orphanedEvents: import_zod62.z.array(import_zod62.z.string()).optional()
      }),
      import_zod62.z.object({
        version: import_zod62.z.literal("2"),
        id: import_zod62.z.string(),
        orphanedOptions: import_zod62.z.record(import_zod62.z.string(), import_zod62.z.array(import_zod62.z.string())).optional()
      })
    ])
  ),
  deliverEvent: import_zod62.z.object({ id: import_zod62.z.string() }),
  "events.invokeDispatcher": import_zod62.z.object({
    id: import_zod62.z.string(),
    eventRecordId: import_zod62.z.string()
  }),
  "events.deliverScheduled": import_zod62.z.object({
    id: import_zod62.z.string(),
    payload: ScheduledPayloadSchema
  }),
  missingConnectionCreated: import_zod62.z.object({
    id: import_zod62.z.string()
  }),
  connectionCreated: import_zod62.z.object({
    id: import_zod62.z.string()
  }),
  probeEndpoint: import_zod62.z.object({
    id: import_zod62.z.string()
  }),
  simulate: import_zod62.z.object({
    seconds: import_zod62.z.number()
  }),
  deliverRunSubscriptions: import_zod62.z.object({
    id: import_zod62.z.string()
  }),
  deliverRunSubscription: import_zod62.z.object({
    id: import_zod62.z.string()
  }),
  resumeTask: import_zod62.z.object({
    id: import_zod62.z.string()
  }),
  expireDispatcher: import_zod62.z.object({
    id: import_zod62.z.string()
  }),
  resumeRun: import_zod62.z.object({
    id: import_zod62.z.string()
  }),
  // v3 tasks
  "v3.indexDeployment": import_zod62.z.object({
    id: import_zod62.z.string()
  }),
  "v3.resumeTaskRunDependencies": import_zod62.z.object({
    attemptId: import_zod62.z.string()
  }),
  "v3.resumeBatchRun": import_zod62.z.object({
    batchRunId: import_zod62.z.string(),
    sourceTaskAttemptId: import_zod62.z.string()
  }),
  "v3.resumeTaskDependency": import_zod62.z.object({
    dependencyId: import_zod62.z.string(),
    sourceTaskAttemptId: import_zod62.z.string()
  }),
  "v3.timeoutDeployment": import_zod62.z.object({
    deploymentId: import_zod62.z.string(),
    fromStatus: import_zod62.z.string(),
    errorMessage: import_zod62.z.string()
  }),
  "v3.executeTasksWaitingForDeploy": import_zod62.z.object({
    backgroundWorkerId: import_zod62.z.string()
  }),
  "v3.triggerScheduledTask": import_zod62.z.object({
    instanceId: import_zod62.z.string()
  }),
  "v3.performTaskAttemptAlerts": import_zod62.z.object({
    attemptId: import_zod62.z.string()
  }),
  "v3.deliverAlert": import_zod62.z.object({
    alertId: import_zod62.z.string()
  }),
  "v3.performDeploymentAlerts": import_zod62.z.object({
    deploymentId: import_zod62.z.string()
  }),
  "v3.performBulkAction": import_zod62.z.object({
    bulkActionGroupId: import_zod62.z.string()
  }),
  "v3.performBulkActionItem": import_zod62.z.object({
    bulkActionItemId: import_zod62.z.string()
  }),
  "v3.requeueTaskRun": import_zod62.z.object({
    runId: import_zod62.z.string()
  }),
  "v3.retryAttempt": import_zod62.z.object({
    runId: import_zod62.z.string()
  }),
  "v2.requeueMessage": import_zod62.z.object({
    runId: import_zod62.z.string()
  }),
  "v3.reportUsage": import_zod62.z.object({
    orgId: import_zod62.z.string(),
    data: import_zod62.z.object({
      costInCents: import_zod62.z.string()
    }),
    additionalData: import_zod62.z.record(import_zod62.z.any()).optional()
  }),
  "v3.enqueueDelayedRun": import_zod62.z.object({
    runId: import_zod62.z.string()
  }),
  "v3.expireRun": import_zod62.z.object({
    runId: import_zod62.z.string()
  }),
  "v3.cancelTaskAttemptDependencies": import_zod62.z.object({
    attemptId: import_zod62.z.string()
  })
}, executionWorkerCatalog = {
  performRunExecutionV2: import_zod62.z.object({
    id: import_zod62.z.string(),
    reason: import_zod62.z.enum(["EXECUTE_JOB", "PREPROCESS"]),
    resumeTaskId: import_zod62.z.string().optional(),
    isRetry: import_zod62.z.boolean()
  }),
  performRunExecutionV3: import_zod62.z.object({
    id: import_zod62.z.string(),
    reason: import_zod62.z.enum(["EXECUTE_JOB", "PREPROCESS"])
  })
}, taskOperationWorkerCatalog = {
  performTaskOperation: import_zod62.z.object({
    id: import_zod62.z.string()
  }),
  invokeEphemeralDispatcher: import_zod62.z.object({
    id: import_zod62.z.string(),
    eventRecordId: import_zod62.z.string()
  })
}, workerQueue, executionWorker, taskOperationWorker;
env2.NODE_ENV === "production" ? (workerQueue = getWorkerQueue(), executionWorker = getExecutionWorkerQueue(), taskOperationWorker = getTaskOperationWorkerQueue()) : (global.__worker__ || (global.__worker__ = getWorkerQueue()), workerQueue = global.__worker__, global.__executionWorker__ || (global.__executionWorker__ = getExecutionWorkerQueue()), executionWorker = global.__executionWorker__, global.__taskOperationWorker__ || (global.__taskOperationWorker__ = getTaskOperationWorkerQueue()), taskOperationWorker = global.__taskOperationWorker__);
async function init() {
  await new GraphileMigrationHelperService().call(), env2.WORKER_ENABLED === "true" && await workerQueue.initialize(), env2.EXECUTION_WORKER_ENABLED === "true" && await executionWorker.initialize(), env2.TASK_OPERATION_WORKER_ENABLED === "true" && await taskOperationWorker.initialize();
}
function getWorkerQueue() {
  return new ZodWorker({
    name: "workerQueue",
    prisma,
    runnerOptions: {
      connectionString: env2.DATABASE_URL,
      concurrency: env2.WORKER_CONCURRENCY,
      pollInterval: env2.WORKER_POLL_INTERVAL,
      noPreparedStatements: env2.DATABASE_URL !== env2.DIRECT_URL,
      schema: env2.WORKER_SCHEMA,
      maxPoolSize: env2.WORKER_CONCURRENCY + 1
    },
    shutdownTimeoutInMs: env2.GRACEFUL_SHUTDOWN_TIMEOUT,
    schema: workerCatalog,
    recurringTasks: {
      // Run this every 5 minutes
      autoIndexProductionEndpoints: {
        match: "*/30 * * * *",
        handler: async (payload, job) => {
          await new RecurringEndpointIndexService().call(payload.ts);
        }
      },
      scheduleImminentDeferredEvents: {
        match: "*/10 * * * *",
        handler: async (payload, job) => {
          await DeliverScheduledEventService.scheduleImminentDeferredEvents();
        }
      },
      // Run this every hour
      purgeOldIndexings: {
        match: "0 * * * *",
        handler: async (payload, job) => {
          await prisma.endpointIndex.deleteMany({
            where: {
              createdAt: {
                lt: new Date(Date.now() - 7 * 24 * 60 * 60 * 1e3)
              }
            }
          });
        }
      },
      // Run this every hour at the 13 minute mark
      purgeOldTaskEvents: {
        match: "47 * * * *",
        handler: async (payload, job) => {
          await eventRepository.truncateEvents();
        }
      },
      "marqs.v3.queueConcurrencyMonitor": {
        // run every 5 minutes
        match: "*/5 * * * *",
        handler: async (payload, job, helpers) => {
          await MarqsConcurrencyMonitor.initiateV3Monitoring(helpers.abortSignal);
        }
      },
      "marqs.v2.queueConcurrencyMonitor": {
        match: "*/5 * * * *",
        // run every 5 minutes
        handler: async (payload, job, helpers) => {
          await MarqsConcurrencyMonitor.initiateV2Monitoring(helpers.abortSignal);
        }
      }
    },
    tasks: {
      "events.invokeDispatcher": {
        priority: 0,
        // smaller number = higher priority
        maxAttempts: 6,
        handler: async (payload, job) => {
          await new InvokeDispatcherService().call(payload.id, payload.eventRecordId);
        }
      },
      "events.deliverScheduled": {
        priority: 0,
        // smaller number = higher priority
        maxAttempts: 8,
        handler: async ({ id, payload }, job) => {
          await new DeliverScheduledEventService().call(id, payload);
        }
      },
      connectionCreated: {
        priority: 10,
        // smaller number = higher priority
        maxAttempts: 3,
        handler: async (payload, job) => {
          await new IntegrationConnectionCreatedService().call(payload.id);
        }
      },
      missingConnectionCreated: {
        priority: 10,
        // smaller number = higher priority
        maxAttempts: 3,
        handler: async (payload, job) => {
          await new MissingConnectionCreatedService().call(payload.id);
        }
      },
      activateSource: {
        priority: 0,
        // smaller number = higher priority
        maxAttempts: 3,
        handler: async (payload, graphileJob) => {
          let service = new ActivateSourceService();
          switch (payload.version) {
            case "1": {
              await service.call(
                payload.id,
                graphileJob.id,
                payload.orphanedEvents ? {
                  event: payload.orphanedEvents
                } : void 0
              );
              break;
            }
            case "2": {
              await service.call(payload.id, graphileJob.id, payload.orphanedOptions);
              break;
            }
          }
        }
      },
      deliverHttpSourceRequest: {
        priority: 0,
        // smaller number = higher priority
        maxAttempts: 14,
        handler: async (payload, job) => {
          await new DeliverHttpSourceRequestService().call(payload.id);
        }
      },
      deliverWebhookRequest: {
        priority: 0,
        // smaller number = higher priority
        maxAttempts: 14,
        handler: async (payload, job) => {
          await new DeliverWebhookRequestService().call(payload.id);
        }
      },
      startRun: {
        priority: 0,
        // smaller number = higher priority
        maxAttempts: 4,
        handler: async (payload, job) => {
          await new StartRunService().call(payload.id);
        }
      },
      processCallbackTimeout: {
        priority: 0,
        // smaller number = higher priority
        maxAttempts: 3,
        handler: async (payload, job) => {
          await new ProcessCallbackTimeoutService().call(payload.id);
        }
      },
      scheduleEmail: {
        priority: 0,
        maxAttempts: 3,
        handler: async (payload, job) => {
          await sendEmail(payload);
        }
      },
      indexEndpoint: {
        priority: 0,
        // smaller number = higher priority
        maxAttempts: 7,
        handler: async (payload, job) => {
          await new IndexEndpointService().call(payload.id, payload.source, payload.reason, payload.sourceData);
        }
      },
      performEndpointIndexing: {
        priority: 0,
        // smaller number = higher priority
        maxAttempts: 7,
        handler: async (payload, job) => {
          await new PerformEndpointIndexService().call(payload.id);
        }
      },
      deliverEvent: {
        priority: 0,
        // smaller number = higher priority
        maxAttempts: 5,
        handler: async (payload, job) => {
          await new DeliverEventService().call(payload.id);
        }
      },
      refreshOAuthToken: {
        priority: 0,
        // smaller number = higher priority
        maxAttempts: 7,
        handler: async (payload, job) => {
          await integrationAuthRepository.refreshConnection({
            connectionId: payload.connectionId
          });
        }
      },
      probeEndpoint: {
        priority: 0,
        maxAttempts: 1,
        handler: async (payload, job) => {
          await new ProbeEndpointService().call(payload.id);
        }
      },
      simulate: {
        maxAttempts: 5,
        handler: async (payload, job) => {
          await new Promise((resolve) => setTimeout(resolve, payload.seconds * 1e3));
        }
      },
      deliverRunSubscriptions: {
        priority: 0,
        // smaller number = higher priority
        maxAttempts: 5,
        handler: async (payload, job) => {
          await new DeliverRunSubscriptionsService().call(payload.id);
        }
      },
      deliverRunSubscription: {
        priority: 0,
        // smaller number = higher priority
        maxAttempts: 13,
        handler: async (payload, job) => {
          await new DeliverRunSubscriptionService().call(payload.id);
        }
      },
      resumeTask: {
        priority: 0,
        maxAttempts: 3,
        handler: async (payload, job) => await new ResumeTaskService().call(payload.id)
      },
      expireDispatcher: {
        priority: 0,
        maxAttempts: 3,
        handler: async (payload) => await new ExpireDispatcherService().call(payload.id)
      },
      resumeRun: {
        priority: 0,
        maxAttempts: 10,
        handler: async (payload, job) => await new ResumeRunService().call(payload.id)
      },
      // v3 tasks
      "v3.indexDeployment": {
        priority: 0,
        maxAttempts: 5,
        handler: async (payload, job) => await new IndexDeploymentService().call(payload.id)
      },
      "v3.resumeTaskRunDependencies": {
        priority: 0,
        maxAttempts: 5,
        handler: async (payload, job) => await new ResumeTaskRunDependenciesService().call(payload.attemptId)
      },
      "v3.resumeBatchRun": {
        priority: 0,
        maxAttempts: 5,
        handler: async (payload, job) => await new ResumeBatchRunService().call(payload.batchRunId, payload.sourceTaskAttemptId)
      },
      "v3.resumeTaskDependency": {
        priority: 0,
        maxAttempts: 5,
        handler: async (payload, job) => await new ResumeTaskDependencyService().call(payload.dependencyId, payload.sourceTaskAttemptId)
      },
      "v3.timeoutDeployment": {
        priority: 0,
        maxAttempts: 5,
        handler: async (payload, job) => await new TimeoutDeploymentService().call(payload.deploymentId, payload.fromStatus, payload.errorMessage)
      },
      "v3.executeTasksWaitingForDeploy": {
        priority: 0,
        maxAttempts: 5,
        handler: async (payload, job) => await new ExecuteTasksWaitingForDeployService().call(payload.backgroundWorkerId)
      },
      "v3.triggerScheduledTask": {
        priority: 0,
        maxAttempts: 3,
        handler: async (payload, job) => await new TriggerScheduledTaskService().call(payload.instanceId)
      },
      "v3.performTaskAttemptAlerts": {
        priority: 0,
        maxAttempts: 3,
        handler: async (payload, job) => await new PerformTaskAttemptAlertsService().call(payload.attemptId)
      },
      "v3.deliverAlert": {
        priority: 0,
        maxAttempts: 8,
        handler: async (payload, job) => await new DeliverAlertService().call(payload.alertId)
      },
      "v3.performDeploymentAlerts": {
        priority: 0,
        maxAttempts: 3,
        handler: async (payload, job) => await new PerformDeploymentAlertsService().call(payload.deploymentId)
      },
      "v3.performBulkAction": {
        priority: 0,
        maxAttempts: 3,
        handler: async (payload, job) => await new PerformBulkActionService().call(payload.bulkActionGroupId)
      },
      "v3.performBulkActionItem": {
        priority: 0,
        maxAttempts: 3,
        handler: async (payload, job) => {
          await new PerformBulkActionService().performBulkActionItem(payload.bulkActionItemId);
        }
      },
      "v3.requeueTaskRun": {
        priority: 0,
        maxAttempts: 3,
        handler: async (payload, job) => {
          await new RequeueTaskRunService().call(payload.runId);
        }
      },
      "v3.retryAttempt": {
        priority: 0,
        maxAttempts: 3,
        handler: async (payload, job) => await new RetryAttemptService().call(payload.runId)
      },
      "v2.requeueMessage": {
        priority: 0,
        maxAttempts: 5,
        handler: async (payload, job) => {
          await new RequeueV2Message().call(payload.runId);
        }
      },
      "v3.reportUsage": {
        priority: 0,
        maxAttempts: 8,
        handler: async (payload, job) => {
          await reportInvocationUsage(
            payload.orgId,
            Number(payload.data.costInCents),
            payload.additionalData
          );
        }
      },
      "v3.enqueueDelayedRun": {
        priority: 0,
        maxAttempts: 8,
        handler: async (payload, job) => await new EnqueueDelayedRunService().call(payload.runId)
      },
      "v3.expireRun": {
        priority: 0,
        maxAttempts: 8,
        handler: async (payload, job) => await new ExpireEnqueuedRunService().call(payload.runId)
      },
      "v3.cancelTaskAttemptDependencies": {
        priority: 0,
        maxAttempts: 8,
        handler: async (payload, job) => await new CancelTaskAttemptDependenciesService().call(payload.attemptId)
      }
    }
  });
}
function getExecutionWorkerQueue() {
  return new ZodWorker({
    name: "executionWorker",
    prisma,
    runnerOptions: {
      connectionString: env2.DATABASE_URL,
      concurrency: env2.EXECUTION_WORKER_CONCURRENCY,
      pollInterval: env2.EXECUTION_WORKER_POLL_INTERVAL,
      noPreparedStatements: env2.DATABASE_URL !== env2.DIRECT_URL,
      schema: env2.WORKER_SCHEMA,
      maxPoolSize: env2.EXECUTION_WORKER_CONCURRENCY + 1
    },
    shutdownTimeoutInMs: env2.GRACEFUL_SHUTDOWN_TIMEOUT,
    schema: executionWorkerCatalog,
    rateLimiter: executionRateLimiter,
    tasks: {
      performRunExecutionV2: {
        priority: 0,
        // smaller number = higher priority
        maxAttempts: 12,
        handler: async (payload, job) => {
          await new PerformRunExecutionV3Service().call({
            id: payload.id,
            reason: payload.reason,
            resumeTaskId: payload.resumeTaskId,
            isRetry: payload.isRetry,
            lastAttempt: job.max_attempts === job.attempts
          });
        }
      },
      performRunExecutionV3: {
        priority: 0,
        // smaller number = higher priority
        maxAttempts: 12,
        handler: async (payload, job) => {
          let service = new PerformRunExecutionV3Service(), driftInMs = Date.now() - job.run_at.getTime();
          await service.call(
            {
              id: payload.id,
              reason: payload.reason,
              isRetry: !1,
              lastAttempt: job.max_attempts === job.attempts
            },
            driftInMs
          );
        }
      }
    }
  });
}
function getTaskOperationWorkerQueue() {
  return new ZodWorker({
    name: "taskOperationWorker",
    prisma,
    runnerOptions: {
      connectionString: env2.DATABASE_URL,
      concurrency: env2.TASK_OPERATION_WORKER_CONCURRENCY,
      pollInterval: env2.TASK_OPERATION_WORKER_POLL_INTERVAL,
      noPreparedStatements: env2.DATABASE_URL !== env2.DIRECT_URL,
      schema: env2.WORKER_SCHEMA,
      maxPoolSize: env2.TASK_OPERATION_WORKER_CONCURRENCY + 1
    },
    shutdownTimeoutInMs: env2.GRACEFUL_SHUTDOWN_TIMEOUT,
    schema: taskOperationWorkerCatalog,
    tasks: {
      performTaskOperation: {
        priority: 0,
        // smaller number = higher priority
        maxAttempts: 3,
        handler: async (payload, job) => {
          await new PerformTaskOperationService().call(payload.id);
        }
      },
      invokeEphemeralDispatcher: {
        priority: 0,
        // smaller number = higher priority
        maxAttempts: 10,
        handler: async (payload, job) => {
          await new InvokeEphemeralDispatcherService().call(payload.id, payload.eventRecordId);
        }
      }
    }
  });
}

// app/components/primitives/LocaleProvider.tsx
var import_react = require("react"), import_react2 = require("react"), import_jsx_runtime12 = require("react/jsx-runtime"), Context3 = (0, import_react2.createContext)(null), LocaleContextProvider = ({ locales, children }) => {
  let value = { locales };
  return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(Context3.Provider, { value, children });
}, throwIfNoProvider = () => {
  throw new Error("Please wrap your application in a LocaleContextProvider.");
}, useLocales = () => {
  let { locales } = (0, import_react.useContext)(Context3) ?? throwIfNoProvider();
  return locales;
};

// app/components/primitives/OperatingSystemProvider.tsx
var import_react3 = require("react"), import_react4 = require("react"), import_jsx_runtime13 = require("react/jsx-runtime"), Context4 = (0, import_react4.createContext)(null), OperatingSystemContextProvider = ({
  platform,
  children
}) => /* @__PURE__ */ (0, import_jsx_runtime13.jsx)(Context4.Provider, { value: { platform }, children }), throwIfNoProvider2 = () => {
  throw new Error("Please wrap your application in an OperatingSystemContextProvider.");
}, useOperatingSystem = () => {
  let { platform } = (0, import_react3.useContext)(Context4) ?? throwIfNoProvider2();
  return { platform };
};

// app/services/events/sqsEventConsumer.ts
var import_client_sqs = require("@aws-sdk/client-sqs");
var import_sqs_consumer = require("sqs-consumer"), import_zod63 = require("zod"), import_zod_validation_error7 = require("zod-validation-error");
var messageSchema2 = SendEventBodySchema.extend({
  apiKey: import_zod63.z.string()
}), SqsEventConsumer = class {
  constructor(prismaClient = prisma, options2) {
    this.prismaClient = prismaClient;
    this.#ingestEventService = new IngestSendEvent(), logger.debug("SqsEventConsumer starting", {
      queueUrl: options2.queueUrl,
      region: options2.region
    }), this.#consumer = import_sqs_consumer.Consumer.create({
      queueUrl: options2.queueUrl,
      batchSize: options2.batchSize,
      sqs: new import_client_sqs.SQSClient({
        region: options2.region,
        credentials: {
          accessKeyId: options2.accessKeyId,
          secretAccessKey: options2.secretAccessKey
        }
      }),
      handleMessage: async (message) => {
        await trace2({ sqsMessage: message }, async () => await this.#processEvent(message));
      }
    }), this.#consumer.on("error", (err, message) => {
      logger.error("SqsEventConsumer error", { error: err.message, sqsMessage: message });
    }), this.#consumer.on("processing_error", (err, message) => {
      logger.error("SqsEventConsumer processing_error", {
        error: err.message,
        sqsMessage: message
      });
    }), this.#consumer.on("timeout_error", (err, message) => {
      logger.error("SqsEventConsumer timeout_error", { error: err.message, sqsMessage: message });
    }), process.on("SIGTERM", () => {
      this.stop();
    }), this.#consumer.start();
  }
  #ingestEventService;
  #consumer;
  stop() {
    logger.debug("SqsEventConsumer stopping"), this.#consumer.stop({ abort: !0 });
  }
  async #processEvent(message) {
    if (logger.debug("SqsEventConsumer processing event"), !message.Body) {
      logger.error("SqsEventConsumer message has no body");
      return;
    }
    let body = messageSchema2.safeParse(JSON.parse(message.Body));
    if (!body.success) {
      logger.error("SqsEventConsumer message body is invalid", {
        error: (0, import_zod_validation_error7.fromZodError)(body.error).message
      });
      return;
    }
    let authenticationResult = await authenticateApiKey(body.data.apiKey);
    if (!authenticationResult) {
      logger.warn("SqsEventConsumer message has invalid API key");
      return;
    }
    let authenticatedEnv = authenticationResult.environment;
    logger.info("sqs_event", { event: body.data.event, options: body.data.options });
    let event = await this.#ingestEventService.call(
      authenticatedEnv,
      body.data.event,
      body.data.options
    );
    if (!event) {
      logger.error("SqsEventConsumer failed to create event");
      return;
    }
    logger.debug("SqsEventConsumer processed event", { event });
  }
};
function getSharedSqsEventConsumer() {
  if (env2.AWS_SQS_QUEUE_URL && env2.AWS_SQS_REGION && env2.AWS_SQS_ACCESS_KEY_ID && env2.AWS_SQS_SECRET_ACCESS_KEY)
    return new SqsEventConsumer(void 0, {
      queueUrl: env2.AWS_SQS_QUEUE_URL,
      batchSize: env2.AWS_SQS_BATCH_SIZE,
      pollingWaitTimeMs: env2.AWS_SQS_WAIT_TIME_MS,
      region: env2.AWS_SQS_REGION,
      accessKeyId: env2.AWS_SQS_ACCESS_KEY_ID,
      secretAccessKey: env2.AWS_SQS_SECRET_ACCESS_KEY
    });
}

// app/services/apiRateLimit.server.ts
var import_ratelimit3 = require("@upstash/ratelimit"), import_node_crypto7 = require("node:crypto");
function authorizationRateLimitMiddleware({
  redis,
  keyPrefix,
  limiter,
  pathMatchers,
  pathWhiteList = [],
  log = {
    rejections: !0,
    requests: !0
  }
}) {
  let rateLimiter2 = new RateLimiter({
    redis,
    keyPrefix,
    limiter,
    logSuccess: log.requests,
    logFailure: log.rejections
  });
  return async (req, res, next) => {
    if (log.requests && logger.info(`RateLimiter (${keyPrefix}): request to ${req.path}`), req.method.toUpperCase() === "OPTIONS")
      return next();
    let path2 = req.path;
    if (!pathMatchers.some(
      (matcher) => matcher instanceof RegExp ? matcher.test(path2) : path2 === matcher
    ))
      return log.requests && logger.info(`RateLimiter (${keyPrefix}): didn't match ${req.path}`), next();
    if (pathWhiteList.some(
      (matcher) => matcher instanceof RegExp ? matcher.test(path2) : path2 === matcher
    ))
      return log.requests && logger.info(`RateLimiter (${keyPrefix}): whitelisted ${req.path}`), next();
    log.requests && logger.info(`RateLimiter (${keyPrefix}): matched ${req.path}`);
    let authorizationValue = req.headers.authorization;
    if (!authorizationValue)
      return log.requests && logger.info(`RateLimiter (${keyPrefix}): no key`, { headers: req.headers, url: req.url }), res.setHeader("Content-Type", "application/problem+json"), res.status(401).send(
        JSON.stringify(
          {
            title: "Unauthorized",
            status: 401,
            type: "https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/401",
            detail: "No authorization header provided",
            error: "No authorization header provided"
          },
          null,
          2
        )
      );
    let hash = (0, import_node_crypto7.createHash)("sha256");
    hash.update(authorizationValue);
    let hashedAuthorizationValue = hash.digest("hex"), { success, pending, limit, reset, remaining } = await rateLimiter2.limit(
      hashedAuthorizationValue
    ), $remaining = Math.max(0, remaining);
    if (res.set("x-ratelimit-limit", limit.toString()), res.set("x-ratelimit-remaining", $remaining.toString()), res.set("x-ratelimit-reset", reset.toString()), success)
      return next();
    res.setHeader("Content-Type", "application/problem+json");
    let secondsUntilReset = Math.max(0, (reset - (/* @__PURE__ */ new Date()).getTime()) / 1e3);
    return res.status(429).send(
      JSON.stringify(
        {
          title: "Rate Limit Exceeded",
          status: 429,
          type: "https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/429",
          detail: `Rate limit exceeded ${$remaining}/${limit} requests remaining. Retry in ${secondsUntilReset} seconds.`,
          reset,
          limit,
          remaining,
          secondsUntilReset,
          error: `Rate limit exceeded ${$remaining}/${limit} requests remaining. Retry in ${secondsUntilReset} seconds.`
        },
        null,
        2
      )
    );
  };
}
var apiRateLimiter = authorizationRateLimitMiddleware({
  keyPrefix: "api",
  limiter: import_ratelimit3.Ratelimit.tokenBucket(
    env2.API_RATE_LIMIT_REFILL_RATE,
    env2.API_RATE_LIMIT_REFILL_INTERVAL,
    env2.API_RATE_LIMIT_MAX
  ),
  pathMatchers: [/^\/api/],
  // Allow /api/v1/tasks/:id/callback/:secret
  pathWhiteList: [
    "/api/internal/stripe_webhooks",
    "/api/v1/authorization-code",
    "/api/v1/token",
    "/api/v1/usage/ingest",
    /^\/api\/v1\/tasks\/[^\/]+\/callback\/[^\/]+$/,
    // /api/v1/tasks/$id/callback/$secret
    /^\/api\/v1\/runs\/[^\/]+\/tasks\/[^\/]+\/callback\/[^\/]+$/,
    // /api/v1/runs/$runId/tasks/$id/callback/$secret
    /^\/api\/v1\/http-endpoints\/[^\/]+\/env\/[^\/]+\/[^\/]+$/,
    // /api/v1/http-endpoints/$httpEndpointId/env/$envType/$shortcode
    /^\/api\/v1\/sources\/http\/[^\/]+$/,
    // /api/v1/sources/http/$id
    /^\/api\/v1\/endpoints\/[^\/]+\/[^\/]+\/index\/[^\/]+$/,
    // /api/v1/endpoints/$environmentId/$endpointSlug/index/$indexHookIdentifier
    "/api/v1/timezones",
    "/api/v1/usage/ingest",
    /^\/api\/v1\/runs\/[^\/]+\/attempts$/
    // /api/v1/runs/$runFriendlyId/attempts
  ],
  log: {
    rejections: env2.API_RATE_LIMIT_REJECTION_LOGS_ENABLED === "1",
    requests: env2.API_RATE_LIMIT_REQUEST_LOGS_ENABLED === "1"
  }
});

// app/v3/handleWebsockets.server.ts
var import_ws = require("ws");

// app/v3/authenticatedSocketConnection.server.ts
var import_evt3 = require("evt"), import_node_crypto8 = require("node:crypto");

// app/v3/marqs/devQueueConsumer.server.ts
var import_api12 = require("@opentelemetry/api"), import_zod64 = require("zod");
var MessageBody2 = import_zod64.z.discriminatedUnion("type", [
  import_zod64.z.object({
    type: import_zod64.z.literal("EXECUTE"),
    taskIdentifier: import_zod64.z.string()
  })
]), DevQueueConsumer = class {
  // Keys are task run friendly IDs, values are TaskRun internal ids/queue message ids
  constructor(env6, _sender, _options = {}) {
    this.env = env6;
    this._sender = _sender;
    this._options = _options;
    this._backgroundWorkers = /* @__PURE__ */ new Map();
    this._backgroundWorkerSubscriber = /* @__PURE__ */ new Map();
    this._deprecatedWorkers = /* @__PURE__ */ new Map();
    this._enabled = !1;
    this._taskFailures = 0;
    this._taskSuccesses = 0;
    this._endSpanInNextIteration = !1;
    this._inProgressRuns = /* @__PURE__ */ new Map();
    this._traceTimeoutSeconds = _options.traceTimeoutSeconds ?? 60, this._maximumItemsPerTrace = _options.maximumItemsPerTrace ?? 1e3;
  }
  // This method is called when a background worker is deprecated and will no longer be used unless a run is locked to it
  async deprecateBackgroundWorker(id) {
    let backgroundWorker = this._backgroundWorkers.get(id);
    backgroundWorker && (this._deprecatedWorkers.set(id, backgroundWorker), this._backgroundWorkers.delete(id));
  }
  async registerBackgroundWorker(id, inProgressRuns = []) {
    let backgroundWorker = await prisma.backgroundWorker.findUnique({
      where: { friendlyId: id, runtimeEnvironmentId: this.env.id },
      include: {
        tasks: !0
      }
    });
    if (!backgroundWorker || this._backgroundWorkers.has(backgroundWorker.id))
      return;
    this._backgroundWorkers.set(backgroundWorker.id, backgroundWorker), logger.debug("Registered background worker", {
      backgroundWorker: backgroundWorker.id,
      inProgressRuns
    });
    let subscriber = await devPubSub.subscribe(`backgroundWorker:${backgroundWorker.id}:*`);
    subscriber.on("CANCEL_ATTEMPT", async (message) => {
      await this._sender.send("BACKGROUND_WORKER_MESSAGE", {
        backgroundWorkerId: backgroundWorker.friendlyId,
        data: {
          type: "CANCEL_ATTEMPT",
          taskAttemptId: message.attemptId,
          taskRunId: message.taskRunId
        }
      });
    }), this._backgroundWorkerSubscriber.set(backgroundWorker.id, subscriber);
    for (let runId of inProgressRuns)
      this._inProgressRuns.set(runId, runId);
    await this.#enable();
  }
  async taskAttemptCompleted(workerId, completion, execution) {
    completion.ok ? this._taskSuccesses++ : this._taskFailures++, logger.debug("[DevQueueConsumer] taskAttemptCompleted()", {
      taskRunCompletion: completion,
      execution
    }), await new CompleteAttemptService().call({ completion, execution, env: this.env }) === "COMPLETED" && this._inProgressRuns.delete(execution.run.id);
  }
  async taskRunFailed(workerId, completion) {
    this._taskFailures++, logger.debug("[DevQueueConsumer] taskRunFailed()", { completion }), this._inProgressRuns.delete(completion.id), await new FailedTaskRunService().call(completion.id, completion);
  }
  /**
   * @deprecated Use `taskRunHeartbeat` instead
   */
  async taskHeartbeat(workerId, id, seconds = 60) {
    logger.debug("[DevQueueConsumer] taskHeartbeat()", { id, seconds });
    let taskRunAttempt = await prisma.taskRunAttempt.findUnique({
      where: { friendlyId: id }
    });
    taskRunAttempt && await marqs?.heartbeatMessage(taskRunAttempt.taskRunId, seconds);
  }
  async taskRunHeartbeat(workerId, id, seconds = 60) {
    logger.debug("[DevQueueConsumer] taskRunHeartbeat()", { id, seconds }), await marqs?.heartbeatMessage(id, seconds);
  }
  async stop(reason = "CLI disconnected") {
    if (this._enabled) {
      logger.debug("Stopping dev queue consumer", { env: this.env }), this._enabled = !1, await disconnectSession(this.env.id), await this.#cancelInProgressRunsAndAttempts(reason);
      for (let [id, subscriber] of this._backgroundWorkerSubscriber)
        logger.debug("Unsubscribing from background worker channel", { id }), await subscriber.stopListening(), this._backgroundWorkerSubscriber.delete(id), logger.debug("Unsubscribed from background worker channel", { id });
      this._currentSpan && this._currentSpan.end();
    }
  }
  async #cancelInProgressRunsAndAttempts(reason) {
    let cancelTaskRunService = new CancelTaskRunService(), cancelledAt = /* @__PURE__ */ new Date(), inProgressRuns = new Map(this._inProgressRuns);
    this._inProgressRuns.clear(), logger.debug("Cancelling in progress runs and attempts", {
      runs: Array.from(inProgressRuns.keys())
    });
    for (let [_, runId] of inProgressRuns)
      await this.#cancelInProgressRun(runId, cancelTaskRunService, cancelledAt, reason);
  }
  async #cancelInProgressRun(runId, service, cancelledAt, reason) {
    logger.debug("Cancelling in progress run", { runId });
    let taskRun = runId.startsWith("run_") ? await prisma.taskRun.findUnique({
      where: { friendlyId: runId }
    }) : await prisma.taskRun.findUnique({
      where: { id: runId }
    });
    if (taskRun)
      try {
        await service.call(taskRun, { reason, cancelAttempts: !0, cancelledAt });
      } catch (e) {
        logger.error("Failed to cancel in progress run", {
          runId,
          error: e
        });
      }
  }
  async #enable() {
    this._enabled || (this._enabled = !0, await createNewSession(this.env, this._options.ipAddress ?? "unknown"), this._perTraceCountdown = this._options.maximumItemsPerTrace, this._lastNewTrace = /* @__PURE__ */ new Date(), this._taskFailures = 0, this._taskSuccesses = 0, this.#doWork().finally(() => {
    }));
  }
  async #doWork() {
    if (this._enabled)
      return (this._perTraceCountdown === 0 || Date.now() - this._lastNewTrace.getTime() > this._traceTimeoutSeconds * 1e3 || this._currentSpanContext === void 0 || this._endSpanInNextIteration) && (this._currentSpan && (this._currentSpan.setAttribute("tasks.period.failures", this._taskFailures), this._currentSpan.setAttribute("tasks.period.successes", this._taskSuccesses), logger.debug("Ending DevQueueConsumer.doWork() trace", {
        isRecording: this._currentSpan.isRecording()
      }), this._currentSpan.end()), this._currentSpan = tracer2.startSpan(
        "DevQueueConsumer.doWork()",
        {
          kind: import_api12.SpanKind.CONSUMER,
          attributes: {
            ...attributesFromAuthenticatedEnv(this.env),
            [SEMINTATTRS_FORCE_RECORDING]: !0
          }
        },
        import_api12.ROOT_CONTEXT
      ), this._currentSpanContext = import_api12.trace.setSpan(import_api12.ROOT_CONTEXT, this._currentSpan), this._perTraceCountdown = this._options.maximumItemsPerTrace, this._lastNewTrace = /* @__PURE__ */ new Date(), this._taskFailures = 0, this._taskSuccesses = 0, this._endSpanInNextIteration = !1), import_api12.context.with(this._currentSpanContext ?? import_api12.ROOT_CONTEXT, async () => {
        await this.#doWorkInternal(), this._perTraceCountdown = this._perTraceCountdown - 1;
      });
  }
  async #doWorkInternal() {
    let message = await marqs?.dequeueMessageInEnv(this.env);
    if (!message) {
      setTimeout(() => this.#doWork(), 1e3);
      return;
    }
    let messageBody = MessageBody2.safeParse(message.data);
    if (!messageBody.success) {
      logger.error("Failed to parse message", {
        queueMessage: message.data,
        error: messageBody.error,
        env: this.env
      }), await marqs?.acknowledgeMessage(message.messageId), setTimeout(() => this.#doWork(), 100);
      return;
    }
    let existingTaskRun = await prisma.taskRun.findUnique({
      where: {
        id: message.messageId
      }
    });
    if (!existingTaskRun) {
      await marqs?.acknowledgeMessage(message.messageId), setTimeout(() => this.#doWork(), 100);
      return;
    }
    let backgroundWorker = existingTaskRun.lockedToVersionId ? this._deprecatedWorkers.get(existingTaskRun.lockedToVersionId) ?? this._backgroundWorkers.get(existingTaskRun.lockedToVersionId) : this.#getLatestBackgroundWorker();
    if (!backgroundWorker) {
      await marqs?.acknowledgeMessage(message.messageId), setTimeout(() => this.#doWork(), 100);
      return;
    }
    let backgroundTask = backgroundWorker.tasks.find(
      (task) => task.slug === existingTaskRun.taskIdentifier
    );
    if (!backgroundTask) {
      logger.warn("No matching background task found for task run", {
        taskRun: existingTaskRun.id,
        taskIdentifier: existingTaskRun.taskIdentifier,
        backgroundWorker: backgroundWorker.id,
        taskSlugs: backgroundWorker.tasks.map((task) => task.slug)
      }), await marqs?.acknowledgeMessage(message.messageId), setTimeout(() => this.#doWork(), 100);
      return;
    }
    let lockedTaskRun = await prisma.taskRun.update({
      where: {
        id: message.messageId
      },
      data: {
        lockedAt: /* @__PURE__ */ new Date(),
        lockedById: backgroundTask.id,
        status: "EXECUTING",
        lockedToVersionId: backgroundWorker.id,
        startedAt: existingTaskRun.startedAt ?? /* @__PURE__ */ new Date()
      },
      include: {
        attempts: {
          take: 1,
          orderBy: { number: "desc" }
        },
        tags: !0,
        batchItems: {
          include: {
            batchTaskRun: !0
          }
        }
      }
    });
    if (!lockedTaskRun) {
      logger.warn("Failed to lock task run", {
        taskRun: existingTaskRun.id,
        taskIdentifier: existingTaskRun.taskIdentifier,
        backgroundWorker: backgroundWorker.id,
        messageId: message.messageId
      }), await marqs?.acknowledgeMessage(message.messageId), setTimeout(() => this.#doWork(), 100);
      return;
    }
    if (!await prisma.taskQueue.findUnique({
      where: {
        runtimeEnvironmentId_name: {
          runtimeEnvironmentId: this.env.id,
          name: sanitizeQueueName(lockedTaskRun.queue)
        }
      }
    })) {
      logger.debug("[DevQueueConsumer] Failed to find queue", {
        queueName: lockedTaskRun.queue,
        sanitizedName: sanitizeQueueName(lockedTaskRun.queue),
        taskRun: lockedTaskRun.id,
        messageId: message.messageId
      }), await marqs?.nackMessage(message.messageId), setTimeout(() => this.#doWork(), 1e3);
      return;
    }
    if (!this._enabled) {
      logger.debug("Dev queue consumer is disabled", { env: this.env, queueMessage: message }), await marqs?.nackMessage(message.messageId);
      return;
    }
    let variables = await resolveVariablesForEnvironment(this.env);
    if (backgroundWorker.supportsLazyAttempts) {
      let payload = {
        traceContext: lockedTaskRun.traceContext,
        environment: variables.reduce((acc, curr) => (acc[curr.key] = curr.value, acc), {}),
        runId: lockedTaskRun.friendlyId,
        messageId: lockedTaskRun.id,
        isTest: lockedTaskRun.isTest
      };
      try {
        await this._sender.send("BACKGROUND_WORKER_MESSAGE", {
          backgroundWorkerId: backgroundWorker.friendlyId,
          data: {
            type: "EXECUTE_RUN_LAZY_ATTEMPT",
            payload
          }
        }), logger.debug("Executing the run", {
          messageId: message.messageId
        }), this._inProgressRuns.set(lockedTaskRun.friendlyId, message.messageId);
      } catch (e) {
        e instanceof Error ? this._currentSpan?.recordException(e) : this._currentSpan?.recordException(new Error(String(e))), this._endSpanInNextIteration = !0, await prisma.$transaction([
          prisma.taskRun.update({
            where: {
              id: lockedTaskRun.id
            },
            data: {
              lockedAt: null,
              lockedById: null,
              status: "PENDING",
              startedAt: existingTaskRun.startedAt
            }
          })
        ]), this._inProgressRuns.delete(lockedTaskRun.friendlyId), await marqs?.nackMessage(message.messageId);
      } finally {
        setTimeout(() => this.#doWork(), 100);
      }
    } else {
      let service = new CreateTaskRunAttemptService(), { execution } = await service.call(lockedTaskRun.friendlyId, this.env), payload = {
        traceContext: lockedTaskRun.traceContext,
        environment: variables.reduce((acc, curr) => (acc[curr.key] = curr.value, acc), {}),
        execution
      };
      try {
        await this._sender.send("BACKGROUND_WORKER_MESSAGE", {
          backgroundWorkerId: backgroundWorker.friendlyId,
          data: {
            type: "EXECUTE_RUNS",
            payloads: [payload]
          }
        }), logger.debug("Executing the run", {
          messageId: message.messageId
        }), this._inProgressRuns.set(lockedTaskRun.friendlyId, message.messageId);
      } catch (e) {
        e instanceof Error ? this._currentSpan?.recordException(e) : this._currentSpan?.recordException(new Error(String(e))), this._endSpanInNextIteration = !0, await prisma.$transaction([
          prisma.taskRun.update({
            where: {
              id: lockedTaskRun.id
            },
            data: {
              lockedAt: null,
              lockedById: null,
              status: "PENDING",
              startedAt: existingTaskRun.startedAt
            }
          })
        ]), this._inProgressRuns.delete(lockedTaskRun.friendlyId), await marqs?.nackMessage(message.messageId);
      } finally {
        setTimeout(() => this.#doWork(), 100);
      }
    }
  }
  // Get the latest background worker based on the version.
  // Versions are in the format of 20240101.1 and 20240101.2, or even 20240101.10, 20240101.11, etc.
  #getLatestBackgroundWorker() {
    let workers = Array.from(this._backgroundWorkers.values());
    if (workers.length !== 0)
      return workers.reduce((acc, curr) => {
        let accParts = acc.version.split(".").map(Number), currParts = curr.version.split(".").map(Number);
        return accParts[0] < currParts[0] ? curr : accParts[0] > currParts[0] ? acc : accParts[1] < currParts[1] ? curr : acc;
      });
  }
};

// app/v3/authenticatedSocketConnection.server.ts
var AuthenticatedSocketConnection = class {
  constructor(ws, authenticatedEnv, ipAddress) {
    this.ws = ws;
    this.authenticatedEnv = authenticatedEnv;
    this.ipAddress = ipAddress;
    this.onClose = new import_evt3.Evt();
    this.id = (0, import_node_crypto8.randomUUID)(), this._sender = new ZodMessageSender({
      schema: serverWebsocketMessages,
      sender: async (message) => new Promise((resolve, reject) => {
        if (!ws.OPEN)
          return reject(new Error("Websocket is not open"));
        ws.send(JSON.stringify(message), {}, (err) => {
          if (err) {
            reject(err);
            return;
          }
          resolve();
        });
      })
    }), this._consumer = new DevQueueConsumer(authenticatedEnv, this._sender, {
      ipAddress: Array.isArray(this.ipAddress) ? this.ipAddress.join(", ") : this.ipAddress
    }), ws.addEventListener("message", this.#handleMessage.bind(this)), ws.addEventListener("close", this.#handleClose.bind(this)), ws.addEventListener("error", this.#handleError.bind(this)), this._messageHandler = new ZodMessageHandler({
      schema: clientWebsocketMessages,
      messages: {
        READY_FOR_TASKS: async (payload) => {
          await this._consumer.registerBackgroundWorker(
            payload.backgroundWorkerId,
            payload.inProgressRuns ?? []
          );
        },
        BACKGROUND_WORKER_DEPRECATED: async (payload) => {
          await this._consumer.deprecateBackgroundWorker(payload.backgroundWorkerId);
        },
        BACKGROUND_WORKER_MESSAGE: async (payload) => {
          switch (payload.data.type) {
            case "TASK_RUN_COMPLETED": {
              await this._consumer.taskAttemptCompleted(
                payload.backgroundWorkerId,
                payload.data.completion,
                payload.data.execution
              );
              break;
            }
            case "TASK_RUN_FAILED_TO_RUN": {
              await this._consumer.taskRunFailed(
                payload.backgroundWorkerId,
                payload.data.completion
              );
              break;
            }
            case "TASK_HEARTBEAT": {
              await this._consumer.taskHeartbeat(payload.backgroundWorkerId, payload.data.id);
              break;
            }
            case "TASK_RUN_HEARTBEAT": {
              await this._consumer.taskRunHeartbeat(payload.backgroundWorkerId, payload.data.id);
              break;
            }
          }
        }
      }
    });
  }
  async initialize() {
    this._sender.send("SERVER_READY", { id: this.id });
  }
  async #handleMessage(ev) {
    let data2 = JSON.parse(ev.data.toString());
    await this._messageHandler.handleMessage(data2);
  }
  async #handleClose(ev) {
    logger.debug("[AuthenticatedSocketConnection] Websocket closed", { ev }), await this._consumer.stop();
    let result = this.onClose.post(ev);
    logger.debug("[AuthenticatedSocketConnection] Called onClose", {
      result
    });
  }
  async #handleError(ev) {
    logger.error("Websocket error", { ev });
  }
};

// app/v3/handleWebsockets.server.ts
var import_prom_client5 = require("prom-client");
var wss = singleton("wss", initalizeWebSocketServer), authenticatedConnections;
function initalizeWebSocketServer() {
  let server = new import_ws.WebSocketServer({ noServer: !0 });
  return server.on("connection", handleWebSocketConnection), authenticatedConnections = /* @__PURE__ */ new Map(), new import_prom_client5.Gauge({
    name: "dev_authenticated_connections",
    help: "Number of authenticated dev connections",
    collect() {
      this.set(authenticatedConnections.size);
    },
    registers: [metricsRegister]
  }), server;
}
async function handleWebSocketConnection(ws, req) {
  logger.debug("Handle websocket connection", {
    ipAddress: req.headers["x-forwarded-for"] || req.socket.remoteAddress
  });
  let authHeader = req.headers.authorization;
  if (!authHeader || typeof authHeader != "string") {
    ws.close(1008, "Missing Authorization header");
    return;
  }
  let [authType, apiKey] = authHeader.split(" ");
  if (authType !== "Bearer" || !apiKey) {
    ws.close(1008, "Invalid Authorization header");
    return;
  }
  let authenticationResult = await authenticateApiKey(apiKey);
  if (!authenticationResult) {
    ws.close(1008, "Invalid API key");
    return;
  }
  let authenticatedEnv = authenticationResult.environment, authenticatedConnection = new AuthenticatedSocketConnection(
    ws,
    authenticatedEnv,
    req.headers["x-forwarded-for"] ?? req.socket.remoteAddress ?? "unknown"
  );
  authenticatedConnections.set(authenticatedConnection.id, authenticatedConnection), authenticatedConnection.onClose.attachOnce((closeEvent) => {
    logger.debug("Websocket closed", {
      closeEvent,
      authenticatedConnectionId: authenticatedConnection.id
    }), authenticatedConnections.delete(authenticatedConnection.id);
  }), await authenticatedConnection.initialize();
}

// app/v3/registryProxy.server.ts
var import_ioredis8 = __toESM(require("ioredis")), import_node_https = require("node:https"), import_zod65 = require("zod");
var import_jwt_decode = require("jwt-decode"), import_node_crypto9 = require("node:crypto"), import_node_os = require("node:os"), import_promises = require("fs/promises"), import_node_fs = require("node:fs"), import_promises2 = require("node:stream/promises"), import_fs = require("fs"), TokenResponseBody = import_zod65.z.object({
  token: import_zod65.z.string()
}), CACHED_BEARER_TOKEN_BUFFER_IN_SECONDS = 10, RegistryProxy = class {
  constructor(options2) {
    this.options = options2;
    options2.redis && (this.redis = new import_ioredis8.default(options2.redis));
  }
  get origin() {
    return this.options.origin;
  }
  get host() {
    return new URL(this.options.origin).host;
  }
  // If the imageReference includes a hostname, rewrite it to point to the proxy
  // e.g. eric-webapp.trigger.dev/trigger/yubjwjsfkxnylobaqvqz:20240306.41.prod@sha256:8b48dd2866bc8878644d2880bbe35a27e66cf6ff78aa1e489d7fdde5e228faf1
  // should be rewritten to ${this.host}/trigger/yubjwjsfkxnylobaqvqz:20240306.41.prod@sha256:8b48dd2866bc8878644d2880bbe35a27e66cf6ff78aa1e489d7fdde5e228faf1
  // This will work with image references that don't include the @sha256:... part
  rewriteImageReference(imageReference) {
    let parts = parseDockerImageReference(imageReference);
    return logger.debug("Rewriting image reference parts", { parts }), parts.registry ? rebuildDockerImageReference({
      ...parts,
      registry: this.host
    }) : imageReference;
  }
  async call(request, response) {
    await this.#proxyRequest(request, response);
  }
  // Proxies the request to the registry
  async #proxyRequest(request, response) {
    let credentials = this.#getBasicAuthCredentials(request);
    if (!credentials) {
      logger.debug("Returning 401 because credentials are missing"), response.writeHead(401, {
        "WWW-Authenticate": 'Basic realm="Access to the registry"'
      }), response.end("Unauthorized");
      return;
    }
    if (!await authenticatePersonalAccessToken(credentials.password)) {
      logger.debug("Returning 401 because authentication failed"), response.writeHead(401, {
        "WWW-Authenticate": 'Basic realm="Access to the registry"'
      }), response.end("Unauthorized");
      return;
    }
    let options2 = {
      hostname: new URL(this.options.origin).hostname,
      path: request.url,
      method: request.method,
      headers: { ...request.headers }
    };
    delete options2.headers.host, delete options2.headers.authorization, delete options2.headers["cf-ray"], delete options2.headers["cf-visitor"], delete options2.headers["cf-ipcountry"], delete options2.headers["cf-connecting-ip"], delete options2.headers["cf-warp-tag-id"], options2.headers.authorization = `Basic ${Buffer.from(
      `${this.options.auth.username}:${this.options.auth.password}`
    ).toString("base64")}`;
    let tempFilePath, cleanupTempFile = () => {
    };
    (options2.method === "POST" || options2.method === "PUT" && request.headers["content-length"]) && (tempFilePath = await streamRequestBodyToTempFile(request), cleanupTempFile = () => {
      tempFilePath && (logger.debug("Cleaning up temp file", { tempFilePath }), (0, import_fs.unlinkSync)(tempFilePath));
    }, logger.debug("Streamed request body to temp file", { tempFilePath }));
    let makeProxiedRequest = (tokenOptions, attempts = 1) => {
      if (logger.debug("Proxying request", {
        request: tokenOptions,
        attempts,
        originalHeaders: request.headers
      }), attempts > 10)
        return logger.error("Too many attempts to proxy request", {
          attempts
        }), response.writeHead(500, { "Content-Type": "text/plain" }), response.end("Internal Server Error: Too many attempts to proxy request"), cleanupTempFile();
      let proxyReq = (0, import_node_https.request)(tokenOptions, async (proxyRes) => {
        if (proxyRes.statusCode === 401 && proxyRes.headers["www-authenticate"]) {
          logger.debug("Received 401 with WWW-Authenticate, attempting to fetch bearer token", {
            authenticate: proxyRes.headers["www-authenticate"]
          });
          let bearerToken = await this.#getBearerToken(proxyRes.headers["www-authenticate"]);
          if (bearerToken && tokenOptions.headers) {
            tokenOptions.headers.authorization = `Bearer ${bearerToken}`, makeProxiedRequest(tokenOptions, attempts + 1);
            return;
          } else
            return response.writeHead(401, { "Content-Type": "text/plain" }), response.end("Failed to authenticate with the registry using bearer token"), cleanupTempFile();
        }
        if (proxyRes.statusCode === 401)
          return logger.debug("Received 401, but there is no www-authenticate value", {
            headers: proxyRes.headers
          }), response.writeHead(401, { "Content-Type": "text/plain" }), response.end("Unauthorized"), cleanupTempFile();
        if (proxyRes.statusCode === 301) {
          logger.debug("Received 301, attempting to follow redirect", {
            location: proxyRes.headers.location
          });
          let redirectOptions = {
            ...tokenOptions,
            path: proxyRes.headers.location
          };
          makeProxiedRequest(redirectOptions, attempts + 1);
          return;
        }
        if (!proxyRes.statusCode)
          return logger.error("No status code in the response", {
            headers: proxyRes.headers,
            statusMessage: proxyRes.statusMessage
          }), response.writeHead(500, { "Content-Type": "text/plain" }), response.end("Internal Server Error: No status code in the response"), cleanupTempFile();
        let headers = { ...proxyRes.headers };
        if (headers.location) {
          let proxiedLocation = new URL(headers.location);
          if (proxiedLocation.host === this.host) {
            if (!request.headers.host)
              return logger.error("Host header is missing in the request", {
                headers: request.headers
              }), response.writeHead(500, { "Content-Type": "text/plain" }), response.end("Internal Server Error: Host header is missing in the request"), cleanupTempFile();
            proxiedLocation.host = request.headers.host, headers.location = proxiedLocation.href, logger.debug("Rewriting location response header", {
              originalLocation: proxyRes.headers.location,
              proxiedLocation: headers.location,
              proxiedLocationUrl: proxiedLocation.href
            });
          }
        }
        logger.debug("Proxying successful response", {
          method: tokenOptions.method,
          path: tokenOptions.path,
          statusCode: proxyRes.statusCode,
          responseHeaders: headers
        }), response.writeHead(proxyRes.statusCode, headers), proxyRes.pipe(response, { end: !0 });
      });
      request.on("close", () => {
        logger.debug("Client closed the connection"), proxyReq.destroy(), cleanupTempFile();
      }), request.on("abort", () => {
        logger.debug("Client aborted the connection"), proxyReq.destroy(), cleanupTempFile();
      }), tempFilePath ? (0, import_node_fs.createReadStream)(tempFilePath).pipe(proxyReq, { end: !0 }) : proxyReq.end(), proxyReq.on("error", (error) => {
        logger.error("Error proxying request", { error: error.message }), response.writeHead(500, { "Content-Type": "text/plain" }), response.end(`Internal Server Error: ${error.message}`);
      });
    };
    makeProxiedRequest(options2);
  }
  #getBasicAuthCredentials(request) {
    let headers = request.headers;
    logger.debug("Getting basic auth credentials with headers", {
      headers
    });
    let authHeader = headers.authorization;
    if (!authHeader)
      return;
    let [type, credentials] = authHeader.split(" ");
    if (type.toLowerCase() !== "basic")
      return;
    let decoded = Buffer.from(credentials, "base64").toString("utf-8"), [username, password] = decoded.split(":");
    return { username, password };
  }
  async #getBearerToken(authenticateHeader) {
    try {
      let cacheKey = `token:${(0, import_node_crypto9.createHash)("md5").update(authenticateHeader).digest("hex")}`, cachedToken = await this.#getCachedToken(cacheKey);
      if (cachedToken)
        return cachedToken;
      let realmMatch = authenticateHeader.match(/realm="([^"]+)"/), serviceMatch = authenticateHeader.match(/service="([^"]+)"/), scopeMatch = authenticateHeader.match(/scope="([^"]+)"/);
      if (!realmMatch || !serviceMatch) {
        logger.error("Failed to parse WWW-Authenticate header", { authenticateHeader });
        return;
      }
      let realm = realmMatch[1], service = serviceMatch[1], authUrl = `${realm}?service=${encodeURIComponent(service)}`;
      if (scopeMatch) {
        let scope = scopeMatch[1];
        authUrl += `&scope=${encodeURIComponent(scope)}`;
      }
      authUrl += `&account=${encodeURIComponent(this.options.auth.username)}`, logger.debug("Fetching bearer token", { authUrl });
      let response = await fetch(authUrl, {
        headers: {
          authorization: "Basic " + Buffer.from(`${this.options.auth.username}:${this.options.auth.password}`).toString(
            "base64"
          )
        }
      });
      if (!response.ok) {
        logger.debug("Failed to fetch bearer token", {
          status: response.status,
          statusText: response.statusText
        });
        return;
      }
      let rawBody = await response.json(), body = TokenResponseBody.safeParse(rawBody);
      if (!body.success) {
        logger.error("Failed to parse token response", { body: rawBody });
        return;
      }
      return logger.debug("Fetched bearer token", { token: body.data.token }), await this.#setCachedToken(body.data.token, cacheKey), body.data.token;
    } catch (error) {
      logger.error("Failed to fetch bearer token", {
        error: error instanceof Error ? error.message : error
      });
    }
  }
  async #getCachedToken(key) {
    if (!this.redis)
      return;
    let cachedToken = await this.redis.get(key);
    if (cachedToken) {
      let expiry = (0, import_jwt_decode.jwtDecode)(cachedToken).exp;
      if (expiry && expiry > Date.now() / 1e3 + CACHED_BEARER_TOKEN_BUFFER_IN_SECONDS)
        return cachedToken;
    }
  }
  async #setCachedToken(token, key) {
    if (!this.redis)
      return;
    let decoded = (0, import_jwt_decode.jwtDecode)(token);
    decoded.exp && await this.redis.set(key, token, "EXAT", decoded.exp);
  }
}, registryProxy = singleton("registryProxy", initializeProxy);
function initializeProxy() {
  if (!(!env2.CONTAINER_REGISTRY_ORIGIN || !env2.CONTAINER_REGISTRY_USERNAME || !env2.CONTAINER_REGISTRY_PASSWORD))
    return new RegistryProxy({
      origin: env2.CONTAINER_REGISTRY_ORIGIN,
      auth: {
        username: env2.CONTAINER_REGISTRY_USERNAME,
        password: env2.CONTAINER_REGISTRY_PASSWORD
      }
    });
}
async function streamRequestBodyToTempFile(request) {
  try {
    let tempFilePath = `${await (0, import_promises.mkdtemp)(`${(0, import_node_os.tmpdir)()}/`)}/requestBody.tmp`, writeStream = (0, import_node_fs.createWriteStream)(tempFilePath);
    return await (0, import_promises2.pipeline)(request, writeStream), tempFilePath;
  } catch (error) {
    logger.error("Failed to stream request body to temp file", {
      error: error instanceof Error ? error.message : error
    });
    return;
  }
}
function parseDockerImageReference(imageReference) {
  let parts = { repo: "" }, atSplit = imageReference.split("@");
  atSplit.length > 1 && (parts.digest = atSplit[1], imageReference = atSplit[0]);
  let colonSplit = imageReference.split(":");
  (colonSplit.length > 2 || colonSplit.length === 2 && !colonSplit[1].includes("/")) && (parts.tag = colonSplit.pop(), imageReference = colonSplit.join(":"));
  let slashIndex = imageReference.indexOf("/");
  if (slashIndex !== -1) {
    let potentialRegistry = imageReference.substring(0, slashIndex);
    potentialRegistry.includes(".") || potentialRegistry === "localhost" || potentialRegistry.includes(":") ? (parts.registry = potentialRegistry, parts.repo = imageReference.substring(slashIndex + 1)) : parts.repo = imageReference;
  } else
    parts.repo = imageReference;
  return parts;
}
function rebuildDockerImageReference(parts) {
  let imageReference = "";
  return parts.registry && (imageReference += `${parts.registry}/`), imageReference += parts.repo, parts.tag && (imageReference += `:${parts.tag}`), parts.digest && (imageReference += `@${parts.digest}`), imageReference;
}

// app/eventLoopMonitor.server.ts
var import_node_async_hooks2 = require("node:async_hooks");
var THRESHOLD_NS = 1e8, cache = /* @__PURE__ */ new Map();
function init2(asyncId, type, triggerAsyncId, resource) {
  cache.set(asyncId, {
    type
  });
}
function destroy(asyncId) {
  cache.delete(asyncId);
}
function before(asyncId) {
  let cached = cache.get(asyncId);
  cached && cache.set(asyncId, {
    ...cached,
    start: process.hrtime()
  });
}
function after(asyncId) {
  let cached = cache.get(asyncId);
  if (!cached || (cache.delete(asyncId), !cached.start))
    return;
  let diff = process.hrtime(cached.start), diffNs = diff[0] * 1e9 + diff[1];
  if (diffNs > THRESHOLD_NS) {
    let time = diffNs / 1e6;
    tracer2.startSpan("event-loop-blocked", {
      startTime: new Date((/* @__PURE__ */ new Date()).getTime() - time),
      attributes: {
        asyncType: cached.type,
        label: "EventLoopMonitor"
      }
    }).end();
  }
}
var eventLoopMonitor = singleton("eventLoopMonitor", () => {
  let hook = (0, import_node_async_hooks2.createHook)({ init: init2, before, after, destroy });
  return {
    enable: () => {
      console.log("\u{1F978}  Initializing event loop monitor"), hook.enable();
    },
    disable: () => {
      console.log("\u{1F978}  Disabling event loop monitor"), hook.disable();
    }
  };
});

// app/entry.server.tsx
var import_jsx_runtime14 = require("react/jsx-runtime"), ABORT_DELAY = 3e4;
function handleRequest(request, responseStatusCode, responseHeaders, remixContext) {
  let acceptLanguage = request.headers.get("accept-language"), locales = (0, import_intl_parse_accept_language.parseAcceptLanguage)(acceptLanguage, {
    validate: Intl.DateTimeFormat.supportedLocalesOf
  }), platform = request.headers.get("user-agent")?.includes("Mac") ? "mac" : "windows";
  return (0, import_isbot.default)(request.headers.get("user-agent")) ? handleBotRequest(
    request,
    responseStatusCode,
    responseHeaders,
    remixContext,
    locales,
    platform
  ) : handleBrowserRequest(
    request,
    responseStatusCode,
    responseHeaders,
    remixContext,
    locales,
    platform
  );
}
function handleBotRequest(request, responseStatusCode, responseHeaders, remixContext, locales, platform) {
  return new Promise((resolve, reject) => {
    let shellRendered = !1, { pipe, abort } = (0, import_server.renderToPipeableStream)(
      /* @__PURE__ */ (0, import_jsx_runtime14.jsx)(OperatingSystemContextProvider, { platform, children: /* @__PURE__ */ (0, import_jsx_runtime14.jsxs)(LocaleContextProvider, { locales, children: [
        /* @__PURE__ */ (0, import_jsx_runtime14.jsx)(import_react5.RemixServer, { context: remixContext, url: request.url, abortDelay: ABORT_DELAY }),
        ","
      ] }) }),
      {
        onAllReady() {
          shellRendered = !0;
          let body = new import_stream.PassThrough(), stream = (0, import_node4.createReadableStreamFromReadable)(body);
          responseHeaders.set("Content-Type", "text/html"), resolve(
            new Response(stream, {
              headers: responseHeaders,
              status: responseStatusCode
            })
          ), pipe(body);
        },
        onShellError(error) {
          reject(error);
        },
        onError(error) {
          responseStatusCode = 500, shellRendered && console.error(error);
        }
      }
    );
    setTimeout(abort, ABORT_DELAY);
  });
}
function handleBrowserRequest(request, responseStatusCode, responseHeaders, remixContext, locales, platform) {
  return new Promise((resolve, reject) => {
    let shellRendered = !1, { pipe, abort } = (0, import_server.renderToPipeableStream)(
      /* @__PURE__ */ (0, import_jsx_runtime14.jsx)(OperatingSystemContextProvider, { platform, children: /* @__PURE__ */ (0, import_jsx_runtime14.jsx)(LocaleContextProvider, { locales, children: /* @__PURE__ */ (0, import_jsx_runtime14.jsx)(import_react5.RemixServer, { context: remixContext, url: request.url, abortDelay: ABORT_DELAY }) }) }),
      {
        onShellReady() {
          shellRendered = !0;
          let body = new import_stream.PassThrough(), stream = (0, import_node4.createReadableStreamFromReadable)(body);
          responseHeaders.set("Content-Type", "text/html"), resolve(
            new Response(stream, {
              headers: responseHeaders,
              status: responseStatusCode
            })
          ), pipe(body);
        },
        onShellError(error) {
          reject(error);
        },
        onError(error) {
          responseStatusCode = 500, shellRendered && console.error(error);
        }
      }
    );
    setTimeout(abort, ABORT_DELAY);
  });
}
function handleError(error, { request, params, context: context7 }) {
  logError(error, request);
}
init().catch((error) => {
  logError(error);
});
function logError(error, request) {
  console.error(error), error instanceof Error && error.message.startsWith("There are locked jobs present") && console.log("\u26A0\uFE0F  graphile-worker migration issue detected!");
}
process.on("uncaughtException", (error, origin) => {
  error instanceof src_exports.Prisma.PrismaClientKnownRequestError || error instanceof src_exports.Prisma.PrismaClientUnknownRequestError ? logger.error("uncaughtException prisma error", {
    error,
    prismaMessage: error.message,
    code: "code" in error ? error.code : void 0,
    meta: "meta" in error ? error.meta : void 0,
    stack: error.stack,
    origin
  }) : logger.error("uncaughtException", {
    error: { name: error.name, message: error.message, stack: error.stack },
    origin
  }), process.exit(1);
});
var sqsEventConsumer = singleton("sqsEventConsumer", getSharedSqsEventConsumer);
env2.EVENT_LOOP_MONITOR_ENABLED === "1" && eventLoopMonitor.enable();

// app/root.tsx
var root_exports = {};
__export(root_exports, {
  ErrorBoundary: () => ErrorBoundary2,
  default: () => root_default,
  links: () => links,
  loader: () => loader2,
  meta: () => meta,
  shouldRevalidate: () => shouldRevalidate2
});
var import_react37 = require("@remix-run/react"), import_remix_typedjson9 = require("remix-typedjson");

// ../../node_modules/.pnpm/remix-utils@7.1.0_@remix-run+node@2.1.0_@remix-run+react@2.1.0_@remix-run+router@1.15.3_intl-_2dqvfzp5ebofcgnne2ur4wrx2i/node_modules/remix-utils/build/react/external-scripts.js
var React2 = __toESM(require("react"), 1), import_react7 = require("@remix-run/react");

// ../../node_modules/.pnpm/remix-utils@7.1.0_@remix-run+node@2.1.0_@remix-run+react@2.1.0_@remix-run+router@1.15.3_intl-_2dqvfzp5ebofcgnne2ur4wrx2i/node_modules/remix-utils/build/react/use-hydrated.js
var import_react6 = require("react"), hydrating = !0;
function useHydrated() {
  let [hydrated, setHydrated] = (0, import_react6.useState)(() => !hydrating);
  return (0, import_react6.useEffect)(function() {
    hydrating = !1, setHydrated(!0);
  }, []), hydrated;
}

// ../../node_modules/.pnpm/remix-utils@7.1.0_@remix-run+node@2.1.0_@remix-run+react@2.1.0_@remix-run+router@1.15.3_intl-_2dqvfzp5ebofcgnne2ur4wrx2i/node_modules/remix-utils/build/react/external-scripts.js
function ExternalScripts() {
  let scripts = useExternalScripts();
  return React2.createElement(React2.Fragment, null, scripts.map((props) => React2.createElement(ExternalScript, { key: props.src, ...props })));
}
function useExternalScripts() {
  let location = (0, import_react7.useLocation)(), matches = (0, import_react7.useMatches)();
  return React2.useMemo(() => {
    let scripts = matches.flatMap((match, index, matches2) => {
      if (!match.handle)
        return [];
      if (match.handle === null)
        return [];
      if (typeof match.handle != "object")
        return [];
      if (!("scripts" in match.handle))
        return [];
      let scripts2 = match.handle.scripts;
      if (Array.isArray(scripts2))
        return scripts2;
      if (typeof scripts2 != "function")
        return [];
      let result = scripts2({
        id: match.id,
        data: match.data,
        params: match.params,
        location,
        parentsData: matches2.slice(0, index).map((match2) => match2.data),
        matches: matches2
      });
      return Array.isArray(result) ? result : [];
    }), uniqueScripts = /* @__PURE__ */ new Map();
    for (let script2 of scripts)
      uniqueScripts.set(script2.src, script2);
    return [...uniqueScripts.values()];
  }, [matches, location]);
}
function ExternalScript({ src, preload = !1, async = !0, defer: defer5 = !0, crossOrigin, integrity, type, referrerPolicy, noModule, nonce }) {
  let isHydrated = useHydrated(), startsHydrated = React2.useRef(isHydrated);
  return React2.useEffect(() => {
    if (!startsHydrated.current && isHydrated)
      return;
    let $script = document.createElement("script");
    $script.src = src;
    let attributes = {
      async,
      defer: defer5,
      crossOrigin,
      integrity,
      type,
      referrerPolicy,
      noModule,
      nonce
    };
    for (let [key, value] of Object.entries(attributes))
      value && $script.setAttribute(key, value.toString());
    return document.body.append($script), () => $script.remove();
  }, [
    async,
    crossOrigin,
    defer5,
    integrity,
    isHydrated,
    noModule,
    nonce,
    referrerPolicy,
    src,
    type
  ]), startsHydrated.current && isHydrated ? null : React2.createElement(
    React2.Fragment,
    null,
    preload && React2.createElement("link", { rel: noModule ? "modulepreload" : "preload", href: src, as: noModule ? void 0 : "script", crossOrigin, integrity, referrerPolicy }),
    React2.createElement("script", { src, defer: defer5, async, type, noModule, nonce, crossOrigin, integrity, referrerPolicy })
  );
}

// app/tailwind.css
var tailwind_default = "/build/_assets/tailwind-Y6NGFSJV.css";

// app/components/ErrorDisplay.tsx
var import_react11 = require("@remix-run/react");

// app/components/primitives/Buttons.tsx
var import_react9 = require("@remix-run/react"), import_react10 = require("react");

// app/hooks/useShortcutKeys.tsx
var import_react_hotkeys_hook = require("react-hotkeys-hook");
function useShortcutKeys({
  shortcut: shortcut2,
  action: action106,
  disabled = !1,
  enabledOnInputElements
}) {
  let { platform } = useOperatingSystem(), isMac = platform === "mac", relevantShortcut = shortcut2 && "mac" in shortcut2 ? isMac ? shortcut2.mac : shortcut2.windows : shortcut2, keys = createKeysFromShortcut(relevantShortcut);
  (0, import_react_hotkeys_hook.useHotkeys)(
    keys,
    (event, hotkeysEvent) => {
      action106(event);
    },
    {
      enabled: !disabled,
      enableOnFormTags: enabledOnInputElements ?? relevantShortcut?.enabledOnInputElements,
      enableOnContentEditable: enabledOnInputElements ?? relevantShortcut?.enabledOnInputElements
    }
  );
}
function createKeysFromShortcut(shortcut2) {
  if (!shortcut2)
    return [];
  let modifiers = shortcut2.modifiers, character = shortcut2.key;
  return modifiers ? modifiers.map((k) => k).join("+") + "+" + character : character;
}

// app/components/primitives/NamedIcon.tsx
var import_solid3 = require("@heroicons/react/20/solid"), import_solid4 = require("@heroicons/react/24/solid"), import_companyicons = require("@trigger.dev/companyicons"), import_lucide_react = require("lucide-react");

// app/assets/icons/DynamicTriggerIcon.tsx
var import_jsx_runtime15 = require("react/jsx-runtime");
function DynamicTriggerIcon({ className }) {
  return /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("svg", { viewBox: "0 0 21 21", fill: "none", xmlns: "http://www.w3.org/2000/svg", className, children: /* @__PURE__ */ (0, import_jsx_runtime15.jsx)(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M2.0151 4C2.01629 2.89543 2.91269 2.00097 4.01726 2.00216L16.0172 2.0151C17.1218 2.01629 18.0163 2.91269 18.0151 4.01726L18.0021 16.0172C18.001 17.1218 17.1046 18.0163 16 18.0151L4 18.0021C2.89543 18.001 2.00097 17.1046 2.00216 16L2.0151 4ZM9.26429 4.75782C9.26473 4.34361 9.60088 4.00818 10.0151 4.00863C10.4293 4.00907 10.7647 4.34522 10.7643 4.75944L10.7606 8.1988L13.1952 5.76942C13.4884 5.47684 13.9633 5.47735 14.2559 5.77056C14.5484 6.06377 14.5479 6.53864 14.2547 6.83122L11.8201 9.26058L15.2594 9.26429C15.6736 9.26473 16.0091 9.60088 16.0086 10.0151C16.0082 10.4293 15.672 10.7647 15.2578 10.7643L11.8185 10.7606L14.2478 13.1952C14.5404 13.4884 14.5399 13.9633 14.2467 14.2558C13.9535 14.5484 13.4786 14.5479 13.186 14.2547L10.7567 11.8201L10.753 15.2594C10.7525 15.6736 10.4164 16.0091 10.0022 16.0086C9.58794 16.0082 9.25252 15.672 9.25296 15.2578L9.25667 11.8185L6.82209 14.2478C6.52888 14.5404 6.05401 14.5399 5.76143 14.2467C5.46885 13.9535 5.46937 13.4786 5.76258 13.186L8.19718 10.7567L4.75782 10.753C4.34361 10.7525 4.00818 10.4164 4.00863 10.0022C4.00907 9.58794 4.34522 9.25252 4.75944 9.25296L8.19877 9.25667L5.76942 6.82207C5.47684 6.52886 5.47735 6.05399 5.77056 5.76141C6.06377 5.46883 6.53864 5.46935 6.83122 5.76255L9.26058 8.19716L9.26429 4.75782Z",
      fill: "currentColor"
    }
  ) });
}

// app/assets/icons/EndpointIcon.tsx
var import_jsx_runtime16 = require("react/jsx-runtime");
function EndpointIcon({ className }) {
  return /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)(
    "svg",
    {
      className,
      viewBox: "0 0 24 24",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(
          "path",
          {
            d: "M8.24336 5.11182C8.75159 4.60359 9.57559 4.60359 10.0838 5.11182L18.8882 13.9162C19.3964 14.4244 19.3964 15.2484 18.8882 15.7566L17.1469 17.4979C16.453 18.2196 15.6222 18.7956 14.7031 19.1922C13.7839 19.5889 12.7949 19.7982 11.7939 19.8081C10.7929 19.8179 9.79992 19.628 8.87318 19.2494C7.94643 18.8708 7.10449 18.3113 6.39662 17.6034C5.68875 16.8955 5.12916 16.0536 4.7506 15.1268C4.37205 14.2001 4.18212 13.2071 4.19194 12.2061C4.20176 11.2051 4.41112 10.2161 4.80779 9.29691C5.20445 8.37777 5.78044 7.54697 6.50206 6.85312L8.24336 5.11182Z",
            fill: "currentColor"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(
          "path",
          {
            d: "M3.32398 20.676L7.11974 16.8803",
            stroke: "currentColor",
            strokeWidth: "2.16549",
            strokeLinecap: "round",
            strokeLinejoin: "round"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(
          "path",
          {
            d: "M15.2535 3.32398L11.4578 7.11974",
            stroke: "currentColor",
            strokeWidth: "2.16549",
            strokeLinecap: "round",
            strokeLinejoin: "round"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(
          "path",
          {
            d: "M20.676 8.74649L16.8803 12.5423",
            stroke: "currentColor",
            strokeWidth: "2.16549",
            strokeLinecap: "round",
            strokeLinejoin: "round"
          }
        )
      ]
    }
  );
}

// app/assets/icons/ErrorIcon.tsx
var import_jsx_runtime17 = require("react/jsx-runtime");
function ErrorIcon({ className }) {
  return /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)("svg", { className, viewBox: "0 0 20 20", fill: "none", xmlns: "http://www.w3.org/2000/svg", children: [
    /* @__PURE__ */ (0, import_jsx_runtime17.jsx)("circle", { cx: "10", cy: "10", r: "7", fill: "white" }),
    /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(
      "path",
      {
        fillRule: "evenodd",
        clipRule: "evenodd",
        d: "M18 10C18 14.4183 14.4183 18 10 18C5.58172 18 2 14.4183 2 10C2 5.58172 5.58172 2 10 2C14.4183 2 18 5.58172 18 10ZM10 5C10.4142 5 10.75 5.33579 10.75 5.75V10.25C10.75 10.6642 10.4142 11 10 11C9.58579 11 9.25 10.6642 9.25 10.25V5.75C9.25 5.33579 9.58579 5 10 5ZM10 15C10.5523 15 11 14.5523 11 14C11 13.4477 10.5523 13 10 13C9.44771 13 9 13.4477 9 14C9 14.5523 9.44771 15 10 15Z",
        fill: "currentColor"
      }
    )
  ] });
}

// app/assets/icons/OneTreeIcon.tsx
var import_jsx_runtime18 = require("react/jsx-runtime");
function OneTreeIcon({ className }) {
  return /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)(
    "svg",
    {
      className,
      width: "20",
      height: "20",
      viewBox: "0 0 20 20",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("g", { clipPath: "url(#clip0_4914_58397)", children: [
          /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("g", { filter: "url(#filter0_d_4914_58397)", children: /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(
            "path",
            {
              d: "M9 14H11C11 14 11 15 11 17C11 19 11.5 20 11.5 20H8.5C8.5 20 9 19 9 17C9 15 9 14 9 14Z",
              fill: "url(#paint0_linear_4914_58397)"
            }
          ) }),
          /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("g", { filter: "url(#filter1_d_4914_58397)", children: /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("circle", { cx: "5.5", cy: "8.5", r: "3.5", fill: "currentColor" }) }),
          /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("g", { filter: "url(#filter2_d_4914_58397)", children: /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("circle", { cx: "8", cy: "12", r: "3", fill: "currentColor" }) }),
          /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("circle", { cx: "13", cy: "11", r: "4", fill: "currentColor" }),
          /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("circle", { cx: "15.5", cy: "7.5", r: "2.5", fill: "currentColor" }),
          /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("g", { filter: "url(#filter3_d_4914_58397)", children: /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("circle", { cx: "9", cy: "6", r: "4", fill: "currentColor" }) }),
          /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("circle", { cx: "12.5", cy: "5.5", r: "3.5", fill: "currentColor" })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("defs", { children: [
          /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)(
            "filter",
            {
              id: "filter0_d_4914_58397",
              x: "4.5",
              y: "14",
              width: "11",
              height: "14",
              filterUnits: "userSpaceOnUse",
              colorInterpolationFilters: "sRGB",
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("feFlood", { floodOpacity: "0", result: "BackgroundImageFix" }),
                /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(
                  "feColorMatrix",
                  {
                    in: "SourceAlpha",
                    type: "matrix",
                    values: "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0",
                    result: "hardAlpha"
                  }
                ),
                /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("feOffset", { dy: "4" }),
                /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("feGaussianBlur", { stdDeviation: "2" }),
                /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("feComposite", { in2: "hardAlpha", operator: "out" }),
                /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("feColorMatrix", { type: "matrix", values: "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.25 0" }),
                /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("feBlend", { mode: "normal", in2: "BackgroundImageFix", result: "effect1_dropShadow_4914_58397" }),
                /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(
                  "feBlend",
                  {
                    mode: "normal",
                    in: "SourceGraphic",
                    in2: "effect1_dropShadow_4914_58397",
                    result: "shape"
                  }
                )
              ]
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)(
            "filter",
            {
              id: "filter1_d_4914_58397",
              x: "-2",
              y: "5",
              width: "15",
              height: "15",
              filterUnits: "userSpaceOnUse",
              colorInterpolationFilters: "sRGB",
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("feFlood", { floodOpacity: "0", result: "BackgroundImageFix" }),
                /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(
                  "feColorMatrix",
                  {
                    in: "SourceAlpha",
                    type: "matrix",
                    values: "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0",
                    result: "hardAlpha"
                  }
                ),
                /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("feOffset", { dy: "4" }),
                /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("feGaussianBlur", { stdDeviation: "2" }),
                /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("feComposite", { in2: "hardAlpha", operator: "out" }),
                /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("feColorMatrix", { type: "matrix", values: "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.25 0" }),
                /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("feBlend", { mode: "normal", in2: "BackgroundImageFix", result: "effect1_dropShadow_4914_58397" }),
                /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(
                  "feBlend",
                  {
                    mode: "normal",
                    in: "SourceGraphic",
                    in2: "effect1_dropShadow_4914_58397",
                    result: "shape"
                  }
                )
              ]
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)(
            "filter",
            {
              id: "filter2_d_4914_58397",
              x: "1",
              y: "9",
              width: "14",
              height: "14",
              filterUnits: "userSpaceOnUse",
              colorInterpolationFilters: "sRGB",
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("feFlood", { floodOpacity: "0", result: "BackgroundImageFix" }),
                /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(
                  "feColorMatrix",
                  {
                    in: "SourceAlpha",
                    type: "matrix",
                    values: "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0",
                    result: "hardAlpha"
                  }
                ),
                /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("feOffset", { dy: "4" }),
                /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("feGaussianBlur", { stdDeviation: "2" }),
                /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("feComposite", { in2: "hardAlpha", operator: "out" }),
                /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("feColorMatrix", { type: "matrix", values: "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.25 0" }),
                /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("feBlend", { mode: "normal", in2: "BackgroundImageFix", result: "effect1_dropShadow_4914_58397" }),
                /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(
                  "feBlend",
                  {
                    mode: "normal",
                    in: "SourceGraphic",
                    in2: "effect1_dropShadow_4914_58397",
                    result: "shape"
                  }
                )
              ]
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)(
            "filter",
            {
              id: "filter3_d_4914_58397",
              x: "1",
              y: "-2",
              width: "16",
              height: "16",
              filterUnits: "userSpaceOnUse",
              colorInterpolationFilters: "sRGB",
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("feFlood", { floodOpacity: "0", result: "BackgroundImageFix" }),
                /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(
                  "feColorMatrix",
                  {
                    in: "SourceAlpha",
                    type: "matrix",
                    values: "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0",
                    result: "hardAlpha"
                  }
                ),
                /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("feOffset", {}),
                /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("feGaussianBlur", { stdDeviation: "2" }),
                /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("feComposite", { in2: "hardAlpha", operator: "out" }),
                /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("feColorMatrix", { type: "matrix", values: "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.25 0" }),
                /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("feBlend", { mode: "normal", in2: "BackgroundImageFix", result: "effect1_dropShadow_4914_58397" }),
                /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(
                  "feBlend",
                  {
                    mode: "normal",
                    in: "SourceGraphic",
                    in2: "effect1_dropShadow_4914_58397",
                    result: "shape"
                  }
                )
              ]
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)(
            "linearGradient",
            {
              id: "paint0_linear_4914_58397",
              x1: "10",
              y1: "14",
              x2: "10",
              y2: "20",
              gradientUnits: "userSpaceOnUse",
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("stop", { stopColor: "#402309" }),
                /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("stop", { offset: "1", stopColor: "#713F12" })
              ]
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("clipPath", { id: "clip0_4914_58397", children: /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("rect", { width: "20", height: "20", fill: "white" }) })
        ] })
      ]
    }
  );
}

// app/assets/icons/RunsIcon.tsx
var import_jsx_runtime19 = require("react/jsx-runtime");
function RunsIcon({ className }) {
  return /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)("svg", { className, viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg", children: [
    /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(
      "path",
      {
        d: "M12.2964 3.66962C11.97 3.83662 11.6961 4.09048 11.5047 4.40323C11.3134 4.71598 11.2121 5.07547 11.212 5.44211L11.211 8.0162L9.22047 8.0172C8.95637 8.0172 8.70309 8.12211 8.51635 8.30886C8.3296 8.4956 8.22469 8.74888 8.22469 9.01298V14.9877L8.23166 15.1042C8.26019 15.3464 8.37664 15.5697 8.5589 15.7318C8.74116 15.8939 8.97657 15.9834 9.22047 15.9834L11.211 15.9825L11.212 18.5585C11.2121 18.9524 11.329 19.3373 11.5478 19.6648C11.7666 19.9922 12.0777 20.2474 12.4415 20.3981C12.8054 20.5488 13.2057 20.5882 13.592 20.5114C13.9783 20.4346 14.3331 20.245 14.6116 19.9666L21.1698 13.4084C21.5432 13.0349 21.7529 12.5284 21.7529 12.0003C21.7529 11.4722 21.5432 10.9658 21.1698 10.5923L14.6116 4.03408C14.3331 3.75539 13.9782 3.56558 13.5918 3.48865C13.2054 3.41172 12.8048 3.45114 12.4408 3.60191L12.2964 3.66962Z",
        fill: "currentColor"
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(
      "path",
      {
        d: "M3.24578 8.0172C3.48968 8.01723 3.72509 8.10677 3.90735 8.26885C4.08961 8.43092 4.20606 8.65425 4.23459 8.89647L4.24156 9.01298V14.9877C4.24128 15.2415 4.1441 15.4856 3.96986 15.6701C3.79563 15.8547 3.55751 15.9658 3.30414 15.9806C3.05077 15.9955 2.80128 15.9131 2.60666 15.7502C2.41203 15.5873 2.28695 15.3562 2.25697 15.1042L2.25 14.9877V9.01298C2.25 8.74888 2.35491 8.4956 2.54166 8.30885C2.7284 8.12211 2.98168 8.0172 3.24578 8.0172Z",
        fill: "currentColor"
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(
      "path",
      {
        d: "M6.23312 8.0172C6.47702 8.01723 6.71243 8.10677 6.89469 8.26885C7.07696 8.43092 7.1934 8.65425 7.22193 8.89647L7.2289 9.01298V14.9877C7.22862 15.2415 7.13144 15.4856 6.95721 15.6701C6.78298 15.8547 6.54485 15.9658 6.29148 15.9806C6.03811 15.9955 5.78863 15.9131 5.594 15.7502C5.39937 15.5873 5.27429 15.3562 5.24431 15.1042L5.23734 14.9877V9.01298C5.23734 8.74888 5.34226 8.4956 5.529 8.30885C5.71575 8.12211 5.96903 8.0172 6.23312 8.0172Z",
        fill: "currentColor"
      }
    )
  ] });
}

// app/assets/icons/SaplingIcon.tsx
var import_jsx_runtime20 = require("react/jsx-runtime");
function SaplingIcon({ className }) {
  return /* @__PURE__ */ (0, import_jsx_runtime20.jsxs)(
    "svg",
    {
      className,
      width: "20",
      height: "20",
      viewBox: "0 0 20 20",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime20.jsxs)("g", { clipPath: "url(#clip0_4906_23816)", children: [
          /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(
            "path",
            {
              d: "M4.39538 17.7403C7.25332 16.3563 13.2867 16.4291 15.5096 17.7403C16.6666 18.4227 17.2938 19.0069 17.6294 19.4103C17.8542 19.6806 17.651 20 17.2994 20H2.34215C2.151 20 1.9749 19.8835 2.01519 19.6967C2.09465 19.3281 2.53308 18.6421 4.39538 17.7403Z",
              fill: "url(#paint0_linear_4906_23816)"
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("g", { filter: "url(#filter0_d_4906_23816)", children: /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(
            "path",
            {
              d: "M9.37762 9.80872C7.43627 7.16364 3.49903 8.13783 2.43836 8.66818C2.26159 9.02174 3.32907 8.80396 4.08851 10.8279C4.84794 12.8519 7.63503 13.1864 8.74087 12.0806C9.27121 11.5502 9.69141 10.2363 9.37762 9.80872Z",
              fill: "currentColor"
            }
          ) }),
          /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("g", { filter: "url(#filter1_d_4906_23816)", children: /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(
            "path",
            {
              d: "M9.03577 9.94522L9.99862 9.80223C9.99862 9.80223 10.0387 16.2908 10.9485 16.8179C11.8582 17.345 8.47933 17.1309 8.92618 16.8179C9.37303 16.505 9.03577 9.94522 9.03577 9.94522Z",
              fill: "currentColor"
            }
          ) }),
          /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("g", { filter: "url(#filter2_d_4906_23816)", children: /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(
            "path",
            {
              d: "M9.36235 10.1127C9.36235 5.78131 13.3229 4.41473 15.9395 4.00389C16.1892 3.96468 16.3818 4.22916 16.2961 4.46698C16.0763 5.07608 15.7914 6.09975 15.6717 7.46762C15.5019 9.40897 14.8971 10.3478 14.3613 10.962C13.3664 12.1026 9.36235 12.2341 9.36235 10.1127Z",
              fill: "currentColor"
            }
          ) })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime20.jsxs)("defs", { children: [
          /* @__PURE__ */ (0, import_jsx_runtime20.jsxs)(
            "filter",
            {
              id: "filter0_d_4906_23816",
              x: "-1.58107",
              y: "8.04684",
              width: "15.0664",
              height: "12.6571",
              filterUnits: "userSpaceOnUse",
              colorInterpolationFilters: "sRGB",
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("feFlood", { floodOpacity: "0", result: "BackgroundImageFix" }),
                /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(
                  "feColorMatrix",
                  {
                    in: "SourceAlpha",
                    type: "matrix",
                    values: "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0",
                    result: "hardAlpha"
                  }
                ),
                /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("feOffset", { dy: "4" }),
                /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("feGaussianBlur", { stdDeviation: "2" }),
                /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("feComposite", { in2: "hardAlpha", operator: "out" }),
                /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("feColorMatrix", { type: "matrix", values: "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.25 0" }),
                /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("feBlend", { mode: "normal", in2: "BackgroundImageFix", result: "effect1_dropShadow_4906_23816" }),
                /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(
                  "feBlend",
                  {
                    mode: "normal",
                    in: "SourceGraphic",
                    in2: "effect1_dropShadow_4906_23816",
                    result: "shape"
                  }
                )
              ]
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime20.jsxs)(
            "filter",
            {
              id: "filter1_d_4906_23816",
              x: "4.88525",
              y: "9.80223",
              width: "10.2195",
              height: "15.3357",
              filterUnits: "userSpaceOnUse",
              colorInterpolationFilters: "sRGB",
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("feFlood", { floodOpacity: "0", result: "BackgroundImageFix" }),
                /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(
                  "feColorMatrix",
                  {
                    in: "SourceAlpha",
                    type: "matrix",
                    values: "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0",
                    result: "hardAlpha"
                  }
                ),
                /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("feOffset", { dy: "4" }),
                /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("feGaussianBlur", { stdDeviation: "2" }),
                /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("feComposite", { in2: "hardAlpha", operator: "out" }),
                /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("feColorMatrix", { type: "matrix", values: "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.25 0" }),
                /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("feBlend", { mode: "normal", in2: "BackgroundImageFix", result: "effect1_dropShadow_4906_23816" }),
                /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(
                  "feBlend",
                  {
                    mode: "normal",
                    in: "SourceGraphic",
                    in2: "effect1_dropShadow_4906_23816",
                    result: "shape"
                  }
                )
              ]
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime20.jsxs)(
            "filter",
            {
              id: "filter2_d_4906_23816",
              x: "5.36235",
              y: "4",
              width: "14.9544",
              height: "15.7756",
              filterUnits: "userSpaceOnUse",
              colorInterpolationFilters: "sRGB",
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("feFlood", { floodOpacity: "0", result: "BackgroundImageFix" }),
                /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(
                  "feColorMatrix",
                  {
                    in: "SourceAlpha",
                    type: "matrix",
                    values: "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0",
                    result: "hardAlpha"
                  }
                ),
                /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("feOffset", { dy: "4" }),
                /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("feGaussianBlur", { stdDeviation: "2" }),
                /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("feComposite", { in2: "hardAlpha", operator: "out" }),
                /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("feColorMatrix", { type: "matrix", values: "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.25 0" }),
                /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("feBlend", { mode: "normal", in2: "BackgroundImageFix", result: "effect1_dropShadow_4906_23816" }),
                /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(
                  "feBlend",
                  {
                    mode: "normal",
                    in: "SourceGraphic",
                    in2: "effect1_dropShadow_4906_23816",
                    result: "shape"
                  }
                )
              ]
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime20.jsxs)(
            "linearGradient",
            {
              id: "paint0_linear_4906_23816",
              x1: "10",
              y1: "16.7294",
              x2: "10",
              y2: "20",
              gradientUnits: "userSpaceOnUse",
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("stop", { offset: "0.291667", stopColor: "#402309" }),
                /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("stop", { offset: "1", stopColor: "#713F12" })
              ]
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("clipPath", { id: "clip0_4906_23816", children: /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("rect", { width: "20", height: "20", fill: "white" }) })
        ] })
      ]
    }
  );
}

// app/assets/icons/ScheduleIcon.tsx
var import_solid2 = require("@heroicons/react/24/solid");
var import_jsx_runtime21 = require("react/jsx-runtime");
function ScheduleIcon({ className }) {
  return /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(import_solid2.CalendarDaysIcon, { className: cn("text-sky-500", className) });
}

// app/assets/icons/TwoTreesIcon.tsx
var import_jsx_runtime22 = require("react/jsx-runtime");
function TwoTreesIcon({ className }) {
  return /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)(
    "svg",
    {
      className,
      width: "20",
      height: "20",
      viewBox: "0 0 20 20",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)("g", { clipPath: "url(#clip0_4906_58417)", children: [
          /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(
            "path",
            {
              d: "M10 20V17",
              stroke: "currentColor",
              strokeWidth: "2",
              strokeLinecap: "round",
              strokeLinejoin: "round"
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(
            "path",
            {
              fillRule: "evenodd",
              clipRule: "evenodd",
              d: "M17.7239 16.3L14.8274 13H15.1171C15.3061 12.9973 15.4901 12.9371 15.6464 12.8271C15.8027 12.717 15.9243 12.5619 15.9963 12.3808C16.0683 12.1998 16.0873 12.001 16.0512 11.8088C16.015 11.6167 15.9252 11.4398 15.7929 11.3L12.8965 8H13.0896C13.2868 8.01843 13.4847 7.97361 13.6565 7.87162C13.8282 7.76963 13.9656 7.6154 14.0499 7.42984C14.1342 7.24428 14.1614 7.03636 14.1278 6.83425C14.0942 6.63215 14.0014 6.44564 13.862 6.3L10 2L7.29699 5.0096C8.25755 5.0792 9.16726 5.48607 9.85673 6.16512C10.5124 6.81087 10.9224 7.65741 11.023 8.56163C11.6295 8.91846 12.136 9.42887 12.4856 10.0473C12.9492 10.8671 13.1066 11.8229 12.9286 12.7472C12.7507 13.6714 12.2496 14.5014 11.5168 15.0945C10.8041 15.6712 9.91568 15.9888 8.99914 15.999V18H17.0481C17.237 17.9973 17.4211 17.9371 17.5774 17.8271C17.7337 17.717 17.8553 17.5618 17.9273 17.3808C17.9992 17.1998 18.0183 17.001 17.9822 16.8088C17.946 16.6167 17.8562 16.4398 17.7239 16.3ZM7.99914 18V15.9991H6.00231V18H7.99914ZM4.97036 15.9991H5.00231L5.00231 18H2.95193C2.76296 17.9973 2.57892 17.9371 2.42263 17.8271C2.26635 17.717 2.14468 17.5618 2.07272 17.3808C2.00076 17.1998 1.98168 17.001 2.01783 16.8088C2.05398 16.6167 2.14377 16.4398 2.27609 16.3L3.01417 15.4591C3.59927 15.795 4.26325 15.9821 4.94587 15.9988C4.95403 15.999 4.9622 15.9991 4.97036 15.9991ZM3.69171 14.6872C4.08702 14.8804 4.52307 14.9881 4.97036 14.9991H8.93032C9.64375 15.0045 10.3365 14.7632 10.8877 14.3171C11.4389 13.871 11.8137 13.2485 11.9466 12.5581C12.0796 11.8678 11.9623 11.1534 11.6151 10.5395C11.268 9.9256 10.7131 9.45119 10.0472 9.19898V8.99898C10.0472 8.20331 9.7263 7.44023 9.15504 6.87761C8.58378 6.31499 7.80899 5.99891 7.00111 5.99891C6.77881 5.99891 6.55901 6.02285 6.34528 6.06926L6.13804 6.3C5.99864 6.44564 5.90584 6.63215 5.87222 6.83425C5.8386 7.03636 5.86579 7.24428 5.9501 7.42984C6.03441 7.6154 6.17176 7.76963 6.34354 7.87162C6.51533 7.97361 6.71323 8.01843 6.91043 8H7.10353L4.20706 11.3C4.07475 11.4398 3.98496 11.6167 3.94881 11.8088C3.91266 12.001 3.93174 12.1998 4.0037 12.3808C4.07566 12.5619 4.19732 12.717 4.35361 12.8271C4.5099 12.9371 4.69394 12.9973 4.88291 13H5.17255L3.69171 14.6872Z",
              fill: "currentColor"
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(
            "path",
            {
              d: "M7 20L7 13.9814",
              stroke: "currentColor",
              strokeWidth: "2",
              strokeLinecap: "round",
              strokeLinejoin: "round"
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(
            "path",
            {
              d: "M10.0472 9V9.2C10.7131 9.4522 11.268 9.92661 11.6151 10.5405C11.9623 11.1544 12.0796 11.8687 11.9466 12.5591C11.8137 13.2494 11.4389 13.8719 10.8877 14.318C10.3365 14.7641 9.64374 15.0054 8.93032 15H4.97036C4.26546 14.9827 3.58847 14.7251 3.05487 14.2712C2.52126 13.8172 2.1641 13.195 2.0443 12.5106C1.92449 11.8263 2.04946 11.1222 2.3979 10.5185C2.74634 9.91474 3.29666 9.44875 3.95499 9.2V9C3.95499 8.20435 4.27592 7.44129 4.84718 6.87868C5.41843 6.31607 6.19323 6 7.00111 6C7.80899 6 8.58378 6.31607 9.15504 6.87868C9.7263 7.44129 10.0472 8.20435 10.0472 9Z",
              fill: "currentColor"
            }
          )
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("defs", { children: /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("clipPath", { id: "clip0_4906_58417", children: /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("rect", { width: "20", height: "20", fill: "white" }) }) })
      ]
    }
  );
}

// app/assets/icons/WebhookIcon.tsx
var import_jsx_runtime23 = require("react/jsx-runtime");
function WebhookIcon({ className }) {
  return /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("svg", { className, viewBox: "0 0 190 180", fill: "none", xmlns: "http://www.w3.org/2000/svg", children: /* @__PURE__ */ (0, import_jsx_runtime23.jsx)(
    "path",
    {
      fill: "currentColor",
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M97.1775 62.8673C96.7903 62.892 96.4025 62.9043 96.0145 62.9042C86.0767 62.9042 78.008 54.8167 78.008 44.8556C78.008 34.8946 86.0767 26.807 96.0145 26.807C105.952 26.807 114.021 34.8946 114.021 44.8556C114.027 48.9969 112.605 53.0129 109.996 56.2245L129.9 92.8984C134.805 91.1113 139.984 90.1972 145.203 90.1972C169.928 90.1972 190 110.317 190 135.099C190 159.881 169.928 180 145.203 180C136.454 179.997 127.896 177.435 120.577 172.628C119.792 172.117 119.128 171.439 118.632 170.642C118.136 169.846 117.82 168.95 117.706 168.019C117.593 167.087 117.684 166.141 117.974 165.249C118.263 164.356 118.745 163.538 119.384 162.851C119.397 162.837 119.411 162.822 119.437 162.819C120.511 161.665 121.955 160.925 123.518 160.727C125.08 160.53 126.662 160.888 127.989 161.738C133.116 165.067 139.095 166.838 145.203 166.838C162.68 166.838 176.868 152.616 176.868 135.099C176.868 117.581 162.68 103.36 145.203 103.36C139.151 103.36 130.562 106.013 125.398 109.298C125.132 109.498 124.826 109.639 124.502 109.71C124.177 109.781 123.841 109.781 123.516 109.711C123.191 109.64 122.885 109.5 122.619 109.301C122.352 109.101 122.132 108.846 121.973 108.554L97.1775 62.8673ZM88.9103 140.885C88.0018 146.036 86.2022 150.988 83.5926 155.517C71.2305 176.98 43.8113 184.345 22.3993 171.954C0.987294 159.563 -6.35938 132.079 6.0019 110.616C10.3798 103.023 16.8727 96.8744 24.6848 92.9248C25.5195 92.4994 26.4369 92.2623 27.3727 92.2302C28.3085 92.1981 29.24 92.3718 30.1017 92.739C30.9639 93.1059 31.7354 93.6575 32.3621 94.3552C32.9888 95.0529 33.4555 95.8797 33.7294 96.7775C33.7346 96.7969 33.7399 96.8153 33.7294 96.8391C34.1899 98.3489 34.1078 99.9727 33.4973 101.428C32.8868 102.883 31.7866 104.078 30.3881 104.804C24.9482 107.59 20.4286 111.894 17.3741 117.197C8.63613 132.367 13.829 151.795 28.9642 160.554C44.0994 169.313 63.4824 164.107 72.2204 148.936C75.2464 143.683 77.2482 134.9 76.9926 128.775C76.9519 128.444 76.9829 128.108 77.0835 127.79C77.1841 127.473 77.3519 127.18 77.5754 126.934C77.799 126.687 78.073 126.491 78.3788 126.36C78.6846 126.229 79.015 126.166 79.3475 126.175L131.219 127.494C131.39 127.148 131.573 126.805 131.769 126.466C136.737 117.84 147.759 114.879 156.366 119.859C164.974 124.841 167.926 135.888 162.957 144.515C157.988 153.141 146.966 156.101 138.359 151.12C134.778 149.055 132.019 145.813 130.548 141.943L88.9103 140.885ZM67.1689 79.2862C63.1721 75.9215 59.7926 71.8828 57.1827 67.3521C44.8205 45.8901 52.1672 18.4061 73.5792 6.01594C94.9912 -6.3742 122.411 0.98963 134.773 22.4507C139.144 30.0472 141.21 38.757 140.717 47.5127C140.667 48.4501 140.414 49.3652 139.973 50.1937C139.533 51.0222 138.917 51.7442 138.169 52.3088C137.421 52.8734 136.559 53.2671 135.643 53.4622C134.727 53.6572 133.779 53.649 132.866 53.438C132.847 53.4336 132.828 53.4283 132.812 53.4072C131.278 53.0521 129.916 52.169 128.964 50.9115C128.012 49.654 127.53 48.1018 127.602 46.5249C127.915 40.4094 126.456 34.3338 123.4 29.031C114.662 13.8614 95.2802 8.65544 80.145 17.4139C65.0107 26.1731 59.8161 45.6005 68.5549 60.771C71.5809 66.0244 78.1687 72.1539 83.5882 74.9942C83.8943 75.1245 84.1687 75.3194 84.3928 75.5657C84.617 75.8119 84.7855 76.1036 84.8871 76.421C84.9886 76.7384 85.0207 77.074 84.9812 77.405C84.9417 77.7359 84.8315 78.0544 84.6581 78.3389L57.5815 122.706C57.7958 123.027 58.0005 123.357 58.1963 123.696C63.1644 132.324 60.2113 143.371 51.6042 148.352C42.9979 153.332 31.9762 150.372 27.0072 141.745C22.0383 133.119 24.9914 122.071 33.5976 117.091C37.173 115.015 41.3538 114.241 45.4328 114.9L67.1689 79.2862Z"
    }
  ) });
}

// app/utils/tablerIcons.ts
var tablerIconNames = [
  "tabler-12-hours",
  "tabler-123",
  "tabler-24-hours",
  "tabler-2fa",
  "tabler-360-view",
  "tabler-360",
  "tabler-3d-cube-sphere-off",
  "tabler-3d-cube-sphere",
  "tabler-3d-rotate",
  "tabler-a-b-2",
  "tabler-a-b-off",
  "tabler-a-b",
  "tabler-abacus-off",
  "tabler-abacus",
  "tabler-abc",
  "tabler-access-point-off",
  "tabler-access-point",
  "tabler-accessible-off-filled",
  "tabler-accessible-off",
  "tabler-accessible",
  "tabler-activity-heartbeat",
  "tabler-activity",
  "tabler-ad-2",
  "tabler-ad-circle-filled",
  "tabler-ad-circle-off",
  "tabler-ad-circle",
  "tabler-ad-filled",
  "tabler-ad-off",
  "tabler-ad",
  "tabler-address-book-off",
  "tabler-address-book",
  "tabler-adjustments-alt",
  "tabler-adjustments-bolt",
  "tabler-adjustments-cancel",
  "tabler-adjustments-check",
  "tabler-adjustments-code",
  "tabler-adjustments-cog",
  "tabler-adjustments-dollar",
  "tabler-adjustments-down",
  "tabler-adjustments-exclamation",
  "tabler-adjustments-filled",
  "tabler-adjustments-heart",
  "tabler-adjustments-horizontal",
  "tabler-adjustments-minus",
  "tabler-adjustments-off",
  "tabler-adjustments-pause",
  "tabler-adjustments-pin",
  "tabler-adjustments-plus",
  "tabler-adjustments-question",
  "tabler-adjustments-search",
  "tabler-adjustments-share",
  "tabler-adjustments-star",
  "tabler-adjustments-up",
  "tabler-adjustments-x",
  "tabler-adjustments",
  "tabler-aerial-lift",
  "tabler-affiliate-filled",
  "tabler-affiliate",
  "tabler-air-balloon",
  "tabler-air-conditioning-disabled",
  "tabler-air-conditioning",
  "tabler-air-traffic-control",
  "tabler-alarm-average",
  "tabler-alarm-filled",
  "tabler-alarm-minus-filled",
  "tabler-alarm-minus",
  "tabler-alarm-off",
  "tabler-alarm-plus-filled",
  "tabler-alarm-plus",
  "tabler-alarm-snooze-filled",
  "tabler-alarm-snooze",
  "tabler-alarm",
  "tabler-album-off",
  "tabler-album",
  "tabler-alert-circle-filled",
  "tabler-alert-circle-off",
  "tabler-alert-circle",
  "tabler-alert-hexagon-filled",
  "tabler-alert-hexagon-off",
  "tabler-alert-hexagon",
  "tabler-alert-octagon-filled",
  "tabler-alert-octagon",
  "tabler-alert-small-off",
  "tabler-alert-small",
  "tabler-alert-square-filled",
  "tabler-alert-square-rounded-filled",
  "tabler-alert-square-rounded-off",
  "tabler-alert-square-rounded",
  "tabler-alert-square",
  "tabler-alert-triangle-filled",
  "tabler-alert-triangle-off",
  "tabler-alert-triangle",
  "tabler-alien-filled",
  "tabler-alien",
  "tabler-align-box-bottom-center-filled",
  "tabler-align-box-bottom-center",
  "tabler-align-box-bottom-left-filled",
  "tabler-align-box-bottom-left",
  "tabler-align-box-bottom-right-filled",
  "tabler-align-box-bottom-right",
  "tabler-align-box-center-bottom",
  "tabler-align-box-center-middle-filled",
  "tabler-align-box-center-middle",
  "tabler-align-box-center-stretch",
  "tabler-align-box-center-top",
  "tabler-align-box-left-bottom-filled",
  "tabler-align-box-left-bottom",
  "tabler-align-box-left-middle-filled",
  "tabler-align-box-left-middle",
  "tabler-align-box-left-stretch",
  "tabler-align-box-left-top-filled",
  "tabler-align-box-left-top",
  "tabler-align-box-right-bottom-filled",
  "tabler-align-box-right-bottom",
  "tabler-align-box-right-middle-filled",
  "tabler-align-box-right-middle",
  "tabler-align-box-right-stretch",
  "tabler-align-box-right-top-filled",
  "tabler-align-box-right-top",
  "tabler-align-box-top-center-filled",
  "tabler-align-box-top-center",
  "tabler-align-box-top-left-filled",
  "tabler-align-box-top-left",
  "tabler-align-box-top-right-filled",
  "tabler-align-box-top-right",
  "tabler-align-center",
  "tabler-align-justified",
  "tabler-align-left",
  "tabler-align-right",
  "tabler-alpha",
  "tabler-alphabet-cyrillic",
  "tabler-alphabet-greek",
  "tabler-alphabet-latin",
  "tabler-alt",
  "tabler-ambulance",
  "tabler-ampersand",
  "tabler-analyze-filled",
  "tabler-analyze-off",
  "tabler-analyze",
  "tabler-anchor-off",
  "tabler-anchor",
  "tabler-angle",
  "tabler-ankh",
  "tabler-antenna-bars-1",
  "tabler-antenna-bars-2",
  "tabler-antenna-bars-3",
  "tabler-antenna-bars-4",
  "tabler-antenna-bars-5",
  "tabler-antenna-bars-off",
  "tabler-antenna-off",
  "tabler-antenna",
  "tabler-aperture-off",
  "tabler-aperture",
  "tabler-api-app-off",
  "tabler-api-app",
  "tabler-api-off",
  "tabler-api",
  "tabler-app-window-filled",
  "tabler-app-window",
  "tabler-apple",
  "tabler-apps-filled",
  "tabler-apps-off",
  "tabler-apps",
  "tabler-archery-arrow",
  "tabler-archive-filled",
  "tabler-archive-off",
  "tabler-archive",
  "tabler-armchair-2-off",
  "tabler-armchair-2",
  "tabler-armchair-off",
  "tabler-armchair",
  "tabler-arrow-autofit-content-filled",
  "tabler-arrow-autofit-content",
  "tabler-arrow-autofit-down",
  "tabler-arrow-autofit-height",
  "tabler-arrow-autofit-left",
  "tabler-arrow-autofit-right",
  "tabler-arrow-autofit-up",
  "tabler-arrow-autofit-width",
  "tabler-arrow-back-up-double",
  "tabler-arrow-back-up",
  "tabler-arrow-back",
  "tabler-arrow-badge-down-filled",
  "tabler-arrow-badge-down",
  "tabler-arrow-badge-left-filled",
  "tabler-arrow-badge-left",
  "tabler-arrow-badge-right-filled",
  "tabler-arrow-badge-right",
  "tabler-arrow-badge-up-filled",
  "tabler-arrow-badge-up",
  "tabler-arrow-bar-both",
  "tabler-arrow-bar-down",
  "tabler-arrow-bar-left",
  "tabler-arrow-bar-right",
  "tabler-arrow-bar-to-down",
  "tabler-arrow-bar-to-left",
  "tabler-arrow-bar-to-right",
  "tabler-arrow-bar-to-up",
  "tabler-arrow-bar-up",
  "tabler-arrow-bear-left-2",
  "tabler-arrow-bear-left",
  "tabler-arrow-bear-right-2",
  "tabler-arrow-bear-right",
  "tabler-arrow-big-down-filled",
  "tabler-arrow-big-down-line-filled",
  "tabler-arrow-big-down-line",
  "tabler-arrow-big-down-lines-filled",
  "tabler-arrow-big-down-lines",
  "tabler-arrow-big-down",
  "tabler-arrow-big-left-filled",
  "tabler-arrow-big-left-line-filled",
  "tabler-arrow-big-left-line",
  "tabler-arrow-big-left-lines-filled",
  "tabler-arrow-big-left-lines",
  "tabler-arrow-big-left",
  "tabler-arrow-big-right-filled",
  "tabler-arrow-big-right-line-filled",
  "tabler-arrow-big-right-line",
  "tabler-arrow-big-right-lines-filled",
  "tabler-arrow-big-right-lines",
  "tabler-arrow-big-right",
  "tabler-arrow-big-up-filled",
  "tabler-arrow-big-up-line-filled",
  "tabler-arrow-big-up-line",
  "tabler-arrow-big-up-lines-filled",
  "tabler-arrow-big-up-lines",
  "tabler-arrow-big-up",
  "tabler-arrow-bounce",
  "tabler-arrow-capsule",
  "tabler-arrow-curve-left",
  "tabler-arrow-curve-right",
  "tabler-arrow-down-bar",
  "tabler-arrow-down-circle",
  "tabler-arrow-down-left-circle",
  "tabler-arrow-down-left",
  "tabler-arrow-down-rhombus",
  "tabler-arrow-down-right-circle",
  "tabler-arrow-down-right",
  "tabler-arrow-down-square",
  "tabler-arrow-down-tail",
  "tabler-arrow-down",
  "tabler-arrow-elbow-left",
  "tabler-arrow-elbow-right",
  "tabler-arrow-fork",
  "tabler-arrow-forward-up-double",
  "tabler-arrow-forward-up",
  "tabler-arrow-forward",
  "tabler-arrow-guide",
  "tabler-arrow-iteration",
  "tabler-arrow-left-bar",
  "tabler-arrow-left-circle",
  "tabler-arrow-left-rhombus",
  "tabler-arrow-left-right",
  "tabler-arrow-left-square",
  "tabler-arrow-left-tail",
  "tabler-arrow-left",
  "tabler-arrow-loop-left-2",
  "tabler-arrow-loop-left",
  "tabler-arrow-loop-right-2",
  "tabler-arrow-loop-right",
  "tabler-arrow-merge-alt-left",
  "tabler-arrow-merge-alt-right",
  "tabler-arrow-merge-both",
  "tabler-arrow-merge-left",
  "tabler-arrow-merge-right",
  "tabler-arrow-merge",
  "tabler-arrow-move-down",
  "tabler-arrow-move-left",
  "tabler-arrow-move-right",
  "tabler-arrow-move-up",
  "tabler-arrow-narrow-down",
  "tabler-arrow-narrow-left",
  "tabler-arrow-narrow-right",
  "tabler-arrow-narrow-up",
  "tabler-arrow-ramp-left-2",
  "tabler-arrow-ramp-left-3",
  "tabler-arrow-ramp-left",
  "tabler-arrow-ramp-right-2",
  "tabler-arrow-ramp-right-3",
  "tabler-arrow-ramp-right",
  "tabler-arrow-right-bar",
  "tabler-arrow-right-circle",
  "tabler-arrow-right-rhombus",
  "tabler-arrow-right-square",
  "tabler-arrow-right-tail",
  "tabler-arrow-right",
  "tabler-arrow-rotary-first-left",
  "tabler-arrow-rotary-first-right",
  "tabler-arrow-rotary-last-left",
  "tabler-arrow-rotary-last-right",
  "tabler-arrow-rotary-left",
  "tabler-arrow-rotary-right",
  "tabler-arrow-rotary-straight",
  "tabler-arrow-roundabout-left",
  "tabler-arrow-roundabout-right",
  "tabler-arrow-sharp-turn-left",
  "tabler-arrow-sharp-turn-right",
  "tabler-arrow-up-bar",
  "tabler-arrow-up-circle",
  "tabler-arrow-up-left-circle",
  "tabler-arrow-up-left",
  "tabler-arrow-up-rhombus",
  "tabler-arrow-up-right-circle",
  "tabler-arrow-up-right",
  "tabler-arrow-up-square",
  "tabler-arrow-up-tail",
  "tabler-arrow-up",
  "tabler-arrow-wave-left-down",
  "tabler-arrow-wave-left-up",
  "tabler-arrow-wave-right-down",
  "tabler-arrow-wave-right-up",
  "tabler-arrow-zig-zag",
  "tabler-arrows-cross",
  "tabler-arrows-diagonal-2",
  "tabler-arrows-diagonal-minimize-2",
  "tabler-arrows-diagonal-minimize",
  "tabler-arrows-diagonal",
  "tabler-arrows-diff",
  "tabler-arrows-double-ne-sw",
  "tabler-arrows-double-nw-se",
  "tabler-arrows-double-se-nw",
  "tabler-arrows-double-sw-ne",
  "tabler-arrows-down-up",
  "tabler-arrows-down",
  "tabler-arrows-exchange-2",
  "tabler-arrows-exchange",
  "tabler-arrows-horizontal",
  "tabler-arrows-join-2",
  "tabler-arrows-join",
  "tabler-arrows-left-down",
  "tabler-arrows-left-right",
  "tabler-arrows-left",
  "tabler-arrows-maximize",
  "tabler-arrows-minimize",
  "tabler-arrows-move-horizontal",
  "tabler-arrows-move-vertical",
  "tabler-arrows-move",
  "tabler-arrows-random",
  "tabler-arrows-right-down",
  "tabler-arrows-right-left",
  "tabler-arrows-right",
  "tabler-arrows-shuffle-2",
  "tabler-arrows-shuffle",
  "tabler-arrows-sort",
  "tabler-arrows-split-2",
  "tabler-arrows-split",
  "tabler-arrows-transfer-down",
  "tabler-arrows-transfer-up",
  "tabler-arrows-up-down",
  "tabler-arrows-up-left",
  "tabler-arrows-up-right",
  "tabler-arrows-up",
  "tabler-arrows-vertical",
  "tabler-artboard-filled",
  "tabler-artboard-off",
  "tabler-artboard",
  "tabler-article-filled-filled",
  "tabler-article-off",
  "tabler-article",
  "tabler-aspect-ratio-filled",
  "tabler-aspect-ratio-off",
  "tabler-aspect-ratio",
  "tabler-assembly-off",
  "tabler-assembly",
  "tabler-asset",
  "tabler-asterisk-simple",
  "tabler-asterisk",
  "tabler-at-off",
  "tabler-at",
  "tabler-atom-2-filled",
  "tabler-atom-2",
  "tabler-atom-off",
  "tabler-atom",
  "tabler-augmented-reality-2",
  "tabler-augmented-reality-off",
  "tabler-augmented-reality",
  "tabler-automatic-gearbox",
  "tabler-award-filled",
  "tabler-award-off",
  "tabler-award",
  "tabler-axe",
  "tabler-axis-x",
  "tabler-axis-y",
  "tabler-baby-bottle",
  "tabler-baby-carriage",
  "tabler-backhoe",
  "tabler-backpack-off",
  "tabler-backpack",
  "tabler-backslash",
  "tabler-backspace-filled",
  "tabler-backspace",
  "tabler-badge-3d",
  "tabler-badge-4k",
  "tabler-badge-8k",
  "tabler-badge-ad",
  "tabler-badge-ar",
  "tabler-badge-cc",
  "tabler-badge-filled",
  "tabler-badge-hd",
  "tabler-badge-off",
  "tabler-badge-sd",
  "tabler-badge-tm",
  "tabler-badge-vo",
  "tabler-badge-vr",
  "tabler-badge-wc",
  "tabler-badge",
  "tabler-badges-filled",
  "tabler-badges-off",
  "tabler-badges",
  "tabler-baguette",
  "tabler-ball-american-football-off",
  "tabler-ball-american-football",
  "tabler-ball-baseball",
  "tabler-ball-basketball",
  "tabler-ball-bowling",
  "tabler-ball-football-off",
  "tabler-ball-football",
  "tabler-ball-tennis",
  "tabler-ball-volleyball",
  "tabler-balloon-filled",
  "tabler-balloon-off",
  "tabler-balloon",
  "tabler-ballpen-filled",
  "tabler-ballpen-off",
  "tabler-ballpen",
  "tabler-ban",
  "tabler-bandage-filled",
  "tabler-bandage-off",
  "tabler-bandage",
  "tabler-barbell-off",
  "tabler-barbell",
  "tabler-barcode-off",
  "tabler-barcode",
  "tabler-barrel-off",
  "tabler-barrel",
  "tabler-barrier-block-off",
  "tabler-barrier-block",
  "tabler-baseline-density-large",
  "tabler-baseline-density-medium",
  "tabler-baseline-density-small",
  "tabler-baseline",
  "tabler-basket-bolt",
  "tabler-basket-cancel",
  "tabler-basket-check",
  "tabler-basket-code",
  "tabler-basket-cog",
  "tabler-basket-discount",
  "tabler-basket-dollar",
  "tabler-basket-down",
  "tabler-basket-exclamation",
  "tabler-basket-filled",
  "tabler-basket-heart",
  "tabler-basket-minus",
  "tabler-basket-off",
  "tabler-basket-pause",
  "tabler-basket-pin",
  "tabler-basket-plus",
  "tabler-basket-question",
  "tabler-basket-search",
  "tabler-basket-share",
  "tabler-basket-star",
  "tabler-basket-up",
  "tabler-basket-x",
  "tabler-basket",
  "tabler-bat",
  "tabler-bath-filled",
  "tabler-bath-off",
  "tabler-bath",
  "tabler-battery-1-filled",
  "tabler-battery-1",
  "tabler-battery-2-filled",
  "tabler-battery-2",
  "tabler-battery-3-filled",
  "tabler-battery-3",
  "tabler-battery-4-filled",
  "tabler-battery-4",
  "tabler-battery-automotive",
  "tabler-battery-charging-2",
  "tabler-battery-charging",
  "tabler-battery-eco",
  "tabler-battery-filled",
  "tabler-battery-off",
  "tabler-battery",
  "tabler-beach-off",
  "tabler-beach",
  "tabler-bed-filled",
  "tabler-bed-flat",
  "tabler-bed-off",
  "tabler-bed",
  "tabler-beer-filled",
  "tabler-beer-off",
  "tabler-beer",
  "tabler-bell-bolt",
  "tabler-bell-cancel",
  "tabler-bell-check",
  "tabler-bell-code",
  "tabler-bell-cog",
  "tabler-bell-dollar",
  "tabler-bell-down",
  "tabler-bell-exclamation",
  "tabler-bell-filled",
  "tabler-bell-heart",
  "tabler-bell-minus-filled",
  "tabler-bell-minus",
  "tabler-bell-off",
  "tabler-bell-pause",
  "tabler-bell-pin",
  "tabler-bell-plus-filled",
  "tabler-bell-plus",
  "tabler-bell-question",
  "tabler-bell-ringing-2-filled",
  "tabler-bell-ringing-2",
  "tabler-bell-ringing-filled",
  "tabler-bell-ringing",
  "tabler-bell-school",
  "tabler-bell-search",
  "tabler-bell-share",
  "tabler-bell-star",
  "tabler-bell-up",
  "tabler-bell-x-filled",
  "tabler-bell-x",
  "tabler-bell-z-filled",
  "tabler-bell-z",
  "tabler-bell",
  "tabler-beta",
  "tabler-bible",
  "tabler-bike-off",
  "tabler-bike",
  "tabler-binary-off",
  "tabler-binary-tree-2",
  "tabler-binary-tree",
  "tabler-binary",
  "tabler-biohazard-off",
  "tabler-biohazard",
  "tabler-blade-filled",
  "tabler-blade",
  "tabler-bleach-chlorine",
  "tabler-bleach-no-chlorine",
  "tabler-bleach-off",
  "tabler-bleach",
  "tabler-blender",
  "tabler-blockquote",
  "tabler-bluetooth-connected",
  "tabler-bluetooth-off",
  "tabler-bluetooth-x",
  "tabler-bluetooth",
  "tabler-blur-off",
  "tabler-blur",
  "tabler-bmp",
  "tabler-body-scan",
  "tabler-bold-off",
  "tabler-bold",
  "tabler-bolt-off",
  "tabler-bolt",
  "tabler-bomb-filled",
  "tabler-bomb",
  "tabler-bone-off",
  "tabler-bone",
  "tabler-bong-off",
  "tabler-bong",
  "tabler-book-2",
  "tabler-book-download",
  "tabler-book-filled",
  "tabler-book-off",
  "tabler-book-upload",
  "tabler-book",
  "tabler-bookmark-ai",
  "tabler-bookmark-edit",
  "tabler-bookmark-filled",
  "tabler-bookmark-minus",
  "tabler-bookmark-off",
  "tabler-bookmark-plus",
  "tabler-bookmark-question",
  "tabler-bookmark",
  "tabler-bookmarks-filled",
  "tabler-bookmarks-off",
  "tabler-bookmarks",
  "tabler-books-off",
  "tabler-books",
  "tabler-border-all",
  "tabler-border-bottom",
  "tabler-border-corners",
  "tabler-border-horizontal",
  "tabler-border-inner",
  "tabler-border-left",
  "tabler-border-none",
  "tabler-border-outer",
  "tabler-border-radius",
  "tabler-border-right",
  "tabler-border-sides",
  "tabler-border-style-2",
  "tabler-border-style",
  "tabler-border-top",
  "tabler-border-vertical",
  "tabler-bottle-filled",
  "tabler-bottle-off",
  "tabler-bottle",
  "tabler-bounce-left-filled",
  "tabler-bounce-left",
  "tabler-bounce-right-filled",
  "tabler-bounce-right",
  "tabler-bow",
  "tabler-bowl-filled",
  "tabler-bowl",
  "tabler-box-align-bottom-filled",
  "tabler-box-align-bottom-left-filled",
  "tabler-box-align-bottom-left",
  "tabler-box-align-bottom-right-filled",
  "tabler-box-align-bottom-right",
  "tabler-box-align-bottom",
  "tabler-box-align-left-filled",
  "tabler-box-align-left",
  "tabler-box-align-right-filled",
  "tabler-box-align-right",
  "tabler-box-align-top-filled",
  "tabler-box-align-top-left-filled",
  "tabler-box-align-top-left",
  "tabler-box-align-top-right-filled",
  "tabler-box-align-top-right",
  "tabler-box-align-top",
  "tabler-box-margin",
  "tabler-box-model-2-off",
  "tabler-box-model-2",
  "tabler-box-model-off",
  "tabler-box-model",
  "tabler-box-multiple-0",
  "tabler-box-multiple-1",
  "tabler-box-multiple-2",
  "tabler-box-multiple-3",
  "tabler-box-multiple-4",
  "tabler-box-multiple-5",
  "tabler-box-multiple-6",
  "tabler-box-multiple-7",
  "tabler-box-multiple-8",
  "tabler-box-multiple-9",
  "tabler-box-multiple",
  "tabler-box-off",
  "tabler-box-padding",
  "tabler-box-seam",
  "tabler-box",
  "tabler-braces-off",
  "tabler-braces",
  "tabler-brackets-angle-off",
  "tabler-brackets-angle",
  "tabler-brackets-contain-end",
  "tabler-brackets-contain-start",
  "tabler-brackets-contain",
  "tabler-brackets-off",
  "tabler-brackets",
  "tabler-braille",
  "tabler-brain",
  "tabler-brand-4chan",
  "tabler-brand-abstract",
  "tabler-brand-adobe",
  "tabler-brand-adonis-js",
  "tabler-brand-airbnb",
  "tabler-brand-airtable",
  "tabler-brand-algolia",
  "tabler-brand-alipay",
  "tabler-brand-alpine-js",
  "tabler-brand-amazon",
  "tabler-brand-amd",
  "tabler-brand-amigo",
  "tabler-brand-among-us",
  "tabler-brand-android",
  "tabler-brand-angular",
  "tabler-brand-ansible",
  "tabler-brand-ao3",
  "tabler-brand-appgallery",
  "tabler-brand-apple-arcade",
  "tabler-brand-apple-podcast",
  "tabler-brand-apple",
  "tabler-brand-appstore",
  "tabler-brand-asana",
  "tabler-brand-auth0",
  "tabler-brand-aws",
  "tabler-brand-azure",
  "tabler-brand-backbone",
  "tabler-brand-badoo",
  "tabler-brand-baidu",
  "tabler-brand-bandcamp",
  "tabler-brand-bandlab",
  "tabler-brand-beats",
  "tabler-brand-behance",
  "tabler-brand-bilibili",
  "tabler-brand-binance",
  "tabler-brand-bing",
  "tabler-brand-bitbucket",
  "tabler-brand-blackberry",
  "tabler-brand-blender",
  "tabler-brand-blogger",
  "tabler-brand-booking",
  "tabler-brand-bootstrap",
  "tabler-brand-bulma",
  "tabler-brand-bumble",
  "tabler-brand-bunpo",
  "tabler-brand-c-sharp",
  "tabler-brand-cake",
  "tabler-brand-cakephp",
  "tabler-brand-campaignmonitor",
  "tabler-brand-carbon",
  "tabler-brand-cashapp",
  "tabler-brand-chrome",
  "tabler-brand-cinema-4d",
  "tabler-brand-citymapper",
  "tabler-brand-cloudflare",
  "tabler-brand-codecov",
  "tabler-brand-codepen",
  "tabler-brand-codesandbox",
  "tabler-brand-cohost",
  "tabler-brand-coinbase",
  "tabler-brand-comedy-central",
  "tabler-brand-coreos",
  "tabler-brand-couchdb",
  "tabler-brand-couchsurfing",
  "tabler-brand-cpp",
  "tabler-brand-craft",
  "tabler-brand-crunchbase",
  "tabler-brand-css3",
  "tabler-brand-ctemplar",
  "tabler-brand-cucumber",
  "tabler-brand-cupra",
  "tabler-brand-cypress",
  "tabler-brand-d3",
  "tabler-brand-databricks",
  "tabler-brand-days-counter",
  "tabler-brand-dcos",
  "tabler-brand-debian",
  "tabler-brand-deezer",
  "tabler-brand-deliveroo",
  "tabler-brand-deno",
  "tabler-brand-denodo",
  "tabler-brand-deviantart",
  "tabler-brand-digg",
  "tabler-brand-dingtalk",
  "tabler-brand-discord-filled",
  "tabler-brand-discord",
  "tabler-brand-disney",
  "tabler-brand-disqus",
  "tabler-brand-django",
  "tabler-brand-docker",
  "tabler-brand-doctrine",
  "tabler-brand-dolby-digital",
  "tabler-brand-douban",
  "tabler-brand-dribbble-filled",
  "tabler-brand-dribbble",
  "tabler-brand-drops",
  "tabler-brand-drupal",
  "tabler-brand-edge",
  "tabler-brand-elastic",
  "tabler-brand-electronic-arts",
  "tabler-brand-ember",
  "tabler-brand-envato",
  "tabler-brand-etsy",
  "tabler-brand-evernote",
  "tabler-brand-facebook-filled",
  "tabler-brand-facebook",
  "tabler-brand-feedly",
  "tabler-brand-figma",
  "tabler-brand-filezilla",
  "tabler-brand-finder",
  "tabler-brand-firebase",
  "tabler-brand-firefox",
  "tabler-brand-fiverr",
  "tabler-brand-flickr",
  "tabler-brand-flightradar24",
  "tabler-brand-flipboard",
  "tabler-brand-flutter",
  "tabler-brand-fortnite",
  "tabler-brand-foursquare",
  "tabler-brand-framer-motion",
  "tabler-brand-framer",
  "tabler-brand-funimation",
  "tabler-brand-gatsby",
  "tabler-brand-git",
  "tabler-brand-github-copilot",
  "tabler-brand-github-filled",
  "tabler-brand-github",
  "tabler-brand-gitlab",
  "tabler-brand-gmail",
  "tabler-brand-golang",
  "tabler-brand-google-analytics",
  "tabler-brand-google-big-query",
  "tabler-brand-google-drive",
  "tabler-brand-google-fit",
  "tabler-brand-google-home",
  "tabler-brand-google-maps",
  "tabler-brand-google-one",
  "tabler-brand-google-photos",
  "tabler-brand-google-play",
  "tabler-brand-google-podcasts",
  "tabler-brand-google",
  "tabler-brand-grammarly",
  "tabler-brand-graphql",
  "tabler-brand-gravatar",
  "tabler-brand-grindr",
  "tabler-brand-guardian",
  "tabler-brand-gumroad",
  "tabler-brand-hbo",
  "tabler-brand-headlessui",
  "tabler-brand-hexo",
  "tabler-brand-hipchat",
  "tabler-brand-html5",
  "tabler-brand-inertia",
  "tabler-brand-instagram",
  "tabler-brand-intercom",
  "tabler-brand-itch",
  "tabler-brand-javascript",
  "tabler-brand-juejin",
  "tabler-brand-kbin",
  "tabler-brand-kick",
  "tabler-brand-kickstarter",
  "tabler-brand-kotlin",
  "tabler-brand-laravel",
  "tabler-brand-lastfm",
  "tabler-brand-leetcode",
  "tabler-brand-letterboxd",
  "tabler-brand-line",
  "tabler-brand-linkedin",
  "tabler-brand-linktree",
  "tabler-brand-linqpad",
  "tabler-brand-loom",
  "tabler-brand-mailgun",
  "tabler-brand-mantine",
  "tabler-brand-mastercard",
  "tabler-brand-mastodon",
  "tabler-brand-matrix",
  "tabler-brand-mcdonalds",
  "tabler-brand-medium",
  "tabler-brand-meetup",
  "tabler-brand-mercedes",
  "tabler-brand-messenger",
  "tabler-brand-meta",
  "tabler-brand-minecraft",
  "tabler-brand-miniprogram",
  "tabler-brand-mixpanel",
  "tabler-brand-monday",
  "tabler-brand-mongodb",
  "tabler-brand-my-oppo",
  "tabler-brand-mysql",
  "tabler-brand-national-geographic",
  "tabler-brand-nem",
  "tabler-brand-netbeans",
  "tabler-brand-netease-music",
  "tabler-brand-netflix",
  "tabler-brand-nexo",
  "tabler-brand-nextcloud",
  "tabler-brand-nextjs",
  "tabler-brand-nodejs",
  "tabler-brand-nord-vpn",
  "tabler-brand-notion",
  "tabler-brand-npm",
  "tabler-brand-nuxt",
  "tabler-brand-nytimes",
  "tabler-brand-oauth",
  "tabler-brand-office",
  "tabler-brand-ok-ru",
  "tabler-brand-onedrive",
  "tabler-brand-onlyfans",
  "tabler-brand-open-source",
  "tabler-brand-openai",
  "tabler-brand-openvpn",
  "tabler-brand-opera",
  "tabler-brand-pagekit",
  "tabler-brand-parsinta",
  "tabler-brand-patreon-filled",
  "tabler-brand-patreon",
  "tabler-brand-paypal-filled",
  "tabler-brand-paypal",
  "tabler-brand-paypay",
  "tabler-brand-peanut",
  "tabler-brand-pepsi",
  "tabler-brand-php",
  "tabler-brand-picsart",
  "tabler-brand-pinterest",
  "tabler-brand-planetscale",
  "tabler-brand-pocket",
  "tabler-brand-polymer",
  "tabler-brand-powershell",
  "tabler-brand-prisma",
  "tabler-brand-producthunt",
  "tabler-brand-pushbullet",
  "tabler-brand-pushover",
  "tabler-brand-python",
  "tabler-brand-qq",
  "tabler-brand-radix-ui",
  "tabler-brand-react-native",
  "tabler-brand-react",
  "tabler-brand-reason",
  "tabler-brand-reddit",
  "tabler-brand-redhat",
  "tabler-brand-redux",
  "tabler-brand-revolut",
  "tabler-brand-rumble",
  "tabler-brand-rust",
  "tabler-brand-safari",
  "tabler-brand-samsungpass",
  "tabler-brand-sass",
  "tabler-brand-sentry",
  "tabler-brand-sharik",
  "tabler-brand-shazam",
  "tabler-brand-shopee",
  "tabler-brand-sketch",
  "tabler-brand-skype",
  "tabler-brand-slack",
  "tabler-brand-snapchat",
  "tabler-brand-snapseed",
  "tabler-brand-snowflake",
  "tabler-brand-socket-io",
  "tabler-brand-solidjs",
  "tabler-brand-soundcloud",
  "tabler-brand-spacehey",
  "tabler-brand-speedtest",
  "tabler-brand-spotify",
  "tabler-brand-stackoverflow",
  "tabler-brand-stackshare",
  "tabler-brand-steam",
  "tabler-brand-storj",
  "tabler-brand-storybook",
  "tabler-brand-storytel",
  "tabler-brand-strava",
  "tabler-brand-stripe",
  "tabler-brand-sublime-text",
  "tabler-brand-sugarizer",
  "tabler-brand-supabase",
  "tabler-brand-superhuman",
  "tabler-brand-supernova",
  "tabler-brand-surfshark",
  "tabler-brand-svelte",
  "tabler-brand-swift",
  "tabler-brand-symfony",
  "tabler-brand-tabler",
  "tabler-brand-tailwind",
  "tabler-brand-taobao",
  "tabler-brand-teams",
  "tabler-brand-ted",
  "tabler-brand-telegram",
  "tabler-brand-terraform",
  "tabler-brand-tether",
  "tabler-brand-threads",
  "tabler-brand-threejs",
  "tabler-brand-tidal",
  "tabler-brand-tiktok-filled",
  "tabler-brand-tiktok",
  "tabler-brand-tinder",
  "tabler-brand-topbuzz",
  "tabler-brand-torchain",
  "tabler-brand-toyota",
  "tabler-brand-trello",
  "tabler-brand-tripadvisor",
  "tabler-brand-tumblr",
  "tabler-brand-twilio",
  "tabler-brand-twitch",
  "tabler-brand-twitter-filled",
  "tabler-brand-twitter",
  "tabler-brand-typescript",
  "tabler-brand-uber",
  "tabler-brand-ubuntu",
  "tabler-brand-unity",
  "tabler-brand-unsplash",
  "tabler-brand-upwork",
  "tabler-brand-valorant",
  "tabler-brand-vercel",
  "tabler-brand-vimeo",
  "tabler-brand-vinted",
  "tabler-brand-visa",
  "tabler-brand-visual-studio",
  "tabler-brand-vite",
  "tabler-brand-vivaldi",
  "tabler-brand-vk",
  "tabler-brand-vlc",
  "tabler-brand-volkswagen",
  "tabler-brand-vsco",
  "tabler-brand-vscode",
  "tabler-brand-vue",
  "tabler-brand-walmart",
  "tabler-brand-waze",
  "tabler-brand-webflow",
  "tabler-brand-wechat",
  "tabler-brand-weibo",
  "tabler-brand-whatsapp",
  "tabler-brand-wikipedia",
  "tabler-brand-windows",
  "tabler-brand-windy",
  "tabler-brand-wish",
  "tabler-brand-wix",
  "tabler-brand-wordpress",
  "tabler-brand-x-filled",
  "tabler-brand-x",
  "tabler-brand-xamarin",
  "tabler-brand-xbox",
  "tabler-brand-xdeep",
  "tabler-brand-xing",
  "tabler-brand-yahoo",
  "tabler-brand-yandex",
  "tabler-brand-yatse",
  "tabler-brand-ycombinator",
  "tabler-brand-youtube-filled",
  "tabler-brand-youtube-kids",
  "tabler-brand-youtube",
  "tabler-brand-zalando",
  "tabler-brand-zapier",
  "tabler-brand-zeit",
  "tabler-brand-zhihu",
  "tabler-brand-zoom",
  "tabler-brand-zulip",
  "tabler-brand-zwift",
  "tabler-bread-off",
  "tabler-bread",
  "tabler-briefcase-2",
  "tabler-briefcase-filled",
  "tabler-briefcase-off",
  "tabler-briefcase",
  "tabler-brightness-2",
  "tabler-brightness-down-filled",
  "tabler-brightness-down",
  "tabler-brightness-half",
  "tabler-brightness-off",
  "tabler-brightness-up-filled",
  "tabler-brightness-up",
  "tabler-brightness",
  "tabler-broadcast-off",
  "tabler-broadcast",
  "tabler-browser-check",
  "tabler-browser-off",
  "tabler-browser-plus",
  "tabler-browser-x",
  "tabler-browser",
  "tabler-brush-off",
  "tabler-brush",
  "tabler-bucket-droplet",
  "tabler-bucket-off",
  "tabler-bucket",
  "tabler-bug-filled",
  "tabler-bug-off",
  "tabler-bug",
  "tabler-building-arch",
  "tabler-building-bank",
  "tabler-building-bridge-2",
  "tabler-building-bridge",
  "tabler-building-broadcast-tower",
  "tabler-building-carousel",
  "tabler-building-castle",
  "tabler-building-church",
  "tabler-building-circus",
  "tabler-building-community",
  "tabler-building-cottage",
  "tabler-building-estate",
  "tabler-building-factory-2",
  "tabler-building-factory",
  "tabler-building-fortress",
  "tabler-building-hospital",
  "tabler-building-lighthouse",
  "tabler-building-monument",
  "tabler-building-mosque",
  "tabler-building-pavilion",
  "tabler-building-skyscraper",
  "tabler-building-stadium",
  "tabler-building-store",
  "tabler-building-tunnel",
  "tabler-building-warehouse",
  "tabler-building-wind-turbine",
  "tabler-building",
  "tabler-bulb-filled",
  "tabler-bulb-off",
  "tabler-bulb",
  "tabler-bulldozer",
  "tabler-burger",
  "tabler-bus-off",
  "tabler-bus-stop",
  "tabler-bus",
  "tabler-businessplan",
  "tabler-butterfly",
  "tabler-cactus-filled",
  "tabler-cactus-off",
  "tabler-cactus",
  "tabler-cake-off",
  "tabler-cake",
  "tabler-calculator-filled",
  "tabler-calculator-off",
  "tabler-calculator",
  "tabler-calendar-bolt",
  "tabler-calendar-cancel",
  "tabler-calendar-check",
  "tabler-calendar-code",
  "tabler-calendar-cog",
  "tabler-calendar-dollar",
  "tabler-calendar-down",
  "tabler-calendar-due",
  "tabler-calendar-event",
  "tabler-calendar-exclamation",
  "tabler-calendar-filled",
  "tabler-calendar-heart",
  "tabler-calendar-minus",
  "tabler-calendar-off",
  "tabler-calendar-pause",
  "tabler-calendar-pin",
  "tabler-calendar-plus",
  "tabler-calendar-question",
  "tabler-calendar-repeat",
  "tabler-calendar-search",
  "tabler-calendar-share",
  "tabler-calendar-star",
  "tabler-calendar-stats",
  "tabler-calendar-time",
  "tabler-calendar-up",
  "tabler-calendar-x",
  "tabler-calendar",
  "tabler-camera-bolt",
  "tabler-camera-cancel",
  "tabler-camera-check",
  "tabler-camera-code",
  "tabler-camera-cog",
  "tabler-camera-dollar",
  "tabler-camera-down",
  "tabler-camera-exclamation",
  "tabler-camera-filled",
  "tabler-camera-heart",
  "tabler-camera-minus",
  "tabler-camera-off",
  "tabler-camera-pause",
  "tabler-camera-pin",
  "tabler-camera-plus",
  "tabler-camera-question",
  "tabler-camera-rotate",
  "tabler-camera-search",
  "tabler-camera-selfie",
  "tabler-camera-share",
  "tabler-camera-star",
  "tabler-camera-up",
  "tabler-camera-x",
  "tabler-camera",
  "tabler-camper",
  "tabler-campfire-filled",
  "tabler-campfire",
  "tabler-candle-filled",
  "tabler-candle",
  "tabler-candy-off",
  "tabler-candy",
  "tabler-cane",
  "tabler-cannabis",
  "tabler-capsule-filled",
  "tabler-capsule-horizontal-filled",
  "tabler-capsule-horizontal",
  "tabler-capsule",
  "tabler-capture-filled",
  "tabler-capture-off",
  "tabler-capture",
  "tabler-car-crane",
  "tabler-car-crash",
  "tabler-car-garage",
  "tabler-car-off",
  "tabler-car-suv",
  "tabler-car-turbine",
  "tabler-car",
  "tabler-caravan",
  "tabler-cardboards-off",
  "tabler-cardboards",
  "tabler-cards-filled",
  "tabler-cards",
  "tabler-caret-down-filled",
  "tabler-caret-down",
  "tabler-caret-left-filled",
  "tabler-caret-left-right-filled",
  "tabler-caret-left-right",
  "tabler-caret-left",
  "tabler-caret-right-filled",
  "tabler-caret-right",
  "tabler-caret-up-down-filled",
  "tabler-caret-up-down",
  "tabler-caret-up-filled",
  "tabler-caret-up",
  "tabler-carousel-horizontal-filled",
  "tabler-carousel-horizontal",
  "tabler-carousel-vertical-filled",
  "tabler-carousel-vertical",
  "tabler-carrot-off",
  "tabler-carrot",
  "tabler-cash-banknote-off",
  "tabler-cash-banknote",
  "tabler-cash-off",
  "tabler-cash",
  "tabler-cast-off",
  "tabler-cast",
  "tabler-cat",
  "tabler-category-2",
  "tabler-category-filled",
  "tabler-category",
  "tabler-ce-off",
  "tabler-ce",
  "tabler-cell-signal-1",
  "tabler-cell-signal-2",
  "tabler-cell-signal-3",
  "tabler-cell-signal-4",
  "tabler-cell-signal-5",
  "tabler-cell-signal-off",
  "tabler-cell",
  "tabler-certificate-2-off",
  "tabler-certificate-2",
  "tabler-certificate-off",
  "tabler-certificate",
  "tabler-chair-director",
  "tabler-chalkboard-off",
  "tabler-chalkboard",
  "tabler-charging-pile",
  "tabler-chart-arcs-3",
  "tabler-chart-arcs",
  "tabler-chart-area-filled",
  "tabler-chart-area-line-filled",
  "tabler-chart-area-line",
  "tabler-chart-area",
  "tabler-chart-arrows-vertical",
  "tabler-chart-arrows",
  "tabler-chart-bar-off",
  "tabler-chart-bar",
  "tabler-chart-bubble-filled",
  "tabler-chart-bubble",
  "tabler-chart-candle-filled",
  "tabler-chart-candle",
  "tabler-chart-circles",
  "tabler-chart-donut-2",
  "tabler-chart-donut-3",
  "tabler-chart-donut-4",
  "tabler-chart-donut-filled",
  "tabler-chart-donut",
  "tabler-chart-dots-2",
  "tabler-chart-dots-3",
  "tabler-chart-dots-filled",
  "tabler-chart-dots",
  "tabler-chart-grid-dots-filled",
  "tabler-chart-grid-dots",
  "tabler-chart-histogram",
  "tabler-chart-infographic",
  "tabler-chart-line",
  "tabler-chart-pie-2",
  "tabler-chart-pie-3",
  "tabler-chart-pie-4",
  "tabler-chart-pie-filled",
  "tabler-chart-pie-off",
  "tabler-chart-pie",
  "tabler-chart-ppf",
  "tabler-chart-radar",
  "tabler-chart-sankey",
  "tabler-chart-treemap",
  "tabler-check",
  "tabler-checkbox",
  "tabler-checklist",
  "tabler-checks",
  "tabler-checkup-list",
  "tabler-cheese",
  "tabler-chef-hat-off",
  "tabler-chef-hat",
  "tabler-cherry-filled",
  "tabler-cherry",
  "tabler-chess-bishop-filled",
  "tabler-chess-bishop",
  "tabler-chess-filled",
  "tabler-chess-king-filled",
  "tabler-chess-king",
  "tabler-chess-knight-filled",
  "tabler-chess-knight",
  "tabler-chess-queen-filled",
  "tabler-chess-queen",
  "tabler-chess-rook-filled",
  "tabler-chess-rook",
  "tabler-chess",
  "tabler-chevron-compact-down",
  "tabler-chevron-compact-left",
  "tabler-chevron-compact-right",
  "tabler-chevron-compact-up",
  "tabler-chevron-down-left",
  "tabler-chevron-down-right",
  "tabler-chevron-down",
  "tabler-chevron-left-pipe",
  "tabler-chevron-left",
  "tabler-chevron-right-pipe",
  "tabler-chevron-right",
  "tabler-chevron-up-left",
  "tabler-chevron-up-right",
  "tabler-chevron-up",
  "tabler-chevrons-down-left",
  "tabler-chevrons-down-right",
  "tabler-chevrons-down",
  "tabler-chevrons-left",
  "tabler-chevrons-right",
  "tabler-chevrons-up-left",
  "tabler-chevrons-up-right",
  "tabler-chevrons-up",
  "tabler-chisel",
  "tabler-christmas-tree-off",
  "tabler-christmas-tree",
  "tabler-circle-0-filled",
  "tabler-circle-1-filled",
  "tabler-circle-2-filled",
  "tabler-circle-3-filled",
  "tabler-circle-4-filled",
  "tabler-circle-5-filled",
  "tabler-circle-6-filled",
  "tabler-circle-7-filled",
  "tabler-circle-8-filled",
  "tabler-circle-9-filled",
  "tabler-circle-arrow-down-filled",
  "tabler-circle-arrow-down-left-filled",
  "tabler-circle-arrow-down-left",
  "tabler-circle-arrow-down-right-filled",
  "tabler-circle-arrow-down-right",
  "tabler-circle-arrow-down",
  "tabler-circle-arrow-left-filled",
  "tabler-circle-arrow-left",
  "tabler-circle-arrow-right-filled",
  "tabler-circle-arrow-right",
  "tabler-circle-arrow-up-filled",
  "tabler-circle-arrow-up-left-filled",
  "tabler-circle-arrow-up-left",
  "tabler-circle-arrow-up-right-filled",
  "tabler-circle-arrow-up-right",
  "tabler-circle-arrow-up",
  "tabler-circle-caret-down",
  "tabler-circle-caret-left",
  "tabler-circle-caret-right",
  "tabler-circle-caret-up",
  "tabler-circle-check-filled",
  "tabler-circle-check",
  "tabler-circle-chevron-down",
  "tabler-circle-chevron-left",
  "tabler-circle-chevron-right",
  "tabler-circle-chevron-up",
  "tabler-circle-chevrons-down",
  "tabler-circle-chevrons-left",
  "tabler-circle-chevrons-right",
  "tabler-circle-chevrons-up",
  "tabler-circle-dashed-number-0",
  "tabler-circle-dashed-number-1",
  "tabler-circle-dashed-number-2",
  "tabler-circle-dashed-number-3",
  "tabler-circle-dashed-number-4",
  "tabler-circle-dashed-number-5",
  "tabler-circle-dashed-number-6",
  "tabler-circle-dashed-number-7",
  "tabler-circle-dashed-number-8",
  "tabler-circle-dashed-number-9",
  "tabler-circle-dashed-x",
  "tabler-circle-dashed",
  "tabler-circle-dot-filled",
  "tabler-circle-dot",
  "tabler-circle-dotted",
  "tabler-circle-filled",
  "tabler-circle-half-2",
  "tabler-circle-half-vertical",
  "tabler-circle-half",
  "tabler-circle-key-filled",
  "tabler-circle-key",
  "tabler-circle-letter-a",
  "tabler-circle-letter-b",
  "tabler-circle-letter-c",
  "tabler-circle-letter-d",
  "tabler-circle-letter-e",
  "tabler-circle-letter-f",
  "tabler-circle-letter-g",
  "tabler-circle-letter-h",
  "tabler-circle-letter-i",
  "tabler-circle-letter-j",
  "tabler-circle-letter-k",
  "tabler-circle-letter-l",
  "tabler-circle-letter-m",
  "tabler-circle-letter-n",
  "tabler-circle-letter-o",
  "tabler-circle-letter-p",
  "tabler-circle-letter-q",
  "tabler-circle-letter-r",
  "tabler-circle-letter-s",
  "tabler-circle-letter-t",
  "tabler-circle-letter-u",
  "tabler-circle-letter-v",
  "tabler-circle-letter-w",
  "tabler-circle-letter-x",
  "tabler-circle-letter-y",
  "tabler-circle-letter-z",
  "tabler-circle-minus-2",
  "tabler-circle-minus",
  "tabler-circle-number-0",
  "tabler-circle-number-1",
  "tabler-circle-number-2",
  "tabler-circle-number-3",
  "tabler-circle-number-4",
  "tabler-circle-number-5",
  "tabler-circle-number-6",
  "tabler-circle-number-7",
  "tabler-circle-number-8",
  "tabler-circle-number-9",
  "tabler-circle-off",
  "tabler-circle-plus-2",
  "tabler-circle-plus",
  "tabler-circle-rectangle-off",
  "tabler-circle-rectangle",
  "tabler-circle-square",
  "tabler-circle-triangle",
  "tabler-circle-x-filled",
  "tabler-circle-x",
  "tabler-circle",
  "tabler-circles-filled",
  "tabler-circles-relation",
  "tabler-circles",
  "tabler-circuit-ammeter",
  "tabler-circuit-battery",
  "tabler-circuit-bulb",
  "tabler-circuit-capacitor-polarized",
  "tabler-circuit-capacitor",
  "tabler-circuit-cell-plus",
  "tabler-circuit-cell",
  "tabler-circuit-changeover",
  "tabler-circuit-diode-zener",
  "tabler-circuit-diode",
  "tabler-circuit-ground-digital",
  "tabler-circuit-ground",
  "tabler-circuit-inductor",
  "tabler-circuit-motor",
  "tabler-circuit-pushbutton",
  "tabler-circuit-resistor",
  "tabler-circuit-switch-closed",
  "tabler-circuit-switch-open",
  "tabler-circuit-voltmeter",
  "tabler-clear-all",
  "tabler-clear-formatting",
  "tabler-click",
  "tabler-clipboard-check",
  "tabler-clipboard-copy",
  "tabler-clipboard-data",
  "tabler-clipboard-heart",
  "tabler-clipboard-list",
  "tabler-clipboard-off",
  "tabler-clipboard-plus",
  "tabler-clipboard-text",
  "tabler-clipboard-typography",
  "tabler-clipboard-x",
  "tabler-clipboard",
  "tabler-clock-12",
  "tabler-clock-2",
  "tabler-clock-24",
  "tabler-clock-bolt",
  "tabler-clock-cancel",
  "tabler-clock-check",
  "tabler-clock-code",
  "tabler-clock-cog",
  "tabler-clock-dollar",
  "tabler-clock-down",
  "tabler-clock-edit",
  "tabler-clock-exclamation",
  "tabler-clock-filled",
  "tabler-clock-heart",
  "tabler-clock-hour-1",
  "tabler-clock-hour-10",
  "tabler-clock-hour-11",
  "tabler-clock-hour-12",
  "tabler-clock-hour-2",
  "tabler-clock-hour-3",
  "tabler-clock-hour-4",
  "tabler-clock-hour-5",
  "tabler-clock-hour-6",
  "tabler-clock-hour-7",
  "tabler-clock-hour-8",
  "tabler-clock-hour-9",
  "tabler-clock-minus",
  "tabler-clock-off",
  "tabler-clock-pause",
  "tabler-clock-pin",
  "tabler-clock-play",
  "tabler-clock-plus",
  "tabler-clock-question",
  "tabler-clock-record",
  "tabler-clock-search",
  "tabler-clock-share",
  "tabler-clock-shield",
  "tabler-clock-star",
  "tabler-clock-stop",
  "tabler-clock-up",
  "tabler-clock-x",
  "tabler-clock",
  "tabler-clothes-rack-off",
  "tabler-clothes-rack",
  "tabler-cloud-bolt",
  "tabler-cloud-cancel",
  "tabler-cloud-check",
  "tabler-cloud-code",
  "tabler-cloud-cog",
  "tabler-cloud-computing",
  "tabler-cloud-data-connection",
  "tabler-cloud-dollar",
  "tabler-cloud-down",
  "tabler-cloud-download",
  "tabler-cloud-exclamation",
  "tabler-cloud-filled",
  "tabler-cloud-fog",
  "tabler-cloud-heart",
  "tabler-cloud-lock-open",
  "tabler-cloud-lock",
  "tabler-cloud-minus",
  "tabler-cloud-network",
  "tabler-cloud-off",
  "tabler-cloud-pause",
  "tabler-cloud-pin",
  "tabler-cloud-plus",
  "tabler-cloud-question",
  "tabler-cloud-rain",
  "tabler-cloud-search",
  "tabler-cloud-share",
  "tabler-cloud-snow",
  "tabler-cloud-star",
  "tabler-cloud-storm",
  "tabler-cloud-up",
  "tabler-cloud-upload",
  "tabler-cloud-x",
  "tabler-cloud",
  "tabler-clover-2",
  "tabler-clover",
  "tabler-clubs-filled",
  "tabler-clubs",
  "tabler-code-asterix",
  "tabler-code-circle-2",
  "tabler-code-circle",
  "tabler-code-dots",
  "tabler-code-minus",
  "tabler-code-off",
  "tabler-code-plus",
  "tabler-code",
  "tabler-coffee-off",
  "tabler-coffee",
  "tabler-coffin",
  "tabler-coin-bitcoin-filled",
  "tabler-coin-bitcoin",
  "tabler-coin-euro-filled",
  "tabler-coin-euro",
  "tabler-coin-filled",
  "tabler-coin-monero-filled",
  "tabler-coin-monero",
  "tabler-coin-off",
  "tabler-coin-pound-filled",
  "tabler-coin-pound",
  "tabler-coin-rupee-filled",
  "tabler-coin-rupee",
  "tabler-coin-taka-filled",
  "tabler-coin-taka",
  "tabler-coin-yen-filled",
  "tabler-coin-yen",
  "tabler-coin-yuan-filled",
  "tabler-coin-yuan",
  "tabler-coin",
  "tabler-coins",
  "tabler-color-filter",
  "tabler-color-picker-off",
  "tabler-color-picker",
  "tabler-color-swatch-off",
  "tabler-color-swatch",
  "tabler-column-insert-left",
  "tabler-column-insert-right",
  "tabler-column-remove",
  "tabler-columns-1",
  "tabler-columns-2",
  "tabler-columns-3",
  "tabler-columns-off",
  "tabler-columns",
  "tabler-comet",
  "tabler-command-off",
  "tabler-command",
  "tabler-compass-filled",
  "tabler-compass-off",
  "tabler-compass",
  "tabler-components-off",
  "tabler-components",
  "tabler-cone-2",
  "tabler-cone-off",
  "tabler-cone-plus",
  "tabler-cone",
  "tabler-confetti-off",
  "tabler-confetti",
  "tabler-confucius",
  "tabler-container-off",
  "tabler-container",
  "tabler-contrast-2-off",
  "tabler-contrast-2",
  "tabler-contrast-off",
  "tabler-contrast",
  "tabler-cooker",
  "tabler-cookie-man",
  "tabler-cookie-off",
  "tabler-cookie",
  "tabler-copy-off",
  "tabler-copy",
  "tabler-copyleft-filled",
  "tabler-copyleft-off",
  "tabler-copyleft",
  "tabler-copyright-filled",
  "tabler-copyright-off",
  "tabler-copyright",
  "tabler-corner-down-left-double",
  "tabler-corner-down-left",
  "tabler-corner-down-right-double",
  "tabler-corner-down-right",
  "tabler-corner-left-down-double",
  "tabler-corner-left-down",
  "tabler-corner-left-up-double",
  "tabler-corner-left-up",
  "tabler-corner-right-down-double",
  "tabler-corner-right-down",
  "tabler-corner-right-up-double",
  "tabler-corner-right-up",
  "tabler-corner-up-left-double",
  "tabler-corner-up-left",
  "tabler-corner-up-right-double",
  "tabler-corner-up-right",
  "tabler-cpu-2",
  "tabler-cpu-off",
  "tabler-cpu",
  "tabler-crane-off",
  "tabler-crane",
  "tabler-creative-commons-by",
  "tabler-creative-commons-nc",
  "tabler-creative-commons-nd",
  "tabler-creative-commons-off",
  "tabler-creative-commons-sa",
  "tabler-creative-commons-zero",
  "tabler-creative-commons",
  "tabler-credit-card-filled",
  "tabler-credit-card-off",
  "tabler-credit-card",
  "tabler-cricket",
  "tabler-crop",
  "tabler-cross-filled",
  "tabler-cross-off",
  "tabler-cross",
  "tabler-crosshair",
  "tabler-crown-off",
  "tabler-crown",
  "tabler-crutches-off",
  "tabler-crutches",
  "tabler-crystal-ball",
  "tabler-csv",
  "tabler-cube-off",
  "tabler-cube-plus",
  "tabler-cube-send",
  "tabler-cube-unfolded",
  "tabler-cube",
  "tabler-cup-off",
  "tabler-cup",
  "tabler-curling",
  "tabler-curly-loop",
  "tabler-currency-afghani",
  "tabler-currency-bahraini",
  "tabler-currency-baht",
  "tabler-currency-bitcoin",
  "tabler-currency-cent",
  "tabler-currency-dinar",
  "tabler-currency-dirham",
  "tabler-currency-dogecoin",
  "tabler-currency-dollar-australian",
  "tabler-currency-dollar-brunei",
  "tabler-currency-dollar-canadian",
  "tabler-currency-dollar-guyanese",
  "tabler-currency-dollar-off",
  "tabler-currency-dollar-singapore",
  "tabler-currency-dollar-zimbabwean",
  "tabler-currency-dollar",
  "tabler-currency-dong",
  "tabler-currency-dram",
  "tabler-currency-ethereum",
  "tabler-currency-euro-off",
  "tabler-currency-euro",
  "tabler-currency-florin",
  "tabler-currency-forint",
  "tabler-currency-frank",
  "tabler-currency-guarani",
  "tabler-currency-hryvnia",
  "tabler-currency-iranian-rial",
  "tabler-currency-kip",
  "tabler-currency-krone-czech",
  "tabler-currency-krone-danish",
  "tabler-currency-krone-swedish",
  "tabler-currency-lari",
  "tabler-currency-leu",
  "tabler-currency-lira",
  "tabler-currency-litecoin",
  "tabler-currency-lyd",
  "tabler-currency-manat",
  "tabler-currency-monero",
  "tabler-currency-naira",
  "tabler-currency-nano",
  "tabler-currency-off",
  "tabler-currency-paanga",
  "tabler-currency-peso",
  "tabler-currency-pound-off",
  "tabler-currency-pound",
  "tabler-currency-quetzal",
  "tabler-currency-real",
  "tabler-currency-renminbi",
  "tabler-currency-ripple",
  "tabler-currency-riyal",
  "tabler-currency-rubel",
  "tabler-currency-rufiyaa",
  "tabler-currency-rupee-nepalese",
  "tabler-currency-rupee",
  "tabler-currency-shekel",
  "tabler-currency-solana",
  "tabler-currency-som",
  "tabler-currency-taka",
  "tabler-currency-tenge",
  "tabler-currency-tugrik",
  "tabler-currency-won",
  "tabler-currency-yen-off",
  "tabler-currency-yen",
  "tabler-currency-yuan",
  "tabler-currency-zloty",
  "tabler-currency",
  "tabler-current-location-off",
  "tabler-current-location",
  "tabler-cursor-off",
  "tabler-cursor-text",
  "tabler-cut",
  "tabler-cylinder-off",
  "tabler-cylinder-plus",
  "tabler-cylinder",
  "tabler-dashboard-off",
  "tabler-dashboard",
  "tabler-database-cog",
  "tabler-database-dollar",
  "tabler-database-edit",
  "tabler-database-exclamation",
  "tabler-database-export",
  "tabler-database-heart",
  "tabler-database-import",
  "tabler-database-leak",
  "tabler-database-minus",
  "tabler-database-off",
  "tabler-database-plus",
  "tabler-database-search",
  "tabler-database-share",
  "tabler-database-star",
  "tabler-database-x",
  "tabler-database",
  "tabler-decimal",
  "tabler-deer",
  "tabler-delta",
  "tabler-dental-broken",
  "tabler-dental-off",
  "tabler-dental",
  "tabler-deselect",
  "tabler-details-off",
  "tabler-details",
  "tabler-device-airpods-case",
  "tabler-device-airpods",
  "tabler-device-airtag",
  "tabler-device-analytics",
  "tabler-device-audio-tape",
  "tabler-device-camera-phone",
  "tabler-device-cctv-off",
  "tabler-device-cctv",
  "tabler-device-computer-camera-off",
  "tabler-device-computer-camera",
  "tabler-device-desktop-analytics",
  "tabler-device-desktop-bolt",
  "tabler-device-desktop-cancel",
  "tabler-device-desktop-check",
  "tabler-device-desktop-code",
  "tabler-device-desktop-cog",
  "tabler-device-desktop-dollar",
  "tabler-device-desktop-down",
  "tabler-device-desktop-exclamation",
  "tabler-device-desktop-heart",
  "tabler-device-desktop-minus",
  "tabler-device-desktop-off",
  "tabler-device-desktop-pause",
  "tabler-device-desktop-pin",
  "tabler-device-desktop-plus",
  "tabler-device-desktop-question",
  "tabler-device-desktop-search",
  "tabler-device-desktop-share",
  "tabler-device-desktop-star",
  "tabler-device-desktop-up",
  "tabler-device-desktop-x",
  "tabler-device-desktop",
  "tabler-device-floppy",
  "tabler-device-gamepad-2",
  "tabler-device-gamepad-3",
  "tabler-device-gamepad",
  "tabler-device-heart-monitor-filled",
  "tabler-device-heart-monitor",
  "tabler-device-imac-bolt",
  "tabler-device-imac-cancel",
  "tabler-device-imac-check",
  "tabler-device-imac-code",
  "tabler-device-imac-cog",
  "tabler-device-imac-dollar",
  "tabler-device-imac-down",
  "tabler-device-imac-exclamation",
  "tabler-device-imac-heart",
  "tabler-device-imac-minus",
  "tabler-device-imac-off",
  "tabler-device-imac-pause",
  "tabler-device-imac-pin",
  "tabler-device-imac-plus",
  "tabler-device-imac-question",
  "tabler-device-imac-search",
  "tabler-device-imac-share",
  "tabler-device-imac-star",
  "tabler-device-imac-up",
  "tabler-device-imac-x",
  "tabler-device-imac",
  "tabler-device-ipad-bolt",
  "tabler-device-ipad-cancel",
  "tabler-device-ipad-check",
  "tabler-device-ipad-code",
  "tabler-device-ipad-cog",
  "tabler-device-ipad-dollar",
  "tabler-device-ipad-down",
  "tabler-device-ipad-exclamation",
  "tabler-device-ipad-heart",
  "tabler-device-ipad-horizontal-bolt",
  "tabler-device-ipad-horizontal-cancel",
  "tabler-device-ipad-horizontal-check",
  "tabler-device-ipad-horizontal-code",
  "tabler-device-ipad-horizontal-cog",
  "tabler-device-ipad-horizontal-dollar",
  "tabler-device-ipad-horizontal-down",
  "tabler-device-ipad-horizontal-exclamation",
  "tabler-device-ipad-horizontal-heart",
  "tabler-device-ipad-horizontal-minus",
  "tabler-device-ipad-horizontal-off",
  "tabler-device-ipad-horizontal-pause",
  "tabler-device-ipad-horizontal-pin",
  "tabler-device-ipad-horizontal-plus",
  "tabler-device-ipad-horizontal-question",
  "tabler-device-ipad-horizontal-search",
  "tabler-device-ipad-horizontal-share",
  "tabler-device-ipad-horizontal-star",
  "tabler-device-ipad-horizontal-up",
  "tabler-device-ipad-horizontal-x",
  "tabler-device-ipad-horizontal",
  "tabler-device-ipad-minus",
  "tabler-device-ipad-off",
  "tabler-device-ipad-pause",
  "tabler-device-ipad-pin",
  "tabler-device-ipad-plus",
  "tabler-device-ipad-question",
  "tabler-device-ipad-search",
  "tabler-device-ipad-share",
  "tabler-device-ipad-star",
  "tabler-device-ipad-up",
  "tabler-device-ipad-x",
  "tabler-device-ipad",
  "tabler-device-landline-phone",
  "tabler-device-laptop-off",
  "tabler-device-laptop",
  "tabler-device-mobile-bolt",
  "tabler-device-mobile-cancel",
  "tabler-device-mobile-charging",
  "tabler-device-mobile-check",
  "tabler-device-mobile-code",
  "tabler-device-mobile-cog",
  "tabler-device-mobile-dollar",
  "tabler-device-mobile-down",
  "tabler-device-mobile-exclamation",
  "tabler-device-mobile-filled",
  "tabler-device-mobile-heart",
  "tabler-device-mobile-message",
  "tabler-device-mobile-minus",
  "tabler-device-mobile-off",
  "tabler-device-mobile-pause",
  "tabler-device-mobile-pin",
  "tabler-device-mobile-plus",
  "tabler-device-mobile-question",
  "tabler-device-mobile-rotated",
  "tabler-device-mobile-search",
  "tabler-device-mobile-share",
  "tabler-device-mobile-star",
  "tabler-device-mobile-up",
  "tabler-device-mobile-vibration",
  "tabler-device-mobile-x",
  "tabler-device-mobile",
  "tabler-device-nintendo-off",
  "tabler-device-nintendo",
  "tabler-device-projector",
  "tabler-device-remote",
  "tabler-device-sd-card",
  "tabler-device-sim-1",
  "tabler-device-sim-2",
  "tabler-device-sim-3",
  "tabler-device-sim",
  "tabler-device-speaker-off",
  "tabler-device-speaker",
  "tabler-device-tablet-bolt",
  "tabler-device-tablet-cancel",
  "tabler-device-tablet-check",
  "tabler-device-tablet-code",
  "tabler-device-tablet-cog",
  "tabler-device-tablet-dollar",
  "tabler-device-tablet-down",
  "tabler-device-tablet-exclamation",
  "tabler-device-tablet-filled",
  "tabler-device-tablet-heart",
  "tabler-device-tablet-minus",
  "tabler-device-tablet-off",
  "tabler-device-tablet-pause",
  "tabler-device-tablet-pin",
  "tabler-device-tablet-plus",
  "tabler-device-tablet-question",
  "tabler-device-tablet-search",
  "tabler-device-tablet-share",
  "tabler-device-tablet-star",
  "tabler-device-tablet-up",
  "tabler-device-tablet-x",
  "tabler-device-tablet",
  "tabler-device-tv-off",
  "tabler-device-tv-old",
  "tabler-device-tv",
  "tabler-device-usb",
  "tabler-device-vision-pro",
  "tabler-device-watch-bolt",
  "tabler-device-watch-cancel",
  "tabler-device-watch-check",
  "tabler-device-watch-code",
  "tabler-device-watch-cog",
  "tabler-device-watch-dollar",
  "tabler-device-watch-down",
  "tabler-device-watch-exclamation",
  "tabler-device-watch-heart",
  "tabler-device-watch-minus",
  "tabler-device-watch-off",
  "tabler-device-watch-pause",
  "tabler-device-watch-pin",
  "tabler-device-watch-plus",
  "tabler-device-watch-question",
  "tabler-device-watch-search",
  "tabler-device-watch-share",
  "tabler-device-watch-star",
  "tabler-device-watch-stats-2",
  "tabler-device-watch-stats",
  "tabler-device-watch-up",
  "tabler-device-watch-x",
  "tabler-device-watch",
  "tabler-devices-2",
  "tabler-devices-bolt",
  "tabler-devices-cancel",
  "tabler-devices-check",
  "tabler-devices-code",
  "tabler-devices-cog",
  "tabler-devices-dollar",
  "tabler-devices-down",
  "tabler-devices-exclamation",
  "tabler-devices-heart",
  "tabler-devices-minus",
  "tabler-devices-off",
  "tabler-devices-pause",
  "tabler-devices-pc-off",
  "tabler-devices-pc",
  "tabler-devices-pin",
  "tabler-devices-plus",
  "tabler-devices-question",
  "tabler-devices-search",
  "tabler-devices-share",
  "tabler-devices-star",
  "tabler-devices-up",
  "tabler-devices-x",
  "tabler-devices",
  "tabler-diabolo-off",
  "tabler-diabolo-plus",
  "tabler-diabolo",
  "tabler-dialpad-filled",
  "tabler-dialpad-off",
  "tabler-dialpad",
  "tabler-diamond-filled",
  "tabler-diamond-off",
  "tabler-diamond",
  "tabler-diamonds-filled",
  "tabler-diamonds",
  "tabler-dice-1-filled",
  "tabler-dice-1",
  "tabler-dice-2-filled",
  "tabler-dice-2",
  "tabler-dice-3-filled",
  "tabler-dice-3",
  "tabler-dice-4-filled",
  "tabler-dice-4",
  "tabler-dice-5-filled",
  "tabler-dice-5",
  "tabler-dice-6-filled",
  "tabler-dice-6",
  "tabler-dice-filled",
  "tabler-dice",
  "tabler-dimensions",
  "tabler-direction-horizontal",
  "tabler-direction-sign-filled",
  "tabler-direction-sign-off",
  "tabler-direction-sign",
  "tabler-direction",
  "tabler-directions-off",
  "tabler-directions",
  "tabler-disabled-2",
  "tabler-disabled-off",
  "tabler-disabled",
  "tabler-disc-golf",
  "tabler-disc-off",
  "tabler-disc",
  "tabler-discount-2-off",
  "tabler-discount-2",
  "tabler-discount-check-filled",
  "tabler-discount-check",
  "tabler-discount-off",
  "tabler-discount",
  "tabler-divide",
  "tabler-dna-2-off",
  "tabler-dna-2",
  "tabler-dna-off",
  "tabler-dna",
  "tabler-dog-bowl",
  "tabler-dog",
  "tabler-door-enter",
  "tabler-door-exit",
  "tabler-door-off",
  "tabler-door",
  "tabler-dots-circle-horizontal",
  "tabler-dots-diagonal-2",
  "tabler-dots-diagonal",
  "tabler-dots-vertical",
  "tabler-dots",
  "tabler-download-off",
  "tabler-download",
  "tabler-drag-drop-2",
  "tabler-drag-drop",
  "tabler-drone-off",
  "tabler-drone",
  "tabler-drop-circle",
  "tabler-droplet-bolt",
  "tabler-droplet-cancel",
  "tabler-droplet-check",
  "tabler-droplet-code",
  "tabler-droplet-cog",
  "tabler-droplet-dollar",
  "tabler-droplet-down",
  "tabler-droplet-exclamation",
  "tabler-droplet-filled",
  "tabler-droplet-half-2-filled",
  "tabler-droplet-half-2",
  "tabler-droplet-half-filled",
  "tabler-droplet-half",
  "tabler-droplet-heart",
  "tabler-droplet-minus",
  "tabler-droplet-off",
  "tabler-droplet-pause",
  "tabler-droplet-pin",
  "tabler-droplet-plus",
  "tabler-droplet-question",
  "tabler-droplet-search",
  "tabler-droplet-share",
  "tabler-droplet-star",
  "tabler-droplet-up",
  "tabler-droplet-x",
  "tabler-droplet",
  "tabler-droplets",
  "tabler-dual-screen",
  "tabler-e-passport",
  "tabler-ear-off",
  "tabler-ear",
  "tabler-ease-in-control-point",
  "tabler-ease-in-out-control-points",
  "tabler-ease-in-out",
  "tabler-ease-in",
  "tabler-ease-out-control-point",
  "tabler-ease-out",
  "tabler-edit-circle-off",
  "tabler-edit-circle",
  "tabler-edit-off",
  "tabler-edit",
  "tabler-egg-cracked",
  "tabler-egg-filled",
  "tabler-egg-fried",
  "tabler-egg-off",
  "tabler-egg",
  "tabler-eggs",
  "tabler-elevator-off",
  "tabler-elevator",
  "tabler-emergency-bed",
  "tabler-empathize-off",
  "tabler-empathize",
  "tabler-emphasis",
  "tabler-engine-off",
  "tabler-engine",
  "tabler-equal-double",
  "tabler-equal-not",
  "tabler-equal",
  "tabler-eraser-off",
  "tabler-eraser",
  "tabler-error-404-off",
  "tabler-error-404",
  "tabler-escalator-down",
  "tabler-escalator-up",
  "tabler-escalator",
  "tabler-exchange-off",
  "tabler-exchange",
  "tabler-exclamation-circle",
  "tabler-exclamation-mark-off",
  "tabler-exclamation-mark",
  "tabler-explicit-off",
  "tabler-explicit",
  "tabler-exposure-0",
  "tabler-exposure-minus-1",
  "tabler-exposure-minus-2",
  "tabler-exposure-off",
  "tabler-exposure-plus-1",
  "tabler-exposure-plus-2",
  "tabler-exposure",
  "tabler-external-link-off",
  "tabler-external-link",
  "tabler-eye-bolt",
  "tabler-eye-cancel",
  "tabler-eye-check",
  "tabler-eye-closed",
  "tabler-eye-code",
  "tabler-eye-cog",
  "tabler-eye-discount",
  "tabler-eye-dollar",
  "tabler-eye-down",
  "tabler-eye-edit",
  "tabler-eye-exclamation",
  "tabler-eye-filled",
  "tabler-eye-heart",
  "tabler-eye-minus",
  "tabler-eye-off",
  "tabler-eye-pause",
  "tabler-eye-pin",
  "tabler-eye-plus",
  "tabler-eye-question",
  "tabler-eye-search",
  "tabler-eye-share",
  "tabler-eye-star",
  "tabler-eye-table",
  "tabler-eye-up",
  "tabler-eye-x",
  "tabler-eye",
  "tabler-eyeglass-2",
  "tabler-eyeglass-off",
  "tabler-eyeglass",
  "tabler-face-id-error",
  "tabler-face-id",
  "tabler-face-mask-off",
  "tabler-face-mask",
  "tabler-fall",
  "tabler-feather-off",
  "tabler-feather",
  "tabler-fence-off",
  "tabler-fence",
  "tabler-fidget-spinner",
  "tabler-file-3d",
  "tabler-file-alert",
  "tabler-file-analytics",
  "tabler-file-arrow-left",
  "tabler-file-arrow-right",
  "tabler-file-barcode",
  "tabler-file-broken",
  "tabler-file-certificate",
  "tabler-file-chart",
  "tabler-file-check",
  "tabler-file-code-2",
  "tabler-file-code",
  "tabler-file-cv",
  "tabler-file-database",
  "tabler-file-delta",
  "tabler-file-description",
  "tabler-file-diff",
  "tabler-file-digit",
  "tabler-file-dislike",
  "tabler-file-dollar",
  "tabler-file-dots",
  "tabler-file-download",
  "tabler-file-euro",
  "tabler-file-export",
  "tabler-file-filled",
  "tabler-file-function",
  "tabler-file-horizontal",
  "tabler-file-import",
  "tabler-file-infinity",
  "tabler-file-info",
  "tabler-file-invoice",
  "tabler-file-lambda",
  "tabler-file-like",
  "tabler-file-minus",
  "tabler-file-music",
  "tabler-file-off",
  "tabler-file-orientation",
  "tabler-file-pencil",
  "tabler-file-percent",
  "tabler-file-phone",
  "tabler-file-plus",
  "tabler-file-power",
  "tabler-file-report",
  "tabler-file-rss",
  "tabler-file-scissors",
  "tabler-file-search",
  "tabler-file-settings",
  "tabler-file-shredder",
  "tabler-file-signal",
  "tabler-file-spreadsheet",
  "tabler-file-stack",
  "tabler-file-star",
  "tabler-file-symlink",
  "tabler-file-text-ai",
  "tabler-file-text",
  "tabler-file-time",
  "tabler-file-type-bmp",
  "tabler-file-type-css",
  "tabler-file-type-csv",
  "tabler-file-type-doc",
  "tabler-file-type-docx",
  "tabler-file-type-html",
  "tabler-file-type-jpg",
  "tabler-file-type-js",
  "tabler-file-type-jsx",
  "tabler-file-type-pdf",
  "tabler-file-type-php",
  "tabler-file-type-png",
  "tabler-file-type-ppt",
  "tabler-file-type-rs",
  "tabler-file-type-sql",
  "tabler-file-type-svg",
  "tabler-file-type-ts",
  "tabler-file-type-tsx",
  "tabler-file-type-txt",
  "tabler-file-type-vue",
  "tabler-file-type-xls",
  "tabler-file-type-xml",
  "tabler-file-type-zip",
  "tabler-file-typography",
  "tabler-file-unknown",
  "tabler-file-upload",
  "tabler-file-vector",
  "tabler-file-x-filled",
  "tabler-file-x",
  "tabler-file-zip",
  "tabler-file",
  "tabler-files-off",
  "tabler-files",
  "tabler-filter-bolt",
  "tabler-filter-cancel",
  "tabler-filter-check",
  "tabler-filter-code",
  "tabler-filter-cog",
  "tabler-filter-discount",
  "tabler-filter-dollar",
  "tabler-filter-down",
  "tabler-filter-edit",
  "tabler-filter-exclamation",
  "tabler-filter-filled",
  "tabler-filter-heart",
  "tabler-filter-minus",
  "tabler-filter-off",
  "tabler-filter-pause",
  "tabler-filter-pin",
  "tabler-filter-plus",
  "tabler-filter-question",
  "tabler-filter-search",
  "tabler-filter-share",
  "tabler-filter-star",
  "tabler-filter-up",
  "tabler-filter-x",
  "tabler-filter",
  "tabler-filters",
  "tabler-fingerprint-off",
  "tabler-fingerprint-scan",
  "tabler-fingerprint",
  "tabler-fire-extinguisher",
  "tabler-fire-hydrant-off",
  "tabler-fire-hydrant",
  "tabler-firetruck",
  "tabler-first-aid-kit-off",
  "tabler-first-aid-kit",
  "tabler-fish-bone",
  "tabler-fish-christianity",
  "tabler-fish-hook-off",
  "tabler-fish-hook",
  "tabler-fish-off",
  "tabler-fish",
  "tabler-flag-2-filled",
  "tabler-flag-2-off",
  "tabler-flag-2",
  "tabler-flag-3-filled",
  "tabler-flag-3",
  "tabler-flag-bolt",
  "tabler-flag-cancel",
  "tabler-flag-check",
  "tabler-flag-code",
  "tabler-flag-cog",
  "tabler-flag-discount",
  "tabler-flag-dollar",
  "tabler-flag-down",
  "tabler-flag-exclamation",
  "tabler-flag-filled",
  "tabler-flag-heart",
  "tabler-flag-minus",
  "tabler-flag-off",
  "tabler-flag-pause",
  "tabler-flag-pin",
  "tabler-flag-plus",
  "tabler-flag-question",
  "tabler-flag-search",
  "tabler-flag-share",
  "tabler-flag-star",
  "tabler-flag-up",
  "tabler-flag-x",
  "tabler-flag",
  "tabler-flame-off",
  "tabler-flame",
  "tabler-flare",
  "tabler-flask-2-filled",
  "tabler-flask-2-off",
  "tabler-flask-2",
  "tabler-flask-filled",
  "tabler-flask-off",
  "tabler-flask",
  "tabler-flip-flops",
  "tabler-flip-horizontal",
  "tabler-flip-vertical",
  "tabler-float-center",
  "tabler-float-left",
  "tabler-float-none",
  "tabler-float-right",
  "tabler-flower-off",
  "tabler-flower",
  "tabler-focus-2",
  "tabler-focus-auto",
  "tabler-focus-centered",
  "tabler-focus",
  "tabler-fold-down",
  "tabler-fold-up",
  "tabler-fold",
  "tabler-folder-bolt",
  "tabler-folder-cancel",
  "tabler-folder-check",
  "tabler-folder-code",
  "tabler-folder-cog",
  "tabler-folder-dollar",
  "tabler-folder-down",
  "tabler-folder-exclamation",
  "tabler-folder-filled",
  "tabler-folder-heart",
  "tabler-folder-minus",
  "tabler-folder-off",
  "tabler-folder-open",
  "tabler-folder-pause",
  "tabler-folder-pin",
  "tabler-folder-plus",
  "tabler-folder-question",
  "tabler-folder-search",
  "tabler-folder-share",
  "tabler-folder-star",
  "tabler-folder-symlink",
  "tabler-folder-up",
  "tabler-folder-x",
  "tabler-folder",
  "tabler-folders-off",
  "tabler-folders",
  "tabler-forbid-2-filled",
  "tabler-forbid-2",
  "tabler-forbid-filled",
  "tabler-forbid",
  "tabler-forklift",
  "tabler-forms",
  "tabler-fountain-filled",
  "tabler-fountain-off",
  "tabler-fountain",
  "tabler-frame-off",
  "tabler-frame",
  "tabler-free-rights",
  "tabler-freeze-column",
  "tabler-freeze-row-column",
  "tabler-freeze-row",
  "tabler-fridge-off",
  "tabler-fridge",
  "tabler-friends-off",
  "tabler-friends",
  "tabler-frustum-off",
  "tabler-frustum-plus",
  "tabler-frustum",
  "tabler-function-filled",
  "tabler-function-off",
  "tabler-function",
  "tabler-galaxy",
  "tabler-garden-cart-off",
  "tabler-garden-cart",
  "tabler-gas-station-off",
  "tabler-gas-station",
  "tabler-gauge-filled",
  "tabler-gauge-off",
  "tabler-gauge",
  "tabler-gavel",
  "tabler-gender-agender",
  "tabler-gender-androgyne",
  "tabler-gender-bigender",
  "tabler-gender-demiboy",
  "tabler-gender-demigirl",
  "tabler-gender-epicene",
  "tabler-gender-female",
  "tabler-gender-femme",
  "tabler-gender-genderfluid",
  "tabler-gender-genderless",
  "tabler-gender-genderqueer",
  "tabler-gender-hermaphrodite",
  "tabler-gender-intergender",
  "tabler-gender-male",
  "tabler-gender-neutrois",
  "tabler-gender-third",
  "tabler-gender-transgender",
  "tabler-gender-trasvesti",
  "tabler-geometry",
  "tabler-ghost-2-filled",
  "tabler-ghost-2",
  "tabler-ghost-3",
  "tabler-ghost-filled",
  "tabler-ghost-off",
  "tabler-ghost",
  "tabler-gif",
  "tabler-gift-card-filled",
  "tabler-gift-card",
  "tabler-gift-filled",
  "tabler-gift-off",
  "tabler-gift",
  "tabler-git-branch-deleted",
  "tabler-git-branch",
  "tabler-git-cherry-pick",
  "tabler-git-commit",
  "tabler-git-compare",
  "tabler-git-fork",
  "tabler-git-merge",
  "tabler-git-pull-request-closed",
  "tabler-git-pull-request-draft",
  "tabler-git-pull-request",
  "tabler-gizmo",
  "tabler-glass-full-filled",
  "tabler-glass-full",
  "tabler-glass-off",
  "tabler-glass",
  "tabler-globe-filled",
  "tabler-globe-off",
  "tabler-globe",
  "tabler-go-game",
  "tabler-golf-off",
  "tabler-golf",
  "tabler-gps",
  "tabler-gradienter",
  "tabler-grain",
  "tabler-graph-filled",
  "tabler-graph-off",
  "tabler-graph",
  "tabler-grave-2",
  "tabler-grave",
  "tabler-grid-3x3",
  "tabler-grid-4x4",
  "tabler-grid-dots",
  "tabler-grid-goldenratio",
  "tabler-grid-pattern",
  "tabler-grid-scan",
  "tabler-grill-fork",
  "tabler-grill-off",
  "tabler-grill-spatula",
  "tabler-grill",
  "tabler-grip-horizontal",
  "tabler-grip-vertical",
  "tabler-growth",
  "tabler-guitar-pick-filled",
  "tabler-guitar-pick",
  "tabler-h-1",
  "tabler-h-2",
  "tabler-h-3",
  "tabler-h-4",
  "tabler-h-5",
  "tabler-h-6",
  "tabler-hammer-off",
  "tabler-hammer",
  "tabler-hand-click",
  "tabler-hand-finger-off",
  "tabler-hand-finger",
  "tabler-hand-grab",
  "tabler-hand-little-finger",
  "tabler-hand-middle-finger",
  "tabler-hand-move",
  "tabler-hand-off",
  "tabler-hand-ring-finger",
  "tabler-hand-rock",
  "tabler-hand-sanitizer",
  "tabler-hand-stop",
  "tabler-hand-three-fingers",
  "tabler-hand-two-fingers",
  "tabler-hanger-2",
  "tabler-hanger-off",
  "tabler-hanger",
  "tabler-hash",
  "tabler-haze-moon",
  "tabler-haze",
  "tabler-hdr",
  "tabler-heading-off",
  "tabler-heading",
  "tabler-headphones-filled",
  "tabler-headphones-off",
  "tabler-headphones",
  "tabler-headset-off",
  "tabler-headset",
  "tabler-health-recognition",
  "tabler-heart-bolt",
  "tabler-heart-broken",
  "tabler-heart-cancel",
  "tabler-heart-check",
  "tabler-heart-code",
  "tabler-heart-cog",
  "tabler-heart-discount",
  "tabler-heart-dollar",
  "tabler-heart-down",
  "tabler-heart-exclamation",
  "tabler-heart-filled",
  "tabler-heart-handshake",
  "tabler-heart-minus",
  "tabler-heart-off",
  "tabler-heart-pause",
  "tabler-heart-pin",
  "tabler-heart-plus",
  "tabler-heart-question",
  "tabler-heart-rate-monitor",
  "tabler-heart-search",
  "tabler-heart-share",
  "tabler-heart-star",
  "tabler-heart-up",
  "tabler-heart-x",
  "tabler-heart",
  "tabler-heartbeat",
  "tabler-hearts-off",
  "tabler-hearts",
  "tabler-helicopter-landing",
  "tabler-helicopter",
  "tabler-helmet-off",
  "tabler-helmet",
  "tabler-help-circle-filled",
  "tabler-help-circle",
  "tabler-help-hexagon-filled",
  "tabler-help-hexagon",
  "tabler-help-octagon-filled",
  "tabler-help-octagon",
  "tabler-help-off",
  "tabler-help-small",
  "tabler-help-square-filled",
  "tabler-help-square-rounded-filled",
  "tabler-help-square-rounded",
  "tabler-help-square",
  "tabler-help-triangle-filled",
  "tabler-help-triangle",
  "tabler-help",
  "tabler-hemisphere-off",
  "tabler-hemisphere-plus",
  "tabler-hemisphere",
  "tabler-hexagon-0-filled",
  "tabler-hexagon-1-filled",
  "tabler-hexagon-2-filled",
  "tabler-hexagon-3-filled",
  "tabler-hexagon-3d",
  "tabler-hexagon-4-filled",
  "tabler-hexagon-5-filled",
  "tabler-hexagon-6-filled",
  "tabler-hexagon-7-filled",
  "tabler-hexagon-8-filled",
  "tabler-hexagon-9-filled",
  "tabler-hexagon-filled",
  "tabler-hexagon-letter-a",
  "tabler-hexagon-letter-b",
  "tabler-hexagon-letter-c",
  "tabler-hexagon-letter-d",
  "tabler-hexagon-letter-e",
  "tabler-hexagon-letter-f",
  "tabler-hexagon-letter-g",
  "tabler-hexagon-letter-h",
  "tabler-hexagon-letter-i",
  "tabler-hexagon-letter-j",
  "tabler-hexagon-letter-k",
  "tabler-hexagon-letter-l",
  "tabler-hexagon-letter-m",
  "tabler-hexagon-letter-n",
  "tabler-hexagon-letter-o",
  "tabler-hexagon-letter-p",
  "tabler-hexagon-letter-q",
  "tabler-hexagon-letter-r",
  "tabler-hexagon-letter-s",
  "tabler-hexagon-letter-t",
  "tabler-hexagon-letter-u",
  "tabler-hexagon-letter-v",
  "tabler-hexagon-letter-w",
  "tabler-hexagon-letter-x",
  "tabler-hexagon-letter-y",
  "tabler-hexagon-letter-z",
  "tabler-hexagon-minus-2",
  "tabler-hexagon-minus",
  "tabler-hexagon-number-0",
  "tabler-hexagon-number-1",
  "tabler-hexagon-number-2",
  "tabler-hexagon-number-3",
  "tabler-hexagon-number-4",
  "tabler-hexagon-number-5",
  "tabler-hexagon-number-6",
  "tabler-hexagon-number-7",
  "tabler-hexagon-number-8",
  "tabler-hexagon-number-9",
  "tabler-hexagon-off",
  "tabler-hexagon-plus-2",
  "tabler-hexagon-plus",
  "tabler-hexagon",
  "tabler-hexagonal-prism-off",
  "tabler-hexagonal-prism-plus",
  "tabler-hexagonal-prism",
  "tabler-hexagonal-pyramid-off",
  "tabler-hexagonal-pyramid-plus",
  "tabler-hexagonal-pyramid",
  "tabler-hexagons-off",
  "tabler-hexagons",
  "tabler-hierarchy-2",
  "tabler-hierarchy-3",
  "tabler-hierarchy-off",
  "tabler-hierarchy",
  "tabler-highlight-off",
  "tabler-highlight",
  "tabler-history-off",
  "tabler-history-toggle",
  "tabler-history",
  "tabler-home-2",
  "tabler-home-bolt",
  "tabler-home-cancel",
  "tabler-home-check",
  "tabler-home-cog",
  "tabler-home-dollar",
  "tabler-home-dot",
  "tabler-home-down",
  "tabler-home-eco",
  "tabler-home-edit",
  "tabler-home-exclamation",
  "tabler-home-hand",
  "tabler-home-heart",
  "tabler-home-infinity",
  "tabler-home-link",
  "tabler-home-minus",
  "tabler-home-move",
  "tabler-home-off",
  "tabler-home-plus",
  "tabler-home-question",
  "tabler-home-ribbon",
  "tabler-home-search",
  "tabler-home-share",
  "tabler-home-shield",
  "tabler-home-signal",
  "tabler-home-star",
  "tabler-home-stats",
  "tabler-home-up",
  "tabler-home-x",
  "tabler-home",
  "tabler-horse-toy",
  "tabler-horse",
  "tabler-horseshoe",
  "tabler-hotel-service",
  "tabler-hourglass-empty",
  "tabler-hourglass-filled",
  "tabler-hourglass-high",
  "tabler-hourglass-low",
  "tabler-hourglass-off",
  "tabler-hourglass",
  "tabler-html",
  "tabler-http-connect",
  "tabler-http-delete",
  "tabler-http-get",
  "tabler-http-head",
  "tabler-http-options",
  "tabler-http-patch",
  "tabler-http-post",
  "tabler-http-put",
  "tabler-http-que",
  "tabler-http-trace",
  "tabler-ice-cream-2",
  "tabler-ice-cream-off",
  "tabler-ice-cream",
  "tabler-ice-skating",
  "tabler-icons-off",
  "tabler-icons",
  "tabler-id-badge-2",
  "tabler-id-badge-off",
  "tabler-id-badge",
  "tabler-id-off",
  "tabler-id",
  "tabler-inbox-off",
  "tabler-inbox",
  "tabler-indent-decrease",
  "tabler-indent-increase",
  "tabler-infinity-off",
  "tabler-infinity",
  "tabler-info-circle-filled",
  "tabler-info-circle",
  "tabler-info-hexagon-filled",
  "tabler-info-hexagon",
  "tabler-info-octagon-filled",
  "tabler-info-octagon",
  "tabler-info-small",
  "tabler-info-square-filled",
  "tabler-info-square-rounded-filled",
  "tabler-info-square-rounded",
  "tabler-info-square",
  "tabler-info-triangle-filled",
  "tabler-info-triangle",
  "tabler-inner-shadow-bottom-filled",
  "tabler-inner-shadow-bottom-left-filled",
  "tabler-inner-shadow-bottom-left",
  "tabler-inner-shadow-bottom-right-filled",
  "tabler-inner-shadow-bottom-right",
  "tabler-inner-shadow-bottom",
  "tabler-inner-shadow-left-filled",
  "tabler-inner-shadow-left",
  "tabler-inner-shadow-right-filled",
  "tabler-inner-shadow-right",
  "tabler-inner-shadow-top-filled",
  "tabler-inner-shadow-top-left-filled",
  "tabler-inner-shadow-top-left",
  "tabler-inner-shadow-top-right-filled",
  "tabler-inner-shadow-top-right",
  "tabler-inner-shadow-top",
  "tabler-input-ai",
  "tabler-input-check",
  "tabler-input-search",
  "tabler-input-x",
  "tabler-ironing-1",
  "tabler-ironing-2",
  "tabler-ironing-3",
  "tabler-ironing-off",
  "tabler-ironing-steam-off",
  "tabler-ironing-steam",
  "tabler-ironing",
  "tabler-irregular-polyhedron-off",
  "tabler-irregular-polyhedron-plus",
  "tabler-irregular-polyhedron",
  "tabler-italic",
  "tabler-jacket",
  "tabler-jetpack",
  "tabler-jewish-star-filled",
  "tabler-jewish-star",
  "tabler-jpg",
  "tabler-json",
  "tabler-jump-rope",
  "tabler-karate",
  "tabler-kayak",
  "tabler-kering",
  "tabler-key-off",
  "tabler-key",
  "tabler-keyboard-hide",
  "tabler-keyboard-off",
  "tabler-keyboard-show",
  "tabler-keyboard",
  "tabler-keyframe-align-center-filled",
  "tabler-keyframe-align-center",
  "tabler-keyframe-align-horizontal-filled",
  "tabler-keyframe-align-horizontal",
  "tabler-keyframe-align-vertical-filled",
  "tabler-keyframe-align-vertical",
  "tabler-keyframe-filled",
  "tabler-keyframe",
  "tabler-keyframes-filled",
  "tabler-keyframes",
  "tabler-ladder-off",
  "tabler-ladder",
  "tabler-ladle",
  "tabler-lambda",
  "tabler-lamp-2",
  "tabler-lamp-off",
  "tabler-lamp",
  "tabler-lane",
  "tabler-language-hiragana",
  "tabler-language-katakana",
  "tabler-language-off",
  "tabler-language",
  "tabler-lasso-off",
  "tabler-lasso-polygon",
  "tabler-lasso",
  "tabler-layers-difference",
  "tabler-layers-intersect-2",
  "tabler-layers-intersect",
  "tabler-layers-linked",
  "tabler-layers-off",
  "tabler-layers-subtract",
  "tabler-layers-union",
  "tabler-layout-2",
  "tabler-layout-align-bottom",
  "tabler-layout-align-center",
  "tabler-layout-align-left",
  "tabler-layout-align-middle",
  "tabler-layout-align-right",
  "tabler-layout-align-top",
  "tabler-layout-board-split",
  "tabler-layout-board",
  "tabler-layout-bottombar-collapse-filled",
  "tabler-layout-bottombar-collapse",
  "tabler-layout-bottombar-expand-filled",
  "tabler-layout-bottombar-expand",
  "tabler-layout-bottombar-filled",
  "tabler-layout-bottombar",
  "tabler-layout-cards",
  "tabler-layout-collage",
  "tabler-layout-columns",
  "tabler-layout-dashboard",
  "tabler-layout-distribute-horizontal",
  "tabler-layout-distribute-vertical",
  "tabler-layout-grid-add",
  "tabler-layout-grid-remove",
  "tabler-layout-grid",
  "tabler-layout-kanban",
  "tabler-layout-list",
  "tabler-layout-navbar-collapse-filled",
  "tabler-layout-navbar-collapse",
  "tabler-layout-navbar-expand-filled",
  "tabler-layout-navbar-expand",
  "tabler-layout-navbar-filled",
  "tabler-layout-navbar",
  "tabler-layout-off",
  "tabler-layout-rows",
  "tabler-layout-sidebar-left-collapse-filled",
  "tabler-layout-sidebar-left-collapse",
  "tabler-layout-sidebar-left-expand-filled",
  "tabler-layout-sidebar-left-expand",
  "tabler-layout-sidebar-right-collapse-filled",
  "tabler-layout-sidebar-right-collapse",
  "tabler-layout-sidebar-right-expand-filled",
  "tabler-layout-sidebar-right-expand",
  "tabler-layout-sidebar-right",
  "tabler-layout-sidebar",
  "tabler-layout",
  "tabler-leaf-off",
  "tabler-leaf",
  "tabler-lego-off",
  "tabler-lego",
  "tabler-lemon-2",
  "tabler-lemon",
  "tabler-letter-a-small",
  "tabler-letter-a",
  "tabler-letter-b-small",
  "tabler-letter-b",
  "tabler-letter-c-small",
  "tabler-letter-c",
  "tabler-letter-case-lower",
  "tabler-letter-case-toggle",
  "tabler-letter-case-upper",
  "tabler-letter-case",
  "tabler-letter-d-small",
  "tabler-letter-d",
  "tabler-letter-e-small",
  "tabler-letter-e",
  "tabler-letter-f-small",
  "tabler-letter-f",
  "tabler-letter-g-small",
  "tabler-letter-g",
  "tabler-letter-h-small",
  "tabler-letter-h",
  "tabler-letter-i-small",
  "tabler-letter-i",
  "tabler-letter-j-small",
  "tabler-letter-j",
  "tabler-letter-k-small",
  "tabler-letter-k",
  "tabler-letter-l-small",
  "tabler-letter-l",
  "tabler-letter-m-small",
  "tabler-letter-m",
  "tabler-letter-n-small",
  "tabler-letter-n",
  "tabler-letter-o-small",
  "tabler-letter-o",
  "tabler-letter-p-small",
  "tabler-letter-p",
  "tabler-letter-q-small",
  "tabler-letter-q",
  "tabler-letter-r-small",
  "tabler-letter-r",
  "tabler-letter-s-small",
  "tabler-letter-s",
  "tabler-letter-spacing",
  "tabler-letter-t-small",
  "tabler-letter-t",
  "tabler-letter-u-small",
  "tabler-letter-u",
  "tabler-letter-v-small",
  "tabler-letter-v",
  "tabler-letter-w-small",
  "tabler-letter-w",
  "tabler-letter-x-small",
  "tabler-letter-x",
  "tabler-letter-y-small",
  "tabler-letter-y",
  "tabler-letter-z-small",
  "tabler-letter-z",
  "tabler-license-off",
  "tabler-license",
  "tabler-lifebuoy-off",
  "tabler-lifebuoy",
  "tabler-lighter",
  "tabler-line-dashed",
  "tabler-line-dotted",
  "tabler-line-height",
  "tabler-line-scan",
  "tabler-line",
  "tabler-link-minus",
  "tabler-link-off",
  "tabler-link-plus",
  "tabler-link",
  "tabler-list-check",
  "tabler-list-details",
  "tabler-list-letters",
  "tabler-list-numbers",
  "tabler-list-search",
  "tabler-list-tree",
  "tabler-list",
  "tabler-live-photo-off",
  "tabler-live-photo",
  "tabler-live-view",
  "tabler-load-balancer",
  "tabler-loader-2",
  "tabler-loader-3",
  "tabler-loader-quarter",
  "tabler-loader",
  "tabler-location-bolt",
  "tabler-location-broken",
  "tabler-location-cancel",
  "tabler-location-check",
  "tabler-location-code",
  "tabler-location-cog",
  "tabler-location-discount",
  "tabler-location-dollar",
  "tabler-location-down",
  "tabler-location-exclamation",
  "tabler-location-filled",
  "tabler-location-heart",
  "tabler-location-minus",
  "tabler-location-off",
  "tabler-location-pause",
  "tabler-location-pin",
  "tabler-location-plus",
  "tabler-location-question",
  "tabler-location-search",
  "tabler-location-share",
  "tabler-location-star",
  "tabler-location-up",
  "tabler-location-x",
  "tabler-location",
  "tabler-lock-access-off",
  "tabler-lock-access",
  "tabler-lock-bolt",
  "tabler-lock-cancel",
  "tabler-lock-check",
  "tabler-lock-code",
  "tabler-lock-cog",
  "tabler-lock-dollar",
  "tabler-lock-down",
  "tabler-lock-exclamation",
  "tabler-lock-heart",
  "tabler-lock-minus",
  "tabler-lock-off",
  "tabler-lock-open-off",
  "tabler-lock-open",
  "tabler-lock-pause",
  "tabler-lock-pin",
  "tabler-lock-plus",
  "tabler-lock-question",
  "tabler-lock-search",
  "tabler-lock-share",
  "tabler-lock-square-rounded-filled",
  "tabler-lock-square-rounded",
  "tabler-lock-square",
  "tabler-lock-star",
  "tabler-lock-up",
  "tabler-lock-x",
  "tabler-lock",
  "tabler-logic-and",
  "tabler-logic-buffer",
  "tabler-logic-nand",
  "tabler-logic-nor",
  "tabler-logic-not",
  "tabler-logic-or",
  "tabler-logic-xnor",
  "tabler-logic-xor",
  "tabler-login-2",
  "tabler-login",
  "tabler-logout-2",
  "tabler-logout",
  "tabler-lollipop-off",
  "tabler-lollipop",
  "tabler-luggage-off",
  "tabler-luggage",
  "tabler-lungs-off",
  "tabler-lungs",
  "tabler-macro-off",
  "tabler-macro",
  "tabler-magnet-off",
  "tabler-magnet",
  "tabler-magnetic",
  "tabler-mail-ai",
  "tabler-mail-bolt",
  "tabler-mail-cancel",
  "tabler-mail-check",
  "tabler-mail-code",
  "tabler-mail-cog",
  "tabler-mail-dollar",
  "tabler-mail-down",
  "tabler-mail-exclamation",
  "tabler-mail-fast",
  "tabler-mail-filled",
  "tabler-mail-forward",
  "tabler-mail-heart",
  "tabler-mail-minus",
  "tabler-mail-off",
  "tabler-mail-opened-filled",
  "tabler-mail-opened",
  "tabler-mail-pause",
  "tabler-mail-pin",
  "tabler-mail-plus",
  "tabler-mail-question",
  "tabler-mail-search",
  "tabler-mail-share",
  "tabler-mail-star",
  "tabler-mail-up",
  "tabler-mail-x",
  "tabler-mail",
  "tabler-mailbox-off",
  "tabler-mailbox",
  "tabler-man",
  "tabler-manual-gearbox",
  "tabler-map-2",
  "tabler-map-bolt",
  "tabler-map-cancel",
  "tabler-map-check",
  "tabler-map-code",
  "tabler-map-cog",
  "tabler-map-discount",
  "tabler-map-dollar",
  "tabler-map-down",
  "tabler-map-east",
  "tabler-map-exclamation",
  "tabler-map-heart",
  "tabler-map-minus",
  "tabler-map-north",
  "tabler-map-off",
  "tabler-map-pause",
  "tabler-map-pin-2",
  "tabler-map-pin-bolt",
  "tabler-map-pin-cancel",
  "tabler-map-pin-check",
  "tabler-map-pin-code",
  "tabler-map-pin-cog",
  "tabler-map-pin-dollar",
  "tabler-map-pin-down",
  "tabler-map-pin-exclamation",
  "tabler-map-pin-filled",
  "tabler-map-pin-heart",
  "tabler-map-pin-minus",
  "tabler-map-pin-off",
  "tabler-map-pin-pause",
  "tabler-map-pin-pin",
  "tabler-map-pin-plus",
  "tabler-map-pin-question",
  "tabler-map-pin-search",
  "tabler-map-pin-share",
  "tabler-map-pin-star",
  "tabler-map-pin-up",
  "tabler-map-pin-x",
  "tabler-map-pin",
  "tabler-map-pins",
  "tabler-map-plus",
  "tabler-map-question",
  "tabler-map-route",
  "tabler-map-search",
  "tabler-map-share",
  "tabler-map-south",
  "tabler-map-star",
  "tabler-map-up",
  "tabler-map-west",
  "tabler-map-x",
  "tabler-map",
  "tabler-markdown-off",
  "tabler-markdown",
  "tabler-marquee-2",
  "tabler-marquee-off",
  "tabler-marquee",
  "tabler-mars",
  "tabler-mask-off",
  "tabler-mask",
  "tabler-masks-theater-off",
  "tabler-masks-theater",
  "tabler-massage",
  "tabler-matchstick",
  "tabler-math-1-divide-2",
  "tabler-math-1-divide-3",
  "tabler-math-avg",
  "tabler-math-equal-greater",
  "tabler-math-equal-lower",
  "tabler-math-function-off",
  "tabler-math-function-y",
  "tabler-math-function",
  "tabler-math-greater",
  "tabler-math-integral-x",
  "tabler-math-integral",
  "tabler-math-integrals",
  "tabler-math-lower",
  "tabler-math-max",
  "tabler-math-min",
  "tabler-math-not",
  "tabler-math-off",
  "tabler-math-pi-divide-2",
  "tabler-math-pi",
  "tabler-math-symbols",
  "tabler-math-x-divide-2",
  "tabler-math-x-divide-y-2",
  "tabler-math-x-divide-y",
  "tabler-math-x-minus-x",
  "tabler-math-x-minus-y",
  "tabler-math-x-plus-x",
  "tabler-math-x-plus-y",
  "tabler-math-xy",
  "tabler-math-y-minus-y",
  "tabler-math-y-plus-y",
  "tabler-math",
  "tabler-maximize-off",
  "tabler-maximize",
  "tabler-meat-off",
  "tabler-meat",
  "tabler-medal-2",
  "tabler-medal",
  "tabler-medical-cross-circle",
  "tabler-medical-cross-filled",
  "tabler-medical-cross-off",
  "tabler-medical-cross",
  "tabler-medicine-syrup",
  "tabler-meeple",
  "tabler-melon",
  "tabler-menorah",
  "tabler-menu-2",
  "tabler-menu-deep",
  "tabler-menu-order",
  "tabler-menu",
  "tabler-message-2-bolt",
  "tabler-message-2-cancel",
  "tabler-message-2-check",
  "tabler-message-2-code",
  "tabler-message-2-cog",
  "tabler-message-2-dollar",
  "tabler-message-2-down",
  "tabler-message-2-exclamation",
  "tabler-message-2-heart",
  "tabler-message-2-minus",
  "tabler-message-2-off",
  "tabler-message-2-pause",
  "tabler-message-2-pin",
  "tabler-message-2-plus",
  "tabler-message-2-question",
  "tabler-message-2-search",
  "tabler-message-2-share",
  "tabler-message-2-star",
  "tabler-message-2-up",
  "tabler-message-2-x",
  "tabler-message-2",
  "tabler-message-bolt",
  "tabler-message-cancel",
  "tabler-message-chatbot",
  "tabler-message-check",
  "tabler-message-circle-2-filled",
  "tabler-message-circle-2",
  "tabler-message-circle-bolt",
  "tabler-message-circle-cancel",
  "tabler-message-circle-check",
  "tabler-message-circle-code",
  "tabler-message-circle-cog",
  "tabler-message-circle-dollar",
  "tabler-message-circle-down",
  "tabler-message-circle-exclamation",
  "tabler-message-circle-heart",
  "tabler-message-circle-minus",
  "tabler-message-circle-off",
  "tabler-message-circle-pause",
  "tabler-message-circle-pin",
  "tabler-message-circle-plus",
  "tabler-message-circle-question",
  "tabler-message-circle-search",
  "tabler-message-circle-share",
  "tabler-message-circle-star",
  "tabler-message-circle-up",
  "tabler-message-circle-x",
  "tabler-message-circle",
  "tabler-message-code",
  "tabler-message-cog",
  "tabler-message-dollar",
  "tabler-message-dots",
  "tabler-message-down",
  "tabler-message-exclamation",
  "tabler-message-forward",
  "tabler-message-heart",
  "tabler-message-language",
  "tabler-message-minus",
  "tabler-message-off",
  "tabler-message-pause",
  "tabler-message-pin",
  "tabler-message-plus",
  "tabler-message-question",
  "tabler-message-report",
  "tabler-message-search",
  "tabler-message-share",
  "tabler-message-star",
  "tabler-message-up",
  "tabler-message-x",
  "tabler-message",
  "tabler-messages-off",
  "tabler-messages",
  "tabler-meteor-off",
  "tabler-meteor",
  "tabler-michelin-bib-gourmand",
  "tabler-michelin-star-green",
  "tabler-michelin-star",
  "tabler-mickey-filled",
  "tabler-mickey",
  "tabler-microphone-2-off",
  "tabler-microphone-2",
  "tabler-microphone-off",
  "tabler-microphone",
  "tabler-microscope-off",
  "tabler-microscope",
  "tabler-microwave-off",
  "tabler-microwave",
  "tabler-military-award",
  "tabler-military-rank",
  "tabler-milk-off",
  "tabler-milk",
  "tabler-milkshake",
  "tabler-minimize",
  "tabler-minus-vertical",
  "tabler-minus",
  "tabler-mist-off",
  "tabler-mist",
  "tabler-mobiledata-off",
  "tabler-mobiledata",
  "tabler-moneybag",
  "tabler-mood-angry",
  "tabler-mood-annoyed-2",
  "tabler-mood-annoyed",
  "tabler-mood-boy",
  "tabler-mood-check",
  "tabler-mood-cog",
  "tabler-mood-confuzed-filled",
  "tabler-mood-confuzed",
  "tabler-mood-crazy-happy",
  "tabler-mood-cry",
  "tabler-mood-dollar",
  "tabler-mood-edit",
  "tabler-mood-empty-filled",
  "tabler-mood-empty",
  "tabler-mood-happy-filled",
  "tabler-mood-happy",
  "tabler-mood-heart",
  "tabler-mood-kid-filled",
  "tabler-mood-kid",
  "tabler-mood-look-left",
  "tabler-mood-look-right",
  "tabler-mood-minus",
  "tabler-mood-nerd",
  "tabler-mood-nervous",
  "tabler-mood-neutral-filled",
  "tabler-mood-neutral",
  "tabler-mood-off",
  "tabler-mood-pin",
  "tabler-mood-plus",
  "tabler-mood-sad-2",
  "tabler-mood-sad-dizzy",
  "tabler-mood-sad-filled",
  "tabler-mood-sad-squint",
  "tabler-mood-sad",
  "tabler-mood-search",
  "tabler-mood-share",
  "tabler-mood-sick",
  "tabler-mood-silence",
  "tabler-mood-sing",
  "tabler-mood-smile-beam",
  "tabler-mood-smile-dizzy",
  "tabler-mood-smile-filled",
  "tabler-mood-smile",
  "tabler-mood-suprised",
  "tabler-mood-tongue-wink-2",
  "tabler-mood-tongue-wink",
  "tabler-mood-tongue",
  "tabler-mood-unamused",
  "tabler-mood-up",
  "tabler-mood-wink-2",
  "tabler-mood-wink",
  "tabler-mood-wrrr",
  "tabler-mood-x",
  "tabler-mood-xd",
  "tabler-moon-2",
  "tabler-moon-filled",
  "tabler-moon-off",
  "tabler-moon-stars",
  "tabler-moon",
  "tabler-moped",
  "tabler-motorbike",
  "tabler-mountain-off",
  "tabler-mountain",
  "tabler-mouse-2",
  "tabler-mouse-filled",
  "tabler-mouse-off",
  "tabler-mouse",
  "tabler-moustache",
  "tabler-movie-off",
  "tabler-movie",
  "tabler-mug-off",
  "tabler-mug",
  "tabler-multiplier-0-5x",
  "tabler-multiplier-1-5x",
  "tabler-multiplier-1x",
  "tabler-multiplier-2x",
  "tabler-mushroom-filled",
  "tabler-mushroom-off",
  "tabler-mushroom",
  "tabler-music-bolt",
  "tabler-music-cancel",
  "tabler-music-check",
  "tabler-music-code",
  "tabler-music-cog",
  "tabler-music-discount",
  "tabler-music-dollar",
  "tabler-music-down",
  "tabler-music-exclamation",
  "tabler-music-heart",
  "tabler-music-minus",
  "tabler-music-off",
  "tabler-music-pause",
  "tabler-music-pin",
  "tabler-music-plus",
  "tabler-music-question",
  "tabler-music-search",
  "tabler-music-share",
  "tabler-music-star",
  "tabler-music-up",
  "tabler-music-x",
  "tabler-music",
  "tabler-navigation-bolt",
  "tabler-navigation-cancel",
  "tabler-navigation-check",
  "tabler-navigation-code",
  "tabler-navigation-cog",
  "tabler-navigation-discount",
  "tabler-navigation-dollar",
  "tabler-navigation-down",
  "tabler-navigation-east",
  "tabler-navigation-exclamation",
  "tabler-navigation-filled",
  "tabler-navigation-heart",
  "tabler-navigation-minus",
  "tabler-navigation-north",
  "tabler-navigation-off",
  "tabler-navigation-pause",
  "tabler-navigation-pin",
  "tabler-navigation-plus",
  "tabler-navigation-question",
  "tabler-navigation-search",
  "tabler-navigation-share",
  "tabler-navigation-south",
  "tabler-navigation-star",
  "tabler-navigation-top",
  "tabler-navigation-up",
  "tabler-navigation-west",
  "tabler-navigation-x",
  "tabler-navigation",
  "tabler-needle-thread",
  "tabler-needle",
  "tabler-network-off",
  "tabler-network",
  "tabler-new-section",
  "tabler-news-off",
  "tabler-news",
  "tabler-nfc-off",
  "tabler-nfc",
  "tabler-no-copyright",
  "tabler-no-creative-commons",
  "tabler-no-derivatives",
  "tabler-north-star",
  "tabler-note-off",
  "tabler-note",
  "tabler-notebook-off",
  "tabler-notebook",
  "tabler-notes-off",
  "tabler-notes",
  "tabler-notification-off",
  "tabler-notification",
  "tabler-number-0-small",
  "tabler-number-0",
  "tabler-number-1-small",
  "tabler-number-1",
  "tabler-number-10-small",
  "tabler-number-11-small",
  "tabler-number-12-small",
  "tabler-number-13-small",
  "tabler-number-14-small",
  "tabler-number-15-small",
  "tabler-number-16-small",
  "tabler-number-17-small",
  "tabler-number-18-small",
  "tabler-number-19-small",
  "tabler-number-2-small",
  "tabler-number-2",
  "tabler-number-20-small",
  "tabler-number-21-small",
  "tabler-number-22-small",
  "tabler-number-23-small",
  "tabler-number-24-small",
  "tabler-number-25-small",
  "tabler-number-26-small",
  "tabler-number-27-small",
  "tabler-number-28-small",
  "tabler-number-29-small",
  "tabler-number-3-small",
  "tabler-number-3",
  "tabler-number-4-small",
  "tabler-number-4",
  "tabler-number-5-small",
  "tabler-number-5",
  "tabler-number-6-small",
  "tabler-number-6",
  "tabler-number-7-small",
  "tabler-number-7",
  "tabler-number-8-small",
  "tabler-number-8",
  "tabler-number-9-small",
  "tabler-number-9",
  "tabler-number",
  "tabler-numbers",
  "tabler-nurse",
  "tabler-nut",
  "tabler-octagon-filled",
  "tabler-octagon-minus-2",
  "tabler-octagon-minus",
  "tabler-octagon-off",
  "tabler-octagon-plus-2",
  "tabler-octagon-plus",
  "tabler-octagon",
  "tabler-octahedron-off",
  "tabler-octahedron-plus",
  "tabler-octahedron",
  "tabler-old",
  "tabler-olympics-off",
  "tabler-olympics",
  "tabler-om",
  "tabler-omega",
  "tabler-outbound",
  "tabler-outlet",
  "tabler-oval-filled",
  "tabler-oval-vertical-filled",
  "tabler-oval-vertical",
  "tabler-oval",
  "tabler-overline",
  "tabler-package-export",
  "tabler-package-import",
  "tabler-package-off",
  "tabler-package",
  "tabler-packages",
  "tabler-pacman",
  "tabler-page-break",
  "tabler-paint-filled",
  "tabler-paint-off",
  "tabler-paint",
  "tabler-palette-off",
  "tabler-palette",
  "tabler-panorama-horizontal-off",
  "tabler-panorama-horizontal",
  "tabler-panorama-vertical-off",
  "tabler-panorama-vertical",
  "tabler-paper-bag-off",
  "tabler-paper-bag",
  "tabler-paperclip",
  "tabler-parachute-off",
  "tabler-parachute",
  "tabler-parentheses-off",
  "tabler-parentheses",
  "tabler-parking-off",
  "tabler-parking",
  "tabler-password-fingerprint",
  "tabler-password-mobile-phone",
  "tabler-password-user",
  "tabler-password",
  "tabler-paw-filled",
  "tabler-paw-off",
  "tabler-paw",
  "tabler-pdf",
  "tabler-peace",
  "tabler-pencil-bolt",
  "tabler-pencil-cancel",
  "tabler-pencil-check",
  "tabler-pencil-code",
  "tabler-pencil-cog",
  "tabler-pencil-discount",
  "tabler-pencil-dollar",
  "tabler-pencil-down",
  "tabler-pencil-exclamation",
  "tabler-pencil-heart",
  "tabler-pencil-minus",
  "tabler-pencil-off",
  "tabler-pencil-pause",
  "tabler-pencil-pin",
  "tabler-pencil-plus",
  "tabler-pencil-question",
  "tabler-pencil-search",
  "tabler-pencil-share",
  "tabler-pencil-star",
  "tabler-pencil-up",
  "tabler-pencil-x",
  "tabler-pencil",
  "tabler-pennant-2-filled",
  "tabler-pennant-2",
  "tabler-pennant-filled",
  "tabler-pennant-off",
  "tabler-pennant",
  "tabler-pentagon-filled",
  "tabler-pentagon-number-0",
  "tabler-pentagon-number-1",
  "tabler-pentagon-number-2",
  "tabler-pentagon-number-3",
  "tabler-pentagon-number-4",
  "tabler-pentagon-number-5",
  "tabler-pentagon-number-6",
  "tabler-pentagon-number-7",
  "tabler-pentagon-number-8",
  "tabler-pentagon-number-9",
  "tabler-pentagon-off",
  "tabler-pentagon-plus",
  "tabler-pentagon-x",
  "tabler-pentagon",
  "tabler-pentagram",
  "tabler-pepper-off",
  "tabler-pepper",
  "tabler-percentage",
  "tabler-perfume",
  "tabler-perspective-off",
  "tabler-perspective",
  "tabler-phone-call",
  "tabler-phone-calling",
  "tabler-phone-check",
  "tabler-phone-filled",
  "tabler-phone-incoming",
  "tabler-phone-off",
  "tabler-phone-outgoing",
  "tabler-phone-pause",
  "tabler-phone-plus",
  "tabler-phone-x",
  "tabler-phone",
  "tabler-photo-ai",
  "tabler-photo-bolt",
  "tabler-photo-cancel",
  "tabler-photo-check",
  "tabler-photo-circle-minus",
  "tabler-photo-circle-plus",
  "tabler-photo-circle",
  "tabler-photo-code",
  "tabler-photo-cog",
  "tabler-photo-dollar",
  "tabler-photo-down",
  "tabler-photo-edit",
  "tabler-photo-exclamation",
  "tabler-photo-filled",
  "tabler-photo-heart",
  "tabler-photo-hexagon",
  "tabler-photo-minus",
  "tabler-photo-off",
  "tabler-photo-pause",
  "tabler-photo-pentagon",
  "tabler-photo-pin",
  "tabler-photo-plus",
  "tabler-photo-question",
  "tabler-photo-scan",
  "tabler-photo-search",
  "tabler-photo-sensor-2",
  "tabler-photo-sensor-3",
  "tabler-photo-sensor",
  "tabler-photo-share",
  "tabler-photo-shield",
  "tabler-photo-square-rounded",
  "tabler-photo-star",
  "tabler-photo-up",
  "tabler-photo-video",
  "tabler-photo-x",
  "tabler-photo",
  "tabler-physotherapist",
  "tabler-piano",
  "tabler-pick",
  "tabler-picture-in-picture-off",
  "tabler-picture-in-picture-on",
  "tabler-picture-in-picture-top",
  "tabler-picture-in-picture",
  "tabler-pig-money",
  "tabler-pig-off",
  "tabler-pig",
  "tabler-pilcrow",
  "tabler-pill-off",
  "tabler-pill",
  "tabler-pills",
  "tabler-pin-filled",
  "tabler-pin",
  "tabler-ping-pong",
  "tabler-pinned-filled",
  "tabler-pinned-off",
  "tabler-pinned",
  "tabler-pizza-off",
  "tabler-pizza",
  "tabler-placeholder",
  "tabler-plane-arrival",
  "tabler-plane-departure",
  "tabler-plane-inflight",
  "tabler-plane-off",
  "tabler-plane-tilt",
  "tabler-plane",
  "tabler-planet-off",
  "tabler-planet",
  "tabler-plant-2-off",
  "tabler-plant-2",
  "tabler-plant-off",
  "tabler-plant",
  "tabler-play-basketball",
  "tabler-play-card-off",
  "tabler-play-card",
  "tabler-play-football",
  "tabler-play-handball",
  "tabler-play-volleyball",
  "tabler-player-eject-filled",
  "tabler-player-eject",
  "tabler-player-pause-filled",
  "tabler-player-pause",
  "tabler-player-play-filled",
  "tabler-player-play",
  "tabler-player-record-filled",
  "tabler-player-record",
  "tabler-player-skip-back-filled",
  "tabler-player-skip-back",
  "tabler-player-skip-forward-filled",
  "tabler-player-skip-forward",
  "tabler-player-stop-filled",
  "tabler-player-stop",
  "tabler-player-track-next-filled",
  "tabler-player-track-next",
  "tabler-player-track-prev-filled",
  "tabler-player-track-prev",
  "tabler-playlist-add",
  "tabler-playlist-off",
  "tabler-playlist-x",
  "tabler-playlist",
  "tabler-playstation-circle",
  "tabler-playstation-square",
  "tabler-playstation-triangle",
  "tabler-playstation-x",
  "tabler-plug-connected-x",
  "tabler-plug-connected",
  "tabler-plug-off",
  "tabler-plug-x",
  "tabler-plug",
  "tabler-plus-equal",
  "tabler-plus-minus",
  "tabler-plus",
  "tabler-png",
  "tabler-podium-off",
  "tabler-podium",
  "tabler-point-filled",
  "tabler-point-off",
  "tabler-point",
  "tabler-pointer-bolt",
  "tabler-pointer-cancel",
  "tabler-pointer-check",
  "tabler-pointer-code",
  "tabler-pointer-cog",
  "tabler-pointer-dollar",
  "tabler-pointer-down",
  "tabler-pointer-exclamation",
  "tabler-pointer-filled",
  "tabler-pointer-heart",
  "tabler-pointer-minus",
  "tabler-pointer-off",
  "tabler-pointer-pause",
  "tabler-pointer-pin",
  "tabler-pointer-plus",
  "tabler-pointer-question",
  "tabler-pointer-search",
  "tabler-pointer-share",
  "tabler-pointer-star",
  "tabler-pointer-up",
  "tabler-pointer-x",
  "tabler-pointer",
  "tabler-pokeball-off",
  "tabler-pokeball",
  "tabler-poker-chip",
  "tabler-polaroid-filled",
  "tabler-polaroid",
  "tabler-polygon-off",
  "tabler-polygon",
  "tabler-poo",
  "tabler-pool-off",
  "tabler-pool",
  "tabler-power",
  "tabler-pray",
  "tabler-premium-rights",
  "tabler-prescription",
  "tabler-presentation-analytics",
  "tabler-presentation-off",
  "tabler-presentation",
  "tabler-printer-off",
  "tabler-printer",
  "tabler-prism-off",
  "tabler-prism-plus",
  "tabler-prism",
  "tabler-prison",
  "tabler-progress-alert",
  "tabler-progress-bolt",
  "tabler-progress-check",
  "tabler-progress-down",
  "tabler-progress-help",
  "tabler-progress-x",
  "tabler-progress",
  "tabler-prompt",
  "tabler-propeller-off",
  "tabler-propeller",
  "tabler-pumpkin-scary",
  "tabler-puzzle-2",
  "tabler-puzzle-filled",
  "tabler-puzzle-off",
  "tabler-puzzle",
  "tabler-pyramid-off",
  "tabler-pyramid-plus",
  "tabler-pyramid",
  "tabler-qrcode-off",
  "tabler-qrcode",
  "tabler-question-mark",
  "tabler-quote-off",
  "tabler-quote",
  "tabler-quotes",
  "tabler-radar-2",
  "tabler-radar-off",
  "tabler-radar",
  "tabler-radio-off",
  "tabler-radio",
  "tabler-radioactive-filled",
  "tabler-radioactive-off",
  "tabler-radioactive",
  "tabler-radius-bottom-left",
  "tabler-radius-bottom-right",
  "tabler-radius-top-left",
  "tabler-radius-top-right",
  "tabler-rainbow-off",
  "tabler-rainbow",
  "tabler-rating-12-plus",
  "tabler-rating-14-plus",
  "tabler-rating-16-plus",
  "tabler-rating-18-plus",
  "tabler-rating-21-plus",
  "tabler-razor-electric",
  "tabler-razor",
  "tabler-receipt-2",
  "tabler-receipt-off",
  "tabler-receipt-refund",
  "tabler-receipt-tax",
  "tabler-receipt",
  "tabler-recharging",
  "tabler-record-mail-off",
  "tabler-record-mail",
  "tabler-rectangle-filled",
  "tabler-rectangle-rounded-bottom",
  "tabler-rectangle-rounded-top",
  "tabler-rectangle-vertical-filled",
  "tabler-rectangle-vertical",
  "tabler-rectangle",
  "tabler-rectangular-prism-off",
  "tabler-rectangular-prism-plus",
  "tabler-rectangular-prism",
  "tabler-recycle-off",
  "tabler-recycle",
  "tabler-refresh-alert",
  "tabler-refresh-dot",
  "tabler-refresh-off",
  "tabler-refresh",
  "tabler-regex-off",
  "tabler-regex",
  "tabler-registered",
  "tabler-relation-many-to-many",
  "tabler-relation-one-to-many",
  "tabler-relation-one-to-one",
  "tabler-reload",
  "tabler-reorder",
  "tabler-repeat-off",
  "tabler-repeat-once",
  "tabler-repeat",
  "tabler-replace-filled",
  "tabler-replace-off",
  "tabler-replace",
  "tabler-report-analytics",
  "tabler-report-medical",
  "tabler-report-money",
  "tabler-report-off",
  "tabler-report-search",
  "tabler-report",
  "tabler-reserved-line",
  "tabler-resize",
  "tabler-restore",
  "tabler-rewind-backward-10",
  "tabler-rewind-backward-15",
  "tabler-rewind-backward-20",
  "tabler-rewind-backward-30",
  "tabler-rewind-backward-40",
  "tabler-rewind-backward-5",
  "tabler-rewind-backward-50",
  "tabler-rewind-backward-60",
  "tabler-rewind-forward-10",
  "tabler-rewind-forward-15",
  "tabler-rewind-forward-20",
  "tabler-rewind-forward-30",
  "tabler-rewind-forward-40",
  "tabler-rewind-forward-5",
  "tabler-rewind-forward-50",
  "tabler-rewind-forward-60",
  "tabler-ribbon-health",
  "tabler-rings",
  "tabler-ripple-off",
  "tabler-ripple",
  "tabler-road-off",
  "tabler-road-sign",
  "tabler-road",
  "tabler-robot-face",
  "tabler-robot-off",
  "tabler-robot",
  "tabler-rocket-off",
  "tabler-rocket",
  "tabler-roller-skating",
  "tabler-rollercoaster-off",
  "tabler-rollercoaster",
  "tabler-rosette-filled",
  "tabler-rosette-number-0",
  "tabler-rosette-number-1",
  "tabler-rosette-number-2",
  "tabler-rosette-number-3",
  "tabler-rosette-number-4",
  "tabler-rosette-number-5",
  "tabler-rosette-number-6",
  "tabler-rosette-number-7",
  "tabler-rosette-number-8",
  "tabler-rosette-number-9",
  "tabler-rosette",
  "tabler-rotate-2",
  "tabler-rotate-360",
  "tabler-rotate-clockwise-2",
  "tabler-rotate-clockwise",
  "tabler-rotate-dot",
  "tabler-rotate-rectangle",
  "tabler-rotate",
  "tabler-route-2",
  "tabler-route-alt-left",
  "tabler-route-alt-right",
  "tabler-route-off",
  "tabler-route-scan",
  "tabler-route-square-2",
  "tabler-route-square",
  "tabler-route-x-2",
  "tabler-route-x",
  "tabler-route",
  "tabler-router-off",
  "tabler-router",
  "tabler-row-insert-bottom",
  "tabler-row-insert-top",
  "tabler-row-remove",
  "tabler-rss",
  "tabler-rubber-stamp-off",
  "tabler-rubber-stamp",
  "tabler-ruler-2-off",
  "tabler-ruler-2",
  "tabler-ruler-3",
  "tabler-ruler-measure",
  "tabler-ruler-off",
  "tabler-ruler",
  "tabler-run",
  "tabler-rv-truck",
  "tabler-s-turn-down",
  "tabler-s-turn-left",
  "tabler-s-turn-right",
  "tabler-s-turn-up",
  "tabler-sailboat-2",
  "tabler-sailboat-off",
  "tabler-sailboat",
  "tabler-salad",
  "tabler-salt",
  "tabler-satellite-off",
  "tabler-satellite",
  "tabler-sausage",
  "tabler-scale-off",
  "tabler-scale-outline-off",
  "tabler-scale-outline",
  "tabler-scale",
  "tabler-scan-eye",
  "tabler-scan",
  "tabler-schema-off",
  "tabler-schema",
  "tabler-school-bell",
  "tabler-school-off",
  "tabler-school",
  "tabler-scissors-off",
  "tabler-scissors",
  "tabler-scooter-electric",
  "tabler-scooter",
  "tabler-scoreboard",
  "tabler-screen-share-off",
  "tabler-screen-share",
  "tabler-screenshot",
  "tabler-scribble-off",
  "tabler-scribble",
  "tabler-script-minus",
  "tabler-script-plus",
  "tabler-script-x",
  "tabler-script",
  "tabler-scuba-mask-off",
  "tabler-scuba-mask",
  "tabler-sdk",
  "tabler-search-off",
  "tabler-search",
  "tabler-section-sign",
  "tabler-section",
  "tabler-seeding-off",
  "tabler-seeding",
  "tabler-select-all",
  "tabler-select",
  "tabler-selector",
  "tabler-send-off",
  "tabler-send",
  "tabler-seo",
  "tabler-separator-horizontal",
  "tabler-separator-vertical",
  "tabler-separator",
  "tabler-server-2",
  "tabler-server-bolt",
  "tabler-server-cog",
  "tabler-server-off",
  "tabler-server",
  "tabler-servicemark",
  "tabler-settings-2",
  "tabler-settings-automation",
  "tabler-settings-bolt",
  "tabler-settings-cancel",
  "tabler-settings-check",
  "tabler-settings-code",
  "tabler-settings-cog",
  "tabler-settings-dollar",
  "tabler-settings-down",
  "tabler-settings-exclamation",
  "tabler-settings-filled",
  "tabler-settings-heart",
  "tabler-settings-minus",
  "tabler-settings-off",
  "tabler-settings-pause",
  "tabler-settings-pin",
  "tabler-settings-plus",
  "tabler-settings-question",
  "tabler-settings-search",
  "tabler-settings-share",
  "tabler-settings-star",
  "tabler-settings-up",
  "tabler-settings-x",
  "tabler-settings",
  "tabler-shadow-off",
  "tabler-shadow",
  "tabler-shape-2",
  "tabler-shape-3",
  "tabler-shape-off",
  "tabler-shape",
  "tabler-share-2",
  "tabler-share-3",
  "tabler-share-off",
  "tabler-share",
  "tabler-shi-jumping",
  "tabler-shield-bolt",
  "tabler-shield-cancel",
  "tabler-shield-check-filled",
  "tabler-shield-check",
  "tabler-shield-checkered-filled",
  "tabler-shield-checkered",
  "tabler-shield-chevron",
  "tabler-shield-code",
  "tabler-shield-cog",
  "tabler-shield-dollar",
  "tabler-shield-down",
  "tabler-shield-exclamation",
  "tabler-shield-filled",
  "tabler-shield-half-filled",
  "tabler-shield-half",
  "tabler-shield-heart",
  "tabler-shield-lock-filled",
  "tabler-shield-lock",
  "tabler-shield-minus",
  "tabler-shield-off",
  "tabler-shield-pause",
  "tabler-shield-pin",
  "tabler-shield-plus",
  "tabler-shield-question",
  "tabler-shield-search",
  "tabler-shield-share",
  "tabler-shield-star",
  "tabler-shield-up",
  "tabler-shield-x",
  "tabler-shield",
  "tabler-ship-off",
  "tabler-ship",
  "tabler-shirt-filled",
  "tabler-shirt-off",
  "tabler-shirt-sport",
  "tabler-shirt",
  "tabler-shoe-off",
  "tabler-shoe",
  "tabler-shopping-bag-check",
  "tabler-shopping-bag-discount",
  "tabler-shopping-bag-edit",
  "tabler-shopping-bag-exclamation",
  "tabler-shopping-bag-minus",
  "tabler-shopping-bag-plus",
  "tabler-shopping-bag-search",
  "tabler-shopping-bag-x",
  "tabler-shopping-bag",
  "tabler-shopping-cart-bolt",
  "tabler-shopping-cart-cancel",
  "tabler-shopping-cart-check",
  "tabler-shopping-cart-code",
  "tabler-shopping-cart-cog",
  "tabler-shopping-cart-copy",
  "tabler-shopping-cart-discount",
  "tabler-shopping-cart-dollar",
  "tabler-shopping-cart-down",
  "tabler-shopping-cart-exclamation",
  "tabler-shopping-cart-filled",
  "tabler-shopping-cart-heart",
  "tabler-shopping-cart-minus",
  "tabler-shopping-cart-off",
  "tabler-shopping-cart-pause",
  "tabler-shopping-cart-pin",
  "tabler-shopping-cart-plus",
  "tabler-shopping-cart-question",
  "tabler-shopping-cart-search",
  "tabler-shopping-cart-share",
  "tabler-shopping-cart-star",
  "tabler-shopping-cart-up",
  "tabler-shopping-cart-x",
  "tabler-shopping-cart",
  "tabler-shovel",
  "tabler-shredder",
  "tabler-sign-left-filled",
  "tabler-sign-left",
  "tabler-sign-right-filled",
  "tabler-sign-right",
  "tabler-signal-2g",
  "tabler-signal-3g",
  "tabler-signal-4g-plus",
  "tabler-signal-4g",
  "tabler-signal-5g",
  "tabler-signal-6g",
  "tabler-signal-e",
  "tabler-signal-g",
  "tabler-signal-h-plus",
  "tabler-signal-h",
  "tabler-signal-lte",
  "tabler-signature-off",
  "tabler-signature",
  "tabler-sitemap-off",
  "tabler-sitemap",
  "tabler-skateboard-off",
  "tabler-skateboard",
  "tabler-skateboarding",
  "tabler-skull",
  "tabler-slash",
  "tabler-slashes",
  "tabler-sleigh",
  "tabler-slice",
  "tabler-slideshow",
  "tabler-smart-home-off",
  "tabler-smart-home",
  "tabler-smoking-no",
  "tabler-smoking",
  "tabler-snowflake-off",
  "tabler-snowflake",
  "tabler-snowman",
  "tabler-soccer-field",
  "tabler-social-off",
  "tabler-social",
  "tabler-sock",
  "tabler-sofa-off",
  "tabler-sofa",
  "tabler-solar-electricity",
  "tabler-solar-panel-2",
  "tabler-solar-panel",
  "tabler-sort-0-9",
  "tabler-sort-9-0",
  "tabler-sort-a-z",
  "tabler-sort-ascending-2",
  "tabler-sort-ascending-letters",
  "tabler-sort-ascending-numbers",
  "tabler-sort-ascending",
  "tabler-sort-descending-2",
  "tabler-sort-descending-letters",
  "tabler-sort-descending-numbers",
  "tabler-sort-descending",
  "tabler-sort-z-a",
  "tabler-sos",
  "tabler-soup-off",
  "tabler-soup",
  "tabler-source-code",
  "tabler-space-off",
  "tabler-space",
  "tabler-spacing-horizontal",
  "tabler-spacing-vertical",
  "tabler-spade-filled",
  "tabler-spade",
  "tabler-sparkles",
  "tabler-speakerphone",
  "tabler-speedboat",
  "tabler-sphere-off",
  "tabler-sphere-plus",
  "tabler-sphere",
  "tabler-spider",
  "tabler-spiral-off",
  "tabler-spiral",
  "tabler-sport-billard",
  "tabler-spray",
  "tabler-spy-off",
  "tabler-spy",
  "tabler-sql",
  "tabler-square-0-filled",
  "tabler-square-1-filled",
  "tabler-square-2-filled",
  "tabler-square-3-filled",
  "tabler-square-4-filled",
  "tabler-square-5-filled",
  "tabler-square-6-filled",
  "tabler-square-7-filled",
  "tabler-square-8-filled",
  "tabler-square-9-filled",
  "tabler-square-arrow-down-filled",
  "tabler-square-arrow-down",
  "tabler-square-arrow-left-filled",
  "tabler-square-arrow-left",
  "tabler-square-arrow-right-filled",
  "tabler-square-arrow-right",
  "tabler-square-arrow-up-filled",
  "tabler-square-arrow-up",
  "tabler-square-asterisk-filled",
  "tabler-square-asterisk",
  "tabler-square-check-filled",
  "tabler-square-check",
  "tabler-square-chevron-down-filled",
  "tabler-square-chevron-down",
  "tabler-square-chevron-left-filled",
  "tabler-square-chevron-left",
  "tabler-square-chevron-right-filled",
  "tabler-square-chevron-right",
  "tabler-square-chevron-up-filled",
  "tabler-square-chevron-up",
  "tabler-square-chevrons-down-filled",
  "tabler-square-chevrons-down",
  "tabler-square-chevrons-left-filled",
  "tabler-square-chevrons-left",
  "tabler-square-chevrons-right-filled",
  "tabler-square-chevrons-right",
  "tabler-square-chevrons-up-filled",
  "tabler-square-chevrons-up",
  "tabler-square-dot-filled",
  "tabler-square-dot",
  "tabler-square-f0-filled",
  "tabler-square-f0",
  "tabler-square-f1-filled",
  "tabler-square-f1",
  "tabler-square-f2-filled",
  "tabler-square-f2",
  "tabler-square-f3-filled",
  "tabler-square-f3",
  "tabler-square-f4-filled",
  "tabler-square-f4",
  "tabler-square-f5-filled",
  "tabler-square-f5",
  "tabler-square-f6-filled",
  "tabler-square-f6",
  "tabler-square-f7-filled",
  "tabler-square-f7",
  "tabler-square-f8-filled",
  "tabler-square-f8",
  "tabler-square-f9-filled",
  "tabler-square-f9",
  "tabler-square-filled",
  "tabler-square-forbid-2",
  "tabler-square-forbid",
  "tabler-square-half",
  "tabler-square-key",
  "tabler-square-letter-a",
  "tabler-square-letter-b",
  "tabler-square-letter-c",
  "tabler-square-letter-d",
  "tabler-square-letter-e",
  "tabler-square-letter-f",
  "tabler-square-letter-g",
  "tabler-square-letter-h",
  "tabler-square-letter-i",
  "tabler-square-letter-j",
  "tabler-square-letter-k",
  "tabler-square-letter-l",
  "tabler-square-letter-m",
  "tabler-square-letter-n",
  "tabler-square-letter-o",
  "tabler-square-letter-p",
  "tabler-square-letter-q",
  "tabler-square-letter-r",
  "tabler-square-letter-s",
  "tabler-square-letter-t",
  "tabler-square-letter-u",
  "tabler-square-letter-v",
  "tabler-square-letter-w",
  "tabler-square-letter-x",
  "tabler-square-letter-y",
  "tabler-square-letter-z",
  "tabler-square-minus-filled",
  "tabler-square-minus",
  "tabler-square-number-0",
  "tabler-square-number-1",
  "tabler-square-number-2",
  "tabler-square-number-3",
  "tabler-square-number-4",
  "tabler-square-number-5",
  "tabler-square-number-6",
  "tabler-square-number-7",
  "tabler-square-number-8",
  "tabler-square-number-9",
  "tabler-square-off",
  "tabler-square-plus-2",
  "tabler-square-plus",
  "tabler-square-root-2",
  "tabler-square-root",
  "tabler-square-rotated-filled",
  "tabler-square-rotated-forbid-2",
  "tabler-square-rotated-forbid",
  "tabler-square-rotated-off",
  "tabler-square-rotated",
  "tabler-square-rounded-arrow-down-filled",
  "tabler-square-rounded-arrow-down",
  "tabler-square-rounded-arrow-left-filled",
  "tabler-square-rounded-arrow-left",
  "tabler-square-rounded-arrow-right-filled",
  "tabler-square-rounded-arrow-right",
  "tabler-square-rounded-arrow-up-filled",
  "tabler-square-rounded-arrow-up",
  "tabler-square-rounded-check-filled",
  "tabler-square-rounded-check",
  "tabler-square-rounded-chevron-down-filled",
  "tabler-square-rounded-chevron-down",
  "tabler-square-rounded-chevron-left-filled",
  "tabler-square-rounded-chevron-left",
  "tabler-square-rounded-chevron-right-filled",
  "tabler-square-rounded-chevron-right",
  "tabler-square-rounded-chevron-up-filled",
  "tabler-square-rounded-chevron-up",
  "tabler-square-rounded-chevrons-down-filled",
  "tabler-square-rounded-chevrons-down",
  "tabler-square-rounded-chevrons-left-filled",
  "tabler-square-rounded-chevrons-left",
  "tabler-square-rounded-chevrons-right-filled",
  "tabler-square-rounded-chevrons-right",
  "tabler-square-rounded-chevrons-up-filled",
  "tabler-square-rounded-chevrons-up",
  "tabler-square-rounded-filled",
  "tabler-square-rounded-letter-a",
  "tabler-square-rounded-letter-b",
  "tabler-square-rounded-letter-c",
  "tabler-square-rounded-letter-d",
  "tabler-square-rounded-letter-e",
  "tabler-square-rounded-letter-f",
  "tabler-square-rounded-letter-g",
  "tabler-square-rounded-letter-h",
  "tabler-square-rounded-letter-i",
  "tabler-square-rounded-letter-j",
  "tabler-square-rounded-letter-k",
  "tabler-square-rounded-letter-l",
  "tabler-square-rounded-letter-m",
  "tabler-square-rounded-letter-n",
  "tabler-square-rounded-letter-o",
  "tabler-square-rounded-letter-p",
  "tabler-square-rounded-letter-q",
  "tabler-square-rounded-letter-r",
  "tabler-square-rounded-letter-s",
  "tabler-square-rounded-letter-t",
  "tabler-square-rounded-letter-u",
  "tabler-square-rounded-letter-v",
  "tabler-square-rounded-letter-w",
  "tabler-square-rounded-letter-x",
  "tabler-square-rounded-letter-y",
  "tabler-square-rounded-letter-z",
  "tabler-square-rounded-minus-2",
  "tabler-square-rounded-minus-filled",
  "tabler-square-rounded-minus",
  "tabler-square-rounded-number-0-filled",
  "tabler-square-rounded-number-0",
  "tabler-square-rounded-number-1-filled",
  "tabler-square-rounded-number-1",
  "tabler-square-rounded-number-2-filled",
  "tabler-square-rounded-number-2",
  "tabler-square-rounded-number-3-filled",
  "tabler-square-rounded-number-3",
  "tabler-square-rounded-number-4-filled",
  "tabler-square-rounded-number-4",
  "tabler-square-rounded-number-5-filled",
  "tabler-square-rounded-number-5",
  "tabler-square-rounded-number-6-filled",
  "tabler-square-rounded-number-6",
  "tabler-square-rounded-number-7-filled",
  "tabler-square-rounded-number-7",
  "tabler-square-rounded-number-8-filled",
  "tabler-square-rounded-number-8",
  "tabler-square-rounded-number-9-filled",
  "tabler-square-rounded-number-9",
  "tabler-square-rounded-plus-2",
  "tabler-square-rounded-plus-filled",
  "tabler-square-rounded-plus",
  "tabler-square-rounded-x-filled",
  "tabler-square-rounded-x",
  "tabler-square-rounded",
  "tabler-square-toggle-horizontal",
  "tabler-square-toggle",
  "tabler-square-x-filled",
  "tabler-square-x",
  "tabler-square",
  "tabler-squares-diagonal",
  "tabler-squares-filled",
  "tabler-stack-2",
  "tabler-stack-3",
  "tabler-stack-pop",
  "tabler-stack-push",
  "tabler-stack",
  "tabler-stairs-down",
  "tabler-stairs-up",
  "tabler-stairs",
  "tabler-star-filled",
  "tabler-star-half-filled",
  "tabler-star-half",
  "tabler-star-off",
  "tabler-star",
  "tabler-stars-filled",
  "tabler-stars-off",
  "tabler-stars",
  "tabler-status-change",
  "tabler-steam",
  "tabler-steering-wheel-off",
  "tabler-steering-wheel",
  "tabler-step-into",
  "tabler-step-out",
  "tabler-stereo-glasses",
  "tabler-stethoscope-off",
  "tabler-stethoscope",
  "tabler-sticker",
  "tabler-storm-off",
  "tabler-storm",
  "tabler-stretching-2",
  "tabler-stretching",
  "tabler-strikethrough",
  "tabler-submarine",
  "tabler-subscript",
  "tabler-subtask",
  "tabler-sum-off",
  "tabler-sum",
  "tabler-sun-electricity",
  "tabler-sun-filled",
  "tabler-sun-high",
  "tabler-sun-low",
  "tabler-sun-moon",
  "tabler-sun-off",
  "tabler-sun-wind",
  "tabler-sun",
  "tabler-sunglasses",
  "tabler-sunrise",
  "tabler-sunset-2",
  "tabler-sunset",
  "tabler-superscript",
  "tabler-svg",
  "tabler-swimming",
  "tabler-swipe",
  "tabler-switch-2",
  "tabler-switch-3",
  "tabler-switch-horizontal",
  "tabler-switch-vertical",
  "tabler-switch",
  "tabler-sword-off",
  "tabler-sword",
  "tabler-swords",
  "tabler-table-alias",
  "tabler-table-column",
  "tabler-table-down",
  "tabler-table-export",
  "tabler-table-filled",
  "tabler-table-heart",
  "tabler-table-import",
  "tabler-table-minus",
  "tabler-table-off",
  "tabler-table-options",
  "tabler-table-plus",
  "tabler-table-row",
  "tabler-table-share",
  "tabler-table-shortcut",
  "tabler-table",
  "tabler-tag-off",
  "tabler-tag-starred",
  "tabler-tag",
  "tabler-tags-off",
  "tabler-tags",
  "tabler-tallymark-1",
  "tabler-tallymark-2",
  "tabler-tallymark-3",
  "tabler-tallymark-4",
  "tabler-tallymarks",
  "tabler-tank",
  "tabler-target-arrow",
  "tabler-target-off",
  "tabler-target",
  "tabler-teapot",
  "tabler-telescope-off",
  "tabler-telescope",
  "tabler-temperature-celsius",
  "tabler-temperature-fahrenheit",
  "tabler-temperature-minus",
  "tabler-temperature-off",
  "tabler-temperature-plus",
  "tabler-temperature",
  "tabler-template-off",
  "tabler-template",
  "tabler-tent-off",
  "tabler-tent",
  "tabler-terminal-2",
  "tabler-terminal",
  "tabler-test-pipe-2",
  "tabler-test-pipe-off",
  "tabler-test-pipe",
  "tabler-tex",
  "tabler-text-caption",
  "tabler-text-color",
  "tabler-text-decrease",
  "tabler-text-direction-ltr",
  "tabler-text-direction-rtl",
  "tabler-text-increase",
  "tabler-text-orientation",
  "tabler-text-plus",
  "tabler-text-recognition",
  "tabler-text-resize",
  "tabler-text-scan-2",
  "tabler-text-size",
  "tabler-text-spellcheck",
  "tabler-text-wrap-disabled",
  "tabler-text-wrap",
  "tabler-texture",
  "tabler-theater",
  "tabler-thermometer",
  "tabler-thumb-down-filled",
  "tabler-thumb-down-off",
  "tabler-thumb-down",
  "tabler-thumb-up-filled",
  "tabler-thumb-up-off",
  "tabler-thumb-up",
  "tabler-tic-tac",
  "tabler-ticket-off",
  "tabler-ticket",
  "tabler-tie",
  "tabler-tilde",
  "tabler-tilt-shift-off",
  "tabler-tilt-shift",
  "tabler-time-duration-0",
  "tabler-time-duration-10",
  "tabler-time-duration-15",
  "tabler-time-duration-30",
  "tabler-time-duration-45",
  "tabler-time-duration-5",
  "tabler-time-duration-60",
  "tabler-time-duration-90",
  "tabler-time-duration-off",
  "tabler-timeline-event-exclamation",
  "tabler-timeline-event-filled",
  "tabler-timeline-event-minus",
  "tabler-timeline-event-plus",
  "tabler-timeline-event-text",
  "tabler-timeline-event-x",
  "tabler-timeline-event",
  "tabler-timeline",
  "tabler-tir",
  "tabler-toggle-left",
  "tabler-toggle-right",
  "tabler-toilet-paper-off",
  "tabler-toilet-paper",
  "tabler-toml",
  "tabler-tool",
  "tabler-tools-kitchen-2-off",
  "tabler-tools-kitchen-2",
  "tabler-tools-kitchen-off",
  "tabler-tools-kitchen",
  "tabler-tools-off",
  "tabler-tools",
  "tabler-tooltip",
  "tabler-topology-bus",
  "tabler-topology-complex",
  "tabler-topology-full-hierarchy",
  "tabler-topology-full",
  "tabler-topology-ring-2",
  "tabler-topology-ring-3",
  "tabler-topology-ring",
  "tabler-topology-star-2",
  "tabler-topology-star-3",
  "tabler-topology-star-ring-2",
  "tabler-topology-star-ring-3",
  "tabler-topology-star-ring",
  "tabler-topology-star",
  "tabler-torii",
  "tabler-tornado",
  "tabler-tournament",
  "tabler-tower-off",
  "tabler-tower",
  "tabler-track",
  "tabler-tractor",
  "tabler-trademark",
  "tabler-traffic-cone-off",
  "tabler-traffic-cone",
  "tabler-traffic-lights-off",
  "tabler-traffic-lights",
  "tabler-train",
  "tabler-transfer-in",
  "tabler-transfer-out",
  "tabler-transfer-vertical",
  "tabler-transfer",
  "tabler-transform-filled",
  "tabler-transform",
  "tabler-transition-bottom",
  "tabler-transition-left",
  "tabler-transition-right",
  "tabler-transition-top",
  "tabler-trash-filled",
  "tabler-trash-off",
  "tabler-trash-x-filled",
  "tabler-trash-x",
  "tabler-trash",
  "tabler-treadmill",
  "tabler-tree",
  "tabler-trees",
  "tabler-trekking",
  "tabler-trending-down-2",
  "tabler-trending-down-3",
  "tabler-trending-down",
  "tabler-trending-up-2",
  "tabler-trending-up-3",
  "tabler-trending-up",
  "tabler-triangle-filled",
  "tabler-triangle-inverted-filled",
  "tabler-triangle-inverted",
  "tabler-triangle-minus-2",
  "tabler-triangle-minus",
  "tabler-triangle-off",
  "tabler-triangle-plus-2",
  "tabler-triangle-plus",
  "tabler-triangle-square-circle-filled",
  "tabler-triangle-square-circle",
  "tabler-triangle",
  "tabler-triangles",
  "tabler-trident",
  "tabler-trolley",
  "tabler-trophy-filled",
  "tabler-trophy-off",
  "tabler-trophy",
  "tabler-trowel",
  "tabler-truck-delivery",
  "tabler-truck-loading",
  "tabler-truck-off",
  "tabler-truck-return",
  "tabler-truck",
  "tabler-txt",
  "tabler-typography-off",
  "tabler-typography",
  "tabler-ufo-off",
  "tabler-ufo",
  "tabler-umbrella-filled",
  "tabler-umbrella-off",
  "tabler-umbrella",
  "tabler-underline",
  "tabler-universe",
  "tabler-unlink",
  "tabler-upload",
  "tabler-urgent",
  "tabler-usb",
  "tabler-user-bolt",
  "tabler-user-cancel",
  "tabler-user-check",
  "tabler-user-circle",
  "tabler-user-code",
  "tabler-user-cog",
  "tabler-user-dollar",
  "tabler-user-down",
  "tabler-user-edit",
  "tabler-user-exclamation",
  "tabler-user-filled",
  "tabler-user-heart",
  "tabler-user-hexagon",
  "tabler-user-minus",
  "tabler-user-off",
  "tabler-user-pause",
  "tabler-user-pentagon",
  "tabler-user-pin",
  "tabler-user-plus",
  "tabler-user-question",
  "tabler-user-scan",
  "tabler-user-search",
  "tabler-user-share",
  "tabler-user-shield",
  "tabler-user-square-rounded",
  "tabler-user-square",
  "tabler-user-star",
  "tabler-user-up",
  "tabler-user-x",
  "tabler-user",
  "tabler-users-group",
  "tabler-users-minus",
  "tabler-users-plus",
  "tabler-users",
  "tabler-uv-index",
  "tabler-ux-circle",
  "tabler-vaccine-bottle-off",
  "tabler-vaccine-bottle",
  "tabler-vaccine-off",
  "tabler-vaccine",
  "tabler-vacuum-cleaner",
  "tabler-variable-minus",
  "tabler-variable-off",
  "tabler-variable-plus",
  "tabler-variable",
  "tabler-vector-bezier-2",
  "tabler-vector-bezier-arc",
  "tabler-vector-bezier-circle",
  "tabler-vector-bezier",
  "tabler-vector-off",
  "tabler-vector-spline",
  "tabler-vector-triangle-off",
  "tabler-vector-triangle",
  "tabler-vector",
  "tabler-venus",
  "tabler-versions-filled",
  "tabler-versions-off",
  "tabler-versions",
  "tabler-video-minus",
  "tabler-video-off",
  "tabler-video-plus",
  "tabler-video",
  "tabler-view-360-off",
  "tabler-view-360",
  "tabler-viewfinder-off",
  "tabler-viewfinder",
  "tabler-viewport-narrow",
  "tabler-viewport-wide",
  "tabler-vinyl",
  "tabler-vip-off",
  "tabler-vip",
  "tabler-virus-off",
  "tabler-virus-search",
  "tabler-virus",
  "tabler-vocabulary-off",
  "tabler-vocabulary",
  "tabler-volcano",
  "tabler-volume-2",
  "tabler-volume-3",
  "tabler-volume-off",
  "tabler-volume",
  "tabler-vs",
  "tabler-walk",
  "tabler-wall-off",
  "tabler-wall",
  "tabler-wallet-off",
  "tabler-wallet",
  "tabler-wallpaper-off",
  "tabler-wallpaper",
  "tabler-wand-off",
  "tabler-wand",
  "tabler-wash-dry-1",
  "tabler-wash-dry-2",
  "tabler-wash-dry-3",
  "tabler-wash-dry-a",
  "tabler-wash-dry-dip",
  "tabler-wash-dry-f",
  "tabler-wash-dry-flat",
  "tabler-wash-dry-hang",
  "tabler-wash-dry-off",
  "tabler-wash-dry-p",
  "tabler-wash-dry-shade",
  "tabler-wash-dry-w",
  "tabler-wash-dry",
  "tabler-wash-dryclean-off",
  "tabler-wash-dryclean",
  "tabler-wash-eco",
  "tabler-wash-gentle",
  "tabler-wash-hand",
  "tabler-wash-machine",
  "tabler-wash-off",
  "tabler-wash-press",
  "tabler-wash-temperature-1",
  "tabler-wash-temperature-2",
  "tabler-wash-temperature-3",
  "tabler-wash-temperature-4",
  "tabler-wash-temperature-5",
  "tabler-wash-temperature-6",
  "tabler-wash-tumble-dry",
  "tabler-wash-tumble-off",
  "tabler-wash",
  "tabler-waterpolo",
  "tabler-wave-saw-tool",
  "tabler-wave-sine",
  "tabler-wave-square",
  "tabler-waves-electricity",
  "tabler-webhook-off",
  "tabler-webhook",
  "tabler-weight",
  "tabler-wheel",
  "tabler-wheelchair-off",
  "tabler-wheelchair",
  "tabler-whirl",
  "tabler-wifi-0",
  "tabler-wifi-1",
  "tabler-wifi-2",
  "tabler-wifi-off",
  "tabler-wifi",
  "tabler-wind-electricity",
  "tabler-wind-off",
  "tabler-wind",
  "tabler-windmill-filled",
  "tabler-windmill-off",
  "tabler-windmill",
  "tabler-window-maximize",
  "tabler-window-minimize",
  "tabler-window-off",
  "tabler-window",
  "tabler-windsock",
  "tabler-wiper-wash",
  "tabler-wiper",
  "tabler-woman",
  "tabler-wood",
  "tabler-world-bolt",
  "tabler-world-cancel",
  "tabler-world-check",
  "tabler-world-code",
  "tabler-world-cog",
  "tabler-world-dollar",
  "tabler-world-down",
  "tabler-world-download",
  "tabler-world-exclamation",
  "tabler-world-heart",
  "tabler-world-latitude",
  "tabler-world-longitude",
  "tabler-world-minus",
  "tabler-world-off",
  "tabler-world-pause",
  "tabler-world-pin",
  "tabler-world-plus",
  "tabler-world-question",
  "tabler-world-search",
  "tabler-world-share",
  "tabler-world-star",
  "tabler-world-up",
  "tabler-world-upload",
  "tabler-world-www",
  "tabler-world-x",
  "tabler-world",
  "tabler-wrecking-ball",
  "tabler-writing-off",
  "tabler-writing-sign-off",
  "tabler-writing-sign",
  "tabler-writing",
  "tabler-x",
  "tabler-xbox-a",
  "tabler-xbox-b",
  "tabler-xbox-x",
  "tabler-xbox-y",
  "tabler-xd",
  "tabler-xxx",
  "tabler-yin-yang-filled",
  "tabler-yin-yang",
  "tabler-yoga",
  "tabler-zeppelin-off",
  "tabler-zeppelin",
  "tabler-zip",
  "tabler-zodiac-aquarius",
  "tabler-zodiac-aries",
  "tabler-zodiac-cancer",
  "tabler-zodiac-capricorn",
  "tabler-zodiac-gemini",
  "tabler-zodiac-leo",
  "tabler-zodiac-libra",
  "tabler-zodiac-pisces",
  "tabler-zodiac-sagittarius",
  "tabler-zodiac-scorpio",
  "tabler-zodiac-taurus",
  "tabler-zodiac-virgo",
  "tabler-zoom-cancel",
  "tabler-zoom-check-filled",
  "tabler-zoom-check",
  "tabler-zoom-code",
  "tabler-zoom-exclamation",
  "tabler-zoom-filled",
  "tabler-zoom-in-area-filled",
  "tabler-zoom-in-area",
  "tabler-zoom-in-filled",
  "tabler-zoom-in",
  "tabler-zoom-money",
  "tabler-zoom-out-area",
  "tabler-zoom-out-filled",
  "tabler-zoom-out",
  "tabler-zoom-pan",
  "tabler-zoom-question",
  "tabler-zoom-replace",
  "tabler-zoom-reset",
  "tabler-zoom-scan",
  "tabler-zzz-off",
  "tabler-zzz"
], tablerIcons = new Set(tablerIconNames);

// app/components/LogoIcon.tsx
var import_jsx_runtime24 = require("react/jsx-runtime");
function LogoIcon({ className }) {
  return /* @__PURE__ */ (0, import_jsx_runtime24.jsxs)(
    "svg",
    {
      width: "321",
      height: "282",
      viewBox: "0 0 321 282",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      className,
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(
          "path",
          {
            fillRule: "evenodd",
            clipRule: "evenodd",
            d: "M96.1017 113.4L160.679 4.57764e-05L320.718 281.045H0.638916L65.2159 167.642L110.896 194.382L92.0035 227.561H229.354L160.679 106.965L141.786 140.144L96.1017 113.4Z",
            fill: "url(#paint0_linear_465_1663)"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("defs", { children: /* @__PURE__ */ (0, import_jsx_runtime24.jsxs)(
          "linearGradient",
          {
            id: "paint0_linear_465_1663",
            x1: "320.718",
            y1: "140.687",
            x2: "0.638918",
            y2: "140.687",
            gradientUnits: "userSpaceOnUse",
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("stop", { stopColor: "#41FF54" }),
              /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("stop", { offset: "1", stopColor: "#E7FF52" })
            ]
          }
        ) })
      ]
    }
  );
}

// app/components/primitives/Spinner.tsx
var import_jsx_runtime25 = require("react/jsx-runtime");
function Spinner({
  className,
  color = "blue"
}) {
  let currentColor = {
    blue: {
      light: "rgba(59, 130, 246, 0.4)",
      dark: "rgba(59, 130, 246)"
    },
    white: {
      light: "rgba(255, 255, 255, 0.4)",
      dark: "rgba(255, 255, 255)"
    },
    muted: {
      light: "#1C2433",
      dark: "#3C4B62"
    },
    dark: {
      light: "#15171A",
      dark: "#272A2E"
    }
  }[color];
  return /* @__PURE__ */ (0, import_jsx_runtime25.jsxs)(
    "svg",
    {
      width: "20",
      height: "20",
      viewBox: "0 0 20 20",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      className: cn("animate-spin motion-reduce:hidden", className),
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime25.jsx)("rect", { x: "2", y: "2", width: "16", height: "16", rx: "8", stroke: currentColor.light, strokeWidth: "3" }),
        /* @__PURE__ */ (0, import_jsx_runtime25.jsx)(
          "path",
          {
            d: "M10 18C5.58172 18 2 14.4183 2 10C2 5.58172 5.58172 2 10 2",
            stroke: currentColor.dark,
            strokeWidth: "3",
            strokeLinecap: "round"
          }
        )
      ]
    }
  );
}

// app/components/primitives/tabler-sprite.svg
var tabler_sprite_default = "/build/_assets/tabler-sprite-MOPIXHC6.svg";

// app/components/primitives/NamedIcon.tsx
var import_jsx_runtime26 = require("react/jsx-runtime"), icons = {
  account: (className) => /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(import_solid4.UserCircleIcon, { className: cn("text-charcoal-400", className) }),
  active: (className) => /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(import_solid4.CheckCircleIcon, { className: cn("text-green-500", className) }),
  "arrow-right": (className) => /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(import_solid4.ArrowRightIcon, { className: cn("text-white", className) }),
  "arrow-left": (className) => /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(import_solid4.ArrowLeftIcon, { className: cn("text-white", className) }),
  background: (className) => /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(import_solid4.CloudIcon, { className: cn("text-sky-400", className) }),
  beaker: (className) => /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(import_solid4.BeakerIcon, { className: cn("text-purple-500", className) }),
  bell: (className) => /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(import_solid4.BellAlertIcon, { className: cn("text-amber-500", className) }),
  billing: (className) => /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(import_solid4.CreditCardIcon, { className: cn("text-teal-500", className) }),
  browser: (className) => /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(import_solid4.WindowIcon, { className: cn("text-text-dimmed", className) }),
  calendar: (className) => /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(import_solid4.CalendarDaysIcon, { className: cn("text-purple-500", className) }),
  check: (className) => /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(import_solid4.CheckIcon, { className: cn("text-text-dimmed", className) }),
  "chevron-down": (className) => /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(import_solid4.ChevronDownIcon, { className: cn("text-text-dimmed", className) }),
  "chevron-up": (className) => /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(import_solid4.ChevronUpIcon, { className: cn("text-text-dimmed", className) }),
  "chevron-left": (className) => /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(import_solid4.ChevronLeftIcon, { className: cn("text-text-dimmed", className) }),
  "chevron-right": (className) => /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(import_solid4.ChevronRightIcon, { className: cn("text-text-dimmed", className) }),
  countdown: (className) => /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(import_lucide_react.HourglassIcon, { className: cn("text-amber-400", className) }),
  clock: (className) => /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(import_solid4.ClockIcon, { className: cn("text-cyan-500", className) }),
  close: (className) => /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(import_solid4.XMarkIcon, { className: cn("text-text-dimmed", className) }),
  "connection-alert": (className) => /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(import_solid4.BellAlertIcon, { className: cn("text-amber-500", className) }),
  docs: (className) => /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(import_solid4.BookOpenIcon, { className: cn("text-charcoal-400", className) }),
  dynamic: (className) => /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(DynamicTriggerIcon, { className: cn("text-cyan-500", className) }),
  error: (className) => /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(ErrorIcon, { className: cn("text-rose-500", className) }),
  "external-link": (className) => /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(import_solid3.ArrowTopRightOnSquareIcon, { className: cn("text-text-dimmed", className) }),
  flag: (className) => /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(import_solid4.FlagIcon, { className: cn("text-sky-500", className) }),
  folder: (className) => /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(import_solid4.FolderIcon, { className: cn("text-indigo-600", className) }),
  envelope: (className) => /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(import_solid4.EnvelopeIcon, { className: cn("text-cyan-500", className) }),
  environment: (className) => /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(import_solid4.KeyIcon, { className: cn("text-yellow-500", className) }),
  eye: (className) => /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(import_solid4.EyeIcon, { className: cn("text-blue-500", className) }),
  globe: (className) => /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(import_solid4.GlobeAltIcon, { className: cn("text-fuchsia-600", className) }),
  "hand-raised": (className) => /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(import_solid4.HandRaisedIcon, { className: cn("text-amber-400", className) }),
  heart: (className) => /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(import_solid4.HeartIcon, { className: cn("text-rose-500", className) }),
  house: (className) => /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(import_solid4.HomeIcon, { className: cn("text-text-dimmed", className) }),
  id: (className) => /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(import_solid4.FingerPrintIcon, { className: cn("text-rose-200", className) }),
  inactive: (className) => /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(import_solid4.XCircleIcon, { className: cn("text-rose-500", className) }),
  info: (className) => /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(import_solid3.InformationCircleIcon, { className: cn("text-blue-500", className) }),
  integration: (className) => /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(import_solid4.SquaresPlusIcon, { className: cn("text-teal-500", className) }),
  "invite-member": (className) => /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(import_solid4.UserPlusIcon, { className: cn("text-indigo-500", className) }),
  job: (className) => /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(import_solid4.WrenchScrewdriverIcon, { className: cn("text-indigo-500", className) }),
  key: (className) => /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(import_solid4.KeyIcon, { className: cn("text-amber-400", className) }),
  lightbulb: (className) => /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(import_solid4.LightBulbIcon, { className: cn("text-amber-400", className) }),
  "clipboard-checked": (className) => /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(import_solid4.ClipboardDocumentCheckIcon, { className: cn("text-text-dimmed", className) }),
  list: (className) => /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(import_solid4.ListBulletIcon, { className: cn("text-charcoal-400", className) }),
  log: (className) => /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(import_solid4.ChatBubbleLeftEllipsisIcon, { className: cn("text-charcoal-400", className) }),
  "logo-icon": (className) => /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(LogoIcon, { className: cn(className) }),
  organization: (className) => /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(import_solid4.BuildingOffice2Icon, { className: cn("text-fuchsia-600", className) }),
  plus: (className) => /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(import_solid4.PlusIcon, { className: cn("text-green-600", className) }),
  "plus-small": (className) => /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(import_solid4.PlusSmallIcon, { className: cn("text-green-600", className) }),
  property: (className) => /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(import_solid4.Cog8ToothIcon, { className: cn("text-charcoal-600", className) }),
  pulse: (className) => /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(import_lucide_react.ActivityIcon, { className: cn("text-green-600", className) }),
  "qr-code": (className) => /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(import_solid4.QrCodeIcon, { className: cn("text-amber-400", className) }),
  refresh: (className) => /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(import_solid4.ArrowPathIcon, { className: cn("text-text-bright", className) }),
  sapling: (className) => /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(SaplingIcon, { className: cn("text-green-500", className) }),
  search: (className) => /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(import_solid4.MagnifyingGlassIcon, { className: cn("text-text-dimmed", className) }),
  settings: (className) => /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(import_solid4.Cog8ToothIcon, { className: cn("text-charcoal-600", className) }),
  spinner: (className) => /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(Spinner, { className, color: "blue" }),
  "spinner-white": (className) => /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(Spinner, { className, color: "white" }),
  "spinner-dark": (className) => /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(Spinner, { className, color: "dark" }),
  squares: (className) => /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(import_solid4.Square2StackIcon, { className: cn("text-text-dimmed", className) }),
  star: (className) => /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(import_solid4.StarIcon, { className: cn("text-yellow-500", className) }),
  stop: (className) => /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(import_solid3.StopIcon, { className: cn("text-rose-500", className) }),
  team: (className) => /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(import_solid4.UserGroupIcon, { className: cn("text-blue-500", className) }),
  "trash-can": (className) => /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(import_solid4.TrashIcon, { className: cn("text-rose-500", className) }),
  tree: (className) => /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(OneTreeIcon, { className: cn("text-green-500", className) }),
  trees: (className) => /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(TwoTreesIcon, { className: cn("text-green-500", className) }),
  trigger: (className) => /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(import_solid4.BoltIcon, { className: cn("text-orange-500", className) }),
  user: (className) => /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(import_solid4.UserIcon, { className: cn("text-blue-600", className) }),
  warning: (className) => /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(import_solid3.ExclamationTriangleIcon, { className: cn("text-amber-400", className) }),
  //triggers
  "custom-event": (className) => /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(import_solid4.CodeBracketSquareIcon, { className: cn("text-toxic-600", className) }),
  "register-source": (className) => /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(import_solid4.GlobeAltIcon, { className: cn("text-sky-500", className) }),
  "schedule-interval": (className) => /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(import_solid4.ClockIcon, { className: cn("text-sky-500", className) }),
  "schedule-cron": (className) => /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(ScheduleIcon, { className: cn("text-sky-500", className) }),
  "schedule-dynamic": (className) => /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(ScheduleIcon, { className: cn("text-sky-500", className) }),
  webhook: (className) => /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(WebhookIcon, { className: cn("text-pink-500", className) }),
  endpoint: (className) => /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(EndpointIcon, { className: cn("text-blue-500", className) }),
  "http-endpoint": (className) => /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(import_solid4.GlobeAltIcon, { className: cn("text-blue-500", className) }),
  runs: (className) => /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(RunsIcon, { className: cn("text-lime-500", className) })
}, iconNames = Object.keys(icons);
function NamedIcon({
  name,
  className,
  fallback
}) {
  return Object.keys(icons).includes(name) ? icons[name](className) : (0, import_companyicons.hasIcon)(name) ? /* @__PURE__ */ (0, import_jsx_runtime26.jsx)("span", { className: cn("grid aspect-square min-h-fit place-items-center", className), children: /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(
    import_companyicons.CompanyIcon,
    {
      name,
      className: "h-full w-full p-[7%]",
      variant: "light",
      style: {
        shapeRendering: "geometricPrecision"
      }
    }
  ) }) : tablerIcons.has("tabler-" + name) ? /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(TablerIcon, { name: "tabler-" + name, className }) : name.startsWith("tabler-") && tablerIcons.has(name) ? /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(TablerIcon, { name, className }) : name === "supabase-management" ? /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(NamedIcon, { name: "supabase", className }) : fallback || /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(import_solid3.StopIcon, { className });
}
function NamedIconInBox({
  name,
  className,
  fallback,
  iconClassName
}) {
  return /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(
    "div",
    {
      className: cn(
        "grid place-content-center rounded-sm border border-charcoal-750 bg-charcoal-850",
        className
      ),
      children: /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(NamedIcon, { name, fallback, className: cn("h-6 w-6", iconClassName) })
    }
  );
}
function TablerIcon({ name, className }) {
  return /* @__PURE__ */ (0, import_jsx_runtime26.jsx)("svg", { className: cn("stroke-[1.5]", className), children: /* @__PURE__ */ (0, import_jsx_runtime26.jsx)("use", { xlinkHref: `${tabler_sprite_default}#${name}` }) });
}

// app/components/primitives/ShortcutKey.tsx
var import_react8 = require("react");
var import_solid5 = require("@heroicons/react/20/solid"), import_jsx_runtime27 = require("react/jsx-runtime"), variants2 = {
  small: "text-[0.6rem] font-medium min-w-[17px] rounded-[2px] px-1 ml-1 -mr-0.5 grid place-content-center border border-dimmed/40 text-text-dimmed group-hover:text-text-bright/80 group-hover:border-dimmed/60 transition uppercase",
  medium: "text-[0.75rem] font-medium min-w-[17px] rounded-[2px] px-1 ml-1 -mr-0.5 grid place-content-center border border-dimmed/40 text-text-dimmed group-hover:text-text-bright/80 group-hover:border-dimmed/60 transition uppercase"
};
function ShortcutKey({ shortcut: shortcut2, variant: variant3, className }) {
  let { platform } = useOperatingSystem(), isMac = platform === "mac", relevantShortcut = "mac" in shortcut2 ? isMac ? shortcut2.mac : shortcut2.windows : shortcut2, modifiers = relevantShortcut.modifiers ?? [], character = keyString(relevantShortcut.key, isMac, variant3);
  return /* @__PURE__ */ (0, import_jsx_runtime27.jsxs)("span", { className: cn(variants2[variant3], className), children: [
    modifiers.map((k) => /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(import_react8.Fragment, { children: modifierString(k, isMac) }, k)),
    character
  ] });
}
function keyString(key, isMac, size) {
  key = key.toLowerCase();
  let className = size === "small" ? "w-2.5 h-4" : "w-3 h-5";
  switch (key) {
    case "enter":
      return isMac ? "\u21B5" : key;
    case "arrowdown":
      return /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(import_solid5.ChevronDownIcon, { className });
    case "arrowup":
      return /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(import_solid5.ChevronUpIcon, { className });
    case "arrowleft":
      return /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(import_solid5.ChevronLeftIcon, { className });
    case "arrowright":
      return /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(import_solid5.ChevronRightIcon, { className });
    default:
      return key;
  }
}
function modifierString(modifier, isMac) {
  switch (modifier) {
    case "alt":
      return isMac ? "\u2325" : "Alt+";
    case "ctrl":
      return isMac ? "\u2303" : "Ctrl+";
    case "meta":
      return isMac ? "\u2318" : "\u229E+";
    case "shift":
      return isMac ? "\u21E7" : "Shift+";
    case "mod":
      return isMac ? "\u2318" : "Ctrl+";
  }
}

// app/components/primitives/Buttons.tsx
var import_jsx_runtime28 = require("react/jsx-runtime"), sizes = {
  small: {
    button: "h-6 px-2.5 text-xs",
    icon: "h-3.5 -mx-1",
    iconSpacing: "gap-x-2.5",
    shortcutVariant: "small",
    shortcut: "-ml-0.5 -mr-1.5 justify-self-center"
  },
  medium: {
    button: "h-8 px-3 text-sm",
    icon: "h-4 -mx-1",
    iconSpacing: "gap-x-2.5",
    shortcutVariant: "medium",
    shortcut: "-ml-0.5 -mr-1.5 rounded justify-self-center"
  },
  large: {
    button: "h-10 px-2 text-base font-medium",
    icon: "h-5",
    iconSpacing: "gap-x-0.5",
    shortcutVariant: "medium",
    shortcut: "ml-1.5 -mr-0.5"
  },
  "extra-large": {
    button: "h-12 px-2 text-base font-medium",
    icon: "h-5",
    iconSpacing: "gap-x-0.5",
    shortcutVariant: "medium",
    shortcut: "ml-1.5 -mr-0.5"
  }
}, theme = {
  primary: {
    textColor: "text-charcoal-900 group-hover:text-charcoal-900 transition group-disabled:text-charcoal-900",
    button: "bg-primary group-hover:bg-apple-200 group-disabled:opacity-50 group-disabled:bg-primary group-disabled:pointer-events-none",
    shortcut: "border-black/40 text-charcoal-900 group-hover:border-black/60 group-hover:text-charcoal-900"
  },
  secondary: {
    textColor: "text-secondary group-hover:text-secondary transition group-disabled:text-secondary",
    button: "bg-transparent border border-secondary group-hover:border-secondary group-hover:bg-secondary/10 group-disabled:opacity-30 group-disabled:border-secondary group-disabled:bg-transparent group-disabled:pointer-events-none",
    shortcut: "border-secondary/30 text-secondary group-hover:text-text-bright/80 group-hover:border-dimmed/60"
  },
  tertiary: {
    textColor: "text-text-bright transition group-disabled:text-text-dimmed/80",
    button: "bg-tertiary group-hover:bg-charcoal-600 group-disabled:bg-tertiary group-disabled:opacity-60 group-disabled:pointer-events-none",
    shortcut: "border-text-dimmed/40 text-text-dimmed group-hover:text-text-bright group-hover:border-text-dimmed"
  },
  minimal: {
    textColor: "text-text-dimmed group-hover:text-text-bright transition group-disabled:text-text-dimmed/80",
    button: "bg-transparent group-hover:bg-tertiary disabled:opacity-50 group-disabled:bg-transparent group-disabled:pointer-events-none",
    shortcut: "border-dimmed/40 text-text-dimmed group-hover:text-text-bright/80 group-hover:border-dimmed/60"
  },
  danger: {
    textColor: "text-text-bright group-hover:text-white transition group-disabled:text-text-bright/80",
    button: "bg-error group-hover:bg-rose-500 disabled:opacity-50 group-disabled:bg-error group-disabled:pointer-events-none",
    shortcut: "border-text-bright text-text-bright group-hover:border-bright/60"
  }
};
function createVariant(sizeName, themeName) {
  return {
    textColor: theme[themeName].textColor,
    button: cn(sizes[sizeName].button, theme[themeName].button),
    icon: sizes[sizeName].icon,
    iconSpacing: sizes[sizeName].iconSpacing,
    shortcutVariant: sizes[sizeName].shortcutVariant,
    shortcut: cn(sizes[sizeName].shortcut, theme[themeName].shortcut)
  };
}
var variant = {
  "primary/small": createVariant("small", "primary"),
  "primary/medium": createVariant("medium", "primary"),
  "primary/large": createVariant("large", "primary"),
  "primary/extra-large": createVariant("extra-large", "primary"),
  "secondary/small": createVariant("small", "secondary"),
  "secondary/medium": createVariant("medium", "secondary"),
  "secondary/large": createVariant("large", "secondary"),
  "secondary/extra-large": createVariant("extra-large", "secondary"),
  "tertiary/small": createVariant("small", "tertiary"),
  "tertiary/medium": createVariant("medium", "tertiary"),
  "tertiary/large": createVariant("large", "tertiary"),
  "tertiary/extra-large": createVariant("extra-large", "tertiary"),
  "minimal/small": createVariant("small", "minimal"),
  "minimal/medium": createVariant("medium", "minimal"),
  "minimal/large": createVariant("large", "minimal"),
  "minimal/extra-large": createVariant("extra-large", "minimal"),
  "danger/small": createVariant("small", "danger"),
  "danger/medium": createVariant("medium", "danger"),
  "danger/large": createVariant("large", "danger"),
  "danger/extra-large": createVariant("extra-large", "danger"),
  "menu-item": {
    textColor: "text-text-bright px-1",
    button: "h-9 px-[0.475rem] text-sm rounded-sm bg-transparent group-hover:bg-charcoal-800 transition",
    icon: "h-5",
    iconSpacing: "gap-x-0.5",
    shortcutVariant: void 0,
    shortcut: void 0
  },
  "small-menu-item": {
    textColor: "text-text-bright",
    button: "h-[1.8rem] px-[0.4rem] text-2sm rounded-sm text-text-dimmed bg-transparent group-hover:bg-charcoal-850 transition",
    icon: "h-4",
    iconSpacing: "gap-x-1.5",
    shortcutVariant: void 0,
    shortcut: void 0
  },
  "small-menu-sub-item": {
    textColor: "text-text-dimmed",
    button: "h-[1.8rem] px-[0.5rem] ml-5 text-2sm rounded-sm text-text-dimmed bg-transparent group-hover:bg-charcoal-850 transition",
    icon: void 0,
    iconSpacing: void 0,
    shortcutVariant: void 0,
    shortcut: void 0
  }
}, allVariants = {
  $all: "font-normal text-center font-sans justify-center items-center shrink-0 transition duration-150 rounded-[3px] select-none group-focus:outline-none group-disabled:opacity-75 group-disabled:pointer-events-none",
  variant
};
function ButtonContent(props) {
  let {
    children: text,
    LeadingIcon,
    TrailingIcon,
    trailingIconClassName,
    leadingIconClassName,
    shortcut: shortcut2,
    fullWidth,
    textAlignLeft,
    className
  } = props, variation = allVariants.variant[props.variant], btnClassName = cn(allVariants.$all, variation.button), iconClassName = variation.icon, iconSpacingClassName = variation.iconSpacing, shortcutClassName = variation.shortcut, textColorClassName = variation.textColor;
  return /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("div", { className: cn("flex", fullWidth ? "" : "w-fit text-xxs", btnClassName, className), children: /* @__PURE__ */ (0, import_jsx_runtime28.jsxs)(
    "div",
    {
      className: cn(
        textAlignLeft ? "text-left" : "justify-center",
        "flex w-full items-center",
        iconSpacingClassName
      ),
      children: [
        LeadingIcon && (typeof LeadingIcon == "string" ? /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(
          NamedIcon,
          {
            name: LeadingIcon,
            className: cn(iconClassName, leadingIconClassName, "shrink-0 justify-start")
          }
        ) : /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(
          LeadingIcon,
          {
            className: cn(
              iconClassName,
              textColorClassName,
              leadingIconClassName,
              "shrink-0 justify-start"
            )
          }
        )),
        text && (typeof text == "string" ? /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("span", { className: cn("mx-auto grow self-center truncate", textColorClassName), children: text }) : /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(import_jsx_runtime28.Fragment, { children: text })),
        TrailingIcon && (typeof TrailingIcon == "string" ? /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(
          NamedIcon,
          {
            name: TrailingIcon,
            className: cn(iconClassName, trailingIconClassName, "shrink-0 justify-end")
          }
        ) : /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(
          TrailingIcon,
          {
            className: cn(
              iconClassName,
              textColorClassName,
              trailingIconClassName,
              "shrink-0 justify-end"
            )
          }
        )),
        shortcut2 && /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(
          ShortcutKey,
          {
            className: cn(shortcutClassName),
            shortcut: shortcut2,
            variant: variation.shortcutVariant ?? "medium"
          }
        )
      ]
    }
  ) });
}
var Button = (0, import_react10.forwardRef)(
  ({ type, disabled, onClick, ...props }, ref) => {
    let innerRef = (0, import_react10.useRef)(null);
    return (0, import_react10.useImperativeHandle)(ref, () => innerRef.current), props.shortcut && useShortcutKeys({
      shortcut: props.shortcut,
      action: () => {
        innerRef.current && innerRef.current.click();
      },
      disabled
    }), /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(
      "button",
      {
        className: cn("group outline-none", props.fullWidth ? "w-full" : ""),
        type,
        disabled,
        onClick,
        name: props.name,
        value: props.value,
        ref: innerRef,
        form: props.form,
        children: /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(ButtonContent, { ...props })
      }
    );
  }
), LinkButton = ({
  to,
  onClick,
  onMouseDown,
  onMouseEnter,
  onMouseLeave,
  download,
  disabled = !1,
  ...props
}) => {
  let innerRef = (0, import_react10.useRef)(null);
  return props.shortcut && useShortcutKeys({
    shortcut: props.shortcut,
    action: () => {
      innerRef.current && innerRef.current.click();
    }
  }), disabled ? /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(
    "div",
    {
      className: cn(
        "group pointer-events-none cursor-default opacity-40 outline-none",
        props.fullWidth ? "w-full" : ""
      ),
      children: /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(ButtonContent, { ...props })
    }
  ) : to.toString().startsWith("http") || to.toString().startsWith("/resources") ? /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(
    ExtLink,
    {
      href: to.toString(),
      ref: innerRef,
      className: cn("group outline-none", props.fullWidth ? "w-full" : ""),
      onClick,
      onMouseDown,
      onMouseEnter,
      onMouseLeave,
      download,
      children: /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(ButtonContent, { ...props })
    }
  ) : /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(
    import_react9.Link,
    {
      to,
      ref: innerRef,
      className: cn("group outline-none", props.fullWidth ? "w-full" : ""),
      onClick,
      onMouseDown,
      onMouseEnter,
      onMouseLeave,
      download,
      children: /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(ButtonContent, { ...props })
    }
  );
};
var ExtLink = (0, import_react10.forwardRef)(
  ({ className, href, children, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(
    "a",
    {
      className: cn(className),
      target: "_blank",
      rel: "noopener noreferrer",
      href,
      ref,
      ...props,
      children
    }
  )
);

// app/components/primitives/Headers.tsx
var import_jsx_runtime29 = require("react/jsx-runtime"), headerVariants = {
  header1: {
    text: "font-sans text-2xl leading-5 md:leading-6 lg:leading-7 font-medium",
    spacing: "mb-2"
  },
  header2: {
    text: "font-sans text-base leading-6 font-medium",
    spacing: "mb-2"
  },
  header3: {
    text: "font-sans text-sm leading-5 font-medium",
    spacing: "mb-2"
  }
}, textColorVariants = {
  bright: "text-text-bright",
  dimmed: "text-text-dimmed"
};
function Header1({
  className,
  children,
  spacing = !1,
  textColor = "bright"
}) {
  return /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(
    "h1",
    {
      className: cn(
        headerVariants.header1.text,
        spacing === !0 && headerVariants.header1.spacing,
        textColor === "bright" ? textColorVariants.bright : textColorVariants.dimmed,
        className
      ),
      children
    }
  );
}
function Header2({
  className,
  children,
  spacing = !1,
  textColor = "bright"
}) {
  return /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(
    "h2",
    {
      className: cn(
        headerVariants.header2.text,
        spacing === !0 && headerVariants.header2.spacing,
        textColor === "bright" ? textColorVariants.bright : textColorVariants.dimmed,
        className
      ),
      children
    }
  );
}
function Header3({
  className,
  children,
  spacing = !1,
  textColor = "bright"
}) {
  return /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(
    "h3",
    {
      className: cn(
        headerVariants.header3.text,
        spacing === !0 && headerVariants.header3.spacing,
        textColor === "bright" ? textColorVariants.bright : textColorVariants.dimmed,
        className
      ),
      children
    }
  );
}

// app/utils/httpErrors.ts
function friendlyErrorDisplay(statusCode, statusText) {
  switch (statusCode) {
    case 400:
      return {
        title: "400: Bad request",
        message: statusText ?? "The request was invalid."
      };
    case 404:
      return {
        title: "404: Page not found",
        message: statusText ?? "The page you're looking for doesn't exist."
      };
    case 500:
      return {
        title: "500: Server error",
        message: statusText ?? "Something went wrong on our end. Please try again later."
      };
    default:
      return {
        title: `${statusCode}: Error`,
        message: statusText ?? "An error occurred."
      };
  }
}

// app/components/ErrorDisplay.tsx
var import_jsx_runtime30 = require("react/jsx-runtime");
function RouteErrorDisplay(options2) {
  let error = (0, import_react11.useRouteError)();
  return /* @__PURE__ */ (0, import_jsx_runtime30.jsx)(import_jsx_runtime30.Fragment, { children: (0, import_react11.isRouteErrorResponse)(error) ? /* @__PURE__ */ (0, import_jsx_runtime30.jsx)(
    ErrorDisplay,
    {
      title: friendlyErrorDisplay(error.status, error.statusText).title,
      message: error.data.message ?? friendlyErrorDisplay(error.status, error.statusText).message,
      ...options2
    }
  ) : error instanceof Error ? /* @__PURE__ */ (0, import_jsx_runtime30.jsx)(ErrorDisplay, { title: error.name, message: error.message, ...options2 }) : /* @__PURE__ */ (0, import_jsx_runtime30.jsx)(ErrorDisplay, { title: "Oops", message: JSON.stringify(error), ...options2 }) });
}
function ErrorDisplay({ title: title2, message, button }) {
  return /* @__PURE__ */ (0, import_jsx_runtime30.jsxs)("div", { className: "p-4", children: [
    /* @__PURE__ */ (0, import_jsx_runtime30.jsx)(Header1, { className: "mb-4 border-b border-charcoal-800 pb-4", children: title2 }),
    message && /* @__PURE__ */ (0, import_jsx_runtime30.jsx)(Header3, { children: message }),
    /* @__PURE__ */ (0, import_jsx_runtime30.jsx)(LinkButton, { to: button ? button.to : "/", variant: "primary/medium", className: "mt-8", children: button ? button.title : "Home" })
  ] });
}

// ../../node_modules/.pnpm/highlight.run@7.3.4/node_modules/highlight.run/dist/index.es.js
var __defProp2 = Object.defineProperty, __defProps = Object.defineProperties, __getOwnPropDescs = Object.getOwnPropertyDescriptors, __getOwnPropSymbols = Object.getOwnPropertySymbols, __hasOwnProp2 = Object.prototype.hasOwnProperty, __propIsEnum = Object.prototype.propertyIsEnumerable, __defNormalProp = (obj, key, value) => key in obj ? __defProp2(obj, key, { enumerable: !0, configurable: !0, writable: !0, value }) : obj[key] = value, __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    __hasOwnProp2.call(b, prop) && __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b))
      __propIsEnum.call(b, prop) && __defNormalProp(a, prop, b[prop]);
  return a;
}, __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b)), __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    __hasOwnProp2.call(source, prop) && exclude.indexOf(prop) < 0 && (target[prop] = source[prop]);
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source))
      exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop) && (target[prop] = source[prop]);
  return target;
}, __publicField = (obj, key, value) => (__defNormalProp(obj, typeof key != "symbol" ? key + "" : key, value), value), __async = (__this, __arguments, generator) => new Promise((resolve, reject) => {
  var fulfilled = (value) => {
    try {
      step(generator.next(value));
    } catch (e) {
      reject(e);
    }
  }, rejected = (value) => {
    try {
      step(generator.throw(value));
    } catch (e) {
      reject(e);
    }
  }, step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
  step((generator = generator.apply(__this, __arguments)).next());
}), setupAmplitudeIntegration = ({
  apiKey
}) => {
  (function(e, t) {
    var n = e.amplitude || { _q: [], _iq: {} }, r = t.createElement("script");
    r.type = "text/javascript", r.integrity = "sha384-+EO59vL/X7v6VE2s6/F4HxfHlK0nDUVWKVg8K9oUlvffAeeaShVBmbORTC2D3UF+", r.crossOrigin = "anonymous", r.async = !0, r.src = "https://cdn.amplitude.com/libs/amplitude-8.17.0-min.gz.js", r.onload = function() {
      e.amplitude.runQueuedFunctions || console.log("[Amplitude] Error: could not load SDK"), amplitude.getInstance().init(apiKey);
    };
    var i = t.getElementsByTagName("script")[0];
    i.parentNode.insertBefore(r, i);
    function s(e2, t2) {
      e2.prototype[t2] = function() {
        return this._q.push(
          [t2].concat(Array.prototype.slice.call(arguments, 0))
        ), this;
      };
    }
    for (var o = function() {
      return this._q = [], this;
    }, a = [
      "add",
      "append",
      "clearAll",
      "prepend",
      "set",
      "setOnce",
      "unset",
      "preInsert",
      "postInsert",
      "remove"
    ], c = 0; c < a.length; c++)
      s(o, a[c]);
    n.Identify = o;
    for (var u = function() {
      return this._q = [], this;
    }, l = [
      "setProductId",
      "setQuantity",
      "setPrice",
      "setRevenueType",
      "setEventProperties"
    ], p = 0; p < l.length; p++)
      s(u, l[p]);
    n.Revenue = u;
    var d = [
      "init",
      "logEvent",
      "logRevenue",
      "setUserId",
      "setUserProperties",
      "setOptOut",
      "setVersionName",
      "setDomain",
      "setDeviceId",
      "enableTracking",
      "setGlobalUserProperties",
      "identify",
      "clearUserProperties",
      "setGroup",
      "logRevenueV2",
      "regenerateDeviceId",
      "groupIdentify",
      "onInit",
      "logEventWithTimestamp",
      "logEventWithGroups",
      "setSessionId",
      "resetSessionId"
    ];
    function v(e2) {
      function t2(t3) {
        e2[t3] = function() {
          e2._q.push(
            [t3].concat(Array.prototype.slice.call(arguments, 0))
          );
        };
      }
      for (var n2 = 0; n2 < d.length; n2++)
        t2(d[n2]);
    }
    v(n), n.getInstance = function(e2) {
      return e2 = (!e2 || e2.length === 0 ? "$default_instance" : e2).toLowerCase(), Object.prototype.hasOwnProperty.call(n._iq, e2) || (n._iq[e2] = { _q: [] }, v(n._iq[e2])), n._iq[e2];
    }, e.amplitude = n;
  })(window, document);
}, setupMixpanelIntegration = ({
  projectToken
}) => {
  if (window.mixpanel)
    return;
  (function(f, b) {
    if (!b.__SV) {
      var i, h;
      window.mixpanel = b, b._i = [], b.init = function(e, f2, c) {
        function g2(a2, d) {
          var b2 = d.split(".");
          b2.length == 2 && (a2 = a2[b2[0]], d = b2[1]), a2[d] = function() {
            a2.push(
              [d].concat(
                Array.prototype.slice.call(arguments, 0)
              )
            );
          };
        }
        var a = b;
        for (typeof c < "u" ? a = b[c] = [] : c = "mixpanel", a.people = a.people || [], a.toString = function(a2) {
          var d = "mixpanel";
          return c !== "mixpanel" && (d += "." + c), a2 || (d += " (stub)"), d;
        }, a.people.toString = function() {
          return a.toString(1) + ".people (stub)";
        }, i = "disable time_event track track_pageview track_links track_forms track_with_groups add_group set_group remove_group register register_once alias unregister identify name_tag set_config reset opt_in_tracking opt_out_tracking has_opted_in_tracking has_opted_out_tracking clear_opt_in_out_tracking start_batch_senders people.set people.set_once people.unset people.increment people.append people.union people.track_charge people.clear_charges people.delete_user people.remove".split(
          " "
        ), h = 0; h < i.length; h++)
          g2(a, i[h]);
        var j = "set set_once union unset remove delete".split(" ");
        a.get_group = function() {
          function b2(c3) {
            d[c3] = function() {
              call2_args = arguments, call2 = [c3].concat(
                Array.prototype.slice.call(call2_args, 0)
              ), a.push([e2, call2]);
            };
          }
          for (var d = {}, e2 = ["get_group"].concat(
            Array.prototype.slice.call(arguments, 0)
          ), c2 = 0; c2 < j.length; c2++)
            b2(j[c2]);
          return d;
        }, b._i.push([e, f2, c]);
      }, b.__SV = 1.2;
    }
  })(document, window.mixpanel || []);
  let script2 = document.createElement("script");
  script2.src = MixpanelBundle, document.head.appendChild(script2), script2.addEventListener("load", () => {
    var _a;
    (_a = window.mixpanel) == null || _a.init(projectToken);
  });
}, MixpanelBundle = "https://cdn.mxpnl.com/libs/mixpanel-2-latest.min.js";
function patch(source, name, replacement) {
  try {
    if (!(name in source))
      return () => {
      };
    let original = source[name], wrapped = replacement(original);
    return typeof wrapped == "function" && (wrapped.prototype = wrapped.prototype || {}, Object.defineProperties(wrapped, {
      __rrweb_original__: {
        enumerable: !1,
        value: original
      }
    })), source[name] = wrapped, () => {
      source[name] = original;
    };
  } catch {
    return () => {
    };
  }
}
function pathToSelector(node) {
  if (!node || !node.outerHTML)
    return "";
  let path2 = "";
  for (; node.parentElement; ) {
    let name = node.localName;
    if (!name)
      break;
    name = name.toLowerCase();
    let parent = node.parentElement, domSiblings = [];
    if (parent.children && parent.children.length > 0)
      for (let i = 0; i < parent.children.length; i++) {
        let sibling = parent.children[i];
        sibling.localName && sibling.localName.toLowerCase && sibling.localName.toLowerCase() === name && domSiblings.push(sibling);
      }
    domSiblings.length > 1 && (name += ":eq(" + domSiblings.indexOf(node) + ")"), path2 = name + (path2 ? ">" + path2 : ""), node = parent;
  }
  return path2;
}
function isObject(obj) {
  return Object.prototype.toString.call(obj) === "[object Object]";
}
function isObjTooDeep(obj, limit) {
  if (limit === 0)
    return !0;
  let keys = Object.keys(obj);
  for (let key of keys)
    if (isObject(obj[key]) && isObjTooDeep(obj[key], limit - 1))
      return !0;
  return !1;
}
function stringify$2(obj, stringifyOptions) {
  let options2 = {
    numOfKeysLimit: 50,
    depthOfLimit: 4
  };
  Object.assign(options2, stringifyOptions);
  let stack = [], keys = [];
  return JSON.stringify(obj, function(key, value) {
    if (stack.length > 0) {
      let thisPos = stack.indexOf(this);
      ~thisPos ? stack.splice(thisPos + 1) : stack.push(this), ~thisPos ? keys.splice(thisPos, 1 / 0, key) : keys.push(key), ~stack.indexOf(value) && (stack[0] === value ? value = "[Circular ~]" : value = "[Circular ~." + keys.slice(0, stack.indexOf(value)).join(".") + "]");
    } else
      stack.push(value);
    if (value == null)
      return value;
    if (shouldIgnore(value))
      return toString(value);
    if (value instanceof Event) {
      let eventResult = {};
      for (let eventKey in value) {
        let eventValue = value[eventKey];
        Array.isArray(eventValue) ? eventResult[eventKey] = pathToSelector(
          eventValue.length ? eventValue[0] : null
        ) : eventResult[eventKey] = eventValue;
      }
      return eventResult;
    } else {
      if (value instanceof Node)
        return value instanceof HTMLElement ? value ? value.outerHTML : "" : value.nodeName;
      if (value instanceof Error)
        return value.name + ": " + value.message;
    }
    return value;
  });
  function shouldIgnore(_obj) {
    return isObject(_obj) && Object.keys(_obj).length > options2.numOfKeysLimit || typeof _obj == "function" ? !0 : _obj instanceof Event && _obj.isTrusted === !1 ? Object.keys(_obj).length === 1 : !!(isObject(_obj) && isObjTooDeep(_obj, options2.depthOfLimit));
  }
  function toString(_obj) {
    let str = _obj.toString();
    return options2.stringLengthLimit && str.length > options2.stringLengthLimit && (str = `${str.slice(0, options2.stringLengthLimit)}...`), str;
  }
}
var commonjsGlobal = typeof globalThis < "u" ? globalThis : typeof window < "u" ? window : typeof global < "u" ? global : typeof self < "u" ? self : {};
function getDefaultExportFromCjs(x) {
  return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, "default") ? x.default : x;
}
var errorStackParser = { exports: {} }, stackframe = { exports: {} }, hasRequiredStackframe;
function requireStackframe() {
  return hasRequiredStackframe || (hasRequiredStackframe = 1, function(module2, exports) {
    (function(root, factory2) {
      module2.exports = factory2();
    })(commonjsGlobal, function() {
      function _isNumber(n) {
        return !isNaN(parseFloat(n)) && isFinite(n);
      }
      function _capitalize(str) {
        return str.charAt(0).toUpperCase() + str.substring(1);
      }
      function _getter(p) {
        return function() {
          return this[p];
        };
      }
      var booleanProps = ["isConstructor", "isEval", "isNative", "isToplevel"], numericProps = ["columnNumber", "lineNumber"], stringProps = ["fileName", "functionName", "source"], arrayProps = ["args"], objectProps = ["evalOrigin"], props = booleanProps.concat(numericProps, stringProps, arrayProps, objectProps);
      function StackFrame(obj) {
        if (obj)
          for (var i2 = 0; i2 < props.length; i2++)
            obj[props[i2]] !== void 0 && this["set" + _capitalize(props[i2])](obj[props[i2]]);
      }
      StackFrame.prototype = {
        getArgs: function() {
          return this.args;
        },
        setArgs: function(v) {
          if (Object.prototype.toString.call(v) !== "[object Array]")
            throw new TypeError("Args must be an Array");
          this.args = v;
        },
        getEvalOrigin: function() {
          return this.evalOrigin;
        },
        setEvalOrigin: function(v) {
          if (v instanceof StackFrame)
            this.evalOrigin = v;
          else if (v instanceof Object)
            this.evalOrigin = new StackFrame(v);
          else
            throw new TypeError("Eval Origin must be an Object or StackFrame");
        },
        toString: function() {
          var fileName = this.getFileName() || "", lineNumber = this.getLineNumber() || "", columnNumber = this.getColumnNumber() || "", functionName = this.getFunctionName() || "";
          return this.getIsEval() ? fileName ? "[eval] (" + fileName + ":" + lineNumber + ":" + columnNumber + ")" : "[eval]:" + lineNumber + ":" + columnNumber : functionName ? functionName + " (" + fileName + ":" + lineNumber + ":" + columnNumber + ")" : fileName + ":" + lineNumber + ":" + columnNumber;
        }
      }, StackFrame.fromString = function(str) {
        var argsStartIndex = str.indexOf("("), argsEndIndex = str.lastIndexOf(")"), functionName = str.substring(0, argsStartIndex), args = str.substring(argsStartIndex + 1, argsEndIndex).split(","), locationString = str.substring(argsEndIndex + 1);
        if (locationString.indexOf("@") === 0)
          var parts = /@(.+?)(?::(\d+))?(?::(\d+))?$/.exec(locationString, ""), fileName = parts[1], lineNumber = parts[2], columnNumber = parts[3];
        return new StackFrame({
          functionName,
          args: args || void 0,
          fileName,
          lineNumber: lineNumber || void 0,
          columnNumber: columnNumber || void 0
        });
      };
      for (var i = 0; i < booleanProps.length; i++)
        StackFrame.prototype["get" + _capitalize(booleanProps[i])] = _getter(booleanProps[i]), StackFrame.prototype["set" + _capitalize(booleanProps[i])] = function(p) {
          return function(v) {
            this[p] = Boolean(v);
          };
        }(booleanProps[i]);
      for (var j = 0; j < numericProps.length; j++)
        StackFrame.prototype["get" + _capitalize(numericProps[j])] = _getter(numericProps[j]), StackFrame.prototype["set" + _capitalize(numericProps[j])] = function(p) {
          return function(v) {
            if (!_isNumber(v))
              throw new TypeError(p + " must be a Number");
            this[p] = Number(v);
          };
        }(numericProps[j]);
      for (var k = 0; k < stringProps.length; k++)
        StackFrame.prototype["get" + _capitalize(stringProps[k])] = _getter(stringProps[k]), StackFrame.prototype["set" + _capitalize(stringProps[k])] = function(p) {
          return function(v) {
            this[p] = String(v);
          };
        }(stringProps[k]);
      return StackFrame;
    });
  }(stackframe)), stackframe.exports;
}
(function(module2, exports) {
  (function(root, factory2) {
    module2.exports = factory2(requireStackframe());
  })(commonjsGlobal, function(StackFrame) {
    var FIREFOX_SAFARI_STACK_REGEXP = /(^|@)\S+:\d+/, CHROME_IE_STACK_REGEXP = /^\s*at .*(\S+:\d+|\(native\))/m, SAFARI_NATIVE_CODE_REGEXP = /^(eval@)?(\[native code])?$/;
    return {
      /**
       * Given an Error object, extract the most information from it.
       *
       * @param {Error} error object
       * @return {Array} of StackFrames
       */
      parse: function(error) {
        if (typeof error.stacktrace < "u" || typeof error["opera#sourceloc"] < "u")
          return this.parseOpera(error);
        if (error.stack && error.stack.match(CHROME_IE_STACK_REGEXP))
          return this.parseV8OrIE(error);
        if (error.stack)
          return this.parseFFOrSafari(error);
        throw new Error("Cannot parse given Error object");
      },
      // Separate line and column numbers from a string of the form: (URI:Line:Column)
      extractLocation: function(urlLike) {
        if (urlLike.indexOf(":") === -1)
          return [urlLike];
        var regExp = /(.+?)(?::(\d+))?(?::(\d+))?$/, parts = regExp.exec(urlLike.replace(/[()]/g, ""));
        return [parts[1], parts[2] || void 0, parts[3] || void 0];
      },
      parseV8OrIE: function(error) {
        var filtered = error.stack.split(`
`).filter(function(line) {
          return !!line.match(CHROME_IE_STACK_REGEXP);
        }, this);
        return filtered.map(function(line) {
          line.indexOf("(eval ") > -1 && (line = line.replace(/eval code/g, "eval").replace(/(\(eval at [^()]*)|(\),.*$)/g, ""));
          var sanitizedLine = line.replace(/^\s+/, "").replace(/\(eval code/g, "("), location = sanitizedLine.match(/ (\((.+):(\d+):(\d+)\)$)/);
          sanitizedLine = location ? sanitizedLine.replace(location[0], "") : sanitizedLine;
          var tokens = sanitizedLine.split(/\s+/).slice(1), locationParts = this.extractLocation(location ? location[1] : tokens.pop()), functionName = tokens.join(" ") || void 0, fileName = ["eval", "<anonymous>"].indexOf(locationParts[0]) > -1 ? void 0 : locationParts[0];
          return new StackFrame({
            functionName,
            fileName,
            lineNumber: locationParts[1],
            columnNumber: locationParts[2],
            source: line
          });
        }, this);
      },
      parseFFOrSafari: function(error) {
        var filtered = error.stack.split(`
`).filter(function(line) {
          return !line.match(SAFARI_NATIVE_CODE_REGEXP);
        }, this);
        return filtered.map(function(line) {
          if (line.indexOf(" > eval") > -1 && (line = line.replace(/ line (\d+)(?: > eval line \d+)* > eval:\d+:\d+/g, ":$1")), line.indexOf("@") === -1 && line.indexOf(":") === -1)
            return new StackFrame({
              functionName: line
            });
          var functionNameRegex = /((.*".+"[^@]*)?[^@]*)(?:@)/, matches = line.match(functionNameRegex), functionName = matches && matches[1] ? matches[1] : void 0, locationParts = this.extractLocation(line.replace(functionNameRegex, ""));
          return new StackFrame({
            functionName,
            fileName: locationParts[0],
            lineNumber: locationParts[1],
            columnNumber: locationParts[2],
            source: line
          });
        }, this);
      },
      parseOpera: function(e) {
        return !e.stacktrace || e.message.indexOf(`
`) > -1 && e.message.split(`
`).length > e.stacktrace.split(`
`).length ? this.parseOpera9(e) : e.stack ? this.parseOpera11(e) : this.parseOpera10(e);
      },
      parseOpera9: function(e) {
        for (var lineRE = /Line (\d+).*script (?:in )?(\S+)/i, lines = e.message.split(`
`), result = [], i = 2, len = lines.length; i < len; i += 2) {
          var match = lineRE.exec(lines[i]);
          match && result.push(new StackFrame({
            fileName: match[2],
            lineNumber: match[1],
            source: lines[i]
          }));
        }
        return result;
      },
      parseOpera10: function(e) {
        for (var lineRE = /Line (\d+).*script (?:in )?(\S+)(?:: In function (\S+))?$/i, lines = e.stacktrace.split(`
`), result = [], i = 0, len = lines.length; i < len; i += 2) {
          var match = lineRE.exec(lines[i]);
          match && result.push(
            new StackFrame({
              functionName: match[3] || void 0,
              fileName: match[2],
              lineNumber: match[1],
              source: lines[i]
            })
          );
        }
        return result;
      },
      // Opera 10.65+ Error.stack very similar to FF/Safari
      parseOpera11: function(error) {
        var filtered = error.stack.split(`
`).filter(function(line) {
          return !!line.match(FIREFOX_SAFARI_STACK_REGEXP) && !line.match(/^Error created at/);
        }, this);
        return filtered.map(function(line) {
          var tokens = line.split("@"), locationParts = this.extractLocation(tokens.pop()), functionCall = tokens.shift() || "", functionName = functionCall.replace(/<anonymous function(: (\w+))?>/, "$2").replace(/\([^)]*\)/g, "") || void 0, argsRaw;
          functionCall.match(/\(([^)]*)\)/) && (argsRaw = functionCall.replace(/^[^(]+\(([^)]*)\)$/, "$1"));
          var args = argsRaw === void 0 || argsRaw === "[arguments not available]" ? void 0 : argsRaw.split(",");
          return new StackFrame({
            functionName,
            args,
            fileName: locationParts[0],
            lineNumber: locationParts[1],
            columnNumber: locationParts[2],
            source: line
          });
        }, this);
      }
    };
  });
})(errorStackParser);
var errorStackParserExports = errorStackParser.exports, ErrorStackParser = /* @__PURE__ */ getDefaultExportFromCjs(errorStackParserExports);
function ConsoleListener(callback, logOptions) {
  let loggerType = logOptions.logger;
  if (!loggerType)
    return () => {
    };
  let logger3;
  typeof loggerType == "string" ? logger3 = window[loggerType] : logger3 = loggerType;
  let cancelHandlers = [];
  if (logOptions.level.includes("error") && window) {
    let errorHandler = (event) => {
      let { message, error } = event, trace9 = [];
      error && (trace9 = ErrorStackParser.parse(error));
      let payload = [
        stringify$2(message, logOptions.stringifyOptions)
      ];
      callback({
        type: "Error",
        trace: trace9,
        time: Date.now(),
        value: payload
      });
    };
    window.addEventListener("error", errorHandler), cancelHandlers.push(() => {
      window && window.removeEventListener("error", errorHandler);
    });
  }
  for (let levelType of logOptions.level)
    cancelHandlers.push(replace(logger3, levelType));
  return () => {
    cancelHandlers.forEach((h) => h());
  };
  function replace(_logger, level) {
    return _logger[level] ? patch(_logger, level, (original) => (...args) => {
      original.apply(this, args);
      try {
        let trace9 = ErrorStackParser.parse(new Error()), payload = args.map(
          (s) => stringify$2(s, logOptions.stringifyOptions)
        );
        callback({
          type: level,
          trace: trace9.slice(1),
          value: payload,
          time: Date.now()
        });
      } catch (error) {
        original("highlight logger error:", error, ...args);
      }
    }) : () => {
    };
  }
}
var stringify$1 = { exports: {} };
(function(module2, exports) {
  exports = module2.exports = stringify22, exports.getSerialize = serializer;
  function stringify22(obj, replacer, spaces, cycleReplacer) {
    return JSON.stringify(obj, serializer(replacer, cycleReplacer), spaces);
  }
  function serializer(replacer, cycleReplacer) {
    var stack = [], keys = [];
    return cycleReplacer == null && (cycleReplacer = function(key, value) {
      return stack[0] === value ? "[Circular ~]" : "[Circular ~." + keys.slice(0, stack.indexOf(value)).join(".") + "]";
    }), function(key, value) {
      if (stack.length > 0) {
        var thisPos = stack.indexOf(this);
        ~thisPos ? stack.splice(thisPos + 1) : stack.push(this), ~thisPos ? keys.splice(thisPos, 1 / 0, key) : keys.push(key), ~stack.indexOf(value) && (value = cycleReplacer.call(this, key, value));
      } else
        stack.push(value);
      return replacer == null ? value : replacer.call(this, key, value);
    };
  }
})(stringify$1, stringify$1.exports);
var stringifyExports = stringify$1.exports, stringify2 = /* @__PURE__ */ getDefaultExportFromCjs(stringifyExports), g = typeof window < "u" ? window : global, HighlightPromise = class extends g.Promise {
  constructor(executor) {
    super(executor), __publicField(this, "promiseCreationError"), this.promiseCreationError = new Error();
  }
  getStack() {
    return this.promiseCreationError;
  }
};
function handleError2(callback, event, source, error) {
  var _a, _b, _c, _d;
  let res = [];
  if (event instanceof Error)
    res = ErrorStackParser.parse(event), event = event.message;
  else
    try {
      res = ErrorStackParser.parse(error);
    } catch {
    }
  let framesToUse = removeHighlightFrameIfExists(res);
  callback({
    event: stringify2(event),
    type: "window.onerror",
    url: g.location.href,
    source: source ?? "",
    lineNumber: (_a = framesToUse[0]) != null && _a.lineNumber ? (_b = framesToUse[0]) == null ? void 0 : _b.lineNumber : 0,
    columnNumber: (_c = framesToUse[0]) != null && _c.columnNumber ? (_d = framesToUse[0]) == null ? void 0 : _d.columnNumber : 0,
    stackTrace: framesToUse,
    timestamp: (/* @__PURE__ */ new Date()).toISOString()
  });
}
var ErrorListener = (callback) => {
  let initialOnError = g.onerror, initialOnUnhandledRejection = g.onunhandledrejection, initialPromise = g.Promise;
  return g.onerror = (event, source, lineno, colno, error) => {
    error && handleError2(callback, event, source, error);
  }, g.onunhandledrejection = function(event) {
    if (event.reason) {
      let hPromise = event.promise;
      hPromise instanceof HighlightPromise ? handleError2(
        callback,
        event.reason,
        event.type,
        hPromise.getStack()
      ) : handleError2(callback, event.reason, event.type, Error());
    }
  }, g.Promise = HighlightPromise, () => {
    g.Promise = initialPromise, g.onunhandledrejection = initialOnUnhandledRejection, g.onerror = initialOnError;
  };
}, removeHighlightFrameIfExists = (frames) => {
  var _a;
  if (frames.length === 0)
    return frames;
  let firstFrame = frames[0];
  return firstFrame.functionName === "console.error" && ((_a = firstFrame.fileName) != null && _a.includes("highlight.run")) || firstFrame.functionName === "new HighlightPromise" ? frames.slice(1) : frames;
}, ALL_CONSOLE_METHODS = [
  "assert",
  "count",
  "countReset",
  "debug",
  "dir",
  "dirxml",
  "error",
  "group",
  "groupCollapsed",
  "groupEnd",
  "info",
  "log",
  "table",
  "time",
  "timeEnd",
  "timeLog",
  "trace",
  "warn"
], ERRORS_TO_IGNORE = [
  '["\\"Script error.\\""]',
  '[{"isTrusted":true}]',
  '["{}"]',
  '[""]',
  '["\\"\\""]'
], ERROR_PATTERNS_TO_IGNORE = [
  "websocket error",
  '\\"ResizeObserver loop'
], sanitizeRequest = (request, headersToRedact, headersToRecord) => {
  let newHeaders = sanitizeHeaders(
    headersToRedact,
    request.headers,
    headersToRecord
  );
  return __spreadProps(__spreadValues({}, request), {
    headers: newHeaders
  });
}, sanitizeResponse = (response, headersToRedact, headersToRecord) => {
  let newHeaders = sanitizeHeaders(
    headersToRedact,
    response.headers,
    headersToRecord
  );
  return __spreadProps(__spreadValues({}, response), {
    headers: newHeaders
  });
}, sanitizeHeaders = (headersToRedact, headers, headersToRecord) => {
  var _a, _b;
  let newHeaders = __spreadValues({}, headers);
  return headersToRecord ? ((_a = Object.keys(newHeaders)) == null || _a.forEach((header) => {
    [...headersToRecord].includes(header?.toLowerCase()) || (newHeaders[header] = "[REDACTED]");
  }), newHeaders) : ((_b = Object.keys(newHeaders)) == null || _b.forEach((header) => {
    [...SENSITIVE_HEADERS, ...headersToRedact].includes(
      header?.toLowerCase()
    ) && (newHeaders[header] = "[REDACTED]");
  }), newHeaders);
}, SENSITIVE_HEADERS = [
  "authorization",
  "cookie",
  "proxy-authorization",
  "token"
], DEFAULT_URL_BLOCKLIST = [
  "https://www.googleapis.com/identitytoolkit",
  "https://securetoken.googleapis.com"
], HIGHLIGHT_REQUEST_HEADER = "X-Highlight-Request", normalizeUrl = (url) => {
  let urlToMutate = url;
  return !url.startsWith("https://") && !url.startsWith("http://") && (urlToMutate = `${window.location.origin}${urlToMutate}`), urlToMutate.replace(/\/+$/, "");
}, matchPerformanceTimingsWithRequestResponsePair = (performanceTimings, requestResponsePairs, type) => {
  performanceTimings.sort((a, b) => a.responseEnd - b.responseEnd);
  let initialGroupedPerformanceTimings = {
    xmlhttprequest: {},
    others: {},
    fetch: {}
  }, groupedPerformanceTimings = performanceTimings.reduce((previous, performanceTiming) => {
    let url = normalizeUrl(performanceTiming.name);
    return performanceTiming.initiatorType === type ? previous[type][url] = [
      ...previous[type][url] || [],
      performanceTiming
    ] : previous.others[url] = [
      ...previous.others[url] || [],
      performanceTiming
    ], previous;
  }, initialGroupedPerformanceTimings), groupedRequestResponsePairs = {};
  groupedRequestResponsePairs = requestResponsePairs.reduce(
    (previous, requestResponsePair) => {
      let url = normalizeUrl(requestResponsePair.request.url);
      return previous[url] = [...previous[url] || [], requestResponsePair], previous;
    },
    groupedRequestResponsePairs
  );
  for (let url in groupedPerformanceTimings[type]) {
    let performanceTimingsForUrl = groupedPerformanceTimings[type][url], requestResponsePairsForUrl = groupedRequestResponsePairs[url];
    if (!requestResponsePairsForUrl)
      continue;
    let offset = Math.max(
      performanceTimingsForUrl.length - requestResponsePairsForUrl.length,
      0
    );
    for (let i = offset; i < performanceTimingsForUrl.length; i++)
      performanceTimingsForUrl[i] && (performanceTimingsForUrl[i].requestResponsePair = requestResponsePairsForUrl[i - offset]);
  }
  let result = [];
  for (let type2 in groupedPerformanceTimings)
    for (let url in groupedPerformanceTimings[type2])
      result = result.concat(groupedPerformanceTimings[type2][url]);
  return result.sort((a, b) => a.fetchStart - b.fetchStart).map((performanceTiming) => (performanceTiming.toJSON = function() {
    return {
      initiatorType: this.initiatorType,
      startTime: this.startTime,
      responseEnd: this.responseEnd,
      name: this.name,
      transferSize: this.transferSize,
      encodedBodySize: this.encodedBodySize,
      requestResponsePairs: this.requestResponsePair
    };
  }, performanceTiming));
}, isHighlightNetworkResourceFilter = (name, backendUrl) => {
  var _a;
  return name.toLocaleLowerCase().includes(
    (_a = {}.REACT_APP_PUBLIC_GRAPH_URI) != null ? _a : "highlight.run"
  ) || name.toLocaleLowerCase().includes("highlight.run") || name.toLocaleLowerCase().includes(backendUrl);
}, shouldNetworkRequestBeRecorded = (url, highlightBackendUrl, tracingOrigins) => !isHighlightNetworkResourceFilter(url, highlightBackendUrl) || shouldNetworkRequestBeTraced(url, tracingOrigins), shouldNetworkRequestBeTraced = (url, tracingOrigins) => {
  var _a;
  let patterns = [];
  tracingOrigins === !0 ? (patterns = ["localhost", /^\//], (_a = window?.location) != null && _a.host && patterns.push(window.location.host)) : tracingOrigins instanceof Array && (patterns = tracingOrigins);
  let result = !1;
  return patterns.forEach((pattern) => {
    url.match(pattern) && (result = !0);
  }), result;
};
function makeId(length) {
  for (var result = "", characters = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789", charactersLength = characters.length, i = 0; i < length; i++)
    result += characters.charAt(
      Math.floor(Math.random() * charactersLength)
    );
  return result;
}
var createNetworkRequestId = () => makeId(10), getHighlightRequestHeader = (sessionSecureID, requestId) => sessionSecureID + "/" + requestId, XHRListener = (callback, backendUrl, tracingOrigins, urlBlocklist, sessionSecureID, bodyKeysToRedact, bodyKeysToRecord) => {
  let XHR = XMLHttpRequest.prototype, originalOpen = XHR.open, originalSend = XHR.send, originalSetRequestHeader = XHR.setRequestHeader;
  return XHR.open = function(method, url) {
    return this._method = method, this._url = url, this._requestHeaders = {}, this._shouldRecordHeaderAndBody = !urlBlocklist.some(
      (blockedUrl) => url.toLowerCase().includes(blockedUrl)
    ), originalOpen.apply(this, arguments);
  }, XHR.setRequestHeader = function(header, value) {
    return this._requestHeaders[header] = value, originalSetRequestHeader.apply(this, arguments);
  }, XHR.send = function(postData) {
    if (!shouldNetworkRequestBeRecorded(
      this._url,
      backendUrl,
      tracingOrigins
    ))
      return originalSend.apply(this, arguments);
    let requestId = createNetworkRequestId();
    shouldNetworkRequestBeTraced(this._url, tracingOrigins) && this.setRequestHeader(
      HIGHLIGHT_REQUEST_HEADER,
      getHighlightRequestHeader(sessionSecureID, requestId)
    );
    let shouldRecordHeaderAndBody = this._shouldRecordHeaderAndBody, requestModel = {
      id: requestId,
      url: this._url,
      verb: this._method,
      headers: shouldRecordHeaderAndBody ? this._requestHeaders : {},
      body: void 0
    };
    if (shouldRecordHeaderAndBody && postData) {
      let bodyData = getBodyData(postData, requestModel.url);
      bodyData && (requestModel.body = getBodyThatShouldBeRecorded(
        bodyData,
        bodyKeysToRedact,
        bodyKeysToRecord,
        requestModel.headers
      ));
    }
    return this.addEventListener("load", function() {
      return __async(this, null, function* () {
        let responseModel = {
          status: this.status,
          headers: {},
          body: void 0
        };
        if (shouldRecordHeaderAndBody) {
          let normalizedResponseHeaders = this.getAllResponseHeaders().trim().split(/[\r\n]+/), headerMap = {};
          if (normalizedResponseHeaders.forEach(function(line) {
            let parts = line.split(": "), header = parts.shift();
            headerMap[header] = parts.join(": ");
          }), responseModel.headers = headerMap, postData) {
            let bodyData = getBodyData(postData, requestModel.url);
            bodyData && (requestModel.body = getBodyThatShouldBeRecorded(
              bodyData,
              bodyKeysToRedact,
              bodyKeysToRecord,
              responseModel.headers
            ));
          }
          if (this.responseType === "" || this.responseType === "text")
            responseModel.body = getBodyThatShouldBeRecorded(
              this.responseText,
              bodyKeysToRedact,
              bodyKeysToRecord,
              responseModel.headers
            ), responseModel.size = this.responseText.length * 8;
          else if (this.responseType === "blob") {
            let blob = this.response, response = yield blob.text();
            responseModel.body = getBodyThatShouldBeRecorded(
              response,
              bodyKeysToRedact,
              bodyKeysToRecord,
              responseModel.headers
            ), responseModel.size = blob.size;
          } else
            try {
              responseModel.body = getBodyThatShouldBeRecorded(
                this.response,
                bodyKeysToRedact,
                bodyKeysToRecord,
                responseModel.headers
              );
            } catch {
            }
        }
        callback({
          request: requestModel,
          response: responseModel,
          urlBlocked: !shouldRecordHeaderAndBody
        });
      });
    }), this.addEventListener("error", function() {
      return __async(this, null, function* () {
        let responseModel = {
          status: this.status,
          headers: void 0,
          body: void 0
        };
        callback({
          request: requestModel,
          response: responseModel,
          urlBlocked: !1
        });
      });
    }), originalSend.apply(this, arguments);
  }, () => {
    XHR.open = originalOpen, XHR.send = originalSend, XHR.setRequestHeader = originalSetRequestHeader;
  };
}, getBodyData = (postData, url) => {
  if (typeof postData == "string") {
    if (!((url?.includes("localhost") || url?.includes("highlight.run")) && postData.includes("pushPayload")))
      return postData;
  } else if (typeof postData == "object" || typeof postData == "number" || typeof postData == "boolean")
    return postData.toString();
  return null;
}, DEFAULT_BODY_LIMIT = 64 * 1024, BODY_SIZE_LIMITS = {
  "application/json": 64 * 1024 * 1024,
  // MB
  "text/plain": 64 * 1024 * 1024
  // MB
}, getBodyThatShouldBeRecorded = (bodyData, bodyKeysToRedact, bodyKeysToRecord, headers) => {
  var _a, _b, _c;
  let bodyLimit = DEFAULT_BODY_LIMIT;
  if (headers) {
    let contentType = "";
    typeof headers.get == "function" ? contentType = (_a = headers.get("content-type")) != null ? _a : "" : contentType = (_b = headers["content-type"]) != null ? _b : "";
    try {
      contentType = contentType.split(";")[0];
    } catch {
    }
    bodyLimit = (_c = BODY_SIZE_LIMITS[contentType]) != null ? _c : DEFAULT_BODY_LIMIT;
  }
  if (bodyData) {
    if (bodyKeysToRedact)
      try {
        let json118 = JSON.parse(bodyData);
        Object.keys(json118).forEach((key) => {
          bodyKeysToRedact.includes(key.toLocaleLowerCase()) && (json118[key] = "[REDACTED]");
        }), bodyData = JSON.stringify(json118);
      } catch {
      }
    if (bodyKeysToRecord)
      try {
        let json118 = JSON.parse(bodyData);
        Object.keys(json118).forEach((key) => {
          bodyKeysToRecord.includes(key.toLocaleLowerCase()) || (json118[key] = "[REDACTED]");
        }), bodyData = JSON.stringify(json118);
      } catch {
      }
  }
  try {
    bodyData = bodyData.slice(0, bodyLimit);
  } catch {
  }
  return bodyData;
}, FetchListener = (callback, backendUrl, tracingOrigins, urlBlocklist, sessionSecureID, bodyKeysToRedact, bodyKeysToRecord) => {
  let originalFetch = window._fetchProxy;
  return window._fetchProxy = function(input, init3) {
    let { method, url } = getFetchRequestProperties(input, init3);
    if (!shouldNetworkRequestBeRecorded(url, backendUrl, tracingOrigins))
      return originalFetch.call(this, input, init3);
    let requestId = createNetworkRequestId();
    if (shouldNetworkRequestBeTraced(url, tracingOrigins)) {
      init3 = init3 || {};
      let headers = new Headers(init3.headers);
      input instanceof Request && [...input.headers].forEach(
        ([key, value]) => headers.set(key, value)
      ), headers.set(
        HIGHLIGHT_REQUEST_HEADER,
        getHighlightRequestHeader(sessionSecureID, requestId)
      ), init3.headers = Object.fromEntries(headers.entries());
    }
    let request = {
      id: requestId,
      headers: {},
      body: void 0,
      url,
      verb: method
    }, shouldRecordHeaderAndBody = !urlBlocklist.some(
      (blockedUrl) => url.toLowerCase().includes(blockedUrl)
    );
    shouldRecordHeaderAndBody && (request.headers = Object.fromEntries(
      new Headers(init3?.headers).entries()
    ), request.body = getBodyThatShouldBeRecorded(
      init3?.body,
      bodyKeysToRedact,
      bodyKeysToRecord,
      init3?.headers
    ));
    let responsePromise = originalFetch.call(this, input, init3);
    return logRequest(
      responsePromise,
      request,
      callback,
      shouldRecordHeaderAndBody,
      bodyKeysToRedact,
      bodyKeysToRecord
    ), responsePromise;
  }, () => {
    window._fetchProxy = originalFetch;
  };
}, getFetchRequestProperties = (input, init3) => {
  let method = init3 && init3.method || typeof input == "object" && "method" in input && input.method || "GET", url;
  return typeof input == "object" ? "url" in input && input.url ? url = input.url : url = input.toString() : url = input, {
    method,
    url
  };
}, logRequest = (responsePromise, requestPayload, callback, shouldRecordHeaderAndBody, bodyKeysToRedact, bodyKeysToRecord) => {
  let onPromiseResolveHandler = (response) => __async(void 0, null, function* () {
    let responsePayload = {
      body: void 0,
      headers: void 0,
      status: 0,
      size: 0
    }, requestHandled = !1;
    if ("stack" in response || response instanceof Error)
      responsePayload = __spreadProps(__spreadValues({}, responsePayload), {
        body: response.message,
        status: 0,
        size: void 0
      }), requestHandled = !0;
    else if ("status" in response) {
      if (responsePayload = __spreadProps(__spreadValues({}, responsePayload), {
        status: response.status
      }), shouldRecordHeaderAndBody) {
        let text;
        try {
          let body = response.clone().body;
          if (body) {
            let reader = body.getReader(), utf8Decoder = new TextDecoder(), nextChunk, result = "";
            for (; !(nextChunk = yield reader.read()).done; ) {
              let partialData = nextChunk.value;
              result += utf8Decoder.decode(partialData);
            }
            text = result, text = getBodyThatShouldBeRecorded(
              text,
              bodyKeysToRedact,
              bodyKeysToRecord,
              response.headers
            );
          } else
            text = "";
        } catch (e) {
          text = `Unable to clone response: ${e}`;
        }
        responsePayload.body = text, responsePayload.headers = Object.fromEntries(
          response.headers.entries()
        ), responsePayload.size = text.length * 8;
      }
      requestHandled = !0;
    }
    requestHandled && callback({
      request: requestPayload,
      response: responsePayload,
      urlBlocked: !shouldRecordHeaderAndBody
    });
  });
  responsePromise.then(onPromiseResolveHandler).catch(() => {
  });
}, WebSocketListener = (requestCallback, eventCallback, urlBlocklist) => {
  let initialHighlightWebSocketRequestCallback = window._highlightWebSocketRequestCallback;
  window._highlightWebSocketRequestCallback = requestCallback;
  let initialHighlightWebSocketEventCallback = window._highlightWebSocketEventCallback;
  return window._highlightWebSocketEventCallback = (eventData) => {
    let _a = eventData, { message, size } = _a, visibleEventData = __objRest(_a, ["message", "size"]), redactedEventData = urlBlocklist.some(
      (blockedUrl2) => eventData.name.toLowerCase().includes(blockedUrl2)
    ) ? visibleEventData : eventData;
    eventCallback(redactedEventData);
  }, () => {
    window._highlightWebSocketRequestCallback = initialHighlightWebSocketRequestCallback, window._highlightWebSocketEventCallback = initialHighlightWebSocketEventCallback;
  };
}, NetworkListener = ({
  xhrCallback,
  fetchCallback,
  webSocketRequestCallback,
  webSocketEventCallback,
  disableWebSocketRecording,
  headersToRedact,
  bodyKeysToRedact,
  backendUrl,
  tracingOrigins,
  urlBlocklist,
  sessionSecureID,
  bodyKeysToRecord,
  headerKeysToRecord
}) => {
  let removeXHRListener = XHRListener(
    (requestResponsePair) => {
      xhrCallback(
        sanitizeRequestResponsePair(
          requestResponsePair,
          headersToRedact,
          headerKeysToRecord
        )
      );
    },
    backendUrl,
    tracingOrigins,
    urlBlocklist,
    sessionSecureID,
    bodyKeysToRedact,
    bodyKeysToRecord
  ), removeFetchListener = FetchListener(
    (requestResponsePair) => {
      fetchCallback(
        sanitizeRequestResponsePair(
          requestResponsePair,
          headersToRedact,
          headerKeysToRecord
        )
      );
    },
    backendUrl,
    tracingOrigins,
    urlBlocklist,
    sessionSecureID,
    bodyKeysToRedact,
    bodyKeysToRecord
  ), removeWebSocketListener = disableWebSocketRecording ? () => {
  } : WebSocketListener(
    webSocketRequestCallback,
    webSocketEventCallback,
    urlBlocklist
  );
  return () => {
    removeXHRListener(), removeFetchListener(), removeWebSocketListener();
  };
}, sanitizeRequestResponsePair = (_a, headersToRedact, headersToRecord) => {
  var _b = _a, { request, response } = _b, rest = __objRest(_b, ["request", "response"]);
  return __spreadValues({
    request: sanitizeRequest(request, headersToRedact, headersToRecord),
    response: sanitizeResponse(response, headersToRedact, headersToRecord)
  }, rest);
}, FirstLoadListeners = class {
  constructor(options2) {
    __publicField(this, "disableConsoleRecording"), __publicField(this, "reportConsoleErrors"), __publicField(this, "consoleMethodsToRecord"), __publicField(this, "listeners"), __publicField(this, "errors"), __publicField(this, "messages"), __publicField(this, "options"), __publicField(this, "hasNetworkRecording", !0), __publicField(this, "_backendUrl"), __publicField(this, "disableNetworkRecording"), __publicField(this, "enableRecordingNetworkContents"), __publicField(this, "xhrNetworkContents"), __publicField(this, "fetchNetworkContents"), __publicField(this, "disableRecordingWebSocketContents"), __publicField(this, "webSocketNetworkContents"), __publicField(this, "webSocketEventContents"), __publicField(this, "tracingOrigins"), __publicField(this, "networkHeadersToRedact"), __publicField(this, "networkBodyKeysToRedact"), __publicField(this, "networkBodyKeysToRecord"), __publicField(this, "networkHeaderKeysToRecord"), __publicField(this, "urlBlocklist");
    var _a;
    this.options = options2, this.disableConsoleRecording = !!options2.disableConsoleRecording, this.reportConsoleErrors = (_a = options2.reportConsoleErrors) != null ? _a : !1, this.consoleMethodsToRecord = options2.consoleMethodsToRecord || [
      ...ALL_CONSOLE_METHODS
    ], this.listeners = [], this.errors = [], this.messages = [];
  }
  isListening() {
    return this.listeners.length > 0;
  }
  startListening() {
    if (this.isListening())
      return;
    let highlightThis = this;
    this.disableConsoleRecording || this.listeners.push(
      ConsoleListener(
        (c) => {
          var _a, _b, _c;
          if (this.reportConsoleErrors && (c.type === "Error" || c.type === "error") && c.value && c.trace) {
            let errorValue = stringify2(c.value);
            if (ERRORS_TO_IGNORE.includes(errorValue) || ERROR_PATTERNS_TO_IGNORE.some(
              (pattern) => errorValue.includes(pattern)
            ))
              return;
            highlightThis.errors.push({
              event: errorValue,
              type: "console.error",
              url: window.location.href,
              source: (_a = c.trace[0]) != null && _a.fileName ? c.trace[0].fileName : "",
              lineNumber: (_b = c.trace[0]) != null && _b.lineNumber ? c.trace[0].lineNumber : 0,
              columnNumber: (_c = c.trace[0]) != null && _c.columnNumber ? c.trace[0].columnNumber : 0,
              stackTrace: c.trace,
              timestamp: (/* @__PURE__ */ new Date()).toISOString()
            });
          }
          highlightThis.messages.push(c);
        },
        {
          level: this.consoleMethodsToRecord,
          logger: "console",
          stringifyOptions: {
            depthOfLimit: 10,
            numOfKeysLimit: 100,
            stringLengthLimit: 1e3
          }
        }
      )
    ), this.listeners.push(
      ErrorListener((e) => highlightThis.errors.push(e))
    ), FirstLoadListeners.setupNetworkListener(this, this.options);
  }
  stopListening() {
    this.listeners.forEach((stop) => stop()), this.listeners = [];
  }
  // We define this as a static method because versions earlier than 4.0.0 (Feb 2022) don't have this code.
  // For those versions, calling this from client will monkey-patch the network listeners onto the old FirstLoadListener object.
  static setupNetworkListener(sThis, options2) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k;
    sThis._backendUrl = options2?.backendUrl || {}.REACT_APP_PUBLIC_GRAPH_URI || "https://pub.highlight.run", sThis.xhrNetworkContents = [], sThis.fetchNetworkContents = [], sThis.webSocketNetworkContents = [], sThis.webSocketEventContents = [], sThis.networkHeadersToRedact = [], sThis.urlBlocklist = [], sThis.tracingOrigins = options2.tracingOrigins || [], options2?.disableNetworkRecording !== void 0 ? (sThis.disableNetworkRecording = options2?.disableNetworkRecording, sThis.enableRecordingNetworkContents = !1, sThis.disableRecordingWebSocketContents = !0, sThis.networkHeadersToRedact = [], sThis.networkBodyKeysToRedact = [], sThis.urlBlocklist = [], sThis.networkBodyKeysToRecord = [], sThis.networkBodyKeysToRecord = []) : typeof options2?.networkRecording == "boolean" ? (sThis.disableNetworkRecording = !options2.networkRecording, sThis.enableRecordingNetworkContents = !1, sThis.disableRecordingWebSocketContents = !0, sThis.networkHeadersToRedact = [], sThis.networkBodyKeysToRedact = [], sThis.urlBlocklist = []) : (((_a = options2.networkRecording) == null ? void 0 : _a.enabled) !== void 0 ? sThis.disableNetworkRecording = !options2.networkRecording.enabled : sThis.disableNetworkRecording = !1, sThis.enableRecordingNetworkContents = ((_b = options2.networkRecording) == null ? void 0 : _b.recordHeadersAndBody) || !1, sThis.disableRecordingWebSocketContents = ((_c = options2.networkRecording) == null ? void 0 : _c.disableWebSocketEventRecordings) || !1, sThis.networkHeadersToRedact = ((_e = (_d = options2.networkRecording) == null ? void 0 : _d.networkHeadersToRedact) == null ? void 0 : _e.map(
      (header) => header.toLowerCase()
    )) || [], sThis.networkBodyKeysToRedact = ((_g = (_f = options2.networkRecording) == null ? void 0 : _f.networkBodyKeysToRedact) == null ? void 0 : _g.map(
      (bodyKey) => bodyKey.toLowerCase()
    )) || [], sThis.urlBlocklist = ((_i = (_h = options2.networkRecording) == null ? void 0 : _h.urlBlocklist) == null ? void 0 : _i.map(
      (url) => url.toLowerCase()
    )) || [], sThis.urlBlocklist = [
      ...sThis.urlBlocklist,
      ...DEFAULT_URL_BLOCKLIST
    ], sThis.networkHeaderKeysToRecord = (_j = options2.networkRecording) == null ? void 0 : _j.headerKeysToRecord, sThis.networkHeaderKeysToRecord && (sThis.networkHeadersToRedact = [], sThis.networkHeaderKeysToRecord = sThis.networkHeaderKeysToRecord.map(
      (key) => key.toLocaleLowerCase()
    )), sThis.networkBodyKeysToRecord = (_k = options2.networkRecording) == null ? void 0 : _k.bodyKeysToRecord, sThis.networkBodyKeysToRecord && (sThis.networkBodyKeysToRedact = [], sThis.networkBodyKeysToRecord = sThis.networkBodyKeysToRecord.map(
      (key) => key.toLocaleLowerCase()
    ))), !sThis.disableNetworkRecording && sThis.enableRecordingNetworkContents && sThis.listeners.push(
      NetworkListener({
        xhrCallback: (requestResponsePair) => {
          sThis.xhrNetworkContents.push(requestResponsePair);
        },
        fetchCallback: (requestResponsePair) => {
          sThis.fetchNetworkContents.push(requestResponsePair);
        },
        webSocketRequestCallback: (event) => {
          sThis.webSocketNetworkContents && sThis.webSocketNetworkContents.push(event);
        },
        webSocketEventCallback: (event) => {
          sThis.webSocketEventContents.push(event);
        },
        disableWebSocketRecording: sThis.disableRecordingWebSocketContents,
        headersToRedact: sThis.networkHeadersToRedact,
        bodyKeysToRedact: sThis.networkBodyKeysToRedact,
        backendUrl: sThis._backendUrl,
        tracingOrigins: sThis.tracingOrigins,
        urlBlocklist: sThis.urlBlocklist,
        sessionSecureID: options2.sessionSecureID,
        headerKeysToRecord: sThis.networkHeaderKeysToRecord,
        bodyKeysToRecord: sThis.networkBodyKeysToRecord
      })
    );
  }
  static getRecordedNetworkResources(sThis, recordingStartTime) {
    var _a;
    let httpResources = [], webSocketResources = [];
    if (!sThis.disableNetworkRecording) {
      let documentTimeOrigin = ((_a = window?.performance) == null ? void 0 : _a.timeOrigin) || 0;
      httpResources = performance.getEntriesByType(
        "resource"
      );
      let offset = (recordingStartTime - documentTimeOrigin) * 2;
      httpResources = httpResources.filter(
        (r) => shouldNetworkRequestBeRecorded(
          r.name,
          sThis._backendUrl,
          sThis.tracingOrigins
        )
      ).map((resource) => __spreadProps(__spreadValues({}, resource.toJSON()), {
        offsetStartTime: resource.startTime - offset,
        offsetResponseEnd: resource.responseEnd - offset,
        offsetFetchStart: resource.fetchStart - offset
      })), sThis.enableRecordingNetworkContents && (httpResources = matchPerformanceTimingsWithRequestResponsePair(
        httpResources,
        sThis.xhrNetworkContents,
        "xmlhttprequest"
      ), httpResources = matchPerformanceTimingsWithRequestResponsePair(
        httpResources,
        sThis.fetchNetworkContents,
        "fetch"
      ));
    }
    return sThis.disableRecordingWebSocketContents || (webSocketResources = sThis.webSocketNetworkContents || []), [...httpResources, ...webSocketResources];
  }
  static getRecordedWebSocketEvents(sThis) {
    let webSocketEvents = [];
    return !sThis.disableNetworkRecording && !sThis.disableRecordingWebSocketContents && (webSocketEvents = sThis.webSocketEventContents), webSocketEvents;
  }
  static clearRecordedNetworkResources(sThis) {
    sThis.disableNetworkRecording || (sThis.xhrNetworkContents = [], sThis.fetchNetworkContents = [], sThis.webSocketNetworkContents = [], sThis.webSocketEventContents = [], performance.clearResourceTimings());
  }
}, GenerateSecureID = () => {
  var _a;
  let CHARACTER_SET = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
  var secureID = "";
  let hasCrypto = typeof window < "u" && ((_a = window.crypto) == null ? void 0 : _a.getRandomValues), cryptoRandom = new Uint32Array(28);
  hasCrypto && window.crypto.getRandomValues(cryptoRandom);
  for (let i = 0; i < 28; i++)
    hasCrypto ? secureID += CHARACTER_SET.charAt(
      cryptoRandom[i] % CHARACTER_SET.length
    ) : secureID += CHARACTER_SET.charAt(
      Math.floor(Math.random() * CHARACTER_SET.length)
    );
  return secureID;
};
var firstloadVersion = "7.3.4", SESSION_STORAGE_KEYS = /* @__PURE__ */ ((SESSION_STORAGE_KEYS2) => (SESSION_STORAGE_KEYS2.RECORDING_START_TIME = "highlightRecordingStartTime", SESSION_STORAGE_KEYS2.SEGMENT_LAST_SENT_HASH_KEY = "HIGHLIGHT_SEGMENT_LAST_SENT_HASH_KEY", SESSION_STORAGE_KEYS2.SESSION_DATA = "sessionData", SESSION_STORAGE_KEYS2.SESSION_SECURE_ID = "sessionSecureID", SESSION_STORAGE_KEYS2.USER_IDENTIFIER = "highlightIdentifier", SESSION_STORAGE_KEYS2.USER_OBJECT = "highlightUserObject", SESSION_STORAGE_KEYS2.PAYLOAD_ID = "payloadId", SESSION_STORAGE_KEYS2))(SESSION_STORAGE_KEYS || {}), SESSION_PUSH_THRESHOLD = 1e3 * 55, getPreviousSessionData = () => {
  let storedSessionData = JSON.parse(
    window.sessionStorage.getItem(SESSION_STORAGE_KEYS.SESSION_DATA) || "{}"
  );
  if (storedSessionData && storedSessionData.lastPushTime && Date.now() - storedSessionData.lastPushTime < SESSION_PUSH_THRESHOLD)
    return storedSessionData;
}, initializeFetchListener = () => {
  if (typeof window < "u") {
    if (typeof window._highlightFetchPatch < "u")
      return;
    window._originalFetch = window.fetch, window._fetchProxy = (input, init3) => window._originalFetch(input, init3), window._highlightFetchPatch = (input, init3) => window._fetchProxy.call(window || global, input, init3), window.fetch = window._highlightFetchPatch;
  }
}, placeholderCallback = () => null, initializeWebSocketListener = () => {
  if (typeof window < "u") {
    if (typeof window._highlightWebSocketRequestCallback < "u")
      return;
    window._highlightWebSocketRequestCallback = placeholderCallback, window._highlightWebSocketEventCallback = placeholderCallback;
    let WebSocketProxy = new Proxy(window.WebSocket, {
      construct(target, args) {
        let socketId = createNetworkRequestId(), webSocket = new target(...args), openHandler = (event) => {
          window._highlightWebSocketRequestCallback({
            socketId,
            initiatorType: "websocket",
            type: "open",
            name: webSocket.url,
            startTime: event.timeStamp
          });
        }, closeHandler = (event) => {
          window._highlightWebSocketRequestCallback({
            socketId,
            initiatorType: "websocket",
            type: "close",
            name: webSocket.url,
            requestEnd: event.timeStamp
          }), webSocket.removeEventListener("open", openHandler), webSocket.removeEventListener("error", errorHandler), webSocket.removeEventListener("message", messageHandler), webSocket.removeEventListener("close", closeHandler);
        }, messageHandler = (event) => {
          let { data: data2 } = event, message = typeof data2 == "string" ? event.data : void 0, size;
          typeof data2 == "string" ? size = data2.length : data2 instanceof Blob ? size = data2.size : size = data2.byteLength || 0, window._highlightWebSocketEventCallback({
            socketId,
            type: "received",
            name: webSocket.url,
            timeStamp: event.timeStamp,
            size,
            message
          });
        }, errorHandler = (event) => {
          window._highlightWebSocketEventCallback({
            socketId,
            type: "error",
            name: webSocket.url,
            timeStamp: event.timeStamp,
            size: 0
          });
        };
        webSocket.addEventListener("open", openHandler), webSocket.addEventListener("error", errorHandler), webSocket.addEventListener("message", messageHandler), webSocket.addEventListener("close", closeHandler);
        let sendProxy = new Proxy(webSocket.send, {
          apply: function(sendTarget, thisArg, args2) {
            let data2 = args2[0], message = typeof data2 == "string" ? data2 : void 0, size;
            typeof data2 == "string" ? size = data2.length : data2 instanceof Blob ? size = data2.size : size = data2.byteLength || 0, window._highlightWebSocketEventCallback({
              socketId,
              type: "sent",
              name: webSocket.url,
              timeStamp: performance.now(),
              size,
              message
            }), sendTarget.apply(thisArg, args2);
          }
        });
        return webSocket.send = sendProxy, webSocket;
      }
    });
    window.WebSocket = WebSocketProxy;
  }
}, listenToChromeExtensionMessage = () => {
  var _a, _b;
  typeof chrome < "u" && ((_a = chrome == null ? void 0 : chrome.runtime) != null && _a.onMessage) && ((_b = chrome == null ? void 0 : chrome.runtime) == null || _b.onMessage.addListener(
    (message, _sender, sendResponse) => {
      let action106 = message.action;
      switch (console.log(
        `[highlight] received '${action106}' event from extension.`
      ), action106) {
        case "init": {
          let scriptUrl = "http://localhost:8080/dist/index.js";
          console.log("url", scriptUrl), H.init(1, {
            debug: !0,
            scriptUrl
          }), H.getSessionURL().then((url) => {
            sendResponse({ url });
          });
          break;
        }
        case "stop": {
          H.stop(), sendResponse({ success: !0 });
          break;
        }
      }
      return !0;
    }
  ));
};
var HighlightWarning = (context7, msg) => {
  console.warn(`Highlight Warning: (${context7}): `, msg);
}, script, highlight_obj, first_load_listeners, init_called = !1, H = {
  options: void 0,
  init: (projectID, options2) => {
    var _a, _b, _c, _d, _e, _f, _g, _h;
    try {
      if (H.options = options2, typeof window > "u" || typeof document > "u")
        return;
      if (!projectID) {
        console.info(
          "Highlight is not initializing because projectID was passed undefined."
        );
        return;
      }
      if (init_called)
        return;
      init_called = !0, script = document.createElement("script");
      var scriptSrc = options2?.scriptUrl ? options2.scriptUrl : `https://static.highlight.io/v${firstloadVersion}/index.js`;
      script.setAttribute("src", scriptSrc), script.setAttribute("type", "text/javascript"), document.getElementsByTagName("head")[0].appendChild(script);
      let previousSession = getPreviousSessionData(), sessionSecureID = GenerateSecureID();
      previousSession?.sessionSecureID && (sessionSecureID = previousSession.sessionSecureID);
      let client_options = {
        organizationID: projectID,
        debug: options2?.debug,
        backendUrl: options2?.backendUrl,
        tracingOrigins: options2?.tracingOrigins,
        disableNetworkRecording: options2?.disableNetworkRecording,
        networkRecording: options2?.networkRecording,
        disableBackgroundRecording: options2?.disableBackgroundRecording,
        disableConsoleRecording: options2?.disableConsoleRecording,
        disableSessionRecording: options2?.disableSessionRecording,
        reportConsoleErrors: options2?.reportConsoleErrors,
        consoleMethodsToRecord: options2?.consoleMethodsToRecord,
        enableSegmentIntegration: options2?.enableSegmentIntegration,
        enableStrictPrivacy: options2?.enableStrictPrivacy,
        enableCanvasRecording: options2?.enableCanvasRecording,
        enablePerformanceRecording: options2?.enablePerformanceRecording,
        samplingStrategy: options2?.samplingStrategy,
        inlineImages: options2?.inlineImages,
        inlineStylesheet: options2?.inlineStylesheet,
        recordCrossOriginIframe: options2?.recordCrossOriginIframe,
        firstloadVersion,
        environment: options2?.environment || "production",
        appVersion: options2?.version,
        sessionShortcut: options2?.sessionShortcut,
        sessionSecureID
      };
      first_load_listeners = new FirstLoadListeners(client_options), options2?.manualStart || first_load_listeners.startListening(), script.addEventListener("load", () => {
        let startFunction = () => {
          highlight_obj = new window.HighlightIO(
            client_options,
            first_load_listeners
          ), options2?.manualStart || highlight_obj.initialize();
        };
        if ("HighlightIO" in window)
          startFunction();
        else {
          let interval = setInterval(() => {
            "HighlightIO" in window && (startFunction(), clearInterval(interval));
          }, 500);
        }
      }), !((_b = (_a = options2?.integrations) == null ? void 0 : _a.mixpanel) != null && _b.disabled) && ((_d = (_c = options2?.integrations) == null ? void 0 : _c.mixpanel) != null && _d.projectToken) && setupMixpanelIntegration(options2.integrations.mixpanel), !((_f = (_e = options2?.integrations) == null ? void 0 : _e.amplitude) != null && _f.disabled) && ((_h = (_g = options2?.integrations) == null ? void 0 : _g.amplitude) != null && _h.apiKey) && setupAmplitudeIntegration(options2.integrations.amplitude);
    } catch (e) {
      HighlightWarning("init", e);
    }
  },
  addSessionFeedback: ({
    verbatim,
    userName,
    userEmail,
    timestampOverride
  }) => {
    try {
      H.onHighlightReady(
        () => highlight_obj.addSessionFeedback({
          verbatim,
          timestamp: timestampOverride || (/* @__PURE__ */ new Date()).toISOString(),
          user_email: userEmail,
          user_name: userName
        })
      );
    } catch (e) {
      HighlightWarning("error", e);
    }
  },
  consumeError: (error, message, payload) => {
    try {
      H.onHighlightReady(
        () => highlight_obj.consumeCustomError(
          error,
          message,
          JSON.stringify(payload)
        )
      );
    } catch (e) {
      HighlightWarning("error", e);
    }
  },
  error: (message, payload) => {
    try {
      H.onHighlightReady(
        () => highlight_obj.pushCustomError(message, JSON.stringify(payload))
      );
    } catch (e) {
      HighlightWarning("error", e);
    }
  },
  track: (event, metadata = {}) => {
    var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k;
    try {
      H.onHighlightReady(
        () => highlight_obj.addProperties(__spreadProps(__spreadValues({}, metadata), { event }))
      );
      let highlightUrl = highlight_obj?.getCurrentSessionURL();
      (_c = (_b = (_a = H.options) == null ? void 0 : _a.integrations) == null ? void 0 : _b.mixpanel) != null && _c.disabled || (_d = window.mixpanel) != null && _d.track && window.mixpanel.track(event, __spreadProps(__spreadValues({}, metadata), {
        highlightSessionURL: highlightUrl
      })), (_g = (_f = (_e = H.options) == null ? void 0 : _e.integrations) == null ? void 0 : _f.amplitude) != null && _g.disabled || (_h = window.amplitude) != null && _h.getInstance && window.amplitude.getInstance().logEvent(event, __spreadProps(__spreadValues({}, metadata), {
        highlightSessionURL: highlightUrl
      })), (_k = (_j = (_i = H.options) == null ? void 0 : _i.integrations) == null ? void 0 : _j.intercom) != null && _k.disabled || window.Intercom && window.Intercom("trackEvent", event, metadata);
    } catch (e) {
      HighlightWarning("track", e);
    }
  },
  start: (options2) => {
    try {
      if (highlight_obj?.state === "Recording") {
        options2?.silent || console.warn(
          "Highlight is already recording. Please `H.stop()` the current session before starting a new one."
        );
        return;
      } else {
        first_load_listeners.startListening();
        var interval = setInterval(function() {
          highlight_obj && (clearInterval(interval), highlight_obj.initialize(options2));
        }, 200);
      }
    } catch (e) {
      HighlightWarning("start", e);
    }
  },
  stop: () => {
    try {
      H.onHighlightReady(() => highlight_obj.stopRecording(!0));
    } catch (e) {
      HighlightWarning("stop", e);
    }
  },
  identify: (identifier, metadata = {}) => {
    var _a, _b, _c, _d, _e, _f, _g, _h;
    try {
      H.onHighlightReady(
        () => highlight_obj.identify(identifier, metadata)
      );
    } catch (e) {
      HighlightWarning("identify", e);
    }
    if ((_c = (_b = (_a = H.options) == null ? void 0 : _a.integrations) == null ? void 0 : _b.mixpanel) != null && _c.disabled || (_d = window.mixpanel) != null && _d.identify && window.mixpanel.identify(identifier), !((_g = (_f = (_e = H.options) == null ? void 0 : _e.integrations) == null ? void 0 : _f.amplitude) != null && _g.disabled) && (_h = window.amplitude) != null && _h.getInstance && (window.amplitude.getInstance().setUserId(identifier), Object.keys(metadata).length > 0)) {
      let amplitudeUserProperties = Object.keys(
        metadata
      ).reduce((acc, key) => (acc.set(key, metadata[key]), acc), new window.amplitude.Identify());
      window.amplitude.getInstance().identify(amplitudeUserProperties);
    }
  },
  metrics: (metrics) => {
    try {
      H.onHighlightReady(
        () => highlight_obj.recordMetric(
          metrics.map((m) => __spreadProps(__spreadValues({}, m), {
            category: "Frontend"
            /* Frontend */
          }))
        )
      );
    } catch (e) {
      HighlightWarning("metrics", e);
    }
  },
  getSessionURL: () => new Promise((resolve, reject) => {
    H.onHighlightReady(() => {
      let res = highlight_obj.getCurrentSessionURL();
      res ? resolve(res) : reject(new Error("Unable to get session URL"));
    });
  }),
  getSessionDetails: () => new Promise((resolve, reject) => {
    H.onHighlightReady(() => {
      let baseUrl = highlight_obj.getCurrentSessionURL();
      if (baseUrl) {
        let currentSessionTimestamp = highlight_obj.getCurrentSessionTimestamp(), now = (/* @__PURE__ */ new Date()).getTime(), url = new URL(baseUrl), urlWithTimestamp = new URL(baseUrl);
        urlWithTimestamp.searchParams.set(
          "ts",
          // The delta between when the session recording started and now.
          ((now - currentSessionTimestamp) / 1e3).toString()
        ), resolve({
          url: url.toString(),
          urlWithTimestamp: urlWithTimestamp.toString()
        });
      } else
        reject(new Error("Could not get session URL"));
    });
  }),
  onHighlightReady: (func) => {
    try {
      if (highlight_obj && highlight_obj.ready)
        func();
      else
        var interval = setInterval(function() {
          highlight_obj && highlight_obj.ready && (clearInterval(interval), func());
        }, 200);
    } catch (e) {
      HighlightWarning("onHighlightReady", e);
    }
  }
};
typeof window < "u" && (window.H = H);
listenToChromeExtensionMessage();
initializeFetchListener();
initializeWebSocketListener();

// app/components/HighlightInit.tsx
var import_react12 = require("react");
function HighlightInit({ projectId, ...highlightOptions }) {
  return (0, import_react12.useEffect)(() => {
    projectId && H.init(projectId, highlightOptions);
  }, []), null;
}

// app/hooks/useOrganizations.ts
var import_tiny_invariant2 = __toESM(require("tiny-invariant"));

// app/hooks/useChanged.ts
var import_react13 = require("react");
function useChanged(getItem, action106, sendInitialUndefined = !0) {
  let previousItemId = (0, import_react13.useRef)(), item = getItem();
  (0, import_react13.useEffect)(() => {
    previousItemId.current !== item?.id && action106(item), previousItemId.current = item?.id;
  }, [item]), (0, import_react13.useEffect)(() => {
    item !== void 0 || sendInitialUndefined === !1 || action106(item);
  }, []);
}

// app/hooks/useTypedMatchData.ts
var import_react14 = require("@remix-run/react"), import_remix_typedjson4 = require("remix-typedjson");
function useTypedDataFromMatches({
  id,
  matches
}) {
  let match = matches.find((m) => m.id === id);
  return useTypedMatchData(match);
}
function useTypedMatchesData({
  id,
  matches
}) {
  return matches || (matches = (0, import_react14.useMatches)()), useTypedDataFromMatches({ id, matches });
}
function useTypedMatchData(match) {
  if (match)
    return (0, import_remix_typedjson4.deserializeRemix)(match.data);
}

// app/hooks/useOrganizations.ts
var organizationMatchId = "routes/_app.orgs.$organizationSlug";
function useOptionalOrganizations(matches) {
  return useTypedMatchesData({
    id: "routes/_app.orgs.$organizationSlug",
    matches
  })?.organizations;
}
function useOptionalOrganization(matches) {
  let orgs = useOptionalOrganizations(matches), org = useTypedMatchesData({
    id: "routes/_app.orgs.$organizationSlug",
    matches
  });
  if (!(!orgs || !org || !org.organization))
    return orgs.find((o) => o.id === org.organization.id);
}
function useOrganization(matches) {
  let org = useOptionalOrganization(matches);
  return (0, import_tiny_invariant2.default)(org, "No organization found in loader."), org;
}
var useOrganizationChanged = (action106) => {
  useChanged(useOptionalOrganization, action106);
};
function useIsImpersonating(matches) {
  return useTypedMatchesData({
    id: "routes/_app.orgs.$organizationSlug",
    matches
  })?.isImpersonating === !0;
}

// app/components/billing/v3/UpgradePrompt.tsx
var import_solid19 = require("@heroicons/react/20/solid");

// app/assets/images/error-banner-tile@2x.png
var error_banner_tile_2x_default = "/build/_assets/error-banner-tile@2x-BPYJMLWJ.png";

// app/routes/_app.orgs.$organizationSlug/route.tsx
var route_exports = {};
__export(route_exports, {
  ErrorBoundary: () => ErrorBoundary,
  default: () => Organization2,
  loader: () => loader,
  shouldRevalidate: () => shouldRevalidate,
  useCurrentPlan: () => useCurrentPlan
});
var import_react31 = require("@remix-run/react"), import_remix_typedjson7 = require("remix-typedjson"), import_zod72 = require("zod");

// app/components/navigation/SideMenu.tsx
var import_solid17 = require("@heroicons/react/20/solid"), import_solid18 = require("@heroicons/react/24/solid"), import_react29 = require("@remix-run/react"), import_companyicons3 = require("@trigger.dev/companyicons"), import_react30 = require("react");

// app/assets/icons/TaskIcon.tsx
var import_jsx_runtime31 = require("react/jsx-runtime");
function TaskIcon({ className }) {
  return /* @__PURE__ */ (0, import_jsx_runtime31.jsxs)(
    "svg",
    {
      className,
      width: "16",
      height: "16",
      viewBox: "0 0 16 16",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime31.jsx)("g", { clipPath: "url(#clip0_9221_99732)", children: /* @__PURE__ */ (0, import_jsx_runtime31.jsx)(
          "path",
          {
            fillRule: "evenodd",
            clipRule: "evenodd",
            d: "M16 0H0V16H16V0ZM10.8901 5.73995V4.44995H5.11011V5.73995H7.23011V11.55H8.77011V5.73995H10.8901Z",
            fill: "currentColor"
          }
        ) }),
        /* @__PURE__ */ (0, import_jsx_runtime31.jsx)("defs", { children: /* @__PURE__ */ (0, import_jsx_runtime31.jsx)("clipPath", { id: "clip0_9221_99732", children: /* @__PURE__ */ (0, import_jsx_runtime31.jsx)(
          "path",
          {
            d: "M0 2C0 0.895431 0.895431 0 2 0H14C15.1046 0 16 0.895431 16 2V14C16 15.1046 15.1046 16 14 16H2C0.895431 16 0 15.1046 0 14V2Z",
            fill: "white"
          }
        ) }) })
      ]
    }
  );
}

// app/hooks/useFeatures.ts
var import_remix_typedjson5 = require("remix-typedjson");
function useFeatures() {
  return (0, import_remix_typedjson5.useTypedRouteLoaderData)("root")?.features ?? { isManagedCloud: !1, v3Enabled: !1, alertsEnabled: !1 };
}

// app/components/Feedback.tsx
var import_react17 = require("@conform-to/react"), import_zod71 = require("@conform-to/zod"), import_solid6 = require("@heroicons/react/20/solid"), import_solid7 = require("@heroicons/react/24/solid"), import_react18 = require("@remix-run/react"), import_companyicons2 = require("@trigger.dev/companyicons"), import_lucide_react3 = require("lucide-react"), import_react19 = require("react");

// app/routes/resources.feedback.ts
var resources_feedback_exports = {};
__export(resources_feedback_exports, {
  action: () => action,
  feedbackTypeLabel: () => feedbackTypeLabel,
  schema: () => schema
});
var import_zod69 = require("@conform-to/zod"), import_server_runtime3 = require("@remix-run/server-runtime"), import_typescript_sdk = require("@team-plain/typescript-sdk"), import_util5 = require("util"), import_zod70 = require("zod");

// app/services/session.server.ts
var import_node6 = require("@remix-run/node");

// app/models/user.server.ts
async function findOrCreateUser(input) {
  switch (input.authenticationMethod) {
    case "GITHUB":
      return findOrCreateGithubUser(input);
    case "MAGIC_LINK":
      return findOrCreateMagicLinkUser(input);
  }
}
async function findOrCreateMagicLinkUser(input) {
  if (env2.WHITELISTED_EMAILS && !new RegExp(env2.WHITELISTED_EMAILS).test(input.email))
    throw new Error("This email is unauthorized");
  let existingUser = await prisma.user.findFirst({
    where: {
      email: input.email
    }
  }), adminEmailRegex = env2.ADMIN_EMAILS ? new RegExp(env2.ADMIN_EMAILS) : void 0, makeAdmin = adminEmailRegex ? adminEmailRegex.test(input.email) : !1;
  return {
    user: await prisma.user.upsert({
      where: {
        email: input.email
      },
      update: {
        email: input.email
      },
      create: {
        email: input.email,
        authenticationMethod: "MAGIC_LINK",
        admin: makeAdmin
        // only on create, to prevent automatically removing existing admins
      }
    }),
    isNewUser: !existingUser
  };
}
async function findOrCreateGithubUser({
  email,
  authenticationProfile,
  authenticationExtraParams
}) {
  let name = authenticationProfile._json.name, avatarUrl;
  authenticationProfile.photos[0] && (avatarUrl = authenticationProfile.photos[0].value);
  let displayName = authenticationProfile.displayName, authProfile = authenticationProfile || void 0, authExtraParams = authenticationExtraParams || void 0, authIdentifier = `github:${authenticationProfile.id}`, existingUser = await prisma.user.findUnique({
    where: {
      authIdentifier
    }
  }), existingEmailUser = await prisma.user.findUnique({
    where: {
      email
    }
  });
  return existingEmailUser && !existingUser ? {
    user: await prisma.user.update({
      where: {
        email
      },
      data: {
        authenticationProfile: authProfile,
        authenticationExtraParams: authExtraParams,
        avatarUrl,
        authIdentifier
      }
    }),
    isNewUser: !1
  } : existingEmailUser && existingUser ? {
    user: await prisma.user.update({
      where: {
        id: existingUser.id
      },
      data: {}
    }),
    isNewUser: !1
  } : {
    user: await prisma.user.upsert({
      where: {
        authIdentifier
      },
      update: {},
      create: {
        authenticationProfile: authProfile,
        authenticationExtraParams: authExtraParams,
        name,
        avatarUrl,
        displayName,
        authIdentifier,
        email,
        authenticationMethod: "GITHUB"
      }
    }),
    isNewUser: !existingUser
  };
}
async function getUserById(id) {
  return prisma.user.findUnique({ where: { id } });
}
function updateUser({
  id,
  name,
  email,
  marketingEmails,
  referralSource
}) {
  return prisma.user.update({
    where: { id },
    data: { name, email, marketingEmails, referralSource, confirmedBasicDetails: !0 }
  });
}

// app/services/auth.server.ts
var import_remix_auth = require("remix-auth");

// app/services/emailAuth.server.tsx
var import_remix_auth_email_link = require("remix-auth-email-link");

// ../../packages/trigger-sdk/src/utils/typedAsyncLocalStorage.ts
var import_node_async_hooks3 = require("node:async_hooks"), TypedAsyncLocalStorage = class {
  constructor() {
    this.storage = new import_node_async_hooks3.AsyncLocalStorage();
  }
  runWith(context7, fn) {
    return this.storage.run(context7, fn);
  }
  getStore() {
    return this.storage.getStore();
  }
};

// ../../packages/trigger-sdk/src/runLocalStorage.ts
var runLocalStorage = new TypedAsyncLocalStorage();

// ../../packages/trigger-sdk/src/utils.ts
function slugifyId(input) {
  return input.toLowerCase().replace(/\s+/g, "-").replace(/[^a-zA-Z0-9-._~]/g, "");
}

// ../../packages/trigger-sdk/src/job.ts
var Job = class {
  constructor(options2) {
    this.options = options2, this.#validate();
  }
  /**
   * Attaches the job to a client. This is called automatically when you define a job using `client.defineJob()`.
   */
  attachToClient(client3) {
    return client3.attach(this), this;
  }
  get id() {
    return slugifyId(this.options.id);
  }
  get enabled() {
    return typeof this.options.enabled == "boolean" ? this.options.enabled : !0;
  }
  get name() {
    return this.options.name;
  }
  get trigger() {
    return this.options.trigger;
  }
  get version() {
    return this.options.version;
  }
  get logLevel() {
    return this.options.logLevel;
  }
  get integrations() {
    return Object.keys(this.options.integrations ?? {}).reduce(
      (acc, key) => {
        let integration = this.options.integrations[key];
        return acc[key] = {
          id: integration.id,
          metadata: integration.metadata,
          authSource: integration.authSource
        }, acc;
      },
      {}
    );
  }
  toJSON() {
    let internal = this.options.__internal;
    return {
      id: this.id,
      name: this.name,
      version: this.version,
      event: this.trigger.event,
      trigger: this.trigger.toJSON(),
      integrations: this.integrations,
      startPosition: "latest",
      // this is deprecated, leaving this for now to make sure newer clients work with older servers
      enabled: this.enabled,
      preprocessRuns: this.trigger.preprocessRuns,
      internal,
      concurrencyLimit: typeof this.options.concurrencyLimit == "number" ? this.options.concurrencyLimit : typeof this.options.concurrencyLimit == "object" ? { id: this.options.concurrencyLimit.id, limit: this.options.concurrencyLimit.limit } : void 0
    };
  }
  async invoke(param1, param2 = void 0, param3 = void 0) {
    let triggerClient = this.client;
    if (!triggerClient)
      throw new Error(
        "Cannot invoke a job that is not attached to a client. Make sure you attach the job to a client before invoking it."
      );
    let runStore = runLocalStorage.getStore();
    if (typeof param1 == "string") {
      if (!runStore)
        throw new Error(
          "Cannot invoke a job from outside of a run when passing a cacheKey. Make sure you are running the job from within a run or use the invoke method without the cacheKey."
        );
      let options2 = param3 ?? {};
      return await runStore.io.runTask(
        param1,
        async (task) => {
          let result = await triggerClient.invokeJob(this.id, param2, {
            idempotencyKey: task.idempotencyKey,
            ...options2
          });
          return task.outputProperties = [
            {
              label: "Run",
              text: result.id,
              url: `/orgs/${runStore.ctx.organization.slug}/projects/${runStore.ctx.project.slug}/jobs/${this.id}/runs/${result.id}/trigger`
            }
          ], result;
        },
        {
          name: `Manually Invoke '${this.name}'`,
          params: param2,
          properties: [
            {
              label: "Job",
              text: this.id,
              url: `/orgs/${runStore.ctx.organization.slug}/projects/${runStore.ctx.project.slug}/jobs/${this.id}`
            },
            {
              label: "Env",
              text: runStore.ctx.environment.slug
            }
          ]
        }
      );
    }
    if (runStore)
      throw new Error("Cannot invoke a job from within a run without a cacheKey.");
    return await triggerClient.invokeJob(this.id, param1, param2);
  }
  async invokeAndWaitForCompletion(cacheKey, payload, timeoutInSeconds = 60 * 60, options2 = {}) {
    let triggerClient = this.client;
    if (!triggerClient)
      throw new Error(
        "Cannot invoke a job that is not attached to a client. Make sure you attach the job to a client before invoking it."
      );
    let runStore = runLocalStorage.getStore();
    if (!runStore)
      throw new Error(
        "Cannot invoke a job from outside of a run using invokeAndWaitForCompletion. Make sure you are running the job from within a run or use the invoke method instead."
      );
    let { io: io2, ctx } = runStore;
    return await io2.runTask(
      cacheKey,
      async (task) => {
        let parsedPayload = this.trigger.event.parseInvokePayload ? this.trigger.event.parseInvokePayload(payload) ? payload : void 0 : payload, result = await triggerClient.invokeJob(this.id, parsedPayload, {
          idempotencyKey: task.idempotencyKey,
          callbackUrl: task.callbackUrl ?? void 0,
          ...options2
        });
        return task.outputProperties = [
          {
            label: "Run",
            text: result.id,
            url: `/orgs/${ctx.organization.slug}/projects/${ctx.project.slug}/jobs/${this.id}/runs/${result.id}/trigger`
          }
        ], {};
      },
      {
        name: `Manually Invoke '${this.name}' and wait for completion`,
        params: payload,
        properties: [
          {
            label: "Job",
            text: this.id,
            url: `/orgs/${ctx.organization.slug}/projects/${ctx.project.slug}/jobs/${this.id}`
          },
          {
            label: "Env",
            text: ctx.environment.slug
          }
        ],
        callback: {
          enabled: !0,
          timeoutInSeconds
        }
      }
    );
  }
  async batchInvokeAndWaitForCompletion(cacheKey, batch) {
    let runStore = runLocalStorage.getStore();
    if (!runStore)
      throw new Error(
        "Cannot invoke a job from outside of a run using batchInvokeAndWaitForCompletion."
      );
    if (batch.length === 0)
      return [];
    if (batch.length > 25)
      throw new Error(
        `Cannot batch invoke more than 25 items. You tried to batch invoke ${batch.length} items.`
      );
    let { io: io2, ctx } = runStore;
    return await io2.parallel(
      cacheKey,
      batch,
      async (item, index) => await this.invokeAndWaitForCompletion(
        String(index),
        item.payload,
        item.timeoutInSeconds ?? 60 * 60,
        item.options
      ),
      {
        name: `Batch Invoke '${this.name}'`,
        properties: [
          {
            label: "Job",
            text: this.id,
            url: `/orgs/${ctx.organization.slug}/projects/${ctx.project.slug}/jobs/${this.id}`
          },
          {
            label: "Env",
            text: ctx.environment.slug
          }
        ]
      }
    );
  }
  // Make sure the id is valid (must only contain alphanumeric characters and dashes)
  // Make sure the version is valid (must be a valid semver version)
  #validate() {
    if (!this.version.match(/^(\d+)\.(\d+)\.(\d+)$/))
      throw new Error(
        `Invalid job version: "${this.version}". Job versions must be valid semver versions.`
      );
  }
};

// ../../packages/trigger-sdk/src/triggerClient.ts
var import_node_events = __toESM(require("node:events")), import_node_process3 = require("node:process");

// ../../packages/trigger-sdk/package.json
var version2 = "3.0.0-beta.48";

// ../../packages/trigger-sdk/src/apiClient.ts
var import_node_process2 = require("node:process"), import_zod68 = require("zod");

// ../../packages/trigger-sdk/src/io.ts
var import_node_async_hooks4 = require("node:async_hooks"), import_node_crypto10 = require("node:crypto");

// ../../packages/trigger-sdk/src/errors.ts
var ResumeWithTaskError = class {
  constructor(task) {
    this.task = task;
  }
}, ResumeWithParallelTaskError = class {
  constructor(task, childErrors) {
    this.task = task;
    this.childErrors = childErrors;
  }
}, RetryWithTaskError = class {
  constructor(cause, task, retryAt) {
    this.cause = cause;
    this.task = task;
    this.retryAt = retryAt;
  }
}, CanceledWithTaskError = class {
  constructor(task) {
    this.task = task;
  }
}, YieldExecutionError = class {
  constructor(key) {
    this.key = key;
  }
}, AutoYieldExecutionError = class {
  constructor(location, timeRemaining, timeElapsed) {
    this.location = location;
    this.timeRemaining = timeRemaining;
    this.timeElapsed = timeElapsed;
  }
}, AutoYieldWithCompletedTaskExecutionError = class {
  constructor(id, properties, data2, output) {
    this.id = id;
    this.properties = properties;
    this.data = data2;
    this.output = output;
  }
}, AutoYieldRateLimitError = class {
  constructor(resetAtTimestamp) {
    this.resetAtTimestamp = resetAtTimestamp;
  }
}, ParsedPayloadSchemaError = class {
  constructor(schemaErrors) {
    this.schemaErrors = schemaErrors;
  }
};
function isTriggerError(err) {
  return err instanceof ResumeWithTaskError || err instanceof RetryWithTaskError || err instanceof CanceledWithTaskError || err instanceof YieldExecutionError || err instanceof AutoYieldExecutionError || err instanceof AutoYieldWithCompletedTaskExecutionError || err instanceof AutoYieldRateLimitError || err instanceof ResumeWithParallelTaskError;
}
var ErrorWithTask = class extends Error {
  constructor(cause, message) {
    super(message);
    this.cause = cause;
  }
};

// ../../packages/trigger-sdk/src/status.ts
var TriggerStatus = class {
  constructor(id, io2) {
    this.id = id;
    this.io = io2;
  }
  async update(key, status) {
    let properties = [];
    return status.label && properties.push({
      label: "Label",
      text: status.label
    }), status.state && properties.push({
      label: "State",
      text: status.state
    }), await this.io.runTask(
      key,
      async (task) => await this.io.triggerClient.updateStatus(this.io.runId, this.id, status),
      {
        name: status.label ?? "Status update",
        icon: "bell",
        params: {
          ...status
        },
        properties
      }
    );
  }
};

// ../../packages/trigger-sdk/src/types.ts
var import_zod66 = require("zod"), EventSpecificationExampleSchema = import_zod66.z.object({
  id: import_zod66.z.string(),
  name: import_zod66.z.string(),
  icon: import_zod66.z.string().optional(),
  payload: import_zod66.z.any()
});
function waitForEventSchema(schema18) {
  return import_zod66.z.object({
    id: import_zod66.z.string(),
    name: import_zod66.z.string(),
    source: import_zod66.z.string(),
    payload: schema18,
    timestamp: import_zod66.z.coerce.date(),
    context: import_zod66.z.any().optional(),
    accountId: import_zod66.z.string().optional()
  });
}

// ../../packages/trigger-sdk/src/io.ts
var import_zod67 = require("zod");

// ../../packages/trigger-sdk/src/store/keyValueStore.ts
var KeyValueStore = class {
  constructor(apiClient, type = null, namespace = "") {
    this.apiClient = apiClient;
    this.type = type;
    this.namespace = namespace;
  }
  #namespacedKey(key) {
    let parts = [];
    return this.type && parts.push(this.type), this.namespace && parts.push(this.namespace), parts.push(key), parts.join(":");
  }
  #sharedProperties(key) {
    return [
      {
        label: "namespace",
        text: this.type ?? "env"
      },
      {
        label: "key",
        text: key
      }
    ];
  }
  async delete(param1, param2) {
    let runStore = runLocalStorage.getStore();
    if (!runStore) {
      if (typeof param1 != "string")
        throw new Error(
          "Please use the store without a cacheKey when accessing from outside a run."
        );
      return await this.apiClient.store.delete(this.#namespacedKey(param1));
    }
    let { io: io2 } = runStore;
    if (!param2)
      throw new Error("Please provide a non-empty key when accessing the store from inside a run.");
    return await io2.runTask(
      param1,
      async (task) => await this.apiClient.store.delete(this.#namespacedKey(param2)),
      {
        name: "Key-Value Store Delete",
        icon: "database-minus",
        params: { key: param2 },
        properties: this.#sharedProperties(param2),
        style: { style: "minimal" }
      }
    );
  }
  async get(param1, param2) {
    let runStore = runLocalStorage.getStore();
    if (!runStore) {
      if (typeof param1 != "string")
        throw new Error(
          "Please use the store without a cacheKey when accessing from outside a run."
        );
      return await this.apiClient.store.get(this.#namespacedKey(param1));
    }
    let { io: io2 } = runStore;
    if (!param2)
      throw new Error("Please provide a non-empty key when accessing the store from inside a run.");
    return await io2.runTask(
      param1,
      async (task) => await this.apiClient.store.get(this.#namespacedKey(param2)),
      {
        name: "Key-Value Store Get",
        icon: "database-export",
        params: { key: param2 },
        properties: this.#sharedProperties(param2),
        style: { style: "minimal" }
      }
    );
  }
  async has(param1, param2) {
    let runStore = runLocalStorage.getStore();
    if (!runStore) {
      if (typeof param1 != "string")
        throw new Error(
          "Please use the store without a cacheKey when accessing from outside a run."
        );
      return await this.apiClient.store.has(this.#namespacedKey(param1));
    }
    let { io: io2 } = runStore;
    if (!param2)
      throw new Error("Please provide a non-empty key when accessing the store from inside a run.");
    return await io2.runTask(
      param1,
      async (task) => await this.apiClient.store.has(this.#namespacedKey(param2)),
      {
        name: "Key-Value Store Has",
        icon: "database-search",
        params: { key: param2 },
        properties: this.#sharedProperties(param2),
        style: { style: "minimal" }
      }
    );
  }
  async set(param1, param2, param3) {
    let runStore = runLocalStorage.getStore();
    if (!runStore) {
      if (typeof param1 != "string")
        throw new Error(
          "Please use the store without a cacheKey when accessing from outside a run."
        );
      return await this.apiClient.store.set(this.#namespacedKey(param1), param2);
    }
    let { io: io2 } = runStore;
    if (!param2 || typeof param2 != "string")
      throw new Error("Please provide a non-empty key when accessing the store from inside a run.");
    let value = param3;
    return await io2.runTask(
      param1,
      async (task) => await this.apiClient.store.set(this.#namespacedKey(param2), value),
      {
        name: "Key-Value Store Set",
        icon: "database-plus",
        params: { key: param2, value },
        properties: [
          ...this.#sharedProperties(param2),
          ...typeof value != "object" || value === null ? [
            {
              label: "value",
              text: String(value) ?? "undefined"
            }
          ] : []
        ],
        style: { style: "minimal" }
      }
    );
  }
};

// ../../packages/trigger-sdk/src/io.ts
var import_node_buffer3 = require("node:buffer"), JSONOutputSerializer = class {
  serialize(value) {
    return JSON.stringify(value);
  }
  deserialize(value) {
    return value ? JSON.parse(value) : void 0;
  }
}, IO = class {
  constructor(options2) {
    this._outputSerializer = new JSONOutputSerializer();
    this._visitedCacheKeys = /* @__PURE__ */ new Set();
    /**
     * `io.brb()` is an alias of `io.yield()`
     */
    this.brb = this.yield.bind(this);
    this._id = options2.id, this._jobId = options2.jobId, this._apiClient = options2.apiClient, this._triggerClient = options2.client, this._logger = options2.logger ?? new Logger("trigger.dev", options2.logLevel), this._cachedTasks = /* @__PURE__ */ new Map(), this._jobLogger = options2.jobLogger, this._jobLogLevel = options2.jobLogLevel, this._timeOrigin = options2.timeOrigin, this._executionTimeout = options2.executionTimeout, this._envStore = new KeyValueStore(options2.apiClient), this._jobStore = new KeyValueStore(options2.apiClient, "job", options2.jobId), this._runStore = new KeyValueStore(options2.apiClient, "run", options2.id), this._stats = {
      initialCachedTasks: 0,
      lazyLoadedCachedTasks: 0,
      executedTasks: 0,
      cachedTaskHits: 0,
      cachedTaskMisses: 0,
      noopCachedTaskHits: 0,
      noopCachedTaskMisses: 0
    }, options2.cachedTasks && (options2.cachedTasks.forEach((task) => {
      this._cachedTasks.set(task.idempotencyKey, task);
    }), this._stats.initialCachedTasks = options2.cachedTasks.length), this._taskStorage = new import_node_async_hooks4.AsyncLocalStorage(), this._context = options2.context, this._yieldedExecutions = options2.yieldedExecutions ?? [], options2.noopTasksSet && (this._noopTasksBloomFilter = BloomFilter.deserialize(
      options2.noopTasksSet,
      BloomFilter.NOOP_TASK_SET_SIZE
    )), this._cachedTasksCursor = options2.cachedTasksCursor, this._serverVersion = options2.serverVersion ?? "unversioned";
  }
  get stats() {
    return this._stats;
  }
  /** @internal */
  get runId() {
    return this._id;
  }
  /** @internal */
  get triggerClient() {
    return this._triggerClient;
  }
  /** Used to send log messages to the [Run log](https://trigger.dev/docs/documentation/guides/viewing-runs). */
  get logger() {
    return new IOLogger(async (level, message, data2) => {
      let logLevel = "info";
      data2 instanceof Error && (data2 = {
        name: data2.name,
        message: data2.message,
        stack: data2.stack
      }), Logger.satisfiesLogLevel(logLevel, this._jobLogLevel) && await this.runTask(
        [message, level],
        async (task) => {
          switch (level) {
            case "LOG": {
              this._jobLogger?.log(message, data2), logLevel = "log";
              break;
            }
            case "DEBUG": {
              this._jobLogger?.debug(message, data2), logLevel = "debug";
              break;
            }
            case "INFO": {
              this._jobLogger?.info(message, data2), logLevel = "info";
              break;
            }
            case "WARN": {
              this._jobLogger?.warn(message, data2), logLevel = "warn";
              break;
            }
            case "ERROR": {
              this._jobLogger?.error(message, data2), logLevel = "error";
              break;
            }
          }
        },
        {
          name: "log",
          icon: "log",
          description: message,
          params: data2,
          properties: [{ label: "Level", text: level }],
          style: { style: "minimal", variant: level.toLowerCase() },
          noop: !0
        }
      );
    });
  }
  /** `io.random()` is identical to `Math.random()` when called without options but ensures your random numbers are not regenerated on resume or retry. It will return a pseudo-random floating-point number between optional `min` (default: 0, inclusive) and `max` (default: 1, exclusive). Can optionally `round` to the nearest integer.
   * @param cacheKey Should be a stable and unique key inside the `run()`. See [resumability](https://trigger.dev/docs/documentation/concepts/resumability) for more information.
   * @param min Sets the lower bound (inclusive). Can't be higher than `max`.
   * @param max Sets the upper bound (exclusive). Can't be lower than `min`.
   * @param round Controls rounding to the nearest integer. Any `max` integer will become inclusive when enabled. Rounding with floating-point bounds may cause unexpected skew and boundary inclusivity.
   */
  async random(cacheKey, {
    min = 0,
    max = 1,
    round = !1
  } = {}) {
    return await this.runTask(
      cacheKey,
      async (task) => {
        if (min > max)
          throw new Error(
            `Lower bound can't be higher than upper bound - min: ${min}, max: ${max}`
          );
        min === max && await this.logger.warn(
          `Lower and upper bounds are identical. The return value is not random and will always be: ${min}`
        );
        let withinBounds = (max - min) * Math.random() + min;
        return round ? ((!Number.isInteger(min) || !Number.isInteger(max)) && await this.logger.warn(
          "Rounding enabled with floating-point bounds. This may cause unexpected skew and boundary inclusivity."
        ), Math.round(withinBounds)) : withinBounds;
      },
      {
        name: "random",
        icon: "dice-5-filled",
        params: { min, max, round },
        properties: [
          ...min === 0 ? [] : [
            {
              label: "min",
              text: String(min)
            }
          ],
          ...max === 1 ? [] : [
            {
              label: "max",
              text: String(max)
            }
          ],
          ...round === !1 ? [] : [
            {
              label: "round",
              text: String(round)
            }
          ]
        ],
        style: { style: "minimal" }
      }
    );
  }
  /** `io.wait()` waits for the specified amount of time before continuing the Job. Delays work even if you're on a serverless platform with timeouts, or if your server goes down. They utilize [resumability](https://trigger.dev/docs/documentation/concepts/resumability) to ensure that the Run can be resumed after the delay.
   * @param cacheKey Should be a stable and unique key inside the `run()`. See [resumability](https://trigger.dev/docs/documentation/concepts/resumability) for more information.
   * @param seconds The number of seconds to wait. This can be very long, serverless timeouts are not an issue.
   */
  async wait(cacheKey, seconds) {
    return await this.runTask(cacheKey, async (task) => {
    }, {
      name: "wait",
      icon: "clock",
      params: { seconds },
      noop: !0,
      delayUntil: new Date(Date.now() + seconds * 1e3),
      style: { style: "minimal" }
    });
  }
  async waitForEvent(cacheKey, event, options2) {
    let timeoutInSeconds = options2?.timeoutInSeconds ?? 3600;
    return await this.runTask(
      cacheKey,
      async (task, io2) => {
        if (!task.callbackUrl)
          throw new Error("No callbackUrl found on task");
        return await this.triggerClient.createEphemeralEventDispatcher({
          url: task.callbackUrl,
          name: event.name,
          filter: event.filter,
          contextFilter: event.contextFilter,
          source: event.source,
          accountId: event.accountId,
          timeoutInSeconds
        }), {};
      },
      {
        name: "Wait for Event",
        icon: "custom-event",
        params: {
          name: event.name,
          source: event.source,
          filter: event.filter,
          contextFilter: event.contextFilter,
          accountId: event.accountId
        },
        callback: {
          enabled: !0,
          timeoutInSeconds
        },
        properties: [
          {
            label: "Event",
            text: event.name
          },
          {
            label: "Timeout",
            text: `${timeoutInSeconds}s`
          },
          ...event.source ? [{ label: "Source", text: event.source }] : [],
          ...event.accountId ? [{ label: "Account ID", text: event.accountId }] : []
        ],
        parseOutput: (output) => waitForEventSchema(event.schema ?? import_zod67.z.any()).parse(output)
      }
    );
  }
  /** `io.waitForRequest()` allows you to pause the execution of a run until the url provided in the callback is POSTed to.
   *  This is useful for integrating with external services that require a callback URL to be provided, or if you want to be able to wait until an action is performed somewhere else in your system.
   *  @param cacheKey Should be a stable and unique key inside the `run()`. See [resumability](https://trigger.dev/docs/documentation/concepts/resumability) for more information.
   *  @param callback A callback function that will provide the unique URL to POST to.
   *  @param options Options for the callback.
   *  @param options.timeoutInSeconds How long to wait for the request to be POSTed to the callback URL before timing out. Defaults to 1hr.
   *  @returns The POSTed request JSON body.
   *  @example
   * ```ts
    const result = await io.waitForRequest<{ message: string }>(
      "wait-for-request",
      async (url, task) => {
        // Save the URL somewhere so you can POST to it later
        // Or send it to an external service that will POST to it
      },
      { timeoutInSeconds: 60 } // wait 60 seconds
    );
    * ```
   */
  async waitForRequest(cacheKey, callback, options2) {
    let timeoutInSeconds = options2?.timeoutInSeconds ?? 3600;
    return await this.runTask(
      cacheKey,
      async (task, io2) => {
        if (!task.callbackUrl)
          throw new Error("No callbackUrl found on task");
        return task.outputProperties = [
          {
            label: "Callback URL",
            text: task.callbackUrl
          }
        ], callback(task.callbackUrl);
      },
      {
        name: "Wait for Request",
        icon: "clock",
        callback: {
          enabled: !0,
          timeoutInSeconds: options2?.timeoutInSeconds
        },
        properties: [
          {
            label: "Timeout",
            text: `${timeoutInSeconds}s`
          }
        ]
      }
    );
  }
  /** `io.createStatus()` allows you to set a status with associated data during the Run. Statuses can be used by your UI using the react package 
     * @param cacheKey Should be a stable and unique key inside the `run()`. See [resumability](https://trigger.dev/docs/documentation/concepts/resumability) for more information.
     * @param initialStatus The initial status you want this status to have. You can update it during the rub using the returned object.
     * @returns a TriggerStatus object that you can call `update()` on, to update the status.
     * @example 
     * ```ts
     * client.defineJob(
    //...
      run: async (payload, io, ctx) => {
        const generatingImages = await io.createStatus("generating-images", {
          label: "Generating Images",
          state: "loading",
          data: {
            progress: 0.1,
          },
        });
  
        //...do stuff
  
        await generatingImages.update("completed-generation", {
          label: "Generated images",
          state: "success",
          data: {
            progress: 1.0,
            urls: ["http://..."]
          },
        });
  
      //...
    });
     * ```
    */
  async createStatus(cacheKey, initialStatus) {
    let id = typeof cacheKey == "string" ? cacheKey : cacheKey.join("-"), status = new TriggerStatus(id, this);
    return await status.update(cacheKey, initialStatus), status;
  }
  /** `io.backgroundFetch()` fetches data from a URL that can take longer that the serverless timeout. The actual `fetch` request is performed on the Trigger.dev platform, and the response is sent back to you.
   * @param cacheKey Should be a stable and unique key inside the `run()`. See [resumability](https://trigger.dev/docs/documentation/concepts/resumability) for more information.
   * @param url The URL to fetch from.
   * @param requestInit The options for the request
   * @param retry The options for retrying the request if it fails
   * An object where the key is a status code pattern and the value is a retrying strategy.
   * Supported patterns are:
   * - Specific status codes: 429
   * - Ranges: 500-599
   * - Wildcards: 2xx, 3xx, 4xx, 5xx
   */
  async backgroundFetch(cacheKey, url, requestInit, options2) {
    let urlObject = new URL(url);
    return await this.runTask(
      cacheKey,
      async (task) => (console.log("task context", task.context), task.output),
      {
        name: `fetch ${urlObject.hostname}${urlObject.pathname}`,
        params: { url, requestInit, retry: options2?.retry, timeout: options2?.timeout },
        operation: "fetch",
        icon: "background",
        noop: !1,
        properties: [
          {
            label: "url",
            text: url,
            url
          },
          {
            label: "method",
            text: requestInit?.method ?? "GET"
          },
          {
            label: "background",
            text: "true"
          },
          ...options2?.timeout ? [{ label: "timeout", text: `${options2.timeout.durationInMs}ms` }] : []
        ],
        retry: {
          limit: 0
        }
      }
    );
  }
  /** `io.backgroundPoll()` will fetch data from a URL on an interval. The actual `fetch` requests are performed on the Trigger.dev server, so you don't have to worry about serverless function timeouts.
   * @param cacheKey Should be a stable and unique key inside the `run()`. See [resumability](https://trigger.dev/docs/documentation/concepts/resumability) for more information.
   * @param params The options for the background poll
   * @param params.url The URL to fetch from.
   * @param params.requestInit The options for the request, like headers and method
   * @param params.responseFilter An [EventFilter](https://trigger.dev/docs/documentation/guides/event-filter) that allows you to specify when to stop polling.
   * @param params.interval The interval in seconds to poll the URL in seconds. Defaults to 10 seconds which is the minimum.
   * @param params.timeout The timeout in seconds for each request in seconds. Defaults to 10 minutes. Minimum is 60 seconds and max is 1 hour
   * @param params.requestTimeout An optional object that allows you to timeout individual fetch requests
   * @param params.requestTimeout An optional object that allows you to timeout individual fetch requests
   * @param params.requestTimeout.durationInMs The duration in milliseconds to timeout the request
   * 
   * @example
   * ```ts
   * const result = await io.backgroundPoll<{ id: string; status: string; }>("poll", {
      url: `http://localhost:3030/api/v1/runs/${run.id}`,
      requestInit: {
        headers: {
          Accept: "application/json",
          Authorization: redactString`Bearer ${process.env["TRIGGER_API_KEY"]!}`,
        },
      },
      interval: 10,
      timeout: 600,
      responseFilter: {
        status: [200],
        body: {
          status: ["SUCCESS"],
        },
      },
    });
    * ```
   */
  async backgroundPoll(cacheKey, params) {
    let urlObject = new URL(params.url);
    return await this.runTask(
      cacheKey,
      async (task) => task.output,
      {
        name: `poll ${urlObject.hostname}${urlObject.pathname}`,
        params,
        operation: "fetch-poll",
        icon: "clock-bolt",
        noop: !1,
        properties: [
          {
            label: "url",
            text: params.url
          },
          {
            label: "interval",
            text: `${params.interval}s`
          },
          {
            label: "timeout",
            text: `${params.timeout}s`
          }
        ],
        retry: {
          limit: 0
        }
      }
    );
  }
  /** `io.backgroundFetchResponse()` fetches data from a URL that can take longer that the serverless timeout. The actual `fetch` request is performed on the Trigger.dev platform, and the response is sent back to you.
   * @param cacheKey Should be a stable and unique key inside the `run()`. See [resumability](https://trigger.dev/docs/documentation/concepts/resumability) for more information.
   * @param url The URL to fetch from.
   * @param requestInit The options for the request
   * @param retry The options for retrying the request if it fails
   * An object where the key is a status code pattern and the value is a retrying strategy.
   * Supported patterns are:
   * - Specific status codes: 429
   * - Ranges: 500-599
   * - Wildcards: 2xx, 3xx, 4xx, 5xx
   */
  async backgroundFetchResponse(cacheKey, url, requestInit, options2) {
    let urlObject = new URL(url);
    return await this.runTask(
      cacheKey,
      async (task) => task.output,
      {
        name: `fetch response ${urlObject.hostname}${urlObject.pathname}`,
        params: { url, requestInit, retry: options2?.retry, timeout: options2?.timeout },
        operation: "fetch-response",
        icon: "background",
        noop: !1,
        properties: [
          {
            label: "url",
            text: url,
            url
          },
          {
            label: "method",
            text: requestInit?.method ?? "GET"
          },
          {
            label: "background",
            text: "true"
          },
          ...options2?.timeout ? [{ label: "timeout", text: `${options2.timeout.durationInMs}ms` }] : []
        ],
        retry: {
          limit: 0
        }
      }
    );
  }
  /** `io.sendEvent()` allows you to send an event from inside a Job run. The sent event will trigger any Jobs that are listening for that event (based on the name).
   * @param cacheKey Should be a stable and unique key inside the `run()`. See [resumability](https://trigger.dev/docs/documentation/concepts/resumability) for more information.
   * @param event The event to send. The event name must match the name of the event that your Jobs are listening for.
   * @param options Options for sending the event.
   */
  async sendEvent(cacheKey, event, options2) {
    return await this.runTask(
      cacheKey,
      async (task) => await this._triggerClient.sendEvent(event, options2),
      {
        name: "Send Event",
        params: { event, options: options2 },
        icon: "send",
        properties: [
          {
            label: "name",
            text: event.name
          },
          ...event?.id ? [{ label: "ID", text: event.id }] : [],
          ...sendEventOptionsProperties(options2)
        ]
      }
    );
  }
  /** `io.sendEvents()` allows you to send multiple events from inside a Job run. The sent events will trigger any Jobs that are listening for those events (based on the name).
   * @param cacheKey Should be a stable and unique key inside the `run()`. See [resumability](https://trigger.dev/docs/documentation/concepts/resumability) for more information.
   * @param event The events to send. The event names must match the names of the events that your Jobs are listening for.
   * @param options Options for sending the events.
   */
  async sendEvents(cacheKey, events, options2) {
    return await this.runTask(
      cacheKey,
      async (task) => await this._triggerClient.sendEvents(events, options2),
      {
        name: "Send Multiple Events",
        params: { events, options: options2 },
        icon: "send",
        properties: [
          {
            label: "Total Events",
            text: String(events.length)
          },
          ...sendEventOptionsProperties(options2)
        ]
      }
    );
  }
  async getEvent(cacheKey, id) {
    return await this.runTask(
      cacheKey,
      async (task) => await this._triggerClient.getEvent(id),
      {
        name: "getEvent",
        params: { id },
        properties: [
          {
            label: "id",
            text: id
          }
        ]
      }
    );
  }
  /** `io.cancelEvent()` allows you to cancel an event that was previously sent with `io.sendEvent()`. This will prevent any Jobs from running that are listening for that event if the event was sent with a delay
   * @param cacheKey
   * @param eventId
   * @returns
   */
  async cancelEvent(cacheKey, eventId) {
    return await this.runTask(
      cacheKey,
      async (task) => await this._triggerClient.cancelEvent(eventId),
      {
        name: "cancelEvent",
        params: {
          eventId
        },
        properties: [
          {
            label: "id",
            text: eventId
          }
        ]
      }
    );
  }
  async updateSource(cacheKey, options2) {
    return this.runTask(
      cacheKey,
      async (task) => await this._apiClient.updateSource(this._triggerClient.id, options2.key, options2),
      {
        name: "Update Source",
        description: "Update Source",
        properties: [
          {
            label: "key",
            text: options2.key
          }
        ],
        params: options2,
        redact: {
          paths: ["secret"]
        }
      }
    );
  }
  async updateWebhook(cacheKey, options2) {
    return this.runTask(
      cacheKey,
      async (task) => await this._apiClient.updateWebhook(options2.key, options2),
      {
        name: "Update Webhook Source",
        icon: "refresh",
        properties: [
          {
            label: "key",
            text: options2.key
          }
        ],
        params: options2
      }
    );
  }
  /** `io.registerInterval()` allows you to register a [DynamicSchedule](https://trigger.dev/docs/sdk/dynamicschedule) that will trigger any jobs it's attached to on a regular interval.
   * @param cacheKey Should be a stable and unique key inside the `run()`. See [resumability](https://trigger.dev/docs/documentation/concepts/resumability) for more information.
   * @param dynamicSchedule The [DynamicSchedule](https://trigger.dev/docs/sdk/dynamicschedule) to register a new schedule on.
   * @param id A unique id for the interval. This is used to identify and unregister the interval later.
   * @param options The options for the interval.
   * @returns A promise that has information about the interval.
   * @deprecated Use `DynamicSchedule.register` instead.
   */
  async registerInterval(cacheKey, dynamicSchedule, id, options2) {
    return await this.runTask(
      cacheKey,
      async (task) => dynamicSchedule.register(id, {
        type: "interval",
        options: options2
      }),
      {
        name: "register-interval",
        properties: [
          { label: "schedule", text: dynamicSchedule.id },
          { label: "id", text: id },
          { label: "seconds", text: options2.seconds.toString() }
        ],
        params: options2
      }
    );
  }
  /** `io.unregisterInterval()` allows you to unregister a [DynamicSchedule](https://trigger.dev/docs/sdk/dynamicschedule) that was previously registered with `io.registerInterval()`.
   * @param cacheKey Should be a stable and unique key inside the `run()`. See [resumability](https://trigger.dev/docs/documentation/concepts/resumability) for more information.
   * @param dynamicSchedule The [DynamicSchedule](https://trigger.dev/docs/sdk/dynamicschedule) to unregister a schedule on.
   * @param id A unique id for the interval. This is used to identify and unregister the interval later.
   * @deprecated Use `DynamicSchedule.unregister` instead.
   */
  async unregisterInterval(cacheKey, dynamicSchedule, id) {
    return await this.runTask(
      cacheKey,
      async (task) => dynamicSchedule.unregister(id),
      {
        name: "unregister-interval",
        properties: [
          { label: "schedule", text: dynamicSchedule.id },
          { label: "id", text: id }
        ]
      }
    );
  }
  /** `io.registerCron()` allows you to register a [DynamicSchedule](https://trigger.dev/docs/sdk/dynamicschedule) that will trigger any jobs it's attached to on a regular CRON schedule.
   * @param cacheKey Should be a stable and unique key inside the `run()`. See [resumability](https://trigger.dev/docs/documentation/concepts/resumability) for more information.
   * @param dynamicSchedule The [DynamicSchedule](https://trigger.dev/docs/sdk/dynamicschedule) to register a new schedule on.
   * @param id A unique id for the schedule. This is used to identify and unregister the schedule later.
   * @param options The options for the CRON schedule.
   * @deprecated Use `DynamicSchedule.register` instead.
   */
  async registerCron(cacheKey, dynamicSchedule, id, options2) {
    return await this.runTask(
      cacheKey,
      async (task) => dynamicSchedule.register(id, {
        type: "cron",
        options: options2
      }),
      {
        name: "register-cron",
        properties: [
          { label: "schedule", text: dynamicSchedule.id },
          { label: "id", text: id },
          { label: "cron", text: options2.cron }
        ],
        params: options2
      }
    );
  }
  /** `io.unregisterCron()` allows you to unregister a [DynamicSchedule](https://trigger.dev/docs/sdk/dynamicschedule) that was previously registered with `io.registerCron()`.
   * @param cacheKey Should be a stable and unique key inside the `run()`. See [resumability](https://trigger.dev/docs/documentation/concepts/resumability) for more information.
   * @param dynamicSchedule The [DynamicSchedule](https://trigger.dev/docs/sdk/dynamicschedule) to unregister a schedule on.
   * @param id A unique id for the interval. This is used to identify and unregister the interval later.
   * @deprecated Use `DynamicSchedule.unregister` instead.
   */
  async unregisterCron(cacheKey, dynamicSchedule, id) {
    return await this.runTask(
      cacheKey,
      async (task) => dynamicSchedule.unregister(id),
      {
        name: "unregister-cron",
        properties: [
          { label: "schedule", text: dynamicSchedule.id },
          { label: "id", text: id }
        ]
      }
    );
  }
  /** `io.registerTrigger()` allows you to register a [DynamicTrigger](https://trigger.dev/docs/sdk/dynamictrigger) with the specified trigger params.
   * @param cacheKey Should be a stable and unique key inside the `run()`. See [resumability](https://trigger.dev/docs/documentation/concepts/resumability) for more information.
   * @param trigger The [DynamicTrigger](https://trigger.dev/docs/sdk/dynamictrigger) to register.
   * @param id A unique id for the trigger. This is used to identify and unregister the trigger later.
   * @param params The params for the trigger.
   * @deprecated Use `DynamicTrigger.register` instead.
   */
  async registerTrigger(cacheKey, trigger, id, params) {
    return await this.runTask(
      cacheKey,
      async (task) => {
        let registration = await this.runTask(
          "register-source",
          async (subtask1) => trigger.register(id, params),
          {
            name: "register-source"
          }
        );
        return {
          id: registration.id,
          key: registration.source.key
        };
      },
      {
        name: "register-trigger",
        properties: [
          { label: "trigger", text: trigger.id },
          { label: "id", text: id }
        ],
        params
      }
    );
  }
  async getAuth(cacheKey, clientId) {
    if (clientId)
      return this.runTask(
        cacheKey,
        async (task) => await this._triggerClient.getAuth(clientId),
        { name: "get-auth" }
      );
  }
  async parallel(cacheKey, items, callback, options2) {
    return await this.runTask(
      cacheKey,
      async (task) => {
        let outcomes = await Promise.allSettled(
          items.map((item, index) => spaceOut(() => callback(item, index), index, 15))
        );
        if (outcomes.every((outcome) => outcome.status === "fulfilled"))
          return outcomes.map(
            (outcome) => outcome.value
          );
        let nonInternalErrors = outcomes.filter((outcome) => outcome.status === "rejected" && !isTriggerError(outcome.reason)).map((outcome) => outcome);
        if (nonInternalErrors.length > 0)
          throw nonInternalErrors[0].reason;
        let internalErrors = outcomes.filter((outcome) => outcome.status === "rejected" && isTriggerError(outcome.reason)).map((outcome) => outcome).map((outcome) => outcome.reason);
        throw new ResumeWithParallelTaskError(task, internalErrors);
      },
      {
        name: "parallel",
        parallel: !0,
        ...options2 ?? {}
      }
    );
  }
  /** `io.runTask()` allows you to run a [Task](https://trigger.dev/docs/documentation/concepts/tasks) from inside a Job run. A Task is a resumable unit of a Run that can be retried, resumed and is logged. [Integrations](https://trigger.dev/docs/integrations) use Tasks internally to perform their actions.
   *
   * @param cacheKey Should be a stable and unique key inside the `run()`. See [resumability](https://trigger.dev/docs/documentation/concepts/resumability) for more information.
   * @param callback The callback that will be called when the Task is run. The callback receives the Task and the IO as parameters.
   * @param options The options of how you'd like to run and log the Task.
   * @param onError The callback that will be called when the Task fails. The callback receives the error, the Task and the IO as parameters. If you wish to retry then return an object with a `retryAt` property.
   * @returns A Promise that resolves with the returned value of the callback.
   */
  async runTask(cacheKey, callback, options2, onError) {
    let parentId = this._taskStorage.getStore()?.taskId;
    parentId && this._logger.debug("Using parent task", {
      parentId,
      cacheKey,
      options: options2
    }), options2?.noop === !0 && parentId !== void 0 || this.#detectAutoYield("start_task", 500);
    let idempotencyKey = await generateIdempotencyKey(
      [this._id, parentId ?? "", cacheKey].flat()
    );
    if (this._visitedCacheKeys.has(idempotencyKey))
      throw typeof cacheKey == "string" ? new Error(
        `Task with cacheKey "${cacheKey}" has already been executed in this run. Each task must have a unique cacheKey.`
      ) : new Error(
        `Task with cacheKey "${cacheKey.join(
          "-"
        )}" has already been executed in this run. Each task must have a unique cacheKey.`
      );
    this._visitedCacheKeys.add(idempotencyKey);
    let cachedTask = this._cachedTasks.get(idempotencyKey);
    if (cachedTask && cachedTask.status === "COMPLETED")
      return this._logger.debug("Using completed cached task", {
        idempotencyKey
      }), this._stats.cachedTaskHits++, options2?.parseOutput ? options2.parseOutput(cachedTask.output) : cachedTask.output;
    if (options2?.noop && this._noopTasksBloomFilter && this._noopTasksBloomFilter.test(idempotencyKey))
      return this._logger.debug("task idempotency key exists in noopTasksBloomFilter", {
        idempotencyKey
      }), this._stats.noopCachedTaskHits++, {};
    let runOptions = { ...options2 ?? {}, parseOutput: void 0 }, response = await this.#doRunTask({
      idempotencyKey,
      displayKey: typeof cacheKey == "string" ? cacheKey : void 0,
      noop: !1,
      ...runOptions ?? {},
      parentId
    });
    if (!response)
      throw this.#forceYield("failed_task_run"), new Error("Failed to run task");
    let task = response.version === API_VERSIONS.LAZY_LOADED_CACHED_TASKS ? response.body.task : response.body;
    if (task.forceYield && (this._logger.debug("Forcing yield after run task", {
      idempotencyKey
    }), this.#forceYield("after_run_task")), response.version === API_VERSIONS.LAZY_LOADED_CACHED_TASKS) {
      this._cachedTasksCursor = response.body.cachedTasks?.cursor;
      for (let cachedTask2 of response.body.cachedTasks?.tasks ?? [])
        this._cachedTasks.has(cachedTask2.idempotencyKey) || (this._cachedTasks.set(cachedTask2.idempotencyKey, cachedTask2), this._logger.debug("Injecting lazy loaded task into task cache", {
          idempotencyKey: cachedTask2.idempotencyKey
        }), this._stats.lazyLoadedCachedTasks++);
    }
    if (task.status === "CANCELED")
      throw this._logger.debug("Task canceled", {
        idempotencyKey,
        task
      }), new CanceledWithTaskError(task);
    if (task.status === "COMPLETED")
      return task.noop ? (this._logger.debug("Noop Task completed", {
        idempotencyKey
      }), this._noopTasksBloomFilter?.add(task.idempotencyKey)) : (this._logger.debug("Cache miss", {
        idempotencyKey
      }), this._stats.cachedTaskMisses++, this.#addToCachedTasks(task)), options2?.parseOutput ? options2.parseOutput(task.output) : task.output;
    if (task.status === "ERRORED")
      throw this._logger.debug("Task errored", {
        idempotencyKey,
        task
      }), new ErrorWithTask(
        task,
        task.error ?? task?.output ? JSON.stringify(task.output) : "Task errored"
      );
    this.#detectAutoYield("before_execute_task", 1500);
    let executeTask = async () => {
      try {
        let result = await callback(task, this);
        if (task.status === "WAITING" && task.callbackUrl)
          return this._logger.debug("Waiting for remote callback", {
            idempotencyKey,
            task
          }), {};
        let output = this._outputSerializer.serialize(result);
        this._logger.debug("Completing using output", {
          idempotencyKey,
          task
        }), this.#detectAutoYield("before_complete_task", 500, task, output);
        let completedTask = await this.#doCompleteTask(task.id, {
          output,
          properties: task.outputProperties ?? void 0
        });
        if (!completedTask)
          throw this.#forceYield("before_complete_task", task, output), new Error("Failed to complete task");
        if (completedTask.forceYield && (this._logger.debug("Forcing yield after task completed", {
          idempotencyKey
        }), this.#forceYield("after_complete_task")), this._stats.executedTasks++, completedTask.status === "CANCELED")
          throw new CanceledWithTaskError(completedTask);
        this.#detectAutoYield("after_complete_task", 500);
        let deserializedOutput = this._outputSerializer.deserialize(output);
        return options2?.parseOutput ? options2.parseOutput(deserializedOutput) : deserializedOutput;
      } catch (error) {
        if (isTriggerError(error))
          throw error;
        let skipRetrying = !1;
        if (onError)
          try {
            let onErrorResult = onError(error, task, this);
            if (onErrorResult) {
              if (onErrorResult instanceof Error)
                error = onErrorResult;
              else if (skipRetrying = !!onErrorResult.skipRetrying, onErrorResult.retryAt && !skipRetrying) {
                let parsedError2 = ErrorWithStackSchema.safeParse(onErrorResult.error);
                throw new RetryWithTaskError(
                  parsedError2.success ? parsedError2.data : { message: "Unknown error" },
                  task,
                  onErrorResult.retryAt
                );
              }
            }
          } catch (innerError) {
            if (isTriggerError(innerError))
              throw innerError;
            error = innerError;
          }
        if (error instanceof ErrorWithTask)
          throw await this._apiClient.failTask(this._id, task.id, {
            error: error.cause.output
          }), error;
        let parsedError = ErrorWithStackSchema.safeParse(error);
        if (options2?.retry && !skipRetrying) {
          let retryAt = calculateRetryAt(options2.retry, task.attempts - 1);
          if (retryAt)
            throw new RetryWithTaskError(
              parsedError.success ? parsedError.data : { message: "Unknown error" },
              task,
              retryAt
            );
        }
        if (parsedError.success)
          await this._apiClient.failTask(this._id, task.id, {
            error: parsedError.data
          });
        else {
          let message = typeof error == "string" ? error : JSON.stringify(error);
          await this._apiClient.failTask(this._id, task.id, {
            error: { name: "Unknown error", message }
          });
        }
        throw error;
      }
    };
    if (task.status === "WAITING")
      throw this._logger.debug("Task waiting", {
        idempotencyKey,
        task
      }), task.callbackUrl && await this._taskStorage.run({ taskId: task.id }, executeTask), new ResumeWithTaskError(task);
    if (task.status === "RUNNING" && typeof task.operation == "string")
      throw this._logger.debug("Task running operation", {
        idempotencyKey,
        task
      }), new ResumeWithTaskError(task);
    return this._taskStorage.run({ taskId: task.id }, executeTask);
  }
  /**
   * `io.yield()` allows you to yield execution of the current run and resume it in a new function execution. Similar to `io.wait()` but does not create a task and resumes execution immediately.
   */
  yield(cacheKey) {
    if (!supportsFeature("yieldExecution", this._serverVersion)) {
      console.warn(
        "[trigger.dev] io.yield() is not support by the version of the Trigger.dev server you are using, you will need to upgrade your self-hosted Trigger.dev instance."
      );
      return;
    }
    if (!this._yieldedExecutions.includes(cacheKey))
      throw new YieldExecutionError(cacheKey);
  }
  /** `io.try()` allows you to run Tasks and catch any errors that are thrown, it's similar to a normal `try/catch` block but works with [io.runTask()](https://trigger.dev/docs/sdk/io/runtask).
   * A regular `try/catch` block on its own won't work as expected with Tasks. Internally `runTask()` throws some special errors to control flow execution. This is necessary to deal with resumability, serverless timeouts, and retrying Tasks.
   * @param tryCallback The code you wish to run
   * @param catchCallback Thhis will be called if the Task fails. The callback receives the error
   * @returns A Promise that resolves with the returned value or the error
   */
  async try(tryCallback, catchCallback) {
    try {
      return await tryCallback();
    } catch (error) {
      if (isTriggerError(error))
        throw error;
      return await catchCallback(error);
    }
  }
  get store() {
    return {
      env: this._envStore,
      job: this._jobStore,
      run: this._runStore
    };
  }
  #addToCachedTasks(task) {
    this._cachedTasks.set(task.idempotencyKey, task);
  }
  async #doRunTask(task) {
    try {
      return await this._apiClient.runTask(this._id, task, {
        cachedTasksCursor: this._cachedTasksCursor
      });
    } catch (error) {
      if (error instanceof AutoYieldRateLimitError)
        throw this._logger.debug("AutoYieldRateLimitError", {
          error
        }), error;
      return;
    }
  }
  async #doCompleteTask(id, task) {
    try {
      return await this._apiClient.completeTask(this._id, id, task);
    } catch {
      return;
    }
  }
  #detectAutoYield(location, threshold = 1500, task, output) {
    let timeRemaining = this.#getRemainingTimeInMillis();
    if (timeRemaining && timeRemaining < threshold)
      throw task ? new AutoYieldWithCompletedTaskExecutionError(
        task.id,
        task.outputProperties ?? [],
        {
          location,
          timeRemaining,
          timeElapsed: this.#getTimeElapsed()
        },
        output
      ) : new AutoYieldExecutionError(location, timeRemaining, this.#getTimeElapsed());
  }
  #forceYield(location, task, output) {
    let timeRemaining = this.#getRemainingTimeInMillis();
    if (timeRemaining)
      throw task ? new AutoYieldWithCompletedTaskExecutionError(
        task.id,
        task.outputProperties ?? [],
        {
          location,
          timeRemaining,
          timeElapsed: this.#getTimeElapsed()
        },
        output
      ) : new AutoYieldExecutionError(location, timeRemaining, this.#getTimeElapsed());
  }
  #getTimeElapsed() {
    return performance.now() - this._timeOrigin;
  }
  #getRemainingTimeInMillis() {
    if (this._executionTimeout)
      return this._executionTimeout - (performance.now() - this._timeOrigin);
  }
};
async function generateIdempotencyKey(keyMaterial) {
  let key = keyMaterial.map((key2) => typeof key2 == "string" ? key2 : stableStringify(key2)).join(":"), hash = await import_node_crypto10.webcrypto.subtle.digest("SHA-256", import_node_buffer3.Buffer.from(key));
  return import_node_buffer3.Buffer.from(hash).toString("hex");
}
function stableStringify(obj) {
  function sortKeys(obj2) {
    if (typeof obj2 != "object" || obj2 === null)
      return obj2;
    if (Array.isArray(obj2))
      return obj2.map(sortKeys);
    let sortedKeys = Object.keys(obj2).sort(), sortedObj2 = {};
    for (let key of sortedKeys)
      sortedObj2[key] = sortKeys(obj2[key]);
    return sortedObj2;
  }
  let sortedObj = sortKeys(obj);
  return JSON.stringify(sortedObj);
}
var IOLogger = class {
  constructor(callback) {
    this.callback = callback;
  }
  /** Log: essential messages */
  log(message, properties) {
    return this.callback("LOG", message, properties);
  }
  /** For debugging: the least important log level */
  debug(message, properties) {
    return this.callback("DEBUG", message, properties);
  }
  /** Info: the second least important log level */
  info(message, properties) {
    return this.callback("INFO", message, properties);
  }
  /** Warnings: the third most important log level  */
  warn(message, properties) {
    return this.callback("WARN", message, properties);
  }
  /** Error: The second most important log level */
  error(message, properties) {
    return this.callback("ERROR", message, properties);
  }
};
async function spaceOut(callback, index, delay) {
  return await new Promise((resolve) => setTimeout(resolve, index * delay)), await callback();
}
function sendEventOptionsProperties(options2) {
  return [
    ...options2?.accountId ? [{ label: "Account ID", text: options2.accountId }] : [],
    ...options2?.deliverAfter ? [{ label: "Deliver After", text: `${options2.deliverAfter}s` }] : [],
    ...options2?.deliverAt ? [{ label: "Deliver At", text: options2.deliverAt.toISOString() }] : []
  ];
}

// ../../packages/trigger-sdk/src/store/keyValueStoreClient.ts
var KeyValueStoreClient = class {
  constructor(queryStore, type = null, namespace = "") {
    this.queryStore = queryStore;
    this.type = type;
    this.namespace = namespace;
  }
  #serializer = new JSONOutputSerializer();
  #namespacedKey(key) {
    let parts = [];
    return this.type && parts.push(this.type), this.namespace && parts.push(this.namespace), parts.push(key), parts.join(":");
  }
  async delete(key) {
    let result = await this.queryStore("DELETE", {
      key: this.#namespacedKey(key)
    });
    if (result.action !== "DELETE")
      throw new Error(`Unexpected key-value store response: ${result.action}`);
    return result.deleted;
  }
  async get(key) {
    let result = await this.queryStore("GET", {
      key: this.#namespacedKey(key)
    });
    if (result.action !== "GET")
      throw new Error(`Unexpected key-value store response: ${result.action}`);
    return this.#serializer.deserialize(result.value);
  }
  async has(key) {
    let result = await this.queryStore("HAS", {
      key: this.#namespacedKey(key)
    });
    if (result.action !== "HAS")
      throw new Error(`Unexpected key-value store response: ${result.action}`);
    return result.has;
  }
  async set(key, value) {
    let result = await this.queryStore("SET", {
      key: this.#namespacedKey(key),
      value: this.#serializer.serialize(value)
    });
    if (result.action !== "SET")
      throw new Error(`Unexpected key-value store response: ${result.action}`);
    return this.#serializer.deserialize(result.value);
  }
};

// ../../packages/trigger-sdk/src/apiClient.ts
var UnknownVersionError = class extends Error {
  constructor(version3) {
    super(`Unknown version ${version3}`);
  }
}, MAX_RETRIES = 8, EXPONENT_FACTOR = 2, MIN_DELAY_IN_MS = 80, MAX_DELAY_IN_MS = 2e3, JITTER_IN_MS = 50, ApiClient2 = class {
  #apiUrl;
  #options;
  #logger;
  #storeClient;
  constructor(options2) {
    this.#options = options2, this.#apiUrl = this.#options.apiUrl ?? import_node_process2.env.TRIGGER_API_URL ?? "https://api.trigger.dev", this.#logger = new Logger("trigger.dev", this.#options.logLevel), this.#storeClient = new KeyValueStoreClient(this.#queryKeyValueStore.bind(this));
  }
  async registerEndpoint(options2) {
    let apiKey = await this.#apiKey();
    this.#logger.debug("Registering endpoint", {
      url: options2.url,
      name: options2.name
    });
    let response = await fetch(`${this.#apiUrl}/api/v1/endpoints`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${apiKey}`
      },
      body: JSON.stringify({
        url: options2.url,
        name: options2.name
      })
    });
    if (response.status >= 400 && response.status < 500) {
      let body = await response.json();
      throw new Error(body.error);
    }
    if (response.status !== 200)
      throw new Error(`Failed to register entry point, got status code ${response.status}`);
    return await response.json();
  }
  async runTask(runId, task, options2 = {}) {
    let apiKey = await this.#apiKey();
    return this.#logger.debug(`[ApiClient] runTask ${task.displayKey}`), await zodfetchWithVersions(
      this.#logger,
      {
        [API_VERSIONS.LAZY_LOADED_CACHED_TASKS]: RunTaskResponseWithCachedTasksBodySchema
      },
      ServerTaskSchema,
      `${this.#apiUrl}/api/v1/runs/${runId}/tasks`,
      {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${apiKey}`,
          "Idempotency-Key": task.idempotencyKey,
          "X-Cached-Tasks-Cursor": options2.cachedTasksCursor ?? "",
          "Trigger-Version": API_VERSIONS.LAZY_LOADED_CACHED_TASKS
        },
        body: JSON.stringify(task)
      }
    );
  }
  async completeTask(runId, id, task) {
    let apiKey = await this.#apiKey();
    return this.#logger.debug("Complete Task", {
      task
    }), await zodfetch2(
      ServerTaskSchema,
      `${this.#apiUrl}/api/v1/runs/${runId}/tasks/${id}/complete`,
      {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${apiKey}`,
          "Trigger-Version": API_VERSIONS.SERIALIZED_TASK_OUTPUT
        },
        body: JSON.stringify(task)
      }
    );
  }
  async failTask(runId, id, body) {
    let apiKey = await this.#apiKey();
    return this.#logger.debug("Fail Task", {
      id,
      runId,
      body
    }), await zodfetch2(
      ServerTaskSchema,
      `${this.#apiUrl}/api/v1/runs/${runId}/tasks/${id}/fail`,
      {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${apiKey}`
        },
        body: JSON.stringify(body)
      }
    );
  }
  async sendEvent(event, options2 = {}) {
    let apiKey = await this.#apiKey();
    return this.#logger.debug("Sending event", {
      event
    }), await zodfetch2(ApiEventLogSchema, `${this.#apiUrl}/api/v1/events`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${apiKey}`
      },
      body: JSON.stringify({ event, options: options2 })
    });
  }
  async sendEvents(events, options2 = {}) {
    let apiKey = await this.#apiKey();
    return this.#logger.debug("Sending multiple events", {
      events
    }), await zodfetch2(ApiEventLogSchema.array(), `${this.#apiUrl}/api/v1/events/bulk`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${apiKey}`
      },
      body: JSON.stringify({ events, options: options2 })
    });
  }
  async cancelEvent(eventId) {
    let apiKey = await this.#apiKey();
    return this.#logger.debug("Cancelling event", {
      eventId
    }), await zodfetch2(ApiEventLogSchema, `${this.#apiUrl}/api/v1/events/${eventId}/cancel`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${apiKey}`
      }
    });
  }
  async cancelRunsForEvent(eventId) {
    let apiKey = await this.#apiKey();
    return this.#logger.debug("Cancelling runs for event", {
      eventId
    }), await zodfetch2(
      CancelRunsForEventSchema,
      `${this.#apiUrl}/api/v1/events/${eventId}/cancel-runs`,
      {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${apiKey}`
        }
      }
    );
  }
  async updateStatus(runId, id, status) {
    let apiKey = await this.#apiKey();
    return this.#logger.debug("Update status", {
      id,
      status
    }), await zodfetch2(
      JobRunStatusRecordSchema,
      `${this.#apiUrl}/api/v1/runs/${runId}/statuses/${id}`,
      {
        method: "PUT",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${apiKey}`
        },
        body: JSON.stringify(status)
      }
    );
  }
  async updateSource(client3, key, source) {
    let apiKey = await this.#apiKey();
    return this.#logger.debug("activating http source", {
      source
    }), await zodfetch2(
      TriggerSourceSchema,
      `${this.#apiUrl}/api/v2/${client3}/sources/${key}`,
      {
        method: "PUT",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${apiKey}`
        },
        body: JSON.stringify(source)
      }
    );
  }
  async updateWebhook(key, webhookData) {
    let apiKey = await this.#apiKey();
    return this.#logger.debug("activating webhook", {
      webhookData
    }), await zodfetch2(TriggerSourceSchema, `${this.#apiUrl}/api/v1/webhooks/${key}`, {
      method: "PUT",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${apiKey}`
      },
      body: JSON.stringify(webhookData)
    });
  }
  async registerTrigger(client3, id, key, payload, idempotencyKey) {
    let apiKey = await this.#apiKey();
    this.#logger.debug("registering trigger", {
      id,
      payload
    });
    let headers = {
      "Content-Type": "application/json",
      Authorization: `Bearer ${apiKey}`
    };
    return idempotencyKey && (headers["Idempotency-Key"] = idempotencyKey), await zodfetch2(
      RegisterSourceEventSchemaV2,
      `${this.#apiUrl}/api/v2/${client3}/triggers/${id}/registrations/${key}`,
      {
        method: "PUT",
        headers,
        body: JSON.stringify(payload)
      }
    );
  }
  async registerSchedule(client3, id, key, payload) {
    let apiKey = await this.#apiKey();
    return this.#logger.debug("registering schedule", {
      id,
      payload
    }), await zodfetch2(
      RegisterScheduleResponseBodySchema,
      `${this.#apiUrl}/api/v1/${client3}/schedules/${id}/registrations`,
      {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${apiKey}`
        },
        body: JSON.stringify({ id: key, ...payload })
      }
    );
  }
  async unregisterSchedule(client3, id, key) {
    let apiKey = await this.#apiKey();
    return this.#logger.debug("unregistering schedule", {
      id
    }), await zodfetch2(
      import_zod68.z.object({ ok: import_zod68.z.boolean() }),
      `${this.#apiUrl}/api/v1/${client3}/schedules/${id}/registrations/${encodeURIComponent(key)}`,
      {
        method: "DELETE",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${apiKey}`
        }
      }
    );
  }
  async getAuth(client3, id) {
    let apiKey = await this.#apiKey();
    return this.#logger.debug("getting auth", {
      id
    }), await zodfetch2(
      ConnectionAuthSchema,
      `${this.#apiUrl}/api/v1/${client3}/auth/${id}`,
      {
        method: "GET",
        headers: {
          Accept: "application/json",
          Authorization: `Bearer ${apiKey}`
        }
      },
      {
        optional: !0
      }
    );
  }
  async getEvent(eventId) {
    let apiKey = await this.#apiKey();
    return this.#logger.debug("Getting Event", {
      eventId
    }), await zodfetch2(GetEventSchema, `${this.#apiUrl}/api/v2/events/${eventId}`, {
      method: "GET",
      headers: {
        Authorization: `Bearer ${apiKey}`
      }
    });
  }
  async getRun(runId, options2) {
    let apiKey = await this.#apiKey();
    return this.#logger.debug("Getting Run", {
      runId
    }), await zodfetch2(
      GetRunSchema,
      urlWithSearchParams(`${this.#apiUrl}/api/v2/runs/${runId}`, options2),
      {
        method: "GET",
        headers: {
          Authorization: `Bearer ${apiKey}`
        }
      }
    );
  }
  async cancelRun(runId) {
    let apiKey = await this.#apiKey();
    return this.#logger.debug("Cancelling Run", {
      runId
    }), await zodfetch2(GetRunSchema, `${this.#apiUrl}/api/v1/runs/${runId}/cancel`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${apiKey}`
      }
    });
  }
  async getRunStatuses(runId) {
    let apiKey = await this.#apiKey();
    return this.#logger.debug("Getting Run statuses", {
      runId
    }), await zodfetch2(GetRunStatusesSchema, `${this.#apiUrl}/api/v2/runs/${runId}/statuses`, {
      method: "GET",
      headers: {
        Authorization: `Bearer ${apiKey}`
      }
    });
  }
  async getRuns(jobSlug, options2) {
    let apiKey = await this.#apiKey();
    return this.#logger.debug("Getting Runs", {
      jobSlug
    }), await zodfetch2(
      GetRunsSchema,
      urlWithSearchParams(`${this.#apiUrl}/api/v1/jobs/${jobSlug}/runs`, options2),
      {
        method: "GET",
        headers: {
          Authorization: `Bearer ${apiKey}`
        }
      }
    );
  }
  async invokeJob(jobId, payload, options2 = {}) {
    let apiKey = await this.#apiKey();
    this.#logger.debug("Invoking Job", {
      jobId
    });
    let body = {
      payload,
      context: options2.context ?? {},
      options: {
        accountId: options2.accountId,
        callbackUrl: options2.callbackUrl
      }
    };
    return await zodfetch2(InvokeJobResponseSchema, `${this.#apiUrl}/api/v1/jobs/${jobId}/invoke`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${apiKey}`,
        ...options2.idempotencyKey ? { "Idempotency-Key": options2.idempotencyKey } : {}
      },
      body: JSON.stringify(body)
    });
  }
  async cancelRunsForJob(jobId) {
    let apiKey = await this.#apiKey();
    return this.#logger.debug("Cancelling Runs for Job", {
      jobId
    }), await zodfetch2(
      CancelRunsForJobSchema,
      `${this.#apiUrl}/api/v1/jobs/${jobId}/cancel-runs`,
      {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${apiKey}`
        }
      }
    );
  }
  async createEphemeralEventDispatcher(payload) {
    let apiKey = await this.#apiKey();
    return this.#logger.debug("Creating ephemeral event dispatcher", {
      payload
    }), await zodfetch2(
      EphemeralEventDispatcherResponseBodySchema,
      `${this.#apiUrl}/api/v1/event-dispatchers/ephemeral`,
      {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${apiKey}`
        },
        body: JSON.stringify(payload)
      }
    );
  }
  get store() {
    return this.#storeClient;
  }
  async #queryKeyValueStore(action106, data2) {
    let apiKey = await this.#apiKey();
    this.#logger.debug("accessing key-value store", {
      action: action106,
      data: data2
    });
    let encodedKey = encodeURIComponent(data2.key), STORE_URL = `${this.#apiUrl}/api/v1/store/${encodedKey}`, authHeader = {
      Authorization: `Bearer ${apiKey}`
    }, requestInit;
    switch (action106) {
      case "DELETE": {
        requestInit = {
          method: "DELETE",
          headers: authHeader
        };
        break;
      }
      case "GET": {
        requestInit = {
          method: "GET",
          headers: authHeader
        };
        break;
      }
      case "HAS": {
        let headResponse = await fetchHead(STORE_URL, {
          headers: authHeader
        });
        return {
          action: "HAS",
          key: encodedKey,
          has: !!headResponse.ok
        };
      }
      case "SET": {
        if ((data2.value?.length ?? 0) > 262144)
          throw new Error("Max request body size exceeded: 262144 bytes");
        requestInit = {
          method: "PUT",
          headers: {
            ...authHeader,
            "Content-Type": "text/plain"
          },
          body: data2.value
        };
        break;
      }
      default:
        assertExhaustive(action106);
    }
    return await zodfetch2(KeyValueStoreResponseBodySchema, STORE_URL, requestInit);
  }
  async #apiKey() {
    let apiKey = getApiKey(this.#options.apiKey);
    if (apiKey.status === "invalid")
      throw new Error("Invalid API key");
    if (apiKey.status === "missing")
      throw new Error("Missing API key");
    return apiKey.apiKey;
  }
};
function getApiKey(key) {
  let apiKey = key ?? import_node_process2.env.TRIGGER_API_KEY;
  return apiKey ? apiKey.match(/^tr_[a-z]+_[a-zA-Z0-9]+$/) ? { status: "valid", apiKey } : { status: "invalid", apiKey } : { status: "missing" };
}
async function zodfetchWithVersions(logger3, versionedSchemaMap, unversionedSchema, url, requestInit, options2, retryCount = 0) {
  try {
    let fullRequestInit = requestInitWithCache2(requestInit), response = await fetch(url, fullRequestInit);
    if (logger3.debug(`[ApiClient] zodfetchWithVersions ${url} (attempt ${retryCount + 1})`, {
      url,
      retryCount,
      requestHeaders: fullRequestInit?.headers,
      responseHeaders: Object.fromEntries(response.headers.entries())
    }), (!requestInit || requestInit.method === "GET") && response.status === 404 && options2?.optional)
      return;
    if (response.status === 429) {
      let retryAfter = response.headers.get("x-ratelimit-reset");
      if (retryAfter)
        throw new AutoYieldRateLimitError(parseInt(retryAfter));
    }
    if (response.status >= 400 && response.status < 500) {
      let rawBody = await safeResponseText(response), body = safeJsonParse4(rawBody);
      throw logger3.error(`[ApiClient] zodfetchWithVersions failed with ${response.status}`, {
        url,
        retryCount,
        requestHeaders: fullRequestInit?.headers,
        responseHeaders: Object.fromEntries(response.headers.entries()),
        status: response.status,
        rawBody
      }), body && body.error ? new Error(body.error) : new Error(rawBody);
    }
    if (response.status >= 500 && retryCount < MAX_RETRIES) {
      let delay = exponentialBackoff(retryCount + 1);
      return await new Promise((resolve) => setTimeout(resolve, delay)), zodfetchWithVersions(
        logger3,
        versionedSchemaMap,
        unversionedSchema,
        url,
        requestInit,
        options2,
        retryCount + 1
      );
    }
    if (response.status !== 200) {
      let rawBody = await safeResponseText(response);
      throw logger3.error(`[ApiClient] zodfetchWithVersions failed with ${response.status}`, {
        url,
        retryCount,
        requestHeaders: fullRequestInit?.headers,
        responseHeaders: Object.fromEntries(response.headers.entries()),
        status: response.status,
        rawBody
      }), new Error(
        options2?.errorMessage ?? `Failed to fetch ${url}, got status code ${response.status}`
      );
    }
    let jsonBody = await response.json(), version3 = response.headers.get("trigger-version");
    if (!version3)
      return {
        version: "unversioned",
        body: unversionedSchema.parse(jsonBody)
      };
    let versionedSchema = versionedSchemaMap[version3];
    if (!versionedSchema)
      throw new UnknownVersionError(version3);
    return {
      version: version3,
      body: versionedSchema.parse(jsonBody)
    };
  } catch (error) {
    if (error instanceof UnknownVersionError || error instanceof AutoYieldRateLimitError)
      throw error;
    if (logger3.error("[ApiClient] zodfetchWithVersions failed with a connection error", {
      url,
      retryCount,
      error
    }), retryCount < MAX_RETRIES) {
      let delay = exponentialBackoff(retryCount + 1);
      return await new Promise((resolve) => setTimeout(resolve, delay)), zodfetchWithVersions(
        logger3,
        versionedSchemaMap,
        unversionedSchema,
        url,
        requestInit,
        options2,
        retryCount + 1
      );
    }
    throw error;
  }
}
function requestInitWithCache2(requestInit) {
  try {
    let withCache = {
      ...requestInit,
      cache: "no-cache"
    }, _ = new Request("http://localhost", withCache);
    return withCache;
  } catch {
    return requestInit ?? {};
  }
}
async function fetchHead(url, requestInitWithoutMethod, retryCount = 0) {
  let requestInit = {
    ...requestInitWithoutMethod,
    method: "HEAD"
  }, response = await fetch(url, requestInitWithCache2(requestInit));
  if (response.status >= 500 && retryCount < MAX_RETRIES) {
    let delay = exponentialBackoff(retryCount + 1);
    return await new Promise((resolve) => setTimeout(resolve, delay)), fetchHead(url, requestInitWithoutMethod, retryCount + 1);
  }
  return response;
}
async function zodfetch2(schema18, url, requestInit, options2, retryCount = 0) {
  try {
    let response = await fetch(url, requestInitWithCache2(requestInit));
    if ((!requestInit || requestInit.method === "GET") && response.status === 404 && options2?.optional)
      return;
    if (response.status === 429) {
      let retryAfter = response.headers.get("x-ratelimit-reset");
      if (retryAfter)
        throw new AutoYieldRateLimitError(parseInt(retryAfter));
    }
    if (response.status >= 400 && response.status < 500) {
      let body = await response.json();
      throw new Error(body.error);
    }
    if (response.status >= 500 && retryCount < MAX_RETRIES) {
      let delay = exponentialBackoff(retryCount + 1);
      return await new Promise((resolve) => setTimeout(resolve, delay)), zodfetch2(schema18, url, requestInit, options2, retryCount + 1);
    }
    if (response.status !== 200)
      throw new Error(
        options2?.errorMessage ?? `Failed to fetch ${url}, got status code ${response.status}`
      );
    let jsonBody = await response.json();
    return schema18.parse(jsonBody);
  } catch (error) {
    if (error instanceof AutoYieldRateLimitError)
      throw error;
    if (retryCount < MAX_RETRIES) {
      let delay = exponentialBackoff(retryCount + 1);
      return await new Promise((resolve) => setTimeout(resolve, delay)), zodfetch2(schema18, url, requestInit, options2, retryCount + 1);
    }
    throw error;
  }
}
function exponentialBackoff(retryCount) {
  let delay = Math.min(Math.pow(EXPONENT_FACTOR, retryCount) * MIN_DELAY_IN_MS, MAX_DELAY_IN_MS), jitterValue = Math.random() * JITTER_IN_MS;
  return delay + jitterValue;
}
function safeJsonParse4(rawBody) {
  try {
    return JSON.parse(rawBody);
  } catch {
    return;
  }
}
async function safeResponseText(response) {
  try {
    return await response.text();
  } catch {
    return "";
  }
}

// ../../packages/trigger-sdk/src/concurrencyLimit.ts
var ConcurrencyLimit = class {
  constructor(options2) {
    this.options = options2;
  }
  get id() {
    return this.options.id;
  }
  get limit() {
    return this.options.limit;
  }
};

// ../../packages/trigger-sdk/src/utils/formatSchemaErrors.ts
function formatSchemaErrors(errors2) {
  return errors2.map((error) => {
    let { path: path2, message } = error;
    return { path: path2.map(String), message };
  });
}

// ../../packages/trigger-sdk/src/httpEndpoint.ts
var HttpEndpoint = class {
  constructor(options2) {
    this.options = options2;
  }
  get id() {
    return this.options.id;
  }
  onRequest(options2) {
    return new HttpTrigger({
      endpointId: this.id,
      event: this.options.event,
      filter: options2?.filter,
      verify: this.options.verify
    });
  }
  // @internal
  async handleRequest(request) {
    if (this.options.respondWith)
      return this.options.respondWith.handler(request, () => {
        let clonedRequest = request.clone();
        return this.options.verify(clonedRequest);
      });
  }
  toJSON() {
    return {
      id: this.id,
      icon: this.options.event.icon,
      version: "1",
      enabled: this.options.enabled ?? !0,
      event: this.options.event,
      immediateResponseFilter: this.options.respondWith?.filter,
      skipTriggeringRuns: this.options.respondWith?.skipTriggeringRuns,
      source: this.options.event.source
    };
  }
}, HttpTrigger = class {
  constructor(options2) {
    this.options = options2;
  }
  toJSON() {
    return {
      type: "static",
      title: this.options.endpointId,
      properties: this.options.event.properties,
      rule: {
        event: `httpendpoint.${this.options.endpointId}`,
        payload: this.options.filter ?? {},
        source: this.options.event.source
      },
      link: `http-endpoints/${this.options.endpointId}`,
      help: {
        noRuns: {
          text: "To start triggering runs click here to setup your HTTP Endpoint with the external API service you want to receive webhooks from.",
          link: `http-endpoints/${this.options.endpointId}`
        }
      }
    };
  }
  get event() {
    return this.options.event;
  }
  attachToJob(triggerClient, job) {
  }
  get preprocessRuns() {
    return !1;
  }
  async verifyPayload(payload) {
    let clonedRequest = payload.clone();
    return this.options.verify(clonedRequest);
  }
};
function httpEndpoint(options2) {
  let id = slugifyId(options2.id);
  return new HttpEndpoint({
    id,
    enabled: options2.enabled,
    respondWith: options2.respondWith,
    verify: options2.verify,
    event: {
      name: id,
      title: options2.title ?? "HTTP Trigger",
      source: options2.source,
      icon: options2.icon ?? "webhook",
      properties: options2.properties,
      examples: options2.examples ? options2.examples : [
        {
          id: "basic-request",
          name: "Basic Request",
          icon: "http-post",
          payload: {
            url: "https://cloud.trigger.dev",
            method: "POST",
            headers: {
              "Content-Type": "application/json"
            },
            rawBody: JSON.stringify({
              foo: "bar"
            })
          }
        }
      ],
      parsePayload: (rawPayload) => {
        let result = RequestWithRawBodySchema.safeParse(rawPayload);
        if (!result.success)
          throw new ParsedPayloadSchemaError(formatSchemaErrors(result.error.issues));
        return new Request(new URL(result.data.url), {
          method: result.data.method,
          headers: result.data.headers,
          body: result.data.rawBody
        });
      }
    }
  });
}

// ../../packages/trigger-sdk/src/ioWithIntegrations.ts
function createIOWithIntegrations(io2, auths, integrations) {
  if (!integrations)
    return io2;
  let connections = Object.entries(integrations).reduce(
    (acc, [connectionKey, integration]) => {
      let auth = auths?.[connectionKey];
      return acc[connectionKey] = {
        integration,
        auth
      }, acc;
    },
    {}
  );
  return new Proxy(io2, {
    get(target, prop, receiver) {
      if (prop === "__io")
        return io2;
      if (typeof prop == "string" && prop in connections) {
        let { integration, auth } = connections[prop];
        return integration.cloneForRun(io2, prop, auth);
      }
      let value = Reflect.get(target, prop, receiver);
      return typeof value == "function" ? value.bind(target) : value;
    }
  });
}

// ../../packages/trigger-sdk/src/triggers/dynamic.ts
var DynamicTrigger = class {
  #client;
  #options;
  /** `DynamicTrigger` allows you to define a trigger that can be configured dynamically at runtime.
   * @param client The `TriggerClient` instance to use for registering the trigger.
   * @param options The options for the dynamic trigger.
   * */
  constructor(client3, options2) {
    this.#client = client3, this.#options = options2, this.source = options2.source, client3.attachDynamicTrigger(this);
  }
  toJSON() {
    return {
      type: "dynamic",
      id: this.#options.id
    };
  }
  get id() {
    return this.#options.id;
  }
  get event() {
    return this.#options.event;
  }
  // @internal
  registeredTriggerForParams(params, options2 = {}) {
    let key = slugifyId(this.source.key(params));
    return {
      rule: {
        event: this.event.name,
        source: this.event.source,
        payload: deepMergeFilters(
          this.source.filter(params),
          this.event.filter ?? {},
          options2.filter ?? {}
        )
      },
      source: {
        version: "2",
        key,
        channel: this.source.channel,
        params,
        //todo add other options here
        options: {
          event: typeof this.event.name == "string" ? [this.event.name] : this.event.name
        },
        integration: {
          id: this.source.integration.id,
          metadata: this.source.integration.metadata,
          authSource: this.source.integration.authSource
        }
      },
      accountId: options2.accountId
    };
  }
  /** Use this method to register a new configuration with the DynamicTrigger.
   * @param key The key for the configuration. This will be used to identify the configuration when it is triggered.
   * @param params The params for the configuration.
   * @param options Options for the configuration.
   * @param options.accountId The accountId to associate with the configuration.
   * @param options.filter The filter to use for the configuration.
   *
   */
  async register(key, params, options2 = {}) {
    let runStore = runLocalStorage.getStore();
    if (!runStore)
      return this.#client.registerTrigger(
        this.id,
        key,
        this.registeredTriggerForParams(params, options2)
      );
    let { io: io2 } = runStore;
    return await io2.runTask(
      [key, "register"],
      async (task) => this.#client.registerTrigger(
        this.id,
        key,
        this.registeredTriggerForParams(params, options2),
        task.idempotencyKey
      ),
      {
        name: "Register Dynamic Trigger",
        properties: [
          { label: "Dynamic Trigger ID", text: this.id },
          { label: "ID", text: key }
        ],
        params
      }
    );
  }
  attachToJob(triggerClient, job) {
    triggerClient.attachJobToDynamicTrigger(job, this);
  }
  get preprocessRuns() {
    return !0;
  }
  async verifyPayload(payload) {
    return { success: !0 };
  }
};

// ../../packages/trigger-sdk/src/triggers/eventTrigger.ts
var EventTrigger = class {
  #options;
  constructor(options2) {
    this.#options = options2;
  }
  toJSON() {
    return {
      type: "static",
      title: this.#options.name ?? this.#options.event.title,
      rule: {
        event: this.#options.name ?? this.#options.event.name,
        source: this.#options.source ?? "trigger.dev",
        payload: deepMergeFilters(this.#options.filter ?? {}, this.#options.event.filter ?? {})
      }
    };
  }
  get event() {
    return this.#options.event;
  }
  attachToJob(triggerClient, job) {
  }
  get preprocessRuns() {
    return !1;
  }
  async verifyPayload(payload) {
    if (this.#options.verify && payload instanceof Request) {
      let clonedRequest = payload.clone();
      return this.#options.verify(clonedRequest);
    }
    return { success: !0 };
  }
};

// ../../packages/trigger-sdk/src/triggers/scheduled.ts
var import_cronstrue = __toESM(require("cronstrue"));
var examples = [
  {
    id: "now",
    name: "Now",
    icon: "clock",
    payload: {
      ts: currentDate.marker,
      lastTimestamp: currentDate.marker
    }
  }
];
var DynamicSchedule = class {
  /**
   * @param client The `TriggerClient` instance to use for registering the trigger.
   * @param options The options for the schedule.
   */
  constructor(client3, options2) {
    this.client = client3;
    this.options = options2;
    client3.attachDynamicSchedule(this.options.id);
  }
  get id() {
    return this.options.id;
  }
  get event() {
    return {
      name: "trigger.scheduled",
      title: "Dynamic Schedule",
      source: "trigger.dev",
      icon: "schedule-dynamic",
      examples,
      parsePayload: ScheduledPayloadSchema.parse
    };
  }
  async register(key, metadata) {
    let runStore = runLocalStorage.getStore();
    if (!runStore)
      return this.client.registerSchedule(this.id, key, metadata);
    let { io: io2 } = runStore;
    return await io2.runTask(
      [key, "register"],
      async (task) => this.client.registerSchedule(this.id, key, metadata),
      {
        name: "Register Schedule",
        icon: metadata.type === "cron" ? "schedule-cron" : "schedule-interval",
        properties: [
          { label: "Dynamic Schedule", text: this.id },
          { label: "Schedule ID", text: key }
        ],
        params: metadata
      }
    );
  }
  async unregister(key) {
    let runStore = runLocalStorage.getStore();
    if (!runStore)
      return this.client.unregisterSchedule(this.id, key);
    let { io: io2 } = runStore;
    return await io2.runTask(
      [key, "unregister"],
      async (task) => this.client.unregisterSchedule(this.id, key),
      {
        name: "Unregister Schedule",
        icon: "schedule",
        properties: [
          { label: "Dynamic Schedule", text: this.id },
          { label: "Schedule ID", text: key }
        ]
      }
    );
  }
  attachToJob(triggerClient, job) {
    triggerClient.attachDynamicScheduleToJob(this.options.id, job);
  }
  get preprocessRuns() {
    return !1;
  }
  async verifyPayload(payload) {
    return { success: !0 };
  }
  toJSON() {
    return {
      type: "dynamic",
      id: this.options.id
    };
  }
};

// ../../packages/trigger-sdk/src/triggerClient.ts
var registerWebhookEvent = (key) => ({
  name: `${REGISTER_WEBHOOK}.${key}`,
  title: "Register Webhook",
  source: "internal",
  icon: "webhook",
  parsePayload: RegisterWebhookPayloadSchema.parse
}), registerSourceEvent = {
  name: REGISTER_SOURCE_EVENT_V2,
  title: "Register Source",
  source: "internal",
  icon: "register-source",
  parsePayload: RegisterSourceEventSchemaV2.parse
}, TriggerClient = class {
  constructor(options2) {
    this.#registeredJobs = {};
    this.#registeredSources = {};
    this.#registeredWebhooks = {};
    this.#registeredHttpSourceHandlers = {};
    this.#registeredWebhookSourceHandlers = {};
    this.#registeredDynamicTriggers = {};
    this.#jobMetadataByDynamicTriggers = {};
    this.#registeredSchedules = {};
    this.#registeredHttpEndpoints = {};
    this.#authResolvers = {};
    this.#eventEmitter = new import_node_events.default();
    this.on = this.#eventEmitter.on.bind(this.#eventEmitter);
    this.id = options2.id, this.#options = options2, this.#internalLogger = new Logger("trigger.dev", this.#options.verbose ? "debug" : "log", [
      "output",
      "noopTasksSet"
    ]), this.#client = new ApiClient2({
      logLevel: this.#options.verbose ? "debug" : "log",
      ...this.#options
    }), this.#envStore = new KeyValueStore(this.#client);
  }
  #options;
  #registeredJobs;
  #registeredSources;
  #registeredWebhooks;
  #registeredHttpSourceHandlers;
  #registeredWebhookSourceHandlers;
  #registeredDynamicTriggers;
  #jobMetadataByDynamicTriggers;
  #registeredSchedules;
  #registeredHttpEndpoints;
  #authResolvers;
  #envStore;
  #eventEmitter;
  #client;
  #internalLogger;
  async handleRequest(request, timeOrigin = performance.now()) {
    this.#internalLogger.debug("handling request", {
      url: request.url,
      headers: Object.fromEntries(request.headers.entries()),
      method: request.method
    });
    let apiKey = request.headers.get("x-trigger-api-key"), triggerVersion = request.headers.get("x-trigger-version");
    switch (this.authorized(apiKey)) {
      case "authorized":
        break;
      case "missing-client":
        return {
          status: 401,
          body: {
            message: "Unauthorized: client missing apiKey"
          },
          headers: this.#standardResponseHeaders(timeOrigin)
        };
      case "missing-header":
        return {
          status: 401,
          body: {
            message: "Unauthorized: missing x-trigger-api-key header"
          },
          headers: this.#standardResponseHeaders(timeOrigin)
        };
      case "unauthorized":
        return {
          status: 401,
          body: {
            message: "Forbidden: client apiKey mismatch: Make sure you are using the correct API Key for your environment"
          },
          headers: this.#standardResponseHeaders(timeOrigin)
        };
    }
    if (request.method !== "POST")
      return {
        status: 405,
        body: {
          message: "Method not allowed (only POST is allowed)"
        },
        headers: this.#standardResponseHeaders(timeOrigin)
      };
    let action106 = request.headers.get("x-trigger-action");
    if (!action106)
      return {
        status: 400,
        body: {
          message: "Missing x-trigger-action header"
        },
        headers: this.#standardResponseHeaders(timeOrigin)
      };
    switch (action106) {
      case "PING": {
        let endpointId = request.headers.get("x-trigger-endpoint-id");
        return endpointId ? this.id !== endpointId ? {
          status: 200,
          body: {
            ok: !1,
            error: `Endpoint ID mismatch error. Expected ${this.id}, got ${endpointId}`
          },
          headers: this.#standardResponseHeaders(timeOrigin)
        } : {
          status: 200,
          body: {
            ok: !0
          },
          headers: this.#standardResponseHeaders(timeOrigin)
        } : {
          status: 200,
          body: {
            ok: !1,
            error: "Missing endpoint ID"
          },
          headers: this.#standardResponseHeaders(timeOrigin)
        };
      }
      case "INDEX_ENDPOINT":
        return {
          status: 200,
          body: {
            jobs: this.#buildJobsIndex(),
            sources: Object.values(this.#registeredSources),
            webhooks: Object.values(this.#registeredWebhooks),
            dynamicTriggers: Object.values(this.#registeredDynamicTriggers).map((trigger) => ({
              id: trigger.id,
              jobs: this.#jobMetadataByDynamicTriggers[trigger.id] ?? [],
              registerSourceJob: {
                id: dynamicTriggerRegisterSourceJobId(trigger.id),
                version: trigger.source.version
              }
            })),
            dynamicSchedules: Object.entries(this.#registeredSchedules).map(([id, jobs]) => ({
              id,
              jobs
            })),
            httpEndpoints: Object.entries(this.#registeredHttpEndpoints).map(
              ([id, endpoint]) => endpoint.toJSON()
            )
          },
          headers: this.#standardResponseHeaders(timeOrigin)
        };
      case "INITIALIZE_TRIGGER": {
        let json118 = await request.json(), body = InitializeTriggerBodySchema.safeParse(json118);
        if (!body.success)
          return {
            status: 400,
            body: {
              message: "Invalid trigger body"
            }
          };
        let dynamicTrigger = this.#registeredDynamicTriggers[body.data.id];
        return dynamicTrigger ? {
          status: 200,
          body: dynamicTrigger.registeredTriggerForParams(body.data.params),
          headers: this.#standardResponseHeaders(timeOrigin)
        } : {
          status: 404,
          body: {
            message: "Dynamic trigger not found"
          }
        };
      }
      case "EXECUTE_JOB": {
        let json118 = await request.json(), execution = RunJobBodySchema.safeParse(json118);
        if (!execution.success)
          return {
            status: 400,
            body: {
              message: "Invalid execution"
            }
          };
        let job = this.#registeredJobs[execution.data.job.id];
        if (!job)
          return {
            status: 404,
            body: {
              message: "Job not found"
            }
          };
        let results = await this.#executeJob(execution.data, job, timeOrigin, triggerVersion);
        this.#internalLogger.debug("executed job", {
          results,
          job: job.id,
          version: job.version,
          triggerVersion
        });
        let standardHeaders = this.#standardResponseHeaders(timeOrigin);
        return standardHeaders["x-trigger-run-metadata"] = this.#serializeRunMetadata(job), {
          status: 200,
          body: results,
          headers: standardHeaders
        };
      }
      case "PREPROCESS_RUN": {
        let json118 = await request.json(), body = PreprocessRunBodySchema.safeParse(json118);
        if (!body.success)
          return {
            status: 400,
            body: {
              message: "Invalid body"
            }
          };
        let job = this.#registeredJobs[body.data.job.id];
        if (!job)
          return {
            status: 404,
            body: {
              message: "Job not found"
            }
          };
        let results = await this.#preprocessRun(body.data, job);
        return {
          status: 200,
          body: {
            abort: results.abort,
            properties: results.properties
          },
          headers: this.#standardResponseHeaders(timeOrigin)
        };
      }
      case "DELIVER_HTTP_SOURCE_REQUEST": {
        let headers = HttpSourceRequestHeadersSchema.safeParse(
          Object.fromEntries(request.headers.entries())
        );
        if (!headers.success)
          return {
            status: 400,
            body: {
              message: "Invalid headers"
            }
          };
        let sourceRequestNeedsBody = headers.data["x-ts-http-method"] !== "GET", sourceRequestInit = {
          method: headers.data["x-ts-http-method"],
          headers: headers.data["x-ts-http-headers"],
          body: sourceRequestNeedsBody ? request.body : void 0
        };
        if (sourceRequestNeedsBody)
          try {
            sourceRequestInit.duplex = "half";
          } catch {
          }
        let sourceRequest = new Request(headers.data["x-ts-http-url"], sourceRequestInit), key = headers.data["x-ts-key"], dynamicId = headers.data["x-ts-dynamic-id"], secret2 = headers.data["x-ts-secret"], params = headers.data["x-ts-params"], data2 = headers.data["x-ts-data"], auth = headers.data["x-ts-auth"], inputMetadata = headers.data["x-ts-metadata"], source = {
          key,
          dynamicId,
          secret: secret2,
          params,
          data: data2,
          auth,
          metadata: inputMetadata
        }, { response, events, metadata } = await this.#handleHttpSourceRequest(
          source,
          sourceRequest
        );
        return {
          status: 200,
          body: {
            events,
            response,
            metadata
          },
          headers: this.#standardResponseHeaders(timeOrigin)
        };
      }
      case "DELIVER_HTTP_ENDPOINT_REQUEST_FOR_RESPONSE": {
        let headers = HttpEndpointRequestHeadersSchema.safeParse(
          Object.fromEntries(request.headers.entries())
        );
        if (!headers.success)
          return {
            status: 400,
            body: {
              message: "Invalid headers"
            }
          };
        let sourceRequestNeedsBody = headers.data["x-ts-http-method"] !== "GET", sourceRequestInit = {
          method: headers.data["x-ts-http-method"],
          headers: headers.data["x-ts-http-headers"],
          body: sourceRequestNeedsBody ? request.body : void 0
        };
        if (sourceRequestNeedsBody)
          try {
            sourceRequestInit.duplex = "half";
          } catch {
          }
        let sourceRequest = new Request(headers.data["x-ts-http-url"], sourceRequestInit), key = headers.data["x-ts-key"], { response } = await this.#handleHttpEndpointRequestForResponse(
          {
            key
          },
          sourceRequest
        );
        return {
          status: 200,
          body: response,
          headers: this.#standardResponseHeaders(timeOrigin)
        };
      }
      case "DELIVER_WEBHOOK_REQUEST": {
        let headers = WebhookSourceRequestHeadersSchema.safeParse(
          Object.fromEntries(request.headers.entries())
        );
        if (!headers.success)
          return {
            status: 400,
            body: {
              message: "Invalid headers"
            }
          };
        let sourceRequestNeedsBody = headers.data["x-ts-http-method"] !== "GET", sourceRequestInit = {
          method: headers.data["x-ts-http-method"],
          headers: headers.data["x-ts-http-headers"],
          body: sourceRequestNeedsBody ? request.body : void 0
        };
        if (sourceRequestNeedsBody)
          try {
            sourceRequestInit.duplex = "half";
          } catch {
          }
        let webhookRequest = new Request(headers.data["x-ts-http-url"], sourceRequestInit), key = headers.data["x-ts-key"], secret2 = headers.data["x-ts-secret"], params = headers.data["x-ts-params"], ctx = {
          key,
          secret: secret2,
          params
        }, { response, verified, error } = await this.#handleWebhookRequest(webhookRequest, ctx);
        return {
          status: 200,
          body: {
            response,
            verified,
            error
          },
          headers: this.#standardResponseHeaders(timeOrigin)
        };
      }
      case "VALIDATE":
        return {
          status: 200,
          body: {
            ok: !0,
            endpointId: this.id
          },
          headers: this.#standardResponseHeaders(timeOrigin)
        };
      case "PROBE_EXECUTION_TIMEOUT": {
        let timeout = (await request.json())?.timeout ?? 15 * 60 * 1e3;
        return await new Promise((resolve) => setTimeout(resolve, timeout)), {
          status: 200,
          body: {
            ok: !0
          },
          headers: this.#standardResponseHeaders(timeOrigin)
        };
      }
      case "RUN_NOTIFICATION": {
        let runNotification = await request.json();
        return runNotification.ok ? await this.#deliverSuccessfulRunNotification(runNotification) : await this.#deliverFailedRunNotification(runNotification), {
          status: 200,
          body: {
            ok: !0
          },
          headers: this.#standardResponseHeaders(timeOrigin)
        };
      }
    }
    return {
      status: 405,
      body: {
        message: "Method not allowed"
      },
      headers: this.#standardResponseHeaders(timeOrigin)
    };
  }
  defineJob(options2) {
    let existingRegisteredJob = this.#registeredJobs[options2.id];
    existingRegisteredJob && options2.__internal !== !0 && console.warn(
      `[@trigger.dev/sdk] Warning: The Job "${existingRegisteredJob.id}" you're attempting to define has already been defined. Please assign a different ID to the job.`
    );
    let job = new Job(options2);
    return this.attach(job), job;
  }
  defineAuthResolver(integration, resolver) {
    return this.#authResolvers[integration.id] = resolver, this;
  }
  defineDynamicSchedule(options2) {
    return new DynamicSchedule(this, options2);
  }
  defineDynamicTrigger(options2) {
    return new DynamicTrigger(this, options2);
  }
  /**
   * An [HTTP endpoint](https://trigger.dev/docs/documentation/concepts/http-endpoints) allows you to create a [HTTP Trigger](https://trigger.dev/docs/documentation/concepts/triggers/http), which means you can trigger your Jobs from any webhooks.
   * @param options The Endpoint options
   * @returns An HTTP Endpoint, that can be used to create an HTTP Trigger.
   * @link https://trigger.dev/docs/documentation/concepts/http-endpoints
   */
  defineHttpEndpoint(options2, suppressWarnings = !1) {
    let existingHttpEndpoint = this.#registeredHttpEndpoints[options2.id];
    !suppressWarnings && existingHttpEndpoint && console.warn(
      `[@trigger.dev/sdk] Warning: The HttpEndpoint "${existingHttpEndpoint.id}" you're attempting to define has already been defined. Please assign a different ID to the HttpEndpoint.`
    );
    let endpoint = httpEndpoint(options2);
    return this.#registeredHttpEndpoints[endpoint.id] = endpoint, endpoint;
  }
  defineConcurrencyLimit(options2) {
    return new ConcurrencyLimit(options2);
  }
  attach(job) {
    this.#registeredJobs[job.id] = job, job.trigger.attachToJob(this, job), job.client = this;
  }
  attachDynamicTrigger(trigger) {
    this.#registeredDynamicTriggers[trigger.id] = trigger, this.defineJob({
      id: dynamicTriggerRegisterSourceJobId(trigger.id),
      name: `Register dynamic trigger ${trigger.id}`,
      version: trigger.source.version,
      trigger: new EventTrigger({
        event: registerSourceEvent,
        filter: { dynamicTriggerId: [trigger.id] }
      }),
      integrations: {
        integration: trigger.source.integration
      },
      run: async (event, io2, ctx) => {
        let updates = await trigger.source.register(event.source.params, event, io2, ctx);
        if (updates)
          return await io2.updateSource("update-source", {
            key: event.source.key,
            ...updates
          });
      },
      __internal: !0
    });
  }
  attachJobToDynamicTrigger(job, trigger) {
    let jobs = this.#jobMetadataByDynamicTriggers[trigger.id] ?? [];
    jobs.push({ id: job.id, version: job.version }), this.#jobMetadataByDynamicTriggers[trigger.id] = jobs;
  }
  attachSource(options2) {
    this.#registeredHttpSourceHandlers[options2.key] = async (s, r) => await options2.source.handle(s, r, this.#internalLogger);
    let registeredSource = this.#registeredSources[options2.key];
    registeredSource || (registeredSource = {
      version: "2",
      channel: options2.source.channel,
      key: options2.key,
      params: options2.params,
      options: {},
      integration: {
        id: options2.source.integration.id,
        metadata: options2.source.integration.metadata,
        authSource: options2.source.integration.authSource
      },
      registerSourceJob: {
        id: options2.key,
        version: options2.source.version
      }
    });
    let newOptions = deepMergeOptions(
      {
        event: typeof options2.event.name == "string" ? [options2.event.name] : options2.event.name
      },
      options2.options ?? {}
    );
    registeredSource.options = deepMergeOptions(registeredSource.options, newOptions), this.#registeredSources[options2.key] = registeredSource, this.defineJob({
      id: options2.key,
      name: options2.key,
      version: options2.source.version,
      trigger: new EventTrigger({
        event: registerSourceEvent,
        filter: { source: { key: [options2.key] } }
      }),
      integrations: {
        integration: options2.source.integration
      },
      run: async (event, io2, ctx) => {
        let updates = await options2.source.register(options2.params, event, io2, ctx);
        if (updates)
          return await io2.updateSource("update-source", {
            key: options2.key,
            ...updates
          });
      },
      __internal: !0
    });
  }
  attachDynamicSchedule(key) {
    let jobs = this.#registeredSchedules[key] ?? [];
    this.#registeredSchedules[key] = jobs;
  }
  attachDynamicScheduleToJob(key, job) {
    let jobs = this.#registeredSchedules[key] ?? [];
    jobs.push({ id: job.id, version: job.version }), this.#registeredSchedules[key] = jobs;
  }
  attachWebhook(options2) {
    let { source } = options2;
    this.#registeredWebhookSourceHandlers[options2.key] = {
      verify: source.verify.bind(source),
      generateEvents: source.generateEvents.bind(source)
    };
    let registeredWebhook = this.#registeredWebhooks[options2.key];
    registeredWebhook ? registeredWebhook.config = deepMergeOptions(registeredWebhook.config, options2.config) : registeredWebhook = {
      key: options2.key,
      params: options2.params,
      config: options2.config,
      integration: {
        id: source.integration.id,
        metadata: source.integration.metadata,
        authSource: source.integration.authSource
      },
      httpEndpoint: {
        id: options2.key
      }
    }, this.#registeredWebhooks[options2.key] = registeredWebhook, this.defineJob({
      id: `webhook.register.${options2.key}`,
      name: `webhook.register.${options2.key}`,
      version: source.version,
      trigger: new EventTrigger({
        event: registerWebhookEvent(options2.key)
      }),
      integrations: {
        integration: source.integration
      },
      run: async (registerPayload, io2, ctx) => await io2.try(
        async () => {
          this.#internalLogger.debug("[webhook.register] Start");
          let crudOptions = {
            io: io2,
            // this is just a more strongly typed payload
            ctx: registerPayload
          };
          return registerPayload.active ? (this.#internalLogger.debug("[webhook.register] Already active, run update"), source.crud.update ? await source.crud.update(crudOptions) : (this.#internalLogger.debug(
            "[webhook.register] Run delete and create instead of update"
          ), await source.crud.delete(crudOptions), await source.crud.create(crudOptions)), await io2.updateWebhook("update-webhook-success", {
            key: options2.key,
            active: !0,
            config: registerPayload.config.desired
          })) : (this.#internalLogger.debug("[webhook.register] Not active, run create"), await io2.try(
            async () => {
              await source.crud.create(crudOptions);
            },
            async (error) => {
              this.#internalLogger.debug(
                "[webhook.register] Error during create, re-trying with delete first",
                { error }
              ), await io2.runTask("create-retry", async () => {
                await source.crud.delete(crudOptions), await source.crud.create(crudOptions);
              });
            }
          ), await io2.updateWebhook("update-webhook-success", {
            key: options2.key,
            active: !0,
            config: registerPayload.config.desired
          }));
        },
        async (error) => {
          throw this.#internalLogger.debug("[webhook.register] Error", { error }), await io2.updateWebhook("update-webhook-error", {
            key: options2.key,
            active: !1
          }), error;
        }
      ),
      __internal: !0
    });
  }
  async registerTrigger(id, key, options2, idempotencyKey) {
    return this.#client.registerTrigger(this.id, id, key, options2, idempotencyKey);
  }
  async getAuth(id) {
    return this.#client.getAuth(this.id, id);
  }
  /** You can call this function from anywhere in your backend to send an event. The other way to send an event is by using [`io.sendEvent()`](https://trigger.dev/docs/sdk/io/sendevent) from inside a `run()` function.
   * @param event The event to send.
   * @param options Options for sending the event.
   * @returns A promise that resolves to the event details
   */
  async sendEvent(event, options2) {
    return this.#client.sendEvent(event, options2);
  }
  /** You can call this function from anywhere in your backend to send multiple events. The other way to send multiple events is by using [`io.sendEvents()`](https://trigger.dev/docs/sdk/io/sendevents) from inside a `run()` function.
   * @param events The events to send.
   * @param options Options for sending the events.
   * @returns A promise that resolves to an array of event details
   */
  async sendEvents(events, options2) {
    return this.#client.sendEvents(events, options2);
  }
  async cancelEvent(eventId) {
    return this.#client.cancelEvent(eventId);
  }
  async cancelRunsForEvent(eventId) {
    return this.#client.cancelRunsForEvent(eventId);
  }
  async updateStatus(runId, id, status) {
    return this.#client.updateStatus(runId, id, status);
  }
  async registerSchedule(id, key, schedule) {
    return this.#client.registerSchedule(this.id, id, key, schedule);
  }
  async unregisterSchedule(id, key) {
    return this.#client.unregisterSchedule(this.id, id, key);
  }
  async getEvent(eventId) {
    return this.#client.getEvent(eventId);
  }
  async getRun(runId, options2) {
    return this.#client.getRun(runId, options2);
  }
  async cancelRun(runId) {
    return this.#client.cancelRun(runId);
  }
  async getRuns(jobSlug, options2) {
    return this.#client.getRuns(jobSlug, options2);
  }
  async getRunStatuses(runId) {
    return this.#client.getRunStatuses(runId);
  }
  async invokeJob(jobId, payload, options2) {
    return this.#client.invokeJob(jobId, payload, options2);
  }
  async cancelRunsForJob(jobId) {
    return this.#client.cancelRunsForJob(jobId);
  }
  async createEphemeralEventDispatcher(payload) {
    return this.#client.createEphemeralEventDispatcher(payload);
  }
  get store() {
    return {
      env: this.#envStore
    };
  }
  authorized(apiKey) {
    if (typeof apiKey != "string")
      return "missing-header";
    let localApiKey = this.#options.apiKey ?? import_node_process3.env.TRIGGER_API_KEY;
    return localApiKey ? apiKey === localApiKey ? "authorized" : "unauthorized" : "missing-client";
  }
  apiKey() {
    return this.#options.apiKey ?? import_node_process3.env.TRIGGER_API_KEY;
  }
  async #preprocessRun(body, job) {
    let context7 = this.#createPreprocessRunContext(body), parsedPayload = job.trigger.event.parsePayload(body.event.payload ?? {});
    return {
      abort: !1,
      properties: job.trigger.event.runProperties?.(parsedPayload) ?? []
    };
  }
  async #executeJob(body, job, timeOrigin, triggerVersion) {
    this.#internalLogger.debug("executing job", {
      execution: body,
      job: job.id,
      version: job.version,
      triggerVersion
    });
    let context7 = this.#createRunContext(body), io2 = new IO({
      id: body.run.id,
      jobId: job.id,
      cachedTasks: body.tasks,
      cachedTasksCursor: body.cachedTaskCursor,
      yieldedExecutions: body.yieldedExecutions ?? [],
      noopTasksSet: body.noopTasksSet,
      apiClient: this.#client,
      logger: this.#internalLogger,
      client: this,
      context: context7,
      jobLogLevel: job.logLevel ?? this.#options.logLevel ?? "info",
      jobLogger: this.#options.ioLogLocalEnabled ? new Logger(job.id, job.logLevel ?? this.#options.logLevel ?? "info") : void 0,
      serverVersion: triggerVersion,
      timeOrigin,
      executionTimeout: body.runChunkExecutionLimit
    }), resolvedConnections = await this.#resolveConnections(
      context7,
      job.options.integrations,
      body.connections
    );
    if (!resolvedConnections.ok)
      return {
        status: "UNRESOLVED_AUTH_ERROR",
        issues: resolvedConnections.issues
      };
    let ioWithConnections = createIOWithIntegrations(
      io2,
      resolvedConnections.data,
      job.options.integrations
    );
    try {
      let parsedPayload = job.trigger.event.parsePayload(body.event.payload ?? {});
      if (!context7.run.isTest) {
        let verified = await job.trigger.verifyPayload(parsedPayload);
        if (!verified.success)
          return {
            status: "ERROR",
            error: { message: `Payload verification failed. ${verified.reason}` }
          };
      }
      let output = await runLocalStorage.runWith({ io: io2, ctx: context7 }, () => job.options.run(parsedPayload, ioWithConnections, context7));
      return this.#options.verbose && this.#logIOStats(io2.stats), { status: "SUCCESS", output };
    } catch (error) {
      return this.#options.verbose && this.#logIOStats(io2.stats), error instanceof ResumeWithParallelTaskError ? {
        status: "RESUME_WITH_PARALLEL_TASK",
        task: error.task,
        childErrors: error.childErrors.map((childError) => this.#convertErrorToExecutionResponse(childError, body))
      } : this.#convertErrorToExecutionResponse(error, body);
    }
  }
  #convertErrorToExecutionResponse(error, body) {
    if (error instanceof AutoYieldExecutionError)
      return {
        status: "AUTO_YIELD_EXECUTION",
        location: error.location,
        timeRemaining: error.timeRemaining,
        timeElapsed: error.timeElapsed,
        limit: body.runChunkExecutionLimit
      };
    if (error instanceof AutoYieldWithCompletedTaskExecutionError)
      return {
        status: "AUTO_YIELD_EXECUTION_WITH_COMPLETED_TASK",
        id: error.id,
        properties: error.properties,
        output: error.output,
        data: {
          ...error.data,
          limit: body.runChunkExecutionLimit
        }
      };
    if (error instanceof AutoYieldRateLimitError)
      return {
        status: "AUTO_YIELD_RATE_LIMIT",
        reset: error.resetAtTimestamp
      };
    if (error instanceof YieldExecutionError)
      return { status: "YIELD_EXECUTION", key: error.key };
    if (error instanceof ParsedPayloadSchemaError)
      return { status: "INVALID_PAYLOAD", errors: error.schemaErrors };
    if (error instanceof ResumeWithTaskError)
      return { status: "RESUME_WITH_TASK", task: error.task };
    if (error instanceof RetryWithTaskError)
      return {
        status: "RETRY_WITH_TASK",
        task: error.task,
        error: error.cause,
        retryAt: error.retryAt
      };
    if (error instanceof CanceledWithTaskError)
      return {
        status: "CANCELED",
        task: error.task
      };
    if (error instanceof ErrorWithTask) {
      let errorWithStack2 = ErrorWithStackSchema.safeParse(error.cause.output);
      return errorWithStack2.success ? {
        status: "ERROR",
        error: errorWithStack2.data,
        task: error.cause
      } : {
        status: "ERROR",
        error: { message: JSON.stringify(error.cause.output) },
        task: error.cause
      };
    }
    if (error instanceof RetryWithTaskError) {
      let errorWithStack2 = ErrorWithStackSchema.safeParse(error.cause);
      return errorWithStack2.success ? {
        status: "ERROR",
        error: errorWithStack2.data,
        task: error.task
      } : {
        status: "ERROR",
        error: { message: "Unknown error" },
        task: error.task
      };
    }
    let errorWithStack = ErrorWithStackSchema.safeParse(error);
    return errorWithStack.success ? { status: "ERROR", error: errorWithStack.data } : {
      status: "ERROR",
      error: { name: "Unknown error", message: typeof error == "string" ? error : JSON.stringify(error) }
    };
  }
  #createRunContext(execution) {
    let { event, organization, project, environment, job, run, source } = execution;
    return {
      event: {
        id: event.id,
        name: event.name,
        context: event.context,
        timestamp: event.timestamp
      },
      organization,
      project: project ?? { id: "unknown", name: "unknown", slug: "unknown" },
      // backwards compat with old servers
      environment,
      job,
      run,
      account: execution.account,
      source
    };
  }
  #createPreprocessRunContext(body) {
    let { event, organization, environment, job, run, account } = body;
    return {
      event: {
        id: event.id,
        name: event.name,
        context: event.context,
        timestamp: event.timestamp
      },
      organization,
      environment,
      job,
      run,
      account
    };
  }
  async #handleHttpSourceRequest(source, sourceRequest) {
    if (this.#internalLogger.debug("Handling HTTP source request", {
      source
    }), source.dynamicId) {
      let dynamicTrigger = this.#registeredDynamicTriggers[source.dynamicId];
      if (!dynamicTrigger)
        return this.#internalLogger.debug("No dynamic trigger registered for HTTP source", {
          source
        }), {
          response: {
            status: 200,
            body: {
              ok: !0
            }
          },
          events: []
        };
      let results2 = await dynamicTrigger.source.handle(
        source,
        sourceRequest,
        this.#internalLogger
      );
      return results2 ? {
        events: results2.events,
        response: results2.response ?? {
          status: 200,
          body: {
            ok: !0
          }
        },
        metadata: results2.metadata
      } : {
        events: [],
        response: {
          status: 200,
          body: {
            ok: !0
          }
        }
      };
    }
    let handler = this.#registeredHttpSourceHandlers[source.key];
    if (!handler)
      return this.#internalLogger.debug("No handler registered for HTTP source", {
        source
      }), {
        response: {
          status: 200,
          body: {
            ok: !0
          }
        },
        events: []
      };
    let results = await handler(source, sourceRequest);
    return results ? {
      events: results.events,
      response: results.response ?? {
        status: 200,
        body: {
          ok: !0
        }
      },
      metadata: results.metadata
    } : {
      events: [],
      response: {
        status: 200,
        body: {
          ok: !0
        }
      }
    };
  }
  async #handleHttpEndpointRequestForResponse(data2, sourceRequest) {
    this.#internalLogger.debug("Handling HTTP Endpoint request for response", {
      data: data2
    });
    let httpEndpoint2 = this.#registeredHttpEndpoints[data2.key];
    if (!httpEndpoint2)
      return this.#internalLogger.debug("No handler registered for HTTP Endpoint", {
        data: data2
      }), {
        response: {
          status: 200,
          body: {
            ok: !0
          }
        }
      };
    let handledResponse = await httpEndpoint2.handleRequest(sourceRequest);
    if (!handledResponse)
      return this.#internalLogger.debug("There's no HTTP Endpoint respondWith.handler()", {
        data: data2
      }), {
        response: {
          status: 200,
          body: {
            ok: !0
          }
        }
      };
    let body;
    try {
      body = await handledResponse.text();
    } catch (error) {
      this.#internalLogger.error(
        `Error reading httpEndpoint ${httpEndpoint2.id} respondWith.handler Response`,
        {
          error
        }
      );
    }
    let response = {
      status: handledResponse.status,
      headers: handledResponse.headers ? Object.fromEntries(handledResponse.headers.entries()) : void 0,
      body
    };
    return this.#internalLogger.info(`httpEndpoint ${httpEndpoint2.id} respondWith.handler response`, {
      response
    }), {
      response
    };
  }
  async #handleWebhookRequest(request, ctx) {
    this.#internalLogger.debug("Handling webhook request", {
      ctx
    });
    let okResponse = {
      status: 200,
      body: {
        ok: !0
      }
    }, handlers = this.#registeredWebhookSourceHandlers[ctx.key];
    if (!handlers)
      return this.#internalLogger.debug("No handler registered for webhook", {
        ctx
      }), {
        response: okResponse,
        verified: !1
      };
    let { verify, generateEvents } = handlers, verifyResult = await verify(request, this, ctx);
    return verifyResult.success ? (await generateEvents(request, this, ctx), {
      response: okResponse,
      verified: !0
    }) : {
      response: okResponse,
      verified: !1,
      error: verifyResult.reason
    };
  }
  async #resolveConnections(ctx, integrations, connections) {
    if (!integrations)
      return { ok: !0, data: {} };
    let resolvedAuthResults = await Promise.all(
      Object.keys(integrations).map(async (key) => {
        let integration = integrations[key], auth = (connections ?? {})[key], result = await this.#resolveConnection(ctx, integration, auth);
        return result.ok ? {
          ok: !0,
          auth: result.auth,
          key
        } : {
          ok: !1,
          error: result.error,
          key
        };
      })
    );
    return resolvedAuthResults.every((result) => result.ok) ? {
      ok: !0,
      data: resolvedAuthResults.reduce((acc, result) => (acc[result.key] = result.auth, acc), {})
    } : {
      ok: !1,
      issues: resolvedAuthResults.reduce(
        (acc, result) => {
          if (result.ok)
            return acc;
          let integration = integrations[result.key];
          return acc[result.key] = { id: integration.id, error: result.error }, acc;
        },
        {}
      )
    };
  }
  async #resolveConnection(ctx, integration, auth) {
    if (auth)
      return { ok: !0, auth };
    let authResolver = this.#authResolvers[integration.id];
    if (!authResolver)
      return integration.authSource === "HOSTED" ? {
        ok: !1,
        error: `Something went wrong: Integration ${integration.id} is missing auth credentials from Trigger.dev`
      } : {
        ok: !0,
        auth: void 0
      };
    try {
      let resolvedAuth = await authResolver(ctx, integration);
      return resolvedAuth ? {
        ok: !0,
        auth: resolvedAuth.type === "apiKey" ? {
          type: "apiKey",
          accessToken: resolvedAuth.token,
          additionalFields: resolvedAuth.additionalFields
        } : {
          type: "oauth2",
          accessToken: resolvedAuth.token,
          additionalFields: resolvedAuth.additionalFields
        }
      } : {
        ok: !1,
        error: `Auth could not be resolved for ${integration.id}: auth resolver returned null or undefined`
      };
    } catch (resolverError) {
      return resolverError instanceof Error ? {
        ok: !1,
        error: `Auth could not be resolved for ${integration.id}: auth resolver threw. ${resolverError.name}: ${resolverError.message}`
      } : typeof resolverError == "string" ? {
        ok: !1,
        error: `Auth could not be resolved for ${integration.id}: auth resolver threw an error: ${resolverError}`
      } : {
        ok: !1,
        error: `Auth could not be resolved for ${integration.id}: auth resolver threw an unknown error: ${JSON.stringify(resolverError)}`
      };
    }
  }
  #buildJobsIndex() {
    return Object.values(this.#registeredJobs).map((job) => this.#buildJobIndex(job));
  }
  #buildJobIndex(job) {
    let internal = job.options.__internal;
    return {
      id: job.id,
      name: job.name,
      version: job.version,
      event: job.trigger.event,
      trigger: job.trigger.toJSON(),
      integrations: this.#buildJobIntegrations(job),
      startPosition: "latest",
      // job is deprecated, leaving job for now to make sure newer clients work with older servers
      enabled: job.enabled,
      preprocessRuns: job.trigger.preprocessRuns,
      internal,
      concurrencyLimit: typeof job.options.concurrencyLimit == "number" ? job.options.concurrencyLimit : typeof job.options.concurrencyLimit == "object" ? { id: job.options.concurrencyLimit.id, limit: job.options.concurrencyLimit.limit } : void 0
    };
  }
  #buildJobIntegrations(job) {
    return Object.keys(job.options.integrations ?? {}).reduce(
      (acc, key) => {
        let integration = job.options.integrations[key];
        return acc[key] = this.#buildJobIntegration(integration), acc;
      },
      {}
    );
  }
  #buildJobIntegration(integration) {
    let authSource = this.#authResolvers[integration.id] ? "RESOLVER" : integration.authSource;
    return {
      id: integration.id,
      metadata: integration.metadata,
      authSource
    };
  }
  #logIOStats(stats) {
    this.#internalLogger.debug("IO stats", {
      stats
    });
  }
  #standardResponseHeaders(start) {
    return {
      "Trigger-Version": API_VERSIONS.LAZY_LOADED_CACHED_TASKS,
      "Trigger-SDK-Version": version2,
      "X-Trigger-Request-Timing": `dur=${performance.now() - start / 1e3}`
    };
  }
  #serializeRunMetadata(job) {
    let metadata = {};
    return (this.#eventEmitter.listenerCount("runSucceeeded") > 0 || typeof job.options.onSuccess == "function") && (metadata.successSubscription = !0), (this.#eventEmitter.listenerCount("runFailed") > 0 || typeof job.options.onFailure == "function") && (metadata.failedSubscription = !0), JSON.stringify(metadata);
  }
  async #deliverSuccessfulRunNotification(notification) {
    this.#internalLogger.debug("delivering successful run notification", {
      notification
    }), this.#eventEmitter.emit("runSucceeeded", notification);
    let job = this.#registeredJobs[notification.job.id];
    job && typeof job.options.onSuccess == "function" && await job.options.onSuccess(notification);
  }
  async #deliverFailedRunNotification(notification) {
    this.#internalLogger.debug("delivering failed run notification", {
      notification
    }), this.#eventEmitter.emit("runFailed", notification);
    let job = this.#registeredJobs[notification.job.id];
    job && typeof job.options.onFailure == "function" && await job.options.onFailure(notification);
  }
};
function dynamicTriggerRegisterSourceJobId(id) {
  return `register-dynamic-trigger-${id}`;
}
function deepMergeOptions(obj1, obj2) {
  let mergedOptions = { ...obj1 };
  for (let key in obj2)
    obj2.hasOwnProperty(key) && (key in mergedOptions ? mergedOptions[key] = [...mergedOptions[key], ...obj2[key]] : mergedOptions[key] = obj2[key]);
  return mergedOptions;
}

// app/services/telemetry.server.ts
var import_posthog_node = require("posthog-node");

// app/services/loops.server.ts
var LoopsClient = class {
  constructor(apiKey) {
    this.apiKey = apiKey;
  }
  async userCreated({
    userId,
    email,
    name
  }) {
    return logger.info('Loops send "sign-up" event', { userId, email, name }), this.#sendEvent({
      email,
      userId,
      firstName: name?.split(" ").at(0),
      eventName: "sign-up"
    });
  }
  async #sendEvent({
    email,
    userId,
    firstName,
    eventName,
    eventProperties
  }) {
    let options2 = {
      method: "POST",
      headers: { Authorization: `Bearer ${this.apiKey}`, "Content-Type": "application/json" },
      body: JSON.stringify({
        email,
        userId,
        firstName,
        eventName,
        eventProperties
      })
    };
    try {
      let response = await fetch("https://app.loops.so/api/v1/events/send", options2);
      if (!response.ok)
        return logger.error(`Loops sendEvent ${eventName} bad status`, {
          status: response.status,
          email,
          userId,
          firstName,
          eventProperties,
          eventName
        }), !1;
      let responseBody = await response.json();
      return responseBody.success ? !0 : (logger.error(`Loops sendEvent ${eventName} failed response`, {
        message: responseBody.message
      }), !1);
    } catch (error) {
      return logger.error(`Loops sendEvent ${eventName} failed`, { error }), !1;
    }
  }
}, loopsClient = env2.LOOPS_API_KEY ? new LoopsClient(env2.LOOPS_API_KEY) : null;

// app/services/telemetry.server.ts
var Telemetry = class {
  constructor({ postHogApiKey, trigger }) {
    this.#posthogClient = void 0;
    this.#triggerClient = void 0;
    this.user = {
      identify: ({ user, isNewUser }) => {
        this.#posthogClient && this.#posthogClient.identify({
          distinctId: user.id,
          properties: {
            email: user.email,
            name: user.name,
            authenticationMethod: user.authenticationMethod,
            admin: user.admin,
            createdAt: user.createdAt,
            isNewUser
          }
        }), isNewUser && (this.#capture({
          userId: user.id,
          event: "user created",
          eventProperties: {
            email: user.email,
            name: user.name,
            authenticationMethod: user.authenticationMethod,
            admin: user.admin,
            createdAt: user.createdAt
          }
        }), loopsClient?.userCreated({
          userId: user.id,
          email: user.email,
          name: user.name
        }), this.#triggerClient?.sendEvent({
          name: "user.created",
          payload: {
            userId: user.id
          }
        }));
      }
    };
    this.organization = {
      identify: ({ organization }) => {
        this.#posthogClient !== void 0 && this.#posthogClient.groupIdentify({
          groupType: "organization",
          groupKey: organization.id,
          properties: {
            name: organization.title,
            slug: organization.slug
          }
        });
      },
      new: ({
        userId,
        organization,
        organizationCount
      }) => {
        this.#posthogClient !== void 0 && this.#capture({
          userId,
          event: "organization created",
          organizationId: organization.id,
          eventProperties: {
            id: organization.id,
            slug: organization.slug,
            title: organization.title,
            createdAt: organization.createdAt,
            updatedAt: organization.updatedAt
          },
          userProperties: {
            organizationCount
          }
        });
      }
    };
    this.project = {
      identify: ({
        project
      }) => {
        this.#posthogClient !== void 0 && this.#posthogClient.groupIdentify({
          groupType: "project",
          groupKey: project.id,
          properties: {
            name: project.name,
            createdAt: project.createdAt,
            updatedAt: project.updatedAt
          }
        });
      },
      new: ({
        userId,
        organizationId,
        project
      }) => {
        this.#posthogClient !== void 0 && this.#capture({
          userId,
          event: "project created",
          organizationId,
          eventProperties: {
            id: project.id,
            title: project.name,
            createdAt: project.createdAt,
            updatedAt: project.updatedAt
          }
        });
      },
      deletedJob: ({ job }) => {
        this.#triggerClient?.sendEvent({
          name: "job.deleted",
          payload: {
            id: job.id
          }
        });
      }
    };
    if (env2.TRIGGER_TELEMETRY_DISABLED !== void 0) {
      console.log("\u{1F4C9} Telemetry disabled");
      return;
    }
    postHogApiKey ? this.#posthogClient = new import_posthog_node.PostHog(postHogApiKey, { host: "https://eu.posthog.com" }) : console.log("No PostHog API key, so analytics won't track"), trigger && (this.#triggerClient = new TriggerClient({
      id: "triggerdotdev",
      apiKey: trigger.apiKey,
      apiUrl: trigger.apiUrl
    }), console.log("Created telemetry TriggerClient"));
  }
  #posthogClient;
  #triggerClient;
  #capture(event) {
    if (this.#posthogClient === void 0)
      return;
    let groups = {};
    event.organizationId && (groups = {
      ...groups,
      organization: event.organizationId
    }), event.projectId && (groups = {
      ...groups,
      project: event.projectId
    }), event.jobId && (groups = {
      ...groups,
      workflow: event.jobId
    }), event.environmentId && (groups = {
      ...groups,
      environment: event.environmentId
    });
    let properties = {};
    event.eventProperties && (properties = {
      ...properties,
      ...event.eventProperties
    }), event.userProperties && (properties = {
      ...properties,
      $set: event.userProperties
    }), event.userOnceProperties && (properties = {
      ...properties,
      $set_once: event.userOnceProperties
    });
    let eventData = {
      distinctId: event.userId,
      event: event.event,
      properties,
      groups
    };
    this.#posthogClient.capture(eventData);
  }
}, telemetry = singleton(
  "telemetry",
  () => new Telemetry({
    postHogApiKey: env2.POSTHOG_PROJECT_KEY,
    trigger: env2.TELEMETRY_TRIGGER_API_KEY && env2.TELEMETRY_TRIGGER_API_URL ? {
      apiKey: env2.TELEMETRY_TRIGGER_API_KEY,
      apiUrl: env2.TELEMETRY_TRIGGER_API_URL
    } : void 0
  })
);

// app/services/postAuth.server.ts
async function postAuthentication({
  user,
  loginMethod,
  isNewUser
}) {
  telemetry.user.identify({ user, isNewUser });
}

// app/services/emailAuth.server.tsx
var secret = env2.MAGIC_LINK_SECRET;
if (!secret)
  throw new Error("Missing MAGIC_LINK_SECRET env variable.");
var emailStrategy = new import_remix_auth_email_link.EmailLinkStrategy(
  {
    sendEmail: sendMagicLinkEmail,
    secret,
    callbackURL: "/magic",
    sessionMagicLinkKey: "triggerdotdev:magiclink"
  },
  async ({
    email,
    form,
    magicLinkVerify
  }) => {
    logger.info("Magic link user authenticated", { email, magicLinkVerify });
    try {
      let { user, isNewUser } = await findOrCreateUser({
        email,
        authenticationMethod: "MAGIC_LINK"
      });
      return await postAuthentication({ user, isNewUser, loginMethod: "MAGIC_LINK" }), { userId: user.id };
    } catch (error) {
      throw logger.debug("Magic link user failed to authenticate", { error: JSON.stringify(error) }), error;
    }
  }
);
function addEmailLinkStrategy(authenticator2) {
  authenticator2.use(emailStrategy);
}

// app/services/gitHubAuth.server.ts
var import_remix_auth_github = require("remix-auth-github");
function addGitHubStrategy(authenticator2, clientID, clientSecret) {
  let gitHubStrategy = new import_remix_auth_github.GitHubStrategy(
    {
      clientID,
      clientSecret,
      callbackURL: `${env2.LOGIN_ORIGIN}/auth/github/callback`
    },
    async ({ extraParams, profile }) => {
      let emails = profile.emails;
      if (!emails)
        throw new Error("GitHub login requires an email address");
      try {
        logger.debug("GitHub login", {
          emails,
          profile,
          extraParams
        });
        let { user, isNewUser } = await findOrCreateUser({
          email: emails[0].value,
          authenticationMethod: "GITHUB",
          authenticationProfile: profile,
          authenticationExtraParams: extraParams
        });
        return await postAuthentication({ user, isNewUser, loginMethod: "GITHUB" }), {
          userId: user.id
        };
      } catch (error) {
        throw console.error(error), error;
      }
    }
  );
  authenticator2.use(gitHubStrategy);
}

// app/services/auth.server.ts
var authenticator = new import_remix_auth.Authenticator(sessionStorage), isGithubAuthSupported = typeof env2.AUTH_GITHUB_CLIENT_ID == "string" && typeof env2.AUTH_GITHUB_CLIENT_SECRET == "string";
env2.AUTH_GITHUB_CLIENT_ID && env2.AUTH_GITHUB_CLIENT_SECRET && addGitHubStrategy(authenticator, env2.AUTH_GITHUB_CLIENT_ID, env2.AUTH_GITHUB_CLIENT_SECRET);
addEmailLinkStrategy(authenticator);

// app/services/impersonation.server.ts
var import_node5 = require("@remix-run/node");
var impersonationSessionStorage = (0, import_node5.createCookieSessionStorage)({
  cookie: {
    name: "__impersonate",
    // use any name you want here
    sameSite: "lax",
    // this helps with CSRF
    path: "/",
    // remember to add this so the cookie will work in all routes
    httpOnly: !0,
    // for security reasons, make this cookie http only
    secrets: [env2.SESSION_SECRET],
    secure: env2.NODE_ENV === "production",
    // enable this in prod only
    maxAge: 60 * 60 * 24
    // 1 day
  }
});
function getImpersonationSession(request) {
  return impersonationSessionStorage.getSession(request.headers.get("Cookie"));
}
function commitImpersonationSession(session) {
  return impersonationSessionStorage.commitSession(session);
}
async function getImpersonationId(request) {
  return (await getImpersonationSession(request)).get("impersonatedUserId");
}
async function setImpersonationId(userId, request) {
  let session = await getImpersonationSession(request);
  return session.set("impersonatedUserId", userId), session;
}
async function clearImpersonationId(request) {
  let session = await getImpersonationSession(request);
  return session.unset("impersonatedUserId"), session;
}

// app/services/session.server.ts
async function getUserId(request) {
  let impersonatedUserId = await getImpersonationId(request);
  return impersonatedUserId || (await authenticator.isAuthenticated(request))?.userId;
}
async function getUser(request) {
  let userId = await getUserId(request);
  if (userId === void 0)
    return null;
  let user = await getUserById(userId);
  if (user)
    return user;
  throw await logout(request);
}
async function requireUserId(request, redirectTo) {
  let userId = await getUserId(request);
  if (!userId) {
    let url = new URL(request.url), searchParams = new URLSearchParams([
      ["redirectTo", redirectTo ?? `${url.pathname}${url.search}`]
    ]);
    throw (0, import_node6.redirect)(`/login?${searchParams}`);
  }
  return userId;
}
async function requireUser(request) {
  let userId = await requireUserId(request), user = await getUserById(userId);
  if (user)
    return user;
  throw await logout(request);
}
async function logout(request) {
  return (0, import_node6.redirect)("/logout");
}

// app/routes/resources.feedback.ts
var client2, feedbackTypeLabel = {
  bug: "Bug report",
  feature: "Feature request",
  help: "Help me out",
  enterprise: "Enterprise enquiry",
  "developer preview": "Developer preview feedback"
}, feedbackTypeLiterals = Object.keys(feedbackTypeLabel).map((key) => import_zod70.z.literal(key)), feedbackType = import_zod70.z.union(
  [feedbackTypeLiterals[0], feedbackTypeLiterals[1], ...feedbackTypeLiterals.slice(2)],
  {
    required_error: "Must be either 'bug' or 'feature'",
    invalid_type_error: "Must be either 'bug' or 'feature'"
  }
), schema = import_zod70.z.object({
  path: import_zod70.z.string(),
  feedbackType,
  message: import_zod70.z.string().min(1, "Must be at least 1 character")
});
async function action({ request }) {
  let user = await requireUser(request), formData = await request.formData(), submission = (0, import_zod69.parse)(formData, { schema });
  if (!submission.value || submission.intent !== "submit")
    return (0, import_server_runtime3.json)(submission);
  try {
    if (!env2.PLAIN_API_KEY)
      return console.error("PLAIN_API_KEY is not set"), submission.error.message = "PLAIN_API_KEY is not set", (0, import_server_runtime3.json)(submission);
    client2 = new import_typescript_sdk.PlainClient({
      apiKey: env2.PLAIN_API_KEY
    });
    let upsertCustomerRes = await client2.upsertCustomer({
      identifier: {
        emailAddress: user.email
      },
      onCreate: {
        externalId: user.id,
        fullName: user.name ?? "",
        // TODO - Optional: set 'first name' on user
        // shortName: ''
        email: {
          email: user.email,
          isVerified: !0
        }
      },
      onUpdate: {
        externalId: { value: user.id },
        fullName: { value: user.name ?? "" },
        // TODO - see above
        // shortName: { value: "" },
        email: {
          email: user.email,
          isVerified: !0
        }
      }
    });
    if (upsertCustomerRes.error)
      return console.error(
        (0, import_util5.inspect)(upsertCustomerRes.error, {
          showHidden: !1,
          depth: null,
          colors: !0
        })
      ), submission.error.message = upsertCustomerRes.error.message, (0, import_server_runtime3.json)(submission);
    let title2 = feedbackTypeLabel[submission.value.feedbackType], createThreadRes = await client2.createThread({
      customerIdentifier: {
        customerId: upsertCustomerRes.data.customer.id
      },
      title: title2,
      components: [
        import_typescript_sdk.uiComponent.text({
          text: `New ${title2} reported by ${user.name} (${user.email})`
        }),
        import_typescript_sdk.uiComponent.divider({ spacingSize: "M" }),
        import_typescript_sdk.uiComponent.text({
          size: "S",
          color: "MUTED",
          text: "Page"
        }),
        import_typescript_sdk.uiComponent.text({
          text: submission.value.path
        }),
        import_typescript_sdk.uiComponent.spacer({ size: "M" }),
        import_typescript_sdk.uiComponent.text({
          size: "S",
          color: "MUTED",
          text: "Message"
        }),
        import_typescript_sdk.uiComponent.text({
          text: submission.value.message
        })
      ]
      // TODO: Optional: set labels on threads here on creation
      // labelTypeIds: [],
      // TODO: Optional: set the priority (0 is urgent, 3 is low)
      // priority: 0,
    });
    return createThreadRes.error ? (console.error(
      (0, import_util5.inspect)(createThreadRes.error, {
        showHidden: !1,
        depth: null,
        colors: !0
      })
    ), submission.error.message = createThreadRes.error.message, (0, import_server_runtime3.json)(submission)) : redirectWithSuccessMessage(
      submission.value.path,
      request,
      "Thanks for your feedback! We'll get back to you soon."
    );
  } catch (e) {
    return (0, import_server_runtime3.json)(e, { status: 400 });
  }
}

// app/components/primitives/Fieldset.tsx
var import_jsx_runtime32 = require("react/jsx-runtime");
function Fieldset({
  children,
  className
}) {
  return /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("div", { className: cn("flex flex-col gap-y-5", className), children });
}

// app/components/primitives/FormButtons.tsx
var import_jsx_runtime33 = require("react/jsx-runtime");
function FormButtons({
  cancelButton,
  confirmButton,
  className
}) {
  return /* @__PURE__ */ (0, import_jsx_runtime33.jsxs)("div", { className: cn("flex w-full items-center justify-between", className), children: [
    cancelButton || /* @__PURE__ */ (0, import_jsx_runtime33.jsx)("div", {}),
    " ",
    confirmButton
  ] });
}

// app/components/primitives/Paragraph.tsx
var import_jsx_runtime34 = require("react/jsx-runtime"), paragraphVariants = {
  base: {
    text: "font-sans text-base font-normal text-text-dimmed",
    spacing: "mb-3"
  },
  "base/bright": {
    text: "font-sans text-base font-normal text-text-bright",
    spacing: "mb-3"
  },
  small: {
    text: "font-sans text-sm font-normal text-text-dimmed",
    spacing: "mb-2"
  },
  "small/bright": {
    text: "font-sans text-sm font-normal text-text-bright",
    spacing: "mb-2"
  },
  "extra-small": {
    text: "font-sans text-xs font-normal text-text-dimmed",
    spacing: "mb-1.5"
  },
  "extra-small/bright": {
    text: "font-sans text-xs font-normal text-text-bright",
    spacing: "mb-1.5"
  },
  "extra-small/mono": {
    text: "font-mono text-xs font-normal text-text-dimmed",
    spacing: "mb-1.5"
  },
  "extra-small/bright/mono": {
    text: "font-mono text-xs text-text-bright",
    spacing: "mb-1.5"
  },
  "extra-small/caps": {
    text: "font-sans text-xs uppercase tracking-wider font-normal text-text-dimmed",
    spacing: "mb-1.5"
  },
  "extra-small/bright/caps": {
    text: "font-sans text-xs uppercase tracking-wider font-normal text-text-bright",
    spacing: "mb-1.5"
  },
  "extra-extra-small": {
    text: "font-sans text-xxs font-normal text-text-dimmed",
    spacing: "mb-1"
  },
  "extra-extra-small/bright": {
    text: "font-sans text-xxs font-normal text-text-bright",
    spacing: "mb-1"
  },
  "extra-extra-small/caps": {
    text: "font-sans text-xxs uppercase tracking-wider font-normal text-text-dimmed",
    spacing: "mb-1"
  },
  "extra-extra-small/bright/caps": {
    text: "font-sans text-xxs uppercase tracking-wider font-normal text-text-bright",
    spacing: "mb-1"
  },
  "extra-extra-small/dimmed/caps": {
    text: "font-sans text-xxs uppercase tracking-wider font-normal text-text-dimmed",
    spacing: "mb-1"
  }
};
function Paragraph({
  variant: variant3 = "base",
  className,
  spacing = !1,
  children,
  ...props
}) {
  return /* @__PURE__ */ (0, import_jsx_runtime34.jsx)(
    "p",
    {
      className: cn(
        paragraphVariants[variant3].text,
        spacing === !0 && paragraphVariants[variant3].spacing,
        className
      ),
      ...props,
      children
    }
  );
}

// app/components/primitives/FormError.tsx
var import_framer_motion = require("framer-motion");
var import_jsx_runtime35 = require("react/jsx-runtime");
function FormError({
  children,
  id,
  className
}) {
  return /* @__PURE__ */ (0, import_jsx_runtime35.jsx)(import_jsx_runtime35.Fragment, { children: children && /* @__PURE__ */ (0, import_jsx_runtime35.jsxs)(
    import_framer_motion.motion.div,
    {
      initial: { opacity: 0 },
      animate: { opacity: 1 },
      transition: { duration: 0.3 },
      className: cn("flex items-start gap-0.5", className),
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime35.jsx)(NamedIcon, { name: "error", className: "h-4 w-4 shrink-0 justify-start" }),
        /* @__PURE__ */ (0, import_jsx_runtime35.jsx)(Paragraph, { id, variant: "extra-small", className: "text-rose-500", children })
      ]
    }
  ) });
}

// app/components/primitives/InputGroup.tsx
var import_jsx_runtime36 = require("react/jsx-runtime");
function InputGroup({ children, className, fullWidth }) {
  return /* @__PURE__ */ (0, import_jsx_runtime36.jsx)(
    "div",
    {
      className: cn(
        "grid w-full items-center gap-1.5",
        fullWidth ? "w-full" : "max-w-md",
        className
      ),
      children
    }
  );
}

// app/components/primitives/Label.tsx
var import_jsx_runtime37 = require("react/jsx-runtime"), variants3 = {
  small: {
    text: "font-sans text-sm font-normal text-text-bright leading-tight flex items-center gap-1"
  },
  medium: {
    text: "font-sans text-sm text-text-bright leading-tight flex items-center gap-1"
  },
  large: {
    text: "font-sans text-base font-medium text-text-bright leading-tight flex items-center gap-1"
  }
};
function Label({
  className,
  children,
  variant: variant3 = "medium",
  required = !0,
  tooltip,
  ...props
}) {
  let variation = variants3[variant3];
  return /* @__PURE__ */ (0, import_jsx_runtime37.jsxs)("label", { className: cn(variation.text, className), ...props, children: [
    children,
    tooltip ? /* @__PURE__ */ (0, import_jsx_runtime37.jsx)(InfoIconTooltip, { content: tooltip }) : null,
    !required && /* @__PURE__ */ (0, import_jsx_runtime37.jsx)("span", { className: "text-text-dimmed", children: " (optional)" })
  ] });
}

// app/components/primitives/Select.tsx
var Ariakit = __toESM(require("@ariakit/react")), import_select_value = require("@ariakit/react-core/select/select-value"), import_react15 = require("@remix-run/react"), React4 = __toESM(require("react")), import_react16 = require("react");
var import_lucide_react2 = require("lucide-react"), import_match_sorter = require("match-sorter"), import_jsx_runtime38 = require("react/jsx-runtime"), sizes2 = {
  small: {
    button: "h-6 rounded text-xs px-2 "
  },
  medium: {
    button: "h-8 rounded text-xs px-3 text-sm"
  }
}, style = {
  tertiary: {
    button: "bg-tertiary focus-within:ring-charcoal-500 border border-tertiary hover:text-text-bright hover:border-charcoal-600"
  },
  minimal: {
    button: "bg-transparent focus-within:ring-charcoal-500 hover:bg-tertiary disabled:bg-transparent disabled:pointer-events-none"
  }
}, variants4 = {
  "tertiary/small": {
    button: cn(sizes2.small.button, style.tertiary.button)
  },
  "tertiary/medium": {
    button: cn(sizes2.medium.button, style.tertiary.button)
  },
  "minimal/small": {
    button: cn(sizes2.small.button, style.minimal.button)
  },
  "minimal/medium": {
    button: cn(sizes2.medium.button, style.minimal.button)
  }
};
function isSection(data2) {
  let firstItem = data2[0];
  return firstItem.type === "section" && firstItem.items !== void 0 && Array.isArray(firstItem.items);
}
function Select2({
  children,
  icon,
  text,
  placeholder,
  value,
  setValue,
  defaultValue,
  label,
  heading,
  showHeading = !1,
  items,
  filter,
  empty = null,
  variant: variant3 = "tertiary/small",
  open,
  setOpen,
  shortcut: shortcut2,
  allowItemShortcuts = !0,
  disabled,
  clearSearchOnSelection = !0,
  dropdownIcon,
  ...props
}) {
  let [searchValue, setSearchValue] = (0, import_react16.useState)(""), searchable = items !== void 0 && filter !== void 0, matches = (0, import_react16.useMemo)(() => items ? !searchValue || !filter ? items : typeof filter == "function" ? isSection(items) ? items.map((section) => ({
    ...section,
    items: section.items.filter(
      (item) => filter(item, searchValue, section.title)
    )
  })).filter((section) => section.items.length > 0) : items.filter((item) => filter(item, searchValue)) : typeof filter == "boolean" && filter ? isSection(items) ? items.map((section) => ({
    ...section,
    items: (0, import_match_sorter.matchSorter)(section.items, searchValue)
  })).filter((section) => section.items.length > 0) : (0, import_match_sorter.matchSorter)(items, searchValue) : isSection(items) ? items.map((section) => ({
    ...section,
    items: (0, import_match_sorter.matchSorter)(section.items, searchValue, filter)
  })).filter((section) => section.items.length > 0) : (0, import_match_sorter.matchSorter)(items, searchValue, filter) : [], [searchValue, items]), enableItemShortcuts = allowItemShortcuts && matches.length === items?.length, select = /* @__PURE__ */ (0, import_jsx_runtime38.jsxs)(
    SelectProvider2,
    {
      open,
      setOpen,
      virtualFocus: searchable,
      value,
      setValue: (v) => {
        clearSearchOnSelection && setSearchValue(""), setValue && setValue(v);
      },
      defaultValue,
      children: [
        label && /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(SelectLabel2, { render: typeof label == "string" ? /* @__PURE__ */ (0, import_jsx_runtime38.jsx)("div", { children: label }) : label }),
        /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(
          SelectTrigger,
          {
            icon,
            variant: variant3,
            text,
            placeholder,
            shortcut: shortcut2,
            tooltipTitle: heading,
            disabled,
            dropdownIcon,
            ...props
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime38.jsxs)(SelectPopover2, { children: [
          !searchable && showHeading && heading && /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(SelectHeading2, { render: /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(import_jsx_runtime38.Fragment, { children: heading }) }),
          searchable && /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(ComboBox, { placeholder: heading, shortcut: shortcut2, value: searchValue }),
          /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(SelectList2, { children: typeof children == "function" ? matches.length > 0 ? isSection(matches) ? /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(
            SelectGroupedRenderer,
            {
              items: matches,
              children,
              enableItemShortcuts
            }
          ) : children(matches, {
            shortcutsEnabled: enableItemShortcuts
          }) : empty : children })
        ] })
      ]
    }
  );
  return searchable ? /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(
    ComboboxProvider2,
    {
      resetValueOnHide: !0,
      setValue: (value2) => {
        React4.startTransition(() => {
          setSearchValue(value2);
        });
      },
      children: select
    }
  ) : select;
}
function SelectTrigger({
  icon,
  variant: variant3 = "tertiary/small",
  text,
  shortcut: shortcut2,
  tooltipTitle,
  disabled,
  placeholder,
  dropdownIcon = !1,
  children,
  className,
  ...props
}) {
  let ref = React4.useRef(null);
  useShortcutKeys({
    shortcut: shortcut2,
    action: (e) => {
      e.preventDefault(), e.stopPropagation(), ref.current && ref.current.click();
    },
    disabled
  });
  let showTooltip = tooltipTitle || shortcut2, variantClasses4 = variants4[variant3], content = "";
  return children ? content = children : text !== void 0 ? typeof text == "function" ? content = /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(import_select_value.SelectValue, { children: (value) => /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(import_jsx_runtime38.Fragment, { children: text(value) ?? placeholder }) }) : content = text : content = /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(import_select_value.SelectValue, { children: (value) => /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(import_jsx_runtime38.Fragment, { children: typeof value == "string" ? value ?? placeholder : value.length === 0 ? placeholder : value.join(", ") }) }), /* @__PURE__ */ (0, import_jsx_runtime38.jsxs)(Ariakit.TooltipProvider, { timeout: 200, children: [
    /* @__PURE__ */ (0, import_jsx_runtime38.jsxs)(
      Ariakit.TooltipAnchor,
      {
        className: "button",
        render: /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(
          Ariakit.Select,
          {
            className: cn(
              "group flex items-center gap-1 outline-offset-0 focus-within:outline-none focus-within:ring-1 disabled:cursor-not-allowed disabled:opacity-50",
              variantClasses4.button,
              className
            ),
            ref,
            ...props
          }
        ),
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime38.jsxs)("div", { className: "flex grow items-center gap-0.5", children: [
            icon && /* @__PURE__ */ (0, import_jsx_runtime38.jsx)("div", { className: "-ml-1 flex-none", children: icon }),
            /* @__PURE__ */ (0, import_jsx_runtime38.jsx)("div", { className: "truncate", children: content })
          ] }),
          dropdownIcon === !0 ? /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(
            import_lucide_react2.ChevronDown,
            {
              className: cn(
                "size-4 flex-none text-text-dimmed transition group-hover:text-text-bright group-focus:text-text-bright"
              )
            }
          ) : dropdownIcon || null
        ]
      }
    ),
    showTooltip && /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(
      Ariakit.Tooltip,
      {
        disabled: shortcut2 === void 0,
        className: "z-40 cursor-default rounded border border-charcoal-700 bg-background-bright px-2 py-1.5 text-xs",
        children: /* @__PURE__ */ (0, import_jsx_runtime38.jsxs)("div", { className: "flex items-center gap-2", children: [
          /* @__PURE__ */ (0, import_jsx_runtime38.jsx)("span", { children: tooltipTitle ?? "Open menu" }),
          shortcut2 && /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(
            ShortcutKey,
            {
              className: cn("size-4 flex-none"),
              shortcut: shortcut2,
              variant: "small"
            }
          )
        ] })
      }
    )
  ] });
}
function SelectProvider2(props) {
  return /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(Ariakit.SelectProvider, { ...props });
}
function ComboboxProvider2(props) {
  return /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(Ariakit.ComboboxProvider, { ...props });
}
function SelectGroupedRenderer({
  items,
  children,
  enableItemShortcuts
}) {
  let count = 0;
  return /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(import_jsx_runtime38.Fragment, { children: items.map((section, index) => {
    let previousItem = items.at(index - 1);
    return count += previousItem ? previousItem.items.length : 0, /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(import_react16.Fragment, { children: children(section.items, {
      shortcutsEnabled: enableItemShortcuts,
      section: {
        title: section.title,
        startIndex: count - 1,
        count: section.items.length
      }
    }) }, index);
  }) });
}
function SelectList2(props) {
  let Component2 = Ariakit.useComboboxContext() ? Ariakit.ComboboxList : Ariakit.SelectList;
  return /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(
    Component2,
    {
      ...props,
      className: cn(
        "overflow-y-auto overscroll-contain outline-none scrollbar-thin scrollbar-track-transparent scrollbar-thumb-charcoal-600",
        props.className
      )
    }
  );
}
var selectItemClasses = "group cursor-pointer px-1 pt-1 text-xs text-text-dimmed outline-none last:pb-1";
function SelectItem2({
  icon,
  checkIcon = /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(Ariakit.SelectItemCheck, { className: "size-8 flex-none text-white" }),
  shortcut: shortcut2,
  ...props
}) {
  let render2 = Ariakit.useComboboxContext() ? /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(Ariakit.ComboboxItem, { render: props.render }) : void 0, ref = React4.useRef(null);
  return useShortcutKeys({
    shortcut: shortcut2,
    action: (e) => {
      e.preventDefault(), e.stopPropagation(), ref.current && ref.current.click();
    },
    disabled: props.disabled,
    enabledOnInputElements: !0
  }), /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(
    Ariakit.SelectItem,
    {
      ...props,
      render: render2,
      blurOnHoverEnd: !1,
      className: cn(
        selectItemClasses,
        "[--padding-block:0.5rem] sm:[--padding-block:0.25rem]",
        props.className
      ),
      ref,
      children: /* @__PURE__ */ (0, import_jsx_runtime38.jsxs)("div", { className: "flex h-7 w-full items-center gap-1 rounded-sm px-2 group-data-[active-item=true]:bg-tertiary", children: [
        icon,
        /* @__PURE__ */ (0, import_jsx_runtime38.jsx)("div", { className: "grow truncate", children: props.children || props.value }),
        checkIcon,
        shortcut2 && /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(ShortcutKey, { className: cn("size-4 flex-none"), shortcut: shortcut2, variant: "small" })
      ] })
    }
  );
}
function SelectLinkItem({
  checkIcon = /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(Ariakit.SelectItemCheck, { className: "size-8 flex-none text-white" }),
  to,
  ...props
}) {
  let render2 = /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(import_react15.Link, { to, className: cn("block", selectItemClasses, props.className) });
  return /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(
    SelectItem2,
    {
      ...props,
      render: render2,
      blurOnHoverEnd: !1,
      className: cn(selectItemClasses, props.className)
    }
  );
}
function SelectButtonItem({
  checkIcon = /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(Ariakit.SelectItemCheck, { className: "size-8 flex-none text-white" }),
  onClick,
  ...props
}) {
  let render2 = /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(
    "button",
    {
      onClick,
      className: cn("block w-full text-left", selectItemClasses, props.className)
    }
  );
  return /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(
    SelectItem2,
    {
      ...props,
      render: render2,
      blurOnHoverEnd: !1,
      className: cn(selectItemClasses, props.className)
    }
  );
}
function shortcutFromIndex(index, meta4) {
  if (!meta4.shortcutsEnabled)
    return;
  let adjustedIndex = index + (meta4.section?.startIndex ?? 0);
  if (!(adjustedIndex > 9))
    return adjustedIndex === 9 && (adjustedIndex = -1), { key: String(adjustedIndex + 1) };
}
function SelectGroup2(props) {
  return /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(Ariakit.SelectGroup, { ...props });
}
function SelectGroupLabel2(props) {
  return /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(
    Ariakit.SelectGroupLabel,
    {
      ...props,
      className: cn(
        "flex h-[1.375rem] items-center border-b border-charcoal-700 bg-charcoal-750 px-2.5 text-xxs uppercase text-text-bright",
        props.className
      )
    }
  );
}
function SelectHeading2({ render: render2, ...props }) {
  return /* @__PURE__ */ (0, import_jsx_runtime38.jsx)("div", { className: "flex h-[1.375rem] flex-none cursor-default items-center gap-2 border-b border-charcoal-700 bg-charcoal-750 px-2.5 text-xxs uppercase text-text-bright", children: /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(Ariakit.SelectHeading, { render: /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(import_jsx_runtime38.Fragment, { children: render2 }) }) });
}
function SelectPopover2({
  gutter = 5,
  shift = 0,
  unmountOnHide = !0,
  className,
  ...props
}) {
  return /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(
    Ariakit.SelectPopover,
    {
      gutter,
      shift,
      unmountOnHide,
      className: cn(
        "z-50 flex flex-col overflow-clip rounded border border-charcoal-700 bg-background-bright shadow-md outline-none animate-in fade-in-40",
        "min-w-[max(180px,calc(var(--popover-anchor-width)+0.5rem))]",
        "max-w-[min(480px,var(--popover-available-width))]",
        "max-h-[min(480px,var(--popover-available-height))]",
        "origin-[var(--popover-transform-origin)]",
        className
      ),
      ...props
    }
  );
}
function SelectLabel2(props) {
  return /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(Ariakit.SelectLabel, { ...props });
}
function ComboBox({
  autoSelect = !0,
  placeholder = "Filter options",
  shortcut: shortcut2,
  ...props
}) {
  return /* @__PURE__ */ (0, import_jsx_runtime38.jsxs)("div", { className: "flex h-9 w-full flex-none items-center border-b border-grid-dimmed bg-transparent px-3 text-xs text-text-dimmed outline-none", children: [
    /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(
      Ariakit.Combobox,
      {
        autoSelect,
        render: /* @__PURE__ */ (0, import_jsx_runtime38.jsx)("input", { placeholder }),
        className: "flex-1 bg-transparent text-xs text-text-dimmed outline-none",
        ...props
      }
    ),
    shortcut2 && /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(ShortcutKey, { className: cn("size-4 flex-none"), shortcut: shortcut2, variant: "small" })
  ] });
}

// app/components/primitives/Sheet.tsx
var SheetPrimitive = __toESM(require("@radix-ui/react-dialog")), import_class_variance_authority = require("class-variance-authority"), React5 = __toESM(require("react"));
var import_jsx_runtime39 = require("react/jsx-runtime"), Sheet = SheetPrimitive.Root, SheetTrigger = SheetPrimitive.Trigger, portalVariants = (0, import_class_variance_authority.cva)("fixed inset-0 z-50 flex", {
  variants: {
    position: {
      top: "items-start",
      bottom: "items-end",
      left: "justify-start",
      right: "justify-end"
    }
  },
  defaultVariants: { position: "right" }
}), SheetPortal = ({ position, className, children, ...props }) => /* @__PURE__ */ (0, import_jsx_runtime39.jsx)(SheetPrimitive.Portal, { className: cn(className), ...props, children: /* @__PURE__ */ (0, import_jsx_runtime39.jsx)("div", { className: portalVariants({ position }), children }) });
SheetPortal.displayName = SheetPrimitive.Portal.displayName;
var SheetOverlay = React5.forwardRef(({ className, children, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime39.jsx)(
  SheetPrimitive.Overlay,
  {
    className: cn(
      "fixed inset-0 z-50 bg-background-dimmed/80 transition duration-200 animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out data-[state=open]:fade-in",
      className
    ),
    ...props,
    ref
  }
));
SheetOverlay.displayName = SheetPrimitive.Overlay.displayName;
var sheetVariants = (0, import_class_variance_authority.cva)(
  "fixed z-50 scale-100 gap-4 shadow-lg bg-background-bright opacity-100 border-l border-grid-bright",
  {
    variants: {
      position: {
        top: "animate-in slide-in-from-top w-full duration-200",
        bottom: "animate-in slide-in-from-bottom w-full duration-200",
        left: "animate-in slide-in-from-left h-full duration-200",
        right: "animate-in slide-in-from-right h-screen duration-200"
      },
      size: {
        content: "",
        default: "",
        sm: "",
        lg: "",
        xl: "",
        full: ""
      }
    },
    compoundVariants: [
      {
        position: ["top", "bottom"],
        size: "content",
        class: "max-h-screen"
      },
      {
        position: ["top", "bottom"],
        size: "default",
        class: "h-1/3"
      },
      {
        position: ["top", "bottom"],
        size: "sm",
        class: "h-1/4"
      },
      {
        position: ["top", "bottom"],
        size: "lg",
        class: "h-1/2"
      },
      {
        position: ["top", "bottom"],
        size: "xl",
        class: "h-5/6"
      },
      {
        position: ["top", "bottom"],
        size: "full",
        class: "h-screen"
      },
      {
        position: ["right", "left"],
        size: "content",
        class: "max-w-screen"
      },
      {
        position: ["right", "left"],
        size: "default",
        class: "w-1/3"
      },
      {
        position: ["right", "left"],
        size: "sm",
        class: "w-1/4"
      },
      {
        position: ["right", "left"],
        size: "lg",
        class: "w-1/2"
      },
      {
        position: ["right", "left"],
        size: "xl",
        class: "w-5/6"
      },
      {
        position: ["right", "left"],
        size: "full",
        class: "w-screen"
      }
    ],
    defaultVariants: {
      position: "right",
      size: "default"
    }
  }
), SheetContent = React5.forwardRef(({ position, size, className, children, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime39.jsxs)(SheetPortal, { position, children: [
  /* @__PURE__ */ (0, import_jsx_runtime39.jsx)(SheetOverlay, {}),
  /* @__PURE__ */ (0, import_jsx_runtime39.jsx)(
    SheetPrimitive.Content,
    {
      ref,
      className: cn(sheetVariants({ position, size }), className),
      ...props,
      children: /* @__PURE__ */ (0, import_jsx_runtime39.jsxs)("div", { className: "grid max-h-full grid-rows-[2.75rem_1fr] overflow-hidden", children: [
        /* @__PURE__ */ (0, import_jsx_runtime39.jsxs)("div", { className: "flex items-center gap-2 border-b border-grid-bright p-2", children: [
          /* @__PURE__ */ (0, import_jsx_runtime39.jsxs)(SheetPrimitive.Close, { className: "rounded-sm p-1 transition hover:bg-charcoal-800 disabled:pointer-events-none", children: [
            /* @__PURE__ */ (0, import_jsx_runtime39.jsx)(NamedIcon, { name: "close", className: "h-4 w-4" }),
            /* @__PURE__ */ (0, import_jsx_runtime39.jsx)("span", { className: "sr-only", children: "Close" })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime39.jsx)(ShortcutKey, { shortcut: { key: "esc" }, variant: "small" })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime39.jsx)("div", { className: "flex max-h-full flex-col overflow-hidden", children })
      ] })
    }
  )
] }));
SheetContent.displayName = SheetPrimitive.Content.displayName;
var SheetBody = ({ className, ...props }) => /* @__PURE__ */ (0, import_jsx_runtime39.jsx)(
  "div",
  {
    className: cn(
      "overflow-y-auto p-4 scrollbar-thin scrollbar-track-transparent scrollbar-thumb-charcoal-600",
      className
    ),
    ...props
  }
), SheetHeader = ({ className, ...props }) => /* @__PURE__ */ (0, import_jsx_runtime39.jsx)(
  "div",
  {
    className: cn(
      "mx-4 flex shrink-0 items-center gap-4 border-b border-grid-bright py-3.5",
      className
    ),
    ...props
  }
);

// app/components/primitives/TextArea.tsx
var import_jsx_runtime40 = require("react/jsx-runtime");
function TextArea({ className, rows, ...props }) {
  return /* @__PURE__ */ (0, import_jsx_runtime40.jsx)(
    "textarea",
    {
      ...props,
      rows: rows ?? 6,
      className: cn(
        "ring-offset-background placeholder:text-muted-foreground focus:border-ring focus:ring-ring focus-visible:ring-ring w-full rounded-md border border-tertiary bg-tertiary px-3 text-sm text-text-bright transition file:border-0 file:bg-transparent file:text-base file:font-medium hover:border-charcoal-600 focus:outline-none focus:ring-2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-offset-0 disabled:cursor-not-allowed disabled:opacity-50",
        className
      )
    }
  );
}

// app/components/Feedback.tsx
var import_jsx_runtime41 = require("react/jsx-runtime");
function Feedback({ button, defaultValue = "bug" }) {
  let [open, setOpen] = (0, import_react19.useState)(!1), location = (0, import_react18.useLocation)(), lastSubmission = (0, import_react18.useActionData)(), navigation = (0, import_react18.useNavigation)(), [form, { path: path2, feedbackType: feedbackType2, message }] = (0, import_react17.useForm)({
    id: "accept-invite",
    // TODO: type this
    lastSubmission,
    onValidate({ formData }) {
      return (0, import_zod71.parse)(formData, { schema });
    }
  });
  return open && navigation.formAction === "/resources/feedback" && form.error === void 0 && form.errors.length === 0 && setOpen(!1), /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)(Sheet, { open, onOpenChange: setOpen, children: [
    /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(SheetTrigger, { asChild: !0, children: button }),
    /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(SheetContent, { className: "@container", children: /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)(SheetBody, { className: "flex h-full flex-col justify-between", children: [
      /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(Header2, { className: "mb-2.5 text-xl", children: "Send us an email" }),
      /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(Paragraph, { className: "mb-4", children: "We read every message and respond quickly." }),
      /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(import_react18.Form, { method: "post", action: "/resources/feedback", ...form.props, children: /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)(Fieldset, { className: "max-w-full gap-y-3", children: [
        /* @__PURE__ */ (0, import_jsx_runtime41.jsx)("input", { value: location.pathname, ...import_react17.conform.input(path2, { type: "hidden" }) }),
        /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)(InputGroup, { className: "max-w-full", children: [
          /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(
            Select2,
            {
              ...import_react17.conform.select(feedbackType2),
              variant: "tertiary/medium",
              defaultValue,
              placeholder: "Select type",
              text: (value) => feedbackTypeLabel[value],
              dropdownIcon: !0,
              children: Object.entries(feedbackTypeLabel).map(([name, title2]) => /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(SelectItem2, { value: name, children: title2 }, name))
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(FormError, { id: feedbackType2.errorId, children: feedbackType2.error })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)(InputGroup, { className: "max-w-full", children: [
          /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(Label, { children: "Message" }),
          /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(TextArea, { ...import_react17.conform.textarea(message) }),
          /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(FormError, { id: message.errorId, children: message.error })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(FormError, { children: form.error }),
        /* @__PURE__ */ (0, import_jsx_runtime41.jsx)("div", { className: "flex w-full justify-end", children: /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(
          FormButtons,
          {
            className: "m-0 w-max",
            confirmButton: /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(Button, { type: "submit", variant: "tertiary/medium", children: "Send message" })
          }
        ) })
      ] }) }),
      /* @__PURE__ */ (0, import_jsx_runtime41.jsx)("hr", { className: "my-4" }),
      /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(DiscordBanner, {}),
      /* @__PURE__ */ (0, import_jsx_runtime41.jsx)("hr", { className: "mb-4" }),
      /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(Header2, { className: "mb-2.5 text-xl", children: "Troubleshooting" }),
      /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(Paragraph, { className: "mb-4", children: "If you're having trouble, check out our documentation or the Trigger.dev Status page." }),
      /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)("div", { className: "flex flex-wrap gap-2", children: [
        /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(LinkButton, { to: docsPath(""), variant: "tertiary/medium", LeadingIcon: import_solid6.BookOpenIcon, children: "Docs" }),
        /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(
          LinkButton,
          {
            to: "https://status.trigger.dev/",
            variant: "tertiary/medium",
            LeadingIcon: import_lucide_react3.ActivityIcon,
            children: "Trigger.dev Status"
          }
        )
      ] })
    ] }) })
  ] });
}
function DiscordBanner({ className }) {
  return /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)(
    "a",
    {
      href: "https://trigger.dev/discord",
      target: "_blank",
      className: cn(
        "group mb-4 flex w-full items-center justify-between rounded-md border border-grid-bright bg-charcoal-750 p-4 pl-6 transition hover:border-text-link",
        className
      ),
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)("div", { className: "flex items-center gap-6", children: [
          /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(import_companyicons2.DiscordIcon, { className: "size-12" }),
          /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)("div", { className: "flex flex-col gap-2", children: [
            /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(Header1, { className: "text-2xl font-semibold text-text-bright transition group-hover:text-white", children: "Join our Discord community" }),
            /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(Paragraph, { children: "The quickest way to get answers from the Trigger.dev community." })
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(import_solid7.ChevronRightIcon, { className: "size-5 text-charcoal-500 transition group-hover:translate-x-1 group-hover:text-text-link" })
      ]
    }
  );
}

// app/components/ImpersonationBanner.tsx
var import_react20 = require("@remix-run/react");
var import_solid8 = require("@heroicons/react/20/solid"), import_jsx_runtime42 = require("react/jsx-runtime");
function ImpersonationBanner() {
  return /* @__PURE__ */ (0, import_jsx_runtime42.jsx)("div", { className: "w-full", children: /* @__PURE__ */ (0, import_jsx_runtime42.jsx)(import_react20.Form, { action: "/resources/impersonation", method: "delete", reloadDocument: !0, className: "w-full", children: /* @__PURE__ */ (0, import_jsx_runtime42.jsx)(
    Button,
    {
      type: "submit",
      variant: "small-menu-item",
      LeadingIcon: import_solid8.UserMinusIcon,
      fullWidth: !0,
      textAlignLeft: !0,
      children: "Stop impersonating"
    }
  ) }) });
}

// app/components/StepContentContainer.tsx
var import_jsx_runtime43 = require("react/jsx-runtime");
function StepContentContainer({
  children,
  className
}) {
  return /* @__PURE__ */ (0, import_jsx_runtime43.jsx)("div", { className: cn("mb-6 ml-9 mt-1", className), children });
}

// app/components/UserProfilePhoto.tsx
var import_solid9 = require("@heroicons/react/24/solid");

// app/hooks/useUser.ts
function useOptionalUser(matches) {
  return useTypedMatchesData({
    id: "root",
    matches
  })?.user ?? void 0;
}
function useUser(matches) {
  let maybeUser = useOptionalUser(matches);
  if (!maybeUser)
    throw new Error(
      "No user found in root loader, but user is required by useUser. If user is optional, try useOptionalUser instead."
    );
  return maybeUser;
}
function useUserChanged(callback) {
  useChanged(useOptionalUser, callback);
}
function useHasAdminAccess(matches) {
  let user = useOptionalUser(matches);
  return Boolean(user?.admin);
}

// app/components/UserProfilePhoto.tsx
var import_jsx_runtime44 = require("react/jsx-runtime");
function UserProfilePhoto({ className }) {
  let user = useOptionalUser();
  return /* @__PURE__ */ (0, import_jsx_runtime44.jsx)(UserAvatar, { avatarUrl: user?.avatarUrl, name: user?.name, className });
}
function UserAvatar({
  avatarUrl,
  name,
  className
}) {
  return avatarUrl ? /* @__PURE__ */ (0, import_jsx_runtime44.jsx)("div", { className: cn("grid aspect-square place-items-center", className), children: /* @__PURE__ */ (0, import_jsx_runtime44.jsx)(
    "img",
    {
      className: cn("aspect-square rounded-full p-[7%]"),
      src: avatarUrl,
      alt: name ?? "User"
    }
  ) }) : /* @__PURE__ */ (0, import_jsx_runtime44.jsx)(import_solid9.UserCircleIcon, { className: cn("aspect-square text-charcoal-400", className) });
}

// app/components/billing/v2/FreePlanUsage.tsx
var import_outline = require("@heroicons/react/24/outline"), import_framer_motion2 = require("framer-motion");
var import_react21 = require("@remix-run/react");
var import_jsx_runtime45 = require("react/jsx-runtime");
function FreePlanUsage({ to, percentage }) {
  let cappedPercentage = Math.min(percentage, 1), widthProgress = (0, import_framer_motion2.useMotionValue)(cappedPercentage * 100), color = (0, import_framer_motion2.useTransform)(
    widthProgress,
    [0, 74, 75, 95, 100],
    ["#22C55E", "#22C55E", "#F59E0B", "#F43F5E", "#F43F5E"]
  ), hasHitLimit = cappedPercentage >= 1;
  return /* @__PURE__ */ (0, import_jsx_runtime45.jsxs)(
    "div",
    {
      className: cn(
        "rounded border border-charcoal-700 bg-charcoal-750 p-2.5",
        hasHitLimit && "border-error/40"
      ),
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime45.jsxs)("div", { className: "flex items-center justify-between gap-2", children: [
          /* @__PURE__ */ (0, import_jsx_runtime45.jsxs)("div", { className: "flex items-center gap-1", children: [
            /* @__PURE__ */ (0, import_jsx_runtime45.jsx)(import_outline.ArrowUpCircleIcon, { className: "h-5 w-5 text-text-dimmed" }),
            /* @__PURE__ */ (0, import_jsx_runtime45.jsx)(Paragraph, { className: "text-2sm text-text-bright", children: "Free Plan" })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime45.jsx)(import_react21.Link, { to, className: "text-2sm text-text-link", children: "Upgrade" })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime45.jsx)("div", { className: "relative mt-3 h-1 rounded-full bg-background-dimmed", children: /* @__PURE__ */ (0, import_jsx_runtime45.jsx)(
          import_framer_motion2.motion.div,
          {
            initial: { width: 0 },
            animate: { width: cappedPercentage * 100 + "%" },
            style: {
              backgroundColor: color
            },
            transition: { duration: 1, type: "spring" },
            className: cn("absolute left-0 top-0 h-full rounded-full")
          }
        ) })
      ]
    }
  );
}

// app/components/primitives/Badge.tsx
var import_jsx_runtime46 = require("react/jsx-runtime"), variants5 = {
  default: "grid place-items-center rounded-full px-2 h-5 tracking-wider text-xxs bg-charcoal-750 text-text-bright uppercase whitespace-nowrap",
  small: "grid place-items-center rounded-full px-[0.4rem] h-4 tracking-wider text-xxs bg-background-dimmed text-text-dimmed uppercase whitespace-nowrap",
  outline: "grid place-items-center rounded-sm px-1.5 h-5 tracking-wider text-xxs border border-dimmed text-text-dimmed uppercase whitespace-nowrap",
  v3: "grid place-items-center rounded-full px-[0.4rem] h-5 tracking-wider text-xxs bg-charcoal-750 text-primary whitespace-nowrap",
  "outline-rounded": "grid place-items-center rounded-full px-1 h-4 tracking-wider text-xxs border border-blue-500 text-blue-500 uppercase whitespace-nowrap"
};
function Badge({ className, variant: variant3 = "default", children, ...props }) {
  return /* @__PURE__ */ (0, import_jsx_runtime46.jsx)("div", { className: cn(variants5[variant3], className), ...props, children: /* @__PURE__ */ (0, import_jsx_runtime46.jsx)("span", { children }) });
}

// app/components/primitives/Callout.tsx
var import_solid10 = require("@heroicons/react/20/solid"), import_solid11 = require("@heroicons/react/24/solid"), import_react22 = require("@remix-run/react");
var import_jsx_runtime47 = require("react/jsx-runtime"), variantClasses2 = {
  info: {
    className: "border-charcoal-700 bg-charcoal-800",
    icon: /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(import_solid10.InformationCircleIcon, { className: "h-5 w-5 shrink-0 text-text-dimmed" }),
    textColor: "text-text-bright",
    linkClassName: "transition hover:bg-charcoal-750"
  },
  warning: {
    className: "border-warning/20 bg-warning/10",
    icon: /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(import_solid10.ExclamationTriangleIcon, { className: "h-5 w-5 shrink-0 text-warning" }),
    textColor: "text-yellow-200",
    linkClassName: "transition hover:bg-warning/20"
  },
  error: {
    className: "border-error/20 bg-error/10",
    icon: /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(import_solid10.ExclamationCircleIcon, { className: "h-5 w-5 shrink-0 text-error" }),
    textColor: "text-rose-200",
    linkClassName: "transition hover:bg-error/20"
  },
  idea: {
    className: "border-success/20 bg-success/10",
    icon: /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(import_solid10.LightBulbIcon, { className: "h-5 w-5 shrink-0 text-success" }),
    textColor: "text-green-200",
    linkClassName: "transition hover:bg-success/20"
  },
  success: {
    className: "border-success/20 bg-success/10",
    icon: /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(import_solid11.CheckCircleIcon, { className: "h-5 w-5 shrink-0 text-success" }),
    textColor: "text-green-200",
    linkClassName: "transition hover:bg-success/20"
  },
  docs: {
    className: "border-blue-400/20 bg-blue-400/10",
    icon: /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(import_solid11.BookOpenIcon, { className: "mt-0.5 h-5 w-5 shrink-0 text-blue-400" }),
    textColor: "text-blue-200",
    linkClassName: "transition hover:bg-blue-400/20"
  },
  pending: {
    className: "border-blue-400/20 bg-blue-800/30",
    icon: /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(Spinner, { className: "h-5 w-5 shrink-0 " }),
    textColor: "text-blue-300",
    linkClassName: "transition hover:bg-blue-400/20"
  },
  pricing: {
    className: "border-charcoal-700 bg-charcoal-800",
    icon: /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(import_solid11.ChartBarIcon, { className: "h-5 w-5 shrink-0 text-text-dimmed" }),
    textColor: "text-text-bright",
    linkClassName: "transition hover:bg-charcoal-750"
  }
};
function Callout({
  children,
  className,
  icon,
  cta,
  variant: variant3,
  to
}) {
  let variantDefinition = variantClasses2[variant3];
  return to !== void 0 ? to.startsWith("http") ? /* @__PURE__ */ (0, import_jsx_runtime47.jsxs)(
    "a",
    {
      href: to,
      target: "_blank",
      className: cn(
        "flex w-full items-start justify-between gap-2.5 rounded-md border py-2 pl-2 pr-3 shadow-md backdrop-blur-sm",
        variantDefinition.className,
        variantDefinition.linkClassName,
        className
      ),
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime47.jsxs)("div", { className: "flex w-full items-start gap-x-2", children: [
          icon || variantDefinition.icon,
          typeof children == "string" ? /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(Paragraph, { variant: "small", className: variantDefinition.textColor, children }) : children
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(import_solid11.ArrowTopRightOnSquareIcon, { className: cn("h-5 w-5", variantDefinition.textColor) })
      ]
    }
  ) : /* @__PURE__ */ (0, import_jsx_runtime47.jsxs)(
    import_react22.Link,
    {
      to,
      className: cn(
        "flex w-full items-start justify-between gap-2.5 rounded-md border py-2 pl-2 pr-3 shadow-md backdrop-blur-sm",
        variantDefinition.className,
        variantDefinition.linkClassName,
        className
      ),
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime47.jsxs)("div", { className: "flex w-full items-start gap-x-2", children: [
          icon || variantDefinition.icon,
          typeof children == "string" ? /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(Paragraph, { variant: "small", className: variantDefinition.textColor, children }) : children
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime47.jsx)("div", { className: "flex h-full items-center", children: /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(import_solid11.ChevronRightIcon, { className: cn("h-5 w-5", variantDefinition.textColor) }) })
      ]
    }
  ) : /* @__PURE__ */ (0, import_jsx_runtime47.jsxs)(
    "div",
    {
      className: cn(
        "flex w-full items-start gap-2 rounded-md border pl-2 pr-2 shadow-md backdrop-blur-sm",
        cta ? "py-2" : "py-2.5",
        variantDefinition.className,
        className
      ),
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime47.jsxs)("div", { className: cn("flex w-full items-start gap-2.5"), children: [
          icon || variantDefinition.icon,
          typeof children == "string" ? /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(Paragraph, { variant: "small", className: variantDefinition.textColor, children }) : /* @__PURE__ */ (0, import_jsx_runtime47.jsx)("span", { children })
        ] }),
        cta && cta
      ]
    }
  );
}

// app/components/primitives/ClipboardField.tsx
var import_solid12 = require("@heroicons/react/20/solid"), import_react23 = require("react");
var import_lucide_react4 = require("lucide-react"), import_jsx_runtime48 = require("react/jsx-runtime"), variants6 = {
  "primary/small": {
    container: "flex items-center text-text-dimmed font-mono rounded border bg-charcoal-750 text-xs transition hover:bg-charcoal-700 focus-visible:outline-none focus-visible:ring-0 focus-visible:ring-offset-0 focus:border-transparent focus:outline-none focus:ring-0 focus:ring-transparent",
    input: "bg-transparent border-0 text-xs px-2 w-auto rounded-l h-6 leading-6 focus:ring-transparent",
    buttonVariant: "primary/small",
    button: "rounded-l-none",
    iconSize: "h-3 w-3",
    iconPadding: "pl-1"
  },
  "secondary/small": {
    container: "flex items-center text-text-dimmed font-mono rounded border bg-charcoal-750 text-xs transition hover:bg-charcoal-700 focus-visible:outline-none focus-visible:ring-0 focus-visible:ring-offset-0 focus:border-transparent focus:outline-none focus:ring-0 focus:ring-transparent",
    input: "bg-transparent border-0 text-xs px-2 w-auto rounded-l h-6 leading-6 focus:ring-transparent",
    buttonVariant: "tertiary/small",
    button: "rounded-l-none border-l border-charcoal-750",
    iconSize: "h-3 w-3",
    iconPadding: "pl-1"
  },
  "tertiary/small": {
    container: "group/clipboard flex items-center text-text-dimmed font-mono rounded bg-transparent border border-transparent text-xs transition duration-150 hover:border-charcoal-700 focus-visible:outline-none focus-visible:ring-0 focus-visible:ring-offset-0 focus:border-transparent focus:outline-none focus:ring-0 focus:ring-transparent",
    input: "bg-transparent border-0 text-xs px-2 w-auto rounded-l h-6 leading-6 focus:ring-transparent",
    buttonVariant: "minimal/small",
    button: "rounded-l-none border-l border-transparent transition group-hover/clipboard:border-charcoal-700",
    iconSize: "h-3 w-3",
    iconPadding: "pl-1"
  },
  "primary/medium": {
    container: "flex items-center text-text-dimmed font-mono rounded border bg-charcoal-750 text-sm transition hover:bg-charcoal-700 focus-visible:outline-none focus-visible:ring-0 focus-visible:ring-offset-0 focus:border-transparent focus:outline-none focus:ring-0 focus:ring-transparent",
    input: "bg-transparent border-0 text-sm px-3 w-auto rounded-l h-8 leading-6 focus:ring-transparent",
    buttonVariant: "primary/medium",
    button: "rounded-l-none",
    iconSize: "h-4 w-4",
    iconPadding: "pl-2"
  },
  "secondary/medium": {
    container: "flex items-center text-text-dimmed font-mono rounded bg-charcoal-750 text-sm transition hover:bg-charcoal-700 focus-visible:outline-none focus-visible:ring-0 focus-visible:ring-offset-0 focus:border-transparent focus:outline-none focus:ring-0 focus:ring-transparent",
    input: "bg-transparent border-0 text-sm px-3 w-auto rounded-l h-8 leading-6 focus:ring-transparent",
    buttonVariant: "tertiary/medium",
    button: "rounded-l-none border-l border-charcoal-750",
    iconSize: "h-4 w-4",
    iconPadding: "pl-2"
  },
  "tertiary/medium": {
    container: "group flex items-center text-text-dimmed font-mono rounded bg-transparent border border-transparent text-sm transition hover:border-charcoal-700 focus-visible:outline-none focus-visible:ring-0 focus-visible:ring-offset-0 focus:border-transparent focus:outline-none focus:ring-0 focus:ring-transparent",
    input: "bg-transparent border-0 text-sm px-3 w-auto rounded-l h-8 leading-6 focus:ring-transparent",
    buttonVariant: "minimal/medium",
    button: "rounded-l-none border-l border-transparent transition group-hover:border-charcoal-700",
    iconSize: "h-4 w-4",
    iconPadding: "pl-2"
  }
};
function ClipboardField({
  value,
  secure = !1,
  variant: variant3,
  className,
  icon,
  iconButton = !1,
  fullWidth = !0
}) {
  let [isSecure, setIsSecure] = (0, import_react23.useState)(secure !== void 0 && secure), [copied, setCopied] = (0, import_react23.useState)(!1), copy2 = (0, import_react23.useCallback)(
    (event) => {
      event.preventDefault(), event.stopPropagation(), navigator.clipboard.writeText(value), setCopied(!0), setTimeout(() => {
        setCopied(!1);
      }, 1500);
    },
    [value]
  );
  (0, import_react23.useEffect)(() => {
    setIsSecure(secure !== void 0 && secure);
  }, [secure]);
  let { container: container2, input, buttonVariant, button } = variants6[variant3], iconClassName = variants6[variant3].iconSize, iconPosition = variants6[variant3].iconPadding, inputIcon = (0, import_react23.useRef)(null);
  return /* @__PURE__ */ (0, import_jsx_runtime48.jsxs)("span", { className: cn(container2, fullWidth ? "w-full" : "max-w-fit", className), children: [
    icon && /* @__PURE__ */ (0, import_jsx_runtime48.jsx)(
      "span",
      {
        onClick: () => inputIcon.current && inputIcon.current.focus(),
        className: cn(iconPosition, "flex items-center"),
        children: typeof icon == "string" ? /* @__PURE__ */ (0, import_jsx_runtime48.jsx)(NamedIcon, { name: icon, className: iconClassName }) : icon
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime48.jsx)(
      "input",
      {
        type: "text",
        ref: inputIcon,
        value: isSecure ? typeof secure == "string" ? secure : "\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022" : value,
        readOnly: !0,
        className: cn(
          "shrink grow select-all overflow-x-auto",
          fullWidth ? "w-full" : "max-w-fit",
          input
        ),
        onFocus: (e) => {
          secure && setIsSecure((i) => !1), e.currentTarget.select();
        },
        onBlur: () => {
          secure && setIsSecure((i) => !0);
        }
      }
    ),
    iconButton ? /* @__PURE__ */ (0, import_jsx_runtime48.jsx)(
      Button,
      {
        variant: buttonVariant,
        onClick: copy2,
        className: cn("shrink grow-0 px-1.5", button),
        children: copied ? /* @__PURE__ */ (0, import_jsx_runtime48.jsx)(
          import_lucide_react4.ClipboardCheckIcon,
          {
            className: cn(
              "h-4 w-4",
              buttonVariant === "primary/small" || buttonVariant === "primary/medium" ? "text-background-dimmed" : "text-green-500"
            )
          }
        ) : /* @__PURE__ */ (0, import_jsx_runtime48.jsx)(
          import_lucide_react4.ClipboardIcon,
          {
            className: cn(
              "h-4 w-4",
              buttonVariant === "primary/small" || buttonVariant === "primary/medium" ? "text-background-dimmed" : "text-text-dimmed"
            )
          }
        )
      }
    ) : /* @__PURE__ */ (0, import_jsx_runtime48.jsx)(Button, { variant: buttonVariant, onClick: copy2, className: cn("shrink-0 grow-0", button), children: copied ? /* @__PURE__ */ (0, import_jsx_runtime48.jsx)(import_solid12.CheckIcon, { className: "mx-[0.4rem] h-4 w-4 text-green-500" }) : "Copy" })
  ] });
}

// app/components/primitives/Dialog.tsx
var React6 = __toESM(require("react")), DialogPrimitive = __toESM(require("@radix-ui/react-dialog"));
var import_solid13 = require("@heroicons/react/24/solid");
var import_jsx_runtime49 = require("react/jsx-runtime"), Dialog = DialogPrimitive.Root, DialogTrigger = DialogPrimitive.Trigger, DialogPortal = ({ className, children, ...props }) => /* @__PURE__ */ (0, import_jsx_runtime49.jsx)(DialogPrimitive.Portal, { className: cn(className), ...props, children: /* @__PURE__ */ (0, import_jsx_runtime49.jsx)("div", { className: "fixed inset-0 z-50 flex items-start justify-center sm:items-center", children }) });
DialogPortal.displayName = DialogPrimitive.Portal.displayName;
var DialogOverlay = React6.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime49.jsx)(
  DialogPrimitive.Overlay,
  {
    ref,
    className: cn(
      "fixed inset-0 z-50 bg-background-dimmed/90 backdrop-blur-sm transition-all duration-100 data-[state=closed]:animate-out data-[state=closed]:fade-out data-[state=open]:fade-in",
      className
    ),
    ...props
  }
));
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName;
var DialogContent = React6.forwardRef(({ className, children, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime49.jsxs)(DialogPortal, { children: [
  /* @__PURE__ */ (0, import_jsx_runtime49.jsx)(DialogOverlay, {}),
  /* @__PURE__ */ (0, import_jsx_runtime49.jsxs)(
    DialogPrimitive.Content,
    {
      ref,
      className: cn(
        "fixed z-50 grid w-full gap-4 rounded-b-lg border bg-background-dimmed px-4 pb-4 pt-2.5 shadow-lg animate-in data-[state=open]:fade-in-90 data-[state=open]:slide-in-from-bottom-10 sm:max-w-lg sm:rounded-lg sm:zoom-in-90 data-[state=open]:sm:slide-in-from-bottom-0",
        className
      ),
      ...props,
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime49.jsx)("hr", { className: "absolute left-0 top-11 w-full" }),
        children,
        /* @__PURE__ */ (0, import_jsx_runtime49.jsx)(DialogPrimitive.Close, { className: "ring-offset-background data-[state=open]:bg-accent data-[state=open]:text-muted-foreground focus-visible:ring-ring absolute right-3 top-3 rounded-sm opacity-70 transition-opacity hover:opacity-100 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-offset-2 disabled:pointer-events-none", children: /* @__PURE__ */ (0, import_jsx_runtime49.jsxs)("div", { className: "flex gap-x-2", children: [
          /* @__PURE__ */ (0, import_jsx_runtime49.jsx)(
            ShortcutKey,
            {
              shortcut: {
                windows: {
                  key: "esc"
                },
                mac: {
                  key: "esc"
                }
              },
              variant: "small"
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime49.jsx)(import_solid13.XMarkIcon, { className: "h-5 w-5" }),
          /* @__PURE__ */ (0, import_jsx_runtime49.jsx)("span", { className: "sr-only", children: "Close" })
        ] }) })
      ]
    }
  )
] }));
DialogContent.displayName = DialogPrimitive.Content.displayName;
var DialogHeader = ({ className, ...props }) => /* @__PURE__ */ (0, import_jsx_runtime49.jsx)(
  "div",
  {
    className: cn("flex flex-col text-left font-medium text-text-bright", className),
    ...props
  }
);
DialogHeader.displayName = "DialogHeader";
var DialogFooter = ({ className, ...props }) => /* @__PURE__ */ (0, import_jsx_runtime49.jsx)(
  "div",
  {
    className: cn("flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2", className),
    ...props
  }
);
DialogFooter.displayName = "DialogFooter";
var DialogTitle = React6.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime49.jsx)(
  DialogPrimitive.Title,
  {
    ref,
    className: cn("text-base font-normal leading-none tracking-tight text-text-bright", className),
    ...props
  }
));
DialogTitle.displayName = DialogPrimitive.Title.displayName;
var DialogDescription = React6.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime49.jsx)(
  DialogPrimitive.Description,
  {
    ref,
    className: cn("text-muted-foreground pt-4 text-sm", className),
    ...props
  }
));
DialogDescription.displayName = DialogPrimitive.Description.displayName;

// app/components/primitives/Icon.tsx
var import_react24 = __toESM(require("react"));
var import_jsx_runtime50 = require("react/jsx-runtime");
function Icon(props) {
  if (!props.icon)
    return null;
  if (typeof props.icon == "string")
    return /* @__PURE__ */ (0, import_jsx_runtime50.jsx)(NamedIcon, { name: props.icon, className: props.className ?? "", fallback: /* @__PURE__ */ (0, import_jsx_runtime50.jsx)(import_jsx_runtime50.Fragment, {}) });
  if (typeof props.icon == "function") {
    let Icon3 = props.icon;
    return /* @__PURE__ */ (0, import_jsx_runtime50.jsx)(Icon3, { className: props.className });
  }
  return import_react24.default.isValidElement(props.icon) ? /* @__PURE__ */ (0, import_jsx_runtime50.jsx)(import_jsx_runtime50.Fragment, { children: props.icon }) : props.icon && typeof props.icon == "object" && ("type" in props.icon || "$$typeof" in props.icon) ? (0, import_react24.createElement)(
    props.icon,
    { className: props.className }
  ) : (console.error("Invalid icon", props), null);
}
function IconInBox({ boxClassName, ...props }) {
  return /* @__PURE__ */ (0, import_jsx_runtime50.jsx)(
    "div",
    {
      className: cn(
        "grid h-9 w-9 place-content-center rounded-sm border border-charcoal-750 bg-charcoal-850",
        boxClassName
      ),
      children: /* @__PURE__ */ (0, import_jsx_runtime50.jsx)(Icon, { icon: props.icon, className: cn("h-6 w-6", props.className) })
    }
  );
}

// app/components/primitives/Popover.tsx
var import_solid14 = require("@heroicons/react/24/solid"), PopoverPrimitive = __toESM(require("@radix-ui/react-popover")), React8 = __toESM(require("react"));
var import_jsx_runtime51 = require("react/jsx-runtime"), Popover = PopoverPrimitive.Root, PopoverTrigger = PopoverPrimitive.Trigger, PopoverContent = React8.forwardRef(({ className, align = "center", sideOffset = 4, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(PopoverPrimitive.Portal, { children: /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(
  PopoverPrimitive.Content,
  {
    ref,
    align,
    sideOffset,
    avoidCollisions: !0,
    className: cn(
      "z-50 min-w-max rounded border border-charcoal-700 bg-background-bright p-4 shadow-md outline-none animate-in data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    ),
    style: {
      maxHeight: "var(--radix-popover-content-available-height)"
    },
    ...props
  }
) }));
PopoverContent.displayName = PopoverPrimitive.Content.displayName;
function PopoverSectionHeader({
  title: title2,
  variant: variant3 = "extra-extra-small/dimmed/caps"
}) {
  return /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(Paragraph, { variant: variant3, className: "bg-charcoal-900 px-2.5 py-1.5", children: title2 });
}
function PopoverMenuItem({
  to,
  icon,
  title: title2,
  isSelected,
  variant: variant3 = { variant: "small-menu-item" },
  leadingIconClassName
}) {
  return /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(
    LinkButton,
    {
      to,
      variant: variant3.variant,
      LeadingIcon: icon,
      leadingIconClassName,
      fullWidth: !0,
      textAlignLeft: !0,
      TrailingIcon: isSelected ? "check" : void 0,
      className: isSelected ? "bg-charcoal-750 group-hover:bg-charcoal-800" : void 0,
      children: title2
    }
  );
}
function PopoverCustomTrigger({
  isOpen,
  children,
  className,
  ...props
}) {
  return /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(
    PopoverTrigger,
    {
      ...props,
      className: cn(
        "group flex items-center justify-end gap-1 rounded text-text-dimmed transition hover:bg-charcoal-850 hover:text-text-bright",
        className
      ),
      children
    }
  );
}
function PopoverArrowTrigger({
  isOpen,
  children,
  fullWidth = !1,
  overflowHidden = !1,
  className,
  ...props
}) {
  return /* @__PURE__ */ (0, import_jsx_runtime51.jsxs)(
    PopoverTrigger,
    {
      ...props,
      className: cn(
        "group flex h-6 items-center gap-1 rounded px-2 text-text-dimmed transition hover:bg-charcoal-700 hover:text-text-bright",
        fullWidth && "w-full justify-between",
        className
      ),
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(
          Paragraph,
          {
            variant: "extra-small",
            className: cn(
              "flex transition group-hover:text-text-bright",
              overflowHidden && "overflow-hidden"
            ),
            children
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(
          import_solid14.ChevronDownIcon,
          {
            className: cn(
              "h-3 w-3 min-w-[0.75rem] text-charcoal-600 transition group-hover:text-text-bright",
              isOpen && "-rotate-180"
            )
          }
        )
      ]
    }
  );
}
function PopoverVerticalEllipseTrigger({
  isOpen,
  className,
  ...props
}) {
  return /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(
    PopoverTrigger,
    {
      ...props,
      className: cn(
        "group flex items-center justify-end gap-1 rounded px-1.5 py-1.5 text-text-dimmed transition hover:bg-charcoal-750 hover:text-text-bright",
        className
      ),
      children: /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(import_solid14.EllipsisVerticalIcon, { className: cn("h-5 w-5 transition group-hover:text-text-bright") })
    }
  );
}

// app/components/primitives/StepNumber.tsx
var import_solid15 = require("@heroicons/react/24/solid"), import_jsx_runtime52 = require("react/jsx-runtime");
function StepNumber({
  stepNumber,
  active = !1,
  complete = !1,
  displaySpinner = !1,
  title: title2,
  className
}) {
  return /* @__PURE__ */ (0, import_jsx_runtime52.jsx)("div", { className: cn("mr-3", className), children: active ? /* @__PURE__ */ (0, import_jsx_runtime52.jsxs)("div", { className: "flex items-center gap-x-3", children: [
    /* @__PURE__ */ (0, import_jsx_runtime52.jsx)("span", { className: "flex h-6 w-6 items-center justify-center rounded bg-success py-1 text-xs font-semibold text-charcoal-900", children: stepNumber }),
    /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(Header2, { children: title2 })
  ] }) : /* @__PURE__ */ (0, import_jsx_runtime52.jsxs)("div", { className: "flex items-center gap-x-3", children: [
    /* @__PURE__ */ (0, import_jsx_runtime52.jsx)("span", { className: "flex h-6 w-6 items-center justify-center rounded border border-charcoal-700 bg-charcoal-800 py-1 text-xs font-semibold text-text-dimmed", children: complete ? /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(import_solid15.CheckIcon, { className: "size-4" }) : stepNumber }),
    displaySpinner ? /* @__PURE__ */ (0, import_jsx_runtime52.jsxs)("div", { className: "flex items-center gap-x-2", children: [
      /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(Header2, { children: title2 }),
      /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(Spinner, {})
    ] }) : /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(Header2, { children: title2 })
  ] }) });
}

// app/components/primitives/TextLink.tsx
var import_react25 = require("@remix-run/react");
var import_jsx_runtime53 = require("react/jsx-runtime"), variations = {
  primary: "text-indigo-500 transition hover:text-indigo-400 inline-flex gap-0.5 items-center group",
  secondary: "text-text-dimmed transition underline underline-offset-2 decoration-dimmed/50 hover:decoration-dimmed inline-flex gap-0.5 items-center group"
};
function TextLink({
  href,
  to,
  children,
  className,
  trailingIcon,
  trailingIconClassName,
  variant: variant3 = "primary",
  ...props
}) {
  let classes = variations[variant3];
  return to ? /* @__PURE__ */ (0, import_jsx_runtime53.jsxs)(import_react25.Link, { to, className: cn(classes, className), ...props, children: [
    children,
    " ",
    trailingIcon && /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(NamedIcon, { name: trailingIcon, className: cn("h-4 w-4", trailingIconClassName) })
  ] }) : href ? /* @__PURE__ */ (0, import_jsx_runtime53.jsxs)("a", { href, className: cn(classes, className), ...props, children: [
    children,
    " ",
    trailingIcon && /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(NamedIcon, { name: trailingIcon, className: cn("h-4 w-4", trailingIconClassName) })
  ] }) : /* @__PURE__ */ (0, import_jsx_runtime53.jsx)("span", { children: "Need to define a path or href" });
}

// app/components/navigation/SideMenuHeader.tsx
var import_react26 = require("@remix-run/react"), import_react27 = require("react");
var import_solid16 = require("@heroicons/react/20/solid"), import_jsx_runtime54 = require("react/jsx-runtime");
function SideMenuHeader({ title: title2, children }) {
  let [isHeaderMenuOpen, setHeaderMenuOpen] = (0, import_react27.useState)(!1), navigation = (0, import_react26.useNavigation)();
  return (0, import_react27.useEffect)(() => {
    setHeaderMenuOpen(!1);
  }, [navigation.location?.pathname]), /* @__PURE__ */ (0, import_jsx_runtime54.jsxs)("div", { className: "group flex items-center justify-between pl-1.5", children: [
    /* @__PURE__ */ (0, import_jsx_runtime54.jsx)(
      Paragraph,
      {
        variant: "extra-extra-small/caps",
        className: "cursor-default truncate text-charcoal-500",
        children: title2
      }
    ),
    children !== void 0 ? /* @__PURE__ */ (0, import_jsx_runtime54.jsxs)(Popover, { onOpenChange: (open) => setHeaderMenuOpen(open), open: isHeaderMenuOpen, children: [
      /* @__PURE__ */ (0, import_jsx_runtime54.jsx)(PopoverCustomTrigger, { className: "p-1", children: /* @__PURE__ */ (0, import_jsx_runtime54.jsx)(import_solid16.EllipsisHorizontalIcon, { className: "h-4 w-4 text-charcoal-500 transition group-hover:text-text-bright" }) }),
      /* @__PURE__ */ (0, import_jsx_runtime54.jsx)(
        PopoverContent,
        {
          className: "min-w-max overflow-y-auto p-0 scrollbar-thin scrollbar-track-transparent scrollbar-thumb-charcoal-600",
          align: "start",
          children: /* @__PURE__ */ (0, import_jsx_runtime54.jsx)("div", { className: "flex flex-col gap-1 p-1", children })
        }
      )
    ] }) : null
  ] });
}

// app/hooks/usePathName.ts
var import_react28 = require("@remix-run/react");
function usePathName(preemptive = !0) {
  let navigation = (0, import_react28.useNavigation)(), location = (0, import_react28.useLocation)();
  return !preemptive || navigation.state === "idle" || !navigation.location ? location.pathname : navigation.location.pathname;
}

// app/components/navigation/SideMenuItem.tsx
var import_icons_react = require("@tabler/icons-react"), import_jsx_runtime55 = require("react/jsx-runtime");
function SideMenuItem({
  icon,
  iconColor,
  name,
  to,
  hasWarning,
  count,
  target,
  subItem = !1
}) {
  let isActive = usePathName() === to;
  return /* @__PURE__ */ (0, import_jsx_runtime55.jsx)(
    LinkButton,
    {
      variant: subItem ? "small-menu-sub-item" : "small-menu-item",
      fullWidth: !0,
      textAlignLeft: !0,
      LeadingIcon: icon,
      leadingIconClassName: isActive ? iconColor : "text-text-dimmed",
      to,
      target,
      className: cn(
        "text-text-bright group-hover:bg-charcoal-750",
        subItem ? "text-text-dimmed" : "",
        isActive ? "bg-tertiary text-text-bright" : "group-hover:text-text-bright"
      ),
      children: /* @__PURE__ */ (0, import_jsx_runtime55.jsxs)("div", { className: "flex w-full items-center justify-between", children: [
        name,
        /* @__PURE__ */ (0, import_jsx_runtime55.jsxs)("div", { className: "flex items-center gap-1", children: [
          count !== void 0 && count > 0 && /* @__PURE__ */ (0, import_jsx_runtime55.jsx)(MenuCount, { count }),
          typeof hasWarning == "string" ? /* @__PURE__ */ (0, import_jsx_runtime55.jsx)(TooltipProvider, { children: /* @__PURE__ */ (0, import_jsx_runtime55.jsxs)(Tooltip, { children: [
            /* @__PURE__ */ (0, import_jsx_runtime55.jsx)(TooltipTrigger, { children: /* @__PURE__ */ (0, import_jsx_runtime55.jsx)(Icon, { icon: import_icons_react.IconExclamationCircle, className: "h-5 w-5 text-rose-500" }) }),
            /* @__PURE__ */ (0, import_jsx_runtime55.jsx)(TooltipContent, { className: "flex items-center gap-1 border border-rose-500 bg-rose-500/20 backdrop-blur-xl", children: hasWarning })
          ] }) }) : hasWarning && /* @__PURE__ */ (0, import_jsx_runtime55.jsx)(Icon, { icon: import_icons_react.IconExclamationCircle, className: "h-5 w-5 text-rose-500" })
        ] })
      ] })
    }
  );
}
function MenuCount({ count }) {
  return /* @__PURE__ */ (0, import_jsx_runtime55.jsx)("div", { className: "rounded-full bg-charcoal-900 px-2 py-1 text-xxs text-text-dimmed", children: count });
}

// app/components/navigation/SideMenu.tsx
var import_jsx_runtime56 = require("react/jsx-runtime");
function SideMenu({ user, project, organization, organizations }) {
  let borderRef = (0, import_react30.useRef)(null), [showHeaderDivider, setShowHeaderDivider] = (0, import_react30.useState)(!1), currentPlan = useCurrentPlan(), { isManagedCloud: isManagedCloud2 } = useFeatures();
  return (0, import_react30.useEffect)(() => {
    let handleScroll = () => {
      if (borderRef.current) {
        let shouldShowHeaderDivider = borderRef.current.scrollTop > 1;
        showHeaderDivider !== shouldShowHeaderDivider && setShowHeaderDivider(shouldShowHeaderDivider);
      }
    };
    return borderRef.current?.addEventListener("scroll", handleScroll), () => borderRef.current?.removeEventListener("scroll", handleScroll);
  }, [showHeaderDivider]), /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(
    "div",
    {
      className: cn(
        "flex h-full flex-col gap-y-8 overflow-hidden border-r border-grid-bright bg-background-bright transition"
      ),
      children: /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)("div", { className: "flex h-full flex-col", children: [
        /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)(
          "div",
          {
            className: cn(
              "flex items-center justify-between px-1 py-1 transition",
              showHeaderDivider ? " border-grid-bright" : "border-transparent"
            ),
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(ProjectSelector, { organizations, project }),
              /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(UserMenu, { user })
            ]
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)(
          "div",
          {
            className: "h-full overflow-hidden overflow-y-auto pt-2 scrollbar-thin scrollbar-track-transparent scrollbar-thumb-charcoal-600",
            ref: borderRef,
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("div", { className: "mb-6 flex flex-col gap-1 px-1", children: project.version === "V2" ? /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(V2ProjectSideMenu, { organization, project }) : /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(V3ProjectSideMenu, { organization, project }) }),
              /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)("div", { className: "mb-1 flex flex-col gap-1 px-1", children: [
                /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)(SideMenuHeader, { title: "Organization", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(PopoverMenuItem, { to: newProjectPath(organization), title: "New Project", icon: "plus" }),
                  /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(
                    PopoverMenuItem,
                    {
                      to: inviteTeamMemberPath(organization),
                      title: "Invite team member",
                      icon: import_solid18.UserPlusIcon,
                      leadingIconClassName: "text-indigo-500"
                    }
                  )
                ] }),
                project.version === "V2" && /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(
                  SideMenuItem,
                  {
                    name: "Integrations",
                    icon: "integration",
                    to: organizationIntegrationsPath(organization),
                    "data-action": "integrations",
                    hasWarning: organization.hasUnconfiguredIntegrations
                  }
                ),
                /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(
                  SideMenuItem,
                  {
                    name: "Projects",
                    icon: "folder",
                    to: organizationPath(organization),
                    "data-action": "projects"
                  }
                ),
                /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(
                  SideMenuItem,
                  {
                    name: "Team",
                    icon: import_solid18.UserGroupIcon,
                    to: organizationTeamPath(organization),
                    iconColor: "text-amber-500",
                    "data-action": "team"
                  }
                ),
                organization.projects.some((proj) => proj.version === "V3") && isManagedCloud2 && /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)(import_jsx_runtime56.Fragment, { children: [
                  /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(
                    SideMenuItem,
                    {
                      name: "Usage",
                      icon: import_solid17.ChartBarIcon,
                      to: v3UsagePath(organization),
                      iconColor: "text-green-600",
                      "data-action": "usage"
                    }
                  ),
                  /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(
                    SideMenuItem,
                    {
                      name: "Billing",
                      icon: import_solid17.CreditCardIcon,
                      to: v3BillingPath(organization),
                      iconColor: "text-blue-600",
                      "data-action": "billing"
                    }
                  )
                ] }),
                organization.projects.some((proj) => proj.version === "V2") && /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(
                  SideMenuItem,
                  {
                    name: "Usage (v2)",
                    icon: import_solid17.ChartBarIcon,
                    to: organizationBillingPath(organization),
                    iconColor: "text-green-600",
                    "data-action": "usage & billing"
                  }
                ),
                /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(
                  SideMenuItem,
                  {
                    name: "Organization settings",
                    icon: "settings",
                    iconColor: "text-teal-500",
                    to: organizationSettingsPath(organization),
                    "data-action": "organization-settings"
                  }
                )
              ] })
            ]
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("div", { className: "m-2", children: project.version === "V2" && /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(Callout, { variant: "info", children: /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)(Paragraph, { variant: "small", children: [
          "This is a v2 project.",
          " ",
          /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(TextLink, { href: "https://trigger.dev/docs/v3/upgrading-from-v2", children: "Upgrade to v3" })
        ] }) }) }),
        /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)("div", { className: "flex flex-col gap-1 border-t border-grid-bright p-1", children: [
          currentPlan?.v3Subscription?.plan?.limits.support === "slack" && /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)(Dialog, { children: [
            /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(DialogTrigger, { asChild: !0, children: /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(
              Button,
              {
                variant: "small-menu-item",
                LeadingIcon: import_companyicons3.SlackIcon,
                "data-action": "join our slack",
                fullWidth: !0,
                textAlignLeft: !0,
                children: "Join our Slack"
              }
            ) }),
            /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)(DialogContent, { children: [
              /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(DialogHeader, { children: "Join our Slack" }),
              /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)("div", { className: "mt-2 flex flex-col gap-4", children: [
                /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)("div", { className: "flex items-center gap-4", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(Icon, { icon: import_companyicons3.SlackIcon, className: "h-10 w-10 min-w-[2.5rem]" }),
                  /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(Paragraph, { variant: "base/bright", children: "As a subscriber, you have access to a dedicated Slack channel for 1-to-1 support with the Trigger.dev team." })
                ] }),
                /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("hr", { className: "border-charcoal-800" }),
                /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)("div", { children: [
                  /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(StepNumber, { stepNumber: "1", title: "Email us" }),
                  /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(StepContentContainer, { children: /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)(Paragraph, { children: [
                    "Send us an email to this address from your Trigger.dev account email address:",
                    /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(
                      ClipboardField,
                      {
                        variant: "primary/medium",
                        value: "priority-support@trigger.dev",
                        className: "my-2"
                      }
                    )
                  ] }) }),
                  /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(StepNumber, { stepNumber: "2", title: "Look out for an invite from Slack" }),
                  /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(StepContentContainer, { children: /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(Paragraph, { children: "As soon as we can, we'll setup a Slack Connect channel and say hello!" }) })
                ] })
              ] })
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(
            SideMenuItem,
            {
              name: "Join our Discord",
              icon: import_companyicons3.DiscordIcon,
              to: "https://trigger.dev/discord",
              "data-action": "join our discord",
              target: "_blank"
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(
            SideMenuItem,
            {
              name: "Documentation",
              icon: "docs",
              to: "https://trigger.dev/docs",
              "data-action": "documentation",
              target: "_blank"
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(
            SideMenuItem,
            {
              name: "Changelog",
              icon: "star",
              to: "https://trigger.dev/changelog",
              "data-action": "changelog",
              target: "_blank"
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(
            SideMenuItem,
            {
              name: "Status",
              icon: import_solid17.SignalIcon,
              to: "https://status.trigger.dev/",
              "data-action": "status",
              target: "_blank"
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(
            Feedback,
            {
              button: /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(
                Button,
                {
                  variant: "small-menu-item",
                  LeadingIcon: "log",
                  leadingIconClassName: "text-primary",
                  "data-action": "help & feedback",
                  fullWidth: !0,
                  textAlignLeft: !0,
                  children: /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("span", { className: "text-primary", children: "Help & Feedback" })
                }
              )
            }
          ),
          currentPlan?.v3Subscription?.isPaying === !1 && /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(
            FreePlanUsage,
            {
              to: v3BillingPath(organization),
              percentage: currentPlan.v3Usage.usagePercentage
            }
          )
        ] })
      ] })
    }
  );
}
function ProjectSelector({
  project,
  organizations
}) {
  let [isOrgMenuOpen, setOrgMenuOpen] = (0, import_react30.useState)(!1), navigation = (0, import_react29.useNavigation)();
  return (0, import_react30.useEffect)(() => {
    setOrgMenuOpen(!1);
  }, [navigation.location?.pathname]), /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)(Popover, { onOpenChange: (open) => setOrgMenuOpen(open), open: isOrgMenuOpen, children: [
    /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)(
      PopoverArrowTrigger,
      {
        isOpen: isOrgMenuOpen,
        overflowHidden: !0,
        className: "h-7 w-full justify-between overflow-hidden py-1 pl-2",
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(LogoIcon, { className: "relative -top-px mr-2 h-4 w-4 min-w-[1rem]" }),
          /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("span", { className: "truncate", children: project.name ?? "Select a project" })
        ]
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)(
      PopoverContent,
      {
        className: "min-w-[16rem] overflow-y-auto p-0 scrollbar-thin scrollbar-track-transparent scrollbar-thumb-charcoal-600",
        align: "start",
        style: { maxHeight: "calc(var(--radix-popover-content-available-height) - 10vh)" },
        children: [
          organizations.map((organization) => /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)(import_react30.Fragment, { children: [
            /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(PopoverSectionHeader, { title: organization.title }),
            /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("div", { className: "flex flex-col gap-1 p-1", children: organization.projects.length > 0 ? organization.projects.map((p) => {
              let isSelected = p.id === project.id;
              return /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(
                PopoverMenuItem,
                {
                  to: projectPath(organization, p),
                  title: /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)("div", { className: "flex w-full items-center justify-between text-text-bright", children: [
                    /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("span", { className: "grow truncate text-left", children: p.name }),
                    p.version === "V2" ? /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(MenuCount, { count: p.jobCount }) : /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(Badge, { variant: "v3", children: "v3" })
                  ] }),
                  isSelected,
                  icon: "folder"
                },
                p.id
              );
            }) : /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(
              PopoverMenuItem,
              {
                to: newProjectPath(organization),
                title: "New project",
                icon: "plus"
              }
            ) })
          ] }, organization.id)),
          /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("div", { className: "border-t border-charcoal-800 p-1", children: /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(PopoverMenuItem, { to: newOrganizationPath(), title: "New Organization", icon: "plus" }) })
        ]
      }
    )
  ] });
}
function UserMenu({ user }) {
  let [isProfileMenuOpen, setProfileMenuOpen] = (0, import_react30.useState)(!1), navigation = (0, import_react29.useNavigation)(), { v3Enabled } = useFeatures();
  return (0, import_react30.useEffect)(() => {
    setProfileMenuOpen(!1);
  }, [navigation.location?.pathname]), /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)(Popover, { onOpenChange: (open) => setProfileMenuOpen(open), children: [
    /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(PopoverCustomTrigger, { isOpen: isProfileMenuOpen, className: "p-1 hover:bg-transparent", children: /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(
      UserProfilePhoto,
      {
        className: cn(
          "h-5 w-5 rounded-full border border-transparent text-charcoal-600 transition hover:border-charcoal-600",
          user.isImpersonating && "rounded-full border border-yellow-500"
        )
      }
    ) }),
    /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(
      PopoverContent,
      {
        className: "min-w-[12rem] overflow-y-auto p-0 scrollbar-thin scrollbar-track-transparent scrollbar-thumb-charcoal-600",
        align: "start",
        children: /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)(import_react30.Fragment, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(PopoverSectionHeader, { title: user.email, variant: "extra-small" }),
          /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)("div", { className: "flex flex-col gap-1 p-1", children: [
            user.isImpersonating && /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(ImpersonationBanner, {}),
            user.admin && /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(
              PopoverMenuItem,
              {
                to: "/admin",
                title: "Admin",
                icon: import_solid17.AcademicCapIcon,
                leadingIconClassName: "text-yellow-500"
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(
              PopoverMenuItem,
              {
                to: accountPath(),
                title: "View profile",
                icon: UserProfilePhoto,
                leadingIconClassName: "text-indigo-500"
              }
            ),
            v3Enabled && /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(
              PopoverMenuItem,
              {
                to: personalAccessTokensPath(),
                title: "Personal Access Tokens",
                icon: import_solid17.ShieldCheckIcon,
                leadingIconClassName: "text-emerald-500"
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(
              PopoverMenuItem,
              {
                to: logoutPath(),
                title: "Log out",
                icon: import_solid17.ArrowRightOnRectangleIcon,
                leadingIconClassName: "text-rose-500"
              }
            )
          ] })
        ] })
      }
    )
  ] });
}
function V2ProjectSideMenu({
  project,
  organization
}) {
  return /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)(import_jsx_runtime56.Fragment, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(SideMenuHeader, { title: "Project (v2)", children: /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(
      PopoverMenuItem,
      {
        to: projectSetupPath(organization, project),
        title: "Framework setup",
        icon: "plus"
      }
    ) }),
    /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(
      SideMenuItem,
      {
        name: "Jobs",
        icon: "job",
        iconColor: "text-indigo-500",
        count: project.jobCount,
        to: projectPath(organization, project),
        "data-action": "jobs"
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(
      SideMenuItem,
      {
        name: "Runs",
        icon: "runs",
        iconColor: "text-teal-500",
        to: projectRunsPath(organization, project)
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(
      SideMenuItem,
      {
        name: "Triggers",
        icon: "trigger",
        iconColor: "text-amber-500",
        to: projectTriggersPath(organization, project),
        "data-action": "triggers",
        hasWarning: project.hasInactiveExternalTriggers
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(
      SideMenuItem,
      {
        name: "Events",
        icon: import_solid17.CursorArrowRaysIcon,
        iconColor: "text-sky-500",
        to: projectEventsPath(organization, project)
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(
      SideMenuItem,
      {
        name: "HTTP endpoints",
        icon: "http-endpoint",
        iconColor: "text-pink-500",
        count: project.httpEndpointCount,
        to: projectHttpEndpointsPath(organization, project),
        "data-action": "httpendpoints"
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(
      SideMenuItem,
      {
        name: "Environments & API Keys",
        icon: "environment",
        iconColor: "text-rose-500",
        to: projectEnvironmentsPath(organization, project),
        "data-action": "environments & api keys"
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(
      SideMenuItem,
      {
        name: "Project settings",
        icon: "settings",
        iconColor: "text-teal-500",
        to: projectSettingsPath(organization, project),
        "data-action": "project-settings"
      }
    )
  ] });
}
function V3ProjectSideMenu({
  project,
  organization
}) {
  let { alertsEnabled } = useFeatures();
  return /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)(import_jsx_runtime56.Fragment, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(SideMenuHeader, { title: "Project" }),
    /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(
      SideMenuItem,
      {
        name: "Tasks",
        icon: TaskIcon,
        iconColor: "text-blue-500",
        count: project.jobCount,
        to: v3ProjectPath(organization, project),
        "data-action": "tasks"
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(
      SideMenuItem,
      {
        name: "Runs",
        icon: "runs",
        iconColor: "text-teal-500",
        to: v3RunsPath(organization, project)
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(
      SideMenuItem,
      {
        name: "Test",
        icon: import_solid17.BeakerIcon,
        iconColor: "text-lime-500",
        to: v3TestPath(organization, project),
        "data-action": "test"
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(
      SideMenuItem,
      {
        name: "Schedules",
        icon: import_solid17.ClockIcon,
        iconColor: "text-sun-500",
        to: v3SchedulesPath(organization, project),
        "data-action": "schedules"
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(
      SideMenuItem,
      {
        name: "API keys",
        icon: import_solid17.KeyIcon,
        iconColor: "text-amber-500",
        to: v3ApiKeysPath(organization, project),
        "data-action": "api keys"
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(
      SideMenuItem,
      {
        name: "Environment variables",
        icon: import_solid17.IdentificationIcon,
        iconColor: "text-pink-500",
        to: v3EnvironmentVariablesPath(organization, project),
        "data-action": "environment variables"
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(
      SideMenuItem,
      {
        name: "Deployments",
        icon: import_solid17.ServerStackIcon,
        iconColor: "text-blue-500",
        to: v3DeploymentsPath(organization, project),
        "data-action": "deployments"
      }
    ),
    alertsEnabled && /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(
      SideMenuItem,
      {
        name: "Alerts",
        icon: import_solid17.BellAlertIcon,
        iconColor: "text-red-500",
        to: v3ProjectAlertsPath(organization, project),
        "data-action": "alerts"
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(
      SideMenuItem,
      {
        name: "Project settings",
        icon: "settings",
        iconColor: "text-teal-500",
        to: v3ProjectSettingsPath(organization, project),
        "data-action": "project-settings"
      }
    )
  ] });
}

// app/presenters/OrganizationsPresenter.server.ts
var import_remix_typedjson6 = require("remix-typedjson");

// app/services/currentProject.server.ts
var import_node7 = require("@remix-run/node");
var currentProjectSessionStorage = (0, import_node7.createCookieSessionStorage)({
  cookie: {
    name: "__project",
    // use any name you want here
    sameSite: "lax",
    // this helps with CSRF
    path: "/",
    // remember to add this so the cookie will work in all routes
    httpOnly: !0,
    // for security reasons, make this cookie http only
    secrets: [env2.SESSION_SECRET],
    secure: env2.NODE_ENV === "production",
    // enable this in prod only
    maxAge: 60 * 60 * 365
    // 1 year
  }
});
function getCurrentProjectSession(request) {
  return currentProjectSessionStorage.getSession(request.headers.get("Cookie"));
}
function commitCurrentProjectSession(session) {
  return currentProjectSessionStorage.commitSession(session);
}
async function getCurrentProjectId(request) {
  return (await getCurrentProjectSession(request)).get("currentProjectId");
}
async function setCurrentProjectId(id, request) {
  let session = await getCurrentProjectSession(request);
  return session.set("currentProjectId", id), session;
}
async function clearCurrentProjectId(request) {
  let session = await getCurrentProjectSession(request);
  return session.unset("currentProjectId"), session;
}

// app/presenters/ProjectPresenter.server.ts
var ProjectPresenter = class {
  #prismaClient;
  constructor(prismaClient = prisma) {
    this.#prismaClient = prismaClient;
  }
  async call({
    userId,
    id
  }) {
    let project = await this.#prismaClient.project.findFirst({
      select: {
        id: !0,
        slug: !0,
        name: !0,
        organizationId: !0,
        createdAt: !0,
        updatedAt: !0,
        deletedAt: !0,
        version: !0,
        externalRef: !0,
        _count: {
          select: {
            sources: {
              where: {
                active: !1
              }
            },
            jobs: {
              where: {
                internal: !1,
                deletedAt: null
              }
            },
            httpEndpoints: !0
          }
        },
        environments: {
          select: {
            id: !0,
            slug: !0,
            type: !0,
            orgMember: {
              select: {
                user: {
                  select: {
                    id: !0,
                    name: !0,
                    displayName: !0
                  }
                }
              }
            },
            apiKey: !0
          }
        }
      },
      where: { id, deletedAt: null, organization: { members: { some: { userId } } } }
    });
    if (project)
      return {
        id: project.id,
        slug: project.slug,
        ref: project.externalRef,
        name: project.name,
        organizationId: project.organizationId,
        createdAt: project.createdAt,
        updatedAt: project.updatedAt,
        deletedAt: project.deletedAt,
        version: project.version,
        hasInactiveExternalTriggers: project._count.sources > 0,
        jobCount: project._count.jobs,
        httpEndpointCount: project._count.httpEndpoints,
        environments: sortEnvironments(
          project.environments.map((environment) => ({
            ...displayableEnvironment(environment, userId),
            userId: environment.orgMember?.user.id
          }))
        )
      };
  }
};

// app/presenters/OrganizationsPresenter.server.ts
var OrganizationsPresenter = class {
  #prismaClient;
  constructor(prismaClient = prisma) {
    this.#prismaClient = prismaClient;
  }
  async call({
    userId,
    organizationSlug,
    projectSlug,
    request
  }) {
    let projectId = await this.#getProjectId({
      request,
      projectSlug,
      organizationSlug,
      userId
    }), organizations = await this.#getOrganizations(userId), organization = organizations.find((o) => o.slug === organizationSlug);
    if (!organization)
      throw logger.info("Not Found: organization", {
        organizationSlug,
        request,
        organization
      }), new Response("Not Found", { status: 404 });
    let project = await new ProjectPresenter(this.#prismaClient).call({
      id: projectId,
      userId
    });
    if (!project)
      throw redirectWithErrorMessage(
        newProjectPath({ slug: organizationSlug }),
        request,
        "No projects found in organization"
      );
    if (project.organizationId !== organization.id)
      throw (0, import_remix_typedjson6.redirect)(newProjectPath({ slug: organizationSlug }), request);
    return { organizations, organization, project };
  }
  async #getProjectId({
    request,
    projectSlug,
    organizationSlug,
    userId
  }) {
    let sessionProjectId = await getCurrentProjectId(request);
    if (!sessionProjectId) {
      if (!projectSlug) {
        let bestProject = await this.#selectBestProjectForOrganization(
          organizationSlug,
          userId,
          request
        ), session2 = await setCurrentProjectId(bestProject.id, request);
        throw (0, import_remix_typedjson6.redirect)(request.url, {
          headers: { "Set-Cookie": await commitCurrentProjectSession(session2) }
        });
      }
      let projects2 = await prisma.project.findMany({
        select: {
          id: !0,
          slug: !0
        },
        where: {
          organization: {
            slug: organizationSlug
          },
          deletedAt: null,
          slug: projectSlug
        },
        orderBy: {
          updatedAt: "desc"
        }
      });
      if (projects2.length === 0)
        throw redirectWithErrorMessage(
          newProjectPath({ slug: organizationSlug }),
          request,
          "No projects in this organization"
        );
      let matchingProject = projects2.find((p) => p.slug === projectSlug);
      matchingProject || (matchingProject = projects2[0]);
      let session = await setCurrentProjectId(matchingProject.id, request);
      throw (0, import_remix_typedjson6.redirect)(request.url, {
        headers: { "Set-Cookie": await commitCurrentProjectSession(session) }
      });
    }
    if (!projectSlug)
      return sessionProjectId;
    let project = await prisma.project.findFirst({
      select: {
        id: !0,
        slug: !0
      },
      where: {
        slug: projectSlug,
        organization: {
          slug: organizationSlug
        },
        deletedAt: null
      }
    });
    if (!project)
      throw new Response("Project not found in organization", { status: 404 });
    if (project.id !== sessionProjectId) {
      let session = await setCurrentProjectId(project.id, request);
      throw (0, import_remix_typedjson6.redirect)(request.url, {
        headers: { "Set-Cookie": await commitCurrentProjectSession(session) }
      });
    }
    return project.id;
  }
  async #getOrganizations(userId) {
    return (await this.#prismaClient.organization.findMany({
      where: { members: { some: { userId } }, deletedAt: null },
      orderBy: { createdAt: "desc" },
      select: {
        id: !0,
        slug: !0,
        title: !0,
        runsEnabled: !0,
        projects: {
          where: { deletedAt: null },
          select: {
            id: !0,
            slug: !0,
            name: !0,
            _count: {
              select: {
                jobs: {
                  where: {
                    internal: !1,
                    deletedAt: null
                  }
                }
              }
            },
            version: !0
          },
          orderBy: { name: "asc" }
        },
        _count: {
          select: {
            integrations: {
              where: {
                setupStatus: "MISSING_FIELDS"
              }
            }
          }
        }
      }
    })).map((org) => ({
      id: org.id,
      slug: org.slug,
      title: org.title,
      projects: org.projects.map((project) => ({
        id: project.id,
        slug: project.slug,
        name: project.name,
        jobCount: project._count.jobs,
        version: project.version
      })),
      hasUnconfiguredIntegrations: org._count.integrations > 0,
      runsEnabled: org.runsEnabled
    }));
  }
  async #selectBestProjectForOrganization(organizationSlug, userId, request) {
    let projects2 = await this.#prismaClient.project.findMany({
      select: {
        id: !0,
        slug: !0
      },
      where: {
        deletedAt: null,
        organization: {
          deletedAt: null,
          slug: organizationSlug,
          members: { some: { userId } }
        }
      },
      orderBy: {
        jobs: {
          _count: "desc"
        }
      },
      take: 1
    });
    if (projects2.length === 0)
      throw (0, import_remix_typedjson6.redirect)(newProjectPath({ slug: organizationSlug }), request);
    return projects2[0];
  }
};

// app/routes/_app.orgs.$organizationSlug/route.tsx
var import_jsx_runtime57 = require("react/jsx-runtime"), ParamsSchema = import_zod72.z.object({
  organizationSlug: import_zod72.z.string(),
  projectParam: import_zod72.z.string().optional()
});
function useCurrentPlan(matches) {
  return useTypedMatchesData({
    id: "routes/_app.orgs.$organizationSlug",
    matches
  })?.currentPlan;
}
var loader = async ({ request, params }) => {
  let userId = await requireUserId(request), impersonationId = await getImpersonationId(request), { organizationSlug, projectParam: projectParam2 } = ParamsSchema.parse(params), orgsPresenter = new OrganizationsPresenter(), { organizations, organization, project } = await orgsPresenter.call({
    userId,
    request,
    organizationSlug,
    projectSlug: projectParam2
  });
  telemetry.organization.identify({ organization }), telemetry.project.identify({ project });
  let firstDayOfMonth = /* @__PURE__ */ new Date();
  firstDayOfMonth.setUTCDate(1), firstDayOfMonth.setUTCHours(0, 0, 0, 0);
  let tomorrow = /* @__PURE__ */ new Date();
  tomorrow.setUTCDate(tomorrow.getDate() + 1);
  let [plan, usage] = await Promise.all([
    getCurrentPlan(organization.id),
    getUsage(organization.id, { from: firstDayOfMonth, to: tomorrow })
  ]), hasExceededFreeTier = !1, usagePercentage = 0;
  return plan?.v3Subscription && !plan.v3Subscription.isPaying && plan.v3Subscription.plan && usage && (hasExceededFreeTier = usage.cents > plan.v3Subscription.plan.limits.includedUsage, usagePercentage = usage.cents / plan.v3Subscription.plan.limits.includedUsage), (0, import_remix_typedjson7.typedjson)({
    organizations,
    organization,
    project,
    isImpersonating: !!impersonationId,
    currentPlan: { ...plan, v3Usage: { ...usage, hasExceededFreeTier, usagePercentage } }
  });
};
function Organization2() {
  let { organization, project, organizations, isImpersonating } = (0, import_remix_typedjson7.useTypedLoaderData)(), user = useUser();
  return /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(import_jsx_runtime57.Fragment, { children: /* @__PURE__ */ (0, import_jsx_runtime57.jsxs)("div", { className: "grid grid-cols-[14rem_1fr] overflow-hidden", children: [
    /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(
      SideMenu,
      {
        user: { ...user, isImpersonating },
        project,
        organization,
        organizations
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(MainBody, { children: /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(import_react31.Outlet, {}) })
  ] }) });
}
function ErrorBoundary() {
  let org = useOptionalOrganization();
  return org ? /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(RouteErrorDisplay, { button: { title: org.title, to: organizationPath(org) } }) : /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(RouteErrorDisplay, { button: { title: "Home", to: "/" } });
}
var shouldRevalidate = ({
  defaultShouldRevalidate,
  currentParams,
  nextParams
}) => {
  let current = ParamsSchema.safeParse(currentParams), next = ParamsSchema.safeParse(nextParams);
  return current.success && next.success && (current.data.organizationSlug !== next.data.organizationSlug || current.data.projectParam !== next.data.projectParam) ? !0 : defaultShouldRevalidate;
};

// app/components/primitives/DateTime.tsx
var import_react32 = require("react");
var import_jsx_runtime58 = require("react/jsx-runtime"), DateTime = ({
  date,
  timeZone,
  includeSeconds = !0,
  includeTime = !0,
  showTimezone = !1
}) => {
  let locales = useLocales(), realDate = typeof date == "string" ? new Date(date) : date, initialFormattedDateTime = formatDateTime(
    realDate,
    timeZone ?? "UTC",
    locales,
    includeSeconds,
    includeTime
  ), [formattedDateTime, setFormattedDateTime] = (0, import_react32.useState)(initialFormattedDateTime);
  return (0, import_react32.useEffect)(() => {
    let resolvedOptions = Intl.DateTimeFormat().resolvedOptions();
    setFormattedDateTime(
      formatDateTime(
        realDate,
        timeZone ?? resolvedOptions.timeZone,
        locales,
        includeSeconds,
        includeTime
      )
    );
  }, [locales, includeSeconds, realDate]), /* @__PURE__ */ (0, import_jsx_runtime58.jsxs)(import_react32.Fragment, { children: [
    formattedDateTime.replace(/\s/g, String.fromCharCode(32)),
    showTimezone ? ` (${timeZone ?? "UTC"})` : null
  ] });
};
function formatDateTime(date, timeZone, locales, includeSeconds, includeTime) {
  return new Intl.DateTimeFormat(locales, {
    year: "numeric",
    month: "short",
    day: "numeric",
    hour: includeTime ? "numeric" : void 0,
    minute: includeTime ? "numeric" : void 0,
    second: includeTime && includeSeconds ? "numeric" : void 0,
    timeZone
  }).format(date);
}
var DateTimeAccurate = ({ date, timeZone = "UTC" }) => {
  let locales = useLocales(), realDate = typeof date == "string" ? new Date(date) : date, initialFormattedDateTime = formatDateTimeAccurate(realDate, timeZone, locales), [formattedDateTime, setFormattedDateTime] = (0, import_react32.useState)(initialFormattedDateTime);
  return (0, import_react32.useEffect)(() => {
    let resolvedOptions = Intl.DateTimeFormat().resolvedOptions();
    setFormattedDateTime(formatDateTimeAccurate(realDate, resolvedOptions.timeZone, locales));
  }, [locales, realDate]), /* @__PURE__ */ (0, import_jsx_runtime58.jsx)(import_react32.Fragment, { children: formattedDateTime.replace(/\s/g, String.fromCharCode(32)) });
};
function formatDateTimeAccurate(date, timeZone, locales) {
  return new Intl.DateTimeFormat(locales, {
    month: "short",
    day: "numeric",
    hour: "numeric",
    minute: "numeric",
    second: "numeric",
    timeZone,
    // @ts-ignore this works in 92.5% of browsers https://caniuse.com/mdn-javascript_builtins_intl_datetimeformat_datetimeformat_options_parameter_options_fractionalseconddigits_parameter
    fractionalSecondDigits: 3
  }).format(date);
}

// app/components/billing/v3/UpgradePrompt.tsx
var import_jsx_runtime59 = require("react/jsx-runtime");
function UpgradePrompt() {
  let organization = useOrganization(), plan = useCurrentPlan();
  if (!plan || !plan.v3Usage.hasExceededFreeTier)
    return null;
  let nextMonth = /* @__PURE__ */ new Date();
  return nextMonth.setUTCMonth(nextMonth.getMonth() + 1), nextMonth.setUTCDate(1), nextMonth.setUTCHours(0, 0, 0, 0), /* @__PURE__ */ (0, import_jsx_runtime59.jsxs)(
    "div",
    {
      className: "flex h-10 items-center justify-between border border-error bg-repeat py-0 pl-3 pr-2",
      style: { backgroundImage: `url(${error_banner_tile_2x_default})`, backgroundSize: "8px 8px" },
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime59.jsxs)("div", { className: "flex items-center gap-2", children: [
          /* @__PURE__ */ (0, import_jsx_runtime59.jsx)(Icon, { icon: import_solid19.ExclamationCircleIcon, className: "h-5 w-5 text-error" }),
          /* @__PURE__ */ (0, import_jsx_runtime59.jsxs)(Paragraph, { variant: "small", className: "text-error", children: [
            "You have exceeded the monthly $",
            (plan.v3Subscription?.plan?.limits.includedUsage ?? 500) / 100,
            " free credits. No runs will execute in Prod until",
            " ",
            /* @__PURE__ */ (0, import_jsx_runtime59.jsx)(DateTime, { date: nextMonth, includeTime: !1, timeZone: "utc" }),
            ", or you upgrade."
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime59.jsx)(
          LinkButton,
          {
            variant: "primary/small",
            leadingIconClassName: "px-0",
            to: v3BillingPath(organization),
            children: "Upgrade"
          }
        )
      ]
    }
  );
}
function useShowUpgradePrompt(organization) {
  return { shouldShow: useCurrentPlan()?.v3Usage.hasExceededFreeTier === !0 };
}

// app/components/layout/AppLayout.tsx
var import_jsx_runtime60 = require("react/jsx-runtime");
function AppContainer({ children }) {
  return /* @__PURE__ */ (0, import_jsx_runtime60.jsx)("div", { className: cn("grid h-full w-full grid-rows-1 overflow-hidden"), children });
}
function MainBody({ children }) {
  return /* @__PURE__ */ (0, import_jsx_runtime60.jsx)("div", { className: cn("grid grid-rows-1 overflow-hidden"), children });
}
function PageContainer({ children }) {
  let organization = useOptionalOrganization(), showUpgradePrompt = useShowUpgradePrompt(organization);
  return /* @__PURE__ */ (0, import_jsx_runtime60.jsx)(
    "div",
    {
      className: cn(
        "grid overflow-hidden",
        showUpgradePrompt.shouldShow ? "grid-rows-[5rem_1fr]" : "grid-rows-[2.5rem_1fr]"
      ),
      children
    }
  );
}
function PageBody({
  children,
  scrollable = !0,
  className
}) {
  return /* @__PURE__ */ (0, import_jsx_runtime60.jsx)(
    "div",
    {
      className: cn(
        scrollable ? "overflow-y-auto p-3 scrollbar-thin scrollbar-track-transparent scrollbar-thumb-charcoal-600" : "overflow-hidden",
        className
      ),
      children
    }
  );
}
function MainCenteredContainer({
  children,
  className
}) {
  return /* @__PURE__ */ (0, import_jsx_runtime60.jsx)("div", { className: "h-full w-full overflow-y-auto scrollbar-thin scrollbar-track-transparent scrollbar-thumb-charcoal-600", children: /* @__PURE__ */ (0, import_jsx_runtime60.jsx)("div", { className: cn("mx-auto mt-6 max-w-xs overflow-y-auto p-1 md:mt-[22vh]", className), children }) });
}

// app/components/primitives/Toast.tsx
var import_solid20 = require("@heroicons/react/20/solid"), import_solid21 = require("@heroicons/react/24/solid"), import_sonner = require("sonner"), import_remix_typedjson8 = require("remix-typedjson"), import_react33 = require("react");
var import_jsx_runtime61 = require("react/jsx-runtime"), defaultToastDuration = 5e3, permanentToastDuration = 60 * 60 * 24 * 1e3;
function Toast() {
  let { toastMessage } = (0, import_remix_typedjson8.useTypedLoaderData)();
  return (0, import_react33.useEffect)(() => {
    if (!toastMessage)
      return;
    let { message, type, options: options2 } = toastMessage;
    import_sonner.toast.custom((t) => /* @__PURE__ */ (0, import_jsx_runtime61.jsx)(ToastUI, { variant: type, message, t }), {
      duration: options2.ephemeral ? defaultToastDuration : permanentToastDuration
    });
  }, [toastMessage]), /* @__PURE__ */ (0, import_jsx_runtime61.jsx)(import_sonner.Toaster, {});
}
function ToastUI({
  variant: variant3,
  message,
  t,
  toastWidth = 356
  // Default width, matches what sonner provides by default
}) {
  return /* @__PURE__ */ (0, import_jsx_runtime61.jsx)(
    "div",
    {
      className: "self-end rounded-md border border-grid-bright bg-background-dimmed",
      style: {
        width: toastWidth
      },
      children: /* @__PURE__ */ (0, import_jsx_runtime61.jsxs)("div", { className: "flex w-full items-start gap-2 rounded-lg p-3", children: [
        variant3 === "success" ? /* @__PURE__ */ (0, import_jsx_runtime61.jsx)(import_solid21.CheckCircleIcon, { className: "mt-1 h-6 min-h-[1.5rem] w-6 min-w-[1.5rem] text-green-600" }) : /* @__PURE__ */ (0, import_jsx_runtime61.jsx)(import_solid20.ExclamationCircleIcon, { className: "mt-1 h-6 w-6 min-w-[1.5rem] text-rose-600" }),
        /* @__PURE__ */ (0, import_jsx_runtime61.jsx)(Paragraph, { className: "py-1 text-text-dimmed", children: message }),
        /* @__PURE__ */ (0, import_jsx_runtime61.jsx)(
          "button",
          {
            className: "hover:bg-midnight-800 ms-auto rounded p-2 text-text-dimmed transition hover:text-text-bright",
            onClick: () => import_sonner.toast.dismiss(t),
            children: /* @__PURE__ */ (0, import_jsx_runtime61.jsx)(import_solid20.XMarkIcon, { className: "h-4 w-4" })
          }
        )
      ] })
    }
  );
}

// app/hooks/useHighlight.ts
function useHighlight() {
  useUserChanged((user) => {
    user && H.identify(user.id, {
      email: user.email
    });
  });
}

// app/hooks/usePostHog.ts
var import_react34 = require("@remix-run/react"), import_posthog_js = __toESM(require("posthog-js")), import_react35 = require("react");

// app/hooks/useProject.tsx
var import_tiny_invariant3 = __toESM(require("tiny-invariant"));
function useOptionalProject(matches) {
  return useTypedMatchesData({
    id: organizationMatchId,
    matches
  })?.project;
}
function useProject(matches) {
  let project = useOptionalProject(matches);
  return (0, import_tiny_invariant3.default)(project, "Project must be defined"), project;
}
var useProjectChanged = (action106) => {
  useChanged(useOptionalProject, action106);
};

// app/hooks/useJob.tsx
var import_tiny_invariant4 = __toESM(require("tiny-invariant"));
var jobMatchId = "routes/_app.orgs.$organizationSlug.projects.$projectParam.jobs.$jobParam";
function useOptionalJob(matches) {
  let routeMatch = useTypedMatchesData({
    id: jobMatchId,
    matches
  });
  if (routeMatch)
    return routeMatch.job;
}
function useJob(matches) {
  let job = useOptionalJob(matches);
  return (0, import_tiny_invariant4.default)(job, "Job must be defined"), job;
}
var useJobChanged = (action106) => {
  useChanged(useOptionalJob, action106);
};

// app/hooks/usePostHog.ts
var usePostHog = (apiKey, logging = !1, debug = !1) => {
  let postHogInitialized = (0, import_react35.useRef)(!1), location = (0, import_react34.useLocation)(), user = useOptionalUser();
  (0, import_react35.useEffect)(() => {
    apiKey === void 0 || apiKey === "" || postHogInitialized.current !== !0 && (logging && console.log("Initializing PostHog"), import_posthog_js.default.init(apiKey, {
      api_host: "https://eu.posthog.com",
      opt_in_site_apps: !0,
      debug,
      loaded: function(posthog2) {
        logging && console.log("PostHog loaded"), user !== void 0 && (logging && console.log("Loaded: Identifying user", user), posthog2.identify(user.id, { email: user.email }));
      }
    }), postHogInitialized.current = !0);
  }, [apiKey, logging, user]), useUserChanged((user2) => {
    postHogInitialized.current !== !1 && (logging && console.log("User changed"), user2 ? (logging && console.log("Identifying user", user2), import_posthog_js.default.identify(user2.id, { email: user2.email })) : (logging && console.log("Resetting user"), import_posthog_js.default.reset()));
  }), useOrganizationChanged((org) => {
    postHogInitialized.current !== !1 && (org ? (logging && console.log("Grouping by organization", org), import_posthog_js.default.group("organization", org.id)) : (logging && console.log("Resetting groups"), import_posthog_js.default.resetGroups()));
  }), useProjectChanged((project) => {
    postHogInitialized.current !== !1 && project && (logging && console.log("Grouping by project", project), import_posthog_js.default.group("project", project.id));
  }), useJobChanged((job) => {
    postHogInitialized.current !== !1 && job && (logging && console.log("Grouping by job", job), import_posthog_js.default.group("job", job.id));
  }), (0, import_react35.useEffect)(() => {
    postHogInitialized.current !== !1 && import_posthog_js.default.capture("$pageview");
  }, [location, logging]);
};

// app/utils.ts
var import_react36 = require("@remix-run/react");
function titleCase(original) {
  return original.split(" ").map((word) => word[0].toUpperCase() + word.slice(1)).join(" ");
}
function appEnvTitleTag(appEnv) {
  return !appEnv || appEnv === "production" ? "" : ` (${appEnv})`;
}

// app/root.tsx
var import_jsx_runtime62 = require("react/jsx-runtime"), links = () => [{ rel: "stylesheet", href: tailwind_default }], meta = ({ data: data2 }) => {
  let typedData = data2;
  return [
    { title: `Trigger.dev${appEnvTitleTag(typedData.appEnv)}` },
    {
      name: "viewport",
      content: "width=1024, initial-scale=1"
    },
    {
      name: "robots",
      content: typedData.features.isManagedCloud ? "index, follow" : "noindex, nofollow"
    }
  ];
}, loader2 = async ({ request }) => {
  let session = await getSession2(request.headers.get("cookie")), toastMessage = session.get("toastMessage"), posthogProjectKey = env2.POSTHOG_PROJECT_KEY, highlightProjectId = env2.HIGHLIGHT_PROJECT_ID, features = featuresForRequest(request);
  return (0, import_remix_typedjson9.typedjson)(
    {
      user: await getUser(request),
      toastMessage,
      posthogProjectKey,
      highlightProjectId,
      features,
      appEnv: env2.APP_ENV,
      appOrigin: env2.APP_ORIGIN
    },
    { headers: { "Set-Cookie": await commitSession2(session) } }
  );
}, shouldRevalidate2 = (options2) => options2.formAction === "/resources/environment" ? !1 : options2.defaultShouldRevalidate;
function ErrorBoundary2() {
  return /* @__PURE__ */ (0, import_jsx_runtime62.jsx)(import_jsx_runtime62.Fragment, { children: /* @__PURE__ */ (0, import_jsx_runtime62.jsxs)("html", { lang: "en", className: "h-full", children: [
    /* @__PURE__ */ (0, import_jsx_runtime62.jsxs)("head", { children: [
      /* @__PURE__ */ (0, import_jsx_runtime62.jsx)("meta", { charSet: "utf-8" }),
      /* @__PURE__ */ (0, import_jsx_runtime62.jsx)(import_react37.Meta, {}),
      /* @__PURE__ */ (0, import_jsx_runtime62.jsx)(import_react37.Links, {})
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime62.jsxs)("body", { className: "bg-darkBackground h-full overflow-hidden", children: [
      /* @__PURE__ */ (0, import_jsx_runtime62.jsx)(AppContainer, { children: /* @__PURE__ */ (0, import_jsx_runtime62.jsx)(MainCenteredContainer, { children: /* @__PURE__ */ (0, import_jsx_runtime62.jsx)(RouteErrorDisplay, {}) }) }),
      /* @__PURE__ */ (0, import_jsx_runtime62.jsx)(import_react37.Scripts, {})
    ] })
  ] }) });
}
function App() {
  let { posthogProjectKey, highlightProjectId } = (0, import_remix_typedjson9.useTypedLoaderData)();
  return usePostHog(posthogProjectKey), useHighlight(), /* @__PURE__ */ (0, import_jsx_runtime62.jsxs)(import_jsx_runtime62.Fragment, { children: [
    highlightProjectId && /* @__PURE__ */ (0, import_jsx_runtime62.jsx)(
      HighlightInit,
      {
        projectId: highlightProjectId,
        tracingOrigins: !0,
        networkRecording: { enabled: !0, recordHeadersAndBody: !0 }
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime62.jsxs)("html", { lang: "en", className: "h-full", children: [
      /* @__PURE__ */ (0, import_jsx_runtime62.jsxs)("head", { children: [
        /* @__PURE__ */ (0, import_jsx_runtime62.jsx)(import_react37.Meta, {}),
        /* @__PURE__ */ (0, import_jsx_runtime62.jsx)(import_react37.Links, {})
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime62.jsxs)("body", { className: "bg-darkBackground h-full overflow-hidden", children: [
        /* @__PURE__ */ (0, import_jsx_runtime62.jsx)(import_react37.Outlet, {}),
        /* @__PURE__ */ (0, import_jsx_runtime62.jsx)(Toast, {}),
        /* @__PURE__ */ (0, import_jsx_runtime62.jsx)(import_react37.ScrollRestoration, {}),
        /* @__PURE__ */ (0, import_jsx_runtime62.jsx)(ExternalScripts, {}),
        /* @__PURE__ */ (0, import_jsx_runtime62.jsx)(import_react37.Scripts, {}),
        /* @__PURE__ */ (0, import_jsx_runtime62.jsx)(import_react37.LiveReload, {})
      ] })
    ] })
  ] });
}
var root_default = App;

// app/routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.webhooks.$triggerParam_.runs.delivery.$runParam.tasks.$taskParam/route.tsx
var route_exports2 = {};
__export(route_exports2, {
  default: () => Page,
  loader: () => loader3
});
var import_react43 = require("@remix-run/react"), import_server_runtime4 = require("@remix-run/server-runtime"), import_react44 = require("react");

// app/components/run/RunCard.tsx
var import_framer_motion3 = require("framer-motion"), import_lucide_react6 = require("lucide-react"), import_react40 = require("react");

// app/components/code/CodeBlock.tsx
var import_lucide_react5 = require("lucide-react"), import_prism_react_renderer = require("prism-react-renderer"), import_react38 = require("react");
var import_jsx_runtime63 = require("react/jsx-runtime");
async function setup() {
  (typeof global < "u" ? global : window).Prism = import_prism_react_renderer.Prism, await Promise.resolve().then(() => __toESM(require_prism_json())), await Promise.resolve().then(() => __toESM(require_prism_typescript()));
}
setup();
var dimAmount = 0.5, extraLinesWhenClipping = 0.35, defaultTheme = {
  plain: {
    color: "#9C9AF2",
    backgroundColor: "rgba(0, 0, 0, 0)"
  },
  styles: [
    {
      types: ["comment", "prolog", "doctype", "cdata"],
      style: {
        color: "#5F6570"
      }
    },
    {
      types: ["punctuation"],
      style: {
        color: "#878C99"
      }
    },
    {
      types: ["property", "tag", "boolean", "number", "constant", "symbol", "deleted"],
      style: {
        color: "#9B99FF"
      }
    },
    {
      types: ["selector", "attr-name", "string", "char", "builtin", "inserted"],
      style: {
        color: "#AFEC73"
      }
    },
    {
      types: ["operator", "entity", "url"],
      style: {
        color: "#D4D4D4"
      }
    },
    {
      types: ["variable"],
      style: {
        color: "#CCCBFF"
      }
    },
    {
      types: ["atrule", "attr-value", "keyword"],
      style: {
        color: "#E888F8"
      }
    },
    {
      types: ["function", "class-name"],
      style: {
        color: "#D9F07C"
      }
    },
    {
      types: ["regex"],
      style: {
        color: "#d16969"
      }
    },
    {
      types: ["important", "bold"],
      style: {
        fontWeight: "bold"
      }
    },
    {
      types: ["italic"],
      style: {
        fontStyle: "italic"
      }
    },
    {
      types: ["namespace"],
      style: {
        opacity: 0.7
      }
    },
    {
      types: ["deleted"],
      style: {
        color: "#F85149"
      }
    },
    {
      types: ["boolean"],
      style: {
        color: "#9B99FF"
      }
    },
    {
      types: ["char"],
      style: {
        color: "#b5cea8"
      }
    },
    {
      types: ["tag"],
      style: {
        color: "#D7BA7D"
      }
    },
    {
      types: ["keyword.operator"],
      style: {
        color: "#8271ED"
      }
    },
    {
      types: ["meta.template.expression"],
      style: {
        color: "#d4d4d4"
      }
    }
  ]
}, CodeBlock3 = (0, import_react38.forwardRef)(
  ({
    showCopyButton = !0,
    showLineNumbers = !0,
    highlightedRanges,
    code,
    className,
    language = "typescript",
    theme: theme2 = defaultTheme,
    maxLines,
    showChrome = !1,
    fileName,
    rowTitle,
    ...props
  }, ref) => {
    let [mouseOver, setMouseOver] = (0, import_react38.useState)(!1), [copied, setCopied] = (0, import_react38.useState)(!1), onCopied = (0, import_react38.useCallback)(
      (event) => {
        event.preventDefault(), event.stopPropagation(), navigator.clipboard.writeText(code), setCopied(!0), setTimeout(() => {
          setCopied(!1);
        }, 1500);
      },
      [code]
    );
    code = code.trim();
    let lineCount = code.split(`
`).length, maxLineWidth = lineCount.toString().length, maxHeight;
    maxLines && lineCount > maxLines && (maxHeight = `calc(${(maxLines + extraLinesWhenClipping) * 0.75 * 1.625}rem + 1.5rem )`);
    let highlightLines = highlightedRanges?.flatMap(
      ([start, end]) => Array.from({ length: end - start + 1 }, (_, i) => start + i)
    ), shouldHighlight = lineCount <= 1e3;
    return /* @__PURE__ */ (0, import_jsx_runtime63.jsxs)(
      "div",
      {
        className: cn("relative overflow-hidden rounded-md border border-grid-bright", className),
        style: {
          backgroundColor: theme2.plain.backgroundColor
        },
        ref,
        ...props,
        translate: "no",
        children: [
          showChrome && /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(Chrome, { title: fileName }),
          rowTitle && /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(TitleRow, { title: rowTitle }),
          showCopyButton && /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(TooltipProvider, { children: /* @__PURE__ */ (0, import_jsx_runtime63.jsxs)(Tooltip, { open: copied || mouseOver, children: [
            /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(
              TooltipTrigger,
              {
                onClick: onCopied,
                onMouseEnter: () => setMouseOver(!0),
                onMouseLeave: () => setMouseOver(!1),
                className: cn(
                  "absolute  right-3 z-50 transition-colors duration-100 hover:cursor-pointer",
                  showChrome ? "top-10" : "top-3",
                  copied ? "text-emerald-500" : "text-charcoal-500 hover:text-charcoal-300"
                ),
                children: copied ? /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(import_lucide_react5.ClipboardCheck, { className: "h-5 w-5" }) : /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(import_lucide_react5.Clipboard, { className: "h-5 w-5" })
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(TooltipContent, { side: "left", className: "text-xs", children: copied ? "Copied" : "Copy" })
          ] }) }),
          shouldHighlight ? /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(import_prism_react_renderer.Highlight, { theme: theme2, code, language, children: ({
            className: inheritedClassName,
            style: inheritedStyle,
            tokens,
            getLineProps,
            getTokenProps
          }) => /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(
            "div",
            {
              dir: "ltr",
              className: "overflow-auto px-2 py-3 scrollbar-thin scrollbar-track-transparent scrollbar-thumb-charcoal-600",
              style: {
                maxHeight
              },
              children: /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(
                "pre",
                {
                  className: cn(
                    "relative mr-2 font-mono text-xs leading-relaxed",
                    inheritedClassName
                  ),
                  style: inheritedStyle,
                  dir: "ltr",
                  children: tokens.map((line, index) => {
                    if (index === tokens.length - 1 && line.length === 1 && line[0].content === `
`)
                      return null;
                    let lineNumber = index + 1, lineProps = getLineProps({ line, key: index }), hasAnyHighlights = highlightLines ? highlightLines.length > 0 : !1, shouldDim = hasAnyHighlights;
                    return hasAnyHighlights && highlightLines?.includes(lineNumber) && (shouldDim = !1), /* @__PURE__ */ (0, import_jsx_runtime63.jsxs)(
                      "div",
                      {
                        ...lineProps,
                        className: cn(
                          "flex w-full justify-start transition-opacity duration-500",
                          lineProps.className
                        ),
                        style: {
                          opacity: shouldDim ? dimAmount : void 0,
                          ...lineProps.style
                        },
                        children: [
                          showLineNumbers && /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(
                            "div",
                            {
                              className: "mr-2 flex-none select-none text-right text-charcoal-500 transition-opacity duration-500",
                              style: {
                                width: `calc(8 * ${maxLineWidth / 16}rem)`
                              },
                              children: lineNumber
                            }
                          ),
                          /* @__PURE__ */ (0, import_jsx_runtime63.jsx)("div", { className: "flex-1", children: line.map((token, key) => {
                            let tokenProps = getTokenProps({ token, key });
                            return /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(
                              "span",
                              {
                                ...tokenProps,
                                style: {
                                  color: tokenProps?.style?.color,
                                  ...tokenProps.style
                                }
                              },
                              key
                            );
                          }) }),
                          /* @__PURE__ */ (0, import_jsx_runtime63.jsx)("div", { className: "w-4 flex-none" })
                        ]
                      },
                      lineNumber
                    );
                  }).filter(Boolean)
                }
              )
            }
          ) }) : /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(
            "div",
            {
              dir: "ltr",
              className: "overflow-auto px-2 py-3 scrollbar-thin scrollbar-track-transparent scrollbar-thumb-charcoal-600",
              style: {
                maxHeight
              },
              children: /* @__PURE__ */ (0, import_jsx_runtime63.jsx)("pre", { className: "relative mr-2 p-2 font-mono text-xs leading-relaxed", dir: "ltr", children: code })
            }
          )
        ]
      }
    );
  }
);
CodeBlock3.displayName = "CodeBlock";
function Chrome({ title: title2 }) {
  return /* @__PURE__ */ (0, import_jsx_runtime63.jsxs)("div", { className: "grid h-7 grid-cols-[100px_auto_100px] border-b border-charcoal-800 bg-charcoal-900", children: [
    /* @__PURE__ */ (0, import_jsx_runtime63.jsxs)("div", { className: "ml-2 flex items-center gap-2", children: [
      /* @__PURE__ */ (0, import_jsx_runtime63.jsx)("div", { className: "h-3 w-3 rounded-full bg-charcoal-700" }),
      /* @__PURE__ */ (0, import_jsx_runtime63.jsx)("div", { className: "h-3 w-3 rounded-full bg-charcoal-700" }),
      /* @__PURE__ */ (0, import_jsx_runtime63.jsx)("div", { className: "h-3 w-3 rounded-full bg-charcoal-700" })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime63.jsx)("div", { className: "flex items-center justify-center", children: /* @__PURE__ */ (0, import_jsx_runtime63.jsx)("div", { className: cn("rounded-sm px-3 py-0.5 text-xs text-charcoal-500"), children: title2 }) }),
    /* @__PURE__ */ (0, import_jsx_runtime63.jsx)("div", {})
  ] });
}
function TitleRow({ title: title2 }) {
  return /* @__PURE__ */ (0, import_jsx_runtime63.jsx)("div", { className: "flex items-center justify-between px-4", children: /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(Paragraph, { variant: "base/bright", className: "w-full border-b border-grid-dimmed py-2.5", children: title2 }) });
}

// app/components/primitives/LabelValueStack.tsx
var import_solid22 = require("@heroicons/react/20/solid");
var import_react39 = require("@remix-run/react"), import_jsx_runtime64 = require("react/jsx-runtime"), variations2 = {
  primary: {
    label: "extra-small/bright",
    value: "extra-small"
  },
  secondary: {
    label: "extra-extra-small/caps",
    value: "extra-small/bright"
  }
};
function LabelValueStack({
  label,
  value,
  href,
  layout = "vertical",
  variant: variant3 = "secondary",
  className
}) {
  let variation = variations2[variant3];
  return /* @__PURE__ */ (0, import_jsx_runtime64.jsxs)(
    "div",
    {
      className: cn(
        "flex items-baseline",
        layout === "vertical" && "flex-col",
        variant3 === "primary" ? "gap-x-1 gap-y-0" : "gap-x-1 gap-y-0.5",
        className
      ),
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime64.jsx)(Paragraph, { variant: variation.label, children: label }),
        /* @__PURE__ */ (0, import_jsx_runtime64.jsx)(import_jsx_runtime64.Fragment, { children: href ? /* @__PURE__ */ (0, import_jsx_runtime64.jsx)(ValueButton, { value, href, variant: variant3 }) : /* @__PURE__ */ (0, import_jsx_runtime64.jsx)(Paragraph, { variant: variation.value, children: value }) })
      ]
    }
  );
}
function ValueButton({ value, href, variant: variant3 = "secondary" }) {
  let variation = variations2[variant3];
  return href.startsWith("http") ? /* @__PURE__ */ (0, import_jsx_runtime64.jsx)(
    SimpleTooltip,
    {
      side: "bottom",
      button: /* @__PURE__ */ (0, import_jsx_runtime64.jsx)(Paragraph, { variant: variation.value, children: /* @__PURE__ */ (0, import_jsx_runtime64.jsxs)("a", { href, className: "underline underline-offset-2", target: "_blank", children: [
        value,
        /* @__PURE__ */ (0, import_jsx_runtime64.jsx)(import_solid22.ArrowTopRightOnSquareIcon, { className: "ml-1 inline-block h-4 w-4 text-text-dimmed" })
      ] }) }),
      content: href
    }
  ) : /* @__PURE__ */ (0, import_jsx_runtime64.jsx)(Paragraph, { variant: variation.value, children: /* @__PURE__ */ (0, import_jsx_runtime64.jsx)(import_react39.Link, { to: href, reloadDocument: !0, className: "underline underline-offset-2", children: value }) });
}

// app/components/run/RunCard.tsx
var import_jsx_runtime65 = require("react/jsx-runtime");
function RunPanel({
  selected = !1,
  children,
  onClick,
  className,
  styleName = "normal"
}) {
  return /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(
    "div",
    {
      className: cn(
        "overflow-hidden rounded-md border transition duration-150",
        styleName === "normal" && "bg-background-bright",
        selected ? "border-green-500" : styleName === "normal" ? "border-charcoal-850" : "border-charcoal-900",
        onClick && "cursor-pointer",
        onClick && !selected && "hover:border-charcoal-500/30",
        className
      ),
      onClick: () => onClick && onClick(),
      children
    }
  );
}
function RunPanelHeader({
  icon,
  title: title2,
  accessory,
  styleName = "normal"
}) {
  return /* @__PURE__ */ (0, import_jsx_runtime65.jsxs)(
    "div",
    {
      className: cn(
        "flex items-center justify-between px-2",
        styleName === "normal" ? "h-10 border-b border-charcoal-700 bg-background-bright py-2" : "pt-2"
      ),
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime65.jsxs)("div", { className: "flex items-center gap-2", children: [
          typeof icon == "string" ? /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(NamedIcon, { name: icon, className: "h-5 w-5" }) : icon,
          typeof title2 == "string" ? /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(Paragraph, { variant: "small/bright", children: title2 }) : title2
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("div", { className: "flex items-center gap-2", children: accessory })
      ]
    }
  );
}
function RunPanelIconTitle({ icon, title: title2 }) {
  return /* @__PURE__ */ (0, import_jsx_runtime65.jsxs)("div", { className: "flex items-center gap-1", children: [
    icon && /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(NamedIcon, { name: icon, className: "h-5 w-5" }),
    /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(Paragraph, { variant: "small/bright", children: title2 })
  ] });
}
function RunPanelBody({ children }) {
  return /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("div", { className: "p-4", children });
}
var variantClasses3 = {
  log: "",
  error: "text-rose-500",
  warn: "text-yellow-500",
  info: "",
  debug: ""
};
function RunPanelDescription({ text, variant: variant3 }) {
  return /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(Paragraph, { variant: "small", className: cn(variant3 && variantClasses3[variant3]), children: text });
}
function RunPanelError({
  text,
  error,
  stackTrace
}) {
  return /* @__PURE__ */ (0, import_jsx_runtime65.jsxs)("div", { children: [
    /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(Callout, { variant: "error", className: "mb-2", children: text }),
    error && /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(CodeBlock3, { language: "json", code: error }),
    stackTrace && /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(CodeBlock3, { language: "json", code: stackTrace })
  ] });
}
function RunPanelIconSection({
  children,
  className
}) {
  return /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("div", { className: cn("flex flex-wrap gap-x-8 gap-y-2", className), children });
}
function RunPanelDivider() {
  return /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("div", { className: "mb-4 border-b border-charcoal-700 pb-4" });
}
function RunPanelIconProperty({
  icon,
  label,
  value
}) {
  return /* @__PURE__ */ (0, import_jsx_runtime65.jsxs)("div", { className: "flex items-center gap-2", children: [
    /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("div", { className: "flex h-8 w-8 items-center justify-center rounded-sm border border-charcoal-800 bg-charcoal-850", children: typeof icon == "string" ? /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(NamedIcon, { name: icon, className: "h-5 w-5" }) : icon }),
    /* @__PURE__ */ (0, import_jsx_runtime65.jsxs)("div", { className: "flex flex-col gap-0.5", children: [
      /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(Paragraph, { variant: "extra-extra-small/caps", children: label }),
      /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(Paragraph, { variant: "extra-small/bright", children: value })
    ] })
  ] });
}
function RunPanelProperties({
  properties,
  className,
  layout = "horizontal"
}) {
  return /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(
    "div",
    {
      className: cn(
        "flex items-baseline",
        layout === "horizontal" ? "flex-wrap gap-x-8 gap-y-2" : "flex-col gap-y-3",
        className
      ),
      children: properties.map(({ label, text, url }, index) => /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(LabelValueStack, { label, value: text, href: url }, index))
    }
  );
}
function TaskSeparator({ depth }) {
  return /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("div", { className: "h-4 w-4 border-r border-charcoal-600", style: { marginLeft: `${depth}rem` } });
}
var updateInterval = 100;
function UpdatingDuration({ start, end }) {
  let [now, setNow] = (0, import_react40.useState)();
  return (0, import_react40.useEffect)(() => {
    if (end)
      return;
    let interval = setInterval(() => {
      setNow(/* @__PURE__ */ new Date());
    }, updateInterval);
    return () => clearInterval(interval);
  }, [end]), /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("span", { children: formatDuration(start, end || now, {
    style: "short",
    maxDecimalPoints: 0
  }) });
}
function UpdatingDelay({ delayUntil }) {
  let [now, setNow] = (0, import_react40.useState)();
  return (0, import_react40.useEffect)(() => {
    let interval = setInterval(() => {
      let date = /* @__PURE__ */ new Date();
      if (date > delayUntil) {
        setNow(delayUntil);
        return;
      }
      setNow(date);
    }, updateInterval);
    return () => clearInterval(interval);
  }, [delayUntil]), /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(
    RunPanelIconProperty,
    {
      icon: /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(
        import_framer_motion3.motion.span,
        {
          animate: {
            rotate: 180,
            transition: {
              repeat: 1 / 0,
              duration: 0.3,
              delay: 5,
              repeatDelay: 5
            }
          },
          children: /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(import_lucide_react6.HourglassIcon, { className: "h-5 w-5 text-yellow-400" })
        }
      ),
      label: "Delay finishes in",
      value: formatDuration(now, delayUntil, {
        style: "long",
        maxDecimalPoints: 0
      })
    }
  );
}

// app/components/primitives/Table.tsx
var import_solid23 = require("@heroicons/react/24/solid"), import_react41 = require("@remix-run/react"), import_react42 = require("react");
var import_jsx_runtime66 = require("react/jsx-runtime"), Table = (0, import_react42.forwardRef)(
  ({ className, containerClassName, children, fullWidth }, ref) => /* @__PURE__ */ (0, import_jsx_runtime66.jsx)(
    "div",
    {
      className: cn(
        "overflow-x-auto whitespace-nowrap rounded-md border border-grid-bright scrollbar-thin scrollbar-track-transparent scrollbar-thumb-charcoal-600",
        containerClassName,
        fullWidth && "w-full"
      ),
      children: /* @__PURE__ */ (0, import_jsx_runtime66.jsx)("table", { ref, className: cn("w-full divide-y", className), children })
    }
  )
), TableHeader = (0, import_react42.forwardRef)(
  ({ className, children }, ref) => /* @__PURE__ */ (0, import_jsx_runtime66.jsx)(
    "thead",
    {
      ref,
      className: cn("rounded-t-md", "relative divide-y divide-grid-dimmed", className),
      children
    }
  )
), TableBody = (0, import_react42.forwardRef)(
  ({ className, children }, ref) => /* @__PURE__ */ (0, import_jsx_runtime66.jsx)("tbody", { ref, className: cn("relative divide-y divide-grid-dimmed", className), children })
), TableRow = (0, import_react42.forwardRef)(
  ({ className, disabled, children }, ref) => /* @__PURE__ */ (0, import_jsx_runtime66.jsx)("tr", { ref, className: cn(disabled && "opacity-50", "group/table-row w-full", className), children })
), TableHeaderCell = (0, import_react42.forwardRef)(
  ({ className, alignment = "left", children, colSpan, hiddenLabel = !1, tooltip }, ref) => {
    let alignmentClassName = "text-left";
    switch (alignment) {
      case "center":
        alignmentClassName = "text-center";
        break;
      case "right":
        alignmentClassName = "text-right";
        break;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime66.jsx)(
      "th",
      {
        ref,
        scope: "col",
        className: cn(
          "px-3 py-2 align-middle text-xxs font-normal uppercase tracking-wider text-text-dimmed",
          alignmentClassName,
          className
        ),
        colSpan,
        children: hiddenLabel ? /* @__PURE__ */ (0, import_jsx_runtime66.jsx)("span", { className: "sr-only", children }) : tooltip ? /* @__PURE__ */ (0, import_jsx_runtime66.jsxs)("div", { className: "flex items-center gap-1", children: [
          children,
          /* @__PURE__ */ (0, import_jsx_runtime66.jsx)(InfoIconTooltip, { content: tooltip, contentClassName: "normal-case tracking-normal" })
        ] }) : children
      }
    );
  }
), stickyStyles = "sticky right-0 z-10 w-[2.8rem] min-w-[2.8rem] bg-background-dimmed before:absolute before:pointer-events-none before:-left-8 before:top-0 before:h-full before:min-w-[2rem] before:bg-gradient-to-r before:from-transparent before:to-background before:content-[''] group-hover/table-row:before:to-charcoal-900", TableCell = (0, import_react42.forwardRef)(
  ({
    className,
    actionClassName,
    alignment = "left",
    children,
    colSpan,
    to,
    onClick,
    hasAction = !1,
    isSticky = !1
  }, ref) => {
    let alignmentClassName = "text-left";
    switch (alignment) {
      case "center":
        alignmentClassName = "text-center";
        break;
      case "right":
        alignmentClassName = "text-right";
        break;
    }
    let flexClasses = cn(
      "flex w-full whitespace-nowrap px-3 py-3 text-xs text-text-dimmed",
      alignment === "left" ? "justify-start text-left" : alignment === "center" ? "justify-center text-center" : "justify-end text-right"
    );
    return /* @__PURE__ */ (0, import_jsx_runtime66.jsx)(
      "td",
      {
        ref,
        className: cn(
          "text-xs text-charcoal-400",
          to || onClick || hasAction ? "cursor-pointer group-hover/table-row:bg-charcoal-900" : "px-3 py-3 align-middle",
          !to && !onClick && alignmentClassName,
          isSticky && stickyStyles,
          className
        ),
        colSpan,
        children: to ? /* @__PURE__ */ (0, import_jsx_runtime66.jsx)(import_react41.Link, { to, className: cn(flexClasses, actionClassName), children }) : onClick ? /* @__PURE__ */ (0, import_jsx_runtime66.jsx)("button", { onClick, className: cn(flexClasses, actionClassName), children }) : /* @__PURE__ */ (0, import_jsx_runtime66.jsx)(import_jsx_runtime66.Fragment, { children })
      }
    );
  }
), TableCellChevron = (0, import_react42.forwardRef)(({ className, to, children, isSticky, onClick }, ref) => /* @__PURE__ */ (0, import_jsx_runtime66.jsxs)(
  TableCell,
  {
    className,
    isSticky,
    to,
    onClick,
    ref,
    alignment: "right",
    children: [
      children,
      /* @__PURE__ */ (0, import_jsx_runtime66.jsx)(import_solid23.ChevronRightIcon, { className: "h-4 w-4 text-text-dimmed transition group-hover:text-text-bright" })
    ]
  }
)), TableCellMenu = (0, import_react42.forwardRef)(({ className, children, isSticky, onClick }, ref) => {
  let [isOpen, setIsOpen] = (0, import_react42.useState)(!1);
  return /* @__PURE__ */ (0, import_jsx_runtime66.jsx)(
    TableCell,
    {
      className,
      isSticky,
      onClick,
      ref,
      alignment: "right",
      hasAction: !0,
      children: /* @__PURE__ */ (0, import_jsx_runtime66.jsxs)(Popover, { onOpenChange: (open) => setIsOpen(open), children: [
        /* @__PURE__ */ (0, import_jsx_runtime66.jsx)(PopoverVerticalEllipseTrigger, { isOpen }),
        /* @__PURE__ */ (0, import_jsx_runtime66.jsx)(
          PopoverContent,
          {
            className: "w-fit max-w-[10rem] overflow-y-auto p-0 scrollbar-thin scrollbar-track-transparent scrollbar-thumb-charcoal-600",
            align: "end",
            children: /* @__PURE__ */ (0, import_jsx_runtime66.jsx)("div", { className: "flex flex-col gap-1 p-1", children })
          }
        )
      ] })
    }
  );
}), TableBlankRow = (0, import_react42.forwardRef)(
  ({ children, colSpan, className }, ref) => /* @__PURE__ */ (0, import_jsx_runtime66.jsx)("tr", { ref, children: /* @__PURE__ */ (0, import_jsx_runtime66.jsx)("td", { colSpan, className: cn("py-6 text-center text-sm", className), children }) })
);

// app/components/run/TaskAttemptStatus.tsx
var import_solid24 = require("@heroicons/react/24/solid");
var import_jsx_runtime67 = require("react/jsx-runtime");
function TaskAttemptStatusLabel({ status }) {
  return /* @__PURE__ */ (0, import_jsx_runtime67.jsxs)("span", { className: "inline-flex items-center gap-0.5", children: [
    /* @__PURE__ */ (0, import_jsx_runtime67.jsx)(TaskAttemptStatusIcon, { status, className: "h-4 w-4" }),
    /* @__PURE__ */ (0, import_jsx_runtime67.jsx)(Paragraph, { variant: "extra-small", className: taskAttemptStatusClassNameColor(status), children: taskAttemptStatusTitle(status) })
  ] });
}
function TaskAttemptStatusIcon({ status, className }) {
  switch (status) {
    case "COMPLETED":
      return /* @__PURE__ */ (0, import_jsx_runtime67.jsx)(import_solid24.CheckCircleIcon, { className: cn(taskAttemptStatusClassNameColor(status), className) });
    case "PENDING":
      return /* @__PURE__ */ (0, import_jsx_runtime67.jsx)(import_solid24.ClockIcon, { className: cn(taskAttemptStatusClassNameColor(status), className) });
    case "STARTED":
      return /* @__PURE__ */ (0, import_jsx_runtime67.jsx)(Spinner, { className: cn(taskAttemptStatusClassNameColor(status), className) });
    case "ERRORED":
      return /* @__PURE__ */ (0, import_jsx_runtime67.jsx)(import_solid24.XCircleIcon, { className: cn(taskAttemptStatusClassNameColor(status), className) });
  }
}
function taskAttemptStatusClassNameColor(status) {
  switch (status) {
    case "COMPLETED":
      return "text-green-500";
    case "PENDING":
      return "text-charcoal-400";
    case "STARTED":
      return "text-blue-500";
    case "ERRORED":
      return "text-rose-500";
  }
}
function taskAttemptStatusTitle(status) {
  switch (status) {
    case "COMPLETED":
      return "Complete";
    case "PENDING":
      return "Scheduled";
    case "STARTED":
      return "Running";
    case "ERRORED":
      return "Error";
  }
}

// app/components/run/TaskStatus.tsx
var import_solid25 = require("@heroicons/react/24/solid");
var import_jsx_runtime68 = require("react/jsx-runtime");
function TaskStatusIcon({ status, className, minimal = !1 }) {
  switch (status) {
    case "COMPLETED":
      return minimal ? /* @__PURE__ */ (0, import_jsx_runtime68.jsx)(import_solid25.CheckIcon, { className: cn(taskStatusClassNameColor(status), className) }) : /* @__PURE__ */ (0, import_jsx_runtime68.jsx)(import_solid25.CheckCircleIcon, { className: cn(taskStatusClassNameColor(status), className) });
    case "PENDING":
      return /* @__PURE__ */ (0, import_jsx_runtime68.jsx)(import_solid25.ClockIcon, { className: cn(taskStatusClassNameColor(status), className) });
    case "WAITING":
      return /* @__PURE__ */ (0, import_jsx_runtime68.jsx)(Spinner, { className: cn(taskStatusClassNameColor(status), className) });
    case "RUNNING":
      return /* @__PURE__ */ (0, import_jsx_runtime68.jsx)(Spinner, { className: cn(taskStatusClassNameColor(status), className) });
    case "ERRORED":
      return /* @__PURE__ */ (0, import_jsx_runtime68.jsx)(import_solid25.XCircleIcon, { className: cn(taskStatusClassNameColor(status), className) });
    case "CANCELED":
      return /* @__PURE__ */ (0, import_jsx_runtime68.jsx)(import_solid25.NoSymbolIcon, { className: cn(taskStatusClassNameColor(status), className) });
  }
}
function taskStatusClassNameColor(status) {
  switch (status) {
    case "COMPLETED":
      return "text-green-500";
    case "PENDING":
      return "text-charcoal-500";
    case "RUNNING":
      return "text-blue-500";
    case "WAITING":
      return "text-blue-500";
    case "ERRORED":
      return "text-rose-500";
    case "CANCELED":
      return "text-charcoal-500";
  }
}

// ../../node_modules/.pnpm/remix-utils@7.1.0_@remix-run+node@2.1.0_@remix-run+react@2.1.0_@remix-run+router@1.15.3_intl-_2dqvfzp5ebofcgnne2ur4wrx2i/node_modules/remix-utils/build/react/client-only.js
var React9 = __toESM(require("react"), 1);
function ClientOnly({ children, fallback = null }) {
  return useHydrated() ? React9.createElement(React9.Fragment, null, children()) : React9.createElement(React9.Fragment, null, fallback);
}

// app/components/run/TaskDetail.tsx
var import_jsx_runtime69 = require("react/jsx-runtime");
function TaskDetail({ task }) {
  let {
    name,
    description,
    icon,
    status,
    params,
    properties,
    output,
    outputIsUndefined,
    style: style2,
    attempts,
    noop
  } = task, startedAt = task.startedAt ? new Date(task.startedAt) : void 0, completedAt = task.completedAt ? new Date(task.completedAt) : void 0, delayUntil = task.delayUntil ? new Date(task.delayUntil) : void 0;
  return /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)(RunPanel, { selected: !1, children: [
    /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(
      RunPanelHeader,
      {
        icon: /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(TaskStatusIcon, { status, minimal: !0, className: cn("h-5 w-5") }),
        title: /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(RunPanelIconTitle, { icon, title: name }),
        accessory: /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(Paragraph, { variant: "extra-small", children: /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(UpdatingDuration, { start: startedAt ?? void 0, end: completedAt ?? void 0 }) })
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)(RunPanelBody, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)(RunPanelIconSection, { children: [
        startedAt && /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(
          RunPanelIconProperty,
          {
            icon: "calendar",
            label: "Started at",
            value: /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(DateTime, { date: startedAt })
          }
        ),
        completedAt && /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(
          RunPanelIconProperty,
          {
            icon: "flag",
            label: "Finished at",
            value: /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(DateTime, { date: completedAt })
          }
        ),
        delayUntil && !completedAt && /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)(import_jsx_runtime69.Fragment, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(
            RunPanelIconProperty,
            {
              icon: "flag",
              label: "Continues at",
              value: /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(DateTime, { date: delayUntil })
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(UpdatingDelay, { delayUntil })
        ] }),
        delayUntil && completedAt && /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(
          RunPanelIconProperty,
          {
            icon: "clock",
            label: "Delay duration",
            value: formatDuration(startedAt, delayUntil, {
              style: "long",
              maxDecimalPoints: 0
            })
          }
        )
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(RunPanelDivider, {}),
      description && /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(RunPanelDescription, { text: description, variant: style2?.variant }),
      properties.length > 0 && /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("div", { className: "mt-4 flex flex-col gap-2", children: [
        /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(Header3, { children: "Properties" }),
        /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(RunPanelProperties, { properties, layout: "horizontal" })
      ] }),
      attempts.length > 1 && /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("div", { className: "mt-4 flex flex-col gap-2", children: [
        /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(Header3, { children: "Retries" }),
        /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)(Table, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(TableHeader, { children: /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)(TableRow, { children: [
            /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(TableHeaderCell, { children: "Attempt" }),
            /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(TableHeaderCell, { children: "Status" }),
            /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(TableHeaderCell, { children: "Date" }),
            /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(TableHeaderCell, { children: "Error" })
          ] }) }),
          /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(TableBody, { children: attempts.map((attempt) => /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)(TableRow, { children: [
            /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(TableCell, { children: attempt.number }),
            /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(TableCell, { children: /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(TaskAttemptStatusLabel, { status: attempt.status }) }),
            /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(TableCell, { children: /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(
              DateTime,
              {
                date: attempt.status === "PENDING" && attempt.runAt ? attempt.runAt : attempt.updatedAt
              }
            ) }),
            /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(TableCell, { children: attempt.error })
          ] }, attempt.number)) })
        ] })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("div", { className: "mt-4 flex flex-col gap-2", children: [
        /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(Header3, { children: "Input" }),
        params ? /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(CodeBlock3, { code: JSON.stringify(params, sensitiveDataReplacer, 2), maxLines: 35 }) : /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(Paragraph, { variant: "small", children: "No input" })
      ] }),
      !noop && /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("div", { className: "mt-4 flex flex-col gap-2", children: [
        /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(Header3, { children: "Output" }),
        output && !outputIsUndefined ? /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(ClientOnly, { fallback: /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(Spinner, {}), children: () => /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(CodeBlock3, { code: output, maxLines: 35 }) }) : /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(Paragraph, { variant: "small", children: "No output" })
      ] })
    ] })
  ] });
}

// app/utils/mergeProperties.server.ts
function mergeProperties(...propertyLists) {
  let mergedProperties = /* @__PURE__ */ new Map();
  for (let propertyList of propertyLists) {
    let properties = DisplayPropertiesSchema.safeParse(propertyList);
    if (properties.success)
      for (let property of properties.data)
        mergedProperties.set(property.label, property);
  }
  return Array.from(mergedProperties.values());
}

// app/utils/redactor.ts
var Redactor = class {
  constructor(paths) {
    this.paths = paths;
  }
  redact(subject) {
    if (!Array.isArray(this.paths) || this.paths.length === 0)
      return subject;
    let clonedSubject = JSON.parse(JSON.stringify(subject));
    return this.redactPathsRecursive(clonedSubject, this.paths);
  }
  redactPathsRecursive(subject, paths) {
    for (let path2 of paths) {
      let parts = path2.split("."), curSubject = subject;
      if (typeof curSubject != "object")
        break;
      for (let i = 0; i < parts.length; i++) {
        let part = parts[i];
        if (Object.prototype.hasOwnProperty.call(curSubject, part) === !1)
          break;
        if (i === parts.length - 1)
          curSubject[part] = "[REDACTED]";
        else if (part in curSubject && typeof curSubject[part] == "object")
          curSubject = curSubject[part];
        else
          break;
      }
    }
    return subject;
  }
};

// app/presenters/TaskDetailsPresenter.server.ts
var TaskDetailsPresenter = class {
  #prismaClient;
  constructor(prismaClient = prisma) {
    this.#prismaClient = prismaClient;
  }
  async call({ id, userId }) {
    let task = await this.#prismaClient.task.findFirst({
      select: {
        id: !0,
        displayKey: !0,
        runConnection: {
          select: {
            id: !0,
            key: !0,
            connection: {
              select: {
                metadata: !0,
                connectionType: !0,
                integration: {
                  select: {
                    title: !0,
                    slug: !0,
                    description: !0,
                    scopes: !0,
                    definition: !0,
                    authMethod: {
                      select: {
                        type: !0,
                        name: !0
                      }
                    }
                  }
                }
              }
            }
          }
        },
        name: !0,
        icon: !0,
        status: !0,
        delayUntil: !0,
        noop: !0,
        description: !0,
        properties: !0,
        outputProperties: !0,
        params: !0,
        output: !0,
        outputIsUndefined: !0,
        error: !0,
        startedAt: !0,
        completedAt: !0,
        style: !0,
        parentId: !0,
        redact: !0,
        attempts: {
          select: {
            number: !0,
            status: !0,
            error: !0,
            runAt: !0,
            updatedAt: !0
          },
          orderBy: {
            number: "asc"
          }
        }
      },
      where: {
        id
      }
    });
    if (task)
      return {
        ...task,
        redact: void 0,
        output: JSON.stringify(
          this.#stringifyOutputWithRedactions(task.output, task.redact),
          null,
          2
        ),
        connection: task.runConnection,
        params: task.params,
        properties: mergeProperties(task.properties, task.outputProperties),
        style: task.style ? StyleSchema.parse(task.style) : void 0
      };
  }
  #stringifyOutputWithRedactions(output, redact) {
    if (!output)
      return output;
    let parsedRedact = RedactSchema.safeParse(redact);
    if (!parsedRedact.success)
      return output;
    let paths = parsedRedact.data.paths;
    return new Redactor(paths).redact(output);
  }
};

// app/routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.webhooks.$triggerParam_.runs.delivery.$runParam.tasks.$taskParam/route.tsx
var import_jsx_runtime70 = require("react/jsx-runtime"), loader3 = async ({ request, params }) => {
  let userId = await requireUserId(request), { taskParam } = TriggerSourceRunTaskParamsSchema.parse(params), taskPromise = new TaskDetailsPresenter().call({
    userId,
    id: taskParam
  });
  return (0, import_server_runtime4.defer)({
    taskPromise
  });
};
function Page() {
  let { taskPromise } = (0, import_react43.useLoaderData)();
  return /* @__PURE__ */ (0, import_jsx_runtime70.jsx)(import_react44.Suspense, { fallback: /* @__PURE__ */ (0, import_jsx_runtime70.jsx)(Spinner, {}), children: /* @__PURE__ */ (0, import_jsx_runtime70.jsx)(import_react43.Await, { resolve: taskPromise, errorElement: /* @__PURE__ */ (0, import_jsx_runtime70.jsx)("p", { children: "Error loading task!" }), children: (resolvedTask) => resolvedTask && /* @__PURE__ */ (0, import_jsx_runtime70.jsx)(TaskDetail, { task: resolvedTask }) }) });
}

// app/routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.webhooks.$triggerParam_.runs.delivery.$runParam.completed/route.tsx
var route_exports3 = {};
__export(route_exports3, {
  default: () => RunCompletedPage
});
var import_remix_typedjson10 = require("remix-typedjson");

// app/components/runs/RunStatuses.tsx
var import_solid26 = require("@heroicons/react/20/solid"), import_solid27 = require("@heroicons/react/24/solid");
var import_zod73 = require("zod"), import_assert_never5 = __toESM(require("assert-never")), import_jsx_runtime71 = require("react/jsx-runtime");
function RunStatus2({ status }) {
  return /* @__PURE__ */ (0, import_jsx_runtime71.jsxs)("span", { className: "flex items-center gap-1", children: [
    /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(RunStatusIcon, { status, className: "h-4 w-4" }),
    /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(RunStatusLabel, { status })
  ] });
}
function RunStatusLabel({ status }) {
  return /* @__PURE__ */ (0, import_jsx_runtime71.jsx)("span", { className: runStatusClassNameColor(status), children: runStatusTitle(status) });
}
function RunStatusIcon({ status, className }) {
  switch (status) {
    case "SUCCESS":
      return /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(import_solid27.CheckCircleIcon, { className: cn(runStatusClassNameColor(status), className) });
    case "PENDING":
    case "WAITING_TO_CONTINUE":
      return /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(import_solid27.ClockIcon, { className: cn(runStatusClassNameColor(status), className) });
    case "QUEUED":
    case "WAITING_TO_EXECUTE":
      return /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(import_solid27.PauseCircleIcon, { className: cn(runStatusClassNameColor(status), className) });
    case "PREPROCESSING":
    case "STARTED":
    case "EXECUTING":
      return /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(Spinner, { className: cn(runStatusClassNameColor(status), className) });
    case "TIMED_OUT":
      return /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(import_solid27.ExclamationTriangleIcon, { className: cn(runStatusClassNameColor(status), className) });
    case "UNRESOLVED_AUTH":
    case "FAILURE":
    case "ABORTED":
    case "INVALID_PAYLOAD":
      return /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(import_solid27.XCircleIcon, { className: cn(runStatusClassNameColor(status), className) });
    case "WAITING_ON_CONNECTIONS":
      return /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(import_solid27.WrenchIcon, { className: cn(runStatusClassNameColor(status), className) });
    case "CANCELED":
      return /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(import_solid26.NoSymbolIcon, { className: cn(runStatusClassNameColor(status), className) });
    default:
      (0, import_assert_never5.default)(status);
  }
}
function runStatusTitle(status) {
  switch (status) {
    case "SUCCESS":
      return "Completed";
    case "PENDING":
      return "Not started";
    case "STARTED":
      return "In progress";
    case "QUEUED":
    case "WAITING_TO_EXECUTE":
      return "Queued";
    case "EXECUTING":
      return "Executing";
    case "WAITING_TO_CONTINUE":
      return "Waiting";
    case "FAILURE":
      return "Failed";
    case "TIMED_OUT":
      return "Timed out";
    case "WAITING_ON_CONNECTIONS":
      return "Waiting on connections";
    case "ABORTED":
      return "Aborted";
    case "PREPROCESSING":
      return "Preprocessing";
    case "CANCELED":
      return "Canceled";
    case "UNRESOLVED_AUTH":
      return "Unresolved auth";
    case "INVALID_PAYLOAD":
      return "Invalid payload";
    default:
      (0, import_assert_never5.default)(status);
  }
}
function runStatusClassNameColor(status) {
  switch (status) {
    case "SUCCESS":
      return "text-green-500";
    case "PENDING":
      return "text-charcoal-500";
    case "STARTED":
    case "EXECUTING":
    case "WAITING_TO_CONTINUE":
    case "WAITING_TO_EXECUTE":
      return "text-blue-500";
    case "QUEUED":
      return "text-charcoal-500";
    case "FAILURE":
    case "UNRESOLVED_AUTH":
    case "INVALID_PAYLOAD":
      return "text-rose-500";
    case "TIMED_OUT":
      return "text-amber-300";
    case "WAITING_ON_CONNECTIONS":
      return "text-amber-300";
    case "ABORTED":
      return "text-rose-500";
    case "PREPROCESSING":
      return "text-blue-500";
    case "CANCELED":
      return "text-charcoal-500";
    default:
      (0, import_assert_never5.default)(status);
  }
}
var DirectionSchema = import_zod73.z.union([import_zod73.z.literal("forward"), import_zod73.z.literal("backward")]), FilterableStatus = import_zod73.z.union([
  import_zod73.z.literal("QUEUED"),
  import_zod73.z.literal("IN_PROGRESS"),
  import_zod73.z.literal("WAITING"),
  import_zod73.z.literal("COMPLETED"),
  import_zod73.z.literal("FAILED"),
  import_zod73.z.literal("TIMEDOUT"),
  import_zod73.z.literal("CANCELED")
]), FilterableEnvironment = import_zod73.z.union([
  import_zod73.z.literal("DEVELOPMENT"),
  import_zod73.z.literal("STAGING"),
  import_zod73.z.literal("PRODUCTION")
]), environmentKeys = ["DEVELOPMENT", "STAGING", "PRODUCTION"], RunListSearchSchema = import_zod73.z.object({
  cursor: import_zod73.z.string().optional(),
  direction: DirectionSchema.optional(),
  status: FilterableStatus.optional(),
  environment: FilterableEnvironment.optional(),
  from: import_zod73.z.string().transform((value) => parseInt(value)).optional(),
  to: import_zod73.z.string().transform((value) => parseInt(value)).optional()
}), filterableStatuses = {
  QUEUED: ["QUEUED", "WAITING_TO_EXECUTE", "PENDING", "WAITING_ON_CONNECTIONS"],
  IN_PROGRESS: ["STARTED", "EXECUTING", "PREPROCESSING"],
  WAITING: ["WAITING_TO_CONTINUE"],
  COMPLETED: ["SUCCESS"],
  FAILED: ["FAILURE", "UNRESOLVED_AUTH", "INVALID_PAYLOAD", "ABORTED"],
  TIMEDOUT: ["TIMED_OUT"],
  CANCELED: ["CANCELED"]
}, statusKeys = Object.keys(filterableStatuses);

// app/components/run/RunCompletedDetail.tsx
var import_jsx_runtime72 = require("react/jsx-runtime");
function RunCompletedDetail({ run }) {
  return /* @__PURE__ */ (0, import_jsx_runtime72.jsxs)(RunPanel, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime72.jsx)(
      RunPanelHeader,
      {
        icon: /* @__PURE__ */ (0, import_jsx_runtime72.jsx)(RunStatusIcon, { status: run.status, className: "h-5 w-5" }),
        title: /* @__PURE__ */ (0, import_jsx_runtime72.jsx)(Paragraph, { variant: "small/bright", children: /* @__PURE__ */ (0, import_jsx_runtime72.jsx)(RunStatusLabel, { status: run.status }) })
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime72.jsxs)(RunPanelBody, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime72.jsxs)(RunPanelIconSection, { children: [
        run.startedAt && /* @__PURE__ */ (0, import_jsx_runtime72.jsx)(
          RunPanelIconProperty,
          {
            icon: "calendar",
            label: "Started at",
            value: /* @__PURE__ */ (0, import_jsx_runtime72.jsx)(DateTime, { date: run.startedAt })
          }
        ),
        run.completedAt && /* @__PURE__ */ (0, import_jsx_runtime72.jsx)(
          RunPanelIconProperty,
          {
            icon: "flag",
            label: "Finished at",
            value: /* @__PURE__ */ (0, import_jsx_runtime72.jsx)(DateTime, { date: run.completedAt })
          }
        ),
        run.startedAt && run.completedAt && /* @__PURE__ */ (0, import_jsx_runtime72.jsx)(
          RunPanelIconProperty,
          {
            icon: "clock",
            label: "Total duration",
            value: formatDuration(run.startedAt, run.completedAt, {
              style: "long"
            })
          }
        )
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime72.jsx)(RunPanelDivider, {}),
      run.error && /* @__PURE__ */ (0, import_jsx_runtime72.jsx)(RunPanelError, { text: run.error.message, stackTrace: run.error.stack }),
      run.output ? /* @__PURE__ */ (0, import_jsx_runtime72.jsx)(CodeBlock3, { language: "json", code: run.output, maxLines: 36 }) : run.output === null && /* @__PURE__ */ (0, import_jsx_runtime72.jsx)(Paragraph, { variant: "small", children: "This run returned nothing" })
    ] })
  ] });
}

// app/routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.webhooks.$triggerParam_.runs.delivery.$runParam.completed/route.tsx
var import_jsx_runtime73 = require("react/jsx-runtime");
function useTriggerRegisterRun() {
  let routeMatch = (0, import_remix_typedjson10.useTypedRouteLoaderData)(
    "routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.webhooks.$triggerParam_.runs.delivery.$runParam"
  );
  if (!routeMatch || !routeMatch.run)
    throw new Error("No run found");
  return routeMatch.run;
}
function RunCompletedPage() {
  let run = useTriggerRegisterRun();
  return /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(RunCompletedDetail, { run });
}

// app/routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.external.$triggerParam_.runs.$runParam.tasks.$taskParam/route.tsx
var route_exports4 = {};
__export(route_exports4, {
  default: () => Page2,
  loader: () => loader4
});
var import_remix_typedjson11 = require("remix-typedjson");
var import_jsx_runtime74 = require("react/jsx-runtime"), loader4 = async ({ request, params }) => {
  let userId = await requireUserId(request), { taskParam } = TriggerSourceRunTaskParamsSchema.parse(params), task = await new TaskDetailsPresenter().call({
    userId,
    id: taskParam
  });
  return (0, import_remix_typedjson11.typedjson)({
    task
  });
};
function Page2() {
  let { task } = (0, import_remix_typedjson11.useTypedLoaderData)();
  return task ? /* @__PURE__ */ (0, import_jsx_runtime74.jsx)(TaskDetail, { task }) : /* @__PURE__ */ (0, import_jsx_runtime74.jsx)("div", { className: "flex h-full items-center justify-center", children: /* @__PURE__ */ (0, import_jsx_runtime74.jsx)(Spinner, {}) });
}

// app/routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.webhooks.$triggerParam_.runs.$runParam.tasks.$taskParam/route.tsx
var route_exports5 = {};
__export(route_exports5, {
  default: () => Page3,
  loader: () => loader5
});
var import_react45 = require("@remix-run/react"), import_server_runtime5 = require("@remix-run/server-runtime"), import_react46 = require("react");
var import_jsx_runtime75 = require("react/jsx-runtime"), loader5 = async ({ request, params }) => {
  let userId = await requireUserId(request), { taskParam } = TriggerSourceRunTaskParamsSchema.parse(params), taskPromise = new TaskDetailsPresenter().call({
    userId,
    id: taskParam
  });
  return (0, import_server_runtime5.defer)({
    taskPromise
  });
};
function Page3() {
  let { taskPromise } = (0, import_react45.useLoaderData)();
  return /* @__PURE__ */ (0, import_jsx_runtime75.jsx)(import_react46.Suspense, { fallback: /* @__PURE__ */ (0, import_jsx_runtime75.jsx)(Spinner, {}), children: /* @__PURE__ */ (0, import_jsx_runtime75.jsx)(import_react45.Await, { resolve: taskPromise, errorElement: /* @__PURE__ */ (0, import_jsx_runtime75.jsx)("p", { children: "Error loading task!" }), children: (resolvedTask) => resolvedTask && /* @__PURE__ */ (0, import_jsx_runtime75.jsx)(TaskDetail, { task: resolvedTask }) }) });
}

// app/routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.webhooks.$triggerParam_.runs.delivery.$runParam.trigger/route.tsx
var route_exports6 = {};
__export(route_exports6, {
  default: () => Page4,
  loader: () => loader6
});
var import_remix_typedjson12 = require("remix-typedjson");

// app/components/run/TriggerDetail.tsx
var import_jsx_runtime76 = require("react/jsx-runtime");
function TriggerDetail({
  trigger,
  event,
  properties
}) {
  let { id, name, payload, context: context7, timestamp, deliveredAt } = trigger;
  return /* @__PURE__ */ (0, import_jsx_runtime76.jsxs)(RunPanel, { selected: !1, children: [
    /* @__PURE__ */ (0, import_jsx_runtime76.jsx)(RunPanelHeader, { icon: event.icon, title: event.title }),
    /* @__PURE__ */ (0, import_jsx_runtime76.jsxs)(RunPanelBody, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime76.jsxs)(RunPanelIconSection, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime76.jsx)(
          RunPanelIconProperty,
          {
            icon: "calendar",
            label: "Created",
            value: /* @__PURE__ */ (0, import_jsx_runtime76.jsx)(DateTime, { date: timestamp })
          }
        ),
        deliveredAt && /* @__PURE__ */ (0, import_jsx_runtime76.jsx)(
          RunPanelIconProperty,
          {
            icon: "flag",
            label: "Finished at",
            value: /* @__PURE__ */ (0, import_jsx_runtime76.jsx)(DateTime, { date: deliveredAt })
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime76.jsx)(RunPanelIconProperty, { icon: "id", label: "Event name", value: name }),
        /* @__PURE__ */ (0, import_jsx_runtime76.jsx)(RunPanelIconProperty, { icon: "account", label: "Event ID", value: id }),
        trigger.externalAccount && /* @__PURE__ */ (0, import_jsx_runtime76.jsx)(
          RunPanelIconProperty,
          {
            icon: "account",
            label: "Account ID",
            value: trigger.externalAccount.identifier
          }
        )
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime76.jsx)(RunPanelDivider, {}),
      /* @__PURE__ */ (0, import_jsx_runtime76.jsxs)("div", { className: "mt-4 flex flex-col gap-2", children: [
        properties.length > 0 && /* @__PURE__ */ (0, import_jsx_runtime76.jsxs)("div", { className: "mb-2 flex flex-col gap-4", children: [
          /* @__PURE__ */ (0, import_jsx_runtime76.jsx)(Header3, { children: "Properties" }),
          /* @__PURE__ */ (0, import_jsx_runtime76.jsx)(RunPanelProperties, { properties, layout: "horizontal" })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime76.jsx)(Header3, { children: "Payload" }),
        /* @__PURE__ */ (0, import_jsx_runtime76.jsx)(CodeBlock3, { code: payload }),
        /* @__PURE__ */ (0, import_jsx_runtime76.jsx)(Header3, { children: "Context" }),
        /* @__PURE__ */ (0, import_jsx_runtime76.jsx)(CodeBlock3, { code: context7 })
      ] })
    ] })
  ] });
}

// app/presenters/TriggerDetailsPresenter.server.ts
var TriggerDetailsPresenter = class {
  #prismaClient;
  constructor(prismaClient = prisma) {
    this.#prismaClient = prismaClient;
  }
  async call(runId) {
    let { event } = await this.#prismaClient.jobRun.findUniqueOrThrow({
      where: {
        id: runId
      },
      select: {
        event: {
          select: {
            eventId: !0,
            name: !0,
            payload: !0,
            context: !0,
            timestamp: !0,
            deliveredAt: !0,
            externalAccount: {
              select: {
                identifier: !0
              }
            }
          }
        }
      }
    });
    return {
      id: event.eventId,
      name: event.name,
      payload: JSON.stringify(event.payload, null, 2),
      context: JSON.stringify(event.context, null, 2),
      timestamp: event.timestamp,
      deliveredAt: event.deliveredAt,
      externalAccount: event.externalAccount ? {
        identifier: event.externalAccount.identifier
      } : void 0
    };
  }
};

// app/routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.webhooks.$triggerParam_.runs.delivery.$runParam.trigger/route.tsx
var import_jsx_runtime77 = require("react/jsx-runtime"), loader6 = async ({ request, params }) => {
  let { runParam: runParam2 } = TriggerSourceRunParamsSchema.parse(params), trigger = await new TriggerDetailsPresenter().call(runParam2);
  if (!trigger)
    throw new Response(null, {
      status: 404
    });
  return (0, import_remix_typedjson12.typedjson)({
    trigger
  });
};
function Page4() {
  let { trigger } = (0, import_remix_typedjson12.useTypedLoaderData)();
  return /* @__PURE__ */ (0, import_jsx_runtime77.jsx)(
    TriggerDetail,
    {
      trigger,
      event: { icon: "mail-fast", title: "Deliver Webhook" },
      properties: []
    }
  );
}

// app/routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.webhooks.$triggerParam_.runs.delivery.$runParam.stream/route.tsx
var route_exports7 = {};
__export(route_exports7, {
  loader: () => loader7
});
var import_zod74 = require("zod");

// ../../node_modules/.pnpm/remix-utils@7.1.0_@remix-run+node@2.1.0_@remix-run+react@2.1.0_@remix-run+router@1.15.3_intl-_2dqvfzp5ebofcgnne2ur4wrx2i/node_modules/remix-utils/build/server/event-stream.js
function eventStream(signal, init3, options2 = {}) {
  let stream = new ReadableStream({
    start(controller) {
      let encoder = new TextEncoder();
      function send({ event = "message", data: data2 }) {
        controller.enqueue(encoder.encode(`event: ${event}
`)), controller.enqueue(encoder.encode(`data: ${data2}

`));
      }
      let cleanup = init3(send, close), closed = !1;
      function close() {
        closed || (cleanup(), closed = !0, signal.removeEventListener("abort", close), controller.close());
      }
      if (signal.addEventListener("abort", close), signal.aborted)
        return close();
    }
  }), headers = new Headers(options2.headers);
  return headers.has("Content-Type") && console.warn("Overriding Content-Type header to `text/event-stream`"), headers.has("Cache-Control") && console.warn("Overriding Cache-Control header to `no-cache`"), headers.has("Connection") && console.warn("Overriding Connection header to `keep-alive`"), headers.set("Content-Type", "text/event-stream"), headers.set("Cache-Control", "no-cache"), headers.set("Connection", "keep-alive"), new Response(stream, { headers });
}

// app/utils/sse.server.ts
function sse({ request, pingInterval: pingInterval3 = 1e3, updateInterval: updateInterval2 = 348, run }) {
  if (env2.DISABLE_SSE === "1" || env2.DISABLE_SSE === "true")
    return new Response("SSE disabled", { status: 200 });
  let pinger, updater, timeout, abort = () => {
    clearInterval(pinger), clearInterval(updater), clearTimeout(timeout);
  };
  return eventStream(request.signal, (send, close) => {
    let safeSend = (args) => {
      try {
        send(args);
      } catch (error) {
        error instanceof Error ? error.name !== "TypeError" && logger.debug("Error sending SSE, aborting", {
          error: {
            name: error.name,
            message: error.message,
            stack: error.stack
          },
          args
        }) : logger.debug("Unknown error sending SSE, aborting", {
          error,
          args
        }), close();
      }
    };
    return pinger = setInterval(() => {
      if (request.signal.aborted)
        return abort();
      safeSend({ event: "ping", data: (/* @__PURE__ */ new Date()).toISOString() });
    }, pingInterval3), updater = setInterval(() => {
      if (request.signal.aborted)
        return abort();
      run(safeSend, abort);
    }, updateInterval2), timeout = setTimeout(() => {
      close();
    }, 60 * 1e3), abort;
  });
}

// app/presenters/RunStreamPresenter.server.ts
var RunStreamPresenter = class {
  #prismaClient;
  constructor(prismaClient = prisma) {
    this.#prismaClient = prismaClient;
  }
  async call({ request, runId }) {
    let run = await this.#runForUpdates(runId);
    if (!run)
      return new Response("Not found", { status: 404 });
    let lastUpdatedAt = run.updatedAt.getTime(), lastTotalTaskUpdatedTime = run.tasks.reduce(
      (prev, task) => prev + task.updatedAt.getTime(),
      0
    );
    return sse({
      request,
      run: async (send, stop) => {
        let result = await this.#runForUpdates(runId);
        if (!result)
          return stop();
        if (result.completedAt)
          return send({ data: (/* @__PURE__ */ new Date()).toISOString() }), stop();
        let totalRunUpdated = result.tasks.reduce(
          (prev, task) => prev + task.updatedAt.getTime(),
          0
        );
        lastUpdatedAt !== result.updatedAt.getTime() ? send({ data: result.updatedAt.toISOString() }) : lastTotalTaskUpdatedTime !== totalRunUpdated && send({ data: (/* @__PURE__ */ new Date()).toISOString() }), lastUpdatedAt = result.updatedAt.getTime(), lastTotalTaskUpdatedTime = totalRunUpdated;
      }
    });
  }
  #runForUpdates(id) {
    return this.#prismaClient.jobRun.findUnique({
      where: {
        id
      },
      select: {
        updatedAt: !0,
        completedAt: !0,
        tasks: {
          select: {
            updatedAt: !0
          }
        }
      }
    });
  }
};

// app/routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.webhooks.$triggerParam_.runs.delivery.$runParam.stream/route.tsx
async function loader7({ request, params }) {
  await requireUserId(request);
  let { runParam: runParam2 } = import_zod74.z.object({ runParam: import_zod74.z.string() }).parse(params);
  return new RunStreamPresenter().call({ request, runId: runParam2 });
}

// app/routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.external.$triggerParam_.runs.$runParam.completed/route.tsx
var route_exports8 = {};
__export(route_exports8, {
  default: () => RunCompletedPage2
});
var import_remix_typedjson13 = require("remix-typedjson");
var import_jsx_runtime78 = require("react/jsx-runtime");
function useTriggerRegisterRun2() {
  let routeMatch = (0, import_remix_typedjson13.useTypedRouteLoaderData)(
    "routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.external.$triggerParam_.runs.$runParam"
  );
  if (!routeMatch || !routeMatch.run)
    throw new Error("No run found");
  return routeMatch.run;
}
function RunCompletedPage2() {
  let run = useTriggerRegisterRun2();
  return /* @__PURE__ */ (0, import_jsx_runtime78.jsx)(RunCompletedDetail, { run });
}

// app/routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.webhooks.$triggerParam_.runs.$runParam.completed/route.tsx
var route_exports9 = {};
__export(route_exports9, {
  default: () => RunCompletedPage3
});
var import_remix_typedjson14 = require("remix-typedjson");
var import_jsx_runtime79 = require("react/jsx-runtime");
function useTriggerRegisterRun3() {
  let routeMatch = (0, import_remix_typedjson14.useTypedRouteLoaderData)(
    "routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.webhooks.$triggerParam_.runs.$runParam"
  );
  if (!routeMatch || !routeMatch.run)
    throw new Error("No run found");
  return routeMatch.run;
}
function RunCompletedPage3() {
  let run = useTriggerRegisterRun3();
  return /* @__PURE__ */ (0, import_jsx_runtime79.jsx)(RunCompletedDetail, { run });
}

// app/routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.webhooks.$triggerParam_.runs.delivery.$runParam/route.tsx
var route_exports10 = {};
__export(route_exports10, {
  default: () => Page5,
  loader: () => loader8
});
var import_react55 = require("@remix-run/react"), import_react56 = require("react"), import_remix_typedjson15 = require("remix-typedjson");

// ../../node_modules/.pnpm/remix-utils@7.1.0_@remix-run+node@2.1.0_@remix-run+react@2.1.0_@remix-run+router@1.15.3_intl-_2dqvfzp5ebofcgnne2ur4wrx2i/node_modules/remix-utils/build/react/use-event-source.js
var import_react47 = require("react"), context6 = (0, import_react47.createContext)(/* @__PURE__ */ new Map()), EventSourceProvider = context6.Provider;
function useEventSource(url, { event = "message", init: init3 } = {}) {
  let map = (0, import_react47.useContext)(context6), [data2, setData] = (0, import_react47.useState)(null);
  return (0, import_react47.useEffect)(() => {
    let key = [url.toString(), event, init3?.withCredentials].join("::"), value = map.get(key) ?? {
      count: 0,
      source: new EventSource(url, init3)
    };
    ++value.count, map.set(key, value), value.source.addEventListener(event, handler), setData(null);
    function handler(event2) {
      setData(event2.data || "UNKNOWN_EVENT_DATA");
    }
    return () => {
      value.source.removeEventListener(event, handler), --value.count, value.count <= 0 && (value.source.close(), map.delete(key));
    };
  }, [url, event, init3, map]), data2;
}

// app/components/run/RunOverview.tsx
var import_react52 = require("@conform-to/react"), import_zod79 = require("@conform-to/zod"), import_solid30 = require("@heroicons/react/20/solid"), import_solid31 = require("@heroicons/react/24/solid"), import_react53 = require("@remix-run/react"), import_react54 = require("react");

// app/routes/resources.runs.$runId.cancel.ts
var resources_runs_runId_cancel_exports = {};
__export(resources_runs_runId_cancel_exports, {
  action: () => action2,
  cancelSchema: () => cancelSchema
});
var import_zod75 = require("@conform-to/zod"), import_node8 = require("@remix-run/node"), import_zod76 = require("zod");

// app/services/runs/cancelRun.server.ts
var CancelRunService = class {
  #prismaClient;
  constructor(prismaClient = prisma) {
    this.#prismaClient = prismaClient;
  }
  async call({ runId }) {
    try {
      return await this.#prismaClient.$transaction(async (tx) => {
        let run = await tx.jobRun.findUniqueOrThrow({
          where: {
            id: runId
          }
        });
        await tx.jobRun.update({
          where: { id: runId },
          data: {
            status: "CANCELED",
            completedAt: /* @__PURE__ */ new Date()
          }
        }), await tx.task.updateMany({
          where: {
            runId,
            status: {
              in: ["PENDING", "RUNNING", "WAITING"]
            }
          },
          data: {
            status: "CANCELED",
            completedAt: /* @__PURE__ */ new Date()
          }
        }), await PerformRunExecutionV3Service.dequeue(run, tx), await ResumeRunService.dequeue(run, tx);
      });
    } catch (error) {
      throw error;
    }
  }
};

// app/routes/resources.runs.$runId.cancel.ts
var cancelSchema = import_zod76.z.object({
  redirectUrl: import_zod76.z.string()
}), ParamSchema = import_zod76.z.object({
  runId: import_zod76.z.string()
}), action2 = async ({ request, params }) => {
  let { runId } = ParamSchema.parse(params), formData = await request.formData(), submission = (0, import_zod75.parse)(formData, { schema: cancelSchema });
  if (!submission.value)
    return (0, import_node8.json)(submission);
  try {
    return await new CancelRunService().call({ runId }), redirectWithSuccessMessage(
      submission.value.redirectUrl,
      request,
      "Canceled run. Any pending tasks will be canceled."
    );
  } catch (error) {
    return error instanceof Error ? (logger.error("Failed to cancel run", {
      error: {
        name: error.name,
        message: error.message,
        stack: error.stack
      }
    }), (0, import_node8.json)({ errors: { body: error.message } }, { status: 400 })) : (logger.error("Failed to cancel run", { error }), (0, import_node8.json)({ errors: { body: "Unknown error" } }, { status: 400 }));
  }
};

// app/routes/resources.runs.$runId.rerun.ts
var resources_runs_runId_rerun_exports = {};
__export(resources_runs_runId_rerun_exports, {
  action: () => action3,
  schema: () => schema2
});
var import_zod77 = require("@conform-to/zod"), import_zod78 = require("zod");

// app/services/runs/continueRun.server.ts
var RESUMABLE_STATUSES = [
  "FAILURE",
  "TIMED_OUT",
  "UNRESOLVED_AUTH",
  "ABORTED",
  "CANCELED",
  "INVALID_PAYLOAD"
], ContinueRunService = class {
  #prismaClient;
  constructor(prismaClient = prisma) {
    this.#prismaClient = prismaClient;
  }
  async call({ runId }) {
    let run = await this.#prismaClient.jobRun.findUniqueOrThrow({
      where: { id: runId },
      include: {
        environment: !0
      }
    });
    if (!RESUMABLE_STATUSES.includes(run.status))
      throw new Error("Run is not resumable");
    await this.#prismaClient.jobRun.update({
      where: { id: runId },
      data: {
        status: "QUEUED",
        queuedAt: /* @__PURE__ */ new Date(),
        startedAt: null,
        completedAt: null,
        output: src_exports.Prisma.DbNull,
        timedOutAt: null,
        timedOutReason: null
      }
    }), await this.#prismaClient.task.updateMany({
      where: {
        runId,
        status: "ERRORED"
      },
      data: {
        status: "RUNNING",
        output: src_exports.Prisma.DbNull,
        completedAt: null,
        startedAt: /* @__PURE__ */ new Date()
      }
    }), await ResumeRunService.enqueue(run, this.#prismaClient);
  }
};

// app/services/runs/reRun.server.ts
var ReRunService = class {
  #prismaClient;
  constructor(prismaClient = prisma) {
    this.#prismaClient = prismaClient;
  }
  async call({ runId }) {
    try {
      return await this.#prismaClient.$transaction(async (tx) => {
        let existingRun = await tx.jobRun.findUniqueOrThrow({
          include: {
            organization: !0,
            project: !0,
            environment: !0,
            version: !0,
            job: !0,
            event: !0,
            externalAccount: !0
          },
          where: {
            id: runId
          }
        }), eventLog = await this.#prismaClient.eventRecord.create({
          data: {
            organization: {
              connect: {
                id: existingRun.environment.organizationId
              }
            },
            project: {
              connect: {
                id: existingRun.environment.projectId
              }
            },
            environment: {
              connect: {
                id: existingRun.environment.id
              }
            },
            externalAccount: existingRun.externalAccount ? {
              connect: {
                id: existingRun.externalAccount.id
              }
            } : void 0,
            eventId: `${existingRun.event.eventId}:retry:${(/* @__PURE__ */ new Date()).getTime()}`,
            name: existingRun.event.name,
            timestamp: /* @__PURE__ */ new Date(),
            payload: existingRun.event.payload ?? {},
            context: existingRun.event.context ?? {},
            source: existingRun.event.source,
            isTest: existingRun.event.isTest
          }
        });
        return new CreateRunService(tx).call({
          environment: {
            ...existingRun.environment,
            organization: existingRun.organization,
            project: existingRun.project
          },
          eventId: eventLog.id,
          job: existingRun.job,
          version: existingRun.version
        });
      });
    } catch (error) {
      throw error;
    }
  }
};

// app/routes/resources.runs.$runId.rerun.ts
var schema2 = import_zod78.z.object({
  successRedirect: import_zod78.z.string(),
  failureRedirect: import_zod78.z.string()
}), ParamSchema2 = import_zod78.z.object({
  runId: import_zod78.z.string()
}), action3 = async ({ request, params }) => {
  let { runId } = ParamSchema2.parse(params), formData = await request.formData(), submission = (0, import_zod77.parse)(formData, { schema: schema2 });
  if (!submission.value)
    return redirectWithErrorMessage(
      rootPath(),
      request,
      submission.error ? JSON.stringify(submission.error) : "Invalid form"
    );
  try {
    if (submission.intent === "start") {
      let run = await new ReRunService().call({ runId });
      return run ? redirectWithSuccessMessage(
        `${submission.value.successRedirect}/${run.id}`,
        request,
        "Created new run"
      ) : redirectWithErrorMessage(
        submission.value.failureRedirect,
        request,
        "Unable to retry run"
      );
    } else if (submission.intent === "continue")
      return await new ContinueRunService().call({ runId }), redirectWithSuccessMessage(
        `${submission.value.successRedirect}/${runId}`,
        request,
        "Resuming run"
      );
  } catch (error) {
    return redirectWithErrorMessage(
      submission.value.failureRedirect,
      request,
      error instanceof Error ? error.message : JSON.stringify(error)
    );
  }
};

// app/components/primitives/PageHeader.tsx
var import_solid28 = require("@heroicons/react/20/solid"), import_react50 = require("@remix-run/react");

// app/components/primitives/BreadcrumbIcon.tsx
var import_jsx_runtime80 = require("react/jsx-runtime");
function BreadcrumbIcon({ className }) {
  return /* @__PURE__ */ (0, import_jsx_runtime80.jsx)(
    "svg",
    {
      className: cn("text-charcoal-600", className),
      width: "9",
      height: "20",
      viewBox: "0 0 9 26",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      children: /* @__PURE__ */ (0, import_jsx_runtime80.jsx)(
        "line",
        {
          x1: "9",
          y1: "0.7",
          x2: "0.7",
          y2: "25",
          strokeWidth: 1.4,
          stroke: "currentColor",
          strokeLinecap: "round"
        }
      )
    }
  );
}

// app/components/primitives/LoadingBarDivider.tsx
var import_framer_motion4 = require("framer-motion"), import_react48 = require("react"), import_jsx_runtime81 = require("react/jsx-runtime");
function LoadingBarDivider({ isLoading: isLoading2 }) {
  return /* @__PURE__ */ (0, import_jsx_runtime81.jsx)("div", { className: "relative h-px w-full bg-grid-bright", children: /* @__PURE__ */ (0, import_jsx_runtime81.jsx)(AnimationDivider, { isLoading: isLoading2 }) });
}
function AnimationDivider({ isLoading: isLoading2 }) {
  let [scope, animate] = (0, import_framer_motion4.useAnimate)(), [isPresent, safeToRemove] = (0, import_framer_motion4.usePresence)();
  return (0, import_react48.useEffect)(() => {
    isPresent ? (async () => await animate(
      [
        [scope.current, { width: "30%", left: "35%" }, { duration: 1, ease: "easeIn" }],
        [scope.current, { width: 0, left: "100%" }, { duration: 1, ease: "easeOut" }]
      ],
      { repeat: 1 / 0, repeatType: "reverse" }
    ))() : (async () => (await animate(scope.current, { opacity: 0 }), safeToRemove()))();
  }, [isPresent, isLoading2]), /* @__PURE__ */ (0, import_jsx_runtime81.jsx)(import_framer_motion4.AnimatePresence, { children: isLoading2 && /* @__PURE__ */ (0, import_jsx_runtime81.jsx)(
    "div",
    {
      ref: scope,
      className: "width-0 absolute left-0 top-0 h-full bg-gradient-to-r from-transparent from-5% via-blue-500 to-transparent to-95%"
    }
  ) });
}

// app/components/primitives/Tabs.tsx
var import_react49 = require("@remix-run/react"), import_framer_motion5 = require("framer-motion");
var import_jsx_runtime82 = require("react/jsx-runtime");
function Tabs({ tabs, className, layoutId }) {
  return /* @__PURE__ */ (0, import_jsx_runtime82.jsx)("div", { className: cn("flex flex-row gap-x-6 border-b border-grid-bright", className), children: tabs.map((tab, index) => /* @__PURE__ */ (0, import_jsx_runtime82.jsx)(import_react49.NavLink, { to: tab.to, className: "group flex flex-col items-center pt-1", end: !0, children: ({ isActive, isPending }) => /* @__PURE__ */ (0, import_jsx_runtime82.jsxs)(import_jsx_runtime82.Fragment, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime82.jsx)(
      "span",
      {
        className: cn(
          "text-sm transition duration-200",
          isActive || isPending ? "text-indigo-500" : "text-charcoal-200"
        ),
        children: tab.label
      }
    ),
    isActive || isPending ? /* @__PURE__ */ (0, import_jsx_runtime82.jsx)(import_framer_motion5.motion.div, { layoutId, className: "mt-1 h-0.5 w-full bg-indigo-500" }) : /* @__PURE__ */ (0, import_jsx_runtime82.jsx)("div", { className: "mt-1 h-0.5 w-full bg-charcoal-500 opacity-0 transition duration-200 group-hover:opacity-100" })
  ] }) }, index)) });
}

// app/components/primitives/PageHeader.tsx
var import_jsx_runtime83 = require("react/jsx-runtime");
function NavBar({ children }) {
  let organization = useOptionalOrganization(), showUpgradePrompt = useShowUpgradePrompt(organization), navigation = (0, import_react50.useNavigation)(), isLoading2 = navigation.state === "loading" || navigation.state === "submitting";
  return /* @__PURE__ */ (0, import_jsx_runtime83.jsxs)("div", { children: [
    /* @__PURE__ */ (0, import_jsx_runtime83.jsxs)("div", { className: "grid h-10 w-full grid-rows-[auto_1px] bg-background-bright", children: [
      /* @__PURE__ */ (0, import_jsx_runtime83.jsx)("div", { className: "flex w-full items-center justify-between pl-3 pr-2", children }),
      /* @__PURE__ */ (0, import_jsx_runtime83.jsx)(LoadingBarDivider, { isLoading: isLoading2 })
    ] }),
    showUpgradePrompt.shouldShow && organization && /* @__PURE__ */ (0, import_jsx_runtime83.jsx)(UpgradePrompt, {})
  ] });
}
function PageTitle({ title: title2, backButton }) {
  return /* @__PURE__ */ (0, import_jsx_runtime83.jsxs)("div", { className: "flex items-center gap-2", children: [
    backButton && /* @__PURE__ */ (0, import_jsx_runtime83.jsxs)("div", { className: "group -ml-1.5 flex items-center gap-0", children: [
      /* @__PURE__ */ (0, import_jsx_runtime83.jsx)(
        import_react50.Link,
        {
          to: backButton.to,
          className: "rounded px-1.5 py-1 text-xs text-text-dimmed transition group-hover:bg-charcoal-700 group-hover:text-text-bright",
          children: backButton.text
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime83.jsx)(BreadcrumbIcon, { className: "h-5" })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime83.jsx)(Header2, { className: "flex items-center gap-1", children: title2 })
  ] });
}
function PageAccessories({ children }) {
  return /* @__PURE__ */ (0, import_jsx_runtime83.jsx)("div", { className: "flex items-center gap-2", children });
}
function PageInfoRow({ children, className }) {
  return /* @__PURE__ */ (0, import_jsx_runtime83.jsx)("div", { className: cn("flex w-full items-center gap-2", className), children });
}
function PageInfoGroup({
  children,
  alignment = "left"
}) {
  return /* @__PURE__ */ (0, import_jsx_runtime83.jsx)(
    "div",
    {
      className: cn(
        "flex grow flex-wrap items-center gap-x-4 gap-y-1",
        alignment === "right" && "justify-end"
      ),
      children
    }
  );
}
function PageInfoProperty({
  icon,
  label,
  value,
  to
}) {
  return to === void 0 ? /* @__PURE__ */ (0, import_jsx_runtime83.jsx)(PageInfoPropertyContent, { icon, label, value }) : /* @__PURE__ */ (0, import_jsx_runtime83.jsx)(LinkButton, { variant: "tertiary/small", to, TrailingIcon: import_solid28.ArrowUpRightIcon, children: /* @__PURE__ */ (0, import_jsx_runtime83.jsx)(PageInfoPropertyContent, { icon, label, value }) });
}
function PageInfoPropertyContent({
  icon,
  label,
  value
}) {
  return /* @__PURE__ */ (0, import_jsx_runtime83.jsxs)("div", { className: "flex items-center gap-1", children: [
    icon && typeof icon == "string" ? /* @__PURE__ */ (0, import_jsx_runtime83.jsx)(NamedIcon, { name: icon, className: "h-4 w-4" }) : icon,
    label && /* @__PURE__ */ (0, import_jsx_runtime83.jsxs)(Paragraph, { variant: "extra-small/caps", className: "mt-0.5 whitespace-nowrap", children: [
      label,
      value !== void 0 && ":"
    ] }),
    value !== void 0 && /* @__PURE__ */ (0, import_jsx_runtime83.jsx)(Paragraph, { variant: "small", children: value })
  ] });
}
function PageTabs(props) {
  return /* @__PURE__ */ (0, import_jsx_runtime83.jsx)("div", { className: "mb-2 mt-2", children: /* @__PURE__ */ (0, import_jsx_runtime83.jsx)(Tabs, { ...props }) });
}

// app/components/run/TaskCard.tsx
var import_solid29 = require("@heroicons/react/24/solid"), import_framer_motion6 = require("framer-motion"), import_react51 = require("react"), import_simplur = __toESM(require("simplur"));
var import_jsx_runtime84 = require("react/jsx-runtime");
function TaskCard({
  selectedId,
  selectedTask,
  isLast,
  depth,
  id,
  style: style2,
  status,
  icon,
  name,
  startedAt,
  completedAt,
  description,
  displayKey,
  connection,
  properties,
  subtasks,
  error,
  delayUntil
}) {
  let [expanded, setExpanded] = (0, import_react51.useState)(!1), isSelected = id === selectedId;
  return /* @__PURE__ */ (0, import_jsx_runtime84.jsxs)(import_react51.Fragment, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime84.jsx)("div", { style: { marginLeft: `${depth}rem` }, children: /* @__PURE__ */ (0, import_jsx_runtime84.jsxs)(RunPanel, { selected: isSelected, onClick: () => selectedTask(id), styleName: style2?.style, children: [
      /* @__PURE__ */ (0, import_jsx_runtime84.jsx)(
        RunPanelHeader,
        {
          icon: status === "COMPLETED" ? icon : /* @__PURE__ */ (0, import_jsx_runtime84.jsx)(
            TaskStatusIcon,
            {
              status,
              minimal: !0,
              className: cn("h-5 w-5", !isSelected && "text-charcoal-400")
            }
          ),
          title: status === "COMPLETED" ? name : /* @__PURE__ */ (0, import_jsx_runtime84.jsx)(RunPanelIconTitle, { icon, title: name }),
          accessory: /* @__PURE__ */ (0, import_jsx_runtime84.jsx)(Paragraph, { variant: "extra-small", children: /* @__PURE__ */ (0, import_jsx_runtime84.jsx)(UpdatingDuration, { start: startedAt ?? void 0, end: completedAt ?? void 0 }) }),
          styleName: style2?.style
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime84.jsxs)(RunPanelBody, { children: [
        error && /* @__PURE__ */ (0, import_jsx_runtime84.jsx)(RunPanelError, { text: error.message, stackTrace: error.stack }),
        description && /* @__PURE__ */ (0, import_jsx_runtime84.jsx)(RunPanelDescription, { text: description, variant: style2?.variant }),
        /* @__PURE__ */ (0, import_jsx_runtime84.jsxs)(RunPanelIconSection, { children: [
          displayKey && /* @__PURE__ */ (0, import_jsx_runtime84.jsx)(RunPanelIconProperty, { icon: "key", label: "Key", value: displayKey }),
          delayUntil && !completedAt && /* @__PURE__ */ (0, import_jsx_runtime84.jsx)(import_jsx_runtime84.Fragment, { children: /* @__PURE__ */ (0, import_jsx_runtime84.jsx)(UpdatingDelay, { delayUntil }) }),
          delayUntil && completedAt && /* @__PURE__ */ (0, import_jsx_runtime84.jsx)(
            RunPanelIconProperty,
            {
              icon: "clock",
              label: "Delay duration",
              value: formatDuration(startedAt, delayUntil, {
                style: "long",
                maxDecimalPoints: 0
              })
            }
          ),
          connection && /* @__PURE__ */ (0, import_jsx_runtime84.jsx)(
            RunPanelIconProperty,
            {
              icon: connection.integration.definition.icon ?? connection.integration.definitionId,
              label: "Connection",
              value: connection.integration.slug
            }
          )
        ] }),
        properties.length > 0 && /* @__PURE__ */ (0, import_jsx_runtime84.jsx)(RunPanelProperties, { properties, className: "mt-4" })
      ] }),
      subtasks && subtasks.length > 0 && /* @__PURE__ */ (0, import_jsx_runtime84.jsxs)(
        "button",
        {
          className: "mt-4 flex h-10 w-full items-center justify-between gap-2 bg-charcoal-800 px-2",
          onClick: () => setExpanded((c) => !c),
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime84.jsxs)("div", { className: "flex items-center gap-2", children: [
              /* @__PURE__ */ (0, import_jsx_runtime84.jsx)(import_solid29.Square2StackIcon, { className: "h-5 w-5 text-charcoal-400" }),
              /* @__PURE__ */ (0, import_jsx_runtime84.jsx)(Paragraph, { variant: "small", children: import_simplur.default`${expanded ? "Hide" : "Show"} ${subtasks.length} subtask[|s]` })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime84.jsx)(
              import_framer_motion6.motion.span,
              {
                initial: expanded ? "expanded" : "collapsed",
                animate: expanded ? "expanded" : "collapsed",
                variants: {
                  collapsed: { rotate: 0, transition: { ease: "anticipate" } },
                  expanded: { rotate: 180, transition: { ease: "anticipate" } }
                },
                children: /* @__PURE__ */ (0, import_jsx_runtime84.jsx)(import_solid29.ChevronDownIcon, { className: "h-5 w-5 text-charcoal-400 transition" })
              }
            )
          ]
        }
      )
    ] }) }),
    (!isLast || expanded) && /* @__PURE__ */ (0, import_jsx_runtime84.jsx)(TaskSeparator, { depth: depth + (expanded ? 1 : 0) }),
    subtasks && subtasks.length > 0 && expanded && subtasks.map((subtask, index) => /* @__PURE__ */ (0, import_jsx_runtime84.jsx)(import_framer_motion6.AnimatePresence, { children: /* @__PURE__ */ (0, import_jsx_runtime84.jsx)(import_framer_motion6.motion.div, { initial: { opacity: 0 }, animate: { opacity: 100 }, children: /* @__PURE__ */ (0, import_jsx_runtime84.jsx)(
      TaskCard,
      {
        selectedId,
        selectedTask,
        isLast: !1,
        depth: depth + 1,
        ...subtask
      }
    ) }) }, subtask.id))
  ] });
}

// app/components/run/TaskCardSkeleton.tsx
var import_jsx_runtime85 = require("react/jsx-runtime");
function TaskCardSkeleton() {
  return /* @__PURE__ */ (0, import_jsx_runtime85.jsxs)(RunPanel, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime85.jsx)(
      RunPanelHeader,
      {
        icon: void 0,
        title: /* @__PURE__ */ (0, import_jsx_runtime85.jsx)("div", { className: "h-5 w-36 max-w-full rounded border bg-charcoal-800" })
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime85.jsx)(RunPanelBody, { children: /* @__PURE__ */ (0, import_jsx_runtime85.jsxs)("div", { className: "flex w-full flex-col justify-between gap-y-1", children: [
      /* @__PURE__ */ (0, import_jsx_runtime85.jsx)("div", { className: "flex items-baseline justify-between gap-x-3 pr-3 md:justify-start md:pr-0", children: /* @__PURE__ */ (0, import_jsx_runtime85.jsx)("div", { className: "h-5 w-1/4 rounded border bg-charcoal-800" }) }),
      /* @__PURE__ */ (0, import_jsx_runtime85.jsx)("div", { className: "flex flex-wrap items-center gap-x-4 gap-y-1", children: /* @__PURE__ */ (0, import_jsx_runtime85.jsx)("div", { className: "h-2.5 w-1/2 rounded border bg-charcoal-800" }) })
    ] }) })
  ] });
}

// app/components/run/RunOverview.tsx
var import_jsx_runtime86 = require("react/jsx-runtime"), taskPattern = /\/tasks\/(.*)/;
function RunOverview({ run, trigger, showRerun, paths, currentUser }) {
  let navigate = (0, import_react53.useNavigate)(), pathName = usePathName(), selectedId = (0, import_react54.useMemo)(() => {
    if (pathName.endsWith("/completed"))
      return "completed";
    if (pathName.endsWith("/trigger"))
      return "trigger";
    let taskMatch = pathName.match(taskPattern), taskId = taskMatch ? taskMatch[1] : void 0;
    if (taskId)
      return taskId;
  }, [pathName]), usernameForEnv = currentUser.id !== run.environment.userId ? run.environment.userName : void 0;
  return /* @__PURE__ */ (0, import_jsx_runtime86.jsxs)(PageContainer, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime86.jsxs)(NavBar, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime86.jsx)(
        PageTitle,
        {
          backButton: {
            to: paths.back,
            text: "Runs"
          },
          title: typeof run.number == "number" ? `Run #${run.number}` : `Run ${run.id.slice(0, 8)}`
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime86.jsxs)(PageAccessories, { children: [
        run.isTest && /* @__PURE__ */ (0, import_jsx_runtime86.jsxs)("span", { className: "flex items-center gap-1 text-xs uppercase text-charcoal-600", children: [
          /* @__PURE__ */ (0, import_jsx_runtime86.jsx)(NamedIcon, { name: "beaker", className: "h-4 w-4 text-charcoal-600" }),
          "Test run"
        ] }),
        showRerun && run.isFinished && /* @__PURE__ */ (0, import_jsx_runtime86.jsx)(
          RerunPopover,
          {
            runId: run.id,
            runPath: paths.run,
            runsPath: paths.runsPath,
            environmentType: run.environment.type,
            status: run.basicStatus
          }
        ),
        !run.isFinished && /* @__PURE__ */ (0, import_jsx_runtime86.jsx)(CancelRun, { runId: run.id })
      ] })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime86.jsxs)(PageBody, { scrollable: !1, className: "grid grid-rows-[auto_1fr] overflow-hidden", children: [
      /* @__PURE__ */ (0, import_jsx_runtime86.jsx)("div", { className: "border-b border-grid-dimmed px-4 py-4", children: /* @__PURE__ */ (0, import_jsx_runtime86.jsxs)(PageInfoRow, { className: "overflow-hidden", children: [
        /* @__PURE__ */ (0, import_jsx_runtime86.jsxs)(PageInfoGroup, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime86.jsx)(
            PageInfoProperty,
            {
              icon: /* @__PURE__ */ (0, import_jsx_runtime86.jsx)(RunStatusIcon, { status: run.status, className: "h-4 w-4" }),
              label: "Status",
              value: runStatusTitle(run.status)
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime86.jsx)(
            PageInfoProperty,
            {
              icon: "calendar",
              label: "Started",
              value: run.startedAt ? /* @__PURE__ */ (0, import_jsx_runtime86.jsx)(DateTime, { date: run.startedAt }) : "Not started yet"
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime86.jsx)(PageInfoProperty, { icon: "property", label: "Version", value: `v${run.version}` }),
          /* @__PURE__ */ (0, import_jsx_runtime86.jsx)(
            PageInfoProperty,
            {
              label: "Env",
              value: /* @__PURE__ */ (0, import_jsx_runtime86.jsx)(EnvironmentLabel, { environment: run.environment, userName: usernameForEnv })
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime86.jsx)(
            PageInfoProperty,
            {
              icon: "clock",
              label: "Duration",
              value: formatDuration(run.startedAt, run.completedAt, { style: "short" })
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime86.jsx)(
            PageInfoProperty,
            {
              icon: /* @__PURE__ */ (0, import_jsx_runtime86.jsx)(Icon, { icon: "alarm-filled", className: "h-4 w-4 text-blue-500" }),
              label: "Execution Time",
              value: formatDurationMilliseconds(run.executionDuration, { style: "short" })
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime86.jsx)(
            PageInfoProperty,
            {
              icon: /* @__PURE__ */ (0, import_jsx_runtime86.jsx)(Icon, { icon: "list-numbers", className: "h-4 w-4 text-yellow-500" }),
              label: "Execution Count",
              value: /* @__PURE__ */ (0, import_jsx_runtime86.jsx)(import_jsx_runtime86.Fragment, { children: run.executionCount })
            }
          )
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime86.jsx)(PageInfoGroup, { alignment: "right", children: /* @__PURE__ */ (0, import_jsx_runtime86.jsxs)(Paragraph, { variant: "extra-small", className: "whitespace-nowrap text-charcoal-600", children: [
          "RUN ID: ",
          run.id
        ] }) })
      ] }) }),
      /* @__PURE__ */ (0, import_jsx_runtime86.jsxs)("div", { className: "grid h-full grid-cols-2 gap-2 overflow-hidden", children: [
        /* @__PURE__ */ (0, import_jsx_runtime86.jsxs)("div", { className: "flex flex-col gap-6 overflow-y-auto py-4 pl-4 pr-2 scrollbar-thin scrollbar-track-transparent scrollbar-thumb-charcoal-600", children: [
          /* @__PURE__ */ (0, import_jsx_runtime86.jsxs)("div", { children: [
            run.status === "SUCCESS" && (run.tasks.length === 0 || run.tasks.every((t) => t.noop)) && /* @__PURE__ */ (0, import_jsx_runtime86.jsx)(
              Callout,
              {
                variant: "warning",
                to: "https://trigger.dev/docs/documentation/concepts/tasks",
                className: "mb-4",
                children: "This Run completed but it did not use any Tasks \u2013 this can cause unpredictable results. Read the docs to view the solution."
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime86.jsx)(Header2, { className: "mb-2", children: "Trigger" }),
            /* @__PURE__ */ (0, import_jsx_runtime86.jsxs)(
              RunPanel,
              {
                selected: selectedId === "trigger",
                onClick: () => navigate(runTriggerPath(paths.run)),
                children: [
                  /* @__PURE__ */ (0, import_jsx_runtime86.jsx)(RunPanelHeader, { icon: trigger.icon, title: trigger.title }),
                  /* @__PURE__ */ (0, import_jsx_runtime86.jsx)(RunPanelBody, { children: /* @__PURE__ */ (0, import_jsx_runtime86.jsx)(
                    RunPanelProperties,
                    {
                      properties: [{ label: "Event name", text: run.event.name }].concat(
                        run.event.externalAccount ? [{ label: "Account ID", text: run.event.externalAccount.identifier }] : []
                      ).concat(run.properties)
                    }
                  ) })
                ]
              }
            )
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime86.jsxs)("div", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime86.jsx)(Header2, { className: "mb-2", children: "Tasks" }),
            run.tasks.length > 0 ? run.tasks.map((task, index) => {
              let isLast = index === run.tasks.length - 1;
              return /* @__PURE__ */ (0, import_jsx_runtime86.jsx)(
                TaskCard,
                {
                  selectedId,
                  selectedTask: (taskId) => {
                    navigate(runTaskPath(paths.run, taskId));
                  },
                  isLast,
                  depth: 0,
                  ...task
                },
                task.id
              );
            }) : /* @__PURE__ */ (0, import_jsx_runtime86.jsx)(BlankTasks, { status: run.basicStatus })
          ] }),
          (run.basicStatus === "COMPLETED" || run.basicStatus === "FAILED") && /* @__PURE__ */ (0, import_jsx_runtime86.jsxs)("div", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime86.jsx)(Header2, { className: cn("mb-2"), children: "Run Summary" }),
            /* @__PURE__ */ (0, import_jsx_runtime86.jsxs)(
              RunPanel,
              {
                selected: selectedId === "completed",
                onClick: () => navigate(runCompletedPath(paths.run)),
                children: [
                  /* @__PURE__ */ (0, import_jsx_runtime86.jsx)(
                    RunPanelHeader,
                    {
                      icon: /* @__PURE__ */ (0, import_jsx_runtime86.jsx)(RunStatusIcon, { status: run.status, className: "h-5 w-5" }),
                      title: /* @__PURE__ */ (0, import_jsx_runtime86.jsx)(Paragraph, { variant: "small/bright", children: /* @__PURE__ */ (0, import_jsx_runtime86.jsx)(RunStatusLabel, { status: run.status }) })
                    }
                  ),
                  /* @__PURE__ */ (0, import_jsx_runtime86.jsxs)(RunPanelBody, { children: [
                    /* @__PURE__ */ (0, import_jsx_runtime86.jsxs)(RunPanelIconSection, { children: [
                      run.startedAt && /* @__PURE__ */ (0, import_jsx_runtime86.jsx)(
                        RunPanelIconProperty,
                        {
                          icon: "calendar",
                          label: "Started at",
                          value: /* @__PURE__ */ (0, import_jsx_runtime86.jsx)(DateTime, { date: run.startedAt })
                        }
                      ),
                      run.completedAt && /* @__PURE__ */ (0, import_jsx_runtime86.jsx)(
                        RunPanelIconProperty,
                        {
                          icon: "flag",
                          label: "Finished at",
                          value: /* @__PURE__ */ (0, import_jsx_runtime86.jsx)(DateTime, { date: run.completedAt })
                        }
                      ),
                      run.startedAt && run.completedAt && /* @__PURE__ */ (0, import_jsx_runtime86.jsx)(
                        RunPanelIconProperty,
                        {
                          icon: "clock",
                          label: "Total duration",
                          value: formatDuration(run.startedAt, run.completedAt, {
                            style: "long"
                          })
                        }
                      )
                    ] }),
                    /* @__PURE__ */ (0, import_jsx_runtime86.jsx)(RunPanelDivider, {}),
                    run.error && /* @__PURE__ */ (0, import_jsx_runtime86.jsx)(RunPanelError, { text: run.error.message, stackTrace: run.error.stack }),
                    run.output ? /* @__PURE__ */ (0, import_jsx_runtime86.jsx)(CodeBlock3, { language: "json", code: run.output, maxLines: 10 }) : run.output === null && /* @__PURE__ */ (0, import_jsx_runtime86.jsx)(Paragraph, { variant: "small", className: "mt-4", children: "This Run returned nothing." })
                  ] })
                ]
              }
            )
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime86.jsxs)("div", { className: "overflow-y-auto py-4 pr-4 scrollbar-thin scrollbar-track-transparent scrollbar-thumb-charcoal-600", children: [
          /* @__PURE__ */ (0, import_jsx_runtime86.jsx)(Header2, { className: "mb-2", children: "Details" }),
          selectedId ? /* @__PURE__ */ (0, import_jsx_runtime86.jsx)(import_react53.Outlet, {}) : /* @__PURE__ */ (0, import_jsx_runtime86.jsx)(Callout, { variant: "info", children: "Select a task or trigger" })
        ] })
      ] })
    ] })
  ] });
}
function BlankTasks({ status }) {
  switch (status) {
    default:
    case "COMPLETED":
      return /* @__PURE__ */ (0, import_jsx_runtime86.jsx)(Paragraph, { variant: "small", children: "There were no tasks for this run." });
    case "FAILED":
      return /* @__PURE__ */ (0, import_jsx_runtime86.jsx)(Paragraph, { variant: "small", children: "No tasks were run." });
    case "WAITING":
    case "PENDING":
    case "RUNNING":
      return /* @__PURE__ */ (0, import_jsx_runtime86.jsxs)("div", { children: [
        /* @__PURE__ */ (0, import_jsx_runtime86.jsx)(Paragraph, { variant: "small", className: "mb-4", children: "Waiting for tasks\u2026" }),
        /* @__PURE__ */ (0, import_jsx_runtime86.jsx)(TaskCardSkeleton, {})
      ] });
  }
}
function RerunPopover({
  runId,
  runPath: runPath3,
  runsPath,
  environmentType,
  status
}) {
  let lastSubmission = (0, import_react53.useActionData)(), [form, { successRedirect, failureRedirect }] = (0, import_react52.useForm)({
    id: "rerun",
    // TODO: type this
    lastSubmission,
    onValidate({ formData }) {
      return (0, import_zod79.parse)(formData, { schema: schema2 });
    }
  });
  return /* @__PURE__ */ (0, import_jsx_runtime86.jsxs)(Popover, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime86.jsx)(PopoverTrigger, { asChild: !0, children: /* @__PURE__ */ (0, import_jsx_runtime86.jsx)(Button, { variant: "primary/small", shortcut: { key: "R" }, children: "Rerun Job" }) }),
    /* @__PURE__ */ (0, import_jsx_runtime86.jsx)(PopoverContent, { className: "flex min-w-[20rem] max-w-[20rem] flex-col gap-2 p-0", align: "end", children: /* @__PURE__ */ (0, import_jsx_runtime86.jsxs)(import_react53.Form, { method: "post", action: `/resources/runs/${runId}/rerun`, ...form.props, children: [
      /* @__PURE__ */ (0, import_jsx_runtime86.jsx)("input", { ...import_react52.conform.input(successRedirect, { type: "hidden" }), defaultValue: runsPath }),
      /* @__PURE__ */ (0, import_jsx_runtime86.jsx)("input", { ...import_react52.conform.input(failureRedirect, { type: "hidden" }), defaultValue: runPath3 }),
      environmentType === "PRODUCTION" && /* @__PURE__ */ (0, import_jsx_runtime86.jsx)("div", { className: "px-4 pt-4", children: /* @__PURE__ */ (0, import_jsx_runtime86.jsx)(Callout, { variant: "warning", children: "This will rerun this Job in your Production environment." }) }),
      /* @__PURE__ */ (0, import_jsx_runtime86.jsxs)("div", { className: "flex flex-col items-start divide-y divide-charcoal-800", children: [
        /* @__PURE__ */ (0, import_jsx_runtime86.jsxs)("div", { className: "p-4", children: [
          /* @__PURE__ */ (0, import_jsx_runtime86.jsx)(Paragraph, { variant: "small", className: "mb-3", children: "Start a brand new Job run with the same Trigger data as this one. This will re-do every Task." }),
          /* @__PURE__ */ (0, import_jsx_runtime86.jsxs)(
            Button,
            {
              variant: "secondary/medium",
              type: "submit",
              name: import_react52.conform.INTENT,
              value: "start",
              fullWidth: !0,
              className: "text-text-bright",
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime86.jsx)(import_solid31.BoltIcon, { className: "mr-1 h-3.5 w-3.5 text-text-bright" }),
                "Run again"
              ]
            }
          )
        ] }),
        status === "FAILED" && /* @__PURE__ */ (0, import_jsx_runtime86.jsxs)("div", { className: "p-4", children: [
          /* @__PURE__ */ (0, import_jsx_runtime86.jsx)(Paragraph, { variant: "small", className: "mb-3", children: "Continue running this Job run from where it left off. This will skip any Task that has already been completed." }),
          /* @__PURE__ */ (0, import_jsx_runtime86.jsxs)(
            Button,
            {
              variant: "secondary/medium",
              type: "submit",
              name: import_react52.conform.INTENT,
              value: "continue",
              fullWidth: !0,
              className: "text-text-bright",
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime86.jsx)(import_solid30.PlayIcon, { className: "mr-1 h-3.5 w-3.5 text-text-bright" }),
                "Retry Job run"
              ]
            }
          )
        ] })
      ] })
    ] }) })
  ] });
}
function CancelRun({ runId }) {
  let lastSubmission = (0, import_react53.useActionData)(), location = (0, import_react53.useLocation)(), navigation = (0, import_react53.useNavigation)(), [form, { redirectUrl }] = (0, import_react52.useForm)({
    id: "cancel-run",
    // TODO: type this
    lastSubmission,
    onValidate({ formData }) {
      return (0, import_zod79.parse)(formData, { schema: cancelSchema });
    }
  }), isLoading2 = navigation.state === "submitting" && navigation.formData !== void 0;
  return /* @__PURE__ */ (0, import_jsx_runtime86.jsxs)(import_react53.Form, { method: "post", action: `/resources/runs/${runId}/cancel`, ...form.props, children: [
    /* @__PURE__ */ (0, import_jsx_runtime86.jsx)("input", { ...import_react52.conform.input(redirectUrl, { type: "hidden" }), defaultValue: location.pathname }),
    /* @__PURE__ */ (0, import_jsx_runtime86.jsx)(
      Button,
      {
        type: "submit",
        LeadingIcon: isLoading2 ? "spinner-white" : "stop",
        leadingIconClassName: "text-white",
        variant: "danger/small",
        disabled: isLoading2,
        children: isLoading2 ? "Canceling" : "Cancel run"
      }
    )
  ] });
}

// app/utils/taskListToTree.ts
function taskListToTree(tasks, addSubtasks = !0) {
  if (!addSubtasks)
    return tasks;
  let result = [], map = new Map(tasks.map((v) => [v.id, v]));
  for (let node of tasks) {
    let parent = node.parentId ? map.get(node.parentId) : null;
    parent ? (parent.subtasks || (parent.subtasks = []), parent.subtasks.push(node)) : result.push(node);
  }
  return result;
}

// app/presenters/RunPresenter.server.ts
var RunPresenter = class {
  #prismaClient;
  constructor(prismaClient = prisma) {
    this.#prismaClient = prismaClient;
  }
  async call({ id, userId }) {
    let run = await this.query({ id, userId });
    if (!run)
      return;
    let eventSpecification = EventSpecificationSchema.parse(run.version.eventSpecification), runProperties = mergeProperties(
      run.version.properties,
      run.properties,
      eventSpecification.properties
    ), enrichedTasks = this.enrichTasks(run.tasks), tasks = taskListToTree(enrichedTasks), runError, runOutput = run.output ? JSON.stringify(run.output, null, 2) : null;
    if (run.status === "FAILURE") {
      let error = ErrorWithStackSchema.safeParse(run.output);
      error.success ? (runError = error.data, runOutput = null) : (runError = { message: "Unknown error" }, runOutput = null);
    }
    return {
      id: run.id,
      number: run.number,
      status: run.status,
      basicStatus: runBasicStatus(run.status),
      isFinished: isRunCompleted(run.status),
      startedAt: run.startedAt,
      completedAt: run.completedAt,
      isTest: run.isTest,
      version: run.version.version,
      output: runOutput,
      properties: runProperties,
      environment: {
        type: run.environment.type,
        slug: run.environment.slug,
        userId: run.environment.orgMember?.user.id,
        userName: getUsername(run.environment.orgMember?.user)
      },
      event: this.#prepareEventData(run.event),
      tasks,
      runConnections: run.runConnections,
      missingConnections: run.missingConnections,
      error: runError,
      executionDuration: run.executionDuration,
      executionCount: run.executionCount
    };
  }
  #prepareEventData(event) {
    return {
      id: event.eventId,
      name: event.name,
      payload: JSON.stringify(event.payload),
      context: JSON.stringify(event.context),
      timestamp: event.timestamp,
      deliveredAt: event.deliveredAt,
      externalAccount: event.externalAccount ? {
        identifier: event.externalAccount.identifier
      } : void 0
    };
  }
  query({ id, userId }) {
    return this.#prismaClient.jobRun.findFirst({
      select: {
        id: !0,
        number: !0,
        status: !0,
        startedAt: !0,
        completedAt: !0,
        isTest: !0,
        properties: !0,
        output: !0,
        executionCount: !0,
        executionDuration: !0,
        version: {
          select: {
            version: !0,
            properties: !0,
            eventSpecification: !0
          }
        },
        environment: {
          select: {
            type: !0,
            slug: !0,
            orgMember: {
              select: {
                user: {
                  select: {
                    id: !0,
                    name: !0,
                    displayName: !0
                  }
                }
              }
            }
          }
        },
        event: {
          select: {
            eventId: !0,
            name: !0,
            payload: !0,
            context: !0,
            timestamp: !0,
            deliveredAt: !0,
            externalAccount: {
              select: {
                identifier: !0
              }
            }
          }
        },
        tasks: {
          select: {
            id: !0,
            displayKey: !0,
            name: !0,
            icon: !0,
            status: !0,
            delayUntil: !0,
            description: !0,
            properties: !0,
            outputProperties: !0,
            error: !0,
            startedAt: !0,
            completedAt: !0,
            style: !0,
            parentId: !0,
            noop: !0,
            runConnection: {
              select: {
                integration: {
                  select: {
                    definitionId: !0,
                    title: !0,
                    slug: !0,
                    definition: {
                      select: {
                        icon: !0
                      }
                    }
                  }
                }
              }
            }
          },
          orderBy: {
            createdAt: "asc"
          }
        },
        runConnections: {
          select: {
            id: !0,
            key: !0,
            integration: {
              select: {
                title: !0,
                slug: !0,
                description: !0,
                scopes: !0,
                definition: !0
              }
            }
          }
        },
        missingConnections: !0
      },
      where: {
        id,
        organization: {
          members: {
            some: {
              userId
            }
          }
        }
      }
    });
  }
  enrichTasks(tasks) {
    return tasks.map((task) => ({
      ...task,
      error: task.error ? ErrorWithStackSchema.parse(task.error) : void 0,
      connection: task.runConnection,
      properties: mergeProperties(task.properties, task.outputProperties),
      style: task.style ? StyleSchema.parse(task.style) : void 0
    }));
  }
};

// app/routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.webhooks.$triggerParam_.runs.delivery.$runParam/route.tsx
var import_jsx_runtime87 = require("react/jsx-runtime"), loader8 = async ({ request, params }) => {
  let userId = await requireUserId(request), { runParam: runParam2, triggerParam } = TriggerSourceRunParamsSchema.parse(params), run = await new RunPresenter().call({
    userId,
    id: runParam2
  }), trigger = await prisma.webhook.findUnique({
    select: {
      id: !0,
      integration: {
        select: {
          id: !0,
          title: !0,
          slug: !0,
          definitionId: !0,
          setupStatus: !0
        }
      }
    },
    where: {
      id: triggerParam
    }
  });
  if (!run || !trigger)
    throw new Response(null, {
      status: 404
    });
  return (0, import_remix_typedjson15.typedjson)({
    run,
    trigger
  });
};
function Page5() {
  let { run, trigger } = (0, import_remix_typedjson15.useTypedLoaderData)(), organization = useOrganization(), project = useProject(), user = useUser(), revalidator = (0, import_react55.useRevalidator)(), events = useEventSource(
    webhookTriggerRunStreamingPath(organization, project, trigger, run),
    {
      event: "message"
    }
  );
  return (0, import_react56.useEffect)(() => {
    events !== null && revalidator.revalidate();
  }, [events]), /* @__PURE__ */ (0, import_jsx_runtime87.jsx)(
    RunOverview,
    {
      run,
      trigger: { icon: "mail-fast", title: "Deliver Webhook" },
      showRerun: !1,
      paths: {
        back: webhookDeliveryPath(organization, project, { id: trigger.id }),
        run: webhookTriggerDeliveryRunPath(organization, project, { id: trigger.id }, run),
        runsPath: webhookTriggerDeliveryRunsParentPath(organization, project, {
          id: trigger.id
        })
      },
      currentUser: user
    }
  );
}

// app/routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.external.$triggerParam_.runs.$runParam.trigger/route.tsx
var route_exports11 = {};
__export(route_exports11, {
  default: () => Page6,
  loader: () => loader9
});
var import_remix_typedjson16 = require("remix-typedjson");
var import_jsx_runtime88 = require("react/jsx-runtime"), loader9 = async ({ request, params }) => {
  let { runParam: runParam2 } = TriggerSourceRunParamsSchema.parse(params), trigger = await new TriggerDetailsPresenter().call(runParam2);
  if (!trigger)
    throw new Response(null, {
      status: 404
    });
  return (0, import_remix_typedjson16.typedjson)({
    trigger
  });
};
function Page6() {
  let { trigger } = (0, import_remix_typedjson16.useTypedLoaderData)();
  return /* @__PURE__ */ (0, import_jsx_runtime88.jsx)(
    TriggerDetail,
    {
      trigger,
      event: { icon: "register-source", title: "Register external source" },
      properties: []
    }
  );
}

// app/routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.webhooks.$triggerParam_.runs.$runParam.trigger/route.tsx
var route_exports12 = {};
__export(route_exports12, {
  default: () => Page7,
  loader: () => loader10
});
var import_remix_typedjson17 = require("remix-typedjson");
var import_jsx_runtime89 = require("react/jsx-runtime"), loader10 = async ({ request, params }) => {
  let { runParam: runParam2 } = TriggerSourceRunParamsSchema.parse(params), trigger = await new TriggerDetailsPresenter().call(runParam2);
  if (!trigger)
    throw new Response(null, {
      status: 404
    });
  return (0, import_remix_typedjson17.typedjson)({
    trigger
  });
};
function Page7() {
  let { trigger } = (0, import_remix_typedjson17.useTypedLoaderData)();
  return /* @__PURE__ */ (0, import_jsx_runtime89.jsx)(
    TriggerDetail,
    {
      trigger,
      event: { icon: "webhook", title: "Register Webhook" },
      properties: []
    }
  );
}

// app/routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.external.$triggerParam_.runs.$runParam.stream/route.tsx
var route_exports13 = {};
__export(route_exports13, {
  loader: () => loader11
});
var import_zod80 = require("zod");
async function loader11({ request, params }) {
  await requireUserId(request);
  let { runParam: runParam2 } = import_zod80.z.object({ runParam: import_zod80.z.string() }).parse(params);
  return new RunStreamPresenter().call({ request, runId: runParam2 });
}

// app/routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.webhooks.$triggerParam_.runs.$runParam.stream/route.tsx
var route_exports14 = {};
__export(route_exports14, {
  loader: () => loader12
});
var import_zod81 = require("zod");
async function loader12({ request, params }) {
  await requireUserId(request);
  let { runParam: runParam2 } = import_zod81.z.object({ runParam: import_zod81.z.string() }).parse(params);
  return new RunStreamPresenter().call({ request, runId: runParam2 });
}

// app/routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.external.$triggerParam_.runs.$runParam/route.tsx
var route_exports15 = {};
__export(route_exports15, {
  default: () => Page8,
  loader: () => loader13
});
var import_react59 = require("@remix-run/react"), import_react60 = require("react"), import_remix_typedjson18 = require("remix-typedjson");

// app/hooks/useEventSource.tsx
var import_react58 = require("react");
function useEventSource2(url, { event = "message", init: init3, disabled } = {}) {
  let [data2, setData] = (0, import_react58.useState)(null);
  return (0, import_react58.useEffect)(() => {
    if (disabled)
      return;
    let eventSource = new EventSource(url, init3);
    eventSource.addEventListener(event ?? "message", handler), setData(null);
    function handler(event2) {
      setData(event2.data || "UNKNOWN_EVENT_DATA");
    }
    return () => {
      eventSource.removeEventListener(event ?? "message", handler), eventSource.close();
    };
  }, [url, event, init3, disabled]), data2;
}

// app/routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.external.$triggerParam_.runs.$runParam/route.tsx
var import_jsx_runtime90 = require("react/jsx-runtime"), loader13 = async ({ request, params }) => {
  let userId = await requireUserId(request), { runParam: runParam2, triggerParam } = TriggerSourceRunParamsSchema.parse(params), run = await new RunPresenter().call({
    userId,
    id: runParam2
  }), trigger = await prisma.triggerSource.findUnique({
    select: {
      id: !0,
      integration: {
        select: {
          id: !0,
          title: !0,
          slug: !0,
          definitionId: !0,
          setupStatus: !0
        }
      }
    },
    where: {
      id: triggerParam
    }
  });
  if (!run || !trigger)
    throw new Response(null, {
      status: 404
    });
  return (0, import_remix_typedjson18.typedjson)({
    run,
    trigger
  });
};
function Page8() {
  let { run, trigger } = (0, import_remix_typedjson18.useTypedLoaderData)(), organization = useOrganization(), project = useProject(), user = useUser(), revalidator = (0, import_react59.useRevalidator)(), events = useEventSource2(
    externalTriggerRunStreamingPath(organization, project, trigger, run),
    {
      event: "message"
    }
  );
  return (0, import_react60.useEffect)(() => {
    events !== null && revalidator.revalidate();
  }, [events]), /* @__PURE__ */ (0, import_jsx_runtime90.jsx)(
    RunOverview,
    {
      run,
      trigger: { icon: "register-source", title: "Register external source" },
      showRerun: !1,
      paths: {
        back: externalTriggerPath(organization, project, { id: trigger.id }),
        run: externalTriggerRunPath(organization, project, { id: trigger.id }, run),
        runsPath: externalTriggerRunsParentPath(organization, project, {
          id: trigger.id
        })
      },
      currentUser: user
    }
  );
}

// app/routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.webhooks.$triggerParam_.runs.$runParam/route.tsx
var route_exports16 = {};
__export(route_exports16, {
  default: () => Page9,
  loader: () => loader14
});
var import_react61 = require("@remix-run/react"), import_react62 = require("react"), import_remix_typedjson19 = require("remix-typedjson");
var import_jsx_runtime91 = require("react/jsx-runtime"), loader14 = async ({ request, params }) => {
  let userId = await requireUserId(request), { runParam: runParam2, triggerParam } = TriggerSourceRunParamsSchema.parse(params), run = await new RunPresenter().call({
    userId,
    id: runParam2
  }), trigger = await prisma.webhook.findUnique({
    select: {
      id: !0,
      key: !0,
      integration: {
        select: {
          id: !0,
          title: !0,
          slug: !0,
          definitionId: !0,
          setupStatus: !0
        }
      }
    },
    where: {
      id: triggerParam
    }
  });
  if (!run || !trigger)
    throw new Response(null, {
      status: 404
    });
  return (0, import_remix_typedjson19.typedjson)({
    run,
    trigger
  });
};
function Page9() {
  let { run, trigger } = (0, import_remix_typedjson19.useTypedLoaderData)(), organization = useOrganization(), project = useProject(), user = useUser(), revalidator = (0, import_react61.useRevalidator)(), events = useEventSource(
    webhookTriggerRunStreamingPath(organization, project, trigger, run),
    {
      event: "message"
    }
  );
  return (0, import_react62.useEffect)(() => {
    events !== null && revalidator.revalidate();
  }, [events]), /* @__PURE__ */ (0, import_jsx_runtime91.jsx)(
    RunOverview,
    {
      run,
      trigger: { icon: "webhook", title: "Register Webhook" },
      showRerun: !0,
      paths: {
        back: webhookTriggerPath(organization, project, { id: trigger.id }),
        run: webhookTriggerRunPath(organization, project, { id: trigger.id }, run),
        runsPath: webhookTriggerRunsParentPath(organization, project, {
          id: trigger.id
        })
      },
      currentUser: user
    }
  );
}

// app/routes/_app.orgs.$organizationSlug.projects.$projectParam.jobs.$jobParam.runs.$runParam.tasks.$taskParam/route.tsx
var route_exports17 = {};
__export(route_exports17, {
  default: () => Page10,
  loader: () => loader15
});
var import_remix_typedjson20 = require("remix-typedjson");
var import_jsx_runtime92 = require("react/jsx-runtime"), loader15 = async ({ request, params }) => {
  let userId = await requireUserId(request), { taskParam } = TaskParamsSchema.parse(params), task = await new TaskDetailsPresenter().call({
    userId,
    id: taskParam
  });
  return (0, import_remix_typedjson20.typedjson)({
    task
  });
};
function Page10() {
  let { task } = (0, import_remix_typedjson20.useTypedLoaderData)();
  return task ? /* @__PURE__ */ (0, import_jsx_runtime92.jsx)(TaskDetail, { task }) : /* @__PURE__ */ (0, import_jsx_runtime92.jsx)("div", { className: "flex h-full items-center justify-center", children: /* @__PURE__ */ (0, import_jsx_runtime92.jsx)(Spinner, {}) });
}

// app/routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.webhooks.$triggerParam.delivery/route.tsx
var route_exports18 = {};
__export(route_exports18, {
  default: () => Page11,
  loader: () => loader16
});
var import_remix_typedjson21 = require("remix-typedjson");

// app/components/runs/WebhookDeliveryRunsTable.tsx
var import_outline2 = require("@heroicons/react/24/outline"), import_solid32 = require("@heroicons/react/24/solid");
var import_jsx_runtime93 = require("react/jsx-runtime");
function WebhookDeliveryRunsTable({
  total,
  hasFilters,
  runs,
  isLoading: isLoading2 = !1,
  runsParentPath
}) {
  return /* @__PURE__ */ (0, import_jsx_runtime93.jsxs)(Table, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime93.jsx)(TableHeader, { children: /* @__PURE__ */ (0, import_jsx_runtime93.jsxs)(TableRow, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime93.jsx)(TableHeaderCell, { children: "Run" }),
      /* @__PURE__ */ (0, import_jsx_runtime93.jsx)(TableHeaderCell, { children: "Env" }),
      /* @__PURE__ */ (0, import_jsx_runtime93.jsx)(TableHeaderCell, { children: "Status" }),
      /* @__PURE__ */ (0, import_jsx_runtime93.jsx)(TableHeaderCell, { children: "Last Error" }),
      /* @__PURE__ */ (0, import_jsx_runtime93.jsx)(TableHeaderCell, { children: "Started" }),
      /* @__PURE__ */ (0, import_jsx_runtime93.jsx)(TableHeaderCell, { children: "Duration" }),
      /* @__PURE__ */ (0, import_jsx_runtime93.jsx)(TableHeaderCell, { children: "Verified" }),
      /* @__PURE__ */ (0, import_jsx_runtime93.jsx)(TableHeaderCell, { children: "Created at" })
    ] }) }),
    /* @__PURE__ */ (0, import_jsx_runtime93.jsxs)(TableBody, { children: [
      total === 0 && !hasFilters ? /* @__PURE__ */ (0, import_jsx_runtime93.jsx)(TableBlankRow, { colSpan: 8, children: /* @__PURE__ */ (0, import_jsx_runtime93.jsx)(NoRuns, { title: "No runs found for this job" }) }) : runs.length === 0 ? /* @__PURE__ */ (0, import_jsx_runtime93.jsx)(TableBlankRow, { colSpan: 8, children: /* @__PURE__ */ (0, import_jsx_runtime93.jsx)(NoRuns, { title: "No runs match your filters" }) }) : runs.map((run) => /* @__PURE__ */ (0, import_jsx_runtime93.jsxs)(TableRow, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime93.jsxs)(TableCell, { children: [
          "#",
          run.number
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime93.jsx)(TableCell, { children: /* @__PURE__ */ (0, import_jsx_runtime93.jsx)(EnvironmentLabel, { environment: run.environment }) }),
        /* @__PURE__ */ (0, import_jsx_runtime93.jsx)(TableCell, { children: /* @__PURE__ */ (0, import_jsx_runtime93.jsx)(
          RunStatus2,
          {
            status: run.deliveredAt ? run.error || !run.verified ? "FAILURE" : "SUCCESS" : "STARTED"
          }
        ) }),
        /* @__PURE__ */ (0, import_jsx_runtime93.jsx)(TableCell, { children: run.error?.slice(0, 30) ?? "\u2013" }),
        /* @__PURE__ */ (0, import_jsx_runtime93.jsx)(TableCell, { children: run.createdAt ? /* @__PURE__ */ (0, import_jsx_runtime93.jsx)(DateTime, { date: run.createdAt }) : "\u2013" }),
        /* @__PURE__ */ (0, import_jsx_runtime93.jsx)(TableCell, { children: formatDuration(run.createdAt, run.deliveredAt, {
          style: "short"
        }) }),
        /* @__PURE__ */ (0, import_jsx_runtime93.jsx)(TableCell, { children: run.verified ? /* @__PURE__ */ (0, import_jsx_runtime93.jsx)(import_solid32.CheckIcon, { className: "h-4 w-4 text-charcoal-400" }) : /* @__PURE__ */ (0, import_jsx_runtime93.jsx)(import_outline2.StopIcon, { className: "h-4 w-4 text-charcoal-850" }) }),
        /* @__PURE__ */ (0, import_jsx_runtime93.jsx)(TableCell, { children: run.createdAt ? /* @__PURE__ */ (0, import_jsx_runtime93.jsx)(DateTime, { date: run.createdAt }) : "\u2013" })
      ] }, run.id)),
      isLoading2 && /* @__PURE__ */ (0, import_jsx_runtime93.jsxs)(
        TableBlankRow,
        {
          colSpan: 8,
          className: "absolute left-0 top-0 flex h-full w-full items-center justify-center gap-2 bg-charcoal-900/90",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime93.jsx)(Spinner, {}),
            " ",
            /* @__PURE__ */ (0, import_jsx_runtime93.jsx)("span", { className: "text-text-dimmed", children: "Loading\u2026" })
          ]
        }
      )
    ] })
  ] });
}
function NoRuns({ title: title2 }) {
  return /* @__PURE__ */ (0, import_jsx_runtime93.jsx)("div", { className: "flex items-center justify-center", children: /* @__PURE__ */ (0, import_jsx_runtime93.jsx)(Paragraph, { className: "w-auto", children: title2 }) });
}

// app/presenters/WebhookDeliveryListPresenter.server.ts
var PAGE_SIZE = 20, WebhookDeliveryListPresenter = class {
  #prismaClient;
  constructor(prismaClient = prisma) {
    this.#prismaClient = prismaClient;
  }
  async call({ userId, webhookId, direction = "forward", cursor }) {
    let directionMultiplier = direction === "forward" ? 1 : -1, runs = await this.#prismaClient.webhookRequestDelivery.findMany({
      select: {
        id: !0,
        number: !0,
        createdAt: !0,
        deliveredAt: !0,
        verified: !0,
        error: !0,
        environment: {
          select: {
            type: !0,
            slug: !0,
            orgMember: {
              select: {
                userId: !0
              }
            }
          }
        }
      },
      where: {
        webhookId,
        environment: {
          OR: [
            {
              orgMember: null
            },
            {
              orgMember: {
                userId
              }
            }
          ]
        }
      },
      orderBy: [{ id: "desc" }],
      //take an extra page to tell if there are more
      take: directionMultiplier * (PAGE_SIZE + 1),
      //skip the cursor if there is one
      skip: cursor ? 1 : 0,
      cursor: cursor ? {
        id: cursor
      } : void 0
    }), hasMore = runs.length > PAGE_SIZE, next, previous;
    switch (direction) {
      case "forward":
        previous = cursor ? runs.at(0)?.id : void 0, hasMore && (next = runs[PAGE_SIZE - 1]?.id);
        break;
      case "backward":
        hasMore ? (previous = runs[1]?.id, next = runs[PAGE_SIZE]?.id) : next = runs[PAGE_SIZE - 1]?.id;
        break;
    }
    return {
      runs: (direction === "backward" && hasMore ? runs.slice(1, PAGE_SIZE + 1) : runs.slice(0, PAGE_SIZE)).map((run) => ({
        id: run.id,
        number: run.number,
        createdAt: run.createdAt,
        deliveredAt: run.deliveredAt,
        verified: run.verified,
        error: run.error,
        environment: {
          type: run.environment.type,
          slug: run.environment.slug,
          userId: run.environment.orgMember?.userId
        }
      })),
      pagination: {
        next,
        previous
      }
    };
  }
};

// app/presenters/WebhookDeliveryPresenter.server.ts
var WebhookDeliveryPresenter = class {
  #prismaClient;
  constructor(prismaClient = prisma) {
    this.#prismaClient = prismaClient;
  }
  async call({
    userId,
    projectSlug,
    organizationSlug,
    webhookId,
    direction = "forward",
    cursor
  }) {
    let webhook = await this.#prismaClient.webhook.findUnique({
      select: {
        id: !0,
        key: !0,
        active: !0,
        integration: {
          select: {
            id: !0,
            title: !0,
            slug: !0,
            definitionId: !0,
            setupStatus: !0,
            definition: {
              select: {
                icon: !0
              }
            }
          }
        },
        httpEndpoint: {
          select: {
            key: !0
          }
        },
        createdAt: !0,
        updatedAt: !0,
        params: !0
      },
      where: {
        id: webhookId
      }
    });
    if (!webhook)
      throw new Error("Webhook source not found");
    let deliveryListPresenter = new WebhookDeliveryListPresenter(this.#prismaClient), orgRootPath = organizationPath({ slug: organizationSlug }), projectRootPath = projectPath({ slug: organizationSlug }, { slug: projectSlug }), requestDeliveries = await deliveryListPresenter.call({
      userId,
      webhookId: webhook.id,
      direction,
      cursor
    });
    return {
      webhook: {
        id: webhook.id,
        key: webhook.key,
        active: webhook.active,
        integration: webhook.integration,
        integrationLink: `${orgRootPath}/integrations/${webhook.integration.slug}`,
        httpEndpoint: webhook.httpEndpoint,
        httpEndpointLink: `${projectRootPath}/http-endpoints/${webhook.httpEndpoint.key}`,
        createdAt: webhook.createdAt,
        updatedAt: webhook.updatedAt,
        params: webhook.params,
        requestDeliveries
      }
    };
  }
};

// app/components/ListPagination.tsx
var import_react64 = require("@remix-run/react");
var import_jsx_runtime94 = require("react/jsx-runtime");
function ListPagination({ list: list3, className }) {
  return /* @__PURE__ */ (0, import_jsx_runtime94.jsxs)("div", { className: cn("flex items-center gap-1", className), children: [
    /* @__PURE__ */ (0, import_jsx_runtime94.jsx)(PreviousButton, { cursor: list3.pagination.previous }),
    /* @__PURE__ */ (0, import_jsx_runtime94.jsx)(NextButton, { cursor: list3.pagination.next })
  ] });
}
function NextButton({ cursor }) {
  let path2 = useCursorPath(cursor, "forward");
  return /* @__PURE__ */ (0, import_jsx_runtime94.jsx)(
    LinkButton,
    {
      to: path2 ?? "#",
      variant: "minimal/small",
      TrailingIcon: "arrow-right",
      trailingIconClassName: "text-text-dimmed",
      className: cn(
        "flex items-center",
        !path2 && "cursor-not-allowed opacity-50 group-hover:bg-transparent group-hover:text-text-dimmed"
      ),
      onClick: (e) => !path2 && e.preventDefault(),
      children: "Next"
    }
  );
}
function PreviousButton({ cursor }) {
  let path2 = useCursorPath(cursor, "backward");
  return /* @__PURE__ */ (0, import_jsx_runtime94.jsx)(
    LinkButton,
    {
      to: path2 ?? "#",
      variant: "minimal/small",
      LeadingIcon: "arrow-left",
      leadingIconClassName: "text-text-dimmed",
      className: cn(
        "flex items-center",
        !path2 && "cursor-not-allowed opacity-50 group-hover:bg-transparent group-hover:text-text-dimmed"
      ),
      onClick: (e) => !path2 && e.preventDefault(),
      children: "Prev"
    }
  );
}
function useCursorPath(cursor, direction) {
  let location = (0, import_react64.useLocation)();
  if (!cursor)
    return;
  let search = new URLSearchParams(location.search);
  return search.set("cursor", cursor), search.set("direction", direction), location.pathname + "?" + search.toString();
}

// app/routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.webhooks.$triggerParam.delivery/route.tsx
var import_jsx_runtime95 = require("react/jsx-runtime"), loader16 = async ({ request, params }) => {
  let userId = await requireUserId(request), { organizationSlug, projectParam: projectParam2, triggerParam } = TriggerSourceParamSchema.parse(params), url = new URL(request.url), s = Object.fromEntries(url.searchParams.entries()), searchParams = RunListSearchSchema.parse(s), presenter = new WebhookDeliveryPresenter(), { webhook } = await presenter.call({
    userId,
    organizationSlug,
    projectSlug: projectParam2,
    webhookId: triggerParam,
    direction: searchParams.direction,
    cursor: searchParams.cursor
  });
  if (!webhook)
    throw new Response("Trigger not found", {
      status: 404,
      statusText: "Not Found"
    });
  return (0, import_remix_typedjson21.typedjson)({ webhook });
};
function Page11() {
  let { webhook } = (0, import_remix_typedjson21.useTypedLoaderData)(), organization = useOrganization(), project = useProject();
  return /* @__PURE__ */ (0, import_jsx_runtime95.jsxs)(import_jsx_runtime95.Fragment, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime95.jsx)(Paragraph, { variant: "small", spacing: !0, children: "Webhook payloads are delivered to clients for validation and event generation. You can see the list of attempted deliveries below." }),
    webhook.requestDeliveries ? /* @__PURE__ */ (0, import_jsx_runtime95.jsxs)(import_jsx_runtime95.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime95.jsx)(ListPagination, { list: webhook.requestDeliveries, className: "mb-2 justify-end" }),
      /* @__PURE__ */ (0, import_jsx_runtime95.jsx)(
        WebhookDeliveryRunsTable,
        {
          runs: webhook.requestDeliveries.runs,
          total: webhook.requestDeliveries.runs.length,
          hasFilters: !1,
          runsParentPath: webhookTriggerDeliveryRunsParentPath(organization, project, webhook)
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime95.jsx)(ListPagination, { list: webhook.requestDeliveries, className: "mt-2 justify-end" })
    ] }) : /* @__PURE__ */ (0, import_jsx_runtime95.jsx)(Callout, { variant: "warning", children: "No registration runs found" })
  ] });
}

// app/routes/_app.orgs.$organizationSlug.projects.$projectParam.jobs.$jobParam.runs.$runParam.completed/route.tsx
var route_exports19 = {};
__export(route_exports19, {
  default: () => RunCompletedPage4
});

// app/hooks/useRun.ts
var import_tiny_invariant5 = __toESM(require("tiny-invariant"));
function useOptionalRun(matches) {
  let project = useOptionalProject(matches), routeMatch = useTypedMatchesData({
    id: "routes/_app.orgs.$organizationSlug.projects.$projectParam.jobs.$jobParam.runs.$runParam",
    matches
  });
  if (!(!project || !routeMatch || !routeMatch.run))
    return routeMatch.run;
}
function useRun(matches) {
  let run = useOptionalRun(matches);
  return (0, import_tiny_invariant5.default)(run, "Run must be present"), run;
}

// app/routes/_app.orgs.$organizationSlug.projects.$projectParam.jobs.$jobParam.runs.$runParam.completed/route.tsx
var import_jsx_runtime96 = require("react/jsx-runtime");
function RunCompletedPage4() {
  let run = useRun();
  return /* @__PURE__ */ (0, import_jsx_runtime96.jsx)(RunCompletedDetail, { run });
}

// app/routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.webhooks.$triggerParam._index/route.tsx
var route_exports20 = {};
__export(route_exports20, {
  default: () => Page12,
  loader: () => loader17
});
var import_react65 = require("@conform-to/react"), import_zod82 = require("@conform-to/zod"), import_react66 = require("@remix-run/react"), import_remix_typedjson22 = require("remix-typedjson"), import_zod83 = require("zod");

// app/components/runs/RunsTable.tsx
var import_outline3 = require("@heroicons/react/24/outline"), import_solid33 = require("@heroicons/react/24/solid");
var import_jsx_runtime97 = require("react/jsx-runtime");
function RunsTable({
  total,
  hasFilters,
  runs,
  isLoading: isLoading2 = !1,
  showJob = !1,
  runsParentPath,
  currentUser
}) {
  return /* @__PURE__ */ (0, import_jsx_runtime97.jsxs)(Table, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime97.jsx)(TableHeader, { children: /* @__PURE__ */ (0, import_jsx_runtime97.jsxs)(TableRow, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime97.jsx)(TableHeaderCell, { children: "Run" }),
      showJob && /* @__PURE__ */ (0, import_jsx_runtime97.jsx)(TableHeaderCell, { children: "Job" }),
      /* @__PURE__ */ (0, import_jsx_runtime97.jsx)(TableHeaderCell, { children: "Env" }),
      /* @__PURE__ */ (0, import_jsx_runtime97.jsx)(TableHeaderCell, { children: "Status" }),
      /* @__PURE__ */ (0, import_jsx_runtime97.jsx)(TableHeaderCell, { children: "Started" }),
      /* @__PURE__ */ (0, import_jsx_runtime97.jsx)(TableHeaderCell, { children: "Duration" }),
      /* @__PURE__ */ (0, import_jsx_runtime97.jsx)(TableHeaderCell, { children: "Exec Time" }),
      /* @__PURE__ */ (0, import_jsx_runtime97.jsx)(TableHeaderCell, { children: "Test" }),
      /* @__PURE__ */ (0, import_jsx_runtime97.jsx)(TableHeaderCell, { children: "Version" }),
      /* @__PURE__ */ (0, import_jsx_runtime97.jsx)(TableHeaderCell, { children: "Created at" }),
      /* @__PURE__ */ (0, import_jsx_runtime97.jsx)(TableHeaderCell, { children: /* @__PURE__ */ (0, import_jsx_runtime97.jsx)("span", { className: "sr-only", children: "Go to page" }) })
    ] }) }),
    /* @__PURE__ */ (0, import_jsx_runtime97.jsxs)(TableBody, { children: [
      total === 0 && !hasFilters ? /* @__PURE__ */ (0, import_jsx_runtime97.jsx)(TableBlankRow, { colSpan: showJob ? 10 : 9, children: !isLoading2 && /* @__PURE__ */ (0, import_jsx_runtime97.jsx)(NoRuns2, { title: "No runs found" }) }) : runs.length === 0 ? /* @__PURE__ */ (0, import_jsx_runtime97.jsx)(TableBlankRow, { colSpan: showJob ? 10 : 9, children: !isLoading2 && /* @__PURE__ */ (0, import_jsx_runtime97.jsx)(NoRuns2, { title: "No runs match your filters" }) }) : runs.map((run) => {
        let path2 = showJob ? `${runsParentPath}/jobs/${run.job.slug}/runs/${run.id}/trigger` : `${runsParentPath}/${run.id}/trigger`, usernameForEnv = currentUser.id !== run.environment.userId ? run.environment.userName : void 0;
        return /* @__PURE__ */ (0, import_jsx_runtime97.jsxs)(TableRow, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime97.jsx)(TableCell, { to: path2, children: typeof run.number == "number" ? `#${run.number}` : "-" }),
          showJob && /* @__PURE__ */ (0, import_jsx_runtime97.jsx)(TableCell, { to: path2, children: run.job.slug }),
          /* @__PURE__ */ (0, import_jsx_runtime97.jsx)(TableCell, { to: path2, children: /* @__PURE__ */ (0, import_jsx_runtime97.jsx)(EnvironmentLabel, { environment: run.environment, userName: usernameForEnv }) }),
          /* @__PURE__ */ (0, import_jsx_runtime97.jsx)(TableCell, { to: path2, children: /* @__PURE__ */ (0, import_jsx_runtime97.jsx)(RunStatus2, { status: run.status }) }),
          /* @__PURE__ */ (0, import_jsx_runtime97.jsx)(TableCell, { to: path2, children: run.startedAt ? /* @__PURE__ */ (0, import_jsx_runtime97.jsx)(DateTime, { date: run.startedAt }) : "\u2013" }),
          /* @__PURE__ */ (0, import_jsx_runtime97.jsx)(TableCell, { to: path2, children: formatDuration(run.startedAt, run.completedAt, {
            style: "short"
          }) }),
          /* @__PURE__ */ (0, import_jsx_runtime97.jsx)(TableCell, { to: path2, children: formatDurationMilliseconds(run.executionDuration, {
            style: "short"
          }) }),
          /* @__PURE__ */ (0, import_jsx_runtime97.jsx)(TableCell, { to: path2, children: run.isTest ? /* @__PURE__ */ (0, import_jsx_runtime97.jsx)(import_solid33.CheckIcon, { className: "h-4 w-4 text-charcoal-400" }) : /* @__PURE__ */ (0, import_jsx_runtime97.jsx)(import_outline3.StopIcon, { className: "h-4 w-4 text-charcoal-850" }) }),
          /* @__PURE__ */ (0, import_jsx_runtime97.jsx)(TableCell, { to: path2, children: run.version }),
          /* @__PURE__ */ (0, import_jsx_runtime97.jsx)(TableCell, { to: path2, children: run.createdAt ? /* @__PURE__ */ (0, import_jsx_runtime97.jsx)(DateTime, { date: run.createdAt }) : "\u2013" }),
          /* @__PURE__ */ (0, import_jsx_runtime97.jsx)(TableCellChevron, { to: path2, isSticky: !0 })
        ] }, run.id);
      }),
      isLoading2 && /* @__PURE__ */ (0, import_jsx_runtime97.jsxs)(
        TableBlankRow,
        {
          colSpan: 8,
          className: "absolute left-0 top-0 flex h-full w-full items-center justify-center gap-2 bg-charcoal-900/90",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime97.jsx)(Spinner, {}),
            " ",
            /* @__PURE__ */ (0, import_jsx_runtime97.jsx)("span", { className: "text-text-dimmed", children: "Loading\u2026" })
          ]
        }
      )
    ] })
  ] });
}
function NoRuns2({ title: title2 }) {
  return /* @__PURE__ */ (0, import_jsx_runtime97.jsx)("div", { className: "flex items-center justify-center", children: /* @__PURE__ */ (0, import_jsx_runtime97.jsx)(Paragraph, { className: "w-auto", children: title2 }) });
}

// app/presenters/v3/basePresenter.server.ts
var import_api13 = require("@opentelemetry/api");
var BasePresenter = class {
  constructor(_prisma = prisma, _replica = $replica) {
    this._prisma = _prisma;
    this._replica = _replica;
  }
  async traceWithEnv(trace9, env6, fn) {
    return tracer2.startActiveSpan(
      `${this.constructor.name}.${trace9}`,
      { attributes: attributesFromAuthenticatedEnv(env6), kind: import_api13.SpanKind.SERVER },
      async (span) => {
        try {
          return await fn(span);
        } catch (e) {
          throw e instanceof Error ? span.recordException(e) : span.recordException(new Error(String(e))), e;
        } finally {
          span.end();
        }
      }
    );
  }
  async trace(trace9, fn) {
    return tracer2.startActiveSpan(
      `${this.constructor.name}.${trace9}`,
      { kind: import_api13.SpanKind.SERVER },
      async (span) => {
        try {
          return await fn(span);
        } catch (e) {
          throw e instanceof Error ? span.recordException(e) : span.recordException(new Error(String(e))), e;
        } finally {
          span.end();
        }
      }
    );
  }
};

// app/presenters/RunListPresenter.server.ts
var DEFAULT_PAGE_SIZE = 20, RunListPresenter = class extends BasePresenter {
  async call({
    userId,
    eventId,
    jobSlug,
    organizationSlug,
    projectSlug,
    filterEnvironment,
    filterStatus,
    direction = "forward",
    cursor,
    pageSize: pageSize3 = DEFAULT_PAGE_SIZE,
    from,
    to
  }) {
    let filterStatuses = filterStatus ? filterableStatuses[filterStatus] : void 0, directionMultiplier = direction === "forward" ? 1 : -1, organization = await this._replica.organization.findFirstOrThrow({
      select: {
        id: !0
      },
      where: {
        slug: organizationSlug,
        members: { some: { userId } }
      }
    }), project = await this._replica.project.findFirstOrThrow({
      select: {
        id: !0
      },
      where: {
        slug: projectSlug,
        organizationId: organization.id
      }
    }), job = jobSlug ? await this._replica.job.findFirstOrThrow({
      where: {
        slug: jobSlug,
        projectId: project.id
      }
    }) : void 0, event = eventId ? await this._replica.eventRecord.findUnique({ where: { id: eventId } }) : void 0, runs = await this._replica.jobRun.findMany({
      select: {
        id: !0,
        number: !0,
        startedAt: !0,
        completedAt: !0,
        createdAt: !0,
        executionDuration: !0,
        isTest: !0,
        status: !0,
        environment: {
          select: {
            type: !0,
            slug: !0,
            orgMember: {
              select: {
                user: {
                  select: {
                    id: !0,
                    name: !0,
                    displayName: !0
                  }
                }
              }
            }
          }
        },
        version: {
          select: {
            version: !0
          }
        },
        job: {
          select: {
            slug: !0,
            title: !0
          }
        }
      },
      where: {
        eventId: event?.id,
        jobId: job?.id,
        projectId: project.id,
        organizationId: organization.id,
        status: filterStatuses ? { in: filterStatuses } : void 0,
        environment: filterEnvironment ? { type: filterEnvironment } : void 0,
        startedAt: {
          gte: from ? new Date(from).toISOString() : void 0,
          lte: to ? new Date(to).toISOString() : void 0
        }
      },
      orderBy: [{ id: "desc" }],
      //take an extra record to tell if there are more
      take: directionMultiplier * (pageSize3 + 1),
      //skip the cursor if there is one
      skip: cursor ? 1 : 0,
      cursor: cursor ? {
        id: cursor
      } : void 0
    }), hasMore = runs.length > pageSize3, next, previous;
    switch (direction) {
      case "forward":
        previous = cursor ? runs.at(0)?.id : void 0, hasMore && (next = runs[pageSize3 - 1]?.id);
        break;
      case "backward":
        hasMore ? (previous = runs[1]?.id, next = runs[pageSize3]?.id) : next = runs[pageSize3 - 1]?.id;
        break;
    }
    return {
      runs: (direction === "backward" && hasMore ? runs.slice(1, pageSize3 + 1) : runs.slice(0, pageSize3)).map((run) => ({
        id: run.id,
        number: run.number,
        startedAt: run.startedAt,
        completedAt: run.completedAt,
        createdAt: run.createdAt,
        executionDuration: run.executionDuration,
        isTest: run.isTest,
        status: run.status,
        version: run.version?.version ?? "unknown",
        environment: {
          type: run.environment.type,
          slug: run.environment.slug,
          userId: run.environment.orgMember?.user.id,
          userName: getUsername(run.environment.orgMember?.user)
        },
        job: run.job
      })),
      pagination: {
        next,
        previous
      }
    };
  }
};

// app/presenters/WebhookSourcePresenter.server.ts
var WebhookSourcePresenter = class {
  #prismaClient;
  constructor(prismaClient = prisma) {
    this.#prismaClient = prismaClient;
  }
  async call({
    userId,
    projectSlug,
    organizationSlug,
    webhookId,
    direction = "forward",
    cursor,
    getDeliveryRuns = !1
  }) {
    let webhook = await this.#prismaClient.webhook.findUnique({
      select: {
        id: !0,
        key: !0,
        active: !0,
        integration: {
          select: {
            id: !0,
            title: !0,
            slug: !0,
            definitionId: !0,
            setupStatus: !0,
            definition: {
              select: {
                icon: !0
              }
            }
          }
        },
        httpEndpoint: {
          select: {
            key: !0
          }
        },
        createdAt: !0,
        updatedAt: !0,
        params: !0
      },
      where: {
        id: webhookId
      }
    });
    if (!webhook)
      throw new Error("Webhook source not found");
    let runListPresenter = new RunListPresenter(this.#prismaClient), jobSlug = getDeliveryRuns ? getDeliveryJobSlug(webhook.key) : getRegistrationJobSlug(webhook.key), runList = await runListPresenter.call({
      userId,
      jobSlug,
      organizationSlug,
      projectSlug,
      direction,
      cursor
    }), orgRootPath = organizationPath({ slug: organizationSlug }), projectRootPath = projectPath({ slug: organizationSlug }, { slug: projectSlug });
    return {
      trigger: {
        id: webhook.id,
        key: webhook.key,
        active: webhook.active,
        integration: webhook.integration,
        integrationLink: `${orgRootPath}/integrations/${webhook.integration.slug}`,
        httpEndpoint: webhook.httpEndpoint,
        httpEndpointLink: `${projectRootPath}/http-endpoints/${webhook.httpEndpoint.key}`,
        createdAt: webhook.createdAt,
        updatedAt: webhook.updatedAt,
        params: webhook.params,
        runList
      }
    };
  }
}, getRegistrationJobSlug = (key) => `webhook.register.${key}`, getDeliveryJobSlug = (key) => `webhook.deliver.${key}`;

// app/routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.webhooks.$triggerParam._index/route.tsx
var import_jsx_runtime98 = require("react/jsx-runtime"), loader17 = async ({ request, params }) => {
  let userId = await requireUserId(request), { organizationSlug, projectParam: projectParam2, triggerParam } = TriggerSourceParamSchema.parse(params), url = new URL(request.url), s = Object.fromEntries(url.searchParams.entries()), searchParams = RunListSearchSchema.parse(s), presenter = new WebhookSourcePresenter(), { trigger } = await presenter.call({
    userId,
    organizationSlug,
    projectSlug: projectParam2,
    webhookId: triggerParam,
    direction: searchParams.direction,
    cursor: searchParams.cursor
  });
  if (!trigger)
    throw new Response("Trigger not found", {
      status: 404,
      statusText: "Not Found"
    });
  return (0, import_remix_typedjson22.typedjson)({ trigger });
}, schema3 = import_zod83.z.object({
  jobId: import_zod83.z.string()
});
function Page12() {
  let { trigger } = (0, import_remix_typedjson22.useTypedLoaderData)(), organization = useOrganization(), project = useProject(), user = useUser(), navigation = (0, import_react66.useNavigation)(), lastSubmission = (0, import_react66.useActionData)(), [form, { jobId }] = (0, import_react65.useForm)({
    id: "trigger-registration-retry",
    // TODO: type this
    lastSubmission,
    onValidate({ formData }) {
      return (0, import_zod82.parse)(formData, { schema: schema3 });
    }
  }), isLoading2 = navigation.state === "submitting" && navigation.formData !== void 0;
  return /* @__PURE__ */ (0, import_jsx_runtime98.jsxs)(import_jsx_runtime98.Fragment, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime98.jsx)(Paragraph, { variant: "small", spacing: !0, children: "Webhook Triggers need to be registered with the external service. You can see the list of attempted registrations below." }),
    !trigger.active && /* @__PURE__ */ (0, import_jsx_runtime98.jsx)(import_react66.Form, { method: "post", ...form.props, children: /* @__PURE__ */ (0, import_jsx_runtime98.jsx)(Callout, { variant: "error", className: "justiy-between mb-4 items-center", children: /* @__PURE__ */ (0, import_jsx_runtime98.jsx)(Paragraph, { variant: "small", className: cn(variantClasses2.error.textColor, "grow"), children: "Registration hasn't succeeded yet, check the runs below." }) }) }),
    trigger.runList ? /* @__PURE__ */ (0, import_jsx_runtime98.jsxs)(import_jsx_runtime98.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime98.jsx)(ListPagination, { list: trigger.runList, className: "mb-2 justify-end" }),
      /* @__PURE__ */ (0, import_jsx_runtime98.jsx)(
        RunsTable,
        {
          runs: trigger.runList.runs,
          total: trigger.runList.runs.length,
          hasFilters: !1,
          runsParentPath: webhookTriggerRunsParentPath(organization, project, trigger),
          currentUser: user
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime98.jsx)(ListPagination, { list: trigger.runList, className: "mt-2 justify-end" })
    ] }) : /* @__PURE__ */ (0, import_jsx_runtime98.jsx)(Callout, { variant: "warning", children: "No registration runs found" })
  ] });
}

// app/routes/resources.orgs.$organizationSlug.projects.v3.$projectParam.runs.$runParam.spans.$spanParam/route.tsx
var route_exports21 = {};
__export(route_exports21, {
  SpanView: () => SpanView,
  loader: () => loader18
});
var import_solid39 = require("@heroicons/react/20/solid"), import_react71 = require("@remix-run/react");
var import_react72 = require("react"), import_remix_typedjson23 = require("remix-typedjson");

// app/assets/icons/ExitIcon.tsx
var import_jsx_runtime99 = require("react/jsx-runtime");
function ExitIcon({ className }) {
  return /* @__PURE__ */ (0, import_jsx_runtime99.jsxs)("svg", { className, viewBox: "0 0 16 16", fill: "none", xmlns: "http://www.w3.org/2000/svg", children: [
    /* @__PURE__ */ (0, import_jsx_runtime99.jsx)("line", { x1: "3.5", y1: "8", x2: "11.5", y2: "8", stroke: "currentColor", strokeLinecap: "round" }),
    /* @__PURE__ */ (0, import_jsx_runtime99.jsx)("line", { x1: "15.5", y1: "1.5", x2: "15.5", y2: "14.5", stroke: "currentColor", strokeLinecap: "round" }),
    /* @__PURE__ */ (0, import_jsx_runtime99.jsx)(
      "path",
      {
        d: "M8.5 4.5L12 8L8.5 11.5",
        stroke: "currentColor",
        strokeLinecap: "round",
        strokeLinejoin: "round"
      }
    )
  ] });
}

// app/components/primitives/PropertyTable.tsx
var import_jsx_runtime100 = require("react/jsx-runtime");
function PropertyTable({
  children,
  className
}) {
  return /* @__PURE__ */ (0, import_jsx_runtime100.jsx)("div", { className: cn("grid grid-cols-[auto,1fr] items-center gap-x-4 gap-y-2", className), children });
}
function Property({ label, labelClassName, children }) {
  return /* @__PURE__ */ (0, import_jsx_runtime100.jsxs)(import_jsx_runtime100.Fragment, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime100.jsx)("div", { className: labelClassName, children: typeof label == "string" ? /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(Paragraph, { variant: "small", children: label }) : label }),
    /* @__PURE__ */ (0, import_jsx_runtime100.jsx)("div", { children: typeof children == "string" ? /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(Paragraph, { variant: "small/bright", children }) : children })
  ] });
}

// app/components/runs/v3/CancelRunDialog.tsx
var import_solid34 = require("@heroicons/react/20/solid"), import_react67 = require("@remix-run/react");
var import_jsx_runtime101 = require("react/jsx-runtime");
function CancelRunDialog({ runFriendlyId, redirectPath }) {
  let navigation = (0, import_react67.useNavigation)(), formAction = `/resources/taskruns/${runFriendlyId}/cancel`, isLoading2 = navigation.formAction === formAction;
  return /* @__PURE__ */ (0, import_jsx_runtime101.jsxs)(DialogContent, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime101.jsx)(DialogHeader, { children: "Cancel this run?" }),
    /* @__PURE__ */ (0, import_jsx_runtime101.jsx)(DialogDescription, { children: "Canceling a run will stop execution, along with any executing subtasks." }),
    /* @__PURE__ */ (0, import_jsx_runtime101.jsx)(DialogFooter, { children: /* @__PURE__ */ (0, import_jsx_runtime101.jsx)(import_react67.Form, { action: `/resources/taskruns/${runFriendlyId}/cancel`, method: "post", children: /* @__PURE__ */ (0, import_jsx_runtime101.jsx)(
      Button,
      {
        type: "submit",
        name: "redirectUrl",
        value: redirectPath,
        variant: "danger/small",
        LeadingIcon: isLoading2 ? "spinner-white" : import_solid34.StopCircleIcon,
        disabled: isLoading2,
        shortcut: { modifiers: ["meta"], key: "enter" },
        children: isLoading2 ? "Canceling..." : "Cancel run"
      }
    ) }) })
  ] }, "cancel");
}

// app/components/runs/v3/LiveTimer.tsx
var import_react68 = require("react"), import_jsx_runtime102 = require("react/jsx-runtime");
function LiveTimer({
  startTime,
  endTime,
  updateInterval: updateInterval2 = 250
}) {
  let [now, setNow] = (0, import_react68.useState)();
  return (0, import_react68.useEffect)(() => {
    let interval = setInterval(() => {
      let date = /* @__PURE__ */ new Date();
      setNow(date), endTime && date > endTime && clearInterval(interval);
    }, updateInterval2);
    return () => clearInterval(interval);
  }, [startTime]), /* @__PURE__ */ (0, import_jsx_runtime102.jsx)(import_jsx_runtime102.Fragment, { children: formatDuration(startTime, now, {
    style: "short",
    maxDecimalPoints: 0,
    units: ["d", "h", "m", "s"]
  }) });
}

// app/components/runs/v3/ReplayRunDialog.tsx
var import_solid35 = require("@heroicons/react/20/solid"), import_react69 = require("@remix-run/react");
var import_jsx_runtime103 = require("react/jsx-runtime");
function ReplayRunDialog({ runFriendlyId, failedRedirect }) {
  let navigation = (0, import_react69.useNavigation)(), formAction = `/resources/taskruns/${runFriendlyId}/replay`, isLoading2 = navigation.formAction === formAction;
  return /* @__PURE__ */ (0, import_jsx_runtime103.jsxs)(DialogContent, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime103.jsx)(DialogHeader, { children: "Replay this run?" }),
    /* @__PURE__ */ (0, import_jsx_runtime103.jsx)(DialogDescription, { children: "Replaying a run will create a new run with the same payload and environment as the original." }),
    /* @__PURE__ */ (0, import_jsx_runtime103.jsx)(DialogFooter, { children: /* @__PURE__ */ (0, import_jsx_runtime103.jsxs)(import_react69.Form, { action: formAction, method: "post", children: [
      /* @__PURE__ */ (0, import_jsx_runtime103.jsx)("input", { type: "hidden", name: "failedRedirect", value: failedRedirect }),
      /* @__PURE__ */ (0, import_jsx_runtime103.jsx)(
        Button,
        {
          type: "submit",
          variant: "primary/small",
          LeadingIcon: isLoading2 ? "spinner-white" : import_solid35.ArrowPathIcon,
          disabled: isLoading2,
          shortcut: { modifiers: ["meta"], key: "enter" },
          children: isLoading2 ? "Replaying..." : "Replay run"
        }
      )
    ] }) })
  ] }, "replay");
}

// app/components/runs/v3/RunIcon.tsx
var import_solid36 = require("@heroicons/react/20/solid");

// app/assets/icons/AttemptIcon.tsx
var import_jsx_runtime104 = require("react/jsx-runtime");
function AttemptIcon({ className }) {
  return /* @__PURE__ */ (0, import_jsx_runtime104.jsxs)(
    "svg",
    {
      className,
      width: "16",
      height: "16",
      viewBox: "0 0 16 16",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime104.jsx)("g", { clipPath: "url(#clip0_9964_113464)", children: /* @__PURE__ */ (0, import_jsx_runtime104.jsx)(
          "path",
          {
            fillRule: "evenodd",
            clipRule: "evenodd",
            d: "M16 0H0V16H16V0ZM7.09906 4.4L4.53906 11.5H6.11906L6.63906 10H9.35906L9.87906 11.5H11.4591L8.89906 4.4H7.09906ZM7.99906 6L8.92906 8.73H7.06906L7.99906 6Z",
            fill: "currentColor"
          }
        ) }),
        /* @__PURE__ */ (0, import_jsx_runtime104.jsx)("defs", { children: /* @__PURE__ */ (0, import_jsx_runtime104.jsx)("clipPath", { id: "clip0_9964_113464", children: /* @__PURE__ */ (0, import_jsx_runtime104.jsx)(
          "path",
          {
            d: "M0 2C0 0.895431 0.895431 0 2 0H14C15.1046 0 16 0.895431 16 2V14C16 15.1046 15.1046 16 14 16H2C0.895431 16 0 15.1046 0 14V2Z",
            fill: "white"
          }
        ) }) })
      ]
    }
  );
}

// app/components/runs/v3/RunIcon.tsx
var import_jsx_runtime105 = require("react/jsx-runtime"), spanNameIcons = [{ matcher: /^prisma:/, iconName: "brand-prisma" }];
function RunIcon({ name, className, spanName }) {
  let spanNameIcon = spanNameIcons.find(({ matcher }) => matcher.test(spanName));
  if (spanNameIcon)
    return /* @__PURE__ */ (0, import_jsx_runtime105.jsx)(
      NamedIcon,
      {
        name: spanNameIcon.iconName,
        className: cn(className),
        fallback: /* @__PURE__ */ (0, import_jsx_runtime105.jsx)(import_solid36.InformationCircleIcon, { className: cn(className, "text-text-dimmed") })
      }
    );
  if (!name)
    return /* @__PURE__ */ (0, import_jsx_runtime105.jsx)(import_solid36.Squares2X2Icon, { className: cn(className, "text-text-dimmed") });
  switch (name) {
    case "task":
      return /* @__PURE__ */ (0, import_jsx_runtime105.jsx)(TaskIcon, { className: cn(className, "text-blue-500") });
    case "scheduled":
      return /* @__PURE__ */ (0, import_jsx_runtime105.jsx)(import_solid36.ClockIcon, { className: cn(className, "text-sun-500") });
    case "attempt":
      return /* @__PURE__ */ (0, import_jsx_runtime105.jsx)(AttemptIcon, { className: cn(className, "text-text-dimmed") });
    case "wait":
      return /* @__PURE__ */ (0, import_jsx_runtime105.jsx)(import_solid36.ClockIcon, { className: cn(className, "text-teal-500") });
    case "trace":
      return /* @__PURE__ */ (0, import_jsx_runtime105.jsx)(import_solid36.Squares2X2Icon, { className: cn(className, "text-text-dimmed") });
    case "debug":
    case "log":
    case "info":
      return /* @__PURE__ */ (0, import_jsx_runtime105.jsx)(import_solid36.InformationCircleIcon, { className: cn(className, "text-text-dimmed") });
    case "warn":
      return /* @__PURE__ */ (0, import_jsx_runtime105.jsx)(import_solid36.InformationCircleIcon, { className: cn(className, "text-amber-400") });
    case "error":
      return /* @__PURE__ */ (0, import_jsx_runtime105.jsx)(import_solid36.InformationCircleIcon, { className: cn(className, "text-rose-500") });
    case "fatal":
      return /* @__PURE__ */ (0, import_jsx_runtime105.jsx)(import_solid36.HandRaisedIcon, { className: cn(className, "text-rose-800") });
  }
  return /* @__PURE__ */ (0, import_jsx_runtime105.jsx)(
    NamedIcon,
    {
      name,
      className: cn(className),
      fallback: /* @__PURE__ */ (0, import_jsx_runtime105.jsx)(import_solid36.InformationCircleIcon, { className: cn(className, "text-text-dimmed") })
    }
  );
}

// app/components/runs/v3/SpanEvents.tsx
var import_jsx_runtime106 = require("react/jsx-runtime");
function SpanEvents3({ spanEvents }) {
  return /* @__PURE__ */ (0, import_jsx_runtime106.jsx)("div", { className: "flex flex-col gap-4", children: spanEvents.map((event, index) => /* @__PURE__ */ (0, import_jsx_runtime106.jsx)(SpanEvent3, { spanEvent: event }, index)) });
}
function SpanEventHeader({
  title: title2,
  titleClassName,
  time
}) {
  return /* @__PURE__ */ (0, import_jsx_runtime106.jsxs)("div", { className: "flex items-center justify-between", children: [
    /* @__PURE__ */ (0, import_jsx_runtime106.jsx)(Header2, { className: titleClassName, children: title2 }),
    /* @__PURE__ */ (0, import_jsx_runtime106.jsx)(Paragraph, { variant: "small", children: /* @__PURE__ */ (0, import_jsx_runtime106.jsx)(DateTimeAccurate, { date: time }) })
  ] });
}
function SpanEvent3({ spanEvent }) {
  return isExceptionSpanEvent(spanEvent) ? /* @__PURE__ */ (0, import_jsx_runtime106.jsx)(SpanEventError, { spanEvent, exception: spanEvent.properties.exception }) : /* @__PURE__ */ (0, import_jsx_runtime106.jsxs)("div", { className: "flex flex-col gap-2", children: [
    /* @__PURE__ */ (0, import_jsx_runtime106.jsx)(SpanEventHeader, { title: spanEvent.name, time: spanEvent.time }),
    spanEvent.properties && /* @__PURE__ */ (0, import_jsx_runtime106.jsx)(CodeBlock3, { code: JSON.stringify(spanEvent.properties, null, 2), maxLines: 20 })
  ] });
}
function SpanEventError({
  spanEvent,
  exception
}) {
  return /* @__PURE__ */ (0, import_jsx_runtime106.jsxs)("div", { className: "flex flex-col gap-2 rounded-sm border border-rose-500/50 p-3", children: [
    /* @__PURE__ */ (0, import_jsx_runtime106.jsx)(
      SpanEventHeader,
      {
        title: exception.type ?? "Error",
        time: spanEvent.time,
        titleClassName: "text-rose-500"
      }
    ),
    exception.message && /* @__PURE__ */ (0, import_jsx_runtime106.jsx)(Callout, { variant: "error", children: exception.message }),
    exception.stacktrace && /* @__PURE__ */ (0, import_jsx_runtime106.jsx)(
      CodeBlock3,
      {
        showCopyButton: !1,
        showLineNumbers: !1,
        code: exception.stacktrace,
        maxLines: 20
      }
    )
  ] });
}

// app/components/runs/v3/SpanTitle.tsx
var import_solid37 = require("@heroicons/react/20/solid"), import_react70 = require("react");
var import_jsx_runtime107 = require("react/jsx-runtime");
function SpanTitle(event) {
  return /* @__PURE__ */ (0, import_jsx_runtime107.jsxs)("span", { className: cn("flex items-center gap-x-2 overflow-x-hidden", eventTextClassName(event)), children: [
    /* @__PURE__ */ (0, import_jsx_runtime107.jsx)("span", { className: "truncate", children: event.message }),
    " ",
    /* @__PURE__ */ (0, import_jsx_runtime107.jsx)(SpanAccessory, { accessory: event.style.accessory, size: event.size })
  ] });
}
function SpanAccessory({
  accessory,
  size
}) {
  if (!accessory)
    return null;
  switch (accessory.style) {
    case "codepath":
      return /* @__PURE__ */ (0, import_jsx_runtime107.jsx)(
        SpanCodePathAccessory,
        {
          accessory,
          className: cn("overflow-x-hidden", size === "large" ? "text-sm" : "text-xs")
        }
      );
    default:
      return /* @__PURE__ */ (0, import_jsx_runtime107.jsx)("div", { className: cn("flex gap-1"), children: accessory.items.map((item, index) => /* @__PURE__ */ (0, import_jsx_runtime107.jsx)("span", { className: cn("inline-flex items-center gap-1"), children: item.text }, index)) });
  }
}
function SpanCodePathAccessory({
  accessory,
  className
}) {
  return /* @__PURE__ */ (0, import_jsx_runtime107.jsx)(
    "code",
    {
      className: cn(
        "inline-flex items-center gap-0.5 truncate rounded border border-charcoal-700 bg-charcoal-800 px-1.5 py-0.5 font-mono text-text-dimmed",
        className
      ),
      children: accessory.items.map((item, index) => /* @__PURE__ */ (0, import_jsx_runtime107.jsxs)(import_react70.Fragment, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime107.jsx)("span", { className: cn("truncate", "text-text-dimmed"), children: item.text }),
        index < accessory.items.length - 1 && /* @__PURE__ */ (0, import_jsx_runtime107.jsx)("span", { className: "text-text-dimmed", children: /* @__PURE__ */ (0, import_jsx_runtime107.jsx)(import_solid37.ChevronRightIcon, { className: "h-4 w-4" }) })
      ] }, index))
    }
  );
}
function eventTextClassName(event) {
  switch (event.level) {
    case "TRACE":
      return textClassNameForVariant(event.style.variant);
    case "LOG":
    case "INFO":
    case "DEBUG":
      return textClassNameForVariant(event.style.variant);
    case "WARN":
      return "text-amber-400";
    case "ERROR":
      return "text-error";
    default:
      return textClassNameForVariant(event.style.variant);
  }
}
function eventBackgroundClassName(event) {
  if (event.isError)
    return "bg-error";
  if (event.isCancelled)
    return "bg-charcoal-600";
  switch (event.level) {
    case "TRACE":
      return backgroundClassNameForVariant(event.style.variant, event.isPartial);
    case "LOG":
    case "INFO":
    case "DEBUG":
      return backgroundClassNameForVariant(event.style.variant, event.isPartial);
    case "WARN":
      return "bg-amber-400";
    case "ERROR":
      return "bg-error";
    default:
      return backgroundClassNameForVariant(event.style.variant, event.isPartial);
  }
}
function textClassNameForVariant(variant3) {
  switch (variant3) {
    case "primary":
      return "text-blue-500";
    default:
      return "text-text-dimmed";
  }
}
function backgroundClassNameForVariant(variant3, isPartial) {
  switch (variant3) {
    case "primary":
      return isPartial ? "bg-blue-500" : "bg-success";
    default:
      return "bg-charcoal-500";
  }
}

// app/components/code/InlineCode.tsx
var import_jsx_runtime108 = require("react/jsx-runtime"), inlineCode = "px-1 py-0.5 rounded border border-charcoal-700 bg-charcoal-800 text-charcoal-200 font-mono", variants7 = {
  "extra-extra-small": "text-xxs",
  "extra-small": "text-xs",
  small: "text-sm",
  base: "text-base"
};
function InlineCode({ variant: variant3 = "small", children, className }) {
  return /* @__PURE__ */ (0, import_jsx_runtime108.jsx)("code", { className: cn(inlineCode, variants7[variant3], className), children });
}

// app/components/runs/v3/TaskPath.tsx
var import_jsx_runtime109 = require("react/jsx-runtime");
function TaskPath({ filePath, functionName, className }) {
  return /* @__PURE__ */ (0, import_jsx_runtime109.jsx)(
    SpanCodePathAccessory,
    {
      accessory: {
        items: [{ text: filePath }, { text: functionName }]
      },
      className
    }
  );
}
function TaskFunctionName({ variant: variant3, functionName, className }) {
  return /* @__PURE__ */ (0, import_jsx_runtime109.jsx)(InlineCode, { variant: variant3, className: cn("text-text-dimmed", className), children: `${functionName}()` });
}

// app/components/runs/v3/TaskRunAttemptStatus.tsx
var import_solid38 = require("@heroicons/react/20/solid");
var import_assert_never6 = __toESM(require("assert-never")), import_lucide_react7 = require("lucide-react");
var import_jsx_runtime110 = require("react/jsx-runtime"), allTaskRunAttemptStatuses = Object.values(
  TaskRunAttemptStatus
);
function TaskRunAttemptStatusCombo({
  status,
  className
}) {
  return /* @__PURE__ */ (0, import_jsx_runtime110.jsxs)("span", { className: cn("flex items-center gap-1", className), children: [
    /* @__PURE__ */ (0, import_jsx_runtime110.jsx)(TaskRunAttemptStatusIcon, { status, className: "h-4 w-4" }),
    /* @__PURE__ */ (0, import_jsx_runtime110.jsx)(TaskRunAttemptStatusLabel, { status })
  ] });
}
function TaskRunAttemptStatusLabel({
  status
}) {
  return /* @__PURE__ */ (0, import_jsx_runtime110.jsx)("span", { className: runAttemptStatusClassNameColor(status), children: runAttemptStatusTitle(status) });
}
function TaskRunAttemptStatusIcon({
  status,
  className
}) {
  if (status === null)
    return /* @__PURE__ */ (0, import_jsx_runtime110.jsx)(import_solid38.RectangleStackIcon, { className: cn(runAttemptStatusClassNameColor(status), className) });
  switch (status) {
    case "ENQUEUED":
      return /* @__PURE__ */ (0, import_jsx_runtime110.jsx)(import_solid38.RectangleStackIcon, { className: cn(runAttemptStatusClassNameColor(status), className) });
    case "PENDING":
      return /* @__PURE__ */ (0, import_jsx_runtime110.jsx)(import_solid38.ClockIcon, { className: cn(runAttemptStatusClassNameColor(status), className) });
    case "EXECUTING":
      return /* @__PURE__ */ (0, import_jsx_runtime110.jsx)(Spinner, { className: cn(runAttemptStatusClassNameColor(status), className) });
    case "PAUSED":
      return /* @__PURE__ */ (0, import_jsx_runtime110.jsx)(import_lucide_react7.SnowflakeIcon, { className: cn(runAttemptStatusClassNameColor(status), className) });
    case "FAILED":
      return /* @__PURE__ */ (0, import_jsx_runtime110.jsx)(import_solid38.XCircleIcon, { className: cn(runAttemptStatusClassNameColor(status), className) });
    case "CANCELED":
      return /* @__PURE__ */ (0, import_jsx_runtime110.jsx)(import_solid38.NoSymbolIcon, { className: cn(runAttemptStatusClassNameColor(status), className) });
    case "COMPLETED":
      return /* @__PURE__ */ (0, import_jsx_runtime110.jsx)(import_solid38.CheckCircleIcon, { className: cn(runAttemptStatusClassNameColor(status), className) });
    default:
      (0, import_assert_never6.default)(status);
  }
}
function runAttemptStatusClassNameColor(status) {
  if (status === null)
    return "text-charcoal-500";
  switch (status) {
    case "ENQUEUED":
      return "text-charcoal-500";
    case "PENDING":
      return "text-charcoal-500";
    case "EXECUTING":
      return "text-pending";
    case "PAUSED":
      return "text-sky-300";
    case "FAILED":
      return "text-error";
    case "CANCELED":
      return "text-charcoal-500";
    case "COMPLETED":
      return "text-success";
    default:
      (0, import_assert_never6.default)(status);
  }
}
function runAttemptStatusTitle(status) {
  if (status === null)
    return "Enqueued";
  switch (status) {
    case "ENQUEUED":
      return "Enqueued";
    case "PENDING":
      return "Pending";
    case "EXECUTING":
      return "Executing";
    case "PAUSED":
      return "Frozen";
    case "FAILED":
      return "Failed";
    case "CANCELED":
      return "Canceled";
    case "COMPLETED":
      return "Completed";
    default:
      (0, import_assert_never6.default)(status);
  }
}

// app/presenters/v3/SpanPresenter.server.ts
var SpanPresenter = class extends BasePresenter {
  async call({
    userId,
    projectSlug,
    organizationSlug,
    spanId,
    runFriendlyId
  }) {
    if (!await this._replica.project.findUnique({
      where: {
        slug: projectSlug
      }
    }))
      throw new Error("Project not found");
    let run = await this._prisma.taskRun.findFirst({
      select: {
        traceId: !0
      },
      where: {
        friendlyId: runFriendlyId
      }
    });
    if (!run)
      return;
    let span = await eventRepository.getSpan(spanId, run.traceId);
    if (!span)
      return;
    let output = span.outputType === "application/store" ? `/resources/packets/${span.environmentId}/${span.output}` : typeof span.output < "u" ? await prettyPrintPacket(span.output, span.outputType ?? void 0) : void 0, payload = span.payloadType === "application/store" ? `/resources/packets/${span.environmentId}/${span.payload}` : typeof span.payload < "u" && span.payload !== null ? await prettyPrintPacket(span.payload, span.payloadType ?? void 0) : void 0;
    return {
      event: {
        ...span,
        events: span.events,
        output,
        outputType: span.outputType ?? "application/json",
        payload,
        payloadType: span.payloadType ?? "application/json",
        properties: span.properties ? JSON.stringify(span.properties, null, 2) : void 0,
        showActionBar: span.show?.actions === !0
      }
    };
  }
};

// app/routes/resources.orgs.$organizationSlug.projects.v3.$projectParam.runs.$runParam.spans.$spanParam/route.tsx
var import_jsx_runtime111 = require("react/jsx-runtime"), loader18 = async ({ request, params }) => {
  let userId = await requireUserId(request), { projectParam: projectParam2, organizationSlug, runParam: runParam2, spanParam } = v3SpanParamsSchema.parse(params), span = await new SpanPresenter().call({
    userId,
    organizationSlug,
    projectSlug: projectParam2,
    spanId: spanParam,
    runFriendlyId: runParam2
  });
  return span ? (0, import_remix_typedjson23.typedjson)({ span }) : redirectWithErrorMessage(
    v3RunPath({ slug: organizationSlug }, { slug: projectParam2 }, { friendlyId: runParam2 }),
    request,
    "Event not found."
  );
};
function SpanView({
  runParam: runParam2,
  spanId,
  closePanel
}) {
  let organization = useOrganization(), project = useProject(), fetcher = (0, import_remix_typedjson23.useTypedFetcher)();
  if ((0, import_react72.useEffect)(() => {
    spanId !== void 0 && fetcher.load(
      `/resources/orgs/${organization.slug}/projects/v3/${project.slug}/runs/${runParam2}/spans/${spanId}`
    );
  }, [organization.slug, project.slug, runParam2, spanId]), spanId === void 0)
    return null;
  if (fetcher.state !== "idle" || fetcher.data === void 0)
    return /* @__PURE__ */ (0, import_jsx_runtime111.jsxs)(
      "div",
      {
        className: cn(
          "grid h-full max-h-full grid-rows-[2.5rem_1fr] overflow-hidden bg-background-bright"
        ),
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime111.jsxs)("div", { className: "mx-3 flex items-center gap-2 overflow-x-hidden border-b border-grid-dimmed", children: [
            /* @__PURE__ */ (0, import_jsx_runtime111.jsx)("div", { className: "size-4 bg-grid-dimmed" }),
            /* @__PURE__ */ (0, import_jsx_runtime111.jsx)("div", { className: "h-6 w-[60%] bg-grid-dimmed" })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime111.jsx)("div", { className: "flex items-center justify-center", children: /* @__PURE__ */ (0, import_jsx_runtime111.jsx)(Spinner, {}) })
        ]
      }
    );
  let {
    span: { event }
  } = fetcher.data;
  return /* @__PURE__ */ (0, import_jsx_runtime111.jsxs)(
    "div",
    {
      className: cn(
        "grid h-full max-h-full overflow-hidden bg-background-bright",
        event.showActionBar ? "grid-rows-[2.5rem_1fr_3.25rem]" : "grid-rows-[2.5rem_1fr]"
      ),
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime111.jsxs)("div", { className: "mx-3 flex items-center justify-between gap-2 overflow-x-hidden border-b border-grid-dimmed", children: [
          /* @__PURE__ */ (0, import_jsx_runtime111.jsxs)("div", { className: "flex items-center gap-1 overflow-x-hidden", children: [
            /* @__PURE__ */ (0, import_jsx_runtime111.jsx)(
              RunIcon,
              {
                name: event.style?.icon,
                spanName: event.message,
                className: "h-4 min-h-4 w-4 min-w-4"
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime111.jsx)(Header2, { className: cn("overflow-x-hidden"), children: /* @__PURE__ */ (0, import_jsx_runtime111.jsx)(SpanTitle, { ...event, size: "large" }) })
          ] }),
          runParam2 && /* @__PURE__ */ (0, import_jsx_runtime111.jsx)(
            Button,
            {
              onClick: closePanel,
              variant: "minimal/medium",
              LeadingIcon: ExitIcon,
              shortcut: { key: "esc" }
            }
          )
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime111.jsx)("div", { className: "overflow-y-auto px-3 pt-4 scrollbar-thin scrollbar-track-transparent scrollbar-thumb-charcoal-600", children: /* @__PURE__ */ (0, import_jsx_runtime111.jsxs)("div", { className: "flex flex-col gap-4", children: [
          /* @__PURE__ */ (0, import_jsx_runtime111.jsxs)(PropertyTable, { children: [
            event.level === "TRACE" ? /* @__PURE__ */ (0, import_jsx_runtime111.jsx)(Property, { label: "Timeline", labelClassName: "self-end", children: /* @__PURE__ */ (0, import_jsx_runtime111.jsx)(
              Timeline,
              {
                startTime: new Date(event.startTime),
                duration: event.duration,
                inProgress: event.isPartial,
                isError: event.isError
              }
            ) }) : /* @__PURE__ */ (0, import_jsx_runtime111.jsx)(Property, { label: "Timestamp", children: /* @__PURE__ */ (0, import_jsx_runtime111.jsxs)(Paragraph, { variant: "small/bright", children: [
              /* @__PURE__ */ (0, import_jsx_runtime111.jsx)(DateTimeAccurate, { date: event.startTime }),
              " UTC"
            ] }) }),
            event.style.variant === "primary" && /* @__PURE__ */ (0, import_jsx_runtime111.jsx)(Property, { label: "Status", children: /* @__PURE__ */ (0, import_jsx_runtime111.jsx)(
              TaskRunAttemptStatusCombo,
              {
                status: event.isCancelled ? "CANCELED" : event.isError ? "FAILED" : event.isPartial ? "EXECUTING" : "COMPLETED",
                className: "text-sm"
              }
            ) }),
            /* @__PURE__ */ (0, import_jsx_runtime111.jsx)(Property, { label: "Message", children: event.message }),
            /* @__PURE__ */ (0, import_jsx_runtime111.jsx)(Property, { label: "Task ID", children: event.taskSlug }),
            event.idempotencyKey && /* @__PURE__ */ (0, import_jsx_runtime111.jsx)(Property, { label: "Idempotency key", children: event.idempotencyKey }),
            event.taskPath && event.taskExportName && /* @__PURE__ */ (0, import_jsx_runtime111.jsx)(Property, { label: "Task", children: /* @__PURE__ */ (0, import_jsx_runtime111.jsx)(
              TaskPath,
              {
                filePath: event.taskPath,
                functionName: `${event.taskExportName}()`,
                className: "text-xs"
              }
            ) }),
            event.queueName && /* @__PURE__ */ (0, import_jsx_runtime111.jsx)(Property, { label: "Queue name", children: event.queueName }),
            event.workerVersion && /* @__PURE__ */ (0, import_jsx_runtime111.jsx)(Property, { label: "Version", children: /* @__PURE__ */ (0, import_jsx_runtime111.jsxs)("div", { className: "flex items-center gap-2 text-sm text-text-bright", children: [
              /* @__PURE__ */ (0, import_jsx_runtime111.jsx)("span", { children: event.workerVersion }),
              /* @__PURE__ */ (0, import_jsx_runtime111.jsx)(EnvironmentLabel, { environment: { type: event.environmentType } })
            ] }) })
          ] }),
          event.links && event.links.length > 0 && /* @__PURE__ */ (0, import_jsx_runtime111.jsxs)("div", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime111.jsx)(Header2, { spacing: !0, children: "Links" }),
            /* @__PURE__ */ (0, import_jsx_runtime111.jsx)("div", { className: "space-y-1", children: event.links.map((link, index) => /* @__PURE__ */ (0, import_jsx_runtime111.jsx)(SpanLinkElement, { link }, index)) })
          ] }),
          event.events !== void 0 && /* @__PURE__ */ (0, import_jsx_runtime111.jsx)(SpanEvents3, { spanEvents: event.events }),
          event.payload !== void 0 && /* @__PURE__ */ (0, import_jsx_runtime111.jsx)(PacketDisplay, { data: event.payload, dataType: event.payloadType, title: "Payload" }),
          event.output !== void 0 && /* @__PURE__ */ (0, import_jsx_runtime111.jsx)(PacketDisplay, { data: event.output, dataType: event.outputType, title: "Output" }),
          event.properties !== void 0 && /* @__PURE__ */ (0, import_jsx_runtime111.jsx)(CodeBlock3, { rowTitle: "Properties", code: event.properties, maxLines: 20 })
        ] }) }),
        event.showActionBar === !0 ? /* @__PURE__ */ (0, import_jsx_runtime111.jsxs)("div", { className: "flex items-center justify-between gap-2 border-t border-grid-dimmed px-2", children: [
          /* @__PURE__ */ (0, import_jsx_runtime111.jsx)("div", { className: "flex items-center gap-4", children: event.runId !== runParam2 && /* @__PURE__ */ (0, import_jsx_runtime111.jsx)(
            LinkButton,
            {
              to: v3RunSpanPath(
                organization,
                project,
                { friendlyId: event.runId },
                { spanId: event.spanId }
              ),
              variant: "minimal/medium",
              LeadingIcon: import_solid39.QueueListIcon,
              shortcut: { key: "f" },
              children: "Focus on span"
            }
          ) }),
          /* @__PURE__ */ (0, import_jsx_runtime111.jsx)("div", { className: "flex items-center gap-4", children: /* @__PURE__ */ (0, import_jsx_runtime111.jsx)(RunActionButtons, { span: event }) })
        ] }) : null
      ]
    }
  );
}
function RunActionButtons({ span }) {
  let organization = useOrganization(), project = useProject(), { runParam: runParam2 } = (0, import_react71.useParams)();
  return runParam2 ? span.isPartial ? /* @__PURE__ */ (0, import_jsx_runtime111.jsxs)(Dialog, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime111.jsx)(
      LinkButton,
      {
        to: v3RunDownloadLogsPath({ friendlyId: runParam2 }),
        LeadingIcon: import_solid39.CloudArrowDownIcon,
        variant: "tertiary/medium",
        target: "_blank",
        download: !0,
        children: "Download logs"
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime111.jsx)(DialogTrigger, { asChild: !0, children: /* @__PURE__ */ (0, import_jsx_runtime111.jsx)(Button, { variant: "danger/medium", LeadingIcon: import_solid39.StopCircleIcon, children: "Cancel run" }) }),
    /* @__PURE__ */ (0, import_jsx_runtime111.jsx)(
      CancelRunDialog,
      {
        runFriendlyId: span.runId,
        redirectPath: v3RunSpanPath(
          organization,
          project,
          { friendlyId: runParam2 },
          { spanId: span.spanId }
        )
      }
    )
  ] }, "in-progress") : /* @__PURE__ */ (0, import_jsx_runtime111.jsxs)(Dialog, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime111.jsx)(
      LinkButton,
      {
        to: v3RunDownloadLogsPath({ friendlyId: runParam2 }),
        LeadingIcon: import_solid39.CloudArrowDownIcon,
        variant: "tertiary/medium",
        target: "_blank",
        download: !0,
        children: "Download logs"
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime111.jsx)(DialogTrigger, { asChild: !0, children: /* @__PURE__ */ (0, import_jsx_runtime111.jsx)(Button, { variant: "tertiary/medium", LeadingIcon: import_solid39.ArrowPathIcon, children: "Replay run" }) }),
    /* @__PURE__ */ (0, import_jsx_runtime111.jsx)(
      ReplayRunDialog,
      {
        runFriendlyId: span.runId,
        failedRedirect: v3RunSpanPath(
          organization,
          project,
          { friendlyId: runParam2 },
          { spanId: span.spanId }
        )
      }
    )
  ] }, "complete") : null;
}
function PacketDisplay({
  data: data2,
  dataType,
  title: title2
}) {
  switch (dataType) {
    case "application/store":
      return /* @__PURE__ */ (0, import_jsx_runtime111.jsxs)("div", { className: "flex flex-col", children: [
        /* @__PURE__ */ (0, import_jsx_runtime111.jsx)(Paragraph, { variant: "base/bright", className: "w-full border-b border-grid-dimmed py-2.5", children: title2 }),
        /* @__PURE__ */ (0, import_jsx_runtime111.jsx)(LinkButton, { LeadingIcon: import_solid39.CloudArrowDownIcon, to: data2, variant: "tertiary/medium", download: !0, children: "Download" })
      ] });
    case "text/plain":
      return /* @__PURE__ */ (0, import_jsx_runtime111.jsx)(CodeBlock3, { language: "markdown", rowTitle: title2, code: data2, maxLines: 20 });
    default:
      return /* @__PURE__ */ (0, import_jsx_runtime111.jsx)(CodeBlock3, { language: "json", rowTitle: title2, code: data2, maxLines: 20 });
  }
}
function Timeline({ startTime, duration, inProgress, isError: isError2 }) {
  let state = isError2 ? "error" : inProgress ? "pending" : "complete";
  return /* @__PURE__ */ (0, import_jsx_runtime111.jsxs)("div", { className: "flex w-full flex-col", children: [
    /* @__PURE__ */ (0, import_jsx_runtime111.jsxs)("div", { className: "flex items-center justify-between gap-1", children: [
      /* @__PURE__ */ (0, import_jsx_runtime111.jsx)(Paragraph, { variant: "small", children: /* @__PURE__ */ (0, import_jsx_runtime111.jsx)(DateTimeAccurate, { date: startTime }) }),
      state === "pending" ? /* @__PURE__ */ (0, import_jsx_runtime111.jsx)(Paragraph, { variant: "extra-small", className: cn("whitespace-nowrap tabular-nums"), children: /* @__PURE__ */ (0, import_jsx_runtime111.jsx)(LiveTimer, { startTime }) }) : /* @__PURE__ */ (0, import_jsx_runtime111.jsx)(Paragraph, { variant: "small", children: /* @__PURE__ */ (0, import_jsx_runtime111.jsx)(
        DateTimeAccurate,
        {
          date: new Date(startTime.getTime() + nanosecondsToMilliseconds(duration))
        }
      ) })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime111.jsx)(TimelineBar, { duration, state })
  ] });
}
function TimelineBar({
  state,
  duration
}) {
  return /* @__PURE__ */ (0, import_jsx_runtime111.jsxs)("div", { className: "flex h-6 items-center", children: [
    /* @__PURE__ */ (0, import_jsx_runtime111.jsx)(VerticalBar, { state }),
    state === "error" ? /* @__PURE__ */ (0, import_jsx_runtime111.jsx)("div", { className: cn("h-0.75 flex-1", classNameForState(state)) }) : state === "complete" ? /* @__PURE__ */ (0, import_jsx_runtime111.jsxs)("div", { className: "flex flex-1 items-center", children: [
      /* @__PURE__ */ (0, import_jsx_runtime111.jsx)("div", { className: cn("h-0.75 flex-1", classNameForState(state)) }),
      /* @__PURE__ */ (0, import_jsx_runtime111.jsx)(Paragraph, { variant: "small", className: "px-1 text-success", children: formatDurationNanoseconds(duration, { style: "short" }) }),
      /* @__PURE__ */ (0, import_jsx_runtime111.jsx)("div", { className: cn("h-0.75 flex-1", classNameForState(state)) })
    ] }) : /* @__PURE__ */ (0, import_jsx_runtime111.jsxs)("div", { className: "flex flex-1 items-center", children: [
      /* @__PURE__ */ (0, import_jsx_runtime111.jsx)("div", { className: cn("h-0.75 flex-1", classNameForState(state)) }),
      /* @__PURE__ */ (0, import_jsx_runtime111.jsx)("div", { className: "flex h-0.75 basis-1/6 items-center", children: /* @__PURE__ */ (0, import_jsx_runtime111.jsx)(DottedLine, {}) })
    ] }),
    state !== "pending" && /* @__PURE__ */ (0, import_jsx_runtime111.jsx)(VerticalBar, { state })
  ] });
}
function VerticalBar({ state }) {
  return /* @__PURE__ */ (0, import_jsx_runtime111.jsx)("div", { className: cn("h-3 w-0.75 rounded-full", classNameForState(state)) });
}
function DottedLine() {
  return /* @__PURE__ */ (0, import_jsx_runtime111.jsxs)("div", { className: "flex h-0.75 flex-1 items-center justify-evenly", children: [
    /* @__PURE__ */ (0, import_jsx_runtime111.jsx)("div", { className: "h-0.75 w-0.75 bg-pending" }),
    /* @__PURE__ */ (0, import_jsx_runtime111.jsx)("div", { className: "h-0.75 w-0.75 bg-pending" }),
    /* @__PURE__ */ (0, import_jsx_runtime111.jsx)("div", { className: "h-0.75 w-0.75 bg-pending" }),
    /* @__PURE__ */ (0, import_jsx_runtime111.jsx)("div", { className: "h-0.75 w-0.75 bg-pending" })
  ] });
}
function classNameForState(state) {
  switch (state) {
    case "pending":
      return "bg-pending";
    case "complete":
      return "bg-success";
    case "error":
      return "bg-error";
  }
}
function SpanLinkElement({ link }) {
  let organization = useOrganization(), project = useProject();
  switch (link.type) {
    case "run":
      return /* @__PURE__ */ (0, import_jsx_runtime111.jsx)(
        LinkButton,
        {
          to: v3RunPath(organization, project, { friendlyId: link.runId }),
          variant: "minimal/medium",
          LeadingIcon: link.icon,
          leadingIconClassName: "text-text-dimmed",
          fullWidth: !0,
          textAlignLeft: !0,
          children: link.title
        }
      );
    case "span":
      return /* @__PURE__ */ (0, import_jsx_runtime111.jsx)(
        LinkButton,
        {
          to: v3TraceSpanPath(organization, project, link.traceId, link.spanId),
          variant: "minimal/medium",
          LeadingIcon: link.icon,
          leadingIconClassName: "text-text-dimmed",
          fullWidth: !0,
          textAlignLeft: !0,
          children: link.title
        }
      );
  }
  return null;
}

// app/routes/_app.orgs.$organizationSlug.projects.$projectParam.jobs.$jobParam.runs.$runParam.trigger/route.tsx
var route_exports22 = {};
__export(route_exports22, {
  default: () => Page13,
  loader: () => loader19
});
var import_remix_typedjson24 = require("remix-typedjson");
var import_jsx_runtime112 = require("react/jsx-runtime"), loader19 = async ({ request, params }) => {
  let { runParam: runParam2 } = RunParamsSchema.parse(params), trigger = await new TriggerDetailsPresenter().call(runParam2);
  if (!trigger)
    throw new Response(null, {
      status: 404
    });
  return (0, import_remix_typedjson24.typedjson)({
    trigger
  });
};
function Page13() {
  let { trigger } = (0, import_remix_typedjson24.useTypedLoaderData)(), job = useJob(), run = useRun();
  return /* @__PURE__ */ (0, import_jsx_runtime112.jsx)(TriggerDetail, { trigger, event: job.event, properties: run.properties });
}

// app/routes/_app.orgs.$organizationSlug.projects.$projectParam.jobs.$jobParam.runs.$runParam.stream/route.tsx
var route_exports23 = {};
__export(route_exports23, {
  loader: () => loader20
});
var import_zod84 = require("zod");
async function loader20({ request, params }) {
  await requireUserId(request);
  let { runParam: runParam2 } = import_zod84.z.object({ runParam: import_zod84.z.string() }).parse(params);
  return new RunStreamPresenter().call({ request, runId: runParam2 });
}

// app/routes/resources.orgs.$organizationSlug.projects.$projectParam.schedules.new.natural-language.tsx
var resources_orgs_organizationSlug_projects_projectParam_schedules_new_natural_language_exports = {};
__export(resources_orgs_organizationSlug_projects_projectParam_schedules_new_natural_language_exports, {
  AIGeneratedCronField: () => AIGeneratedCronField,
  action: () => action4
});
var import_react73 = require("@remix-run/react"), import_server_runtime6 = require("@remix-run/server-runtime"), import_react74 = require("react"), import_zod86 = require("zod");

// app/assets/icons/AISparkleIcon.tsx
var import_jsx_runtime113 = require("react/jsx-runtime");
function AISparkleIcon({ className }) {
  return /* @__PURE__ */ (0, import_jsx_runtime113.jsxs)("svg", { className, viewBox: "0 0 18 18", fill: "none", xmlns: "http://www.w3.org/2000/svg", children: [
    /* @__PURE__ */ (0, import_jsx_runtime113.jsx)(
      "path",
      {
        d: "M14.9806 0.803884C14.8871 0.33646 14.4767 0 14 0C13.5233 0 13.1129 0.33646 13.0194 0.803884L12.7809 1.99644C12.7017 2.3923 12.3923 2.70174 11.9964 2.78091L10.8039 3.01942C10.3365 3.1129 10 3.52332 10 4C10 4.47668 10.3365 4.8871 10.8039 4.98058L11.9964 5.21909C12.3923 5.29826 12.7017 5.6077 12.7809 6.00356L13.0194 7.19612C13.1129 7.66354 13.5233 8 14 8C14.4767 8 14.8871 7.66354 14.9806 7.19612L15.2191 6.00356C15.2983 5.6077 15.6077 5.29826 16.0036 5.21909L17.1961 4.98058C17.6635 4.8871 18 4.47668 18 4C18 3.52332 17.6635 3.1129 17.1961 3.01942L16.0036 2.78091C15.6077 2.70174 15.2983 2.3923 15.2191 1.99644L14.9806 0.803884Z",
        fill: "url(#paint0_linear_11402_36656)"
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime113.jsx)(
      "path",
      {
        d: "M5.94868 4.68377C5.81257 4.27543 5.43043 4 5 4C4.56957 4 4.18743 4.27543 4.05132 4.68377L3.36754 6.73509C3.26801 7.03369 3.03369 7.26801 2.73509 7.36754L0.683772 8.05132C0.27543 8.18743 0 8.56957 0 9C0 9.43043 0.27543 9.81257 0.683772 9.94868L2.73509 10.6325C3.03369 10.732 3.26801 10.9663 3.36754 11.2649L4.05132 13.3162C4.18743 13.7246 4.56957 14 5 14C5.43043 14 5.81257 13.7246 5.94868 13.3162L6.63246 11.2649C6.73199 10.9663 6.96631 10.732 7.26491 10.6325L9.31623 9.94868C9.72457 9.81257 10 9.43043 10 9C10 8.56957 9.72457 8.18743 9.31623 8.05132L7.26491 7.36754C6.96631 7.26801 6.73199 7.03369 6.63246 6.73509L5.94868 4.68377Z",
        fill: "url(#paint1_linear_11402_36656)"
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime113.jsx)(
      "path",
      {
        d: "M12.9487 12.6838C12.8126 12.2754 12.4304 12 12 12C11.5696 12 11.1874 12.2754 11.0513 12.6838L10.8675 13.2351C10.768 13.5337 10.5337 13.768 10.2351 13.8675L9.68377 14.0513C9.27543 14.1874 9 14.5696 9 15C9 15.4304 9.27543 15.8126 9.68377 15.9487L10.2351 16.1325C10.5337 16.232 10.768 16.4663 10.8675 16.7649L11.0513 17.3162C11.1874 17.7246 11.5696 18 12 18C12.4304 18 12.8126 17.7246 12.9487 17.3162L13.1325 16.7649C13.232 16.4663 13.4663 16.232 13.7649 16.1325L14.3162 15.9487C14.7246 15.8126 15 15.4304 15 15C15 14.5696 14.7246 14.1874 14.3162 14.0513L13.7649 13.8675C13.4663 13.768 13.232 13.5337 13.1325 13.2351L12.9487 12.6838Z",
        fill: "url(#paint2_linear_11402_36656)"
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime113.jsxs)("defs", { children: [
      /* @__PURE__ */ (0, import_jsx_runtime113.jsxs)(
        "linearGradient",
        {
          id: "paint0_linear_11402_36656",
          x1: "9",
          y1: "0",
          x2: "9",
          y2: "18",
          gradientUnits: "userSpaceOnUse",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime113.jsx)("stop", { stopColor: "#E543FF" }),
            /* @__PURE__ */ (0, import_jsx_runtime113.jsx)("stop", { offset: "1", stopColor: "#286399" })
          ]
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime113.jsxs)(
        "linearGradient",
        {
          id: "paint1_linear_11402_36656",
          x1: "9",
          y1: "0",
          x2: "9",
          y2: "18",
          gradientUnits: "userSpaceOnUse",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime113.jsx)("stop", { stopColor: "#E543FF" }),
            /* @__PURE__ */ (0, import_jsx_runtime113.jsx)("stop", { offset: "1", stopColor: "#286399" })
          ]
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime113.jsxs)(
        "linearGradient",
        {
          id: "paint2_linear_11402_36656",
          x1: "9",
          y1: "0",
          x2: "9",
          y2: "18",
          gradientUnits: "userSpaceOnUse",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime113.jsx)("stop", { stopColor: "#E543FF" }),
            /* @__PURE__ */ (0, import_jsx_runtime113.jsx)("stop", { offset: "1", stopColor: "#286399" })
          ]
        }
      )
    ] })
  ] });
}

// app/v3/humanToCron.server.ts
var import_openai2 = __toESM(require("openai")), import_zod85 = require("zod");
var HumanToCronResult = import_zod85.z.object({
  isValid: import_zod85.z.boolean(),
  cron: import_zod85.z.string().optional(),
  error: import_zod85.z.string().optional()
}), humanToCronSupported = typeof env2.OPENAI_API_KEY == "string";
async function humanToCron(message, userId) {
  if (!humanToCronSupported)
    return {
      isValid: !1,
      error: "OpenAI API key is not set"
    };
  let completion = await new import_openai2.default({ apiKey: env2.OPENAI_API_KEY }).chat.completions.create({
    model: "gpt-3.5-turbo-1106",
    user: userId,
    messages: [
      {
        role: "system",
        content: `You are a helpful assistant who will turn nautral language into a valid CRON expresion. 
          
          The version of CRON that we use is an extension of the minimal.

*    *    *    *    *
\u252C    \u252C    \u252C    \u252C    \u252C
\u2502    \u2502    \u2502    \u2502    |
\u2502    \u2502    \u2502    \u2502    \u2514 day of week (0 - 7, 1L - 7L) (0 or 7 is Sun)
\u2502    \u2502    \u2502    \u2514\u2500\u2500\u2500\u2500\u2500 month (1 - 12)
\u2502    \u2502    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 day of month (1 - 31, L)
\u2502    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 hour (0 - 23)
\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 minute (0 - 59)

Supports mixed use of ranges and range increments (W character not supported currently). See tests for examples.

          Return JSON in one of these formats, putting in the correct data where you see <THE CRON EXPRESSION> and <ERROR MESSAGE DESCRIBING WHY IT'S NOT VALID>:
        1. If it's valid: { "isValid": true, "cron": "<THE CRON EXPRESSION>" }
        2. If it's not possible to make a valid CRON expression: { "isValid": false, "error": "<ERROR MESSAGE DESCRIBING WHY IT'S NOT VALID>"}`
      },
      {
        role: "user",
        content: `What is a valid CRON expression for this: ${message}`
      }
    ],
    response_format: { type: "json_object" }
  });
  if (!completion.choices[0]?.message.content)
    return {
      isValid: !1,
      error: "No response from OpenAI"
    };
  logger.debug("OpenAI response", {
    completion
  });
  let jsonResponse = safeJsonParse3(completion.choices[0].message.content);
  if (!jsonResponse)
    return {
      isValid: !1,
      error: "Invalid response from OpenAI"
    };
  let parsedResponse = HumanToCronResult.safeParse(jsonResponse);
  return parsedResponse.success ? parsedResponse.data : {
    isValid: !1,
    error: `Invalid response from OpenAI: ${parsedResponse.error.message}`
  };
}

// app/routes/resources.orgs.$organizationSlug.projects.$projectParam.schedules.new.natural-language.tsx
var import_jsx_runtime114 = require("react/jsx-runtime"), schema4 = import_zod86.z.object({
  message: import_zod86.z.string()
}), action4 = async ({ request }) => {
  let userId = await requireUserId(request);
  if (!env2.OPENAI_API_KEY)
    return (0, import_server_runtime6.json)(
      {
        isValid: !1,
        error: "OpenAI API key is not set",
        cron: void 0
      },
      { status: 400 }
    );
  let data2 = await request.json(), submission = schema4.safeParse(data2);
  if (!submission.success)
    return (0, import_server_runtime6.json)(
      {
        isValid: !1,
        error: "Invalid input",
        cron: void 0
      },
      { status: 400 }
    );
  let result = await humanToCron(submission.data.message, userId);
  return (0, import_server_runtime6.json)(result);
};
function AIGeneratedCronField({ onSuccess }) {
  let fetcher = (0, import_react73.useFetcher)(), [text, setText] = (0, import_react74.useState)(""), organization = useOrganization(), project = useProject(), isLoading2 = fetcher.state !== "idle", resultData = fetcher.data;
  (0, import_react74.useEffect)(() => {
    resultData?.cron !== void 0 && onSuccess(resultData.cron);
  }, [resultData?.cron]);
  let submit = (0, import_react74.useCallback)(async (value) => {
    fetcher.submit(
      { message: value },
      {
        method: "POST",
        action: `/resources/orgs/${organization.slug}/projects/${project.slug}/schedules/new/natural-language`,
        encType: "application/json"
      }
    );
  }, []);
  return /* @__PURE__ */ (0, import_jsx_runtime114.jsxs)("div", { children: [
    /* @__PURE__ */ (0, import_jsx_runtime114.jsxs)(Label, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime114.jsx)(AISparkleIcon, { className: "inline-block h-4 w-4" }),
      " Describe your schedule using natural language"
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime114.jsx)(
      "div",
      {
        className: "rounded-sm p-px",
        style: { background: "linear-gradient(to bottom right, #E543FF, #286399)" },
        children: /* @__PURE__ */ (0, import_jsx_runtime114.jsxs)("div", { className: "rounded-[calc(0.5rem-2px)] bg-background-bright", children: [
          /* @__PURE__ */ (0, import_jsx_runtime114.jsx)(
            "textarea",
            {
              value: text,
              placeholder: "e.g. the last Friday of the month at 6am",
              onChange: (e) => setText(e.target.value),
              rows: 3,
              className: "m-0 w-full border-0 bg-background-bright px-3 py-2 text-sm text-text-bright scrollbar-thin scrollbar-track-transparent scrollbar-thumb-charcoal-600 file:border-0 file:bg-transparent file:text-base file:font-medium focus:border-0 focus:outline-none focus:ring-0 focus-visible:outline-none focus-visible:ring-0 focus-visible:ring-offset-0 disabled:cursor-not-allowed disabled:opacity-50"
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime114.jsx)("div", { className: "flex justify-end gap-2 px-2 pb-2", children: /* @__PURE__ */ (0, import_jsx_runtime114.jsx)(
            Button,
            {
              type: "button",
              variant: "tertiary/small",
              disabled: isLoading2,
              LeadingIcon: isLoading2 ? "spinner" : AISparkleIcon,
              onClick: () => submit(text),
              children: isLoading2 ? "Generating" : "Generate"
            }
          ) })
        ] })
      }
    ),
    resultData?.isValid === !1 ? /* @__PURE__ */ (0, import_jsx_runtime114.jsx)(FormError, { className: "mt-2", children: resultData.error }) : null
  ] });
}

// app/routes/_app.orgs.$organizationSlug.projects.$projectParam.http-endpoints.$httpEndpointParam/route.tsx
var route_exports24 = {};
__export(route_exports24, {
  default: () => Page14,
  loader: () => loader21
});
var import_solid41 = require("@heroicons/react/20/solid"), import_outline4 = require("@heroicons/react/24/outline"), import_remix_typedjson26 = require("remix-typedjson");

// app/components/helpContent/HelpContentText.tsx
var import_react75 = require("@remix-run/react");

// app/components/primitives/ClientTabs.tsx
var React10 = __toESM(require("react")), TabsPrimitive = __toESM(require("@radix-ui/react-tabs"));
var import_framer_motion7 = require("framer-motion"), import_jsx_runtime115 = require("react/jsx-runtime"), ClientTabs = TabsPrimitive.Root, ClientTabsList = React10.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime115.jsx)(
  TabsPrimitive.List,
  {
    ref,
    className: cn("inline-flex items-center justify-center transition duration-100", className),
    ...props
  }
));
ClientTabsList.displayName = TabsPrimitive.List.displayName;
var ClientTabsTrigger = React10.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime115.jsx)(
  TabsPrimitive.Trigger,
  {
    ref,
    className: cn(
      "ring-offset-background focus-visible:ring-ring inline-flex items-center justify-center whitespace-nowrap border-r border-charcoal-700 px-2 text-sm transition-all first:pl-0 last:border-none data-[state=active]:text-indigo-500 data-[state=inactive]:text-text-dimmed data-[state=inactive]:hover:text-text-bright focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50",
      className
    ),
    ...props
  }
));
ClientTabsTrigger.displayName = TabsPrimitive.Trigger.displayName;
var ClientTabsContent = React10.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime115.jsx)(
  TabsPrimitive.Content,
  {
    ref,
    className: cn(
      "ring-offset-background focus-visible:ring-ring mt-1 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-offset-2",
      className
    ),
    ...props
  }
));
ClientTabsContent.displayName = TabsPrimitive.Content.displayName;
function ClientTabsWithUnderline({ className, tabs, currentValue, layoutId }) {
  return /* @__PURE__ */ (0, import_jsx_runtime115.jsx)(
    TabsPrimitive.List,
    {
      className: cn("flex flex-row gap-x-6 border-b border-charcoal-700", className),
      children: tabs.map((tab, index) => {
        let isActive = currentValue === tab.value;
        return /* @__PURE__ */ (0, import_jsx_runtime115.jsxs)(
          TabsPrimitive.Trigger,
          {
            value: tab.value,
            className: cn("group flex flex-col items-center", className),
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime115.jsx)(
                "span",
                {
                  className: cn(
                    "text-sm transition duration-200",
                    isActive ? "text-indigo-500" : "text-charcoal-200"
                  ),
                  children: tab.label
                }
              ),
              isActive ? /* @__PURE__ */ (0, import_jsx_runtime115.jsx)(import_framer_motion7.motion.div, { layoutId, className: "mt-1 h-0.5 w-full bg-indigo-500" }) : /* @__PURE__ */ (0, import_jsx_runtime115.jsx)("div", { className: "mt-1 h-0.5 w-full bg-charcoal-500 opacity-0 transition duration-200 group-hover:opacity-100" })
            ]
          },
          tab.value
        );
      })
    }
  );
}

// app/components/integrations/HelpInstall.tsx
var import_jsx_runtime116 = require("react/jsx-runtime");
function HelpInstall({ packageName }) {
  return /* @__PURE__ */ (0, import_jsx_runtime116.jsx)(import_jsx_runtime116.Fragment, { children: /* @__PURE__ */ (0, import_jsx_runtime116.jsxs)(ClientTabs, { defaultValue: "npm", children: [
    /* @__PURE__ */ (0, import_jsx_runtime116.jsxs)(ClientTabsList, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime116.jsx)(ClientTabsTrigger, { value: "npm", children: "npm" }),
      /* @__PURE__ */ (0, import_jsx_runtime116.jsx)(ClientTabsTrigger, { value: "pnpm", children: "pnpm" }),
      /* @__PURE__ */ (0, import_jsx_runtime116.jsx)(ClientTabsTrigger, { value: "yarn", children: "yarn" })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime116.jsx)(ClientTabsContent, { value: "npm", children: /* @__PURE__ */ (0, import_jsx_runtime116.jsx)(
      ClipboardField,
      {
        variant: "secondary/medium",
        value: `npm install ${packageName}`,
        className: "mb-4"
      }
    ) }),
    /* @__PURE__ */ (0, import_jsx_runtime116.jsx)(ClientTabsContent, { value: "pnpm", children: /* @__PURE__ */ (0, import_jsx_runtime116.jsx)(
      ClipboardField,
      {
        variant: "secondary/medium",
        value: `pnpm add ${packageName}`,
        className: "mb-4"
      }
    ) }),
    /* @__PURE__ */ (0, import_jsx_runtime116.jsx)(ClientTabsContent, { value: "yarn", children: /* @__PURE__ */ (0, import_jsx_runtime116.jsx)(
      ClipboardField,
      {
        variant: "secondary/medium",
        value: `yarn add ${packageName}`,
        className: "mb-4"
      }
    ) })
  ] }) });
}

// app/components/integrations/HelpSamples.tsx
var import_jsx_runtime117 = require("react/jsx-runtime");
function HelpSamples({ help: help2, integrationClient, integration }) {
  return /* @__PURE__ */ (0, import_jsx_runtime117.jsx)(import_jsx_runtime117.Fragment, { children: help2 && help2.samples.map((sample, i) => {
    let code = runReplacers(sample.code, integrationClient, integration);
    return /* @__PURE__ */ (0, import_jsx_runtime117.jsxs)("div", { children: [
      /* @__PURE__ */ (0, import_jsx_runtime117.jsx)(Paragraph, { spacing: !0, children: sample.title }),
      /* @__PURE__ */ (0, import_jsx_runtime117.jsx)(CodeBlock3, { code, className: "mb-4", highlightedRanges: sample.highlight })
    ] }, i);
  }) });
}
var replacements2 = [
  {
    match: /__SLUG__/g,
    replacement: (data2, integration) => data2 ? data2.slug : integration.identifier
  }
];
function runReplacers(code, replacementData, integration) {
  return replacements2.forEach((r) => {
    code = code.replace(r.match, r.replacement(replacementData, integration));
  }), code;
}

// app/components/helpContent/integration-button.png
var integration_button_default = "/build/_assets/integration-button-7KVPTTHG.png";

// app/hooks/useAppOrigin.ts
var import_remix_typedjson25 = require("remix-typedjson");
function useAppOrigin() {
  return (0, import_remix_typedjson25.useTypedRouteLoaderData)("root").appOrigin;
}

// app/components/SetupCommands.tsx
var import_jsx_runtime118 = require("react/jsx-runtime");
function InitCommand({ appOrigin, apiKey }) {
  return /* @__PURE__ */ (0, import_jsx_runtime118.jsxs)(ClientTabs, { defaultValue: "npm", children: [
    /* @__PURE__ */ (0, import_jsx_runtime118.jsxs)(ClientTabsList, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime118.jsx)(ClientTabsTrigger, { value: "npm", children: "npm" }),
      /* @__PURE__ */ (0, import_jsx_runtime118.jsx)(ClientTabsTrigger, { value: "pnpm", children: "pnpm" }),
      /* @__PURE__ */ (0, import_jsx_runtime118.jsx)(ClientTabsTrigger, { value: "yarn", children: "yarn" })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime118.jsx)(ClientTabsContent, { value: "npm", children: /* @__PURE__ */ (0, import_jsx_runtime118.jsx)(
      ClipboardField,
      {
        variant: "primary/medium",
        className: "mb-4",
        secure: `npx @trigger.dev/cli@latest init -k \u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022 -t ${appOrigin}`,
        value: `npx @trigger.dev/cli@latest init -k ${apiKey} -t ${appOrigin}`
      }
    ) }),
    /* @__PURE__ */ (0, import_jsx_runtime118.jsx)(ClientTabsContent, { value: "pnpm", children: /* @__PURE__ */ (0, import_jsx_runtime118.jsx)(
      ClipboardField,
      {
        variant: "primary/medium",
        className: "mb-4",
        secure: `pnpm dlx @trigger.dev/cli@latest init -k \u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022 -t ${appOrigin}`,
        value: `pnpm dlx @trigger.dev/cli@latest init -k ${apiKey} -t ${appOrigin}`
      }
    ) }),
    /* @__PURE__ */ (0, import_jsx_runtime118.jsx)(ClientTabsContent, { value: "yarn", children: /* @__PURE__ */ (0, import_jsx_runtime118.jsx)(
      ClipboardField,
      {
        variant: "primary/medium",
        className: "mb-4",
        secure: `yarn dlx @trigger.dev/cli@latest init -k \u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022 -t ${appOrigin}`,
        value: `yarn dlx @trigger.dev/cli@latest init -k ${apiKey} -t ${appOrigin}`
      }
    ) })
  ] });
}
function RunDevCommand({ extra }) {
  return /* @__PURE__ */ (0, import_jsx_runtime118.jsxs)(ClientTabs, { defaultValue: "npm", children: [
    /* @__PURE__ */ (0, import_jsx_runtime118.jsxs)(ClientTabsList, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime118.jsx)(ClientTabsTrigger, { value: "npm", children: "npm" }),
      /* @__PURE__ */ (0, import_jsx_runtime118.jsx)(ClientTabsTrigger, { value: "pnpm", children: "pnpm" }),
      /* @__PURE__ */ (0, import_jsx_runtime118.jsx)(ClientTabsTrigger, { value: "yarn", children: "yarn" })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime118.jsx)(ClientTabsContent, { value: "npm", children: /* @__PURE__ */ (0, import_jsx_runtime118.jsx)(
      ClipboardField,
      {
        variant: "primary/medium",
        className: "mb-4",
        value: `npm run dev${extra ? ` ${extra}` : ""}`
      }
    ) }),
    /* @__PURE__ */ (0, import_jsx_runtime118.jsx)(ClientTabsContent, { value: "pnpm", children: /* @__PURE__ */ (0, import_jsx_runtime118.jsx)(
      ClipboardField,
      {
        variant: "primary/medium",
        className: "mb-4",
        value: `pnpm run dev${extra ? ` ${extra}` : ""}`
      }
    ) }),
    /* @__PURE__ */ (0, import_jsx_runtime118.jsx)(ClientTabsContent, { value: "yarn", children: /* @__PURE__ */ (0, import_jsx_runtime118.jsx)(
      ClipboardField,
      {
        variant: "primary/medium",
        className: "mb-4",
        value: `yarn run dev${extra ? ` ${extra}` : ""}`
      }
    ) })
  ] });
}
function TriggerDevCommand({ extra }) {
  return /* @__PURE__ */ (0, import_jsx_runtime118.jsxs)(ClientTabs, { defaultValue: "npm", children: [
    /* @__PURE__ */ (0, import_jsx_runtime118.jsxs)(ClientTabsList, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime118.jsx)(ClientTabsTrigger, { value: "npm", children: "npm" }),
      /* @__PURE__ */ (0, import_jsx_runtime118.jsx)(ClientTabsTrigger, { value: "pnpm", children: "pnpm" }),
      /* @__PURE__ */ (0, import_jsx_runtime118.jsx)(ClientTabsTrigger, { value: "yarn", children: "yarn" })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime118.jsx)(ClientTabsContent, { value: "npm", children: /* @__PURE__ */ (0, import_jsx_runtime118.jsx)(
      ClipboardField,
      {
        variant: "primary/medium",
        className: "mb-4",
        value: `npx @trigger.dev/cli@latest dev${extra ? ` ${extra}` : ""}`
      }
    ) }),
    /* @__PURE__ */ (0, import_jsx_runtime118.jsx)(ClientTabsContent, { value: "pnpm", children: /* @__PURE__ */ (0, import_jsx_runtime118.jsx)(
      ClipboardField,
      {
        variant: "primary/medium",
        className: "mb-4",
        value: `pnpm dlx @trigger.dev/cli@latest dev${extra ? ` ${extra}` : ""}`
      }
    ) }),
    /* @__PURE__ */ (0, import_jsx_runtime118.jsx)(ClientTabsContent, { value: "yarn", children: /* @__PURE__ */ (0, import_jsx_runtime118.jsx)(
      ClipboardField,
      {
        variant: "primary/medium",
        className: "mb-4",
        value: `yarn dlx @trigger.dev/cli@latest dev${extra ? ` ${extra}` : ""}`
      }
    ) })
  ] });
}
function TriggerDevStep({ extra }) {
  return /* @__PURE__ */ (0, import_jsx_runtime118.jsxs)(import_jsx_runtime118.Fragment, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime118.jsxs)(Paragraph, { spacing: !0, children: [
      "In a ",
      /* @__PURE__ */ (0, import_jsx_runtime118.jsx)("span", { className: "text-amber-400", children: "separate terminal window or tab" }),
      " run:"
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime118.jsx)(TriggerDevCommand, { extra }),
    /* @__PURE__ */ (0, import_jsx_runtime118.jsxs)(Paragraph, { spacing: !0, variant: "small", children: [
      "If you\u2019re not running on the default you can specify the port by adding",
      " ",
      /* @__PURE__ */ (0, import_jsx_runtime118.jsx)(InlineCode, { variant: "extra-small", children: "--port 3001" }),
      " to the end."
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime118.jsxs)(Paragraph, { spacing: !0, variant: "small", children: [
      "You should leave the ",
      /* @__PURE__ */ (0, import_jsx_runtime118.jsx)(InlineCode, { variant: "extra-small", children: "dev" }),
      " command running when you're developing."
    ] })
  ] });
}
var v3PackageTag = "beta";
function getApiUrlArg() {
  let appOrigin = useAppOrigin(), apiUrl;
  switch (appOrigin) {
    case "https://cloud.trigger.dev":
      break;
    case "https://test-cloud.trigger.dev":
      apiUrl = "https://test-api.trigger.dev";
      break;
    case "https://internal.trigger.dev":
      apiUrl = "https://internal-api.trigger.dev";
      break;
    default:
      apiUrl = appOrigin;
      break;
  }
  return apiUrl ? `-a ${apiUrl}` : void 0;
}
function InitCommandV3() {
  let projectRef = useProject().ref, apiUrlArg = getApiUrlArg(), initCommand = [`trigger.dev@${v3PackageTag}`, "init", `-p ${projectRef}`, apiUrlArg].filter(Boolean).join(" ");
  return /* @__PURE__ */ (0, import_jsx_runtime118.jsxs)(ClientTabs, { defaultValue: "npm", children: [
    /* @__PURE__ */ (0, import_jsx_runtime118.jsxs)(ClientTabsList, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime118.jsx)(ClientTabsTrigger, { value: "npm", children: "npm" }),
      /* @__PURE__ */ (0, import_jsx_runtime118.jsx)(ClientTabsTrigger, { value: "pnpm", children: "pnpm" }),
      /* @__PURE__ */ (0, import_jsx_runtime118.jsx)(ClientTabsTrigger, { value: "yarn", children: "yarn" })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime118.jsx)(ClientTabsContent, { value: "npm", children: /* @__PURE__ */ (0, import_jsx_runtime118.jsx)(
      ClipboardField,
      {
        variant: "primary/medium",
        iconButton: !0,
        className: "mb-4",
        value: `npx ${initCommand}`
      }
    ) }),
    /* @__PURE__ */ (0, import_jsx_runtime118.jsx)(ClientTabsContent, { value: "pnpm", children: /* @__PURE__ */ (0, import_jsx_runtime118.jsx)(
      ClipboardField,
      {
        variant: "primary/medium",
        iconButton: !0,
        className: "mb-4",
        value: `pnpm dlx ${initCommand}`
      }
    ) }),
    /* @__PURE__ */ (0, import_jsx_runtime118.jsx)(ClientTabsContent, { value: "yarn", children: /* @__PURE__ */ (0, import_jsx_runtime118.jsx)(
      ClipboardField,
      {
        variant: "primary/medium",
        iconButton: !0,
        className: "mb-4",
        value: `yarn dlx ${initCommand}`
      }
    ) })
  ] });
}
function TriggerDevStepV3() {
  return /* @__PURE__ */ (0, import_jsx_runtime118.jsxs)(ClientTabs, { defaultValue: "npm", children: [
    /* @__PURE__ */ (0, import_jsx_runtime118.jsxs)(ClientTabsList, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime118.jsx)(ClientTabsTrigger, { value: "npm", children: "npm" }),
      /* @__PURE__ */ (0, import_jsx_runtime118.jsx)(ClientTabsTrigger, { value: "pnpm", children: "pnpm" }),
      /* @__PURE__ */ (0, import_jsx_runtime118.jsx)(ClientTabsTrigger, { value: "yarn", children: "yarn" })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime118.jsx)(ClientTabsContent, { value: "npm", children: /* @__PURE__ */ (0, import_jsx_runtime118.jsx)(
      ClipboardField,
      {
        variant: "primary/medium",
        iconButton: !0,
        className: "mb-4",
        value: `npx trigger.dev@${v3PackageTag} dev`
      }
    ) }),
    /* @__PURE__ */ (0, import_jsx_runtime118.jsx)(ClientTabsContent, { value: "pnpm", children: /* @__PURE__ */ (0, import_jsx_runtime118.jsx)(
      ClipboardField,
      {
        variant: "primary/medium",
        iconButton: !0,
        className: "mb-4",
        value: `pnpm dlx trigger.dev@${v3PackageTag} dev`
      }
    ) }),
    /* @__PURE__ */ (0, import_jsx_runtime118.jsx)(ClientTabsContent, { value: "yarn", children: /* @__PURE__ */ (0, import_jsx_runtime118.jsx)(
      ClipboardField,
      {
        variant: "primary/medium",
        iconButton: !0,
        className: "mb-4",
        value: `yarn dlx trigger.dev@${v3PackageTag} dev`
      }
    ) })
  ] });
}
function TriggerLoginStepV3() {
  return /* @__PURE__ */ (0, import_jsx_runtime118.jsxs)(ClientTabs, { defaultValue: "npm", children: [
    /* @__PURE__ */ (0, import_jsx_runtime118.jsxs)(ClientTabsList, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime118.jsx)(ClientTabsTrigger, { value: "npm", children: "npm" }),
      /* @__PURE__ */ (0, import_jsx_runtime118.jsx)(ClientTabsTrigger, { value: "pnpm", children: "pnpm" }),
      /* @__PURE__ */ (0, import_jsx_runtime118.jsx)(ClientTabsTrigger, { value: "yarn", children: "yarn" })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime118.jsx)(ClientTabsContent, { value: "npm", children: /* @__PURE__ */ (0, import_jsx_runtime118.jsx)(
      ClipboardField,
      {
        variant: "primary/medium",
        iconButton: !0,
        className: "mb-4",
        value: `npx trigger.dev@${v3PackageTag} login`
      }
    ) }),
    /* @__PURE__ */ (0, import_jsx_runtime118.jsx)(ClientTabsContent, { value: "pnpm", children: /* @__PURE__ */ (0, import_jsx_runtime118.jsx)(
      ClipboardField,
      {
        variant: "primary/medium",
        iconButton: !0,
        className: "mb-4",
        value: `pnpm dlx trigger.dev@${v3PackageTag} login`
      }
    ) }),
    /* @__PURE__ */ (0, import_jsx_runtime118.jsx)(ClientTabsContent, { value: "yarn", children: /* @__PURE__ */ (0, import_jsx_runtime118.jsx)(
      ClipboardField,
      {
        variant: "primary/medium",
        iconButton: !0,
        className: "mb-4",
        value: `yarn dlx trigger.dev@${v3PackageTag} login`
      }
    ) })
  ] });
}

// app/assets/icons/IntegrationIcon.tsx
var import_jsx_runtime119 = require("react/jsx-runtime");
function IntegrationIcon() {
  return /* @__PURE__ */ (0, import_jsx_runtime119.jsx)(LogoIcon, { className: "h-3.5 w-3.5 flex-none pb-0.5" });
}

// app/components/helpContent/HelpContentText.tsx
var import_solid40 = require("@heroicons/react/20/solid"), import_jsx_runtime120 = require("react/jsx-runtime");
function HowToRunYourJob() {
  let organization = useOrganization(), project = useProject(), job = useJob();
  return /* @__PURE__ */ (0, import_jsx_runtime120.jsxs)(import_jsx_runtime120.Fragment, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime120.jsx)(Paragraph, { spacing: !0, children: "There are two ways to run your Job:" }),
    /* @__PURE__ */ (0, import_jsx_runtime120.jsx)(StepNumber, { stepNumber: "1", title: "Trigger a test Run" }),
    /* @__PURE__ */ (0, import_jsx_runtime120.jsxs)(StepContentContainer, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime120.jsx)(Paragraph, { spacing: !0, children: "You can perform a Run with any payload you want, or use one of our examples, on the test page." }),
      /* @__PURE__ */ (0, import_jsx_runtime120.jsx)(
        LinkButton,
        {
          to: jobTestPath(organization, project, job),
          variant: "primary/small",
          LeadingIcon: "beaker",
          leadingIconClassName: "text-text-bright",
          children: "Test"
        }
      )
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime120.jsx)(StepNumber, { stepNumber: "2", title: "Trigger your Job for real" }),
    /* @__PURE__ */ (0, import_jsx_runtime120.jsxs)(StepContentContainer, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime120.jsx)(Paragraph, { spacing: !0, children: "Performing a real run depends on the type of Trigger your Job is using." }),
      /* @__PURE__ */ (0, import_jsx_runtime120.jsx)(
        LinkButton,
        {
          to: "https://trigger.dev/docs/documentation/guides/running-jobs",
          variant: "tertiary/small",
          LeadingIcon: import_solid40.BookOpenIcon,
          leadingIconClassName: "text-text-bright",
          children: "How to run a Job"
        }
      )
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime120.jsx)(Callout, { variant: "info", children: /* @__PURE__ */ (0, import_jsx_runtime120.jsxs)(Paragraph, { variant: "small", className: variantClasses2.info.textColor, children: [
      "Scheduled Triggers ",
      /* @__PURE__ */ (0, import_jsx_runtime120.jsx)("strong", { children: "do not" }),
      " trigger Jobs in the DEV Environment. When developing locally you should use the",
      " ",
      /* @__PURE__ */ (0, import_jsx_runtime120.jsx)(
        import_react75.Link,
        {
          to: jobTestPath(organization, project, job),
          className: "underline underline-offset-2 transition hover:text-blue-100",
          children: "Test feature"
        }
      ),
      " ",
      "to trigger any scheduled Jobs."
    ] }) })
  ] });
}
function HowToConnectAnIntegration() {
  return /* @__PURE__ */ (0, import_jsx_runtime120.jsxs)(import_jsx_runtime120.Fragment, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime120.jsx)(StepNumber, { stepNumber: "1", title: "Select an API from the list" }),
    /* @__PURE__ */ (0, import_jsx_runtime120.jsxs)(StepContentContainer, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime120.jsxs)(Paragraph, { children: [
        "APIs marked with a",
        /* @__PURE__ */ (0, import_jsx_runtime120.jsx)("span", { className: "mx-2 -mt-1 inline-flex", "aria-label": "Trigger.dev Integration icon", children: /* @__PURE__ */ (0, import_jsx_runtime120.jsx)(IntegrationIcon, {}) }),
        "are Trigger.dev Integrations. These Integrations make connecting to the API easier by offering OAuth or API key authentication. All APIs can also be used with fetch or an SDK."
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime120.jsx)("img", { src: integration_button_default, className: "mt-2 h-10" })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime120.jsx)(StepNumber, { stepNumber: "2", title: "Choose how you want to connect" }),
    /* @__PURE__ */ (0, import_jsx_runtime120.jsx)(StepContentContainer, { children: /* @__PURE__ */ (0, import_jsx_runtime120.jsx)(Paragraph, { children: 'Follow the instructions for your chosen connection method in the popover form. If no Integration exists yet, you can request one by clicking the "I want an Integration" button.' }) }),
    /* @__PURE__ */ (0, import_jsx_runtime120.jsx)(StepNumber, { stepNumber: "3", title: "Your connection will appear in the list" }),
    /* @__PURE__ */ (0, import_jsx_runtime120.jsx)(StepContentContainer, { children: /* @__PURE__ */ (0, import_jsx_runtime120.jsx)(Paragraph, { children: "Once you've connected your API, it will appear in the list of Integrations below. You can view details and manage your connection by selecting it from the table." }) }),
    /* @__PURE__ */ (0, import_jsx_runtime120.jsx)(Callout, { variant: "docs", to: "https://trigger.dev/docs/integrations/introduction", children: "View the Integration docs page for more information on connecting an API using an Integration or other method." })
  ] });
}
function HowToUseThisIntegration({ integration, help: help2, integrationClient }) {
  return /* @__PURE__ */ (0, import_jsx_runtime120.jsxs)(import_jsx_runtime120.Fragment, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime120.jsx)(StepNumber, { stepNumber: "1", title: "Install the package" }),
    /* @__PURE__ */ (0, import_jsx_runtime120.jsx)(StepContentContainer, { children: /* @__PURE__ */ (0, import_jsx_runtime120.jsx)(HelpInstall, { packageName: integration.packageName }) }),
    help2 && /* @__PURE__ */ (0, import_jsx_runtime120.jsxs)(import_jsx_runtime120.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime120.jsx)(StepNumber, { stepNumber: "2", title: "Create a Job" }),
      /* @__PURE__ */ (0, import_jsx_runtime120.jsx)(StepContentContainer, { children: /* @__PURE__ */ (0, import_jsx_runtime120.jsx)(
        HelpSamples,
        {
          help: help2,
          integration,
          integrationClient
        }
      ) })
    ] })
  ] });
}
function HowToDisableAJob({
  id,
  name,
  version: version3
}) {
  return /* @__PURE__ */ (0, import_jsx_runtime120.jsxs)(import_jsx_runtime120.Fragment, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime120.jsxs)(Paragraph, { spacing: !0, children: [
      "To disable a job, you need to set the ",
      /* @__PURE__ */ (0, import_jsx_runtime120.jsx)(InlineCode, { children: "enabled" }),
      " property to",
      " ",
      /* @__PURE__ */ (0, import_jsx_runtime120.jsx)(InlineCode, { children: "false" }),
      "."
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime120.jsx)(
      StepNumber,
      {
        stepNumber: "1",
        title: /* @__PURE__ */ (0, import_jsx_runtime120.jsxs)(import_jsx_runtime120.Fragment, { children: [
          "Set ",
          /* @__PURE__ */ (0, import_jsx_runtime120.jsx)(InlineCode, { children: "enabled" }),
          " to ",
          /* @__PURE__ */ (0, import_jsx_runtime120.jsx)(InlineCode, { children: "false" })
        ] })
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime120.jsx)(StepContentContainer, { children: /* @__PURE__ */ (0, import_jsx_runtime120.jsx)(
      CodeBlock3,
      {
        showLineNumbers: !1,
        className: "mb-4",
        code: `client.defineJob({
  id: "${id}",
  name: "${name}",
  version: "${version3}",
  enabled: false,
  // ...rest of your Job definition
});`
      }
    ) }),
    /* @__PURE__ */ (0, import_jsx_runtime120.jsx)(
      StepNumber,
      {
        stepNumber: "2",
        title: /* @__PURE__ */ (0, import_jsx_runtime120.jsxs)(import_jsx_runtime120.Fragment, { children: [
          "Run the ",
          /* @__PURE__ */ (0, import_jsx_runtime120.jsx)(InlineCode, { children: "@trigger.dev/cli dev" }),
          " command"
        ] })
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime120.jsxs)(StepContentContainer, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime120.jsxs)(Paragraph, { spacing: !0, children: [
        "If you aren't already running the ",
        /* @__PURE__ */ (0, import_jsx_runtime120.jsx)(InlineCode, { children: "dev" }),
        " command, run it now."
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime120.jsx)(TriggerDevCommand, {})
    ] })
  ] });
}
function HowToUseApiKeysAndEndpoints() {
  return /* @__PURE__ */ (0, import_jsx_runtime120.jsxs)(import_jsx_runtime120.Fragment, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime120.jsx)(Paragraph, { spacing: !0, children: "Environments and Endpoints are used to connect your server to the Trigger.dev platform." }),
    /* @__PURE__ */ (0, import_jsx_runtime120.jsx)(Header2, { spacing: !0, children: "Environments" }),
    /* @__PURE__ */ (0, import_jsx_runtime120.jsx)(Paragraph, { spacing: !0, children: "Each environment has API Keys associated with it. The Server API Key is used to authenticate your Jobs with the Trigger.dev platform." }),
    /* @__PURE__ */ (0, import_jsx_runtime120.jsxs)(Paragraph, { spacing: !0, children: [
      "The Server API Key you use for your",
      " ",
      /* @__PURE__ */ (0, import_jsx_runtime120.jsx)(TextLink, { to: "https://trigger.dev/docs/documentation/concepts/client-adaptors", children: "Client" }),
      " ",
      "is how we know which environment to run your code against:"
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime120.jsx)(
      CodeBlock3,
      {
        showLineNumbers: !1,
        className: "mb-4",
        code: `export const client = new TriggerClient({
  id: "nextjs-example",
  //this environment variable should be set to your Server DEV API Key locally,
  //and your Server PROD API Key in production
  apiKey: process.env.TRIGGER_API_KEY!,
});`
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime120.jsx)(
      StepNumber,
      {
        stepNumber: "\u2192",
        title: /* @__PURE__ */ (0, import_jsx_runtime120.jsxs)("span", { className: "flex items-center gap-x-2", children: [
          /* @__PURE__ */ (0, import_jsx_runtime120.jsx)("span", { children: "Development" }),
          /* @__PURE__ */ (0, import_jsx_runtime120.jsx)(EnvironmentLabel, { environment: { type: "DEVELOPMENT" } })
        ] })
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime120.jsxs)(StepContentContainer, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime120.jsxs)(Paragraph, { children: [
        "The ",
        /* @__PURE__ */ (0, import_jsx_runtime120.jsx)(InlineCode, { children: "DEV" }),
        " environment should only be used for local development. It\u2019s where you can test your Jobs before deploying them to servers."
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime120.jsx)(Callout, { variant: "warning", className: "my-2", children: "Scheduled Triggers do not trigger Jobs in the DEV Environment. When you\u2019re working locally you should use the Test feature to trigger any scheduled Jobs." })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime120.jsx)(
      StepNumber,
      {
        stepNumber: "\u2192",
        title: /* @__PURE__ */ (0, import_jsx_runtime120.jsxs)("span", { className: "flex items-center gap-x-2", children: [
          /* @__PURE__ */ (0, import_jsx_runtime120.jsx)("span", { children: "Staging" }),
          /* @__PURE__ */ (0, import_jsx_runtime120.jsx)(EnvironmentLabel, { environment: { type: "STAGING" } })
        ] })
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime120.jsx)(StepContentContainer, { children: /* @__PURE__ */ (0, import_jsx_runtime120.jsxs)(Paragraph, { spacing: !0, children: [
      "The ",
      /* @__PURE__ */ (0, import_jsx_runtime120.jsx)(InlineCode, { children: "STAGING" }),
      " environment is where your Jobs will run in a staging environment, meant to mirror your production environment."
    ] }) }),
    /* @__PURE__ */ (0, import_jsx_runtime120.jsx)(
      StepNumber,
      {
        stepNumber: "\u2192",
        title: /* @__PURE__ */ (0, import_jsx_runtime120.jsxs)("span", { className: "flex items-center gap-x-2", children: [
          /* @__PURE__ */ (0, import_jsx_runtime120.jsx)("span", { children: "Production" }),
          /* @__PURE__ */ (0, import_jsx_runtime120.jsx)(EnvironmentLabel, { environment: { type: "PRODUCTION" } })
        ] })
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime120.jsx)(StepContentContainer, { children: /* @__PURE__ */ (0, import_jsx_runtime120.jsxs)(Paragraph, { spacing: !0, children: [
      "The ",
      /* @__PURE__ */ (0, import_jsx_runtime120.jsx)(InlineCode, { children: "PROD" }),
      " environment is where your Jobs will run in production. It\u2019s where you can run your Jobs against real data."
    ] }) }),
    /* @__PURE__ */ (0, import_jsx_runtime120.jsx)(Header2, { spacing: !0, children: "Endpoints" }),
    /* @__PURE__ */ (0, import_jsx_runtime120.jsx)(Paragraph, { spacing: !0, children: "An Endpoint is a URL on your server that Trigger.dev can connect to. This URL is used to register Jobs, start them and orchestrate runs and retries." }),
    /* @__PURE__ */ (0, import_jsx_runtime120.jsxs)(Paragraph, { spacing: !0, children: [
      /* @__PURE__ */ (0, import_jsx_runtime120.jsx)(InlineCode, { children: "DEV" }),
      " has multiple endpoints associated with it \u2013 one for each team member. This allows each team member to run their own Jobs, without interfering with each other."
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime120.jsx)(Paragraph, { spacing: !0, children: "All other environments have just a single endpoint (with a single URL) associated with them." }),
    /* @__PURE__ */ (0, import_jsx_runtime120.jsx)(Header2, { spacing: !0, children: "Deployment" }),
    /* @__PURE__ */ (0, import_jsx_runtime120.jsx)(Paragraph, { spacing: !0, children: "Deployment uses Environments and Endpoints to connect your Jobs to the Trigger.dev platform." }),
    /* @__PURE__ */ (0, import_jsx_runtime120.jsx)(Callout, { variant: "docs", to: "https://trigger.dev/docs/documentation/guides/deployment", children: "Read the deployment guide to learn more." })
  ] });
}
function WhatAreHttpEndpoints() {
  return /* @__PURE__ */ (0, import_jsx_runtime120.jsxs)(import_jsx_runtime120.Fragment, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime120.jsxs)(Paragraph, { spacing: !0, children: [
      "HTTP endpoints allow you to trigger your Jobs from any webhooks. They require a bit more work than using ",
      /* @__PURE__ */ (0, import_jsx_runtime120.jsx)(TextLink, { to: docsPath("integrations/introduction"), children: "Integrations" }),
      " ",
      "but allow you to connect to any API."
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime120.jsx)(Header2, { spacing: !0, children: "Getting started" }),
    /* @__PURE__ */ (0, import_jsx_runtime120.jsxs)(Paragraph, { spacing: !0, children: [
      "You need to define the HTTP endpoint in your code. To do this you use",
      " ",
      /* @__PURE__ */ (0, import_jsx_runtime120.jsx)(InlineCode, { children: "client.defineHttpEndpoint()" }),
      ". This will create an HTTP endpoint."
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime120.jsxs)(Paragraph, { spacing: !0, children: [
      "Then you can create a Trigger from this by calling ",
      /* @__PURE__ */ (0, import_jsx_runtime120.jsx)(InlineCode, { children: ".onRequest()" }),
      " on the created HTTP endpoint."
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime120.jsx)(Callout, { variant: "docs", to: docsPath("documentation/concepts/http-endpoints"), children: "Read the HTTP endpoints guide to learn more." }),
    /* @__PURE__ */ (0, import_jsx_runtime120.jsx)(Header2, { spacing: !0, className: "mt-4", children: "An example: cal.com" }),
    /* @__PURE__ */ (0, import_jsx_runtime120.jsx)(
      CodeBlock3,
      {
        code: `//create an HTTP endpoint
const caldotcom = client.defineHttpEndpoint({
  id: "cal.com",
  source: "cal.com",
  icon: "caldotcom",
  verify: async (request) => {
    //this helper function makes verifying most webhooks easy
    return await verifyRequestSignature({
      request,
      headerName: "X-Cal-Signature-256",
      secret: process.env.CALDOTCOM_SECRET!,
      algorithm: "sha256",
    });
  },
});

client.defineJob({
  id: "http-caldotcom",
  name: "HTTP Cal.com",
  version: "1.0.0",
  enabled: true,
  //create a Trigger from the HTTP endpoint above. The filter is optional.
  trigger: caldotcom.onRequest({ filter: { body: { triggerEvent: ["BOOKING_CANCELLED"] } } }),
  run: async (request, io, ctx) => {
    //note that when using HTTP endpoints, the first parameter is the request
    //you need to get the body, usually it will be json so you do:
    const body = await request.json();
    await io.logger.info("Body", body);
  },
});`
      }
    )
  ] });
}
function HowToConnectHttpEndpoint() {
  return /* @__PURE__ */ (0, import_jsx_runtime120.jsxs)(import_jsx_runtime120.Fragment, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime120.jsx)(Header2, { spacing: !0, children: "Setting up your webhook" }),
    /* @__PURE__ */ (0, import_jsx_runtime120.jsx)(Paragraph, { spacing: !0, children: "To start receiving data you need to enter the Endpoint URL and secret into the API service you want to receive webhooks from." }),
    /* @__PURE__ */ (0, import_jsx_runtime120.jsx)(StepNumber, { stepNumber: "1", title: /* @__PURE__ */ (0, import_jsx_runtime120.jsx)(import_jsx_runtime120.Fragment, { children: "Go to the relevant API dashboard" }) }),
    /* @__PURE__ */ (0, import_jsx_runtime120.jsx)(StepContentContainer, { children: /* @__PURE__ */ (0, import_jsx_runtime120.jsx)(Paragraph, { spacing: !0, children: "For example, if you want to receive webhooks from Cal.com then you should login to your Cal.com account and go to their Settings/Developer/Webhooks page." }) }),
    /* @__PURE__ */ (0, import_jsx_runtime120.jsx)(StepNumber, { stepNumber: "2", title: /* @__PURE__ */ (0, import_jsx_runtime120.jsx)(import_jsx_runtime120.Fragment, { children: "Copy the Webhook URL and Secret" }) }),
    /* @__PURE__ */ (0, import_jsx_runtime120.jsxs)(StepContentContainer, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime120.jsx)(Paragraph, { spacing: !0, children: "A unique Webhook URL is created for each environment (Dev, Staging, and Prod). Jobs will only be triggered from the relevant environment." }),
      /* @__PURE__ */ (0, import_jsx_runtime120.jsx)(Paragraph, { spacing: !0, children: "Copy the relevant Endpoint URL and secret from the table opposite and paste it into the correct place in the API dashboard you located in the previous step." })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime120.jsx)(StepNumber, { stepNumber: "3", title: /* @__PURE__ */ (0, import_jsx_runtime120.jsx)(import_jsx_runtime120.Fragment, { children: "Add the Secret to your Environment variables" }) }),
    /* @__PURE__ */ (0, import_jsx_runtime120.jsxs)(StepContentContainer, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime120.jsx)(Paragraph, { spacing: !0, children: "You should also add the Secret to the Environment variables in your code and where you're deploying. Usually in Node this means adding it to the .env file." }),
      /* @__PURE__ */ (0, import_jsx_runtime120.jsxs)(Paragraph, { spacing: !0, children: [
        "Use the secret in the ",
        /* @__PURE__ */ (0, import_jsx_runtime120.jsx)(InlineCode, { children: "verify()" }),
        " function of HTTP Endpoint. This ensures that someone can't just send a request to your Endpoint and trigger a Job. Different APIs do this verification in different ways \u2013 a common way is to have a header that has a hash of the payload and secret. Refer to the API's documentation for more information."
      ] })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime120.jsx)(Header2, { spacing: !0, children: "Triggering runs" }),
    /* @__PURE__ */ (0, import_jsx_runtime120.jsx)(StepNumber, { stepNumber: "1", title: "Ensure you're using the HTTP Endpoint in your code" }),
    /* @__PURE__ */ (0, import_jsx_runtime120.jsx)(StepContentContainer, { children: /* @__PURE__ */ (0, import_jsx_runtime120.jsxs)(Paragraph, { spacing: !0, children: [
      "In your code, you should use the ",
      /* @__PURE__ */ (0, import_jsx_runtime120.jsx)(InlineCode, { children: ".onRequest()" }),
      " function in a Job Trigger. You can filter so only data that matches your criteria triggers the Job."
    ] }) }),
    /* @__PURE__ */ (0, import_jsx_runtime120.jsx)(StepNumber, { stepNumber: "2", title: "Make sure your code is deployed (for Staging and Prod)" }),
    /* @__PURE__ */ (0, import_jsx_runtime120.jsx)(StepContentContainer, { children: /* @__PURE__ */ (0, import_jsx_runtime120.jsxs)(Paragraph, { spacing: !0, children: [
      "If you're using the Staging or Prod environment, you need to make sure your code is deployed. Deploy like you normally would \u2013",
      " ",
      /* @__PURE__ */ (0, import_jsx_runtime120.jsx)(TextLink, { to: docsPath("documentation/guides/deployment"), children: "read our deployment guide" }),
      "."
    ] }) }),
    /* @__PURE__ */ (0, import_jsx_runtime120.jsx)(StepNumber, { stepNumber: "3", title: "Perform an action that sends a webhook" }),
    /* @__PURE__ */ (0, import_jsx_runtime120.jsx)(StepContentContainer, { children: /* @__PURE__ */ (0, import_jsx_runtime120.jsx)(Paragraph, { spacing: !0, children: "Now you need to actually perform an action on that third-party service that triggers the webhook you've subscribed to. For example, add a new meeting using Cal.com." }) }),
    /* @__PURE__ */ (0, import_jsx_runtime120.jsx)(Callout, { variant: "docs", to: docsPath("documentation/concepts/http-endpoints"), children: "Read the HTTP endpoints guide to learn more." })
  ] });
}

// app/components/primitives/Help.tsx
var React11 = __toESM(require("react"));
var import_jsx_runtime121 = require("react/jsx-runtime"), HelpContext = React11.createContext({
  open: !1,
  setOpen: () => {
  },
  allowDismissing: !0
});
function useHelp() {
  return React11.useContext(HelpContext);
}
function Help({ defaultOpen, allowDismissing = !0, children }) {
  let [open, setOpen] = React11.useState(defaultOpen || !1);
  return /* @__PURE__ */ (0, import_jsx_runtime121.jsx)(HelpContext.Provider, { value: { open, setOpen, allowDismissing }, children: typeof children == "function" ? children(open) : children });
}
function HelpTrigger({ title: title2 }) {
  let { open, setOpen } = useHelp();
  return open ? /* @__PURE__ */ (0, import_jsx_runtime121.jsx)(import_jsx_runtime121.Fragment, {}) : /* @__PURE__ */ (0, import_jsx_runtime121.jsx)(
    Button,
    {
      variant: "minimal/small",
      LeadingIcon: "lightbulb",
      leadingIconClassName: "text-amber-400",
      onClick: () => setOpen(!0),
      children: title2
    }
  );
}
function HelpContent({
  title: title2,
  className,
  children
}) {
  let { open, setOpen, allowDismissing } = useHelp();
  return /* @__PURE__ */ (0, import_jsx_runtime121.jsx)(import_jsx_runtime121.Fragment, { children: open && /* @__PURE__ */ (0, import_jsx_runtime121.jsxs)("div", { className: cn("mb-4 flex grow flex-col gap-2", className), children: [
    /* @__PURE__ */ (0, import_jsx_runtime121.jsxs)("div", { className: "flex items-center justify-between pl-1", children: [
      /* @__PURE__ */ (0, import_jsx_runtime121.jsxs)("div", { className: "flex items-center gap-1", children: [
        /* @__PURE__ */ (0, import_jsx_runtime121.jsx)(NamedIcon, { name: "lightbulb", className: "h-4 w-4" }),
        /* @__PURE__ */ (0, import_jsx_runtime121.jsx)(Header2, { className: "m-0 p-0", children: title2 })
      ] }),
      allowDismissing && /* @__PURE__ */ (0, import_jsx_runtime121.jsx)(
        Button,
        {
          variant: "minimal/small",
          TrailingIcon: "close",
          trailingIconClassName: "text-charcoal-400",
          onClick: () => setOpen(!1),
          children: "Dismiss"
        }
      )
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime121.jsx)("div", { className: "grow rounded border border-charcoal-850 bg-background-bright/80 bg-contain bg-left-top bg-no-repeat p-6", children })
  ] }) });
}

// app/presenters/HttpEndpointPresenter.server.ts
var import_zod87 = require("zod");
var HttpEndpointPresenter = class {
  #prismaClient;
  constructor(prismaClient = prisma) {
    this.#prismaClient = prismaClient;
  }
  async call({
    userId,
    projectSlug,
    organizationSlug,
    httpEndpointKey
  }) {
    let httpEndpoint2 = await this.#prismaClient.triggerHttpEndpoint.findFirst({
      select: {
        id: !0,
        key: !0,
        icon: !0,
        title: !0,
        updatedAt: !0,
        projectId: !0,
        secretReference: {
          select: {
            key: !0,
            provider: !0
          }
        },
        httpEndpointEnvironments: {
          select: {
            id: !0,
            immediateResponseFilter: !0,
            skipTriggeringRuns: !0,
            source: !0,
            active: !0,
            updatedAt: !0,
            environment: {
              select: {
                type: !0,
                orgMember: {
                  select: {
                    userId: !0
                  }
                }
              }
            }
          }
        },
        webhook: {
          select: {
            id: !0,
            key: !0
          }
        }
      },
      where: {
        key: httpEndpointKey,
        project: {
          slug: projectSlug,
          organization: {
            members: {
              some: {
                userId
              }
            }
          }
        }
      }
    });
    if (!httpEndpoint2)
      throw new Error("Could not find http endpoint");
    let environments2 = await this.#prismaClient.runtimeEnvironment.findMany({
      select: {
        id: !0,
        type: !0,
        slug: !0,
        shortcode: !0,
        orgMember: {
          select: {
            userId: !0
          }
        }
      },
      where: {
        projectId: httpEndpoint2.projectId
      }
    }), relevantEnvironments = sortEnvironments(
      environments2.filter(
        (environment) => environment.orgMember === null || environment.orgMember.userId === userId
      ).map((environment) => ({
        ...environment,
        webhookUrl: httpEndpointUrl({ httpEndpointId: httpEndpoint2.id, environment })
      }))
    ), secretStore = getSecretStore(httpEndpoint2.secretReference.provider), secret2;
    try {
      secret2 = (await secretStore.getSecretOrThrow(
        import_zod87.z.object({ secret: import_zod87.z.string() }),
        httpEndpoint2.secretReference.key
      )).secret;
    } catch (e) {
      let error = e instanceof Error ? e.message : JSON.stringify(e);
      throw new Error(`Could not retrieve secret: ${error}`);
    }
    if (!secret2)
      throw new Error("Could not find secret");
    let httpEndpointEnvironments = httpEndpoint2.httpEndpointEnvironments.filter(
      (httpEndpointEnvironment) => httpEndpointEnvironment.environment.orgMember === null || httpEndpointEnvironment.environment.orgMember.userId === userId
    ).map((endpointEnv) => ({
      ...endpointEnv,
      immediateResponseFilter: endpointEnv.immediateResponseFilter != null,
      environment: {
        type: endpointEnv.environment.type
      },
      webhookUrl: relevantEnvironments.find((e) => e.type === endpointEnv.environment.type)?.webhookUrl
    })), projectRootPath = projectPath({ slug: organizationSlug }, { slug: projectSlug });
    return {
      httpEndpoint: {
        ...httpEndpoint2,
        httpEndpointEnvironments,
        webhookLink: httpEndpoint2.webhook ? `${projectRootPath}/triggers/webhooks/${httpEndpoint2.webhook.id}` : void 0
      },
      environments: relevantEnvironments,
      unconfiguredEnvironments: relevantEnvironments.filter(
        (e) => httpEndpointEnvironments.find((h) => h.environment.type === e.type) === void 0
      ),
      secret: secret2
    };
  }
};

// app/routes/_app.orgs.$organizationSlug.projects.$projectParam.http-endpoints.$httpEndpointParam/route.tsx
var import_jsx_runtime122 = require("react/jsx-runtime"), loader21 = async ({ request, params }) => {
  let userId = await requireUserId(request), { projectParam: projectParam2, organizationSlug, httpEndpointParam } = HttpEndpointParamSchema.parse(params), presenter = new HttpEndpointPresenter();
  try {
    let result = await presenter.call({
      userId,
      projectSlug: projectParam2,
      organizationSlug,
      httpEndpointKey: httpEndpointParam
    });
    if (!result)
      throw new Response("Not Found", { status: 404 });
    return (0, import_remix_typedjson26.typedjson)(result);
  } catch (e) {
    throw console.log(e), new Response(e instanceof Error ? e.message : JSON.stringify(e), { status: 404 });
  }
};
function Page14() {
  let { httpEndpoint: httpEndpoint2, unconfiguredEnvironments, secret: secret2 } = (0, import_remix_typedjson26.useTypedLoaderData)(), organization = useOrganization(), project = useProject();
  return /* @__PURE__ */ (0, import_jsx_runtime122.jsxs)(PageContainer, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime122.jsxs)(NavBar, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime122.jsx)(
        PageTitle,
        {
          title: httpEndpoint2.title ?? httpEndpoint2.key,
          backButton: {
            to: projectHttpEndpointsPath(organization, project),
            text: "HTTP endpoints"
          }
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime122.jsx)(PageAccessories, { children: /* @__PURE__ */ (0, import_jsx_runtime122.jsx)(
        LinkButton,
        {
          variant: "minimal/small",
          LeadingIcon: import_solid41.BookOpenIcon,
          to: docsPath("documentation/concepts/http-endpoints"),
          children: "HTTP endpoints documentation"
        }
      ) }),
      httpEndpoint2.webhook && /* @__PURE__ */ (0, import_jsx_runtime122.jsx)(PageInfoRow, { children: /* @__PURE__ */ (0, import_jsx_runtime122.jsx)(PageInfoGroup, { children: /* @__PURE__ */ (0, import_jsx_runtime122.jsx)(
        PageInfoProperty,
        {
          icon: "webhook",
          label: "Webhook Trigger",
          to: httpEndpoint2.webhookLink
        }
      ) }) })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime122.jsx)(PageBody, { children: /* @__PURE__ */ (0, import_jsx_runtime122.jsx)(Help, { defaultOpen: !0, children: (open) => /* @__PURE__ */ (0, import_jsx_runtime122.jsxs)("div", { className: cn("grid h-full gap-4", open ? "grid-cols-2" : "grid-cols-1"), children: [
      /* @__PURE__ */ (0, import_jsx_runtime122.jsxs)("div", { children: [
        /* @__PURE__ */ (0, import_jsx_runtime122.jsxs)("div", { className: "mb-2 flex items-center justify-between gap-x-2", children: [
          /* @__PURE__ */ (0, import_jsx_runtime122.jsx)(Header1, { spacing: !0, children: httpEndpoint2.httpEndpointEnvironments.length > 0 ? "Ready to receive data" : "Not deployed" }),
          /* @__PURE__ */ (0, import_jsx_runtime122.jsx)(HelpTrigger, { title: "How do I connect my HTTP Endpoint?" })
        ] }),
        httpEndpoint2.httpEndpointEnvironments.length > 0 && /* @__PURE__ */ (0, import_jsx_runtime122.jsx)("div", { className: "mb-8", children: /* @__PURE__ */ (0, import_jsx_runtime122.jsxs)(Table, { fullWidth: !0, children: [
          /* @__PURE__ */ (0, import_jsx_runtime122.jsx)(TableHeader, { children: /* @__PURE__ */ (0, import_jsx_runtime122.jsxs)(TableRow, { children: [
            /* @__PURE__ */ (0, import_jsx_runtime122.jsx)(TableHeaderCell, { children: "Environment" }),
            /* @__PURE__ */ (0, import_jsx_runtime122.jsx)(TableHeaderCell, { children: "Endpoint URL" }),
            /* @__PURE__ */ (0, import_jsx_runtime122.jsx)(TableHeaderCell, { children: "Secret" }),
            /* @__PURE__ */ (0, import_jsx_runtime122.jsx)(TableHeaderCell, { children: "Source" }),
            /* @__PURE__ */ (0, import_jsx_runtime122.jsx)(TableHeaderCell, { children: "Respond to request?" }),
            /* @__PURE__ */ (0, import_jsx_runtime122.jsx)(TableHeaderCell, { alignment: "right", children: "Updated" })
          ] }) }),
          /* @__PURE__ */ (0, import_jsx_runtime122.jsx)(TableBody, { children: httpEndpoint2.httpEndpointEnvironments.map((httpEnvironment) => /* @__PURE__ */ (0, import_jsx_runtime122.jsxs)(TableRow, { children: [
            /* @__PURE__ */ (0, import_jsx_runtime122.jsx)(TableCell, { children: /* @__PURE__ */ (0, import_jsx_runtime122.jsx)(EnvironmentLabel, { environment: httpEnvironment.environment }) }),
            /* @__PURE__ */ (0, import_jsx_runtime122.jsx)(TableCell, { children: /* @__PURE__ */ (0, import_jsx_runtime122.jsx)(
              ClipboardField,
              {
                className: "max-w-[30rem]",
                fullWidth: !1,
                value: httpEnvironment?.webhookUrl ?? "",
                variant: "tertiary/small"
              }
            ) }),
            /* @__PURE__ */ (0, import_jsx_runtime122.jsx)(TableCell, { children: /* @__PURE__ */ (0, import_jsx_runtime122.jsx)(
              ClipboardField,
              {
                className: "max-w-[10rem]",
                fullWidth: !1,
                value: secret2,
                secure: !0,
                variant: "tertiary/small"
              }
            ) }),
            /* @__PURE__ */ (0, import_jsx_runtime122.jsx)(TableCell, { children: httpEnvironment.source }),
            /* @__PURE__ */ (0, import_jsx_runtime122.jsx)(TableCell, { children: httpEnvironment.immediateResponseFilter ? /* @__PURE__ */ (0, import_jsx_runtime122.jsx)(import_solid41.CheckIcon, { className: "h-4 w-4 text-charcoal-400" }) : /* @__PURE__ */ (0, import_jsx_runtime122.jsx)(import_outline4.StopIcon, { className: "h-4 w-4 text-charcoal-850" }) }),
            /* @__PURE__ */ (0, import_jsx_runtime122.jsx)(TableCell, { alignment: "right", children: /* @__PURE__ */ (0, import_jsx_runtime122.jsx)(DateTime, { date: httpEnvironment.updatedAt }) })
          ] }, httpEnvironment.id)) })
        ] }) }),
        unconfiguredEnvironments.length > 0 && /* @__PURE__ */ (0, import_jsx_runtime122.jsxs)(import_jsx_runtime122.Fragment, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime122.jsx)(Header1, { spacing: !0, children: "Not deployed" }),
          /* @__PURE__ */ (0, import_jsx_runtime122.jsxs)(Paragraph, { spacing: !0, variant: "small", children: [
            "You need to deploy your code for the following environments to receive webhooks \u2013",
            " ",
            /* @__PURE__ */ (0, import_jsx_runtime122.jsx)(TextLink, { to: docsPath("documentation/guides/deployment"), children: "read our deployment guide" }),
            "."
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime122.jsx)("div", { className: "mb-8", children: /* @__PURE__ */ (0, import_jsx_runtime122.jsxs)(Table, { fullWidth: !0, children: [
            /* @__PURE__ */ (0, import_jsx_runtime122.jsx)(TableHeader, { children: /* @__PURE__ */ (0, import_jsx_runtime122.jsxs)(TableRow, { children: [
              /* @__PURE__ */ (0, import_jsx_runtime122.jsx)(TableHeaderCell, { children: "Environment" }),
              /* @__PURE__ */ (0, import_jsx_runtime122.jsx)(TableHeaderCell, { children: "Endpoint URL" }),
              /* @__PURE__ */ (0, import_jsx_runtime122.jsx)(TableHeaderCell, { children: "Secret" })
            ] }) }),
            /* @__PURE__ */ (0, import_jsx_runtime122.jsx)(TableBody, { children: unconfiguredEnvironments.map((environment) => /* @__PURE__ */ (0, import_jsx_runtime122.jsxs)(TableRow, { children: [
              /* @__PURE__ */ (0, import_jsx_runtime122.jsx)(TableCell, { children: /* @__PURE__ */ (0, import_jsx_runtime122.jsx)(
                EnvironmentLabel,
                {
                  environment,
                  className: "opacity-50"
                }
              ) }),
              /* @__PURE__ */ (0, import_jsx_runtime122.jsx)(TableCell, { children: /* @__PURE__ */ (0, import_jsx_runtime122.jsx)(
                ClipboardField,
                {
                  className: "max-w-[30rem]",
                  fullWidth: !1,
                  value: environment?.webhookUrl ?? "",
                  variant: "tertiary/small"
                }
              ) }),
              /* @__PURE__ */ (0, import_jsx_runtime122.jsx)(TableCell, { children: /* @__PURE__ */ (0, import_jsx_runtime122.jsx)(
                ClipboardField,
                {
                  className: "max-w-[10rem]",
                  fullWidth: !1,
                  value: secret2,
                  secure: !0,
                  variant: "tertiary/small"
                }
              ) })
            ] }, environment.id)) })
          ] }) })
        ] })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime122.jsx)(HelpContent, { title: "How to connect my HTTP Endpoint", children: /* @__PURE__ */ (0, import_jsx_runtime122.jsx)(HowToConnectHttpEndpoint, {}) })
    ] }) }) })
  ] });
}

// app/routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.external.$triggerParam/route.tsx
var route_exports25 = {};
__export(route_exports25, {
  action: () => action5,
  default: () => Page15,
  loader: () => loader22
});
var import_react76 = require("@conform-to/react"), import_zod88 = require("@conform-to/zod"), import_node9 = require("@remix-run/node"), import_react77 = require("@remix-run/react"), import_remix_typedjson27 = require("remix-typedjson"), import_zod89 = require("zod");

// app/presenters/TriggerSourcePresenter.server.ts
var TriggerSourcePresenter = class {
  #prismaClient;
  constructor(prismaClient = prisma) {
    this.#prismaClient = prismaClient;
  }
  async call({
    userId,
    projectSlug,
    organizationSlug,
    triggerSourceId,
    direction = "forward",
    cursor
  }) {
    let trigger = await this.#prismaClient.triggerSource.findUnique({
      select: {
        id: !0,
        active: !0,
        integration: {
          select: {
            id: !0,
            title: !0,
            slug: !0,
            definitionId: !0,
            setupStatus: !0,
            definition: {
              select: {
                icon: !0
              }
            }
          }
        },
        environment: {
          select: {
            type: !0
          }
        },
        createdAt: !0,
        updatedAt: !0,
        params: !0,
        sourceRegistrationJob: {
          select: {
            job: {
              select: {
                id: !0,
                slug: !0
              }
            }
          }
        },
        dynamicTrigger: {
          select: {
            id: !0,
            slug: !0,
            sourceRegistrationJob: {
              select: {
                job: {
                  select: {
                    id: !0,
                    slug: !0
                  }
                }
              }
            }
          }
        }
      },
      where: {
        id: triggerSourceId
      }
    });
    if (!trigger)
      throw new Error("Trigger source not found");
    let runListPresenter = new RunListPresenter(this.#prismaClient), jobSlug = getJobSlug(
      trigger.sourceRegistrationJob?.job.slug,
      trigger.dynamicTrigger?.sourceRegistrationJob?.job.slug
    ), runList = jobSlug ? await runListPresenter.call({
      userId,
      jobSlug,
      organizationSlug,
      projectSlug,
      direction,
      cursor
    }) : void 0;
    return {
      trigger: {
        id: trigger.id,
        active: trigger.active,
        integration: trigger.integration,
        environment: trigger.environment,
        createdAt: trigger.createdAt,
        updatedAt: trigger.updatedAt,
        params: trigger.params,
        registrationJob: trigger.sourceRegistrationJob?.job,
        runList,
        dynamic: trigger.dynamicTrigger ? { id: trigger.dynamicTrigger.id, slug: trigger.dynamicTrigger.slug } : void 0
      }
    };
  }
};
function getJobSlug(sourceRegistrationJobSlug, dynamicSourceRegistrationJobSlug) {
  return sourceRegistrationJobSlug || dynamicSourceRegistrationJobSlug;
}

// app/routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.external.$triggerParam/route.tsx
var import_jsx_runtime123 = require("react/jsx-runtime"), loader22 = async ({ request, params }) => {
  let userId = await requireUserId(request), { organizationSlug, projectParam: projectParam2, triggerParam } = TriggerSourceParamSchema.parse(params), url = new URL(request.url), s = Object.fromEntries(url.searchParams.entries()), searchParams = RunListSearchSchema.parse(s), presenter = new TriggerSourcePresenter(), { trigger } = await presenter.call({
    userId,
    organizationSlug,
    projectSlug: projectParam2,
    triggerSourceId: triggerParam,
    direction: searchParams.direction,
    cursor: searchParams.cursor
  });
  if (!trigger)
    throw new Response("Trigger not found", {
      status: 404,
      statusText: "Not Found"
    });
  return (0, import_remix_typedjson27.typedjson)({ trigger });
}, schema5 = import_zod89.z.object({
  jobId: import_zod89.z.string()
}), action5 = async ({ request, params }) => {
  let userId = await requireUserId(request), { organizationSlug, projectParam: projectParam2, triggerParam } = TriggerSourceParamSchema.parse(params), formData = await request.formData(), submission = (0, import_zod88.parse)(formData, { schema: schema5 });
  if (!submission.value)
    return (0, import_node9.json)(submission);
  try {
    let result = await new ActivateSourceService().call(triggerParam);
    return redirectWithSuccessMessage(
      externalTriggerPath({ slug: organizationSlug }, { slug: projectParam2 }, { id: triggerParam }),
      request,
      "Retrying registration now"
    );
  } catch (error) {
    return (0, import_node9.json)({ errors: { body: error.message } }, { status: 400 });
  }
};
function Page15() {
  let { trigger } = (0, import_remix_typedjson27.useTypedLoaderData)(), organization = useOrganization(), project = useProject(), user = useUser(), navigation = (0, import_react77.useNavigation)(), lastSubmission = (0, import_react77.useActionData)(), [form, { jobId }] = (0, import_react76.useForm)({
    id: "trigger-registration-retry",
    // TODO: type this
    lastSubmission,
    onValidate({ formData }) {
      return (0, import_zod88.parse)(formData, { schema: schema5 });
    }
  }), isLoading2 = navigation.state === "submitting" && navigation.formData !== void 0;
  return /* @__PURE__ */ (0, import_jsx_runtime123.jsxs)(PageContainer, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime123.jsx)(NavBar, { children: /* @__PURE__ */ (0, import_jsx_runtime123.jsx)(
      PageTitle,
      {
        title: `${trigger.integration.title}: ${trigger.integration.slug}`,
        backButton: {
          to: projectTriggersPath(organization, project),
          text: "External Triggers"
        }
      }
    ) }),
    /* @__PURE__ */ (0, import_jsx_runtime123.jsx)(PageBody, { scrollable: !1, children: /* @__PURE__ */ (0, import_jsx_runtime123.jsxs)("div", { className: "grid grid-rows-[auto_1fr] gap-y-4 p-4", children: [
      /* @__PURE__ */ (0, import_jsx_runtime123.jsx)(PageInfoRow, { children: /* @__PURE__ */ (0, import_jsx_runtime123.jsxs)(PageInfoGroup, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime123.jsx)(
          PageInfoProperty,
          {
            icon: trigger.integration.definition.icon ?? trigger.integration.definitionId,
            label: trigger.integration.title ?? "",
            value: trigger.integration.slug
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime123.jsx)(
          PageInfoProperty,
          {
            label: trigger.active ? "Active" : "Inactive",
            value: /* @__PURE__ */ (0, import_jsx_runtime123.jsx)(NamedIcon, { name: trigger.active ? "active" : "inactive", className: "h-4 w-4" })
          }
        ),
        trigger.dynamic && /* @__PURE__ */ (0, import_jsx_runtime123.jsx)(
          PageInfoProperty,
          {
            label: "Dynamic",
            value: /* @__PURE__ */ (0, import_jsx_runtime123.jsxs)("span", { className: "flex items-center gap-0.5", children: [
              /* @__PURE__ */ (0, import_jsx_runtime123.jsx)(NamedIcon, { name: "dynamic", className: "h-4 w-4" }),
              trigger.dynamic.slug
            ] })
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime123.jsx)(
          PageInfoProperty,
          {
            label: "Environment",
            value: /* @__PURE__ */ (0, import_jsx_runtime123.jsx)(EnvironmentLabel, { environment: trigger.environment })
          }
        )
      ] }) }),
      /* @__PURE__ */ (0, import_jsx_runtime123.jsxs)("div", { className: "overflow-y-auto scrollbar-thin scrollbar-track-transparent scrollbar-thumb-charcoal-600", children: [
        /* @__PURE__ */ (0, import_jsx_runtime123.jsx)(Header2, { spacing: !0, children: "External Trigger registration runs" }),
        /* @__PURE__ */ (0, import_jsx_runtime123.jsx)(Paragraph, { variant: "small", spacing: !0, children: "External Triggers need to be registered with the external service. You can see the list of attempted registrations below." }),
        !trigger.active && (trigger.registrationJob ? /* @__PURE__ */ (0, import_jsx_runtime123.jsx)(import_react77.Form, { method: "post", ...form.props, children: /* @__PURE__ */ (0, import_jsx_runtime123.jsxs)(Callout, { variant: "error", className: "justiy-between mb-4 items-center", children: [
          /* @__PURE__ */ (0, import_jsx_runtime123.jsx)(
            Paragraph,
            {
              variant: "small",
              className: cn(variantClasses2.error.textColor, "grow"),
              children: "Registration hasn't succeeded yet, check the runs below."
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime123.jsx)(
            "input",
            {
              ...import_react76.conform.input(jobId, { type: "hidden" }),
              defaultValue: trigger.registrationJob?.id
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime123.jsx)(
            Button,
            {
              variant: "danger/small",
              type: "submit",
              name: import_react76.conform.INTENT,
              value: "retry",
              disabled: isLoading2,
              LeadingIcon: isLoading2 ? "spinner-white" : void 0,
              children: isLoading2 ? "Retrying\u2026" : "Retry now"
            }
          )
        ] }) }) : trigger.dynamic ? null : /* @__PURE__ */ (0, import_jsx_runtime123.jsxs)(Callout, { variant: "error", className: "justiy-between mb-4 items-center", children: [
          "This External Trigger hasn't registered successfully. Contact support for help:",
          " ",
          trigger.id
        ] })),
        trigger.runList ? /* @__PURE__ */ (0, import_jsx_runtime123.jsxs)(import_jsx_runtime123.Fragment, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime123.jsx)(ListPagination, { list: trigger.runList, className: "mb-2 justify-end" }),
          /* @__PURE__ */ (0, import_jsx_runtime123.jsx)(
            RunsTable,
            {
              runs: trigger.runList.runs,
              total: trigger.runList.runs.length,
              hasFilters: !1,
              runsParentPath: externalTriggerRunsParentPath(organization, project, trigger),
              currentUser: user
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime123.jsx)(ListPagination, { list: trigger.runList, className: "mt-2 justify-end" })
        ] }) : /* @__PURE__ */ (0, import_jsx_runtime123.jsx)(Callout, { variant: "warning", children: "No registration runs found" })
      ] })
    ] }) })
  ] });
}

// app/routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.webhooks.$triggerParam/route.tsx
var route_exports26 = {};
__export(route_exports26, {
  default: () => Page16,
  loader: () => loader23
});
var import_react78 = require("@remix-run/react"), import_remix_typedjson28 = require("remix-typedjson");
var import_jsx_runtime124 = require("react/jsx-runtime"), loader23 = async ({ request, params }) => {
  let userId = await requireUserId(request), { organizationSlug, projectParam: projectParam2, triggerParam } = TriggerSourceParamSchema.parse(params), url = new URL(request.url), s = Object.fromEntries(url.searchParams.entries()), searchParams = RunListSearchSchema.parse(s), presenter = new WebhookSourcePresenter(), { trigger } = await presenter.call({
    userId,
    organizationSlug,
    projectSlug: projectParam2,
    webhookId: triggerParam,
    direction: searchParams.direction,
    cursor: searchParams.cursor
  });
  if (!trigger)
    throw new Response("Trigger not found", {
      status: 404,
      statusText: "Not Found"
    });
  return (0, import_remix_typedjson28.typedjson)({ trigger });
};
function Page16() {
  let { trigger } = (0, import_remix_typedjson28.useTypedLoaderData)(), organization = useOrganization(), project = useProject();
  return /* @__PURE__ */ (0, import_jsx_runtime124.jsxs)(PageContainer, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime124.jsxs)(NavBar, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime124.jsx)(
        PageTitle,
        {
          title: trigger.key,
          backButton: {
            to: projectWebhookTriggersPath(organization, project),
            text: "Webhook Triggers"
          }
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime124.jsx)(PageInfoRow, { children: /* @__PURE__ */ (0, import_jsx_runtime124.jsxs)(PageInfoGroup, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime124.jsx)(
          PageInfoProperty,
          {
            icon: trigger.integration.definition.icon ?? trigger.integration.definitionId,
            label: trigger.integration.title ?? "",
            value: trigger.integration.slug,
            to: trigger.integrationLink
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime124.jsx)(PageInfoProperty, { icon: "webhook", label: "HTTP Endpoint", to: trigger.httpEndpointLink })
      ] }) }),
      /* @__PURE__ */ (0, import_jsx_runtime124.jsx)(
        PageTabs,
        {
          layoutId: "webhook-trigger",
          tabs: [
            {
              label: "Registrations",
              to: webhookTriggerPath(organization, project, trigger)
            },
            {
              label: "Deliveries",
              to: webhookDeliveryPath(organization, project, trigger)
            }
          ]
        }
      )
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime124.jsx)(PageBody, { scrollable: !1, children: /* @__PURE__ */ (0, import_jsx_runtime124.jsx)("div", { className: "h-full overflow-y-auto p-4 scrollbar-thin scrollbar-track-transparent scrollbar-thumb-charcoal-600", children: /* @__PURE__ */ (0, import_jsx_runtime124.jsx)(import_react78.Outlet, {}) }) })
  ] });
}

// app/routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.schedules.edit.$scheduleParam/route.tsx
var route_exports28 = {};
__export(route_exports28, {
  default: () => Page17,
  loader: () => loader24
});
var import_remix_typedjson29 = require("remix-typedjson");

// app/utils/timezones.server.ts
function getTimezones(includeUtc = !0) {
  let possibleTimezones = Intl.supportedValuesOf("timeZone").sort();
  return includeUtc && possibleTimezones.unshift("UTC"), possibleTimezones;
}

// app/presenters/v3/EditSchedulePresenter.server.ts
var EditSchedulePresenter = class {
  #prismaClient;
  constructor(prismaClient = prisma) {
    this.#prismaClient = prismaClient;
  }
  async call({ userId, projectSlug, friendlyId }) {
    let project = await this.#prismaClient.project.findFirstOrThrow({
      select: {
        id: !0,
        environments: {
          select: {
            id: !0,
            type: !0,
            slug: !0,
            orgMember: {
              select: {
                user: {
                  select: {
                    id: !0,
                    name: !0,
                    displayName: !0
                  }
                }
              }
            }
          }
        }
      },
      where: {
        slug: projectSlug,
        organization: {
          members: {
            some: {
              userId
            }
          }
        }
      }
    }), possibleTasks = await this.#prismaClient.backgroundWorkerTask.findMany({
      distinct: ["slug"],
      where: {
        projectId: project.id,
        triggerSource: "SCHEDULED"
      }
    }), possibleEnvironments = project.environments.map((environment) => displayableEnvironment(environment, userId));
    return {
      possibleTasks: possibleTasks.map((task) => task.slug),
      possibleEnvironments,
      possibleTimezones: getTimezones(),
      schedule: await this.#getExistingSchedule(friendlyId, possibleEnvironments)
    };
  }
  async #getExistingSchedule(scheduleId, possibleEnvironments) {
    if (!scheduleId)
      return;
    let schedule = await this.#prismaClient.taskSchedule.findFirst({
      select: {
        id: !0,
        friendlyId: !0,
        generatorExpression: !0,
        externalId: !0,
        deduplicationKey: !0,
        userProvidedDeduplicationKey: !0,
        timezone: !0,
        taskIdentifier: !0,
        instances: {
          select: {
            environmentId: !0
          }
        },
        active: !0
      },
      where: {
        friendlyId: scheduleId
      }
    });
    if (schedule)
      return {
        ...schedule,
        cron: schedule.generatorExpression,
        environments: schedule.instances.map((instance) => {
          let environment = possibleEnvironments.find((env6) => env6.id === instance.environmentId);
          if (!environment)
            throw new Error(`Environment with id ${instance.environmentId} not found`);
          return environment;
        })
      };
  }
};

// app/routes/resources.orgs.$organizationSlug.projects.$projectParam.schedules.new/route.tsx
var route_exports27 = {};
__export(route_exports27, {
  UpsertScheduleForm: () => UpsertScheduleForm,
  action: () => action6
});
var import_react82 = require("@conform-to/react"), import_zod92 = require("@conform-to/zod"), import_solid42 = require("@heroicons/react/20/solid"), import_react83 = require("@remix-run/react"), import_server_runtime7 = require("@remix-run/server-runtime"), import_cron_parser4 = require("cron-parser"), import_cronstrue3 = __toESM(require("cronstrue")), import_react84 = require("react");

// app/components/primitives/Checkbox.tsx
var React12 = __toESM(require("react")), import_react79 = require("react");
var import_jsx_runtime125 = require("react/jsx-runtime"), variants8 = {
  "simple/small": {
    button: "w-fit pr-4",
    label: "text-sm text-text-bright mt-0.5 select-none",
    description: "text-text-dimmed",
    inputPosition: "mt-1",
    isChecked: "",
    isDisabled: "opacity-70"
  },
  simple: {
    button: "w-fit pr-4",
    label: "text-text-bright select-none",
    description: "text-text-dimmed",
    inputPosition: "mt-1",
    isChecked: "",
    isDisabled: "opacity-70"
  },
  "button/small": {
    button: "flex items-center w-fit h-8 pl-2 pr-3 rounded border border-charcoal-600 hover:bg-charcoal-850 hover:border-charcoal-500 transition",
    label: "text-sm text-text-bright select-none",
    description: "text-text-dimmed",
    inputPosition: "mt-0",
    isChecked: "bg-charcoal-850 border-charcoal-750 hover:!bg-charcoal-850",
    isDisabled: "opacity-70 hover:bg-transparent"
  },
  button: {
    button: "w-fit py-2 pl-3 pr-4 rounded border border-charcoal-600 hover:bg-charcoal-850 hover:border-charcoal-500 transition",
    label: "text-text-bright select-none",
    description: "text-text-dimmed",
    inputPosition: "mt-1",
    isChecked: "bg-charcoal-850 border-charcoal-750 hover:!bg-charcoal-850",
    isDisabled: "opacity-70 hover:bg-transparent"
  },
  description: {
    button: "w-full py-2 pl-3 pr-4 checked:hover:bg-charcoal-850 transition",
    label: "text-text-bright font-semibold",
    description: "text-text-dimmed",
    inputPosition: "mt-1",
    isChecked: "bg-charcoal-850",
    isDisabled: "opacity-70"
  }
}, CheckboxWithLabel = React12.forwardRef(
  ({
    id,
    name,
    value,
    variant: variant3 = "simple",
    type,
    label,
    description,
    defaultChecked,
    badges,
    disabled,
    className,
    ...props
  }, ref) => {
    let [isChecked, setIsChecked] = (0, import_react79.useState)(defaultChecked ?? !1), [isDisabled, setIsDisabled] = (0, import_react79.useState)(disabled ?? !1), buttonClassName = variants8[variant3].button, labelClassName = variants8[variant3].label, descriptionClassName = variants8[variant3].description, isCheckedClassName = variants8[variant3].isChecked, isDisabledClassName = variants8[variant3].isDisabled, inputPositionClasses = variants8[variant3].inputPosition;
    return (0, import_react79.useEffect)(() => {
      setIsDisabled(disabled ?? !1);
    }, [disabled]), (0, import_react79.useEffect)(() => {
      props.onChange && props.onChange(isChecked);
    }, [isChecked]), (0, import_react79.useEffect)(() => {
      setIsChecked(defaultChecked ?? !1);
    }, [defaultChecked]), /* @__PURE__ */ (0, import_jsx_runtime125.jsxs)(
      "div",
      {
        className: cn(
          "group flex items-start gap-x-2 transition ",
          props.readOnly || disabled ? "cursor-default" : "cursor-pointer",
          buttonClassName,
          isChecked && isCheckedClassName,
          (isDisabled || props.readOnly) && isDisabledClassName,
          className
        ),
        onClick: (e) => {
          if (isDisabled || props.readOnly === !0)
            return !1;
          setIsChecked((c) => !c);
        },
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime125.jsx)(
            "input",
            {
              ...props,
              name,
              type: "checkbox",
              value,
              checked: isChecked,
              onChange: (e) => {
                if (isDisabled || props.readOnly === !0)
                  return !1;
                setIsChecked(!isChecked);
              },
              disabled: isDisabled,
              className: cn(
                inputPositionClasses,
                props.readOnly || disabled ? "cursor-default" : "cursor-pointer",
                "read-only:border-charcoal-650 disabled:border-charcoal-650 rounded-sm border border-charcoal-600 bg-transparent transition checked:!bg-indigo-500 read-only:!bg-charcoal-700 group-hover:bg-charcoal-900 group-hover:checked:bg-indigo-500 group-focus:ring-1 focus:ring-indigo-500 focus:ring-offset-0 focus:ring-offset-transparent focus-visible:outline-none  focus-visible:ring-indigo-500 disabled:!bg-charcoal-700"
              ),
              id,
              ref
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime125.jsxs)("div", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime125.jsxs)("div", { className: "flex items-center gap-x-2", children: [
              /* @__PURE__ */ (0, import_jsx_runtime125.jsx)(
                "label",
                {
                  htmlFor: id,
                  className: cn(
                    props.readOnly || disabled ? "cursor-default" : "cursor-pointer",
                    labelClassName
                  ),
                  onClick: (e) => e.preventDefault(),
                  children: label
                }
              ),
              badges && /* @__PURE__ */ (0, import_jsx_runtime125.jsx)("span", { className: "-mr-2 flex gap-x-1.5", children: badges.map((badge) => /* @__PURE__ */ (0, import_jsx_runtime125.jsx)(Badge, { children: badge }, badge)) })
            ] }),
            variant3 === "description" && /* @__PURE__ */ (0, import_jsx_runtime125.jsx)(Paragraph, { variant: "small", className: cn("mt-0.5", descriptionClassName), children: description })
          ] })
        ]
      }
    );
  }
), Checkbox = (0, import_react79.forwardRef)(
  ({ className, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime125.jsx)(
    "input",
    {
      type: "checkbox",
      className: cn(
        props.readOnly || props.disabled ? "cursor-default" : "cursor-pointer",
        "read-only:border-charcoal-650 disabled:border-charcoal-650 rounded-sm border border-charcoal-600 bg-transparent transition checked:!bg-indigo-500 read-only:!bg-charcoal-700 group-hover:bg-charcoal-900 group-hover:checked:bg-indigo-500 group-focus:ring-1 focus:ring-indigo-500 focus:ring-offset-0 focus:ring-offset-transparent focus-visible:outline-none  focus-visible:ring-indigo-500 disabled:!bg-charcoal-700"
      ),
      ...props,
      ref
    }
  )
);

// app/components/primitives/Hint.tsx
var import_jsx_runtime126 = require("react/jsx-runtime");
function Hint({ children, className }) {
  return /* @__PURE__ */ (0, import_jsx_runtime126.jsx)(Paragraph, { variant: "extra-small", className, children });
}

// app/components/primitives/Input.tsx
var React13 = __toESM(require("react")), import_react80 = require("react");
var import_jsx_runtime127 = require("react/jsx-runtime"), containerBase = "has-[:focus-visible]:outline-none has-[:focus-visible]:ring-1 has-[:focus-visible]:ring-ring has-[:focus-visible]:ring-offset-0 has-[:focus]:border-ring has-[:focus]:outline-none has-[:focus]:ring-2 has-[:focus]:ring-ring has-[:disabled]:cursor-not-allowed has-[:disabled]:opacity-50 ring-offset-background transition cursor-text", inputBase = "h-full w-full text-text-bright bg-transparent file:border-0 file:bg-transparent file:text-base file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-0 disabled:cursor-not-allowed outline-none ring-0 border-none", shortcutBase = "grid h-fit place-content-center border border-dimmed/40 font-normal text-text-dimmed", variants9 = {
  large: {
    container: "px-1 w-full h-10 rounded-[3px] border border-charcoal-800 bg-charcoal-750 hover:border-charcoal-600 hover:bg-charcoal-650",
    input: "px-2 text-sm",
    iconSize: "h-4 w-4 ml-1",
    shortcut: "mr-1 min-w-[22px] rounded-sm py-[3px] px-[5px] text-[0.6rem] select-none"
  },
  medium: {
    container: "px-1 h-8 w-full rounded border border-charcoal-800 bg-charcoal-750 hover:border-charcoal-600 hover:bg-charcoal-650",
    input: "px-1.5 rounded text-sm",
    iconSize: "h-4 w-4 ml-0.5",
    shortcut: "min-w-[22px] rounded-sm py-[3px] px-[5px] text-[0.6rem]"
  },
  small: {
    container: "px-1 h-6 w-full rounded border border-charcoal-800 bg-charcoal-750 hover:border-charcoal-600 hover:bg-charcoal-650",
    input: "px-1 rounded text-xs",
    iconSize: "h-3 w-3 ml-0.5",
    shortcut: "min-w-[22px] rounded-[2px] py-px px-[3px] text-[0.5rem]"
  },
  tertiary: {
    container: "px-1 h-6 w-full rounded hover:bg-charcoal-750",
    input: "px-1 rounded text-xs",
    iconSize: "h-3 w-3 ml-0.5",
    shortcut: "min-w-[22px] rounded-[2px] py-px px-[3px] text-[0.5rem]"
  }
}, Input = React13.forwardRef(
  ({ className, type, shortcut: shortcut2, fullWidth = !0, variant: variant3 = "medium", icon, ...props }, ref) => {
    let innerRef = (0, import_react80.useRef)(null);
    (0, import_react80.useImperativeHandle)(ref, () => innerRef.current);
    let containerClassName = variants9[variant3].container, inputClassName = variants9[variant3].input, iconClassName = variants9[variant3].iconSize, shortcutClassName = variants9[variant3].shortcut;
    return /* @__PURE__ */ (0, import_jsx_runtime127.jsxs)(
      "div",
      {
        className: cn(
          "flex items-center",
          containerBase,
          containerClassName,
          fullWidth ? "w-full" : "max-w-max"
        ),
        onClick: () => innerRef.current && innerRef.current.focus(),
        children: [
          icon && /* @__PURE__ */ (0, import_jsx_runtime127.jsx)("div", { className: "pointer-events-none flex items-center", children: /* @__PURE__ */ (0, import_jsx_runtime127.jsx)(Icon, { icon, className: cn(iconClassName, "text-text-dimmed") }) }),
          /* @__PURE__ */ (0, import_jsx_runtime127.jsx)(
            "input",
            {
              type,
              className: cn("grow", inputBase, inputClassName, className),
              ref: innerRef,
              ...props
            }
          ),
          shortcut2 && /* @__PURE__ */ (0, import_jsx_runtime127.jsx)("div", { className: cn(shortcutBase, shortcutClassName), children: shortcut2 })
        ]
      }
    );
  }
);
Input.displayName = "Input";

// app/v3/schedules.ts
var import_cron_parser3 = require("cron-parser"), import_zod90 = require("zod"), CronPattern = import_zod90.z.string().refine(
  (val) => {
    if (val.split(" ").length > 5 || val === "")
      return !1;
    try {
      return (0, import_cron_parser3.parseExpression)(val), !0;
    } catch {
      return !1;
    }
  },
  (val) => {
    if (val.split(" ").length > 5)
      return {
        message: "CRON expressions with seconds are not allowed"
      };
    if (val === "")
      return {
        message: "CRON expression is required"
      };
    try {
      return (0, import_cron_parser3.parseExpression)(val), {
        message: "Unknown problem"
      };
    } catch (e) {
      return { message: e instanceof Error ? e.message : JSON.stringify(e) };
    }
  }
), UpsertSchedule = import_zod90.z.object({
  friendlyId: import_zod90.z.string().optional(),
  taskIdentifier: import_zod90.z.string().min(1, "Task is required"),
  cron: CronPattern,
  environments: import_zod90.z.preprocess(
    (data2) => typeof data2 == "string" ? [data2] : data2,
    import_zod90.z.array(import_zod90.z.string()).min(1, "At least one environment is required")
  ),
  externalId: import_zod90.z.string().optional(),
  deduplicationKey: import_zod90.z.string().optional(),
  timezone: import_zod90.z.string().optional()
});

// app/v3/services/upsertTaskSchedule.server.ts
var import_nanoid8 = require("nanoid"), import_zod91 = require("zod");
var import_cronstrue2 = __toESM(require("cronstrue"));
var UpsertTaskScheduleService = class extends BaseService {
  async call(projectId, schedule) {
    try {
      CronPattern.parse(schedule.cron);
    } catch (e) {
      throw e instanceof import_zod91.ZodError ? new ServiceValidationError(`Invalid cron expression: ${e.issues[0].message}`) : new ServiceValidationError(
        `Invalid cron expression: ${e instanceof Error ? e.message : JSON.stringify(e)}`
      );
    }
    let task = await this._prisma.backgroundWorkerTask.findFirst({
      where: {
        slug: schedule.taskIdentifier,
        projectId
      },
      orderBy: {
        createdAt: "desc"
      }
    });
    if (!task)
      throw new ServiceValidationError(
        `Task with identifier ${schedule.taskIdentifier} not found in project.`
      );
    if (task.triggerSource !== "SCHEDULED")
      throw new ServiceValidationError(
        `Task with identifier ${schedule.taskIdentifier} is not a scheduled task.`
      );
    if (!schedule.friendlyId) {
      let project = await this._prisma.project.findFirst({
        where: {
          id: projectId
        },
        select: {
          organizationId: !0
        }
      });
      if (!project)
        throw new ServiceValidationError("Project not found");
      let limit = await getLimit(project.organizationId, "schedules", 500), schedulesCount = await this._prisma.taskSchedule.count({
        where: {
          projectId
        }
      });
      if (schedulesCount >= limit)
        throw new ServiceValidationError(
          `You have created ${schedulesCount}/${limit} schedules so you'll need to increase your limits or delete some schedules. Increase your limits by contacting support.`
        );
    }
    if (schedule.timezone && !getTimezones().includes(schedule.timezone))
      throw new ServiceValidationError(
        `Invalid IANA timezone: "${schedule.timezone}". View the list of valid timezones at ${env2.APP_ORIGIN}/timezones`
      );
    let result = await $transaction(this._prisma, async (tx) => {
      let deduplicationKey = typeof schedule.deduplicationKey == "string" && schedule.deduplicationKey !== "" ? schedule.deduplicationKey : (0, import_nanoid8.nanoid)(24), existingSchedule = schedule.friendlyId ? await tx.taskSchedule.findUnique({
        where: {
          friendlyId: schedule.friendlyId
        }
      }) : await tx.taskSchedule.findUnique({
        where: {
          projectId_deduplicationKey: {
            projectId,
            deduplicationKey
          }
        }
      });
      return existingSchedule ? await this.#updateExistingSchedule(tx, existingSchedule, schedule, projectId) : await this.#createNewSchedule(tx, schedule, projectId, deduplicationKey);
    });
    if (!result)
      throw new Error("Failed to create or update the schedule");
    let { scheduleRecord, instances } = result;
    return this.#createReturnObject(scheduleRecord, instances);
  }
  async #createNewSchedule(tx, options2, projectId, deduplicationKey) {
    let scheduleRecord = await tx.taskSchedule.create({
      data: {
        projectId,
        friendlyId: generateFriendlyId("sched"),
        taskIdentifier: options2.taskIdentifier,
        deduplicationKey,
        userProvidedDeduplicationKey: options2.deduplicationKey !== void 0 && options2.deduplicationKey !== "",
        generatorExpression: options2.cron,
        generatorDescription: import_cronstrue2.default.toString(options2.cron),
        timezone: options2.timezone ?? "UTC",
        externalId: options2.externalId ? options2.externalId : void 0
      }
    }), registerNextService = new RegisterNextTaskScheduleInstanceService(tx), instances = [];
    for (let environmentId of options2.environments) {
      let instance = await tx.taskScheduleInstance.create({
        data: {
          taskScheduleId: scheduleRecord.id,
          environmentId
        },
        include: {
          environment: {
            include: {
              orgMember: {
                include: {
                  user: !0
                }
              }
            }
          }
        }
      });
      await registerNextService.call(instance.id), instances.push(instance);
    }
    return { scheduleRecord, instances };
  }
  async #updateExistingSchedule(tx, existingSchedule, options2, projectId) {
    let scheduleRecord = await tx.taskSchedule.update({
      where: {
        id: existingSchedule.id
      },
      data: {
        generatorExpression: options2.cron,
        generatorDescription: import_cronstrue2.default.toString(options2.cron),
        timezone: options2.timezone ?? "UTC",
        externalId: options2.externalId ? options2.externalId : null
      }
    }), scheduleHasChanged = scheduleRecord.generatorExpression !== existingSchedule.generatorExpression || scheduleRecord.timezone !== existingSchedule.timezone, existingInstances = await tx.taskScheduleInstance.findMany({
      where: {
        taskScheduleId: scheduleRecord.id
      },
      include: {
        environment: {
          include: {
            orgMember: {
              include: {
                user: !0
              }
            }
          }
        }
      }
    }), newInstances = [], updatingInstances = [];
    for (let environmentId of options2.environments) {
      let existingInstance = existingInstances.find((i) => i.environmentId === environmentId);
      if (existingInstance)
        updatingInstances.push(existingInstance);
      else {
        let instance = await tx.taskScheduleInstance.create({
          data: {
            taskScheduleId: scheduleRecord.id,
            environmentId
          },
          include: {
            environment: {
              include: {
                orgMember: {
                  include: {
                    user: !0
                  }
                }
              }
            }
          }
        });
        newInstances.push(instance);
      }
    }
    let instancesToDeleted = existingInstances.filter(
      (i) => !options2.environments.includes(i.environmentId)
    );
    for (let instance of instancesToDeleted)
      await tx.taskScheduleInstance.delete({
        where: {
          id: instance.id
        }
      });
    let registerService = new RegisterNextTaskScheduleInstanceService(tx);
    for (let instance of newInstances)
      await registerService.call(instance.id);
    if (scheduleHasChanged)
      for (let instance of updatingInstances)
        await registerService.call(instance.id);
    let instances = await tx.taskScheduleInstance.findMany({
      where: {
        taskScheduleId: scheduleRecord.id
      },
      include: {
        environment: {
          include: {
            orgMember: {
              include: {
                user: !0
              }
            }
          }
        }
      }
    });
    return { scheduleRecord, instances };
  }
  #createReturnObject(taskSchedule, instances) {
    return {
      id: taskSchedule.friendlyId,
      task: taskSchedule.taskIdentifier,
      active: taskSchedule.active,
      externalId: taskSchedule.externalId,
      deduplicationKey: taskSchedule.userProvidedDeduplicationKey ? taskSchedule.deduplicationKey : void 0,
      cron: taskSchedule.generatorExpression,
      cronDescription: taskSchedule.generatorDescription,
      timezone: taskSchedule.timezone,
      nextRun: calculateNextScheduledTimestamp(
        taskSchedule.generatorExpression,
        taskSchedule.timezone
      ),
      environments: instances.map((instance) => ({
        id: instance.environment.id,
        shortcode: instance.environment.shortcode,
        type: instance.environment.type,
        userName: instance.environment.orgMember?.user.displayName ?? instance.environment.orgMember?.user.name ?? void 0
      }))
    };
  }
};

// app/components/scheduled/timezones.tsx
var import_react_virtual = require("@tanstack/react-virtual"), import_react81 = require("react");
var import_jsx_runtime128 = require("react/jsx-runtime");
function TimezoneList({ timezones }) {
  let parentRef = (0, import_react81.useRef)(null), rowVirtualizer = (0, import_react_virtual.useVirtualizer)({
    count: timezones.length,
    getScrollElement: () => parentRef.current,
    estimateSize: () => 28
  });
  return /* @__PURE__ */ (0, import_jsx_runtime128.jsx)(
    "div",
    {
      ref: parentRef,
      className: "max-h-[calc(min(480px,var(--popover-available-height))-2.35rem)] overflow-y-auto overscroll-contain scrollbar-thin scrollbar-track-transparent scrollbar-thumb-charcoal-600",
      children: /* @__PURE__ */ (0, import_jsx_runtime128.jsx)(
        "div",
        {
          style: {
            height: `${rowVirtualizer.getTotalSize()}px`,
            width: "100%",
            position: "relative"
          },
          children: rowVirtualizer.getVirtualItems().map((virtualItem) => /* @__PURE__ */ (0, import_jsx_runtime128.jsx)(
            TimezoneCell,
            {
              size: virtualItem.size,
              start: virtualItem.start,
              timezone: timezones[virtualItem.index]
            },
            virtualItem.key
          ))
        }
      )
    }
  );
}
function TimezoneCell({
  timezone,
  size,
  start
}) {
  return /* @__PURE__ */ (0, import_jsx_runtime128.jsx)(
    SelectItem2,
    {
      value: timezone,
      style: {
        position: "absolute",
        top: 0,
        left: 0,
        width: "100%",
        height: `${size}px`,
        transform: `translateY(${start}px)`
      },
      children: timezone
    }
  );
}

// app/routes/resources.orgs.$organizationSlug.projects.$projectParam.schedules.new/route.tsx
var import_jsx_runtime129 = require("react/jsx-runtime"), cronFormat = `*    *    *    *    *
\u252C    \u252C    \u252C    \u252C    \u252C
\u2502    \u2502    \u2502    \u2502    |
\u2502    \u2502    \u2502    \u2502    \u2514 day of week (0 - 7, 1L - 7L) (0 or 7 is Sun)
\u2502    \u2502    \u2502    \u2514\u2500\u2500\u2500\u2500\u2500 month (1 - 12)
\u2502    \u2502    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 day of month (1 - 31, L)
\u2502    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 hour (0 - 23)
\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 minute (0 - 59)`, action6 = async ({ request, params }) => {
  let userId = await requireUserId(request), { organizationSlug, projectParam: projectParam2 } = ProjectParamSchema.parse(params), formData = await request.formData(), submission = (0, import_zod92.parse)(formData, { schema: UpsertSchedule });
  if (!submission.value)
    return (0, import_server_runtime7.json)(submission);
  try {
    let project = await prisma.project.findUnique({
      where: {
        slug: projectParam2,
        organization: {
          members: {
            some: {
              userId
            }
          }
        }
      },
      select: { id: !0 }
    });
    if (!project)
      throw new Error("Project not found");
    let result = await new UpsertTaskScheduleService().call(project.id, submission.value);
    return redirectWithSuccessMessage(
      v3SchedulesPath({ slug: organizationSlug }, { slug: projectParam2 }),
      request,
      submission.value?.friendlyId === result.id ? "Schedule updated" : "Schedule created"
    );
  } catch (error) {
    let errorMessage = `Failed: ${error instanceof Error ? error.message : JSON.stringify(error)}`;
    return redirectWithErrorMessage(
      v3SchedulesPath({ slug: organizationSlug }, { slug: projectParam2 }),
      request,
      errorMessage
    );
  }
};
function UpsertScheduleForm({
  schedule,
  possibleTasks,
  possibleEnvironments,
  possibleTimezones,
  showGenerateField
}) {
  let lastSubmission = (0, import_react83.useActionData)(), [selectedTimezone, setSelectedTimezone] = (0, import_react84.useState)(schedule?.timezone ?? "UTC"), isUtc = selectedTimezone === "UTC", [cronPattern, setCronPattern] = (0, import_react84.useState)(schedule?.cron ?? ""), isLoading2 = (0, import_react83.useNavigation)().state !== "idle", organization = useOrganization(), project = useProject(), location = (0, import_react83.useLocation)(), [form, { taskIdentifier, cron, timezone, externalId, environments: environments2, deduplicationKey }] = (0, import_react82.useForm)({
    id: "create-schedule",
    // TODO: type this
    lastSubmission,
    shouldRevalidate: "onSubmit",
    onValidate({ formData }) {
      return (0, import_zod92.parse)(formData, { schema: UpsertSchedule });
    }
  }), cronPatternResult, nextRuns;
  if (cronPattern !== "") {
    let result = CronPattern.safeParse(cronPattern);
    if (!result.success)
      cronPatternResult = {
        isValid: !1,
        error: result.error.errors[0].message
      };
    else
      try {
        let expression = (0, import_cron_parser4.parseExpression)(
          cronPattern,
          isUtc ? { utc: !0 } : { tz: selectedTimezone }
        );
        cronPatternResult = {
          isValid: !0,
          description: import_cronstrue3.default.toString(cronPattern)
        }, nextRuns = Array.from({ length: 5 }, (_, i) => expression.next().toDate());
      } catch (e) {
        cronPatternResult = {
          isValid: !1,
          error: e instanceof Error ? e.message : JSON.stringify(e)
        };
      }
  }
  let mode2 = schedule ? "edit" : "new";
  return /* @__PURE__ */ (0, import_jsx_runtime129.jsxs)(
    import_react83.Form,
    {
      method: "post",
      action: `/resources/orgs/${organization.slug}/projects/${project.slug}/schedules/new`,
      ...form.props,
      className: "grid h-full max-h-full grid-rows-[2.5rem_1fr_3.25rem] overflow-hidden bg-background-bright",
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime129.jsx)("div", { className: "mx-3 flex items-center justify-between gap-2 border-b border-grid-dimmed", children: /* @__PURE__ */ (0, import_jsx_runtime129.jsx)(Header2, { className: cn("whitespace-nowrap"), children: schedule?.friendlyId ? "Edit schedule" : "New schedule" }) }),
        /* @__PURE__ */ (0, import_jsx_runtime129.jsx)("div", { className: "overflow-y-scroll scrollbar-thin scrollbar-track-transparent scrollbar-thumb-charcoal-600", children: /* @__PURE__ */ (0, import_jsx_runtime129.jsxs)("div", { className: "p-3", children: [
          schedule && /* @__PURE__ */ (0, import_jsx_runtime129.jsx)("input", { type: "hidden", name: "friendlyId", value: schedule.friendlyId }),
          /* @__PURE__ */ (0, import_jsx_runtime129.jsxs)(Fieldset, { children: [
            /* @__PURE__ */ (0, import_jsx_runtime129.jsxs)(InputGroup, { children: [
              /* @__PURE__ */ (0, import_jsx_runtime129.jsx)(Label, { htmlFor: taskIdentifier.id, children: "Task" }),
              /* @__PURE__ */ (0, import_jsx_runtime129.jsx)(
                Select2,
                {
                  ...import_react82.conform.select(taskIdentifier),
                  placeholder: "Select a task",
                  defaultValue: schedule?.taskIdentifier,
                  heading: "Filter...",
                  items: possibleTasks,
                  filter: (task, search) => task.toLowerCase().includes(search.toLowerCase()),
                  dropdownIcon: !0,
                  variant: "tertiary/medium",
                  children: (matches) => /* @__PURE__ */ (0, import_jsx_runtime129.jsx)(import_jsx_runtime129.Fragment, { children: matches?.map((task) => /* @__PURE__ */ (0, import_jsx_runtime129.jsx)(SelectItem2, { value: task, children: task }, task)) })
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime129.jsx)(FormError, { id: taskIdentifier.errorId, children: taskIdentifier.error })
            ] }),
            showGenerateField && /* @__PURE__ */ (0, import_jsx_runtime129.jsx)(AIGeneratedCronField, { onSuccess: setCronPattern }),
            /* @__PURE__ */ (0, import_jsx_runtime129.jsxs)(InputGroup, { children: [
              /* @__PURE__ */ (0, import_jsx_runtime129.jsx)(
                Label,
                {
                  htmlFor: cron.id,
                  tooltip: /* @__PURE__ */ (0, import_jsx_runtime129.jsxs)("div", { className: "spacy-y-3", children: [
                    /* @__PURE__ */ (0, import_jsx_runtime129.jsx)(Paragraph, { variant: "extra-small", children: "We support this CRON format:" }),
                    /* @__PURE__ */ (0, import_jsx_runtime129.jsx)("code", { children: /* @__PURE__ */ (0, import_jsx_runtime129.jsx)("pre", { children: cronFormat }) }),
                    /* @__PURE__ */ (0, import_jsx_runtime129.jsx)(Paragraph, { variant: "extra-small", children: '"L" means the last.' })
                  ] }),
                  children: "CRON pattern (UTC)"
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime129.jsx)(
                Input,
                {
                  ...import_react82.conform.input(cron, { type: "text" }),
                  placeholder: "? ? ? ? ?",
                  required: !0,
                  value: cronPattern,
                  onChange: (e) => {
                    setCronPattern(e.target.value);
                  }
                }
              ),
              cronPatternResult === void 0 ? /* @__PURE__ */ (0, import_jsx_runtime129.jsx)(Hint, { children: "Enter a CRON pattern or use natural language above." }) : cronPatternResult.isValid ? /* @__PURE__ */ (0, import_jsx_runtime129.jsx)(ValidCronMessage, { isValid: !0, message: `${cronPatternResult.description}.` }) : /* @__PURE__ */ (0, import_jsx_runtime129.jsx)(ValidCronMessage, { isValid: !1, message: cronPatternResult.error })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime129.jsxs)(InputGroup, { children: [
              /* @__PURE__ */ (0, import_jsx_runtime129.jsx)(Label, { htmlFor: timezone.id, children: "Timezone" }),
              /* @__PURE__ */ (0, import_jsx_runtime129.jsx)(
                Select2,
                {
                  ...import_react82.conform.select(timezone),
                  placeholder: "Select a timezone",
                  defaultValue: selectedTimezone,
                  value: selectedTimezone,
                  setValue: (e) => {
                    Array.isArray(e) || setSelectedTimezone(e);
                  },
                  items: possibleTimezones,
                  filter: { keys: [(item) => item.replace(/\//g, " ").replace(/_/g, " ")] },
                  dropdownIcon: !0,
                  variant: "tertiary/medium",
                  children: (matches) => /* @__PURE__ */ (0, import_jsx_runtime129.jsx)(TimezoneList, { timezones: matches })
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime129.jsx)(Hint, { children: isUtc ? "UTC will not change with daylight savings time." : "This will automatically adjust for daylight savings time." }),
              /* @__PURE__ */ (0, import_jsx_runtime129.jsx)(FormError, { id: timezone.errorId, children: timezone.error })
            ] }),
            nextRuns !== void 0 && /* @__PURE__ */ (0, import_jsx_runtime129.jsxs)("div", { className: "flex flex-col gap-1", children: [
              /* @__PURE__ */ (0, import_jsx_runtime129.jsx)(Header3, { children: "Next 5 runs" }),
              /* @__PURE__ */ (0, import_jsx_runtime129.jsxs)(Table, { children: [
                /* @__PURE__ */ (0, import_jsx_runtime129.jsx)(TableHeader, { children: /* @__PURE__ */ (0, import_jsx_runtime129.jsxs)(TableRow, { children: [
                  !isUtc && /* @__PURE__ */ (0, import_jsx_runtime129.jsx)(TableHeaderCell, { children: selectedTimezone }),
                  /* @__PURE__ */ (0, import_jsx_runtime129.jsx)(TableHeaderCell, { children: "UTC" })
                ] }) }),
                /* @__PURE__ */ (0, import_jsx_runtime129.jsx)(TableBody, { children: nextRuns.map((run, index) => /* @__PURE__ */ (0, import_jsx_runtime129.jsxs)(TableRow, { children: [
                  !isUtc && /* @__PURE__ */ (0, import_jsx_runtime129.jsx)(TableCell, { children: /* @__PURE__ */ (0, import_jsx_runtime129.jsx)(DateTime, { date: run, timeZone: selectedTimezone }) }),
                  /* @__PURE__ */ (0, import_jsx_runtime129.jsx)(TableCell, { children: /* @__PURE__ */ (0, import_jsx_runtime129.jsx)(DateTime, { date: run, timeZone: "UTC" }) })
                ] }, index)) })
              ] })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime129.jsxs)(InputGroup, { children: [
              /* @__PURE__ */ (0, import_jsx_runtime129.jsx)(Label, { children: "Environments" }),
              /* @__PURE__ */ (0, import_jsx_runtime129.jsx)("div", { className: "flex flex-wrap items-center gap-2", children: possibleEnvironments.map((environment) => /* @__PURE__ */ (0, import_jsx_runtime129.jsx)(
                CheckboxWithLabel,
                {
                  id: environment.id,
                  value: environment.id,
                  name: "environments",
                  type: "radio",
                  label: /* @__PURE__ */ (0, import_jsx_runtime129.jsx)(
                    "span",
                    {
                      className: cn("text-xs uppercase", environmentTextClassName(environment)),
                      children: environmentTitle(environment, environment.userName)
                    }
                  ),
                  defaultChecked: schedule?.instances.find((i) => i.environmentId === environment.id) !== void 0,
                  variant: "button"
                },
                environment.id
              )) }),
              /* @__PURE__ */ (0, import_jsx_runtime129.jsx)(Hint, { children: "Select all the environments where you want this schedule to run. Note that scheduled tasks in dev environments will only run while you are connected with the dev CLI" }),
              /* @__PURE__ */ (0, import_jsx_runtime129.jsx)(FormError, { id: environments2.errorId, children: environments2.error })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime129.jsxs)(InputGroup, { children: [
              /* @__PURE__ */ (0, import_jsx_runtime129.jsx)(Label, { required: !1, htmlFor: externalId.id, children: "External ID" }),
              /* @__PURE__ */ (0, import_jsx_runtime129.jsx)(
                Input,
                {
                  ...import_react82.conform.input(externalId, { type: "text" }),
                  placeholder: "Optionally specify your own ID, e.g. user id",
                  defaultValue: schedule?.externalId ?? void 0
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime129.jsxs)(Hint, { children: [
                "Optionally, you can specify your own IDs (like a user ID) and then use it inside the run function of your task. This allows you to have per-user CRON tasks.",
                " ",
                /* @__PURE__ */ (0, import_jsx_runtime129.jsx)(TextLink, { to: docsPath("v3/tasks-scheduled"), children: "Read the docs." })
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime129.jsx)(FormError, { id: externalId.errorId, children: externalId.error })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime129.jsxs)(InputGroup, { children: [
              /* @__PURE__ */ (0, import_jsx_runtime129.jsx)(Label, { required: !1, htmlFor: deduplicationKey.id, children: "Deduplication key" }),
              /* @__PURE__ */ (0, import_jsx_runtime129.jsx)(
                Input,
                {
                  ...import_react82.conform.input(deduplicationKey, { type: "text" }),
                  disabled: schedule !== void 0,
                  defaultValue: schedule?.userProvidedDeduplicationKey ? schedule?.deduplicationKey : void 0
                }
              ),
              schedule && /* @__PURE__ */ (0, import_jsx_runtime129.jsx)(Paragraph, { variant: "small", children: "You can't edit the Deduplication key on an existing schedule." }),
              /* @__PURE__ */ (0, import_jsx_runtime129.jsx)(Hint, { children: "Optionally specify a key, you can only create one schedule with this key. This is very useful when using the SDK and you don't want to create duplicate schedules for a user." }),
              /* @__PURE__ */ (0, import_jsx_runtime129.jsx)(FormError, { id: deduplicationKey.errorId, children: deduplicationKey.error })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime129.jsx)(FormError, { children: form.error })
          ] })
        ] }) }),
        /* @__PURE__ */ (0, import_jsx_runtime129.jsxs)("div", { className: "flex items-center justify-between gap-2 border-t border-grid-dimmed px-2", children: [
          /* @__PURE__ */ (0, import_jsx_runtime129.jsx)("div", { className: "flex items-center gap-4", children: /* @__PURE__ */ (0, import_jsx_runtime129.jsx)(
            LinkButton,
            {
              to: `${v3SchedulesPath(organization, project)}${location.search}`,
              variant: "minimal/medium",
              children: "Cancel"
            }
          ) }),
          /* @__PURE__ */ (0, import_jsx_runtime129.jsx)("div", { className: "flex items-center gap-4", children: /* @__PURE__ */ (0, import_jsx_runtime129.jsx)(
            Button,
            {
              variant: "primary/medium",
              type: "submit",
              disabled: isLoading2,
              shortcut: { key: "enter", modifiers: ["meta"] },
              LeadingIcon: isLoading2 ? "spinner" : void 0,
              children: buttonText(mode2, isLoading2)
            }
          ) })
        ] })
      ]
    }
  );
}
function buttonText(mode2, isLoading2) {
  switch (mode2) {
    case "edit":
      return isLoading2 ? "Updating schedule" : "Update schedule";
    case "new":
      return isLoading2 ? "Creating schedule" : "Create schedule";
  }
}
function ValidCronMessage({ isValid, message }) {
  return /* @__PURE__ */ (0, import_jsx_runtime129.jsxs)(Paragraph, { variant: "small", children: [
    /* @__PURE__ */ (0, import_jsx_runtime129.jsxs)("span", { className: "mr-1", children: [
      isValid ? /* @__PURE__ */ (0, import_jsx_runtime129.jsx)(import_solid42.CheckIcon, { className: "-mt-0.5 mr-1 inline-block h-4 w-4 text-success" }) : /* @__PURE__ */ (0, import_jsx_runtime129.jsx)(import_solid42.XMarkIcon, { className: "-mt-0.5 mr-1 inline-block h-4 w-4 text-error" }),
      /* @__PURE__ */ (0, import_jsx_runtime129.jsx)("span", { className: isValid ? "text-success" : "text-error", children: isValid ? "Valid pattern:" : "Invalid pattern:" })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime129.jsx)("span", { children: message })
  ] });
}

// app/routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.schedules.edit.$scheduleParam/route.tsx
var import_jsx_runtime130 = require("react/jsx-runtime"), loader24 = async ({ request, params }) => {
  let userId = await requireUserId(request), { projectParam: projectParam2, organizationSlug, scheduleParam } = v3ScheduleParams.parse(params), result = await new EditSchedulePresenter().call({
    userId,
    projectSlug: projectParam2,
    friendlyId: scheduleParam
  });
  return (0, import_remix_typedjson29.typedjson)({ ...result, showGenerateField: humanToCronSupported });
};
function Page17() {
  let { schedule, possibleTasks, possibleEnvironments, possibleTimezones, showGenerateField } = (0, import_remix_typedjson29.useTypedLoaderData)();
  return /* @__PURE__ */ (0, import_jsx_runtime130.jsx)(
    UpsertScheduleForm,
    {
      schedule,
      possibleTasks,
      possibleEnvironments,
      possibleTimezones,
      showGenerateField
    }
  );
}

// app/routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.traces.$traceId.spans.$spanId/route.tsx
var route_exports29 = {};
__export(route_exports29, {
  loader: () => loader25
});
var import_server_runtime8 = require("@remix-run/server-runtime"), import_zod93 = require("zod");
var ParamsSchema2 = import_zod93.z.object({
  organizationSlug: import_zod93.z.string(),
  projectParam: import_zod93.z.string(),
  traceId: import_zod93.z.string(),
  spanId: import_zod93.z.string()
});
async function loader25({ params, request }) {
  let userId = await requireUserId(request), validatedParams = ParamsSchema2.parse(params), trace9 = await eventRepository.getTraceSummary(validatedParams.traceId);
  return trace9 ? (0, import_server_runtime8.redirect)(
    v3RunSpanPath(
      { slug: validatedParams.organizationSlug },
      { slug: validatedParams.projectParam },
      { friendlyId: trace9.rootSpan.runId },
      { spanId: validatedParams.spanId }
    )
  ) : new Response("Not found", { status: 404 });
}

// app/routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.deployments.$deploymentParam/route.tsx
var route_exports30 = {};
__export(route_exports30, {
  default: () => Page18,
  loader: () => loader26
});
var import_react85 = require("@remix-run/react"), import_remix_typedjson30 = require("remix-typedjson");

// app/components/admin/debugTooltip.tsx
var import_solid43 = require("@heroicons/react/20/solid");
var import_jsx_runtime131 = require("react/jsx-runtime");
function AdminDebugTooltip({ children }) {
  let hasAdminAccess = useHasAdminAccess(), isImpersonating = useIsImpersonating();
  return !hasAdminAccess && !isImpersonating ? null : /* @__PURE__ */ (0, import_jsx_runtime131.jsx)(TooltipProvider, { children: /* @__PURE__ */ (0, import_jsx_runtime131.jsxs)(Tooltip, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime131.jsx)(TooltipTrigger, { children: /* @__PURE__ */ (0, import_jsx_runtime131.jsx)(import_solid43.ShieldCheckIcon, { className: "size-5" }) }),
    /* @__PURE__ */ (0, import_jsx_runtime131.jsx)(TooltipContent, { className: "flex max-h-[90vh] items-center gap-1 overflow-y-auto", children })
  ] }) });
}

// app/components/runs/v3/DeploymentError.tsx
var import_jsx_runtime132 = require("react/jsx-runtime");
function DeploymentError({ errorData }) {
  return /* @__PURE__ */ (0, import_jsx_runtime132.jsxs)("div", { className: "flex flex-col gap-2 rounded-sm border border-rose-500/50 p-3", children: [
    /* @__PURE__ */ (0, import_jsx_runtime132.jsx)(DeploymentErrorHeader, { title: errorData.name ?? "Error", titleClassName: "text-rose-500" }),
    errorData.message && /* @__PURE__ */ (0, import_jsx_runtime132.jsx)(Callout, { variant: "error", children: errorData.message }),
    errorData.stack && /* @__PURE__ */ (0, import_jsx_runtime132.jsx)(
      CodeBlock3,
      {
        showCopyButton: !1,
        showLineNumbers: !1,
        code: errorData.stack,
        maxLines: 20
      }
    ),
    errorData.stderr && /* @__PURE__ */ (0, import_jsx_runtime132.jsxs)(import_jsx_runtime132.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime132.jsx)(DeploymentErrorHeader, { title: "Error logs:" }),
      /* @__PURE__ */ (0, import_jsx_runtime132.jsx)(
        CodeBlock3,
        {
          showCopyButton: !1,
          showLineNumbers: !1,
          code: errorData.stderr,
          maxLines: 20
        }
      )
    ] })
  ] });
}
function DeploymentErrorHeader({
  title: title2,
  titleClassName
}) {
  return /* @__PURE__ */ (0, import_jsx_runtime132.jsx)("div", { className: "flex items-center justify-between", children: /* @__PURE__ */ (0, import_jsx_runtime132.jsx)(Header2, { className: titleClassName, children: title2 }) });
}

// app/components/runs/v3/DeploymentStatus.tsx
var import_solid44 = require("@heroicons/react/20/solid"), import_assert_never7 = __toESM(require("assert-never"));
var import_jsx_runtime133 = require("react/jsx-runtime");
function DeploymentStatus({
  status,
  className
}) {
  return /* @__PURE__ */ (0, import_jsx_runtime133.jsxs)("span", { className: cn("flex items-center gap-1", className), children: [
    /* @__PURE__ */ (0, import_jsx_runtime133.jsx)(DeploymentStatusIcon, { status, className: "h-4 w-4" }),
    /* @__PURE__ */ (0, import_jsx_runtime133.jsx)(DeploymentStatusLabel, { status })
  ] });
}
function DeploymentStatusLabel({ status }) {
  return /* @__PURE__ */ (0, import_jsx_runtime133.jsx)("span", { className: deploymentStatusClassNameColor(status), children: deploymentStatusTitle(status) });
}
function DeploymentStatusIcon({
  status,
  className
}) {
  switch (status) {
    case "PENDING":
    case "BUILDING":
    case "DEPLOYING":
      return /* @__PURE__ */ (0, import_jsx_runtime133.jsx)(Spinner, { className: cn(deploymentStatusClassNameColor(status), className) });
    case "DEPLOYED":
      return /* @__PURE__ */ (0, import_jsx_runtime133.jsx)(import_solid44.CheckCircleIcon, { className: cn(deploymentStatusClassNameColor(status), className) });
    case "CANCELED":
      return /* @__PURE__ */ (0, import_jsx_runtime133.jsx)(import_solid44.NoSymbolIcon, { className: cn(deploymentStatusClassNameColor(status), className) });
    case "FAILED":
      return /* @__PURE__ */ (0, import_jsx_runtime133.jsx)(import_solid44.XCircleIcon, { className: cn(deploymentStatusClassNameColor(status), className) });
    case "TIMED_OUT":
      return /* @__PURE__ */ (0, import_jsx_runtime133.jsx)(
        import_solid44.ExclamationTriangleIcon,
        {
          className: cn(deploymentStatusClassNameColor(status), className)
        }
      );
    default:
      (0, import_assert_never7.default)(status);
  }
}
function deploymentStatusClassNameColor(status) {
  switch (status) {
    case "PENDING":
    case "BUILDING":
    case "DEPLOYING":
      return "text-pending";
    case "TIMED_OUT":
    case "CANCELED":
      return "text-charcoal-500";
    case "DEPLOYED":
      return "text-success";
    case "FAILED":
      return "text-error";
    default:
      (0, import_assert_never7.default)(status);
  }
}
function deploymentStatusTitle(status) {
  switch (status) {
    case "PENDING":
      return "Pending\u2026";
    case "BUILDING":
      return "Building\u2026";
    case "DEPLOYING":
      return "Deploying\u2026";
    case "DEPLOYED":
      return "Deployed";
    case "CANCELED":
      return "Canceled";
    case "TIMED_OUT":
      return "Timed out";
    case "FAILED":
      return "Failed";
    default:
      (0, import_assert_never7.default)(status);
  }
}

// app/routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.deployments.$deploymentParam/route.tsx
var import_jsx_runtime134 = require("react/jsx-runtime"), loader26 = async ({ request, params }) => {
  let userId = await requireUserId(request), { organizationSlug, projectParam: projectParam2, deploymentParam } = v3DeploymentParams.parse(params);
  try {
    let presenter = new DeploymentPresenter(), { deployment } = await presenter.call({
      userId,
      organizationSlug,
      projectSlug: projectParam2,
      deploymentShortCode: deploymentParam
    });
    return (0, import_remix_typedjson30.typedjson)({ deployment });
  } catch (error) {
    throw console.error(error), new Response(void 0, {
      status: 400,
      statusText: "Something went wrong, if this problem persists please contact support."
    });
  }
};
function Page18() {
  let organization = useOrganization(), project = useProject(), location = (0, import_react85.useLocation)(), user = useUser(), { deployment } = (0, import_remix_typedjson30.useTypedLoaderData)(), page = new URLSearchParams(location.search).get("page"), usernameForEnv = user.id !== deployment.environment.userId ? deployment.environment.userName : void 0;
  return /* @__PURE__ */ (0, import_jsx_runtime134.jsxs)("div", { className: "grid h-full max-h-full grid-rows-[2.5rem_1fr] overflow-hidden bg-background-bright", children: [
    /* @__PURE__ */ (0, import_jsx_runtime134.jsxs)("div", { className: "mx-3 flex items-center justify-between gap-2 border-b border-grid-dimmed", children: [
      /* @__PURE__ */ (0, import_jsx_runtime134.jsxs)(Header2, { className: cn("whitespace-nowrap"), children: [
        "Deploy: ",
        deployment.shortCode
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime134.jsx)(AdminDebugTooltip, { children: /* @__PURE__ */ (0, import_jsx_runtime134.jsxs)(PropertyTable, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime134.jsx)(Property, { label: "ID", children: /* @__PURE__ */ (0, import_jsx_runtime134.jsx)("div", { className: "flex items-center gap-2", children: /* @__PURE__ */ (0, import_jsx_runtime134.jsx)(Paragraph, { variant: "extra-small/bright/mono", children: deployment.id }) }) }),
        /* @__PURE__ */ (0, import_jsx_runtime134.jsx)(Property, { label: "Project ID", children: /* @__PURE__ */ (0, import_jsx_runtime134.jsx)("div", { className: "flex items-center gap-2", children: /* @__PURE__ */ (0, import_jsx_runtime134.jsx)(Paragraph, { variant: "extra-small/bright/mono", children: deployment.projectId }) }) }),
        /* @__PURE__ */ (0, import_jsx_runtime134.jsx)(Property, { label: "Org ID", children: /* @__PURE__ */ (0, import_jsx_runtime134.jsx)("div", { className: "flex items-center gap-2", children: /* @__PURE__ */ (0, import_jsx_runtime134.jsx)(Paragraph, { variant: "extra-small/bright/mono", children: deployment.organizationId }) }) }),
        deployment.imageReference && /* @__PURE__ */ (0, import_jsx_runtime134.jsx)(Property, { label: "Image", children: /* @__PURE__ */ (0, import_jsx_runtime134.jsx)("div", { className: "flex items-center gap-2", children: /* @__PURE__ */ (0, import_jsx_runtime134.jsx)(Paragraph, { variant: "extra-small/bright/mono", children: deployment.imageReference }) }) }),
        deployment.externalBuildData && /* @__PURE__ */ (0, import_jsx_runtime134.jsx)(Property, { label: "Build Server", children: /* @__PURE__ */ (0, import_jsx_runtime134.jsx)("div", { className: "flex items-center gap-2", children: /* @__PURE__ */ (0, import_jsx_runtime134.jsx)(
          import_react85.Link,
          {
            to: `/resources/${deployment.projectId}/deployments/${deployment.id}/logs`,
            className: "extra-small/bright/mono underline",
            children: deployment.externalBuildData.buildId
          }
        ) }) })
      ] }) }),
      /* @__PURE__ */ (0, import_jsx_runtime134.jsx)(
        LinkButton,
        {
          to: `${v3DeploymentsPath(organization, project)}${page ? `?page=${page}` : ""}`,
          variant: "minimal/medium",
          LeadingIcon: ExitIcon,
          shortcut: { key: "esc" }
        }
      )
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime134.jsx)("div", { className: "overflow-y-auto px-3 pt-4 scrollbar-thin scrollbar-track-transparent scrollbar-thumb-charcoal-600", children: /* @__PURE__ */ (0, import_jsx_runtime134.jsxs)("div", { className: "flex flex-col gap-4", children: [
      /* @__PURE__ */ (0, import_jsx_runtime134.jsxs)(PropertyTable, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime134.jsx)(Property, { label: "Deploy", children: /* @__PURE__ */ (0, import_jsx_runtime134.jsxs)("div", { className: "flex items-center gap-2", children: [
          /* @__PURE__ */ (0, import_jsx_runtime134.jsx)(Paragraph, { variant: "small/bright", children: deployment.shortCode }),
          deployment.label && /* @__PURE__ */ (0, import_jsx_runtime134.jsx)(Badge, { variant: "outline-rounded", children: deployment.label })
        ] }) }),
        /* @__PURE__ */ (0, import_jsx_runtime134.jsx)(Property, { label: "Environment", children: /* @__PURE__ */ (0, import_jsx_runtime134.jsx)(EnvironmentLabel, { environment: deployment.environment, userName: usernameForEnv }) }),
        /* @__PURE__ */ (0, import_jsx_runtime134.jsx)(Property, { label: "Version", children: deployment.version }),
        /* @__PURE__ */ (0, import_jsx_runtime134.jsx)(Property, { label: "Status", children: /* @__PURE__ */ (0, import_jsx_runtime134.jsx)(DeploymentStatus, { status: deployment.status, className: "text-sm" }) }),
        /* @__PURE__ */ (0, import_jsx_runtime134.jsx)(Property, { label: "Tasks", children: deployment.tasks ? deployment.tasks.length : "\u2013" }),
        /* @__PURE__ */ (0, import_jsx_runtime134.jsx)(Property, { label: "SDK Version", children: deployment.sdkVersion ? deployment.sdkVersion : "\u2013" }),
        /* @__PURE__ */ (0, import_jsx_runtime134.jsx)(Property, { label: "Started at", children: /* @__PURE__ */ (0, import_jsx_runtime134.jsxs)(Paragraph, { variant: "small/bright", children: [
          /* @__PURE__ */ (0, import_jsx_runtime134.jsx)(DateTimeAccurate, { date: deployment.createdAt }),
          " UTC"
        ] }) }),
        /* @__PURE__ */ (0, import_jsx_runtime134.jsx)(Property, { label: "Deployed at", children: /* @__PURE__ */ (0, import_jsx_runtime134.jsx)(Paragraph, { variant: "small/bright", children: deployment.deployedAt ? /* @__PURE__ */ (0, import_jsx_runtime134.jsxs)(import_jsx_runtime134.Fragment, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime134.jsx)(DateTimeAccurate, { date: deployment.deployedAt }),
          " UTC"
        ] }) : "\u2013" }) }),
        /* @__PURE__ */ (0, import_jsx_runtime134.jsx)(Property, { label: "Deployed by", children: deployment.deployedBy ? /* @__PURE__ */ (0, import_jsx_runtime134.jsxs)("div", { className: "flex items-center gap-1", children: [
          /* @__PURE__ */ (0, import_jsx_runtime134.jsx)(
            UserAvatar,
            {
              avatarUrl: deployment.deployedBy.avatarUrl,
              name: deployment.deployedBy.name ?? deployment.deployedBy.displayName,
              className: "h-4 w-4"
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime134.jsx)(Paragraph, { variant: "small", children: deployment.deployedBy.name ?? deployment.deployedBy.displayName })
        ] }) : "\u2013" })
      ] }),
      deployment.tasks ? /* @__PURE__ */ (0, import_jsx_runtime134.jsx)("div", { className: "divide-y divide-charcoal-800 overflow-y-auto scrollbar-thin scrollbar-track-transparent scrollbar-thumb-charcoal-600", children: /* @__PURE__ */ (0, import_jsx_runtime134.jsxs)(Table, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime134.jsx)(TableHeader, { children: /* @__PURE__ */ (0, import_jsx_runtime134.jsxs)(TableRow, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime134.jsx)(TableHeaderCell, { className: "px-2", children: "Task" }),
          /* @__PURE__ */ (0, import_jsx_runtime134.jsx)(TableHeaderCell, { className: "px-2", children: "File path" })
        ] }) }),
        /* @__PURE__ */ (0, import_jsx_runtime134.jsx)(TableBody, { children: deployment.tasks.map((t) => /* @__PURE__ */ (0, import_jsx_runtime134.jsxs)(TableRow, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime134.jsx)(TableCell, { children: /* @__PURE__ */ (0, import_jsx_runtime134.jsxs)("div", { className: "inline-flex flex-col gap-0.5", children: [
            /* @__PURE__ */ (0, import_jsx_runtime134.jsx)(
              TaskFunctionName,
              {
                variant: "extra-small",
                functionName: t.exportName,
                className: "-ml-1 inline-flex"
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime134.jsx)(Paragraph, { variant: "extra-small", className: "text-text-dimmed", children: t.slug })
          ] }) }),
          /* @__PURE__ */ (0, import_jsx_runtime134.jsx)(TableCell, { children: t.filePath })
        ] }, t.slug)) })
      ] }) }) : deployment.errorData ? /* @__PURE__ */ (0, import_jsx_runtime134.jsx)(DeploymentError, { errorData: deployment.errorData }) : null
    ] }) })
  ] });
}

// app/routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.alerts.new.connect-to-slack.ts
var app_orgs_organizationSlug_projects_v3_projectParam_alerts_new_connect_to_slack_exports = {};
__export(app_orgs_organizationSlug_projects_v3_projectParam_alerts_new_connect_to_slack_exports, {
  loader: () => loader27
});
async function loader27({ request, params }) {
  let userId = await requireUserId(request), { organizationSlug, projectParam: projectParam2 } = ProjectParamSchema.parse(params), project = await findProjectBySlug(organizationSlug, projectParam2, userId);
  if (!project)
    throw new Response("Project not found", { status: 404 });
  return await prisma.organizationIntegration.findFirst({
    where: {
      service: "SLACK",
      organizationId: project.organizationId
    }
  }) ? redirectWithSuccessMessage(
    `${v3NewProjectAlertPath({ slug: organizationSlug }, project)}?option=slack`,
    request,
    "Successfully connected your Slack workspace"
  ) : await OrgIntegrationRepository.redirectToAuthService(
    "SLACK",
    project.organizationId,
    request,
    v3NewProjectAlertPathConnectToSlackPath({ slug: organizationSlug }, project)
  );
}

// app/routes/_app.orgs.$organizationSlug.projects.$projectParam.jobs.$jobParam.runs.$runParam/route.tsx
var route_exports31 = {};
__export(route_exports31, {
  default: () => Page19,
  loader: () => loader28
});
var import_react86 = require("@remix-run/react"), import_react87 = require("react"), import_remix_typedjson31 = require("remix-typedjson");
var import_jsx_runtime135 = require("react/jsx-runtime"), loader28 = async ({ request, params }) => {
  let userId = await requireUserId(request), { runParam: runParam2 } = RunParamsSchema.parse(params), run = await new RunPresenter().call({
    userId,
    id: runParam2
  });
  if (!run)
    throw new Response(null, {
      status: 404
    });
  return (0, import_remix_typedjson31.typedjson)({
    run
  });
};
function Page19() {
  let { run } = (0, import_remix_typedjson31.useTypedLoaderData)(), organization = useOrganization(), project = useProject(), job = useJob(), user = useUser(), revalidator = (0, import_react86.useRevalidator)(), events = useEventSource2(runStreamingPath(organization, project, job, run), {
    event: "message",
    disabled: !!run.completedAt
  });
  return (0, import_react87.useEffect)(() => {
    events !== null && revalidator.revalidate();
  }, [events]), /* @__PURE__ */ (0, import_jsx_runtime135.jsx)(
    RunOverview,
    {
      run,
      trigger: job.event,
      showRerun: !0,
      paths: {
        back: jobPath(organization, project, job),
        run: runPath(organization, project, job, run),
        runsPath: jobRunsParentPath(organization, project, job)
      },
      currentUser: user
    }
  );
}

// app/routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.environment-variables.new/route.tsx
var route_exports32 = {};
__export(route_exports32, {
  action: () => action7,
  default: () => Page20,
  loader: () => loader29
});
var import_react89 = require("@conform-to/react"), import_zod95 = require("@conform-to/zod"), import_solid45 = require("@heroicons/react/20/solid"), import_react90 = require("@remix-run/react"), import_server_runtime9 = require("@remix-run/server-runtime"), import_react91 = require("react"), import_remix_typedjson32 = require("remix-typedjson"), import_zod96 = require("zod");

// app/components/primitives/Switch.tsx
var React14 = __toESM(require("react")), SwitchPrimitives = __toESM(require("@radix-ui/react-switch"));
var import_jsx_runtime136 = require("react/jsx-runtime"), variations3 = {
  large: {
    container: "flex items-center gap-x-2 rounded-md hover:bg-tertiary p-2 transition",
    root: "h-6 w-11",
    thumb: "h-5 w-5 data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0",
    text: "text-sm text-charcoal-400 group-hover:text-charcoal-200 transition"
  },
  small: {
    container: "flex items-center gap-x-1.5 rounded hover:bg-tertiary pr-1 py-[0.1rem] pl-1.5 transition",
    root: "h-3 w-6",
    thumb: "h-2.5 w-2.5 data-[state=checked]:translate-x-2.5 data-[state=unchecked]:translate-x-0",
    text: "text-xs text-charcoal-400 group-hover:text-charcoal-200 hover:cursor-pointer transition"
  }
}, Switch = React14.forwardRef(
  ({ className, variant: variant3, label, ...props }, ref) => {
    let { container: container2, root, thumb, text } = variations3[variant3];
    return /* @__PURE__ */ (0, import_jsx_runtime136.jsxs)(SwitchPrimitives.Root, { className: cn("group", container2, className), ...props, ref, children: [
      label ? /* @__PURE__ */ (0, import_jsx_runtime136.jsx)("label", { className: cn("whitespace-nowrap", text), children: typeof label == "string" ? /* @__PURE__ */ (0, import_jsx_runtime136.jsx)("span", { children: label }) : label }) : null,
      /* @__PURE__ */ (0, import_jsx_runtime136.jsx)(
        "div",
        {
          className: cn(
            "group-focus-visible:ring-ring group-focus-visible:ring-offset-background peer inline-flex shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors group-focus-visible:ring-2 group-focus-visible:ring-offset-2 group-disabled:cursor-not-allowed group-disabled:opacity-50 group-data-[state=checked]:bg-secondary group-data-[state=unchecked]:bg-charcoal-700 focus-visible:outline-none",
            root
          ),
          children: /* @__PURE__ */ (0, import_jsx_runtime136.jsx)(
            SwitchPrimitives.Thumb,
            {
              className: cn(
                thumb,
                "pointer-events-none block rounded-full bg-charcoal-200 shadow-lg ring-0 transition group-data-[state=checked]:bg-charcoal-700"
              )
            }
          )
        }
      )
    ] });
  }
);

// app/hooks/useList.tsx
var import_react88 = require("react");
function reducer(state, action106) {
  switch (action106.type) {
    case "append":
      return { items: [...state.items, ...action106.items] };
    case "update":
      return {
        items: state.items.map((v, i) => i === action106.index ? action106.item : v)
      };
    case "delete":
      return { items: state.items.filter((_, i) => i !== action106.index) };
    case "insertAfter":
      return {
        items: [
          ...state.items.slice(0, action106.index + 1),
          ...action106.items,
          ...state.items.slice(action106.index + 1)
        ]
      };
  }
}
function useList(initialItems) {
  let [state, dispatch] = (0, import_react88.useReducer)(reducer, {
    items: initialItems
  });
  return {
    items: state.items,
    append: (items) => dispatch({ type: "append", items }),
    update: (index, item) => dispatch({ type: "update", index, item }),
    delete: (index) => dispatch({ type: "delete", index }),
    insertAfter: (index, items) => dispatch({ type: "insertAfter", index, items })
  };
}

// app/presenters/v3/EnvironmentVariablesPresenter.server.ts
var EnvironmentVariablesPresenter = class {
  #prismaClient;
  constructor(prismaClient = prisma) {
    this.#prismaClient = prismaClient;
  }
  async call({ userId, projectSlug }) {
    let project = await this.#prismaClient.project.findUnique({
      select: {
        id: !0
      },
      where: {
        slug: projectSlug,
        organization: {
          members: {
            some: {
              userId
            }
          }
        }
      }
    });
    if (!project)
      throw new Error("Project not found");
    let environmentVariables = await this.#prismaClient.environmentVariable.findMany({
      select: {
        id: !0,
        key: !0,
        values: {
          select: {
            id: !0,
            environmentId: !0,
            valueReference: {
              select: {
                key: !0
              }
            }
          }
        }
      },
      where: {
        project: {
          slug: projectSlug,
          organization: {
            members: {
              some: {
                userId
              }
            }
          }
        }
      }
    }), environments2 = await this.#prismaClient.runtimeEnvironment.findMany({
      select: {
        id: !0,
        type: !0,
        orgMember: {
          select: {
            userId: !0
          }
        }
      },
      where: {
        project: {
          slug: projectSlug
        },
        OR: [
          {
            type: {
              in: ["PREVIEW", "STAGING", "PRODUCTION"]
            }
          },
          {
            type: "DEVELOPMENT",
            orgMember: {
              userId
            }
          }
        ]
      }
    }), sortedEnvironments = sortEnvironments(environments2).filter(
      (e) => e.orgMember?.userId === userId || e.orgMember === null
    ), variables = await new EnvironmentVariablesRepository(this.#prismaClient).getProject(project.id);
    return {
      environmentVariables: environmentVariables.map((environmentVariable) => {
        let variable = variables.find((v) => v.key === environmentVariable.key);
        return {
          id: environmentVariable.id,
          key: environmentVariable.key,
          values: sortedEnvironments.reduce((previous, env6) => {
            let val = variable?.values.find((v) => v.environment.id === env6.id);
            return previous[env6.id] = {
              value: val?.value,
              environment: { type: env6.type, id: env6.id }
            }, { ...previous };
          }, {})
        };
      }),
      environments: sortedEnvironments.map((environment) => ({
        id: environment.id,
        type: environment.type
      })),
      hasStaging: environments2.some((environment) => environment.type === "STAGING")
    };
  }
};

// app/v3/environmentVariables/repository.ts
var import_zod94 = require("zod"), EnvironmentVariableKey = import_zod94.z.string().nonempty("Key is required").regex(/^\w+$/, "Keys can only use alphanumeric characters and underscores"), CreateEnvironmentVariables = import_zod94.z.object({
  environmentIds: import_zod94.z.array(import_zod94.z.string()),
  variables: import_zod94.z.array(import_zod94.z.object({ key: EnvironmentVariableKey, value: import_zod94.z.string() }))
}), EditEnvironmentVariable = import_zod94.z.object({
  id: import_zod94.z.string(),
  values: import_zod94.z.array(
    import_zod94.z.object({
      environmentId: import_zod94.z.string(),
      value: import_zod94.z.string()
    })
  ),
  keepEmptyValues: import_zod94.z.boolean().optional()
}), DeleteEnvironmentVariable = import_zod94.z.object({
  id: import_zod94.z.string(),
  environmentId: import_zod94.z.string().optional()
}), DeleteEnvironmentVariableValue = import_zod94.z.object({
  id: import_zod94.z.string(),
  environmentId: import_zod94.z.string()
});

// app/routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.environment-variables.new/route.tsx
var import_dotenv = __toESM(require("dotenv"));
var import_jsx_runtime137 = require("react/jsx-runtime"), loader29 = async ({ request, params }) => {
  let userId = await requireUserId(request), { projectParam: projectParam2 } = ProjectParamSchema.parse(params);
  try {
    let presenter = new EnvironmentVariablesPresenter(), { environments: environments2, hasStaging } = await presenter.call({
      userId,
      projectSlug: projectParam2
    });
    return (0, import_remix_typedjson32.typedjson)({
      environments: environments2,
      hasStaging
    });
  } catch {
    throw new Response(void 0, {
      status: 400,
      statusText: "Something went wrong, if this problem persists please contact support."
    });
  }
}, Variable = import_zod96.z.object({
  key: EnvironmentVariableKey,
  value: import_zod96.z.string().nonempty("Value is required")
}), schema6 = import_zod96.z.object({
  override: import_zod96.z.preprocess((i) => {
    if (i === "true")
      return !0;
    if (i === "false")
      return !1;
  }, import_zod96.z.boolean()),
  environmentIds: import_zod96.z.preprocess((i) => {
    if (typeof i == "string")
      return [i];
    if (Array.isArray(i)) {
      let ids = i.filter((v) => typeof v == "string" && v !== "");
      return ids.length === 0 ? void 0 : ids;
    }
  }, import_zod96.z.array(import_zod96.z.string(), { required_error: "At least one environment is required" })),
  variables: import_zod96.z.preprocess((i) => Array.isArray(i) ? i : [], Variable.array().nonempty("At least one variable is required"))
}), action7 = async ({ request, params }) => {
  let userId = await requireUserId(request), { organizationSlug, projectParam: projectParam2 } = ProjectParamSchema.parse(params);
  if (request.method.toUpperCase() !== "POST")
    return { status: 405, body: "Method Not Allowed" };
  let formData = await request.formData(), submission = (0, import_zod95.parse)(formData, { schema: schema6 });
  if (!submission.value)
    return (0, import_server_runtime9.json)(submission);
  let project = await prisma.project.findUnique({
    where: {
      slug: params.projectParam,
      organization: {
        members: {
          some: {
            userId
          }
        }
      }
    },
    select: {
      id: !0
    }
  });
  if (!project)
    return submission.error.key = "Project not found", (0, import_server_runtime9.json)(submission);
  let result = await new EnvironmentVariablesRepository(prisma).create(project.id, submission.value);
  if (!result.success) {
    if (result.variableErrors)
      for (let { key, error } of result.variableErrors) {
        let index = submission.value.variables.findIndex((v) => v.key === key);
        index !== -1 && (submission.error[`variables[${index}].key`] = error);
      }
    else
      submission.error.variables = result.error;
    return (0, import_server_runtime9.json)(submission);
  }
  return (0, import_remix_typedjson32.redirect)(v3EnvironmentVariablesPath({ slug: organizationSlug }, { slug: projectParam2 }));
};
function Page20() {
  let [isOpen, setIsOpen] = (0, import_react91.useState)(!1), { environments: environments2, hasStaging } = (0, import_remix_typedjson32.useTypedLoaderData)(), lastSubmission = (0, import_react90.useActionData)(), navigation = (0, import_react90.useNavigation)(), navigate = (0, import_react90.useNavigate)(), organization = useOrganization(), project = useProject(), isLoading2 = navigation.state !== "idle" && navigation.formMethod === "post", [form, { environmentIds, variables }] = (0, import_react89.useForm)({
    id: "create-environment-variables",
    // TODO: type this
    lastSubmission,
    onValidate({ formData }) {
      return (0, import_zod95.parse)(formData, { schema: schema6 });
    },
    shouldRevalidate: "onSubmit"
  }), [revealAll, setRevealAll] = (0, import_react91.useState)(!1);
  return (0, import_react91.useEffect)(() => {
    setIsOpen(!0);
  }, []), /* @__PURE__ */ (0, import_jsx_runtime137.jsx)(
    Dialog,
    {
      open: isOpen,
      onOpenChange: (o) => {
        o || navigate(v3EnvironmentVariablesPath(organization, project));
      },
      children: /* @__PURE__ */ (0, import_jsx_runtime137.jsxs)(DialogContent, { className: "md:max-w-2xl lg:max-w-3xl", children: [
        /* @__PURE__ */ (0, import_jsx_runtime137.jsx)(DialogHeader, { children: "New environment variables" }),
        /* @__PURE__ */ (0, import_jsx_runtime137.jsx)(
          import_react90.Form,
          {
            method: "post",
            ...form.props,
            className: "max-h-[70vh] overflow-y-auto scrollbar-thin scrollbar-track-transparent scrollbar-thumb-charcoal-600",
            children: /* @__PURE__ */ (0, import_jsx_runtime137.jsxs)(Fieldset, { className: "mt-2", children: [
              /* @__PURE__ */ (0, import_jsx_runtime137.jsxs)(InputGroup, { fullWidth: !0, children: [
                /* @__PURE__ */ (0, import_jsx_runtime137.jsx)(Label, { children: "Environments" }),
                /* @__PURE__ */ (0, import_jsx_runtime137.jsxs)("div", { className: "flex items-center gap-2", children: [
                  environments2.map((environment) => /* @__PURE__ */ (0, import_jsx_runtime137.jsx)(
                    CheckboxWithLabel,
                    {
                      id: environment.id,
                      value: environment.id,
                      name: "environmentIds",
                      type: "radio",
                      label: /* @__PURE__ */ (0, import_jsx_runtime137.jsx)(
                        "span",
                        {
                          className: cn(
                            "text-xs uppercase tracking-wide",
                            environmentTextClassName(environment)
                          ),
                          children: environmentTitle(environment)
                        }
                      ),
                      variant: "button"
                    },
                    environment.id
                  )),
                  !hasStaging && /* @__PURE__ */ (0, import_jsx_runtime137.jsx)(TooltipProvider, { children: /* @__PURE__ */ (0, import_jsx_runtime137.jsxs)(Tooltip, { children: [
                    /* @__PURE__ */ (0, import_jsx_runtime137.jsx)(TooltipTrigger, { children: /* @__PURE__ */ (0, import_jsx_runtime137.jsxs)(
                      TextLink,
                      {
                        to: v3BillingPath(organization),
                        className: "flex w-fit cursor-pointer items-center gap-2 rounded border border-dashed border-charcoal-600 py-3 pl-3 pr-4 transition hover:border-charcoal-500 hover:bg-charcoal-850",
                        children: [
                          /* @__PURE__ */ (0, import_jsx_runtime137.jsx)(import_solid45.LockClosedIcon, { className: "size-4 text-charcoal-500" }),
                          /* @__PURE__ */ (0, import_jsx_runtime137.jsx)(Paragraph, { className: "mt-0.5 text-xs uppercase tracking-wide text-staging", children: "Staging" })
                        ]
                      }
                    ) }),
                    /* @__PURE__ */ (0, import_jsx_runtime137.jsxs)(TooltipContent, { className: "flex items-center gap-2", children: [
                      /* @__PURE__ */ (0, import_jsx_runtime137.jsx)(import_solid45.LockOpenIcon, { className: "size-4 text-indigo-500" }),
                      "Upgrade your plan to add a Staging environment."
                    ] })
                  ] }) })
                ] }),
                /* @__PURE__ */ (0, import_jsx_runtime137.jsx)(FormError, { id: environmentIds.errorId, children: environmentIds.error }),
                /* @__PURE__ */ (0, import_jsx_runtime137.jsx)(Hint, { children: "Dev environment variables specified here will be overridden by ones in your .env file when running locally." })
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime137.jsxs)(InputGroup, { fullWidth: !0, children: [
                /* @__PURE__ */ (0, import_jsx_runtime137.jsxs)(FieldLayout, { showDeleteButton: !1, children: [
                  /* @__PURE__ */ (0, import_jsx_runtime137.jsx)(Label, { children: "Keys" }),
                  /* @__PURE__ */ (0, import_jsx_runtime137.jsxs)("div", { className: "flex justify-between gap-1", children: [
                    /* @__PURE__ */ (0, import_jsx_runtime137.jsx)(Label, { children: "Values" }),
                    /* @__PURE__ */ (0, import_jsx_runtime137.jsx)(
                      Switch,
                      {
                        variant: "small",
                        label: "Reveal",
                        checked: revealAll,
                        onCheckedChange: (e) => setRevealAll(e.valueOf())
                      }
                    )
                  ] })
                ] }),
                /* @__PURE__ */ (0, import_jsx_runtime137.jsx)(
                  VariableFields,
                  {
                    revealValues: revealAll,
                    formId: form.id,
                    formRef: form.ref,
                    variablesFields: variables
                  }
                ),
                /* @__PURE__ */ (0, import_jsx_runtime137.jsx)(FormError, { id: variables.errorId, children: variables.error })
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime137.jsx)(FormError, { children: form.error }),
              /* @__PURE__ */ (0, import_jsx_runtime137.jsx)(
                FormButtons,
                {
                  confirmButton: /* @__PURE__ */ (0, import_jsx_runtime137.jsxs)("div", { className: "flex flex-row-reverse items-center gap-2", children: [
                    /* @__PURE__ */ (0, import_jsx_runtime137.jsx)(
                      Button,
                      {
                        type: "submit",
                        variant: "primary/medium",
                        disabled: isLoading2,
                        name: "override",
                        value: "false",
                        children: isLoading2 ? "Saving" : "Save"
                      }
                    ),
                    /* @__PURE__ */ (0, import_jsx_runtime137.jsx)(
                      Button,
                      {
                        variant: "secondary/medium",
                        disabled: isLoading2,
                        name: "override",
                        value: "true",
                        children: isLoading2 ? "Overriding" : "Override"
                      }
                    )
                  ] }),
                  cancelButton: /* @__PURE__ */ (0, import_jsx_runtime137.jsx)(
                    LinkButton,
                    {
                      to: v3EnvironmentVariablesPath(organization, project),
                      variant: "tertiary/medium",
                      children: "Cancel"
                    }
                  ),
                  className: "mt-2"
                }
              )
            ] })
          }
        )
      ] })
    }
  );
}
function FieldLayout({
  children,
  showDeleteButton
}) {
  return /* @__PURE__ */ (0, import_jsx_runtime137.jsx)(
    "div",
    {
      className: cn(
        "grid w-full gap-1.5",
        showDeleteButton ? "grid-cols-[1fr_1fr_2rem]" : "grid-cols-[1fr_1fr]"
      ),
      children
    }
  );
}
function VariableFields({
  revealValues,
  formId,
  variablesFields,
  formRef
}) {
  let {
    items,
    append,
    update,
    delete: remove,
    insertAfter
  } = useList([{ key: "", value: "" }]), handlePaste = (0, import_react91.useCallback)((index, e) => {
    let clipboardData = e.clipboardData;
    if (!clipboardData)
      return;
    let text = clipboardData.getData("text");
    if (!text)
      return;
    let variables = import_dotenv.default.parse(text), keyValuePairs = Object.entries(variables).map(([key, value]) => ({ key, value }));
    if (keyValuePairs.length === 0)
      return;
    e.preventDefault();
    let [firstPair, ...rest] = keyValuePairs;
    update(index, firstPair);
    for (let pair of rest)
      (0, import_react89.requestIntent)(formRef.current ?? void 0, import_react89.list.append(variablesFields.name));
    insertAfter(index, rest);
  }, []), fields = (0, import_react89.useFieldList)(formRef, variablesFields);
  return /* @__PURE__ */ (0, import_jsx_runtime137.jsxs)(import_jsx_runtime137.Fragment, { children: [
    fields.map((field, index) => {
      let item = items[index];
      return /* @__PURE__ */ (0, import_jsx_runtime137.jsx)(
        VariableField,
        {
          formId,
          index,
          value: item,
          onChange: (value) => update(index, value),
          onPaste: (e) => handlePaste(index, e),
          onDelete: () => {
            (0, import_react89.requestIntent)(
              formRef.current ?? void 0,
              import_react89.list.remove(variablesFields.name, { index })
            ), remove(index);
          },
          showDeleteButton: items.length > 1,
          showValue: revealValues,
          config: field
        },
        index
      );
    }),
    /* @__PURE__ */ (0, import_jsx_runtime137.jsxs)("div", { className: cn("flex items-center justify-between gap-4", items.length > 1 && "pr-10"), children: [
      /* @__PURE__ */ (0, import_jsx_runtime137.jsx)(Paragraph, { variant: "extra-small", children: "Tip: Paste your .env into this form to populate it." }),
      /* @__PURE__ */ (0, import_jsx_runtime137.jsx)(
        Button,
        {
          variant: "tertiary/medium",
          className: "w-fit",
          type: "button",
          onClick: () => {
            (0, import_react89.requestIntent)(formRef.current ?? void 0, import_react89.list.append(variablesFields.name)), append([{ key: "", value: "" }]);
          },
          LeadingIcon: import_solid45.PlusIcon,
          children: "Add another"
        }
      )
    ] })
  ] });
}
function VariableField({
  formId,
  index,
  value,
  onChange,
  onPaste,
  onDelete,
  showDeleteButton,
  showValue,
  config
}) {
  let ref = (0, import_react91.useRef)(null), fields = (0, import_react89.useFieldset)(ref, config), baseFieldName = `variables[${index}]`;
  return /* @__PURE__ */ (0, import_jsx_runtime137.jsxs)("fieldset", { ref, children: [
    /* @__PURE__ */ (0, import_jsx_runtime137.jsxs)(FieldLayout, { showDeleteButton, children: [
      /* @__PURE__ */ (0, import_jsx_runtime137.jsx)(
        Input,
        {
          id: `${formId}-${baseFieldName}.key`,
          name: `${baseFieldName}.key`,
          placeholder: "e.g. CLIENT_KEY",
          value: value.key,
          onChange: (e) => onChange({ ...value, key: e.currentTarget.value }),
          autoFocus: index === 0,
          onPaste
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime137.jsx)(
        Input,
        {
          id: `${formId}-${baseFieldName}.value`,
          name: `${baseFieldName}.value`,
          type: showValue ? "text" : "password",
          placeholder: "Not set",
          value: value.value,
          onChange: (e) => onChange({ ...value, value: e.currentTarget.value })
        }
      ),
      showDeleteButton && /* @__PURE__ */ (0, import_jsx_runtime137.jsx)(
        Button,
        {
          variant: "minimal/medium",
          type: "button",
          onClick: () => onDelete(),
          LeadingIcon: import_solid45.XMarkIcon
        }
      )
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime137.jsxs)("div", { className: "space-y-2", children: [
      /* @__PURE__ */ (0, import_jsx_runtime137.jsx)(FormError, { id: fields.key.errorId, children: fields.key.error }),
      /* @__PURE__ */ (0, import_jsx_runtime137.jsx)(FormError, { id: fields.value.errorId, children: fields.value.error })
    ] })
  ] });
}

// app/routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.schedules.$scheduleParam/route.tsx
var route_exports33 = {};
__export(route_exports33, {
  action: () => action8,
  default: () => Page21,
  loader: () => loader30
});
var import_zod97 = require("@conform-to/zod"), import_solid50 = require("@heroicons/react/20/solid"), import_react_dialog = require("@radix-ui/react-dialog"), import_react95 = require("@remix-run/react"), import_server_runtime10 = require("@remix-run/server-runtime"), import_remix_typedjson33 = require("remix-typedjson"), import_zod98 = require("zod");

// app/components/runs/v3/EnabledStatus.tsx
var import_solid46 = require("@heroicons/react/20/solid"), import_jsx_runtime138 = require("react/jsx-runtime");
function EnabledStatus({
  enabled,
  enabledIcon = import_solid46.CheckCircleIcon,
  disabledIcon = import_solid46.BoltSlashIcon
}) {
  let EnabledIcon = enabledIcon, DisabledIcon = disabledIcon;
  switch (enabled) {
    case !0:
      return /* @__PURE__ */ (0, import_jsx_runtime138.jsxs)("div", { className: "flex items-center gap-1 text-xs text-success", children: [
        /* @__PURE__ */ (0, import_jsx_runtime138.jsx)(EnabledIcon, { className: "size-4" }),
        "Enabled"
      ] });
    case !1:
      return /* @__PURE__ */ (0, import_jsx_runtime138.jsxs)("div", { className: "text-dimmed flex items-center gap-1 text-xs", children: [
        /* @__PURE__ */ (0, import_jsx_runtime138.jsx)(DisabledIcon, { className: "size-4" }),
        "Disabled"
      ] });
  }
}

// app/components/runs/v3/TaskRunsTable.tsx
var import_solid48 = require("@heroicons/react/20/solid"), import_solid49 = require("@heroicons/react/24/solid"), import_react93 = require("@remix-run/react");

// app/hooks/useEnvironments.ts
function useEnvironments(matches) {
  let project = useOptionalProject(matches);
  if (project)
    return project.environments;
}

// app/components/runs/v3/TaskRunStatus.tsx
var import_solid47 = require("@heroicons/react/20/solid"), import_assert_never8 = __toESM(require("assert-never")), import_lucide_react8 = require("lucide-react");
var import_jsx_runtime139 = require("react/jsx-runtime"), allTaskRunStatuses = [
  "DELAYED",
  "WAITING_FOR_DEPLOY",
  "PENDING",
  "EXECUTING",
  "RETRYING_AFTER_FAILURE",
  "WAITING_TO_RESUME",
  "COMPLETED_SUCCESSFULLY",
  "CANCELED",
  "COMPLETED_WITH_ERRORS",
  "CRASHED",
  "PAUSED",
  "INTERRUPTED",
  "SYSTEM_FAILURE",
  "EXPIRED"
], filterableTaskRunStatuses = [
  "WAITING_FOR_DEPLOY",
  "DELAYED",
  "PENDING",
  "EXECUTING",
  "RETRYING_AFTER_FAILURE",
  "WAITING_TO_RESUME",
  "COMPLETED_SUCCESSFULLY",
  "CANCELED",
  "COMPLETED_WITH_ERRORS",
  "CRASHED",
  "INTERRUPTED",
  "SYSTEM_FAILURE",
  "EXPIRED"
], taskRunStatusDescriptions = {
  DELAYED: "Task has been delayed and is waiting to be executed",
  PENDING: "Task is waiting to be executed",
  WAITING_FOR_DEPLOY: "Task needs to be deployed first to start executing",
  EXECUTING: "Task is currently being executed",
  RETRYING_AFTER_FAILURE: "Task is being reattempted after a failure",
  WAITING_TO_RESUME: "Task has been frozen and is waiting to be resumed",
  COMPLETED_SUCCESSFULLY: "Task has been successfully completed",
  CANCELED: "Task has been canceled",
  COMPLETED_WITH_ERRORS: "Task has failed with errors",
  INTERRUPTED: "Task has failed because it was interrupted",
  SYSTEM_FAILURE: "Task has failed due to a system failure",
  PAUSED: "Task has been paused by the user",
  CRASHED: "Task has crashed and won't be retried",
  EXPIRED: "Task has surpassed its ttl and won't be executed"
}, QUEUED_STATUSES = ["PENDING", "WAITING_FOR_DEPLOY", "DELAYED"], RUNNING_STATUSES = [
  "EXECUTING",
  "RETRYING_AFTER_FAILURE",
  "WAITING_TO_RESUME"
], FINISHED_STATUSES = [
  "COMPLETED_SUCCESSFULLY",
  "CANCELED",
  "COMPLETED_WITH_ERRORS",
  "INTERRUPTED",
  "SYSTEM_FAILURE",
  "CRASHED",
  "EXPIRED"
];
function descriptionForTaskRunStatus(status) {
  return taskRunStatusDescriptions[status];
}
function TaskRunStatusCombo({
  status,
  className,
  iconClassName
}) {
  return /* @__PURE__ */ (0, import_jsx_runtime139.jsxs)("span", { className: cn("flex items-center gap-1", className), children: [
    /* @__PURE__ */ (0, import_jsx_runtime139.jsx)(TaskRunStatusIcon, { status, className: cn("h-4 w-4", iconClassName) }),
    /* @__PURE__ */ (0, import_jsx_runtime139.jsx)(TaskRunStatusLabel, { status })
  ] });
}
function TaskRunStatusLabel({ status }) {
  return /* @__PURE__ */ (0, import_jsx_runtime139.jsx)("span", { className: runStatusClassNameColor2(status), children: runStatusTitle2(status) });
}
function TaskRunStatusIcon({
  status,
  className
}) {
  switch (status) {
    case "DELAYED":
      return /* @__PURE__ */ (0, import_jsx_runtime139.jsx)(import_solid47.ClockIcon, { className: cn(runStatusClassNameColor2(status), className) });
    case "PENDING":
      return /* @__PURE__ */ (0, import_jsx_runtime139.jsx)(import_solid47.RectangleStackIcon, { className: cn(runStatusClassNameColor2(status), className) });
    case "WAITING_FOR_DEPLOY":
      return /* @__PURE__ */ (0, import_jsx_runtime139.jsx)(import_solid47.RectangleStackIcon, { className: cn(runStatusClassNameColor2(status), className) });
    case "EXECUTING":
      return /* @__PURE__ */ (0, import_jsx_runtime139.jsx)(Spinner, { className: cn(runStatusClassNameColor2(status), className) });
    case "WAITING_TO_RESUME":
      return /* @__PURE__ */ (0, import_jsx_runtime139.jsx)(import_lucide_react8.SnowflakeIcon, { className: cn(runStatusClassNameColor2(status), className) });
    case "RETRYING_AFTER_FAILURE":
      return /* @__PURE__ */ (0, import_jsx_runtime139.jsx)(import_solid47.ArrowPathIcon, { className: cn(runStatusClassNameColor2(status), className) });
    case "PAUSED":
      return /* @__PURE__ */ (0, import_jsx_runtime139.jsx)(import_solid47.PauseCircleIcon, { className: cn(runStatusClassNameColor2(status), className) });
    case "CANCELED":
      return /* @__PURE__ */ (0, import_jsx_runtime139.jsx)(import_solid47.NoSymbolIcon, { className: cn(runStatusClassNameColor2(status), className) });
    case "INTERRUPTED":
      return /* @__PURE__ */ (0, import_jsx_runtime139.jsx)(import_solid47.BoltSlashIcon, { className: cn(runStatusClassNameColor2(status), className) });
    case "COMPLETED_SUCCESSFULLY":
      return /* @__PURE__ */ (0, import_jsx_runtime139.jsx)(import_solid47.CheckCircleIcon, { className: cn(runStatusClassNameColor2(status), className) });
    case "COMPLETED_WITH_ERRORS":
      return /* @__PURE__ */ (0, import_jsx_runtime139.jsx)(import_solid47.XCircleIcon, { className: cn(runStatusClassNameColor2(status), className) });
    case "SYSTEM_FAILURE":
      return /* @__PURE__ */ (0, import_jsx_runtime139.jsx)(import_solid47.BugAntIcon, { className: cn(runStatusClassNameColor2(status), className) });
    case "CRASHED":
      return /* @__PURE__ */ (0, import_jsx_runtime139.jsx)(import_solid47.FireIcon, { className: cn(runStatusClassNameColor2(status), className) });
    case "EXPIRED":
      return /* @__PURE__ */ (0, import_jsx_runtime139.jsx)(import_solid47.TrashIcon, { className: cn(runStatusClassNameColor2(status), className) });
    default:
      (0, import_assert_never8.default)(status);
  }
}
function runStatusClassNameColor2(status) {
  switch (status) {
    case "PENDING":
    case "DELAYED":
      return "text-charcoal-500";
    case "WAITING_FOR_DEPLOY":
      return "text-amber-500";
    case "EXECUTING":
    case "RETRYING_AFTER_FAILURE":
      return "text-pending";
    case "WAITING_TO_RESUME":
      return "text-sky-300";
    case "PAUSED":
      return "text-amber-300";
    case "CANCELED":
    case "EXPIRED":
      return "text-charcoal-500";
    case "INTERRUPTED":
      return "text-error";
    case "COMPLETED_SUCCESSFULLY":
      return "text-success";
    case "COMPLETED_WITH_ERRORS":
      return "text-error";
    case "SYSTEM_FAILURE":
      return "text-error";
    case "CRASHED":
      return "text-error";
    default:
      (0, import_assert_never8.default)(status);
  }
}
function runStatusTitle2(status) {
  switch (status) {
    case "DELAYED":
      return "Delayed";
    case "PENDING":
      return "Queued";
    case "WAITING_FOR_DEPLOY":
      return "Waiting for deploy";
    case "EXECUTING":
      return "Executing";
    case "WAITING_TO_RESUME":
      return "Frozen";
    case "RETRYING_AFTER_FAILURE":
      return "Reattempting";
    case "PAUSED":
      return "Paused";
    case "CANCELED":
      return "Canceled";
    case "INTERRUPTED":
      return "Interrupted";
    case "COMPLETED_SUCCESSFULLY":
      return "Completed";
    case "COMPLETED_WITH_ERRORS":
      return "Failed";
    case "SYSTEM_FAILURE":
      return "System failure";
    case "CRASHED":
      return "Crashed";
    case "EXPIRED":
      return "Expired";
    default:
      (0, import_assert_never8.default)(status);
  }
}

// app/components/primitives/SelectedItemsProvider.tsx
var import_react92 = require("react"), import_jsx_runtime140 = require("react/jsx-runtime"), SelectedItemsContext = (0, import_react92.createContext)({});
function useSelectedItems(enabled = !0) {
  let context7 = (0, import_react92.useContext)(SelectedItemsContext);
  if (!context7 && enabled)
    throw new Error("useSelectedItems must be used within a SelectedItemsProvider");
  return context7;
}
function SelectedItemsProvider({
  initialSelectedItems,
  maxSelectedItemCount,
  children
}) {
  let [state, dispatch] = (0, import_react92.useReducer)(selectedItemsReducer, {
    items: new Set(initialSelectedItems),
    maxSelectedItemCount
  }), select = (0, import_react92.useCallback)((items) => {
    dispatch({ type: "select", items: Array.isArray(items) ? items : [items] });
  }, []), deselect = (0, import_react92.useCallback)((items) => {
    dispatch({ type: "deselect", items: Array.isArray(items) ? items : [items] });
  }, []), toggle = (0, import_react92.useCallback)((items) => {
    dispatch({ type: "toggle", items: Array.isArray(items) ? items : [items] });
  }, []), deselectAll = (0, import_react92.useCallback)(() => {
    dispatch({ type: "deselectAll" });
  }, []), has = (0, import_react92.useCallback)((item) => state.items.has(item), [state]), hasAll = (0, import_react92.useCallback)(
    (items) => items.every((item) => state.items.has(item)),
    [state]
  );
  return /* @__PURE__ */ (0, import_jsx_runtime140.jsx)(
    SelectedItemsContext.Provider,
    {
      value: { selectedItems: state.items, select, deselect, toggle, deselectAll, has, hasAll },
      children: typeof children == "function" ? children({
        selectedItems: state.items,
        select,
        deselect,
        toggle,
        deselectAll,
        has,
        hasAll
      }) : children
    }
  );
}
function selectedItemsReducer(state, action106) {
  switch (action106.type) {
    case "select":
      let items = /* @__PURE__ */ new Set([...state.items, ...action106.items]);
      return { ...state, items: cappedSet(items, state.maxSelectedItemCount) };
    case "deselect":
      let newItems = new Set(state.items);
      return action106.items.forEach((item) => {
        newItems.delete(item);
      }), { ...state, items: cappedSet(newItems, state.maxSelectedItemCount) };
    case "toggle":
      let newSet = new Set(state.items);
      return action106.items.forEach((item) => {
        newSet.has(item) ? newSet.delete(item) : newSet.add(item);
      }), { ...state, items: cappedSet(newSet, state.maxSelectedItemCount) };
    case "deselectAll":
      return { ...state, items: /* @__PURE__ */ new Set() };
    default:
      return state;
  }
}
function cappedSet(set, max) {
  return !max || set.size <= max ? set : (console.warn(`Selected items exceeded the maximum count of ${max}.`), new Set([...set].slice(0, max)));
}

// app/components/runs/v3/TaskRunsTable.tsx
var import_react94 = require("react");

// app/utils/numberFormatter.ts
var compactFormatter = Intl.NumberFormat("en", { notation: "compact", compactDisplay: "short" }), formatNumberCompact = (num) => compactFormatter.format(num), formatter = Intl.NumberFormat("en"), formatNumber = (num) => formatter.format(num), roundedCurrencyFormatter = Intl.NumberFormat("en-US", {
  style: "currency",
  currencyDisplay: "symbol",
  maximumFractionDigits: 0,
  currency: "USD"
}), currencyFormatter = Intl.NumberFormat("en-US", {
  style: "currency",
  currencyDisplay: "symbol",
  currency: "USD"
}), formatCurrency = (num, rounded) => rounded ? roundedCurrencyFormatter.format(num) : currencyFormatter.format(num), accurateCurrencyFormatter = Intl.NumberFormat("en-US", {
  style: "currency",
  currencyDisplay: "symbol",
  minimumFractionDigits: 8,
  maximumFractionDigits: 8,
  currency: "USD"
});
function formatCurrencyAccurate(num) {
  return accurateCurrencyFormatter.format(num);
}

// app/components/runs/v3/TaskRunsTable.tsx
var import_jsx_runtime141 = require("react/jsx-runtime");
function TaskRunsTable({
  total,
  hasFilters,
  filters,
  runs,
  isLoading: isLoading2 = !1,
  allowSelection = !1
}) {
  let user = useUser(), organization = useOrganization(), project = useProject(), checkboxes = (0, import_react94.useRef)([]), { selectedItems, has, hasAll, select, deselect, toggle } = useSelectedItems(allowSelection), { isManagedCloud: isManagedCloud2 } = useFeatures(), showCompute = user.admin && isManagedCloud2, navigateCheckboxes = (0, import_react94.useCallback)(
    (event, index) => {
      if (event.key === "ArrowUp" && index > 0) {
        if (checkboxes.current[index - 1]?.focus(), event.shiftKey) {
          let oldItem = runs.at(index - 1), newItem = runs.at(index - 2), itemsIds = [oldItem?.id, newItem?.id].filter(Boolean);
          select(itemsIds);
        }
      } else if (event.key === "ArrowDown" && index < checkboxes.current.length - 1 && (checkboxes.current[index + 1]?.focus(), event.shiftKey)) {
        let oldItem = runs.at(index - 1), newItem = runs.at(index), itemsIds = [oldItem?.id, newItem?.id].filter(Boolean);
        select(itemsIds);
      }
    },
    [checkboxes, runs]
  );
  return /* @__PURE__ */ (0, import_jsx_runtime141.jsxs)(Table, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime141.jsx)(TableHeader, { children: /* @__PURE__ */ (0, import_jsx_runtime141.jsxs)(TableRow, { children: [
      allowSelection && /* @__PURE__ */ (0, import_jsx_runtime141.jsx)(TableHeaderCell, { className: "pl-2 pr-0", children: runs.length > 0 && /* @__PURE__ */ (0, import_jsx_runtime141.jsx)(
        Checkbox,
        {
          checked: hasAll(runs.map((r) => r.id)),
          onChange: (element) => {
            let ids = runs.map((r) => r.id);
            element.currentTarget.checked ? select(ids) : deselect(ids);
          },
          ref: (r) => {
            checkboxes.current[0] = r;
          },
          onKeyDown: (event) => navigateCheckboxes(event, 0)
        }
      ) }),
      /* @__PURE__ */ (0, import_jsx_runtime141.jsx)(TableHeaderCell, { alignment: "right", children: "Run #" }),
      /* @__PURE__ */ (0, import_jsx_runtime141.jsx)(TableHeaderCell, { children: "Env" }),
      /* @__PURE__ */ (0, import_jsx_runtime141.jsx)(TableHeaderCell, { children: "Task ID" }),
      /* @__PURE__ */ (0, import_jsx_runtime141.jsx)(TableHeaderCell, { children: "Version" }),
      /* @__PURE__ */ (0, import_jsx_runtime141.jsx)(TableHeaderCell, { children: "Status" }),
      /* @__PURE__ */ (0, import_jsx_runtime141.jsx)(TableHeaderCell, { children: "Started" }),
      /* @__PURE__ */ (0, import_jsx_runtime141.jsx)(
        TableHeaderCell,
        {
          colSpan: 3,
          tooltip: /* @__PURE__ */ (0, import_jsx_runtime141.jsxs)("div", { className: "flex max-w-xs flex-col gap-4 p-1", children: [
            /* @__PURE__ */ (0, import_jsx_runtime141.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime141.jsxs)("div", { className: "mb-0.5 flex items-center gap-1.5", children: [
                /* @__PURE__ */ (0, import_jsx_runtime141.jsx)(import_solid48.RectangleStackIcon, { className: "size-4 text-text-dimmed" }),
                /* @__PURE__ */ (0, import_jsx_runtime141.jsx)(Header3, { children: "Queued duration" })
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime141.jsx)(Paragraph, { variant: "small", className: "!text-wrap text-text-dimmed", children: "The amount of time from when the run was created to it starting to run." })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime141.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime141.jsxs)("div", { className: "mb-0.5 flex items-center gap-1.5", children: [
                /* @__PURE__ */ (0, import_jsx_runtime141.jsx)(import_solid48.ClockIcon, { className: "size-4 text-blue-500" }),
                " ",
                /* @__PURE__ */ (0, import_jsx_runtime141.jsx)(Header3, { children: "Run duration" })
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime141.jsx)(Paragraph, { variant: "small", className: "!text-wrap text-text-dimmed", children: "The total amount of time from the run starting to it finishing. This includes all time spent waiting." })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime141.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime141.jsxs)("div", { className: "mb-0.5 flex items-center gap-1.5", children: [
                /* @__PURE__ */ (0, import_jsx_runtime141.jsx)(import_solid48.CpuChipIcon, { className: "size-4 text-success" }),
                /* @__PURE__ */ (0, import_jsx_runtime141.jsx)(Header3, { children: "Compute duration" })
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime141.jsx)(Paragraph, { variant: "small", className: "!text-wrap text-text-dimmed", children: "The amount of compute time used in the run. This does not include time spent waiting." })
            ] })
          ] }),
          children: "Duration"
        }
      ),
      showCompute && /* @__PURE__ */ (0, import_jsx_runtime141.jsx)(import_jsx_runtime141.Fragment, { children: /* @__PURE__ */ (0, import_jsx_runtime141.jsx)(TableHeaderCell, { children: "Compute" }) }),
      /* @__PURE__ */ (0, import_jsx_runtime141.jsx)(TableHeaderCell, { children: "Test" }),
      /* @__PURE__ */ (0, import_jsx_runtime141.jsx)(TableHeaderCell, { children: "Created at" }),
      /* @__PURE__ */ (0, import_jsx_runtime141.jsx)(TableHeaderCell, { children: "Delayed until" }),
      /* @__PURE__ */ (0, import_jsx_runtime141.jsx)(TableHeaderCell, { children: "TTL" }),
      /* @__PURE__ */ (0, import_jsx_runtime141.jsx)(TableHeaderCell, { children: /* @__PURE__ */ (0, import_jsx_runtime141.jsx)("span", { className: "sr-only", children: "Go to page" }) })
    ] }) }),
    /* @__PURE__ */ (0, import_jsx_runtime141.jsxs)(TableBody, { children: [
      total === 0 && !hasFilters ? /* @__PURE__ */ (0, import_jsx_runtime141.jsx)(TableBlankRow, { colSpan: 14, children: !isLoading2 && /* @__PURE__ */ (0, import_jsx_runtime141.jsx)(NoRuns3, { title: "No runs found" }) }) : runs.length === 0 ? /* @__PURE__ */ (0, import_jsx_runtime141.jsx)(BlankState, { isLoading: isLoading2, filters }) : runs.map((run, index) => {
        let path2 = v3RunSpanPath(organization, project, run, { spanId: run.spanId });
        return /* @__PURE__ */ (0, import_jsx_runtime141.jsxs)(TableRow, { children: [
          allowSelection && /* @__PURE__ */ (0, import_jsx_runtime141.jsx)(TableCell, { className: "pl-2 pr-0", children: /* @__PURE__ */ (0, import_jsx_runtime141.jsx)(
            Checkbox,
            {
              checked: has(run.id),
              onChange: (element) => {
                toggle(run.id);
              },
              ref: (r) => {
                checkboxes.current[index + 1] = r;
              },
              onKeyDown: (event) => navigateCheckboxes(event, index + 1)
            }
          ) }),
          /* @__PURE__ */ (0, import_jsx_runtime141.jsx)(TableCell, { to: path2, alignment: "right", children: formatNumber(run.number) }),
          /* @__PURE__ */ (0, import_jsx_runtime141.jsx)(TableCell, { to: path2, children: /* @__PURE__ */ (0, import_jsx_runtime141.jsx)(
            EnvironmentLabel,
            {
              environment: run.environment,
              userName: run.environment.userName
            }
          ) }),
          /* @__PURE__ */ (0, import_jsx_runtime141.jsx)(TableCell, { to: path2, children: run.taskIdentifier }),
          /* @__PURE__ */ (0, import_jsx_runtime141.jsx)(TableCell, { to: path2, children: run.version ?? "\u2013" }),
          /* @__PURE__ */ (0, import_jsx_runtime141.jsx)(TableCell, { to: path2, children: /* @__PURE__ */ (0, import_jsx_runtime141.jsx)(TaskRunStatusCombo, { status: run.status }) }),
          /* @__PURE__ */ (0, import_jsx_runtime141.jsx)(TableCell, { to: path2, children: run.startedAt ? /* @__PURE__ */ (0, import_jsx_runtime141.jsx)(DateTime, { date: run.startedAt }) : "\u2013" }),
          /* @__PURE__ */ (0, import_jsx_runtime141.jsx)(TableCell, { to: path2, className: "w-[1%]", actionClassName: "pr-0 tabular-nums", children: /* @__PURE__ */ (0, import_jsx_runtime141.jsxs)("div", { className: "flex items-center gap-1", children: [
            /* @__PURE__ */ (0, import_jsx_runtime141.jsx)(import_solid48.RectangleStackIcon, { className: "size-4 text-text-dimmed" }),
            run.startedAt ? formatDuration(new Date(run.createdAt), new Date(run.startedAt), {
              style: "short"
            }) : /* @__PURE__ */ (0, import_jsx_runtime141.jsx)(LiveTimer, { startTime: new Date(run.createdAt) })
          ] }) }),
          /* @__PURE__ */ (0, import_jsx_runtime141.jsx)(TableCell, { to: path2, className: "w-[1%]", actionClassName: "px-4 tabular-nums", children: /* @__PURE__ */ (0, import_jsx_runtime141.jsxs)("div", { className: "flex items-center gap-1", children: [
            /* @__PURE__ */ (0, import_jsx_runtime141.jsx)(import_solid48.ClockIcon, { className: "size-4 text-blue-500" }),
            run.startedAt && run.finishedAt ? formatDuration(new Date(run.startedAt), new Date(run.finishedAt), {
              style: "short"
            }) : run.startedAt ? /* @__PURE__ */ (0, import_jsx_runtime141.jsx)(LiveTimer, { startTime: new Date(run.startedAt) }) : "\u2013"
          ] }) }),
          /* @__PURE__ */ (0, import_jsx_runtime141.jsx)(TableCell, { to: path2, actionClassName: "pl-0 tabular-nums", children: /* @__PURE__ */ (0, import_jsx_runtime141.jsxs)("div", { className: "flex items-center gap-1", children: [
            /* @__PURE__ */ (0, import_jsx_runtime141.jsx)(import_solid48.CpuChipIcon, { className: "size-4 text-success" }),
            run.usageDurationMs > 0 ? formatDurationMilliseconds(run.usageDurationMs, {
              style: "short"
            }) : "\u2013"
          ] }) }),
          showCompute && /* @__PURE__ */ (0, import_jsx_runtime141.jsx)(TableCell, { to: path2, className: "tabular-nums", children: run.costInCents > 0 ? formatCurrencyAccurate(run.costInCents / 100) : "\u2013" }),
          /* @__PURE__ */ (0, import_jsx_runtime141.jsx)(TableCell, { to: path2, children: run.isTest ? /* @__PURE__ */ (0, import_jsx_runtime141.jsx)(import_solid49.CheckIcon, { className: "h-4 w-4 text-charcoal-400" }) : "\u2013" }),
          /* @__PURE__ */ (0, import_jsx_runtime141.jsx)(TableCell, { to: path2, children: run.createdAt ? /* @__PURE__ */ (0, import_jsx_runtime141.jsx)(DateTime, { date: run.createdAt }) : "\u2013" }),
          /* @__PURE__ */ (0, import_jsx_runtime141.jsx)(TableCell, { to: path2, children: run.delayUntil ? /* @__PURE__ */ (0, import_jsx_runtime141.jsx)(DateTime, { date: run.delayUntil }) : "\u2013" }),
          /* @__PURE__ */ (0, import_jsx_runtime141.jsx)(TableCell, { to: path2, children: run.ttl ?? "\u2013" }),
          /* @__PURE__ */ (0, import_jsx_runtime141.jsx)(RunActionsCell, { run, path: path2 })
        ] }, run.id);
      }),
      isLoading2 && /* @__PURE__ */ (0, import_jsx_runtime141.jsxs)(
        TableBlankRow,
        {
          colSpan: 14,
          className: "absolute left-0 top-0 flex h-full w-full items-center justify-center gap-2 bg-charcoal-900/90",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime141.jsx)(Spinner, {}),
            " ",
            /* @__PURE__ */ (0, import_jsx_runtime141.jsx)("span", { className: "text-text-dimmed", children: "Loading\u2026" })
          ]
        }
      )
    ] })
  ] });
}
function RunActionsCell({ run, path: path2 }) {
  let location = (0, import_react93.useLocation)();
  return !run.isCancellable && !run.isReplayable ? /* @__PURE__ */ (0, import_jsx_runtime141.jsx)(TableCell, { to: path2, children: "" }) : /* @__PURE__ */ (0, import_jsx_runtime141.jsxs)(TableCellMenu, { isSticky: !0, children: [
    run.isCancellable && /* @__PURE__ */ (0, import_jsx_runtime141.jsxs)(Dialog, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime141.jsx)(DialogTrigger, { asChild: !0, children: /* @__PURE__ */ (0, import_jsx_runtime141.jsx)(Button, { variant: "small-menu-item", LeadingIcon: import_solid48.StopCircleIcon, children: "Cancel run" }) }),
      /* @__PURE__ */ (0, import_jsx_runtime141.jsx)(
        CancelRunDialog,
        {
          runFriendlyId: run.friendlyId,
          redirectPath: `${location.pathname}${location.search}`
        }
      )
    ] }),
    run.isReplayable && /* @__PURE__ */ (0, import_jsx_runtime141.jsxs)(Dialog, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime141.jsx)(DialogTrigger, { asChild: !0, children: /* @__PURE__ */ (0, import_jsx_runtime141.jsx)(Button, { variant: "small-menu-item", LeadingIcon: import_solid48.ArrowPathIcon, children: "Replay run" }) }),
      /* @__PURE__ */ (0, import_jsx_runtime141.jsx)(
        ReplayRunDialog,
        {
          runFriendlyId: run.friendlyId,
          failedRedirect: `${location.pathname}${location.search}`
        }
      )
    ] })
  ] });
}
function NoRuns3({ title: title2 }) {
  return /* @__PURE__ */ (0, import_jsx_runtime141.jsx)("div", { className: "flex items-center justify-center", children: /* @__PURE__ */ (0, import_jsx_runtime141.jsx)(Paragraph, { className: "w-auto", children: title2 }) });
}
function BlankState({ isLoading: isLoading2, filters }) {
  let organization = useOrganization(), project = useProject(), envs = useEnvironments();
  if (isLoading2)
    return /* @__PURE__ */ (0, import_jsx_runtime141.jsx)(TableBlankRow, { colSpan: 14 });
  let { environments: environments2, tasks, from, to, ...otherFilters } = filters;
  if (filters.environments.length === 1 && filters.tasks.length === 1 && filters.from === void 0 && filters.to === void 0 && Object.values(otherFilters).every((filterArray) => filterArray.length === 0)) {
    let environment = envs?.find((env6) => env6.id === filters.environments[0]);
    return /* @__PURE__ */ (0, import_jsx_runtime141.jsx)(TableBlankRow, { colSpan: 14, children: /* @__PURE__ */ (0, import_jsx_runtime141.jsxs)("div", { className: "py-14", children: [
      /* @__PURE__ */ (0, import_jsx_runtime141.jsxs)(Paragraph, { className: "w-auto", variant: "base/bright", spacing: !0, children: [
        "There are no runs for ",
        filters.tasks[0],
        environment ? /* @__PURE__ */ (0, import_jsx_runtime141.jsxs)(import_jsx_runtime141.Fragment, { children: [
          " ",
          "in",
          " ",
          /* @__PURE__ */ (0, import_jsx_runtime141.jsx)(
            EnvironmentLabel,
            {
              environment,
              userName: environment.userName,
              size: "large"
            }
          )
        ] }) : null
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime141.jsxs)("div", { className: "flex items-center justify-center gap-2", children: [
        /* @__PURE__ */ (0, import_jsx_runtime141.jsx)(
          LinkButton,
          {
            to: v3TestPath(organization, project),
            variant: "primary/small",
            LeadingIcon: import_solid49.BeakerIcon,
            className: "inline-flex",
            children: "Create a test run"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime141.jsx)(Paragraph, { variant: "small", children: "or" }),
        /* @__PURE__ */ (0, import_jsx_runtime141.jsx)(
          LinkButton,
          {
            to: docsPath("v3/triggering"),
            variant: "primary/small",
            LeadingIcon: import_solid49.BookOpenIcon,
            className: "inline-flex",
            children: "Triggering a task docs"
          }
        )
      ] })
    ] }) });
  }
  return /* @__PURE__ */ (0, import_jsx_runtime141.jsx)(TableBlankRow, { colSpan: 14, children: /* @__PURE__ */ (0, import_jsx_runtime141.jsxs)("div", { className: "flex flex-col items-center justify-center gap-2", children: [
    /* @__PURE__ */ (0, import_jsx_runtime141.jsx)(Paragraph, { className: "w-auto", variant: "small", children: "No runs currently match your filters. Try refreshing or modifying your filters." }),
    /* @__PURE__ */ (0, import_jsx_runtime141.jsx)(
      Button,
      {
        LeadingIcon: import_solid48.ArrowPathIcon,
        variant: "tertiary/small",
        onClick: () => {
          window.location.reload();
        },
        children: "Refresh"
      }
    )
  ] }) });
}

// app/presenters/v3/RunListPresenter.server.ts
var import_parse_duration = __toESM(require("parse-duration"));
var DEFAULT_PAGE_SIZE2 = 25, RunListPresenter2 = class extends BasePresenter {
  async call({
    userId,
    projectId,
    tasks,
    versions,
    statuses: statuses4,
    environments: environments2,
    scheduleId,
    period,
    bulkId,
    isTest,
    from,
    to,
    direction = "forward",
    cursor,
    pageSize: pageSize3 = DEFAULT_PAGE_SIZE2
  }) {
    let hasStatusFilters = statuses4 && statuses4.length > 0, hasFilters = tasks !== void 0 && tasks.length > 0 || versions !== void 0 && versions.length > 0 || hasStatusFilters || environments2 !== void 0 && environments2.length > 0 || period !== void 0 && period !== "all" || bulkId !== void 0 && bulkId !== "" || from !== void 0 || to !== void 0 || scheduleId !== void 0 && scheduleId !== "" || typeof isTest == "boolean", project = await this._replica.project.findFirstOrThrow({
      select: {
        id: !0,
        environments: {
          select: {
            id: !0,
            type: !0,
            slug: !0,
            orgMember: {
              select: {
                user: {
                  select: {
                    id: !0,
                    name: !0,
                    displayName: !0
                  }
                }
              }
            }
          }
        }
      },
      where: {
        id: projectId
      }
    }), possibleTasksAsync = this._replica.backgroundWorkerTask.findMany({
      distinct: ["slug"],
      where: {
        projectId: project.id
      }
    }), bulkActionsAsync = this._replica.bulkActionGroup.findMany({
      select: {
        friendlyId: !0,
        type: !0,
        createdAt: !0
      },
      where: {
        projectId: project.id
      },
      orderBy: {
        createdAt: "desc"
      },
      take: 20
    }), [possibleTasks, bulkActions] = await Promise.all([possibleTasksAsync, bulkActionsAsync]), restrictToRunIds;
    if (bulkId) {
      let bulkAction = await this._replica.bulkActionGroup.findUnique({
        select: {
          items: {
            select: {
              destinationRunId: !0
            }
          }
        },
        where: {
          friendlyId: bulkId
        }
      });
      bulkAction && (restrictToRunIds = bulkAction.items.map((item) => item.destinationRunId).filter(Boolean));
    }
    let periodMs = period ? (0, import_parse_duration.default)(period) : void 0, runs = await this._replica.$queryRaw`
    SELECT
    tr.id,
    tr.number,
    tr."friendlyId" AS "runFriendlyId",
    tr."taskIdentifier" AS "taskIdentifier",
    bw.version AS version,
    tr."runtimeEnvironmentId" AS "runtimeEnvironmentId",
    tr.status AS status,
    tr."createdAt" AS "createdAt",
    tr."startedAt" AS "startedAt",
    tr."delayUntil" AS "delayUntil",
    tr."lockedAt" AS "lockedAt",
    tr."updatedAt" AS "updatedAt",
    tr."isTest" AS "isTest",
    tr."spanId" AS "spanId",
    tr."idempotencyKey" AS "idempotencyKey",
    tr."ttl" AS "ttl",
    tr."expiredAt" AS "expiredAt",
    tr."costInCents" AS "costInCents",
    tr."usageDurationMs" AS "usageDurationMs"
  FROM
    ${sqlDatabaseSchema}."TaskRun" tr
  LEFT JOIN
    ${sqlDatabaseSchema}."BackgroundWorker" bw ON tr."lockedToVersionId" = bw.id
  WHERE
      -- project
      tr."projectId" = ${project.id}
      -- cursor
      ${cursor ? direction === "forward" ? src_exports.Prisma.sql`AND tr.id < ${cursor}` : src_exports.Prisma.sql`AND tr.id > ${cursor}` : src_exports.Prisma.empty}
      -- filters
      ${restrictToRunIds ? restrictToRunIds.length === 0 ? src_exports.Prisma.sql`AND tr.id = ''` : src_exports.Prisma.sql`AND tr.id IN (${src_exports.Prisma.join(restrictToRunIds)})` : src_exports.Prisma.empty}
      ${tasks && tasks.length > 0 ? src_exports.Prisma.sql`AND tr."taskIdentifier" IN (${src_exports.Prisma.join(tasks)})` : src_exports.Prisma.empty}
      ${statuses4 && statuses4.length > 0 ? src_exports.Prisma.sql`AND tr.status = ANY(ARRAY[${src_exports.Prisma.join(statuses4)}]::"TaskRunStatus"[])` : src_exports.Prisma.empty}
      ${environments2 && environments2.length > 0 ? src_exports.Prisma.sql`AND tr."runtimeEnvironmentId" IN (${src_exports.Prisma.join(environments2)})` : src_exports.Prisma.empty}
      ${scheduleId ? src_exports.Prisma.sql`AND tr."scheduleId" = ${scheduleId}` : src_exports.Prisma.empty}
      ${typeof isTest == "boolean" ? src_exports.Prisma.sql`AND tr."isTest" = ${isTest}` : src_exports.Prisma.empty}
      ${periodMs ? src_exports.Prisma.sql`AND tr."createdAt" >= NOW() - INTERVAL '1 millisecond' * ${periodMs}` : src_exports.Prisma.empty}
      ${from ? src_exports.Prisma.sql`AND tr."createdAt" >= ${new Date(from).toISOString()}::timestamp` : src_exports.Prisma.empty} 
      ${to ? src_exports.Prisma.sql`AND tr."createdAt" <= ${new Date(to).toISOString()}::timestamp` : src_exports.Prisma.empty} 
  ORDER BY
    ${direction === "forward" ? src_exports.Prisma.sql`tr.id DESC` : src_exports.Prisma.sql`tr.id ASC`}
  LIMIT ${pageSize3 + 1}`, hasMore = runs.length > pageSize3, next, previous;
    switch (direction) {
      case "forward":
        previous = cursor ? runs.at(0)?.id : void 0, hasMore && (next = runs[pageSize3 - 1]?.id);
        break;
      case "backward":
        runs.reverse(), hasMore ? (previous = runs[1]?.id, next = runs[pageSize3]?.id) : next = runs[pageSize3 - 1]?.id;
        break;
    }
    return {
      runs: (direction === "backward" && hasMore ? runs.slice(1, pageSize3 + 1) : runs.slice(0, pageSize3)).map((run) => {
        let environment = project.environments.find((env6) => env6.id === run.runtimeEnvironmentId);
        if (!environment)
          throw new Error(`Environment not found for TaskRun ${run.id}`);
        let hasFinished = FINISHED_STATUSES.includes(run.status), startedAt = run.startedAt ?? run.lockedAt;
        return {
          id: run.id,
          friendlyId: run.runFriendlyId,
          number: Number(run.number),
          createdAt: run.createdAt.toISOString(),
          updatedAt: run.updatedAt.toISOString(),
          startedAt: startedAt ? startedAt.toISOString() : void 0,
          delayUntil: run.delayUntil ? run.delayUntil.toISOString() : void 0,
          hasFinished,
          finishedAt: hasFinished ? run.updatedAt.toISOString() : void 0,
          isTest: run.isTest,
          status: run.status,
          version: run.version,
          taskIdentifier: run.taskIdentifier,
          spanId: run.spanId,
          isReplayable: !0,
          isCancellable: isCancellableRunStatus(run.status),
          environment: displayableEnvironment(environment, userId),
          idempotencyKey: run.idempotencyKey ? run.idempotencyKey : void 0,
          ttl: run.ttl ? run.ttl : void 0,
          expiredAt: run.expiredAt ? run.expiredAt.toISOString() : void 0,
          costInCents: run.costInCents,
          usageDurationMs: Number(run.usageDurationMs)
        };
      }),
      pagination: {
        next,
        previous
      },
      possibleTasks: possibleTasks.map((task) => ({ slug: task.slug, triggerSource: task.triggerSource })).sort((a, b) => a.slug.localeCompare(b.slug)),
      bulkActions: bulkActions.map((bulkAction) => ({
        id: bulkAction.friendlyId,
        type: bulkAction.type,
        createdAt: bulkAction.createdAt
      })),
      filters: {
        tasks: tasks || [],
        versions: versions || [],
        statuses: statuses4 || [],
        environments: environments2 || [],
        from,
        to
      },
      hasFilters
    };
  }
};

// app/presenters/v3/ViewSchedulePresenter.server.ts
var ViewSchedulePresenter = class {
  #prismaClient;
  constructor(prismaClient = prisma) {
    this.#prismaClient = prismaClient;
  }
  async call({ userId, projectId, friendlyId }) {
    let schedule = await this.#prismaClient.taskSchedule.findFirst({
      select: {
        id: !0,
        friendlyId: !0,
        generatorExpression: !0,
        generatorDescription: !0,
        timezone: !0,
        externalId: !0,
        deduplicationKey: !0,
        userProvidedDeduplicationKey: !0,
        taskIdentifier: !0,
        project: {
          select: {
            id: !0
          }
        },
        instances: {
          select: {
            environment: {
              select: {
                id: !0,
                type: !0,
                slug: !0,
                orgMember: {
                  select: {
                    user: {
                      select: {
                        id: !0,
                        name: !0,
                        displayName: !0
                      }
                    }
                  }
                }
              }
            }
          }
        },
        active: !0
      },
      where: {
        friendlyId,
        projectId
      }
    });
    if (!schedule)
      return;
    let nextRuns = schedule.active ? nextScheduledTimestamps(schedule.generatorExpression, schedule.timezone, /* @__PURE__ */ new Date(), 5) : [], runPresenter = new RunListPresenter2(this.#prismaClient), { runs } = await runPresenter.call({
      projectId: schedule.project.id,
      scheduleId: schedule.id,
      pageSize: 5
    });
    return {
      schedule: {
        ...schedule,
        timezone: schedule.timezone,
        cron: schedule.generatorExpression,
        cronDescription: schedule.generatorDescription,
        nextRuns,
        runs,
        environments: schedule.instances.map((instance) => {
          let environment = instance.environment;
          return displayableEnvironment(environment, userId);
        })
      }
    };
  }
  toJSONResponse(result) {
    return {
      id: result.schedule.friendlyId,
      task: result.schedule.taskIdentifier,
      active: result.schedule.active,
      nextRun: result.schedule.nextRuns[0],
      generator: {
        type: "CRON",
        expression: result.schedule.cron,
        description: result.schedule.cronDescription
      },
      timezone: result.schedule.timezone,
      externalId: result.schedule.externalId ?? void 0,
      deduplicationKey: result.schedule.userProvidedDeduplicationKey ? result.schedule.deduplicationKey ?? void 0 : void 0,
      environments: result.schedule.instances.map((instance) => ({
        id: instance.environment.id,
        type: instance.environment.type
      }))
    };
  }
};

// app/v3/services/deleteTaskSchedule.server.ts
var DeleteTaskScheduleService = class extends BaseService {
  async call({ projectId, userId, friendlyId }) {
    if (!await this._prisma.project.findFirst({
      where: {
        id: projectId,
        organization: {
          members: {
            some: {
              userId
            }
          }
        }
      }
    }))
      throw new Error("User does not have access to the project");
    try {
      await this._prisma.taskSchedule.delete({
        where: {
          friendlyId
        }
      });
    } catch (e) {
      throw new Error(
        `Error deleting schedule: ${e instanceof Error ? e.message : JSON.stringify(e)}`
      );
    }
  }
};

// app/v3/services/setActiveOnTaskSchedule.server.ts
var SetActiveOnTaskScheduleService = class extends BaseService {
  async call({ projectId, userId, friendlyId, active }) {
    if (!await this._prisma.project.findFirst({
      where: {
        id: projectId,
        organization: {
          members: {
            some: {
              userId
            }
          }
        }
      }
    }))
      throw new Error("User does not have access to the project");
    try {
      await this._prisma.taskSchedule.update({
        where: {
          friendlyId
        },
        data: {
          active
        }
      });
    } catch (e) {
      throw new Error(
        `Error ${active ? "enabling" : "disabling"} schedule: ${e instanceof Error ? e.message : JSON.stringify(e)}`
      );
    }
  }
};

// app/routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.schedules.$scheduleParam/route.tsx
var import_jsx_runtime142 = require("react/jsx-runtime"), loader30 = async ({ request, params }) => {
  let userId = await requireUserId(request), { projectParam: projectParam2, organizationSlug, scheduleParam } = v3ScheduleParams.parse(params), project = await findProjectBySlug(organizationSlug, projectParam2, userId);
  if (!project)
    return redirectWithErrorMessage("/", request, "Project not found");
  let result = await new ViewSchedulePresenter().call({
    userId,
    projectId: project.id,
    friendlyId: scheduleParam
  });
  if (!result)
    throw new Error("Schedule not found");
  return (0, import_remix_typedjson33.typedjson)({ schedule: result.schedule });
}, schema7 = import_zod98.z.discriminatedUnion("action", [
  import_zod98.z.object({
    action: import_zod98.z.literal("delete")
  }),
  import_zod98.z.object({
    action: import_zod98.z.literal("enable")
  }),
  import_zod98.z.object({
    action: import_zod98.z.literal("disable")
  })
]), action8 = async ({ request, params }) => {
  let userId = await requireUserId(request), { organizationSlug, projectParam: projectParam2, scheduleParam } = v3ScheduleParams.parse(params), formData = await request.formData(), submission = (0, import_zod97.parse)(formData, { schema: schema7 });
  if (!submission.value)
    return (0, import_server_runtime10.json)(submission);
  let project = await prisma.project.findFirst({
    where: {
      slug: projectParam2
    }
  });
  if (!project)
    return redirectWithErrorMessage(
      v3SchedulePath(
        { slug: organizationSlug },
        { slug: projectParam2 },
        { friendlyId: scheduleParam }
      ),
      request,
      `No project found with slug ${projectParam2}`
    );
  switch (submission.value.action) {
    case "delete": {
      let deleteService = new DeleteTaskScheduleService();
      try {
        return await deleteService.call({
          projectId: project.id,
          userId,
          friendlyId: scheduleParam
        }), redirectWithSuccessMessage(
          v3SchedulesPath({ slug: organizationSlug }, { slug: projectParam2 }),
          request,
          `${scheduleParam} deleted`
        );
      } catch (e) {
        return redirectWithErrorMessage(
          v3SchedulePath(
            { slug: organizationSlug },
            { slug: projectParam2 },
            { friendlyId: scheduleParam }
          ),
          request,
          `${scheduleParam} could not be deleted: ${e instanceof Error ? e.message : JSON.stringify(e)}`
        );
      }
    }
    case "enable":
    case "disable": {
      let service = new SetActiveOnTaskScheduleService(), active = submission.value.action === "enable";
      try {
        return await service.call({
          projectId: project.id,
          userId,
          friendlyId: scheduleParam,
          active
        }), redirectWithSuccessMessage(
          v3SchedulePath(
            { slug: organizationSlug },
            { slug: projectParam2 },
            { friendlyId: scheduleParam }
          ),
          request,
          `${scheduleParam} ${active ? "enabled" : "disabled"}`
        );
      } catch (e) {
        return redirectWithErrorMessage(
          v3SchedulePath(
            { slug: organizationSlug },
            { slug: projectParam2 },
            { friendlyId: scheduleParam }
          ),
          request,
          `${scheduleParam} could not be ${active ? "enabled" : "disabled"}: ${e instanceof Error ? e.message : JSON.stringify(e)}`
        );
      }
    }
  }
};
function PlaceholderText({ title: title2 }) {
  return /* @__PURE__ */ (0, import_jsx_runtime142.jsx)("div", { className: "flex items-center justify-center", children: /* @__PURE__ */ (0, import_jsx_runtime142.jsx)(Paragraph, { className: "w-auto", children: title2 }) });
}
function Page21() {
  let { schedule } = (0, import_remix_typedjson33.useTypedLoaderData)(), location = (0, import_react95.useLocation)(), organization = useOrganization(), project = useProject(), isUtc = schedule.timezone === "UTC";
  return /* @__PURE__ */ (0, import_jsx_runtime142.jsxs)("div", { className: "grid h-full max-h-full grid-rows-[2.5rem_1fr_3.25rem] overflow-hidden bg-background-bright", children: [
    /* @__PURE__ */ (0, import_jsx_runtime142.jsxs)("div", { className: "mx-3 flex items-center justify-between gap-2 border-b border-grid-dimmed", children: [
      /* @__PURE__ */ (0, import_jsx_runtime142.jsx)(Header2, { className: cn("whitespace-nowrap"), children: schedule.friendlyId }),
      /* @__PURE__ */ (0, import_jsx_runtime142.jsx)(
        LinkButton,
        {
          to: `${v3SchedulesPath(organization, project)}${location.search}`,
          variant: "minimal/medium",
          LeadingIcon: ExitIcon,
          shortcut: { key: "esc" }
        }
      )
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime142.jsx)("div", { className: "overflow-y-scroll scrollbar-thin scrollbar-track-transparent scrollbar-thumb-charcoal-600", children: /* @__PURE__ */ (0, import_jsx_runtime142.jsx)("div", { className: "p-3", children: /* @__PURE__ */ (0, import_jsx_runtime142.jsxs)("div", { className: "space-y-3", children: [
      /* @__PURE__ */ (0, import_jsx_runtime142.jsxs)(PropertyTable, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime142.jsx)(Property, { label: "Schedule ID", children: schedule.friendlyId }),
        /* @__PURE__ */ (0, import_jsx_runtime142.jsx)(Property, { label: "Task ID", children: schedule.taskIdentifier }),
        /* @__PURE__ */ (0, import_jsx_runtime142.jsx)(Property, { label: "CRON (UTC)", labelClassName: "self-start", children: /* @__PURE__ */ (0, import_jsx_runtime142.jsxs)("div", { className: "space-y-2", children: [
          /* @__PURE__ */ (0, import_jsx_runtime142.jsx)(InlineCode, { variant: "extra-small", children: schedule.cron }),
          /* @__PURE__ */ (0, import_jsx_runtime142.jsx)(Paragraph, { variant: "small", children: schedule.cronDescription })
        ] }) }),
        /* @__PURE__ */ (0, import_jsx_runtime142.jsx)(Property, { label: "Timezone", children: schedule.timezone }),
        /* @__PURE__ */ (0, import_jsx_runtime142.jsx)(Property, { label: "Environments", children: /* @__PURE__ */ (0, import_jsx_runtime142.jsx)(EnvironmentLabels, { size: "small", environments: schedule.environments }) }),
        /* @__PURE__ */ (0, import_jsx_runtime142.jsx)(Property, { label: "External ID", children: schedule.externalId ? schedule.externalId : "\u2013" }),
        /* @__PURE__ */ (0, import_jsx_runtime142.jsx)(Property, { label: "Deduplication key", children: schedule.userProvidedDeduplicationKey ? schedule.deduplicationKey : "\u2013" }),
        /* @__PURE__ */ (0, import_jsx_runtime142.jsx)(Property, { label: "Status", children: /* @__PURE__ */ (0, import_jsx_runtime142.jsx)(EnabledStatus, { enabled: schedule.active }) })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime142.jsxs)("div", { className: "flex flex-col gap-1", children: [
        /* @__PURE__ */ (0, import_jsx_runtime142.jsx)(Header3, { children: "Last 5 runs" }),
        /* @__PURE__ */ (0, import_jsx_runtime142.jsx)(
          TaskRunsTable,
          {
            total: schedule.runs.length,
            hasFilters: !1,
            filters: {
              tasks: [],
              versions: [],
              statuses: [],
              environments: [],
              from: void 0,
              to: void 0
            },
            runs: schedule.runs,
            isLoading: !1
          }
        )
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime142.jsxs)("div", { className: "flex flex-col gap-1", children: [
        /* @__PURE__ */ (0, import_jsx_runtime142.jsx)(Header3, { children: "Next 5 runs" }),
        /* @__PURE__ */ (0, import_jsx_runtime142.jsxs)(Table, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime142.jsx)(TableHeader, { children: /* @__PURE__ */ (0, import_jsx_runtime142.jsxs)(TableRow, { children: [
            !isUtc && /* @__PURE__ */ (0, import_jsx_runtime142.jsx)(TableHeaderCell, { children: schedule.timezone }),
            /* @__PURE__ */ (0, import_jsx_runtime142.jsx)(TableHeaderCell, { children: "UTC" })
          ] }) }),
          /* @__PURE__ */ (0, import_jsx_runtime142.jsx)(TableBody, { children: schedule.active ? schedule.nextRuns.length ? schedule.nextRuns.map((run, index) => /* @__PURE__ */ (0, import_jsx_runtime142.jsxs)(TableRow, { children: [
            !isUtc && /* @__PURE__ */ (0, import_jsx_runtime142.jsx)(TableCell, { children: /* @__PURE__ */ (0, import_jsx_runtime142.jsx)(DateTime, { date: run, timeZone: schedule.timezone }) }),
            /* @__PURE__ */ (0, import_jsx_runtime142.jsx)(TableCell, { children: /* @__PURE__ */ (0, import_jsx_runtime142.jsx)(DateTime, { date: run, timeZone: "UTC" }) })
          ] }, index)) : /* @__PURE__ */ (0, import_jsx_runtime142.jsx)(TableBlankRow, { colSpan: 1, children: /* @__PURE__ */ (0, import_jsx_runtime142.jsx)(PlaceholderText, { title: "You found a bug" }) }) : /* @__PURE__ */ (0, import_jsx_runtime142.jsx)(TableBlankRow, { colSpan: 1, children: /* @__PURE__ */ (0, import_jsx_runtime142.jsx)(PlaceholderText, { title: "Schedule disabled" }) }) })
        ] })
      ] })
    ] }) }) }),
    /* @__PURE__ */ (0, import_jsx_runtime142.jsxs)("div", { className: "flex items-center justify-between gap-2 border-t border-grid-dimmed px-2", children: [
      /* @__PURE__ */ (0, import_jsx_runtime142.jsxs)("div", { className: "flex items-center gap-4", children: [
        /* @__PURE__ */ (0, import_jsx_runtime142.jsx)(import_react95.Form, { method: "post", children: /* @__PURE__ */ (0, import_jsx_runtime142.jsx)(
          Button,
          {
            type: "submit",
            variant: "minimal/medium",
            LeadingIcon: schedule.active ? import_solid50.BoltSlashIcon : import_solid50.BoltIcon,
            leadingIconClassName: schedule.active ? "text-dimmed" : "text-success",
            name: "action",
            value: schedule.active ? "disable" : "enable",
            children: schedule.active ? "Disable" : "Enable"
          }
        ) }),
        /* @__PURE__ */ (0, import_jsx_runtime142.jsxs)(Dialog, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime142.jsx)(DialogTrigger, { asChild: !0, children: /* @__PURE__ */ (0, import_jsx_runtime142.jsx)(
            Button,
            {
              type: "submit",
              variant: "minimal/medium",
              LeadingIcon: import_solid50.TrashIcon,
              leadingIconClassName: "text-error",
              className: "text-error",
              name: "action",
              value: "delete",
              children: "Delete"
            }
          ) }),
          /* @__PURE__ */ (0, import_jsx_runtime142.jsxs)(DialogContent, { className: "max-w-md", children: [
            /* @__PURE__ */ (0, import_jsx_runtime142.jsx)(DialogHeader, { children: "Delete schedule" }),
            /* @__PURE__ */ (0, import_jsx_runtime142.jsx)(import_react_dialog.DialogDescription, { children: "Are you sure you want to delete this schedule? This can't be reversed." }),
            /* @__PURE__ */ (0, import_jsx_runtime142.jsx)(DialogFooter, { children: /* @__PURE__ */ (0, import_jsx_runtime142.jsx)(import_react95.Form, { method: "post", children: /* @__PURE__ */ (0, import_jsx_runtime142.jsx)(
              Button,
              {
                type: "submit",
                variant: "danger/small",
                LeadingIcon: import_solid50.TrashIcon,
                name: "action",
                value: "delete",
                children: "Delete"
              }
            ) }) })
          ] })
        ] })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime142.jsx)("div", { className: "flex items-center gap-4", children: /* @__PURE__ */ (0, import_jsx_runtime142.jsx)(
        LinkButton,
        {
          variant: "tertiary/medium",
          to: `${v3EditSchedulePath(organization, project, schedule)}${location.search}`,
          LeadingIcon: import_solid50.PencilSquareIcon,
          children: "Edit schedule"
        }
      ) })
    ] })
  ] });
}

// app/routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.environment-variables/route.tsx
var route_exports34 = {};
__export(route_exports34, {
  action: () => action9,
  default: () => Page22,
  loader: () => loader31
});
var import_react96 = require("@conform-to/react"), import_zod99 = require("@conform-to/zod"), import_solid51 = require("@heroicons/react/20/solid"), import_react97 = require("@remix-run/react"), import_server_runtime11 = require("@remix-run/server-runtime"), import_react98 = require("react"), import_remix_typedjson34 = require("remix-typedjson"), import_zod100 = require("zod");

// app/components/primitives/InfoPanel.tsx
var import_jsx_runtime143 = require("react/jsx-runtime"), variants10 = {
  info: {
    panelStyle: "border-grid-bright bg-background-bright"
  },
  upgrade: {
    panelStyle: "border-indigo-400/20 bg-indigo-800/10"
  }
};
function InfoPanel({
  title: title2,
  children,
  to,
  buttonLabel,
  icon,
  iconClassName,
  variant: variant3 = "info",
  panelClassName = "max-w-sm"
}) {
  let Icon3 = icon, variantStyle = variants10[variant3];
  return /* @__PURE__ */ (0, import_jsx_runtime143.jsxs)(
    "div",
    {
      className: cn(
        variantStyle.panelStyle,
        title2 ? "flex-col" : "",
        "flex h-fit items-start gap-3 rounded-md border p-4",
        panelClassName
      ),
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime143.jsxs)("div", { className: cn("flex items-center gap-2", to ? "w-full justify-between" : ""), children: [
          /* @__PURE__ */ (0, import_jsx_runtime143.jsx)(Icon3, { className: cn("size-5", iconClassName) }),
          to && /* @__PURE__ */ (0, import_jsx_runtime143.jsx)(LinkButton, { to, variant: "secondary/small", children: buttonLabel })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime143.jsxs)("div", { className: "flex flex-col gap-1", children: [
          title2 && /* @__PURE__ */ (0, import_jsx_runtime143.jsx)(Header3, { className: "text-text-bright", children: title2 }),
          typeof children == "string" ? /* @__PURE__ */ (0, import_jsx_runtime143.jsx)(Paragraph, { variant: "small", className: "text-text-dimmed", children }) : children
        ] })
      ]
    }
  );
}

// app/routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.environment-variables/route.tsx
var import_jsx_runtime144 = require("react/jsx-runtime"), loader31 = async ({ request, params }) => {
  let userId = await requireUserId(request), { projectParam: projectParam2 } = ProjectParamSchema.parse(params);
  try {
    let presenter = new EnvironmentVariablesPresenter(), { environmentVariables, environments: environments2, hasStaging } = await presenter.call({
      userId,
      projectSlug: projectParam2
    });
    return (0, import_remix_typedjson34.typedjson)({
      environmentVariables,
      environments: environments2,
      hasStaging
    });
  } catch (error) {
    throw console.error(error), new Response(void 0, {
      status: 400,
      statusText: "Something went wrong, if this problem persists please contact support."
    });
  }
}, schema8 = import_zod100.z.discriminatedUnion("action", [
  import_zod100.z.object({ action: import_zod100.z.literal("edit"), key: import_zod100.z.string(), ...EditEnvironmentVariable.shape }),
  import_zod100.z.object({ action: import_zod100.z.literal("delete"), key: import_zod100.z.string(), ...DeleteEnvironmentVariable.shape })
]), action9 = async ({ request, params }) => {
  let userId = await requireUserId(request), { organizationSlug, projectParam: projectParam2 } = ProjectParamSchema.parse(params);
  if (request.method.toUpperCase() !== "POST")
    return { status: 405, body: "Method Not Allowed" };
  let formData = await request.formData(), submission = (0, import_zod99.parse)(formData, { schema: schema8 });
  if (!submission.value)
    return (0, import_server_runtime11.json)(submission);
  let project = await prisma.project.findUnique({
    where: {
      slug: params.projectParam,
      organization: {
        members: {
          some: {
            userId
          }
        }
      }
    },
    select: {
      id: !0
    }
  });
  if (!project)
    return submission.error.key = "Project not found", (0, import_server_runtime11.json)(submission);
  switch (submission.value.action) {
    case "edit": {
      let result = await new EnvironmentVariablesRepository(prisma).edit(project.id, submission.value);
      return result.success ? (0, import_server_runtime11.redirectDocument)(
        v3EnvironmentVariablesPath({ slug: organizationSlug }, { slug: projectParam2 }),
        {
          headers: {
            refresh: "true"
          }
        }
      ) : (submission.error.key = result.error, (0, import_server_runtime11.json)(submission));
    }
    case "delete": {
      let result = await new EnvironmentVariablesRepository(prisma).delete(project.id, submission.value);
      return result.success ? redirectWithSuccessMessage(
        v3EnvironmentVariablesPath({ slug: organizationSlug }, { slug: projectParam2 }),
        request,
        `Deleted ${submission.value.key} environment variable`
      ) : (submission.error.key = result.error, (0, import_server_runtime11.json)(submission));
    }
  }
};
function Page22() {
  let [revealAll, setRevealAll] = (0, import_react98.useState)(!1), { environmentVariables, environments: environments2, hasStaging } = (0, import_remix_typedjson34.useTypedLoaderData)(), project = useProject(), organization = useOrganization();
  return /* @__PURE__ */ (0, import_jsx_runtime144.jsxs)(PageContainer, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime144.jsxs)(NavBar, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime144.jsx)(PageTitle, { title: "Environment variables" }),
      /* @__PURE__ */ (0, import_jsx_runtime144.jsx)(PageAccessories, { children: /* @__PURE__ */ (0, import_jsx_runtime144.jsx)(
        LinkButton,
        {
          LeadingIcon: import_solid51.BookOpenIcon,
          to: docsPath("v3/deploy-environment-variables"),
          variant: "minimal/small",
          children: "Environment variables docs"
        }
      ) })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime144.jsxs)(PageBody, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime144.jsxs)("div", { className: cn("flex h-full flex-col gap-3"), children: [
        /* @__PURE__ */ (0, import_jsx_runtime144.jsxs)("div", { className: "flex items-center justify-end gap-2", children: [
          environmentVariables.length > 0 && /* @__PURE__ */ (0, import_jsx_runtime144.jsx)(
            Switch,
            {
              variant: "small",
              label: "Reveal values",
              checked: revealAll,
              onCheckedChange: (e) => setRevealAll(e.valueOf())
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime144.jsx)(
            LinkButton,
            {
              to: v3NewEnvironmentVariablesPath(organization, project),
              variant: "primary/small",
              LeadingIcon: import_solid51.PlusIcon,
              shortcut: { key: "n" },
              children: "Add new"
            }
          )
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime144.jsxs)(Table, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime144.jsx)(TableHeader, { children: /* @__PURE__ */ (0, import_jsx_runtime144.jsxs)(TableRow, { children: [
            /* @__PURE__ */ (0, import_jsx_runtime144.jsx)(TableHeaderCell, { children: "Key" }),
            environments2.map((environment) => /* @__PURE__ */ (0, import_jsx_runtime144.jsx)(TableHeaderCell, { children: /* @__PURE__ */ (0, import_jsx_runtime144.jsx)(EnvironmentLabel, { environment }) }, environment.id)),
            /* @__PURE__ */ (0, import_jsx_runtime144.jsx)(TableHeaderCell, { hiddenLabel: !0, children: "Actions" })
          ] }) }),
          /* @__PURE__ */ (0, import_jsx_runtime144.jsx)(TableBody, { children: environmentVariables.length > 0 ? environmentVariables.map((variable) => /* @__PURE__ */ (0, import_jsx_runtime144.jsxs)(TableRow, { children: [
            /* @__PURE__ */ (0, import_jsx_runtime144.jsx)(TableCell, { children: variable.key }),
            environments2.map((environment) => {
              let value = variable.values[environment.id]?.value;
              return value ? /* @__PURE__ */ (0, import_jsx_runtime144.jsx)(TableCell, { children: /* @__PURE__ */ (0, import_jsx_runtime144.jsx)(
                ClipboardField,
                {
                  className: "-ml-2",
                  secure: !revealAll,
                  value,
                  variant: "tertiary/small"
                }
              ) }, environment.id) : /* @__PURE__ */ (0, import_jsx_runtime144.jsx)(TableCell, { children: "Not set" }, environment.id);
            }),
            /* @__PURE__ */ (0, import_jsx_runtime144.jsxs)(TableCellMenu, { isSticky: !0, children: [
              /* @__PURE__ */ (0, import_jsx_runtime144.jsx)(
                EditEnvironmentVariablePanel,
                {
                  environments: environments2,
                  variable
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime144.jsx)(DeleteEnvironmentVariableButton, { variable })
            ] })
          ] }, variable.id)) : /* @__PURE__ */ (0, import_jsx_runtime144.jsx)(TableRow, { children: /* @__PURE__ */ (0, import_jsx_runtime144.jsx)(TableCell, { colSpan: environments2.length + 2, children: /* @__PURE__ */ (0, import_jsx_runtime144.jsx)("div", { className: "flex items-center justify-center", children: /* @__PURE__ */ (0, import_jsx_runtime144.jsx)(Paragraph, { children: "No environment variables have been set" }) }) }) }) })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime144.jsxs)("div", { className: "flex gap-3", children: [
          /* @__PURE__ */ (0, import_jsx_runtime144.jsx)(InfoPanel, { icon: import_solid51.InformationCircleIcon, panelClassName: "max-w-[22rem]", children: "Dev environment variables specified here will be overridden by ones in your .env file when running locally." }),
          !hasStaging && /* @__PURE__ */ (0, import_jsx_runtime144.jsx)(
            InfoPanel,
            {
              icon: import_solid51.LockOpenIcon,
              variant: "upgrade",
              title: "Unlock a Staging environment",
              to: v3BillingPath(organization),
              buttonLabel: "Upgrade",
              iconClassName: "text-indigo-500",
              children: "Upgrade your plan to add a Staging environment."
            }
          )
        ] })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime144.jsx)(import_react97.Outlet, {})
    ] })
  ] });
}
function EditEnvironmentVariablePanel({
  variable,
  environments: environments2
}) {
  let [isOpen, setIsOpen] = (0, import_react98.useState)(!1), lastSubmission = (0, import_react97.useActionData)(), navigation = (0, import_react97.useNavigation)(), isLoading2 = navigation.state !== "idle" && navigation.formMethod === "post" && navigation.formData?.get("action") === "edit", [form, { id }] = (0, import_react96.useForm)({
    id: "edit-environment-variable",
    // TODO: type this
    lastSubmission,
    onValidate({ formData }) {
      return (0, import_zod99.parse)(formData, { schema: schema8 });
    },
    shouldRevalidate: "onSubmit"
  });
  return /* @__PURE__ */ (0, import_jsx_runtime144.jsxs)(Dialog, { open: isOpen, onOpenChange: setIsOpen, children: [
    /* @__PURE__ */ (0, import_jsx_runtime144.jsx)(DialogTrigger, { asChild: !0, children: /* @__PURE__ */ (0, import_jsx_runtime144.jsx)(
      Button,
      {
        variant: "small-menu-item",
        LeadingIcon: import_solid51.PencilSquareIcon,
        leadingIconClassName: "text-charcoal-500",
        className: "text-xs",
        fullWidth: !0,
        textAlignLeft: !0,
        children: "Edit"
      }
    ) }),
    /* @__PURE__ */ (0, import_jsx_runtime144.jsxs)(DialogContent, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime144.jsxs)(DialogHeader, { children: [
        "Edit ",
        variable.key
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime144.jsxs)(import_react97.Form, { method: "post", ...form.props, children: [
        /* @__PURE__ */ (0, import_jsx_runtime144.jsx)("input", { type: "hidden", name: "action", value: "edit" }),
        /* @__PURE__ */ (0, import_jsx_runtime144.jsx)("input", { type: "hidden", name: "id", value: variable.id }),
        /* @__PURE__ */ (0, import_jsx_runtime144.jsx)("input", { type: "hidden", name: "key", value: variable.key }),
        /* @__PURE__ */ (0, import_jsx_runtime144.jsx)(FormError, { id: id.errorId, children: id.error }),
        /* @__PURE__ */ (0, import_jsx_runtime144.jsx)(Fieldset, { children: /* @__PURE__ */ (0, import_jsx_runtime144.jsxs)(InputGroup, { fullWidth: !0, className: "mb-5 mt-2", children: [
          /* @__PURE__ */ (0, import_jsx_runtime144.jsx)(Label, { children: "Key" }),
          /* @__PURE__ */ (0, import_jsx_runtime144.jsx)(InlineCode, { variant: "base", className: "pl-1.5", children: variable.key })
        ] }) }),
        /* @__PURE__ */ (0, import_jsx_runtime144.jsxs)(Fieldset, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime144.jsxs)(InputGroup, { fullWidth: !0, children: [
            /* @__PURE__ */ (0, import_jsx_runtime144.jsx)(Label, { children: "Values" }),
            /* @__PURE__ */ (0, import_jsx_runtime144.jsx)("div", { className: "grid grid-cols-[auto_1fr] gap-x-2 gap-y-2", children: environments2.map((environment, index) => {
              let value = variable.values[environment.id]?.value;
              return /* @__PURE__ */ (0, import_jsx_runtime144.jsxs)(import_react98.Fragment, { children: [
                /* @__PURE__ */ (0, import_jsx_runtime144.jsx)(
                  "input",
                  {
                    type: "hidden",
                    name: `values[${index}].environmentId`,
                    value: environment.id
                  }
                ),
                /* @__PURE__ */ (0, import_jsx_runtime144.jsx)(
                  "label",
                  {
                    className: "flex items-center justify-end",
                    htmlFor: `values[${index}].value`,
                    children: /* @__PURE__ */ (0, import_jsx_runtime144.jsx)(EnvironmentLabel, { environment, size: "large", className: "px-2" })
                  }
                ),
                /* @__PURE__ */ (0, import_jsx_runtime144.jsx)(
                  Input,
                  {
                    name: `values[${index}].value`,
                    placeholder: "Not set",
                    defaultValue: value,
                    type: "password"
                  }
                )
              ] }, environment.id);
            }) })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime144.jsx)(FormError, { children: form.error }),
          /* @__PURE__ */ (0, import_jsx_runtime144.jsx)(
            FormButtons,
            {
              confirmButton: /* @__PURE__ */ (0, import_jsx_runtime144.jsx)(Button, { type: "submit", variant: "primary/medium", disabled: isLoading2, children: isLoading2 ? "Saving\u2026" : "Save" }),
              cancelButton: /* @__PURE__ */ (0, import_jsx_runtime144.jsx)(Button, { onClick: () => setIsOpen(!1), variant: "tertiary/medium", type: "button", children: "Cancel" })
            }
          )
        ] })
      ] })
    ] })
  ] });
}
function DeleteEnvironmentVariableButton({
  variable
}) {
  let lastSubmission = (0, import_react97.useActionData)(), navigation = (0, import_react97.useNavigation)(), isLoading2 = navigation.state !== "idle" && navigation.formMethod === "post" && navigation.formData?.get("action") === "delete", [form, { id }] = (0, import_react96.useForm)({
    id: "delete-environment-variable",
    // TODO: type this
    lastSubmission,
    onValidate({ formData }) {
      return (0, import_zod99.parse)(formData, { schema: schema8 });
    },
    shouldRevalidate: "onSubmit"
  });
  return /* @__PURE__ */ (0, import_jsx_runtime144.jsxs)(import_react97.Form, { method: "post", ...form.props, children: [
    /* @__PURE__ */ (0, import_jsx_runtime144.jsx)("input", { type: "hidden", name: "id", value: variable.id }),
    /* @__PURE__ */ (0, import_jsx_runtime144.jsx)("input", { type: "hidden", name: "key", value: variable.key }),
    /* @__PURE__ */ (0, import_jsx_runtime144.jsx)(
      Button,
      {
        name: "action",
        value: "delete",
        type: "submit",
        variant: "small-menu-item",
        LeadingIcon: import_solid51.TrashIcon,
        leadingIconClassName: "text-rose-500",
        className: "text-xs",
        children: isLoading2 ? "Deleting" : "Delete"
      }
    )
  ] });
}

// app/routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.runs.$runParam.stream/route.tsx
var route_exports35 = {};
__export(route_exports35, {
  loader: () => loader32
});
var import_zod101 = require("zod");

// app/utils/throttle.ts
function throttle(func, durationMs) {
  let isPrimedToFire = !1;
  return (...args) => {
    isPrimedToFire || (isPrimedToFire = !0, setTimeout(() => {
      func(...args), isPrimedToFire = !1;
    }, durationMs));
  };
}

// app/presenters/v3/RunStreamPresenter.server.ts
var pingInterval = 1e3, RunStreamPresenter2 = class {
  #prismaClient;
  constructor(prismaClient = prisma) {
    this.#prismaClient = prismaClient;
  }
  async call({
    request,
    runFriendlyId
  }) {
    let run = await this.#prismaClient.taskRun.findUnique({
      where: {
        friendlyId: runFriendlyId
      },
      select: {
        traceId: !0
      }
    });
    if (!run)
      return new Response("Not found", { status: 404 });
    logger.info("RunStreamPresenter.call", {
      runFriendlyId,
      traceId: run.traceId
    });
    let pinger, { unsubscribe, eventEmitter } = await eventRepository.subscribeToTrace(run.traceId);
    return eventStream(request.signal, (send, close) => {
      let safeSend = (args) => {
        try {
          send(args);
        } catch (error) {
          error instanceof Error ? error.name !== "TypeError" && logger.debug("Error sending SSE, aborting", {
            error: {
              name: error.name,
              message: error.message,
              stack: error.stack
            },
            args
          }) : logger.debug("Unknown error sending SSE, aborting", {
            error,
            args
          }), close();
        }
      }, throttledSend = throttle(safeSend, 1e3);
      return eventEmitter.addListener("message", (event) => {
        throttledSend({ data: event });
      }), pinger = setInterval(() => {
        if (request.signal.aborted)
          return close();
        safeSend({ event: "ping", data: (/* @__PURE__ */ new Date()).toISOString() });
      }, pingInterval), function() {
        logger.info("RunStreamPresenter.abort", {
          runFriendlyId,
          traceId: run.traceId
        }), clearInterval(pinger), eventEmitter.removeAllListeners(), unsubscribe().then(() => {
          logger.info("RunStreamPresenter.abort.unsubscribe succeeded", {
            runFriendlyId,
            traceId: run.traceId
          });
        }).catch((error) => {
          logger.error("RunStreamPresenter.abort.unsubscribe failed", {
            runFriendlyId,
            traceId: run.traceId,
            error: {
              name: error.name,
              message: error.message,
              stack: error.stack
            }
          });
        });
      };
    });
  }
};

// app/routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.runs.$runParam.stream/route.tsx
async function loader32({ request, params }) {
  await requireUserId(request);
  let { runParam: runParam2 } = import_zod101.z.object({ runParam: import_zod101.z.string() }).parse(params);
  return new RunStreamPresenter2().call({ request, runFriendlyId: runParam2 });
}

// app/routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.test.tasks.$taskParam/route.tsx
var route_exports36 = {};
__export(route_exports36, {
  action: () => action10,
  default: () => Page23,
  loader: () => loader33
});
var import_react101 = require("@conform-to/react"), import_zod103 = require("@conform-to/zod"), import_solid54 = require("@heroicons/react/20/solid"), import_react102 = require("@remix-run/react"), import_server_runtime12 = require("@remix-run/server-runtime"), import_react103 = require("react"), import_remix_typedjson35 = require("remix-typedjson");

// app/components/code/JSONEditor.tsx
var import_lang_json2 = require("@codemirror/lang-json"), import_solid52 = require("@heroicons/react/20/solid"), import_react_codemirror = require("@uiw/react-codemirror"), import_react99 = require("react");

// app/components/code/codeMirrorSetup.ts
var import_autocomplete = require("@codemirror/autocomplete"), import_commands = require("@codemirror/commands"), import_lang_json = require("@codemirror/lang-json"), import_language = require("@codemirror/language"), import_lint = require("@codemirror/lint"), import_search = require("@codemirror/search"), import_state = require("@codemirror/state"), import_view = require("@codemirror/view");
function getEditorSetup(showLineNumbers = !0, showHighlights = !0) {
  let options2 = [
    (0, import_view.drawSelection)(),
    (0, import_view.dropCursor)(),
    (0, import_language.bracketMatching)(),
    (0, import_autocomplete.closeBrackets)(),
    (0, import_lint.lintGutter)(),
    (0, import_lint.linter)((0, import_lang_json.jsonParseLinter)()),
    import_state.Prec.highest(
      import_view.keymap.of([
        {
          key: "Mod-Enter",
          run: () => !0,
          preventDefault: !1
        }
      ])
    ),
    import_view.keymap.of([import_commands.indentWithTab, ...import_lint.lintKeymap])
  ];
  return showLineNumbers && options2.push((0, import_view.lineNumbers)()), showHighlights && options2.push([
    (0, import_view.highlightActiveLineGutter)(),
    (0, import_view.highlightSpecialChars)(),
    (0, import_view.highlightActiveLine)(),
    (0, import_search.highlightSelectionMatches)()
  ]), options2;
}

// app/components/code/codeMirrorTheme.ts
var import_language2 = require("@codemirror/language"), import_view2 = require("@codemirror/view"), import_highlight3 = require("@lezer/highlight");
function darkTheme() {
  let chalky = "#e5c07b", coral = "#e06c75", cyan = "#56b6c2", invalid = "#ffffff", ivory = "#abb2bf", stone = "#7d8799", malibu = "#61afef", sage = "#98c379", whiskey = "#d19a66", violet = "#c678dd", darkBackground = "#21252b", highlightBackground = "rgba(71,85,105,0.2)", background = "#121317", tooltipBackground = "#353a42", selection = "rgb(71 85 105)", cursor = "#528bff", scrollbarTrack = "rgba(0,0,0,0)", scrollbarTrackActive = "#131B2B", scrollbarThumb = "#293649", scrollbarThumbActive = "#3C4B62", scrollbarBg = "rgba(0,0,0,0)", jsonHeroEditorTheme = import_view2.EditorView.theme(
    {
      "&": {
        color: ivory,
        backgroundColor: background
      },
      ".cm-content": {
        caretColor: cursor,
        fontFamily: "Geist Mono Variable",
        fontSize: "14px"
      },
      ".cm-cursor, .cm-dropCursor": { borderLeftColor: cursor },
      "&.cm-focused .cm-selectionBackground, .cm-selectionBackground, .cm-content ::selection": {
        backgroundColor: selection
      },
      ".cm-panels": { backgroundColor: darkBackground, color: ivory },
      ".cm-panels.cm-panels-top": { borderBottom: "2px solid black" },
      ".cm-panels.cm-panels-bottom": { borderTop: "2px solid black" },
      ".cm-searchMatch": {
        backgroundColor: "#72a1ff59",
        outline: "1px solid #457dff"
      },
      ".cm-searchMatch.cm-searchMatch-selected": {
        backgroundColor: "#6199ff2f"
      },
      ".cm-activeLine": { backgroundColor: highlightBackground },
      ".cm-selectionMatch": { backgroundColor: "#aafe661a" },
      "&.cm-focused .cm-matchingBracket, &.cm-focused .cm-nonmatchingBracket": {
        backgroundColor: "#bad0f847",
        outline: "1px solid #515a6b"
      },
      ".cm-gutters": {
        backgroundColor: background,
        color: stone,
        border: "none"
      },
      ".cm-activeLineGutter": {
        backgroundColor: highlightBackground
      },
      ".cm-foldPlaceholder": {
        backgroundColor: "transparent",
        border: "none",
        color: "#ddd"
      },
      ".cm-tooltip": {
        border: "none",
        backgroundColor: tooltipBackground
      },
      ".cm-tooltip .cm-tooltip-arrow:before": {
        borderTopColor: "transparent",
        borderBottomColor: "transparent"
      },
      ".cm-tooltip .cm-tooltip-arrow:after": {
        borderTopColor: tooltipBackground,
        borderBottomColor: tooltipBackground
      },
      ".cm-tooltip-autocomplete": {
        "& > ul > li[aria-selected]": {
          backgroundColor: highlightBackground,
          color: ivory
        }
      },
      ".cm-scroller": {
        scrollbarWidth: "thin",
        scrollbarColor: `${scrollbarThumb} ${scrollbarTrack}`
      },
      ".cm-scroller::-webkit-scrollbar": {
        display: "block",
        width: "8px",
        height: "8px"
      },
      ".cm-scroller::-webkit-scrollbar-track": {
        backgroundColor: scrollbarTrack,
        borderRadius: "0"
      },
      ".cm-scroller::-webkit-scrollbar-track:hover": {
        backgroundColor: scrollbarTrackActive
      },
      ".cm-scroller::-webkit-scrollbar-track:active": {
        backgroundColor: scrollbarTrackActive
      },
      ".cm-scroller::-webkit-scrollbar-thumb": {
        backgroundColor: scrollbarThumb,
        borderRadius: "0"
      },
      ".cm-scroller::-webkit-scrollbar-thumb:hover": {
        backgroundColor: scrollbarThumbActive
      },
      ".cm-scroller::-webkit-scrollbar-thumb:active": {
        backgroundColor: scrollbarThumbActive
      },
      ".cm-scroller::-webkit-scrollbar-corner": {
        backgroundColor: scrollbarBg,
        borderRadius: "0"
      },
      ".cm-scroller::-webkit-scrollbar-corner:hover": {
        backgroundColor: scrollbarBg
      },
      ".cm-scroller::-webkit-scrollbar-corner:active": {
        backgroundColor: scrollbarBg
      }
    },
    { dark: !0 }
  ), jsonHeroHighlightStyle = import_language2.HighlightStyle.define([
    { tag: import_highlight3.tags.keyword, color: violet },
    {
      tag: [import_highlight3.tags.name, import_highlight3.tags.deleted, import_highlight3.tags.character, import_highlight3.tags.propertyName, import_highlight3.tags.macroName],
      color: coral
    },
    { tag: [import_highlight3.tags.function(import_highlight3.tags.variableName), import_highlight3.tags.labelName], color: malibu },
    {
      tag: [import_highlight3.tags.color, import_highlight3.tags.constant(import_highlight3.tags.name), import_highlight3.tags.standard(import_highlight3.tags.name)],
      color: whiskey
    },
    { tag: [import_highlight3.tags.definition(import_highlight3.tags.name), import_highlight3.tags.separator], color: ivory },
    {
      tag: [
        import_highlight3.tags.typeName,
        import_highlight3.tags.className,
        import_highlight3.tags.number,
        import_highlight3.tags.changed,
        import_highlight3.tags.annotation,
        import_highlight3.tags.modifier,
        import_highlight3.tags.self,
        import_highlight3.tags.namespace
      ],
      color: chalky
    },
    {
      tag: [
        import_highlight3.tags.operator,
        import_highlight3.tags.operatorKeyword,
        import_highlight3.tags.url,
        import_highlight3.tags.escape,
        import_highlight3.tags.regexp,
        import_highlight3.tags.link,
        import_highlight3.tags.special(import_highlight3.tags.string)
      ],
      color: cyan
    },
    { tag: [import_highlight3.tags.meta, import_highlight3.tags.comment], color: stone },
    { tag: import_highlight3.tags.strong, fontWeight: "bold" },
    { tag: import_highlight3.tags.emphasis, fontStyle: "italic" },
    { tag: import_highlight3.tags.strikethrough, textDecoration: "line-through" },
    { tag: import_highlight3.tags.link, color: stone, textDecoration: "underline" },
    { tag: import_highlight3.tags.heading, fontWeight: "bold", color: coral },
    {
      tag: [import_highlight3.tags.atom, import_highlight3.tags.bool, import_highlight3.tags.special(import_highlight3.tags.variableName)],
      color: whiskey
    },
    {
      tag: [import_highlight3.tags.processingInstruction, import_highlight3.tags.string, import_highlight3.tags.inserted],
      color: sage
    },
    { tag: import_highlight3.tags.invalid, color: invalid }
  ]);
  return [jsonHeroEditorTheme, (0, import_language2.syntaxHighlighting)(jsonHeroHighlightStyle)];
}

// app/components/code/JSONEditor.tsx
var import_jsx_runtime145 = require("react/jsx-runtime"), languages = {
  json: import_lang_json2.json
}, defaultProps = {
  language: "json",
  readOnly: !0,
  basicSetup: !1
};
function JSONEditor(opts) {
  let {
    defaultValue = "",
    language,
    readOnly,
    onChange,
    onUpdate,
    onBlur,
    basicSetup,
    autoFocus,
    showCopyButton = !0,
    showClearButton = !0
  } = {
    ...defaultProps,
    ...opts
  }, extensions = getEditorSetup();
  if (!language)
    throw new Error("language is required");
  let languageExtension = languages[language];
  extensions.push(languageExtension());
  let editor = (0, import_react99.useRef)(null), settings = {
    ...opts,
    container: editor.current,
    extensions,
    editable: !readOnly,
    contentEditable: !readOnly,
    value: defaultValue,
    autoFocus,
    theme: darkTheme(),
    indentWithTab: !1,
    basicSetup,
    onChange,
    onUpdate
  }, { setContainer, view } = (0, import_react_codemirror.useCodeMirror)(settings), [copied, setCopied] = (0, import_react99.useState)(!1);
  (0, import_react99.useEffect)(() => {
    editor.current && setContainer(editor.current);
  }, [setContainer]), (0, import_react99.useEffect)(() => {
    if (view !== void 0) {
      if (view.state.doc.toString() === defaultValue)
        return;
      view.dispatch({
        changes: { from: 0, to: view.state.doc.length, insert: defaultValue }
      });
    }
  }, [defaultValue, view]);
  let clear = (0, import_react99.useCallback)(() => {
    view !== void 0 && (view.dispatch({
      changes: { from: 0, to: view.state.doc.length, insert: void 0 }
    }), onChange?.(""));
  }, [view]), copy2 = (0, import_react99.useCallback)(() => {
    view !== void 0 && (navigator.clipboard.writeText(view.state.doc.toString()), setCopied(!0), setTimeout(() => {
      setCopied(!1);
    }, 1500));
  }, [view]);
  return /* @__PURE__ */ (0, import_jsx_runtime145.jsxs)("div", { className: cn(opts.className, "grid grid-rows-[2.5rem_1fr]"), children: [
    /* @__PURE__ */ (0, import_jsx_runtime145.jsxs)("div", { className: "mx-3 flex items-center justify-end gap-2 border-b border-grid-dimmed", children: [
      showClearButton && /* @__PURE__ */ (0, import_jsx_runtime145.jsx)(
        Button,
        {
          type: "button",
          variant: "minimal/small",
          TrailingIcon: import_solid52.TrashIcon,
          onClick: (event) => {
            event.preventDefault(), event.stopPropagation(), clear();
          },
          children: "Clear"
        }
      ),
      showCopyButton && /* @__PURE__ */ (0, import_jsx_runtime145.jsx)(
        Button,
        {
          type: "button",
          variant: "minimal/small",
          TrailingIcon: copied ? import_solid52.CheckIcon : import_solid52.ClipboardIcon,
          trailingIconClassName: copied ? "text-green-500 group-hover:text-green-500" : void 0,
          onClick: (event) => {
            event.preventDefault(), event.stopPropagation(), copy2();
          },
          children: "Copy"
        }
      )
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime145.jsx)(
      "div",
      {
        className: "w-full overflow-auto",
        ref: editor,
        onBlur: () => {
          onBlur && onBlur(editor.current?.textContent ?? "");
        }
      }
    )
  ] });
}

// app/components/primitives/DateField.tsx
var import_solid53 = require("@heroicons/react/20/solid"), import_date = require("@internationalized/date"), import_datepicker = require("@react-aria/datepicker"), import_datepicker2 = require("@react-stately/datepicker"), import_react100 = require("react");
var import_jsx_runtime146 = require("react/jsx-runtime"), variants11 = {
  small: {
    fieldStyles: "h-5 text-sm rounded-sm px-0.5",
    nowButtonVariant: "tertiary/small",
    clearButtonVariant: "minimal/small"
  },
  medium: {
    fieldStyles: "h-7 text-base rounded px-1",
    nowButtonVariant: "tertiary/medium",
    clearButtonVariant: "minimal/medium"
  }
};
function DateField({
  label,
  defaultValue,
  onValueChange,
  minValue,
  maxValue,
  granularity,
  className,
  fieldClassName,
  showGuide = !1,
  showNowButton = !1,
  showClearButton = !1,
  variant: variant3 = "small"
}) {
  let [value, setValue] = (0, import_react100.useState)(
    utcDateToCalendarDate(defaultValue)
  ), state = (0, import_datepicker2.useDateFieldState)({
    value,
    onChange: (value2) => {
      value2 && (setValue(value2), onValueChange?.(value2.toDate("utc")));
    },
    minValue: utcDateToCalendarDate(minValue),
    maxValue: utcDateToCalendarDate(maxValue),
    shouldForceLeadingZeros: !0,
    granularity,
    locale: "en-US",
    createCalendar: (name) => (0, import_date.createCalendar)(name)
  });
  (0, import_react100.useEffect)(() => {
    if (state.value === void 0 && defaultValue === void 0)
      return;
    let calendarDate = utcDateToCalendarDate(defaultValue);
    state.value?.toDate("utc").getTime() !== defaultValue?.getTime() && setValue(calendarDate);
  }, [defaultValue]);
  let ref = (0, import_react100.useRef)(null), { labelProps, fieldProps } = (0, import_datepicker.useDateField)(
    {
      label
    },
    state,
    ref
  ), yearSegment = state.segments.find((s) => s.type === "year"), monthSegment = state.segments.find((s) => s.type === "month"), daySegment = state.segments.find((s) => s.type === "day"), hourSegment = state.segments.find((s) => s.type === "hour"), minuteSegment = state.segments.find((s) => s.type === "minute"), secondSegment = state.segments.find((s) => s.type === "second"), dayPeriodSegment = state.segments.find((s) => s.type === "dayPeriod");
  return /* @__PURE__ */ (0, import_jsx_runtime146.jsxs)("div", { className: `flex flex-col items-start ${className || ""}`, children: [
    /* @__PURE__ */ (0, import_jsx_runtime146.jsxs)("div", { className: "flex flex-row items-center gap-1", "aria-label": label, children: [
      /* @__PURE__ */ (0, import_jsx_runtime146.jsxs)(
        "div",
        {
          ...fieldProps,
          ref,
          className: cn(
            "flex rounded-sm border bg-charcoal-700 p-0.5 transition focus-within:border-charcoal-600 hover:border-charcoal-600",
            fieldClassName
          ),
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime146.jsx)(DateSegment, { segment: yearSegment, state, variant: variant3 }),
            /* @__PURE__ */ (0, import_jsx_runtime146.jsx)(DateSegment, { segment: literalSegment("/"), state, variant: variant3 }),
            /* @__PURE__ */ (0, import_jsx_runtime146.jsx)(DateSegment, { segment: monthSegment, state, variant: variant3 }),
            /* @__PURE__ */ (0, import_jsx_runtime146.jsx)(DateSegment, { segment: literalSegment("/"), state, variant: variant3 }),
            /* @__PURE__ */ (0, import_jsx_runtime146.jsx)(DateSegment, { segment: daySegment, state, variant: variant3 }),
            /* @__PURE__ */ (0, import_jsx_runtime146.jsx)(DateSegment, { segment: literalSegment(", "), state, variant: variant3 }),
            /* @__PURE__ */ (0, import_jsx_runtime146.jsx)(DateSegment, { segment: hourSegment, state, variant: variant3 }),
            /* @__PURE__ */ (0, import_jsx_runtime146.jsx)(DateSegment, { segment: literalSegment(":"), state, variant: variant3 }),
            /* @__PURE__ */ (0, import_jsx_runtime146.jsx)(DateSegment, { segment: minuteSegment, state, variant: variant3 }),
            /* @__PURE__ */ (0, import_jsx_runtime146.jsx)(DateSegment, { segment: literalSegment(":"), state, variant: variant3 }),
            /* @__PURE__ */ (0, import_jsx_runtime146.jsx)(DateSegment, { segment: secondSegment, state, variant: variant3 }),
            /* @__PURE__ */ (0, import_jsx_runtime146.jsx)(DateSegment, { segment: literalSegment(" "), state, variant: variant3 }),
            /* @__PURE__ */ (0, import_jsx_runtime146.jsx)(DateSegment, { segment: dayPeriodSegment, state, variant: variant3 })
          ]
        }
      ),
      showNowButton && /* @__PURE__ */ (0, import_jsx_runtime146.jsx)(
        Button,
        {
          type: "button",
          variant: variants11[variant3].nowButtonVariant,
          LeadingIcon: import_solid53.BellAlertIcon,
          leadingIconClassName: "text-text-dimmed group-hover:text-text-bright",
          onClick: () => {
            let now = /* @__PURE__ */ new Date();
            setValue(utcDateToCalendarDate(/* @__PURE__ */ new Date())), onValueChange?.(now);
          },
          children: /* @__PURE__ */ (0, import_jsx_runtime146.jsx)("span", { className: "text-text-dimmed transition group-hover:text-text-bright", children: "Now" })
        }
      ),
      showClearButton && /* @__PURE__ */ (0, import_jsx_runtime146.jsx)(
        Button,
        {
          type: "button",
          variant: variants11[variant3].clearButtonVariant,
          LeadingIcon: "close",
          leadingIconClassName: "-mr-2",
          onClick: () => {
            setValue(void 0), onValueChange?.(void 0), state.clearSegment("year"), state.clearSegment("month"), state.clearSegment("day"), state.clearSegment("hour"), state.clearSegment("minute"), state.clearSegment("second");
          },
          children: "Clear"
        }
      )
    ] }),
    showGuide && /* @__PURE__ */ (0, import_jsx_runtime146.jsx)("div", { className: "mt-1 flex px-2", children: state.segments.map((segment, i) => /* @__PURE__ */ (0, import_jsx_runtime146.jsx)(DateSegmentGuide, { segment }, i)) })
  ] });
}
function utcDateToCalendarDate(date) {
  return date ? new import_date.CalendarDateTime(
    date.getUTCFullYear(),
    date.getUTCMonth(),
    date.getUTCDate(),
    date.getUTCHours(),
    date.getUTCMinutes(),
    date.getUTCSeconds()
  ) : void 0;
}
function DateSegment({ segment, state, variant: variant3 }) {
  let ref = (0, import_react100.useRef)(null), { segmentProps } = (0, import_datepicker.useDateSegment)(segment, state, ref), sizeVariant = variants11[variant3];
  return /* @__PURE__ */ (0, import_jsx_runtime146.jsxs)(
    "div",
    {
      ...segmentProps,
      ref,
      style: {
        ...segmentProps.style,
        minWidth: minWidthForSegment(segment)
      },
      className: cn(
        "group box-content text-center tabular-nums outline-none focus:bg-charcoal-600 focus:text-text-bright",
        sizeVariant.fieldStyles,
        segment.isEditable ? "text-text-bright" : "text-charcoal-500"
      ),
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime146.jsx)(
          "span",
          {
            "aria-hidden": "true",
            className: "flex h-full items-center justify-center text-center text-charcoal-500 group-focus:text-text-bright",
            style: {
              visibility: segment.isPlaceholder ? void 0 : "hidden",
              height: segment.isPlaceholder ? void 0 : 0,
              pointerEvents: "none"
            },
            children: segment.placeholder
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime146.jsx)("span", { className: "flex h-full items-center justify-center", children: segment.isPlaceholder ? "" : segment.text })
      ]
    }
  );
}
function literalSegment(text) {
  return {
    type: "literal",
    text,
    isPlaceholder: !1,
    isEditable: !1,
    placeholder: ""
  };
}
function minWidthForSegment(segment) {
  if (segment.type !== "literal")
    return String(`${segment.maxValue}`).length + "ch";
}
function DateSegmentGuide({ segment }) {
  return /* @__PURE__ */ (0, import_jsx_runtime146.jsx)(
    "div",
    {
      style: {
        minWidth: minWidthForSegment(segment)
      },
      className: `group box-content rounded-sm px-0.5 text-right text-sm tabular-nums text-rose-500 outline-none ${segment.isEditable ? "text-text-bright" : "text-charcoal-500"}`,
      children: /* @__PURE__ */ (0, import_jsx_runtime146.jsx)("span", { className: "block text-center italic text-charcoal-500", children: segment.type !== "literal" ? segment.placeholder : segment.text })
    }
  );
}

// app/components/primitives/RadioButton.tsx
var React15 = __toESM(require("react")), RadioGroupPrimitive = __toESM(require("@radix-ui/react-radio-group")), import_lucide_react9 = require("lucide-react");
var import_jsx_runtime147 = require("react/jsx-runtime"), variants12 = {
  "simple/small": {
    button: "w-fit pr-4 data-[disabled]:opacity-70",
    label: "text-sm text-text-bright mt-0.5 select-none",
    description: "text-text-dimmed",
    inputPosition: "mt-1",
    icon: "w-8 h-8 mb-2"
  },
  simple: {
    button: "w-fit pr-4 data-[disabled]:opacity-70",
    label: "text-text-bright select-none",
    description: "text-text-dimmed",
    inputPosition: "mt-1",
    icon: "w-8 h-8 mb-2"
  },
  "button/small": {
    button: "flex items-center w-fit h-8 pl-2 pr-3 rounded border border-charcoal-600 hover:bg-charcoal-850 hover:border-charcoal-500 transition data-[disabled]:opacity-70 data-[disabled]:hover:bg-transparent data-[state=checked]:bg-charcoal-850",
    label: "text-sm text-text-bright select-none",
    description: "text-text-dimmed",
    inputPosition: "mt-0",
    icon: "w-8 h-8 mb-2"
  },
  button: {
    button: "w-fit py-2 pl-3 pr-4 rounded border border-charcoal-600 hover:bg-charcoal-850 hover:border-charcoal-500 transition data-[state=checked]:bg-charcoal-850 data-[disabled]:opacity-70",
    label: "text-text-bright select-none",
    description: "text-text-dimmed",
    inputPosition: "mt-1",
    icon: "w-8 h-8 mb-2"
  },
  description: {
    button: "w-full p-2.5 hover:bg-charcoal-850 transition data-[disabled]:opacity-70 data-[state=checked]:bg-charcoal-850 border-charcoal-600 border rounded-sm",
    label: "text-text-bright font-semibold -mt-1 text-left",
    description: "text-text-dimmed -mt-0 text-left",
    inputPosition: "mt-0",
    icon: "w-8 h-8 mb-2"
  },
  icon: {
    button: "w-full p-2.5 pb-4 hover:bg-charcoal-850 transition data-[disabled]:opacity-70 data-[state=checked]:bg-charcoal-850 border-charcoal-600 border rounded-sm",
    label: "text-text-bright font-semibold -mt-1 text-left",
    description: "text-text-dimmed -mt-0 text-left",
    inputPosition: "mt-0",
    icon: "mb-3"
  }
};
function RadioButtonCircle({
  checked,
  boxClassName,
  outerCircleClassName,
  innerCircleClassName
}) {
  return /* @__PURE__ */ (0, import_jsx_runtime147.jsx)(
    "div",
    {
      className: cn(
        "ring-offset-background focus-visible:ring-ring aspect-square h-4 w-4 shrink-0 overflow-hidden rounded-full border border-charcoal-600 focus:outline-none focus-visible:ring-2 focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
        boxClassName
      ),
      children: checked && /* @__PURE__ */ (0, import_jsx_runtime147.jsx)(
        "div",
        {
          className: cn(
            "flex h-full w-full items-center justify-center bg-indigo-700",
            outerCircleClassName
          ),
          children: /* @__PURE__ */ (0, import_jsx_runtime147.jsx)(import_lucide_react9.Circle, { className: cn("h-1.5 w-1.5 fill-white text-white", innerCircleClassName) })
        }
      )
    }
  );
}
var RadioGroup = React15.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime147.jsx)(RadioGroupPrimitive.Root, { className, ...props, ref })), RadioGroupItem = React15.forwardRef(
  ({ className, children, variant: variant3 = "simple", label, description, badges, icon, ...props }, ref) => {
    let variation = variants12[variant3];
    return /* @__PURE__ */ (0, import_jsx_runtime147.jsxs)(
      RadioGroupPrimitive.Item,
      {
        ref,
        className: cn(
          "group flex cursor-pointer items-start gap-x-2 transition",
          variation.button,
          className
        ),
        ...props,
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime147.jsx)(
            "div",
            {
              className: cn(
                "ring-offset-background focus-visible:ring-ring aspect-square h-4 w-4 shrink-0 overflow-hidden rounded-full border border-charcoal-600 focus:outline-none focus-visible:ring-2 focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
                variation.inputPosition
              ),
              children: /* @__PURE__ */ (0, import_jsx_runtime147.jsx)(RadioGroupPrimitive.Indicator, { className: "flex h-full w-full items-center justify-center bg-indigo-700", children: /* @__PURE__ */ (0, import_jsx_runtime147.jsx)(import_lucide_react9.Circle, { className: "h-1.5 w-1.5 fill-white text-white" }) })
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime147.jsxs)("div", { className: cn(icon ? "flex h-full flex-col justify-end" : ""), children: [
            variant3 === "icon" && /* @__PURE__ */ (0, import_jsx_runtime147.jsx)("div", { className: variation.icon, children: icon }),
            /* @__PURE__ */ (0, import_jsx_runtime147.jsxs)("div", { className: "flex items-center gap-x-2", children: [
              /* @__PURE__ */ (0, import_jsx_runtime147.jsx)("label", { htmlFor: props.id, className: cn("cursor-pointer", variation.label), children: label }),
              badges && /* @__PURE__ */ (0, import_jsx_runtime147.jsx)("span", { className: "-mr-2 flex gap-x-1.5", children: badges.map((badge) => /* @__PURE__ */ (0, import_jsx_runtime147.jsx)(Badge, { children: badge }, badge)) })
            ] }),
            (variant3 === "description" || variant3 === "icon") && /* @__PURE__ */ (0, import_jsx_runtime147.jsx)(Paragraph, { variant: "small", className: cn("mt-0.5", variation.description), children: description })
          ] })
        ]
      }
    );
  }
);

// app/components/primitives/Resizable.tsx
var ResizablePrimitive = __toESM(require("react-resizable-panels"));
var import_jsx_runtime148 = require("react/jsx-runtime"), ResizablePanelGroup = ({
  className,
  ...props
}) => /* @__PURE__ */ (0, import_jsx_runtime148.jsx)(
  ResizablePrimitive.PanelGroup,
  {
    className: cn("flex w-full data-[panel-group-direction=vertical]:flex-col", className),
    ...props
  }
), ResizablePanel = ResizablePrimitive.Panel, ResizableHandle = ({
  withHandle,
  className,
  ...props
}) => /* @__PURE__ */ (0, import_jsx_runtime148.jsxs)(
  ResizablePrimitive.PanelResizeHandle,
  {
    className: cn(
      "focus-visible:ring-ring group relative flex w-0.75 items-center justify-center after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 hover:w-0.75 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-offset-1 [&[data-panel-group-direction=vertical]>div]:rotate-90",
      className
    ),
    ...props,
    children: [
      /* @__PURE__ */ (0, import_jsx_runtime148.jsx)("div", { className: "absolute left-[0.0625rem] top-0 h-full w-px bg-grid-bright transition group-hover:left-0 group-hover:w-0.75 group-hover:bg-lavender-500" }),
      withHandle && /* @__PURE__ */ (0, import_jsx_runtime148.jsx)("div", { className: "z-10 flex h-5 w-3 flex-col items-center justify-center gap-[0.1875rem] bg-background-dimmed group-hover:hidden", children: Array.from({ length: 3 }).map((_, index) => /* @__PURE__ */ (0, import_jsx_runtime148.jsx)("div", { className: "h-[0.1875rem] w-0.75 rounded-full bg-charcoal-600" }, index)) })
    ]
  }
);

// app/presenters/v3/TestTaskPresenter.server.ts
var TestTaskPresenter = class {
  #prismaClient;
  constructor(prismaClient = prisma) {
    this.#prismaClient = prismaClient;
  }
  async call({ userId, projectSlug, taskFriendlyId }) {
    let task = await this.#prismaClient.backgroundWorkerTask.findFirstOrThrow({
      select: {
        id: !0,
        filePath: !0,
        exportName: !0,
        slug: !0,
        triggerSource: !0,
        runtimeEnvironment: {
          select: {
            id: !0,
            type: !0,
            orgMember: {
              select: {
                user: {
                  select: {
                    id: !0,
                    name: !0,
                    displayName: !0
                  }
                }
              }
            }
          }
        }
      },
      where: {
        friendlyId: taskFriendlyId
      }
    }), latestRuns = await this.#prismaClient.$queryRaw`
    WITH taskruns AS (
      SELECT 
          tr.* 
      FROM 
          ${sqlDatabaseSchema}."TaskRun" as tr
      JOIN
          ${sqlDatabaseSchema}."BackgroundWorkerTask" as bwt
      ON
          tr."taskIdentifier" = bwt.slug
      WHERE
          bwt."friendlyId" = ${taskFriendlyId} AND
          tr."runtimeEnvironmentId" = ${task.runtimeEnvironment.id}
      ORDER BY 
          tr."createdAt" DESC
      LIMIT 5
    )
    SELECT 
        taskr.id,
        taskr.number,
        taskr."friendlyId",
        taskr."taskIdentifier",
        taskr."createdAt",
        taskr.status,
        taskr.payload,
        taskr."payloadType",
        taskr."runtimeEnvironmentId"
    FROM 
        taskruns AS taskr
    WHERE
        taskr."payloadType" = 'application/json' OR taskr."payloadType" = 'application/super+json'
    ORDER BY
        taskr."createdAt" DESC;`, taskWithEnvironment = {
      id: task.id,
      taskIdentifier: task.slug,
      filePath: task.filePath,
      exportName: task.exportName,
      friendlyId: taskFriendlyId,
      environment: {
        id: task.runtimeEnvironment.id,
        type: task.runtimeEnvironment.type,
        userId: task.runtimeEnvironment.orgMember?.user.id,
        userName: getUsername(task.runtimeEnvironment.orgMember?.user)
      }
    };
    switch (task.triggerSource) {
      case "STANDARD":
        return {
          triggerSource: "STANDARD",
          task: taskWithEnvironment,
          runs: await Promise.all(
            latestRuns.map(async (r) => {
              let number = Number(r.number);
              return {
                ...r,
                number,
                payload: await prettyPrintPacket(r.payload, r.payloadType)
              };
            })
          )
        };
      case "SCHEDULED":
        let possibleTimezones = getTimezones();
        return {
          triggerSource: "SCHEDULED",
          task: taskWithEnvironment,
          possibleTimezones,
          runs: (await Promise.all(
            latestRuns.map(async (r) => {
              let number = Number(r.number), payload = await getScheduleTaskRunPayload(r);
              if (payload.success)
                return {
                  ...r,
                  number,
                  payload: payload.data
                };
            })
          )).filter(Boolean)
        };
    }
  }
};
async function getScheduleTaskRunPayload(run) {
  let payload = await parsePacket({ data: run.payload, dataType: run.payloadType });
  return payload.timezone || (payload.timezone = "UTC"), ScheduledTaskPayload.safeParse(payload);
}

// app/v3/services/testTask.server.ts
var TestTaskService = class extends BaseService {
  async call(userId, data2) {
    let authenticatedEnvironment = await findEnvironmentById(data2.environmentId);
    if (!authenticatedEnvironment)
      return;
    let triggerTaskService = new TriggerTaskService();
    switch (data2.triggerSource) {
      case "STANDARD":
        return await triggerTaskService.call(data2.taskIdentifier, authenticatedEnvironment, {
          payload: data2.payload,
          options: {
            test: !0
          }
        });
      case "SCHEDULED": {
        let payload = {
          scheduleId: "sched_1234",
          timestamp: data2.timestamp,
          lastTimestamp: data2.lastTimestamp,
          timezone: data2.timezone,
          externalId: data2.externalId,
          upcoming: []
        }, payloadPacket = await stringifyIO(payload);
        return await triggerTaskService.call(
          data2.taskIdentifier,
          authenticatedEnvironment,
          {
            payload: payloadPacket.data,
            options: { payloadType: payloadPacket.dataType, test: !0 }
          },
          { customIcon: "scheduled" }
        );
      }
      default:
        throw new Error("Invalid trigger source");
    }
  }
};

// app/v3/testTask.ts
var import_zod102 = require("zod"), TestTaskData = import_zod102.z.discriminatedUnion("triggerSource", [
  import_zod102.z.object({
    triggerSource: import_zod102.z.literal("STANDARD"),
    payload: import_zod102.z.string().transform((payload, ctx) => {
      try {
        return JSON.parse(payload);
      } catch (e) {
        console.log("parsing error", e), e instanceof Error ? ctx.addIssue({
          code: import_zod102.z.ZodIssueCode.custom,
          message: e.message
        }) : ctx.addIssue({
          code: import_zod102.z.ZodIssueCode.custom,
          message: "This is invalid JSON"
        });
      }
    })
  }),
  import_zod102.z.object({
    triggerSource: import_zod102.z.literal("SCHEDULED"),
    timestamp: import_zod102.z.preprocess((val) => val === "" ? void 0 : val, import_zod102.z.coerce.date()),
    lastTimestamp: import_zod102.z.preprocess(
      (val) => val === "" ? void 0 : val,
      import_zod102.z.coerce.date().optional()
    ),
    timezone: import_zod102.z.string(),
    externalId: import_zod102.z.preprocess((val) => val === "" ? void 0 : val, import_zod102.z.string().optional())
  })
]).and(
  import_zod102.z.object({
    taskIdentifier: import_zod102.z.string(),
    environmentId: import_zod102.z.string()
  })
);

// app/routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.test.tasks.$taskParam/route.tsx
var import_jsx_runtime149 = require("react/jsx-runtime"), loader33 = async ({ request, params }) => {
  let userId = await requireUserId(request), { projectParam: projectParam2, organizationSlug, taskParam } = v3TaskParamsSchema.parse(params), result = await new TestTaskPresenter().call({
    userId,
    projectSlug: projectParam2,
    taskFriendlyId: taskParam
  });
  return (0, import_remix_typedjson35.typedjson)(result);
}, action10 = async ({ request, params }) => {
  let userId = await requireUserId(request), { organizationSlug, projectParam: projectParam2, taskParam } = v3TaskParamsSchema.parse(params), formData = await request.formData(), submission = (0, import_zod103.parse)(formData, { schema: TestTaskData });
  if (!submission.value)
    return (0, import_server_runtime12.json)(submission);
  let testService = new TestTaskService();
  try {
    let run = await testService.call(userId, submission.value);
    return run ? redirectWithSuccessMessage(
      v3RunSpanPath(
        { slug: organizationSlug },
        { slug: projectParam2 },
        { friendlyId: run.friendlyId },
        { spanId: run.spanId }
      ),
      request,
      "Test run created"
    ) : redirectBackWithErrorMessage(
      request,
      "Unable to start a test run: Something went wrong"
    );
  } catch (e) {
    return e instanceof OutOfEntitlementError ? redirectBackWithErrorMessage(
      request,
      "Unable to start a test run: You have exceeded your free credits"
    ) : (logger.error("Failed to start a test run", { error: e }), redirectBackWithErrorMessage(
      request,
      "Unable to start a test run: Something went wrong"
    ));
  }
};
function Page23() {
  let result = (0, import_remix_typedjson35.useTypedLoaderData)();
  switch (result.triggerSource) {
    case "STANDARD":
      return /* @__PURE__ */ (0, import_jsx_runtime149.jsx)(StandardTaskForm, { task: result.task, runs: result.runs });
    case "SCHEDULED":
      return /* @__PURE__ */ (0, import_jsx_runtime149.jsx)(
        ScheduledTaskForm,
        {
          task: result.task,
          runs: result.runs,
          possibleTimezones: result.possibleTimezones
        }
      );
  }
}
var startingJson = `{

}`;
function StandardTaskForm({ task, runs }) {
  let submit = (0, import_react102.useSubmit)(), lastSubmission = (0, import_react102.useActionData)(), [selectedCodeSampleId, setSelectedCodeSampleId] = (0, import_react103.useState)(runs.at(0)?.id), selectedCodeSample = runs.find((r) => r.id === selectedCodeSampleId)?.payload, [defaultJson, setDefaultJson] = (0, import_react103.useState)(selectedCodeSample ?? startingJson), setCode = (0, import_react103.useCallback)((code) => {
    setDefaultJson(code);
  }, []), currentJson = (0, import_react103.useRef)(defaultJson), submitForm = (0, import_react103.useCallback)(
    (e) => {
      submit(
        {
          triggerSource: "STANDARD",
          payload: currentJson.current,
          taskIdentifier: task.taskIdentifier,
          environmentId: task.environment.id
        },
        {
          action: "",
          method: "post"
        }
      ), e.preventDefault();
    },
    [currentJson]
  ), [form, { environmentId, payload }] = (0, import_react101.useForm)({
    id: "test-task",
    // TODO: type this
    lastSubmission,
    onValidate({ formData }) {
      return (0, import_zod103.parse)(formData, { schema: TestTaskData });
    }
  });
  return /* @__PURE__ */ (0, import_jsx_runtime149.jsxs)(
    import_react102.Form,
    {
      className: "grid h-full max-h-full grid-rows-[1fr_2.5rem]",
      method: "post",
      ...form.props,
      onSubmit: (e) => submitForm(e),
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime149.jsx)("input", { type: "hidden", name: "triggerSource", value: "STANDARD" }),
        /* @__PURE__ */ (0, import_jsx_runtime149.jsxs)(ResizablePanelGroup, { direction: "horizontal", children: [
          /* @__PURE__ */ (0, import_jsx_runtime149.jsx)(ResizablePanel, { order: 1, minSize: 30, defaultSize: 60, children: /* @__PURE__ */ (0, import_jsx_runtime149.jsx)("div", { className: "h-full bg-charcoal-900", children: /* @__PURE__ */ (0, import_jsx_runtime149.jsx)(
            JSONEditor,
            {
              defaultValue: defaultJson,
              readOnly: !1,
              basicSetup: !0,
              onChange: (v) => {
                currentJson.current = v, selectedCodeSampleId && v !== selectedCodeSample && (setDefaultJson(v), setSelectedCodeSampleId(void 0));
              },
              height: "100%",
              "min-height": "100%",
              "max-height": "100%",
              autoFocus: !0,
              placeholder: "Use your schema to enter valid JSON or add one of the recent payloads then click 'Run test'",
              className: "h-full"
            }
          ) }) }),
          /* @__PURE__ */ (0, import_jsx_runtime149.jsx)(ResizableHandle, { withHandle: !0 }),
          /* @__PURE__ */ (0, import_jsx_runtime149.jsx)(ResizablePanel, { order: 2, minSize: 20, defaultSize: 40, children: /* @__PURE__ */ (0, import_jsx_runtime149.jsx)(
            RecentPayloads,
            {
              runs,
              selectedId: selectedCodeSampleId,
              onSelected: (id) => {
                let payload2 = runs.find((r) => r.id === id)?.payload;
                payload2 && (setCode(payload2), setSelectedCodeSampleId(id));
              }
            }
          ) })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime149.jsxs)("div", { className: "flex items-center justify-end gap-2 border-t border-grid-bright bg-background-dimmed px-2", children: [
          /* @__PURE__ */ (0, import_jsx_runtime149.jsxs)("div", { className: "flex items-center gap-1", children: [
            /* @__PURE__ */ (0, import_jsx_runtime149.jsx)(Paragraph, { variant: "small", className: "whitespace-nowrap", children: "This test will run in" }),
            /* @__PURE__ */ (0, import_jsx_runtime149.jsx)(EnvironmentLabel, { environment: task.environment })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime149.jsx)(
            Button,
            {
              type: "submit",
              variant: "primary/small",
              LeadingIcon: import_solid54.BeakerIcon,
              shortcut: { key: "enter", modifiers: ["mod"], enabledOnInputElements: !0 },
              children: "Run test"
            }
          )
        ] })
      ]
    }
  );
}
function ScheduledTaskForm({
  task,
  runs,
  possibleTimezones
}) {
  let lastSubmission = (0, import_react102.useActionData)(), [selectedCodeSampleId, setSelectedCodeSampleId] = (0, import_react103.useState)(runs.at(0)?.id), [timestampValue, setTimestampValue] = (0, import_react103.useState)(), [lastTimestampValue, setLastTimestampValue] = (0, import_react103.useState)(), [externalIdValue, setExternalIdValue] = (0, import_react103.useState)(), [timezoneValue, setTimezoneValue] = (0, import_react103.useState)("UTC");
  (0, import_react103.useEffect)(() => {
    let initialRun = runs.find((r) => r.id === selectedCodeSampleId);
    if (!initialRun) {
      setTimestampValue(/* @__PURE__ */ new Date());
      return;
    }
    setTimestampValue(initialRun.payload.timestamp), setLastTimestampValue(initialRun.payload.lastTimestamp), setExternalIdValue(initialRun.payload.externalId), setTimezoneValue(initialRun.payload.timezone);
  }, [selectedCodeSampleId]);
  let [
    form,
    {
      timestamp,
      lastTimestamp,
      externalId,
      triggerSource,
      taskIdentifier,
      environmentId,
      timezone
    }
  ] = (0, import_react101.useForm)({
    id: "test-task-scheduled",
    // TODO: type this
    lastSubmission,
    onValidate({ formData }) {
      return (0, import_zod103.parse)(formData, { schema: TestTaskData });
    }
  });
  return /* @__PURE__ */ (0, import_jsx_runtime149.jsxs)(import_react102.Form, { className: "grid h-full max-h-full grid-rows-[1fr_2.5rem]", method: "post", ...form.props, children: [
    /* @__PURE__ */ (0, import_jsx_runtime149.jsx)(
      "input",
      {
        type: "hidden",
        ...import_react101.conform.input(triggerSource, { type: "hidden" }),
        value: "SCHEDULED"
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime149.jsx)(
      "input",
      {
        type: "hidden",
        ...import_react101.conform.input(taskIdentifier, { type: "hidden" }),
        value: task.taskIdentifier
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime149.jsx)(
      "input",
      {
        type: "hidden",
        ...import_react101.conform.input(environmentId, { type: "hidden" }),
        value: task.environment.id
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime149.jsxs)(ResizablePanelGroup, { direction: "horizontal", children: [
      /* @__PURE__ */ (0, import_jsx_runtime149.jsx)(ResizablePanel, { order: 1, minSize: 30, defaultSize: 60, children: /* @__PURE__ */ (0, import_jsx_runtime149.jsx)("div", { className: "p-3", children: /* @__PURE__ */ (0, import_jsx_runtime149.jsxs)(Fieldset, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime149.jsxs)(InputGroup, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime149.jsx)(Label, { htmlFor: timestamp.id, children: "Timestamp UTC" }),
          /* @__PURE__ */ (0, import_jsx_runtime149.jsx)(
            "input",
            {
              type: "hidden",
              ...import_react101.conform.input(timestamp, { type: "hidden" }),
              value: timestampValue?.toISOString() ?? ""
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime149.jsx)(
            DateField,
            {
              label: "Timestamp UTC",
              defaultValue: timestampValue,
              onValueChange: (val) => setTimestampValue(val),
              granularity: "second",
              showNowButton: !0,
              variant: "medium"
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime149.jsx)(Hint, { children: "This is the timestamp of the CRON, it will come through to your run in the payload." }),
          /* @__PURE__ */ (0, import_jsx_runtime149.jsx)(FormError, { id: timestamp.errorId, children: timestamp.error })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime149.jsxs)(InputGroup, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime149.jsx)(Label, { htmlFor: lastTimestamp.id, required: !1, children: "Last timestamp UTC" }),
          /* @__PURE__ */ (0, import_jsx_runtime149.jsx)(
            "input",
            {
              type: "hidden",
              ...import_react101.conform.input(lastTimestamp, { type: "hidden" }),
              value: lastTimestampValue?.toISOString() ?? ""
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime149.jsx)(
            DateField,
            {
              label: "Last timestamp UTC",
              defaultValue: lastTimestampValue,
              onValueChange: (val) => setLastTimestampValue(val),
              granularity: "second",
              showNowButton: !0,
              showClearButton: !0,
              variant: "medium"
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime149.jsx)(Hint, { children: "This is the timestamp of the previous run. You can use this in your code to find new data since the previous run. This can be undefined if there hasn't been a previous run." }),
          /* @__PURE__ */ (0, import_jsx_runtime149.jsx)(FormError, { id: lastTimestamp.errorId, children: lastTimestamp.error })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime149.jsxs)(InputGroup, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime149.jsx)(Label, { htmlFor: timezone.id, children: "Timezone" }),
          /* @__PURE__ */ (0, import_jsx_runtime149.jsx)(
            Select2,
            {
              ...import_react101.conform.select(timezone),
              placeholder: "Select a timezone",
              defaultValue: timezoneValue,
              value: timezoneValue,
              setValue: (e) => {
                Array.isArray(e) || setTimezoneValue(e);
              },
              items: possibleTimezones,
              filter: { keys: [(item) => item.replace(/\//g, " ").replace(/_/g, " ")] },
              dropdownIcon: !0,
              variant: "tertiary/medium",
              children: (matches) => /* @__PURE__ */ (0, import_jsx_runtime149.jsx)(TimezoneList, { timezones: matches })
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime149.jsx)(Hint, { children: "The Timestamp and Last timestamp are in UTC so this just changes the timezone string that comes through in the payload." }),
          /* @__PURE__ */ (0, import_jsx_runtime149.jsx)(FormError, { id: timezone.errorId, children: timezone.error })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime149.jsxs)(InputGroup, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime149.jsx)(Label, { required: !1, htmlFor: externalId.id, children: "External ID" }),
          /* @__PURE__ */ (0, import_jsx_runtime149.jsx)(
            Input,
            {
              ...import_react101.conform.input(externalId, { type: "text" }),
              placeholder: "Optionally specify your own ID, e.g. user id",
              value: externalIdValue ?? "",
              onChange: (e) => setExternalIdValue(e.target.value)
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime149.jsxs)(Hint, { children: [
            "Optionally, you can specify your own IDs (like a user ID) and then use it inside the run function of your task. This allows you to have per-user CRON tasks.",
            " ",
            /* @__PURE__ */ (0, import_jsx_runtime149.jsx)(TextLink, { to: docsPath("v3/tasks-scheduled"), children: "Read the docs." })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime149.jsx)(FormError, { id: externalId.errorId, children: externalId.error })
        ] })
      ] }) }) }),
      /* @__PURE__ */ (0, import_jsx_runtime149.jsx)(ResizableHandle, { withHandle: !0 }),
      /* @__PURE__ */ (0, import_jsx_runtime149.jsx)(ResizablePanel, { order: 2, minSize: 20, defaultSize: 40, children: /* @__PURE__ */ (0, import_jsx_runtime149.jsx)(
        RecentPayloads,
        {
          runs,
          selectedId: selectedCodeSampleId,
          onSelected: (id) => {
            let run = runs.find((r) => r.id === id);
            run && (setSelectedCodeSampleId(id), setTimestampValue(run.payload.timestamp), setLastTimestampValue(run.payload.lastTimestamp), setExternalIdValue(run.payload.externalId));
          }
        }
      ) })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime149.jsxs)("div", { className: "flex items-center justify-end gap-2 border-t border-grid-bright bg-background-dimmed px-2", children: [
      /* @__PURE__ */ (0, import_jsx_runtime149.jsxs)("div", { className: "flex items-center gap-1", children: [
        /* @__PURE__ */ (0, import_jsx_runtime149.jsx)(Paragraph, { variant: "small", className: "whitespace-nowrap", children: "This test will run in" }),
        /* @__PURE__ */ (0, import_jsx_runtime149.jsx)(EnvironmentLabel, { environment: task.environment })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime149.jsx)(
        Button,
        {
          type: "submit",
          variant: "primary/small",
          LeadingIcon: import_solid54.BeakerIcon,
          shortcut: { key: "enter", modifiers: ["mod"], enabledOnInputElements: !0 },
          children: "Run test"
        }
      )
    ] })
  ] });
}
function RecentPayloads({
  runs,
  selectedId,
  onSelected
}) {
  return /* @__PURE__ */ (0, import_jsx_runtime149.jsxs)("div", { className: "flex flex-col gap-2 pl-4", children: [
    /* @__PURE__ */ (0, import_jsx_runtime149.jsx)("div", { className: "flex h-10 items-center border-b border-grid-dimmed", children: /* @__PURE__ */ (0, import_jsx_runtime149.jsx)(Header2, { children: "Recent payloads" }) }),
    runs.length === 0 ? /* @__PURE__ */ (0, import_jsx_runtime149.jsx)(Callout, { variant: "info", children: "Recent payloads will show here once you've completed a Run." }) : /* @__PURE__ */ (0, import_jsx_runtime149.jsx)("div", { className: "flex flex-col divide-y divide-charcoal-850", children: runs.map((run) => /* @__PURE__ */ (0, import_jsx_runtime149.jsxs)(
      "button",
      {
        type: "button",
        onClick: (e) => {
          onSelected(run.id);
        },
        className: "flex items-center gap-2 px-2 py-2",
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime149.jsx)(RadioButtonCircle, { checked: run.id === selectedId }),
          /* @__PURE__ */ (0, import_jsx_runtime149.jsxs)("div", { className: "flex flex-col items-start", children: [
            /* @__PURE__ */ (0, import_jsx_runtime149.jsx)(Paragraph, { variant: "small", children: /* @__PURE__ */ (0, import_jsx_runtime149.jsx)(DateTime, { date: run.createdAt }) }),
            /* @__PURE__ */ (0, import_jsx_runtime149.jsxs)("div", { className: "flex items-center gap-1 text-xs text-text-dimmed", children: [
              /* @__PURE__ */ (0, import_jsx_runtime149.jsxs)("div", { children: [
                "Run #",
                run.number
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime149.jsx)(TaskRunStatusCombo, { status: run.status })
            ] })
          ] })
        ]
      },
      run.id
    )) })
  ] });
}

// app/routes/_app.orgs.$organizationSlug.projects.$projectParam.jobs.$jobParam.settings/route.tsx
var route_exports37 = {};
__export(route_exports37, {
  default: () => Page24
});

// app/components/ActiveBadge.tsx
var import_jsx_runtime150 = require("react/jsx-runtime"), variant2 = {
  small: "py-[0.25rem] px-1.5 text-xxs font-normal inline-flex items-center justify-center whitespace-nowrap rounded-[0.125rem]",
  normal: "py-1 px-1.5 text-xs font-normal inline-flex items-center justify-center whitespace-nowrap rounded-sm"
};
function ActiveBadge({ active, className, badgeSize = "normal" }) {
  switch (active) {
    case !0:
      return /* @__PURE__ */ (0, import_jsx_runtime150.jsx)("span", { className: cn(variant2[badgeSize], "bg-charcoal-800 text-green-500", className), children: "Active" });
    case !1:
      return /* @__PURE__ */ (0, import_jsx_runtime150.jsx)("span", { className: cn(variant2[badgeSize], "bg-charcoal-800 text-text-dimmed", className), children: "Disabled" });
  }
}
function MissingIntegrationBadge({
  className,
  badgeSize = "normal"
}) {
  return /* @__PURE__ */ (0, import_jsx_runtime150.jsx)("span", { className: cn(variant2[badgeSize], "bg-error text-white", className), children: "Missing Integration" });
}
function NewBadge({
  className,
  badgeSize = "normal"
}) {
  return /* @__PURE__ */ (0, import_jsx_runtime150.jsx)("span", { className: cn(variant2[badgeSize], "bg-green-600 text-background-dimmed", className), children: "New!" });
}

// app/components/JobsStatusTable.tsx
var import_jsx_runtime151 = require("react/jsx-runtime");
function JobStatusTable({ environments: environments2, displayStyle = "short" }) {
  return /* @__PURE__ */ (0, import_jsx_runtime151.jsxs)(Table, { fullWidth: !0, children: [
    /* @__PURE__ */ (0, import_jsx_runtime151.jsx)(TableHeader, { children: /* @__PURE__ */ (0, import_jsx_runtime151.jsxs)(TableRow, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime151.jsx)(TableHeaderCell, { children: "Env" }),
      /* @__PURE__ */ (0, import_jsx_runtime151.jsx)(TableHeaderCell, { children: "Last Run" }),
      displayStyle === "long" && /* @__PURE__ */ (0, import_jsx_runtime151.jsx)(TableHeaderCell, { children: "Concurrency" }),
      /* @__PURE__ */ (0, import_jsx_runtime151.jsx)(TableHeaderCell, { alignment: "right", children: "Version" }),
      /* @__PURE__ */ (0, import_jsx_runtime151.jsx)(TableHeaderCell, { alignment: "right", children: "Status" })
    ] }) }),
    /* @__PURE__ */ (0, import_jsx_runtime151.jsx)(TableBody, { children: environments2.map((environment, index) => /* @__PURE__ */ (0, import_jsx_runtime151.jsxs)(TableRow, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime151.jsx)(TableCell, { children: /* @__PURE__ */ (0, import_jsx_runtime151.jsx)(EnvironmentLabel, { environment }) }),
      /* @__PURE__ */ (0, import_jsx_runtime151.jsx)(TableCell, { children: environment.lastRun ? /* @__PURE__ */ (0, import_jsx_runtime151.jsx)(DateTime, { date: environment.lastRun }) : "Never Run" }),
      displayStyle === "long" && /* @__PURE__ */ (0, import_jsx_runtime151.jsx)(TableCell, { children: environment.concurrencyLimitGroup ? /* @__PURE__ */ (0, import_jsx_runtime151.jsxs)("span", { className: "flex items-center gap-1", children: [
        /* @__PURE__ */ (0, import_jsx_runtime151.jsx)("span", { children: environment.concurrencyLimitGroup.name }),
        /* @__PURE__ */ (0, import_jsx_runtime151.jsxs)("span", { className: "text-gray-400", children: [
          "(",
          environment.concurrencyLimitGroup.concurrencyLimit,
          ")"
        ] })
      ] }) : typeof environment.concurrencyLimit == "number" ? /* @__PURE__ */ (0, import_jsx_runtime151.jsx)("span", { className: "text-gray-400", children: environment.concurrencyLimit }) : /* @__PURE__ */ (0, import_jsx_runtime151.jsx)("span", { className: "text-gray-400", children: "Not specified" }) }),
      /* @__PURE__ */ (0, import_jsx_runtime151.jsx)(TableCell, { alignment: "right", children: environment.version }),
      /* @__PURE__ */ (0, import_jsx_runtime151.jsx)(TableCell, { alignment: "right", children: /* @__PURE__ */ (0, import_jsx_runtime151.jsx)(ActiveBadge, { active: environment.enabled }) })
    ] }, index)) })
  ] });
}

// app/components/jobs/DeleteJobModalContent.tsx
var import_react104 = require("@remix-run/react"), import_react105 = require("react");
var import_remix_typedjson36 = require("remix-typedjson"), import_jsx_runtime152 = require("react/jsx-runtime");
function DeleteJobDialog({ id, title: title2, slug: slug3 }) {
  let fetcher = (0, import_remix_typedjson36.useTypedFetcher)();
  return (0, import_react105.useEffect)(() => {
    fetcher.load(`/resources/jobs/${id}`);
  }, [id]), fetcher.state === "loading" || fetcher.state === "submitting" || !fetcher.data ? /* @__PURE__ */ (0, import_jsx_runtime152.jsxs)("div", { className: "flex w-full flex-col items-center gap-y-6", children: [
    /* @__PURE__ */ (0, import_jsx_runtime152.jsxs)("div", { className: "mt-5 flex flex-col items-center justify-center gap-y-2", children: [
      /* @__PURE__ */ (0, import_jsx_runtime152.jsx)(Header1, { children: title2 }),
      /* @__PURE__ */ (0, import_jsx_runtime152.jsxs)(Paragraph, { variant: "small", children: [
        "ID: ",
        slug3
      ] })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime152.jsx)(Spinner, {})
  ] }) : /* @__PURE__ */ (0, import_jsx_runtime152.jsx)(
    DeleteJobDialogContent,
    {
      id,
      title: title2,
      slug: slug3,
      environments: fetcher.data.environments
    }
  );
}
function DeleteJobDialogContent({
  title: title2,
  slug: slug3,
  environments: environments2,
  id,
  redirectTo
}) {
  let canDelete = environments2.every((environment) => !environment.enabled), fetcher = (0, import_react104.useFetcher)(), isLoading2 = fetcher.state === "submitting" || fetcher.state === "loading" && fetcher.formMethod === "DELETE";
  return /* @__PURE__ */ (0, import_jsx_runtime152.jsxs)("div", { className: "flex w-full flex-col items-center gap-y-6", children: [
    /* @__PURE__ */ (0, import_jsx_runtime152.jsxs)("div", { className: "mt-5 flex flex-col items-center justify-center gap-y-2", children: [
      /* @__PURE__ */ (0, import_jsx_runtime152.jsx)(Header1, { children: title2 }),
      /* @__PURE__ */ (0, import_jsx_runtime152.jsxs)(Paragraph, { variant: "small", children: [
        "ID: ",
        slug3
      ] })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime152.jsx)(JobStatusTable, { environments: environments2 }),
    /* @__PURE__ */ (0, import_jsx_runtime152.jsx)(
      Header2,
      {
        className: cn(
          canDelete ? "border-rose-500 bg-rose-500/10" : "border-amber-500 bg-amber-500/10",
          "rounded border px-3.5 py-2 text-center text-text-bright"
        ),
        children: canDelete ? "Are you sure you want to delete this Job?" : "You can't delete this Job until all env are disabled"
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime152.jsx)(Paragraph, { variant: "small", className: "px-6 text-center", children: canDelete ? /* @__PURE__ */ (0, import_jsx_runtime152.jsxs)(import_jsx_runtime152.Fragment, { children: [
      "This will permanently delete the Job",
      " ",
      /* @__PURE__ */ (0, import_jsx_runtime152.jsx)("span", { className: "strong text-text-bright", children: title2 }),
      ". This includes the deletion of all Run history. This cannot be undone."
    ] }) : /* @__PURE__ */ (0, import_jsx_runtime152.jsxs)(import_jsx_runtime152.Fragment, { children: [
      "This Job is still active in an environment. You need to disable it in your Job code first before it can be deleted.",
      " ",
      /* @__PURE__ */ (0, import_jsx_runtime152.jsx)(TextLink, { to: "https://trigger.dev/docs/documentation/guides/jobs/managing#disabling-jobs", children: "Learn how to disable a Job" }),
      "."
    ] }) }),
    canDelete ? /* @__PURE__ */ (0, import_jsx_runtime152.jsx)(
      fetcher.Form,
      {
        method: "delete",
        action: `/resources/jobs/${id}${redirectTo ? `?redirectTo=${redirectTo}` : ""}`,
        className: "w-full",
        children: /* @__PURE__ */ (0, import_jsx_runtime152.jsx)(Button, { variant: "danger/large", fullWidth: !0, children: isLoading2 ? /* @__PURE__ */ (0, import_jsx_runtime152.jsx)(Spinner, { color: "white" }) : /* @__PURE__ */ (0, import_jsx_runtime152.jsxs)(import_jsx_runtime152.Fragment, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime152.jsx)(
            NamedIcon,
            {
              name: "trash-can",
              className: "mr-1.5 h-4 w-4 text-text-bright transition group-hover:text-text-bright"
            }
          ),
          "Delete this Job"
        ] }) })
      }
    ) : /* @__PURE__ */ (0, import_jsx_runtime152.jsx)(Button, { variant: "danger/large", fullWidth: !0, disabled: !0, children: /* @__PURE__ */ (0, import_jsx_runtime152.jsxs)(import_jsx_runtime152.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime152.jsx)(
        NamedIcon,
        {
          name: "trash-can",
          className: "mr-1.5 h-4 w-4 text-text-bright transition group-hover:text-text-bright"
        }
      ),
      "Delete this Job"
    ] }) })
  ] });
}

// app/routes/_app.orgs.$organizationSlug.projects.$projectParam.jobs.$jobParam.settings/route.tsx
var import_jsx_runtime153 = require("react/jsx-runtime");
function Page24() {
  let job = useJob(), organization = useOrganization(), project = useProject();
  return /* @__PURE__ */ (0, import_jsx_runtime153.jsx)(Help, { children: (open) => /* @__PURE__ */ (0, import_jsx_runtime153.jsxs)("div", { className: cn("grid h-fit gap-4", open ? "grid-cols-2" : "grid-cols-1"), children: [
    /* @__PURE__ */ (0, import_jsx_runtime153.jsxs)("div", { className: "w-full", children: [
      /* @__PURE__ */ (0, import_jsx_runtime153.jsxs)("div", { className: "flex items-center justify-between", children: [
        /* @__PURE__ */ (0, import_jsx_runtime153.jsx)(Header2, { className: "mb-2 flex items-center gap-1", children: "Environments" }),
        /* @__PURE__ */ (0, import_jsx_runtime153.jsx)(HelpTrigger, { title: "How do disable a Job?" })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime153.jsx)(JobStatusTable, { environments: job.environments, displayStyle: "long" }),
      /* @__PURE__ */ (0, import_jsx_runtime153.jsxs)("div", { className: "mt-4 flex w-full items-center justify-end gap-x-3", children: [
        job.status === "ACTIVE" && /* @__PURE__ */ (0, import_jsx_runtime153.jsx)(Paragraph, { variant: "small", children: "Disable this Job in all environments before deleting" }),
        /* @__PURE__ */ (0, import_jsx_runtime153.jsxs)(Dialog, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime153.jsx)(DialogTrigger, { asChild: !0, children: /* @__PURE__ */ (0, import_jsx_runtime153.jsx)(
            Button,
            {
              variant: "danger/small",
              leadingIconClassName: "text-text-bright",
              LeadingIcon: "trash-can",
              children: "I want to delete this Job"
            }
          ) }),
          /* @__PURE__ */ (0, import_jsx_runtime153.jsxs)(DialogContent, { children: [
            /* @__PURE__ */ (0, import_jsx_runtime153.jsx)(DialogHeader, { children: "Delete Job" }),
            /* @__PURE__ */ (0, import_jsx_runtime153.jsx)(
              DeleteJobDialogContent,
              {
                title: job.title,
                slug: job.slug,
                environments: job.environments,
                id: job.id,
                redirectTo: projectJobsPath(organization, project)
              }
            )
          ] })
        ] })
      ] })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime153.jsx)(HelpContent, { title: "How to disable a Job", children: /* @__PURE__ */ (0, import_jsx_runtime153.jsx)(HowToDisableAJob, { id: job.slug, version: job.version, name: job.title }) })
  ] }) });
}

// app/routes/_app.orgs.$organizationSlug.projects.$projectParam.jobs.$jobParam.trigger/route.tsx
var route_exports38 = {};
__export(route_exports38, {
  default: () => Page25
});

// app/components/ComingSoon.tsx
var import_jsx_runtime154 = require("react/jsx-runtime");
function ComingSoon({ title: title2, description, icon }) {
  return /* @__PURE__ */ (0, import_jsx_runtime154.jsx)(MainCenteredContainer, { children: /* @__PURE__ */ (0, import_jsx_runtime154.jsxs)("div", { className: "flex flex-col justify-center rounded border border-charcoal-800 bg-charcoal-850", children: [
    /* @__PURE__ */ (0, import_jsx_runtime154.jsxs)("div", { className: "flex items-center gap-2 border-b border-charcoal-750 px-4 py-4", children: [
      typeof icon == "string" ? /* @__PURE__ */ (0, import_jsx_runtime154.jsx)(NamedIconInBox, { name: icon, className: "bg-midnight-800 h-10 w-10" }) : icon,
      /* @__PURE__ */ (0, import_jsx_runtime154.jsxs)("div", { className: "mt-0.5 flex flex-col gap-y-1", children: [
        /* @__PURE__ */ (0, import_jsx_runtime154.jsx)(Paragraph, { variant: "extra-extra-small/caps", children: "Coming soon" }),
        /* @__PURE__ */ (0, import_jsx_runtime154.jsx)(Header2, { className: "-mt-0.5", children: title2 })
      ] })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime154.jsx)(Paragraph, { variant: "small", className: "p-4", children: description })
  ] }) });
}

// app/routes/_app.orgs.$organizationSlug.projects.$projectParam.jobs.$jobParam.trigger/route.tsx
var import_jsx_runtime155 = require("react/jsx-runtime");
function Page25() {
  return /* @__PURE__ */ (0, import_jsx_runtime155.jsx)(
    ComingSoon,
    {
      title: "View all Triggers",
      description: "View all of the registered Triggers for this Job.",
      icon: "trigger"
    }
  );
}

// app/routes/_app.orgs.$organizationSlug.projects.$projectParam.http-endpoints._index/route.tsx
var route_exports39 = {};
__export(route_exports39, {
  default: () => Page26,
  loader: () => loader34
});
var import_solid55 = require("@heroicons/react/20/solid"), import_remix_typedjson37 = require("remix-typedjson");

// app/presenters/HttpEndpointsPresenter.server.ts
var HttpEndpointsPresenter = class {
  #prismaClient;
  constructor(prismaClient = prisma) {
    this.#prismaClient = prismaClient;
  }
  async call({
    userId,
    slug: slug3
  }) {
    return (await this.#prismaClient.triggerHttpEndpoint.findMany({
      select: {
        id: !0,
        key: !0,
        icon: !0,
        title: !0,
        updatedAt: !0,
        httpEndpointEnvironments: {
          select: {
            id: !0,
            environment: {
              select: {
                type: !0,
                orgMember: {
                  select: {
                    userId: !0
                  }
                }
              }
            }
          }
        }
      },
      where: {
        project: {
          slug: slug3,
          organization: {
            members: {
              some: {
                userId
              }
            }
          }
        }
      }
    })).map((httpEndpoint2) => ({
      ...httpEndpoint2,
      httpEndpointEnvironments: httpEndpoint2.httpEndpointEnvironments.filter(
        (httpEndpointEnvironment) => httpEndpointEnvironment.environment.orgMember === null || httpEndpointEnvironment.environment.orgMember.userId === userId
      )
    }));
  }
};

// app/routes/_app.orgs.$organizationSlug.projects.$projectParam.http-endpoints._index/route.tsx
var import_jsx_runtime156 = require("react/jsx-runtime"), loader34 = async ({ request, params }) => {
  let userId = await requireUserId(request), { projectParam: projectParam2 } = ProjectParamSchema.parse(params), httpEndpoints = await new HttpEndpointsPresenter().call({ userId, slug: projectParam2 });
  return (0, import_remix_typedjson37.typedjson)({ httpEndpoints });
};
function Page26() {
  let { httpEndpoints } = (0, import_remix_typedjson37.useTypedLoaderData)(), organization = useOrganization(), project = useProject();
  return /* @__PURE__ */ (0, import_jsx_runtime156.jsxs)(PageContainer, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime156.jsxs)(NavBar, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime156.jsx)(PageTitle, { title: "HTTP endpoints" }),
      /* @__PURE__ */ (0, import_jsx_runtime156.jsx)(PageAccessories, { children: /* @__PURE__ */ (0, import_jsx_runtime156.jsx)(
        LinkButton,
        {
          variant: "minimal/small",
          LeadingIcon: import_solid55.BookOpenIcon,
          to: docsPath("documentation/concepts/http-endpoints"),
          children: "HTTP endpoints documentation"
        }
      ) })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime156.jsx)(PageBody, { children: /* @__PURE__ */ (0, import_jsx_runtime156.jsx)(Help, { defaultOpen: !0, children: (open) => /* @__PURE__ */ (0, import_jsx_runtime156.jsxs)("div", { className: cn("grid h-full gap-4", open ? "grid-cols-2" : "grid-cols-1"), children: [
      /* @__PURE__ */ (0, import_jsx_runtime156.jsxs)("div", { children: [
        /* @__PURE__ */ (0, import_jsx_runtime156.jsx)("div", { className: "mb-2 flex items-center justify-end gap-x-2", children: /* @__PURE__ */ (0, import_jsx_runtime156.jsx)(HelpTrigger, { title: "What are HTTP endpoints?" }) }),
        /* @__PURE__ */ (0, import_jsx_runtime156.jsx)("div", { className: "mb-8", children: /* @__PURE__ */ (0, import_jsx_runtime156.jsxs)(Table, { fullWidth: !0, children: [
          /* @__PURE__ */ (0, import_jsx_runtime156.jsx)(TableHeader, { children: /* @__PURE__ */ (0, import_jsx_runtime156.jsxs)(TableRow, { children: [
            /* @__PURE__ */ (0, import_jsx_runtime156.jsx)(TableHeaderCell, { children: "ID" }),
            /* @__PURE__ */ (0, import_jsx_runtime156.jsx)(TableHeaderCell, { children: "Title" }),
            /* @__PURE__ */ (0, import_jsx_runtime156.jsx)(TableHeaderCell, { children: "Updated" }),
            /* @__PURE__ */ (0, import_jsx_runtime156.jsx)(TableHeaderCell, { alignment: "right", children: "Environments" }),
            /* @__PURE__ */ (0, import_jsx_runtime156.jsx)(TableHeaderCell, { hiddenLabel: !0, children: "Go to page" })
          ] }) }),
          /* @__PURE__ */ (0, import_jsx_runtime156.jsx)(TableBody, { children: httpEndpoints.length > 0 ? httpEndpoints.map((httpEndpoint2) => {
            let path2 = projectHttpEndpointPath(organization, project, httpEndpoint2);
            return /* @__PURE__ */ (0, import_jsx_runtime156.jsxs)(TableRow, { children: [
              /* @__PURE__ */ (0, import_jsx_runtime156.jsx)(TableCell, { to: path2, children: /* @__PURE__ */ (0, import_jsx_runtime156.jsxs)("div", { className: "flex items-center gap-1", children: [
                /* @__PURE__ */ (0, import_jsx_runtime156.jsx)(Icon, { icon: httpEndpoint2.icon ?? "webhook", className: "h-4 w-4" }),
                httpEndpoint2.key
              ] }) }),
              /* @__PURE__ */ (0, import_jsx_runtime156.jsx)(TableCell, { to: path2, children: httpEndpoint2.title ?? "\u2013" }),
              /* @__PURE__ */ (0, import_jsx_runtime156.jsx)(TableCell, { to: path2, children: /* @__PURE__ */ (0, import_jsx_runtime156.jsx)(DateTime, { date: httpEndpoint2.updatedAt }) }),
              /* @__PURE__ */ (0, import_jsx_runtime156.jsx)(TableCell, { alignment: "right", to: path2, children: /* @__PURE__ */ (0, import_jsx_runtime156.jsx)("div", { className: "flex items-center justify-end gap-1", children: httpEndpoint2.httpEndpointEnvironments.map((environment) => /* @__PURE__ */ (0, import_jsx_runtime156.jsx)(
                EnvironmentLabel,
                {
                  environment: environment.environment
                },
                environment.id
              )) }) }),
              /* @__PURE__ */ (0, import_jsx_runtime156.jsx)(TableCellChevron, { to: path2, isSticky: !0 })
            ] }, httpEndpoint2.id);
          }) : /* @__PURE__ */ (0, import_jsx_runtime156.jsx)(TableBlankRow, { colSpan: 100, children: /* @__PURE__ */ (0, import_jsx_runtime156.jsx)(Paragraph, { children: "No HTTP endpoints" }) }) })
        ] }) })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime156.jsx)(HelpContent, { title: "How to use HTTP endpoints", children: /* @__PURE__ */ (0, import_jsx_runtime156.jsx)(WhatAreHttpEndpoints, {}) })
    ] }) }) })
  ] });
}

// app/routes/_app.orgs.$organizationSlug.projects.$projectParam.jobs.$jobParam._index/route.tsx
var route_exports40 = {};
__export(route_exports40, {
  default: () => Page27,
  loader: () => loader35
});
var import_react110 = require("@remix-run/react"), import_remix_typedjson38 = require("remix-typedjson"), import_simplur2 = __toESM(require("simplur"));

// app/components/runs/RunFilters.tsx
var import_solid56 = require("@heroicons/react/20/solid"), import_react108 = require("@remix-run/react");

// app/hooks/useOptimisticLocation.ts
var import_react106 = require("@remix-run/react");
function useOptimisticLocation() {
  let navigation = (0, import_react106.useNavigation)(), location = (0, import_react106.useLocation)();
  return navigation.state === "idle" || !navigation.location ? location : navigation.location;
}

// app/components/primitives/SimpleSelect.tsx
var SelectPrimitive = __toESM(require("@radix-ui/react-select")), import_lucide_react10 = require("lucide-react"), React16 = __toESM(require("react"));
var import_jsx_runtime157 = require("react/jsx-runtime"), sizes3 = {
  "secondary/small": "text-xs h-6 bg-tertiary border border-tertiary group-hover:text-text-bright hover:border-charcoal-600 pr-2 pl-1.5",
  medium: "text-sm h-8 bg-tertiary border border-tertiary hover:border-charcoal-600 px-2.5",
  minimal: "text-xs h-6 bg-transparent hover:bg-tertiary pl-1.5 pr-2"
}, Select3 = SelectPrimitive.Root, SelectGroup3 = SelectPrimitive.Group, SelectValue2 = SelectPrimitive.Value, SelectTrigger2 = React16.forwardRef(({ className, children, width = "content", size = "secondary/small", ...props }, ref) => {
  let sizeClassName = sizes3[size];
  return /* @__PURE__ */ (0, import_jsx_runtime157.jsxs)(
    SelectPrimitive.Trigger,
    {
      ref,
      className: cn(
        "ring-offset-background focus-visible:ring-ring group flex items-center justify-between gap-x-1 rounded text-text-dimmed transition placeholder:text-text-dimmed hover:text-text-bright focus-visible:bg-tertiary focus-visible:text-text-bright focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-offset-0 disabled:cursor-not-allowed disabled:opacity-50",
        width === "full" ? "w-full" : "w-min",
        sizeClassName,
        className
      ),
      ...props,
      children: [
        children,
        /* @__PURE__ */ (0, import_jsx_runtime157.jsx)(SelectPrimitive.Icon, { asChild: !0, children: /* @__PURE__ */ (0, import_jsx_runtime157.jsx)(
          import_lucide_react10.ChevronDown,
          {
            className: cn(
              "size-4 text-text-dimmed transition group-hover:text-text-bright group-focus:text-text-bright"
            )
          }
        ) })
      ]
    }
  );
});
SelectTrigger2.displayName = SelectPrimitive.Trigger.displayName;
var SelectContent = React16.forwardRef(({ className, children, position = "popper", ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime157.jsx)(SelectPrimitive.Portal, { children: /* @__PURE__ */ (0, import_jsx_runtime157.jsx)(
  SelectPrimitive.Content,
  {
    ref,
    className: cn(
      "relative z-50 min-w-max overflow-hidden rounded-md border border-charcoal-700 bg-background-dimmed text-text-bright shadow-md animate-in fade-in-40",
      position === "popper" && "translate-y-1",
      className
    ),
    position,
    ...props,
    children: /* @__PURE__ */ (0, import_jsx_runtime157.jsx)(
      SelectPrimitive.Viewport,
      {
        className: cn(
          "space-y-0.5 px-1 py-1",
          position === "popper" && "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
        ),
        children
      }
    )
  }
) }));
SelectContent.displayName = SelectPrimitive.Content.displayName;
var SelectLabel3 = React16.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime157.jsx)(
  SelectPrimitive.Label,
  {
    ref,
    className: cn(
      "-ml-1 -mr-1 mb-1 bg-charcoal-900 py-1.5 pl-2 pr-2 font-sans text-xxs font-normal uppercase leading-normal tracking-wider text-text-dimmed first-of-type:-mt-0",
      className
    ),
    ...props
  }
));
SelectLabel3.displayName = SelectPrimitive.Label.displayName;
var SelectItem3 = React16.forwardRef(
  ({ className, children, contentClassName, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime157.jsxs)(
    SelectPrimitive.Item,
    {
      ref,
      className: cn(
        "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-2 pr-12 text-sm outline-none transition data-[disabled]:pointer-events-none data-[disabled]:opacity-50 hover:bg-charcoal-750 focus:bg-charcoal-750/50",
        className
      ),
      ...props,
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime157.jsx)("span", { className: "absolute right-2 flex h-3.5 w-3.5 items-center justify-center", children: /* @__PURE__ */ (0, import_jsx_runtime157.jsx)(SelectPrimitive.ItemIndicator, { children: /* @__PURE__ */ (0, import_jsx_runtime157.jsx)(import_lucide_react10.Check, { className: "h-4 w-4" }) }) }),
        /* @__PURE__ */ (0, import_jsx_runtime157.jsx)(SelectPrimitive.ItemText, { children })
      ]
    }
  )
);
SelectItem3.displayName = SelectPrimitive.Item.displayName;
var SelectSeparator = React16.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime157.jsx)(
  SelectPrimitive.Separator,
  {
    ref,
    className: cn("bg-muted -mx-1 my-1 h-px", className),
    ...props
  }
));
SelectSeparator.displayName = SelectPrimitive.Separator.displayName;

// app/components/runs/TimeFrameFilter.tsx
var import_lucide_react11 = require("lucide-react"), import_react107 = require("react");
var import_jsx_runtime158 = require("react/jsx-runtime");
function TimeFrameFilter({ from, to, onRangeChanged }) {
  let [activeTab, setActiveTab] = (0, import_react107.useState)("absolute"), [isOpen, setIsOpen] = (0, import_react107.useState)(!1), [relativeTimeSeconds, setRelativeTimeSeconds] = (0, import_react107.useState)(), fromDate = from ? new Date(from) : void 0, toDate = to ? new Date(to) : void 0, relativeTimeFrameChanged = (0, import_react107.useCallback)((value) => {
    let to2 = (/* @__PURE__ */ new Date()).getTime(), from2 = to2 - value;
    onRangeChanged({ from: from2, to: to2 }), setRelativeTimeSeconds(value);
  }, []), absoluteTimeFrameChanged = (0, import_react107.useCallback)(({ from: from2, to: to2 }) => {
    setRelativeTimeSeconds(void 0);
    let fromTime = from2?.getTime(), toTime = to2?.getTime();
    onRangeChanged({ from: fromTime, to: toTime });
  }, []);
  return /* @__PURE__ */ (0, import_jsx_runtime158.jsxs)(Popover, { onOpenChange: (open) => setIsOpen(open), open: isOpen, modal: !0, children: [
    /* @__PURE__ */ (0, import_jsx_runtime158.jsx)(PopoverTrigger, { asChild: !0, children: /* @__PURE__ */ (0, import_jsx_runtime158.jsxs)(Button, { variant: "minimal/small", children: [
      /* @__PURE__ */ (0, import_jsx_runtime158.jsx)(Paragraph, { variant: "extra-small", className: "transition group-hover:text-text-bright", children: title(from, to, relativeTimeSeconds) }),
      /* @__PURE__ */ (0, import_jsx_runtime158.jsx)(import_lucide_react11.ChevronDownIcon, { className: "-ml-1.5 size-4 transition group-hover:text-text-bright" })
    ] }) }),
    /* @__PURE__ */ (0, import_jsx_runtime158.jsx)(PopoverContent, { align: "start", className: "bg-background-dimmed p-2", children: /* @__PURE__ */ (0, import_jsx_runtime158.jsxs)(
      ClientTabs,
      {
        value: activeTab,
        onValueChange: (v) => setActiveTab(v),
        className: "p-1",
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime158.jsx)(
            ClientTabsWithUnderline,
            {
              tabs: [
                { label: "Absolute", value: "absolute" },
                { label: "Relative", value: "relative" }
              ],
              currentValue: activeTab,
              layoutId: "time-tabs"
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime158.jsx)(ClientTabsContent, { value: "absolute", children: /* @__PURE__ */ (0, import_jsx_runtime158.jsx)(
            AbsoluteTimeFrame,
            {
              from: fromDate,
              to: toDate,
              onValueChange: absoluteTimeFrameChanged
            }
          ) }),
          /* @__PURE__ */ (0, import_jsx_runtime158.jsx)(ClientTabsContent, { value: "relative", children: /* @__PURE__ */ (0, import_jsx_runtime158.jsx)(
            RelativeTimeFrame,
            {
              value: relativeTimeSeconds,
              onValueChange: relativeTimeFrameChanged
            }
          ) })
        ]
      }
    ) })
  ] });
}
function title(from, to, relativeTimeSeconds) {
  if (!from && !to)
    return "All time periods";
  if (relativeTimeSeconds !== void 0)
    return timeFrameValues.find((t) => t.value === relativeTimeSeconds)?.label ?? "Timeframe";
  let fromString = from ? formatDateTime(new Date(from), "UTC", ["en-US"], !1, !0) : void 0, toString = to ? formatDateTime(new Date(to), "UTC", ["en-US"], !1, !0) : void 0;
  return from && !to ? `From ${fromString} (UTC)` : !from && to ? `To ${toString} (UTC)` : `${fromString} - ${toString} (UTC)`;
}
function RelativeTimeFrame({
  value,
  onValueChange
}) {
  return /* @__PURE__ */ (0, import_jsx_runtime158.jsx)("div", { className: "grid grid-cols-3 gap-1 pt-2", children: timeFrameValues.map((timeframe) => /* @__PURE__ */ (0, import_jsx_runtime158.jsx)(
    Button,
    {
      variant: value === timeframe.value ? "primary/small" : "tertiary/small",
      className: cn(
        "w-full",
        value !== timeframe.value && "border border-charcoal-700 text-xs group-hover:bg-charcoal-700"
      ),
      onClick: () => {
        onValueChange(timeframe.value);
      },
      children: timeframe.label
    },
    timeframe.value
  )) });
}
var timeFrameValues = [
  {
    label: "5 mins",
    value: 5 * 60 * 1e3
  },
  {
    label: "15 mins",
    value: 15 * 60 * 1e3
  },
  {
    label: "30 mins",
    value: 30 * 60 * 1e3
  },
  {
    label: "1 hour",
    value: 60 * 60 * 1e3
  },
  {
    label: "3 hours",
    value: 3 * 60 * 60 * 1e3
  },
  {
    label: "6 hours",
    value: 6 * 60 * 60 * 1e3
  },
  {
    label: "1 day",
    value: 24 * 60 * 60 * 1e3
  },
  {
    label: "3 days",
    value: 3 * 24 * 60 * 60 * 1e3
  },
  {
    label: "7 days",
    value: 7 * 24 * 60 * 60 * 1e3
  },
  {
    label: "10 days",
    value: 10 * 24 * 60 * 60 * 1e3
  },
  {
    label: "14 days",
    value: 14 * 24 * 60 * 60 * 1e3
  },
  {
    label: "30 days",
    value: 30 * 24 * 60 * 60 * 1e3
  }
];
function AbsoluteTimeFrame({
  from,
  to,
  onValueChange
}) {
  return /* @__PURE__ */ (0, import_jsx_runtime158.jsx)("div", { className: "flex flex-col gap-2 pt-2", children: /* @__PURE__ */ (0, import_jsx_runtime158.jsxs)("div", { className: "flex flex-col justify-start gap-2", children: [
    /* @__PURE__ */ (0, import_jsx_runtime158.jsxs)("div", { className: "space-y-1", children: [
      /* @__PURE__ */ (0, import_jsx_runtime158.jsx)(Label, { children: "From (UTC)" }),
      /* @__PURE__ */ (0, import_jsx_runtime158.jsx)(
        DateField,
        {
          label: "From (UTC)",
          defaultValue: from,
          onValueChange: (value) => {
            onValueChange({ from: value, to });
          },
          granularity: "second",
          showNowButton: !0,
          showClearButton: !0
        }
      )
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime158.jsxs)("div", { className: "space-y-1", children: [
      /* @__PURE__ */ (0, import_jsx_runtime158.jsx)(Label, { children: "To (UTC)" }),
      /* @__PURE__ */ (0, import_jsx_runtime158.jsx)(
        DateField,
        {
          label: "To (UTC)",
          defaultValue: to,
          onValueChange: (value) => {
            onValueChange({ from, to: value });
          },
          granularity: "second",
          showNowButton: !0,
          showClearButton: !0
        }
      )
    ] })
  ] }) });
}

// app/components/runs/RunFilters.tsx
var import_react109 = require("react"), import_assert_never9 = __toESM(require("assert-never")), import_jsx_runtime159 = require("react/jsx-runtime");
function RunsFilters() {
  let navigate = (0, import_react108.useNavigate)(), location = useOptimisticLocation(), searchParams = new URLSearchParams(location.search), { environment, status, from, to } = RunListSearchSchema.parse(
    Object.fromEntries(searchParams.entries())
  ), handleFilterChange = (0, import_react109.useCallback)((filterType, value) => {
    value ? searchParams.set(filterType, value) : searchParams.delete(filterType), searchParams.delete("cursor"), searchParams.delete("direction"), navigate(`${location.pathname}?${searchParams.toString()}`);
  }, []), handleStatusChange = (0, import_react109.useCallback)((value) => {
    handleFilterChange("status", value === "ALL" ? void 0 : value);
  }, []), handleEnvironmentChange = (0, import_react109.useCallback)((value) => {
    handleFilterChange("environment", value === "ALL" ? void 0 : value);
  }, []), handleTimeFrameChange = (0, import_react109.useCallback)((range) => {
    range.from ? searchParams.set("from", range.from.toString()) : searchParams.delete("from"), range.to ? searchParams.set("to", range.to.toString()) : searchParams.delete("to"), searchParams.delete("cursor"), searchParams.delete("direction"), navigate(`${location.pathname}?${searchParams.toString()}`);
  }, []), clearFilters = (0, import_react109.useCallback)(() => {
    searchParams.delete("status"), searchParams.delete("environment"), searchParams.delete("from"), searchParams.delete("to"), navigate(`${location.pathname}?${searchParams.toString()}`);
  }, []);
  return /* @__PURE__ */ (0, import_jsx_runtime159.jsxs)("div", { className: "flex flex-row justify-between", children: [
    /* @__PURE__ */ (0, import_jsx_runtime159.jsx)(SelectGroup3, { children: /* @__PURE__ */ (0, import_jsx_runtime159.jsxs)(
      Select3,
      {
        name: "environment",
        value: environment ?? "ALL",
        onValueChange: handleEnvironmentChange,
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime159.jsx)(SelectTrigger2, { size: "minimal", width: "full", children: /* @__PURE__ */ (0, import_jsx_runtime159.jsx)(SelectValue2, { placeholder: "Select environment", className: "ml-2 p-0" }) }),
          /* @__PURE__ */ (0, import_jsx_runtime159.jsxs)(SelectContent, { children: [
            /* @__PURE__ */ (0, import_jsx_runtime159.jsx)(SelectItem3, { value: "ALL", children: /* @__PURE__ */ (0, import_jsx_runtime159.jsx)(
              Paragraph,
              {
                variant: "extra-small",
                className: "pl-0.5 transition group-hover:text-text-bright",
                children: "All environments"
              }
            ) }),
            environmentKeys.map((env6) => /* @__PURE__ */ (0, import_jsx_runtime159.jsx)(SelectItem3, { value: env6, children: /* @__PURE__ */ (0, import_jsx_runtime159.jsxs)("div", { className: "flex items-center gap-x-2", children: [
              /* @__PURE__ */ (0, import_jsx_runtime159.jsx)(EnvironmentLabel, { environment: { type: env6 } }),
              /* @__PURE__ */ (0, import_jsx_runtime159.jsx)(Paragraph, { variant: "extra-small", children: "environment" })
            ] }) }, env6))
          ] })
        ]
      }
    ) }),
    /* @__PURE__ */ (0, import_jsx_runtime159.jsx)(SelectGroup3, { children: /* @__PURE__ */ (0, import_jsx_runtime159.jsxs)(Select3, { name: "status", value: status ?? "ALL", onValueChange: handleStatusChange, children: [
      /* @__PURE__ */ (0, import_jsx_runtime159.jsx)(SelectTrigger2, { size: "minimal", width: "full", children: /* @__PURE__ */ (0, import_jsx_runtime159.jsx)(SelectValue2, { placeholder: "Select status", className: "ml-2 p-0" }) }),
      /* @__PURE__ */ (0, import_jsx_runtime159.jsxs)(SelectContent, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime159.jsx)(SelectItem3, { value: "ALL", children: /* @__PURE__ */ (0, import_jsx_runtime159.jsx)(
          Paragraph,
          {
            variant: "extra-small",
            className: "pl-0.5 transition group-hover:text-text-bright",
            children: "All statuses"
          }
        ) }),
        statusKeys.map((status2) => /* @__PURE__ */ (0, import_jsx_runtime159.jsx)(SelectItem3, { value: status2, children: /* @__PURE__ */ (0, import_jsx_runtime159.jsxs)("span", { className: "flex items-center gap-1 text-xs", children: [
          /* @__PURE__ */ (0, import_jsx_runtime159.jsx)(FilterStatusIcon, { status: status2, className: "h-4 w-4" }),
          /* @__PURE__ */ (0, import_jsx_runtime159.jsx)(FilterStatusLabel, { status: status2 })
        ] }) }, status2))
      ] })
    ] }) }),
    /* @__PURE__ */ (0, import_jsx_runtime159.jsx)(TimeFrameFilter, { from, to, onRangeChanged: handleTimeFrameChange }),
    /* @__PURE__ */ (0, import_jsx_runtime159.jsx)(Button, { variant: "minimal/small", onClick: () => clearFilters(), LeadingIcon: import_solid56.TrashIcon })
  ] });
}
function FilterStatusLabel({ status }) {
  return /* @__PURE__ */ (0, import_jsx_runtime159.jsx)("span", { className: filterStatusClassNameColor(status), children: filterStatusTitle(status) });
}
function FilterStatusIcon({
  status,
  className
}) {
  switch (status) {
    case "COMPLETED":
      return /* @__PURE__ */ (0, import_jsx_runtime159.jsx)(import_solid56.CheckCircleIcon, { className: cn(filterStatusClassNameColor(status), className) });
    case "WAITING":
      return /* @__PURE__ */ (0, import_jsx_runtime159.jsx)(import_solid56.ClockIcon, { className: cn(filterStatusClassNameColor(status), className) });
    case "QUEUED":
      return /* @__PURE__ */ (0, import_jsx_runtime159.jsx)(import_solid56.PauseCircleIcon, { className: cn(filterStatusClassNameColor(status), className) });
    case "IN_PROGRESS":
      return /* @__PURE__ */ (0, import_jsx_runtime159.jsx)(Spinner, { className: cn(filterStatusClassNameColor(status), className) });
    case "TIMEDOUT":
      return /* @__PURE__ */ (0, import_jsx_runtime159.jsx)(import_solid56.ExclamationTriangleIcon, { className: cn(filterStatusClassNameColor(status), className) });
    case "CANCELED":
      return /* @__PURE__ */ (0, import_jsx_runtime159.jsx)(import_solid56.NoSymbolIcon, { className: cn(filterStatusClassNameColor(status), className) });
    case "FAILED":
      return /* @__PURE__ */ (0, import_jsx_runtime159.jsx)(import_solid56.XCircleIcon, { className: cn(filterStatusClassNameColor(status), className) });
    default:
      (0, import_assert_never9.default)(status);
  }
}
function filterStatusTitle(status) {
  switch (status) {
    case "QUEUED":
      return "Queued";
    case "IN_PROGRESS":
      return "In progress";
    case "WAITING":
      return "Waiting";
    case "COMPLETED":
      return "Completed";
    case "FAILED":
      return "Failed";
    case "CANCELED":
      return "Canceled";
    case "TIMEDOUT":
      return "Timed out";
    default:
      (0, import_assert_never9.default)(status);
  }
}
function filterStatusClassNameColor(status) {
  switch (status) {
    case "QUEUED":
      return "text-charcoal-500";
    case "IN_PROGRESS":
      return "text-blue-500";
    case "WAITING":
      return "text-blue-500";
    case "COMPLETED":
      return "text-green-500";
    case "FAILED":
      return "text-rose-500";
    case "CANCELED":
      return "text-charcoal-500";
    case "TIMEDOUT":
      return "text-amber-300";
    default:
      (0, import_assert_never9.default)(status);
  }
}

// app/routes/_app.orgs.$organizationSlug.projects.$projectParam.jobs.$jobParam._index/route.tsx
var import_jsx_runtime160 = require("react/jsx-runtime"), loader35 = async ({ request, params }) => {
  let userId = await requireUserId(request), { jobParam: jobParam2, projectParam: projectParam2, organizationSlug } = JobParamsSchema.parse(params), url = new URL(request.url), s = Object.fromEntries(url.searchParams.entries()), searchParams = RunListSearchSchema.parse(s), list3 = await new RunListPresenter().call({
    userId,
    filterEnvironment: searchParams.environment,
    filterStatus: searchParams.status,
    jobSlug: jobParam2,
    projectSlug: projectParam2,
    organizationSlug,
    direction: searchParams.direction,
    cursor: searchParams.cursor,
    from: searchParams.from,
    to: searchParams.to
  });
  return (0, import_remix_typedjson38.typedjson)({
    list: list3
  });
};
function Page27() {
  let { list: list3 } = (0, import_remix_typedjson38.useTypedLoaderData)(), isLoading2 = (0, import_react110.useNavigation)().state !== "idle", organization = useOrganization(), project = useProject(), job = useJob(), user = useUser();
  return /* @__PURE__ */ (0, import_jsx_runtime160.jsxs)("div", { className: "overflow-y-auto scrollbar-thin scrollbar-track-transparent scrollbar-thumb-charcoal-600", children: [
    job.hasIntegrationsRequiringAction && /* @__PURE__ */ (0, import_jsx_runtime160.jsx)(Callout, { variant: "error", to: organizationIntegrationsPath(organization), className: "mb-2", children: import_simplur2.default`This Job has ${job.integrations.filter((j) => j.setupStatus === "MISSING_FIELDS").length} Integration[|s] that [has|have] not been configured.` }),
    /* @__PURE__ */ (0, import_jsx_runtime160.jsx)(Help, { defaultOpen: list3.runs.length === 0, children: (open) => /* @__PURE__ */ (0, import_jsx_runtime160.jsxs)("div", { className: cn("grid h-fit gap-4", open ? "grid-cols-2" : "grid-cols-1"), children: [
      /* @__PURE__ */ (0, import_jsx_runtime160.jsxs)("div", { children: [
        /* @__PURE__ */ (0, import_jsx_runtime160.jsxs)("div", { className: "mb-2 flex items-center justify-between gap-x-2", children: [
          /* @__PURE__ */ (0, import_jsx_runtime160.jsx)(RunsFilters, {}),
          /* @__PURE__ */ (0, import_jsx_runtime160.jsxs)("div", { className: "flex items-center justify-end gap-x-2", children: [
            /* @__PURE__ */ (0, import_jsx_runtime160.jsx)(HelpTrigger, { title: "How do I run my Job?" }),
            /* @__PURE__ */ (0, import_jsx_runtime160.jsx)(ListPagination, { list: list3 })
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime160.jsx)(
          RunsTable,
          {
            total: list3.runs.length,
            hasFilters: !1,
            runs: list3.runs,
            isLoading: isLoading2,
            runsParentPath: jobRunsParentPath(organization, project, job),
            currentUser: user
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime160.jsx)(ListPagination, { list: list3, className: "mt-2 justify-end" })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime160.jsx)(HelpContent, { title: "How to run your Job", children: /* @__PURE__ */ (0, import_jsx_runtime160.jsx)(HowToRunYourJob, {}) })
    ] }) })
  ] });
}

// app/routes/api.v1.endpoints.$environmentId.$endpointSlug.index.$indexHookIdentifier/route.ts
var route_exports41 = {};
__export(route_exports41, {
  ParamsSchema: () => ParamsSchema3,
  action: () => action11,
  loader: () => loader36
});
var import_server_runtime13 = require("@remix-run/server-runtime"), import_zod105 = require("zod");

// app/routes/api.v1.endpoints.$environmentId.$endpointSlug.index.$indexHookIdentifier/TriggerEndpointIndexHookService.server.ts
var import_zod104 = require("zod");
var TriggerEndpointIndexHookService = class {
  #prismaClient;
  constructor(prismaClient = prisma) {
    this.#prismaClient = prismaClient;
  }
  async call({
    environmentId,
    endpointSlug,
    indexHookIdentifier,
    body
  }) {
    logger.debug("TriggerEndpointIndexHookService.call", {
      environmentId,
      endpointSlug,
      indexHookIdentifier,
      body
    }), await $transaction(this.#prismaClient, async (tx) => {
      let endpoint = await tx.endpoint.findUnique({
        where: {
          environmentId_slug: {
            environmentId,
            slug: endpointSlug
          }
        },
        include: {
          environment: !0
        }
      });
      if (!endpoint || !endpoint.url)
        throw new Error("Endpoint not found");
      if (endpoint.indexingHookIdentifier !== indexHookIdentifier)
        throw new Error("Index hook identifier is invalid");
      let reason = parseReasonFromBody(body), index = await tx.endpointIndex.create({
        data: {
          endpointId: endpoint.id,
          status: "PENDING",
          source: "HOOK",
          reason,
          sourceData: body
        }
      });
      await workerQueue.enqueue(
        "performEndpointIndexing",
        {
          id: index.id
        },
        {
          runAt: new Date(Date.now() + 5e3),
          maxAttempts: endpoint.environment.type === RuntimeEnvironmentType3.DEVELOPMENT ? 1 : void 0,
          tx
        }
      );
    });
  }
};
function parseReasonFromBody(body) {
  let vercelDeployment = VercelDeploymentWebhookSchema.safeParse(body);
  if (!vercelDeployment.success)
    return;
  let { payload, type } = vercelDeployment.data;
  if (type !== "deployment.succeeded")
    return;
  let githubMeta = VercelDeploymentGithubMetaSchema.safeParse(payload.deployment.meta);
  return githubMeta.success ? `"${githubMeta.data.githubCommitMessage}" was deployed from ${githubMeta.data.githubCommitRef} (${githubMeta.data.githubCommitSha.slice(0, 7)}) to ${payload.deployment.name}` : `Vercel project ${payload.deployment.name} was deployed to ${payload.deployment.url}`;
}
var VercelDeploymentWebhookSchema = import_zod104.z.object({
  id: import_zod104.z.string(),
  payload: import_zod104.z.object({
    user: import_zod104.z.object({
      id: import_zod104.z.string()
    }),
    team: import_zod104.z.object({
      id: import_zod104.z.string()
    }),
    deployment: import_zod104.z.object({
      id: import_zod104.z.string(),
      meta: import_zod104.z.record(import_zod104.z.any()),
      name: import_zod104.z.string(),
      url: import_zod104.z.string(),
      inspectorUrl: import_zod104.z.string()
    }),
    links: import_zod104.z.object({
      deployment: import_zod104.z.string(),
      project: import_zod104.z.string()
    }),
    name: import_zod104.z.string(),
    plan: import_zod104.z.string(),
    project: import_zod104.z.object({
      id: import_zod104.z.string()
    }),
    regions: import_zod104.z.array(import_zod104.z.string()),
    target: import_zod104.z.string(),
    type: import_zod104.z.string(),
    url: import_zod104.z.string()
  }),
  createdAt: import_zod104.z.number(),
  type: import_zod104.z.enum([
    "deployment.succeeded",
    "deployment.failed",
    "deployment.ready",
    "deployment.created",
    "deployment.error",
    "deployment.canceled"
  ])
}), VercelDeploymentGithubMetaSchema = import_zod104.z.object({
  githubCommitAuthorName: import_zod104.z.string(),
  githubCommitMessage: import_zod104.z.string(),
  githubCommitOrg: import_zod104.z.string(),
  githubCommitRef: import_zod104.z.string(),
  githubCommitRepo: import_zod104.z.string(),
  githubCommitSha: import_zod104.z.string(),
  githubDeployment: import_zod104.z.string(),
  githubOrg: import_zod104.z.string(),
  githubRepo: import_zod104.z.string(),
  githubRepoOwnerType: import_zod104.z.string(),
  githubCommitRepoId: import_zod104.z.string(),
  githubRepoId: import_zod104.z.string(),
  githubRepoVisibility: import_zod104.z.string(),
  githubCommitAuthorLogin: import_zod104.z.string(),
  branchAlias: import_zod104.z.string()
});

// app/routes/api.v1.endpoints.$environmentId.$endpointSlug.index.$indexHookIdentifier/route.ts
var ParamsSchema3 = import_zod105.z.object({
  environmentId: import_zod105.z.string(),
  endpointSlug: import_zod105.z.string(),
  indexHookIdentifier: import_zod105.z.string()
});
async function loader36({ params }) {
  let parsedParams = ParamsSchema3.safeParse(params);
  if (!parsedParams.success)
    return {
      status: 400,
      json: {
        error: "Invalid params"
      }
    };
  let { environmentId, endpointSlug, indexHookIdentifier } = parsedParams.data;
  return await new TriggerEndpointIndexHookService().call({
    environmentId,
    endpointSlug,
    indexHookIdentifier
  }), (0, import_server_runtime13.json)({
    ok: !0
  });
}
async function action11({ request, params }) {
  let parsedParams = ParamsSchema3.safeParse(params);
  if (!parsedParams.success)
    return {
      status: 400,
      json: {
        error: "Invalid params"
      }
    };
  let { environmentId, endpointSlug, indexHookIdentifier } = parsedParams.data, body = await request.text();
  return await new TriggerEndpointIndexHookService().call({
    environmentId,
    endpointSlug,
    indexHookIdentifier,
    body: body ? safeJsonParse3(body) : void 0
  }), (0, import_server_runtime13.json)({
    ok: !0
  });
}

// app/routes/_app.orgs.$organizationSlug.projects.$projectParam.environments.stream/route.tsx
var route_exports42 = {};
__export(route_exports42, {
  loader: () => loader37
});

// app/presenters/EnvironmentsStreamPresenter.server.ts
var EnvironmentsStreamPresenter = class {
  #prismaClient;
  constructor(prismaClient = prisma) {
    this.#prismaClient = prismaClient;
  }
  async call({
    request,
    userId,
    projectSlug
  }) {
    let lastEnvironmentSignals;
    return sse({
      request,
      run: async (send, stop) => {
        let nextEnvironmentSignals = await this.#runForUpdates({
          userId,
          projectSlug
        });
        if (!nextEnvironmentSignals)
          return stop();
        let lastEnvironmentIds = lastEnvironmentSignals ? Object.keys(lastEnvironmentSignals) : [], nextEnvironmentIds = Object.keys(nextEnvironmentSignals);
        //push update if the number of environments is different
        (nextEnvironmentIds.length !== lastEnvironmentIds.length || //push update if the list of ids is different
        lastEnvironmentIds.some((id) => !nextEnvironmentSignals[id]) || nextEnvironmentIds.some((id) => !lastEnvironmentSignals[id]) || //push update if any signals changed
        nextEnvironmentIds.some(
          (id) => nextEnvironmentSignals[id].lastUpdatedAt !== lastEnvironmentSignals[id].lastUpdatedAt || nextEnvironmentSignals[id].lastTotalEndpointUpdatedTime !== lastEnvironmentSignals[id].lastTotalEndpointUpdatedTime || nextEnvironmentSignals[id].lastTotalIndexingUpdatedTime !== lastEnvironmentSignals[id].lastTotalIndexingUpdatedTime
        )) && send({ data: (/* @__PURE__ */ new Date()).toISOString() }), lastEnvironmentSignals = nextEnvironmentSignals;
      }
    });
  }
  async #runForUpdates({
    userId,
    projectSlug
  }) {
    let environments2 = await this.#prismaClient.runtimeEnvironment.findMany({
      select: {
        id: !0,
        updatedAt: !0,
        endpoints: {
          select: {
            updatedAt: !0,
            indexings: {
              select: {
                updatedAt: !0
              }
            }
          }
        }
      },
      where: {
        project: {
          slug: projectSlug
        },
        organization: {
          members: {
            some: {
              userId
            }
          }
        }
      }
    });
    return environments2 ? environments2.reduce((acc, environment) => {
      let lastUpdatedAt = environment.updatedAt.getTime(), lastTotalEndpointUpdatedTime = environment.endpoints.reduce(
        (prev, endpoint) => prev + endpoint.updatedAt.getTime(),
        0
      ), lastTotalIndexingUpdatedTime = environment.endpoints.reduce(
        (prev, endpoint) => prev + endpoint.indexings.reduce((prev2, indexing) => prev2 + indexing.updatedAt.getTime(), 0),
        0
      );
      return {
        ...acc,
        [environment.id]: {
          lastUpdatedAt,
          lastTotalEndpointUpdatedTime,
          lastTotalIndexingUpdatedTime
        }
      };
    }, {}) : null;
  }
};

// app/routes/_app.orgs.$organizationSlug.projects.$projectParam.environments.stream/route.tsx
var loader37 = async ({ request, params }) => {
  let userId = await requireUserId(request), { projectParam: projectParam2 } = ProjectParamSchema.parse(params);
  return await new EnvironmentsStreamPresenter().call({
    request,
    userId,
    projectSlug: projectParam2
  });
};

// app/routes/_app.orgs.$organizationSlug.projects.$projectParam.jobs.$jobParam.test/route.tsx
var route_exports43 = {};
__export(route_exports43, {
  action: () => action12,
  default: () => Page28,
  loader: () => loader38
});
var import_react111 = require("@conform-to/react"), import_zod106 = require("@conform-to/zod"), import_solid57 = require("@heroicons/react/20/solid"), import_outline5 = require("@heroicons/react/24/outline"), import_react112 = require("@remix-run/react"), import_server_runtime14 = require("@remix-run/server-runtime"), import_react113 = require("react"), import_remix_typedjson39 = require("remix-typedjson"), import_zod107 = require("zod");

// app/components/primitives/DetailCell.tsx
var import_jsx_runtime161 = require("react/jsx-runtime"), variations4 = {
  small: {
    label: {
      variant: "small",
      className: "m-0 leading-[1.1rem]"
    },
    description: {
      variant: "extra-small",
      className: "m-0"
    }
  },
  base: {
    label: {
      variant: "base",
      className: "m-0 leading-[1.1rem] "
    },
    description: {
      variant: "small",
      className: "m-0"
    }
  }
};
function DetailCell({
  leadingIcon,
  leadingIconClassName,
  trailingIcon,
  trailingIconClassName,
  label,
  description,
  className,
  variant: variant3 = "small"
}) {
  let variation = variations4[variant3];
  return /* @__PURE__ */ (0, import_jsx_runtime161.jsxs)("div", { className: cn("group flex h-11 w-full items-center gap-3 rounded-md p-1 pr-3", className), children: [
    /* @__PURE__ */ (0, import_jsx_runtime161.jsx)(
      IconInBox,
      {
        icon: leadingIcon,
        className: cn("flex-none transition group-hover:border-charcoal-750", leadingIconClassName)
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime161.jsxs)("div", { className: "flex flex-1 flex-col", children: [
      /* @__PURE__ */ (0, import_jsx_runtime161.jsx)(
        Paragraph,
        {
          variant: variation.label.variant,
          className: cn("flex-1 text-left", variation.label.className),
          children: label
        }
      ),
      description && /* @__PURE__ */ (0, import_jsx_runtime161.jsx)(
        Paragraph,
        {
          variant: variation.description.variant,
          className: cn("flex-1 text-left text-text-dimmed", variation.description.className),
          children: description
        }
      )
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime161.jsx)("div", { className: "flex flex-none items-center gap-1", children: /* @__PURE__ */ (0, import_jsx_runtime161.jsx)(
      Icon,
      {
        icon: trailingIcon,
        className: cn(
          "h-6 w-6 flex-none transition group-hover:border-charcoal-750",
          trailingIconClassName
        )
      }
    ) })
  ] });
}

// app/presenters/TestJobPresenter.server.ts
var TestJobPresenter = class {
  #prismaClient;
  constructor(prismaClient = prisma) {
    this.#prismaClient = prismaClient;
  }
  async call({
    userId,
    organizationSlug,
    projectSlug,
    jobSlug
  }) {
    let job = await this.#prismaClient.job.findFirst({
      select: {
        aliases: {
          select: {
            version: {
              select: {
                id: !0,
                version: !0,
                examples: {
                  select: {
                    id: !0,
                    name: !0,
                    icon: !0,
                    payload: !0
                  }
                },
                integrations: {
                  select: {
                    integration: {
                      select: {
                        authSource: !0
                      }
                    }
                  }
                }
              }
            },
            environment: {
              select: {
                id: !0,
                type: !0,
                slug: !0,
                orgMember: {
                  select: {
                    userId: !0
                  }
                }
              }
            }
          },
          where: {
            name: "latest",
            environment: {
              OR: [
                {
                  orgMember: null
                },
                {
                  orgMember: {
                    userId
                  }
                }
              ]
            }
          }
        },
        runs: {
          select: {
            id: !0,
            createdAt: !0,
            number: !0,
            status: !0,
            event: {
              select: {
                payload: !0
              }
            }
          },
          orderBy: {
            createdAt: "desc"
          },
          take: 5
        }
      },
      where: {
        organization: {
          slug: organizationSlug,
          members: {
            some: {
              userId
            }
          }
        },
        project: {
          slug: projectSlug
        },
        slug: jobSlug
      }
    });
    if (!job)
      throw new Error("Job not found");
    let examples3 = job.aliases.flatMap(
      (alias) => alias.version.examples.map((example) => ({
        ...example,
        icon: example.icon ?? void 0,
        payload: example.payload ? JSON.stringify(example.payload, exampleReplacer, 2) : void 0
      }))
    );
    return {
      environments: job.aliases.map((alias) => ({
        id: alias.environment.id,
        type: alias.environment.type,
        slug: alias.environment.slug,
        userId: alias.environment.orgMember?.userId,
        versionId: alias.version.id,
        hasAuthResolver: alias.version.integrations.some(
          (i) => i.integration.authSource === "RESOLVER"
        )
      })),
      examples: examples3,
      runs: job.runs.map((r) => ({
        id: r.id,
        number: r.number,
        status: r.status,
        created: r.createdAt,
        payload: r.event.payload ? JSON.stringify(r.event.payload, null, 2) : void 0
      }))
    };
  }
};
function exampleReplacer(key, value) {
  return replacements.forEach((replacement) => {
    value === replacement.marker && (value = replacement.replace({
      match: {
        key,
        value
      },
      data: { now: /* @__PURE__ */ new Date() }
    }));
  }), value;
}

// app/services/jobs/testJob.server.ts
var TestJobService = class {
  #prismaClient;
  constructor(prismaClient = prisma) {
    this.#prismaClient = prismaClient;
  }
  async call({
    environmentId,
    versionId,
    payload,
    accountId
  }) {
    return await $transaction(
      this.#prismaClient,
      async (tx) => {
        let environment = await tx.runtimeEnvironment.findUniqueOrThrow({
          include: {
            organization: !0,
            project: !0
          },
          where: {
            id: environmentId
          }
        }), version3 = await tx.jobVersion.findUniqueOrThrow({
          include: {
            job: !0
          },
          where: {
            id: versionId
          }
        }), externalAccount = accountId ? await tx.externalAccount.upsert({
          where: {
            environmentId_identifier: {
              environmentId: environment.id,
              identifier: accountId
            }
          },
          create: {
            environmentId: environment.id,
            organizationId: environment.organizationId,
            identifier: accountId
          },
          update: {}
        }) : void 0, event = EventSpecificationSchema.parse(version3.eventSpecification), eventName = Array.isArray(event.name) ? event.name[0] : event.name, eventLog = await tx.eventRecord.create({
          data: {
            organization: {
              connect: {
                id: environment.organizationId
              }
            },
            project: {
              connect: {
                id: environment.projectId
              }
            },
            environment: {
              connect: {
                id: environment.id
              }
            },
            externalAccount: externalAccount ? {
              connect: {
                id: externalAccount.id
              }
            } : void 0,
            eventId: `test:${eventName}:${(/* @__PURE__ */ new Date()).getTime()}`,
            name: eventName,
            timestamp: /* @__PURE__ */ new Date(),
            payload: payload ?? {},
            context: {},
            source: event.source ?? "trigger.dev",
            isTest: !0,
            internal: !0
          }
        });
        return await new CreateRunService(tx).call({
          environment,
          eventId: eventLog.id,
          job: version3.job,
          version: version3
        });
      },
      { timeout: 1e4 }
    );
  }
};

// app/utils/icon.ts
var import_companyicons4 = require("@trigger.dev/companyicons");
var isValidIcon = (icon) => icon ? iconNames.includes(icon) || (0, import_companyicons4.hasIcon)(icon) || tablerIcons.has(icon) : !1;

// app/routes/_app.orgs.$organizationSlug.projects.$projectParam.jobs.$jobParam.test/route.tsx
var import_jsx_runtime162 = require("react/jsx-runtime"), loader38 = async ({ request, params }) => {
  let userId = await requireUserId(request), { organizationSlug, projectParam: projectParam2, jobParam: jobParam2 } = JobParamsSchema.parse(params), presenter = new TestJobPresenter(), { environments: environments2, runs, examples: examples3 } = await presenter.call({
    userId,
    organizationSlug,
    projectSlug: projectParam2,
    jobSlug: jobParam2
  });
  return (0, import_remix_typedjson39.typedjson)({ environments: environments2, runs, examples: examples3 });
}, schema9 = import_zod107.z.object({
  payload: import_zod107.z.string().transform((payload, ctx) => {
    try {
      return JSON.parse(payload);
    } catch (e) {
      console.log("parsing error", e), e instanceof Error ? ctx.addIssue({
        code: import_zod107.z.ZodIssueCode.custom,
        message: e.message
      }) : ctx.addIssue({
        code: import_zod107.z.ZodIssueCode.custom,
        message: "This is invalid JSON"
      });
    }
  }),
  environmentId: import_zod107.z.string(),
  versionId: import_zod107.z.string(),
  accountId: import_zod107.z.string().optional()
}), action12 = async ({ request, params }) => {
  let { organizationSlug, projectParam: projectParam2, jobParam: jobParam2 } = JobParamsSchema.parse(params), formData = await request.formData(), submission = (0, import_zod106.parse)(formData, { schema: schema9 });
  if (!submission.value)
    return (0, import_server_runtime14.json)(submission);
  let run = await new TestJobService().call(submission.value);
  return run ? redirectWithSuccessMessage(
    jobRunDashboardPath(
      { slug: organizationSlug },
      { slug: projectParam2 },
      { slug: jobParam2 },
      { id: run.id }
    ),
    request,
    "Test run created"
  ) : redirectBackWithErrorMessage(
    request,
    "Unable to start a test run: Something went wrong"
  );
}, startingJson2 = `{

}`;
function Page28() {
  let { environments: environments2, runs, examples: examples3 } = (0, import_remix_typedjson39.useTypedLoaderData)(), submit = (0, import_react112.useSubmit)(), lastSubmission = (0, import_react112.useActionData)(), [selectedCodeSampleId, setSelectedCodeSampleId] = (0, import_react113.useState)(
    examples3.at(0)?.id ?? runs.at(0)?.id
  ), selectedCodeSample = examples3.find((e) => e.id === selectedCodeSampleId)?.payload ?? runs.find((r) => r.id === selectedCodeSampleId)?.payload, [defaultJson, setDefaultJson] = (0, import_react113.useState)(selectedCodeSample ?? startingJson2), setCode = (0, import_react113.useCallback)((code) => {
    setDefaultJson(code);
  }, []), [selectedEnvironmentId, setSelectedEnvironmentId] = (0, import_react113.useState)(environments2.at(0)?.id), selectedEnvironment = environments2.find((e) => e.id === selectedEnvironmentId), currentJson = (0, import_react113.useRef)(defaultJson), [currentAccountId, setCurrentAccountId] = (0, import_react113.useState)(void 0), submitForm = (0, import_react113.useCallback)(
    (e) => {
      selectedEnvironmentId && (submit(
        {
          payload: currentJson.current,
          environmentId: selectedEnvironmentId,
          versionId: selectedEnvironment?.versionId ?? "",
          ...currentAccountId ? { accountId: currentAccountId } : {}
        },
        {
          action: "",
          method: "post"
        }
      ), e.preventDefault());
    },
    [currentJson, selectedEnvironmentId, currentAccountId]
  ), [form, { environmentId, payload, accountId }] = (0, import_react111.useForm)({
    id: "test-job",
    // TODO: type this
    lastSubmission,
    onValidate({ formData }) {
      return (0, import_zod106.parse)(formData, { schema: schema9 });
    }
  });
  return environments2.length === 0 ? /* @__PURE__ */ (0, import_jsx_runtime162.jsxs)("div", { className: "flex flex-col gap-4", children: [
    /* @__PURE__ */ (0, import_jsx_runtime162.jsx)(Callout, { variant: "info", children: "There are no environments that you can test this job with \u2013 you can't run Tests against your teammates' Dev environments. You should run the code locally (using the CLI) so that this Job will be associated with your Dev environment. This also means that this Job hasn't been deployed to Staging or Prod yet." }),
    /* @__PURE__ */ (0, import_jsx_runtime162.jsxs)("div", { children: [
      /* @__PURE__ */ (0, import_jsx_runtime162.jsx)(Header2, { spacing: !0, children: "Useful guides" }),
      /* @__PURE__ */ (0, import_jsx_runtime162.jsxs)("div", { className: "flex gap-2", children: [
        /* @__PURE__ */ (0, import_jsx_runtime162.jsx)(
          LinkButton,
          {
            to: docsPath("documentation/guides/cli#dev-command"),
            variant: "secondary/small",
            LeadingIcon: "docs",
            children: "Using the CLI"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime162.jsx)(
          LinkButton,
          {
            to: docsPath("documentation/guides/deployment"),
            variant: "secondary/small",
            LeadingIcon: "docs",
            children: "Deploying your Jobs"
          }
        )
      ] })
    ] })
  ] }) : /* @__PURE__ */ (0, import_jsx_runtime162.jsx)("div", { className: "grid grid-cols-1 gap-4 overflow-hidden", children: /* @__PURE__ */ (0, import_jsx_runtime162.jsxs)(
    import_react112.Form,
    {
      className: "grid grid-rows-[1fr_2.5rem] overflow-hidden",
      method: "post",
      ...form.props,
      onSubmit: (e) => submitForm(e),
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime162.jsxs)("div", { className: "grid grid-cols-[1fr_auto] overflow-hidden", children: [
          /* @__PURE__ */ (0, import_jsx_runtime162.jsx)("div", { className: "relative h-full flex-1 overflow-hidden rounded-l border border-grid-bright", children: /* @__PURE__ */ (0, import_jsx_runtime162.jsx)(
            JSONEditor,
            {
              defaultValue: defaultJson,
              readOnly: !1,
              basicSetup: !0,
              onChange: (v) => {
                currentJson.current = v, selectedCodeSampleId && v !== selectedCodeSample && (setDefaultJson(v), setSelectedCodeSampleId(void 0));
              },
              height: "100%",
              "min-height": "100%",
              "max-height": "100%",
              autoFocus: !0,
              placeholder: "Use your schema to enter valid JSON or add one of the example payloads then click 'Run test'",
              className: "h-full"
            }
          ) }),
          /* @__PURE__ */ (0, import_jsx_runtime162.jsxs)("div", { className: "flex h-full w-fit min-w-[20rem] flex-col gap-4 overflow-y-auto rounded-r border border-l-0 border-grid-bright p-4", children: [
            examples3.length > 0 && /* @__PURE__ */ (0, import_jsx_runtime162.jsxs)("div", { className: "flex flex-col gap-2", children: [
              /* @__PURE__ */ (0, import_jsx_runtime162.jsx)(Header2, { children: "Example payloads" }),
              examples3.map((example) => /* @__PURE__ */ (0, import_jsx_runtime162.jsx)(
                "button",
                {
                  type: "button",
                  onClick: (e) => {
                    setCode(example.payload ?? ""), setSelectedCodeSampleId(example.id);
                  },
                  children: /* @__PURE__ */ (0, import_jsx_runtime162.jsx)(
                    DetailCell,
                    {
                      leadingIcon: isValidIcon(example.icon) ? example.icon : import_outline5.CodeBracketIcon,
                      leadingIconClassName: "text-blue-500",
                      label: example.name,
                      trailingIcon: example.id === selectedCodeSampleId ? "check" : "plus",
                      trailingIconClassName: example.id === selectedCodeSampleId ? "text-green-500 group-hover:text-green-400" : "text-charcoal-500 group-hover:text-text-bright"
                    }
                  )
                },
                example.id
              ))
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime162.jsxs)("div", { className: "flex flex-col gap-2", children: [
              /* @__PURE__ */ (0, import_jsx_runtime162.jsx)(Header2, { children: "Recent payloads" }),
              runs.length === 0 ? /* @__PURE__ */ (0, import_jsx_runtime162.jsx)(Callout, { variant: "info", children: "Recent payloads will show here once you've completed a Run." }) : /* @__PURE__ */ (0, import_jsx_runtime162.jsx)("div", { className: "flex flex-col gap-2", children: runs.map((run) => /* @__PURE__ */ (0, import_jsx_runtime162.jsx)(
                "button",
                {
                  type: "button",
                  onClick: (e) => {
                    setCode(run.payload ?? ""), setSelectedCodeSampleId(run.id);
                  },
                  children: /* @__PURE__ */ (0, import_jsx_runtime162.jsx)(
                    DetailCell,
                    {
                      leadingIcon: import_outline5.ClockIcon,
                      leadingIconClassName: "text-charcoal-400",
                      label: /* @__PURE__ */ (0, import_jsx_runtime162.jsx)(DateTime, { date: run.created }),
                      description: /* @__PURE__ */ (0, import_jsx_runtime162.jsxs)(import_jsx_runtime162.Fragment, { children: [
                        typeof run.number == "number" ? `Run #${run.number}` : `Run ${run.id.slice(0, 8)}`,
                        /* @__PURE__ */ (0, import_jsx_runtime162.jsx)("span", { className: runStatusClassNameColor(run.status), children: runStatusTitle(run.status).toLocaleLowerCase() })
                      ] }),
                      trailingIcon: run.id === selectedCodeSampleId ? "check" : "plus",
                      trailingIconClassName: run.id === selectedCodeSampleId ? "text-green-500 group-hover:text-green-400" : "text-charcoal-500 group-hover:text-text-bright"
                    }
                  )
                },
                run.id
              )) })
            ] }),
            selectedEnvironment?.hasAuthResolver && /* @__PURE__ */ (0, import_jsx_runtime162.jsxs)("div", { className: "flex flex-col gap-2", children: [
              /* @__PURE__ */ (0, import_jsx_runtime162.jsx)(Header2, { children: "Account ID" }),
              /* @__PURE__ */ (0, import_jsx_runtime162.jsxs)(InputGroup, { fullWidth: !0, children: [
                /* @__PURE__ */ (0, import_jsx_runtime162.jsx)(
                  Input,
                  {
                    type: "text",
                    fullWidth: !0,
                    variant: "large",
                    value: currentAccountId,
                    placeholder: "e.g. abc_1234",
                    onChange: (e) => setCurrentAccountId(e.target.value)
                  }
                ),
                /* @__PURE__ */ (0, import_jsx_runtime162.jsx)(FormError, { children: accountId.error }),
                /* @__PURE__ */ (0, import_jsx_runtime162.jsxs)(Hint, { children: [
                  "Learn about testing Jobs with an Account ID in our",
                  " ",
                  /* @__PURE__ */ (0, import_jsx_runtime162.jsx)(TextLink, { href: "https://trigger.dev/docs/documentation/guides/using-integrations-byo-auth#testing-jobs-with-account-id", children: "BYOAuth docs" })
                ] })
              ] })
            ] })
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime162.jsxs)("div", { className: "flex items-center justify-between", children: [
          /* @__PURE__ */ (0, import_jsx_runtime162.jsx)(
            LinkButton,
            {
              variant: "tertiary/medium",
              to: "https://trigger.dev/docs/documentation/guides/testing-jobs",
              TrailingIcon: "external-link",
              children: "Learn more about running tests"
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime162.jsxs)("div", { className: "flex flex-none items-center justify-end gap-2", children: [
            payload.error ? /* @__PURE__ */ (0, import_jsx_runtime162.jsx)(FormError, { id: payload.errorId, children: payload.error }) : /* @__PURE__ */ (0, import_jsx_runtime162.jsx)("div", {}),
            /* @__PURE__ */ (0, import_jsx_runtime162.jsx)(SelectGroup3, { children: /* @__PURE__ */ (0, import_jsx_runtime162.jsxs)(
              Select3,
              {
                name: "environment",
                value: selectedEnvironmentId,
                onValueChange: setSelectedEnvironmentId,
                children: [
                  /* @__PURE__ */ (0, import_jsx_runtime162.jsxs)(SelectTrigger2, { size: "medium", children: [
                    /* @__PURE__ */ (0, import_jsx_runtime162.jsx)(SelectValue2, { placeholder: "Select environment", className: "m-0 p-0" }),
                    " Environment"
                  ] }),
                  /* @__PURE__ */ (0, import_jsx_runtime162.jsx)(SelectContent, { children: environments2.map((environment) => /* @__PURE__ */ (0, import_jsx_runtime162.jsx)(SelectItem3, { value: environment.id, children: /* @__PURE__ */ (0, import_jsx_runtime162.jsx)(EnvironmentLabel, { environment }) }, environment.id)) })
                ]
              }
            ) }),
            /* @__PURE__ */ (0, import_jsx_runtime162.jsx)(
              Button,
              {
                type: "submit",
                variant: "primary/small",
                LeadingIcon: import_solid57.BeakerIcon,
                shortcut: { key: "enter", modifiers: ["mod"], enabledOnInputElements: !0 },
                children: "Run test"
              }
            )
          ] })
        ] })
      ]
    }
  ) });
}

// app/routes/_app.orgs.$organizationSlug.projects.$projectParam.events.$eventParam/route.tsx
var route_exports44 = {};
__export(route_exports44, {
  default: () => Page29,
  loader: () => loader39
});
var import_react114 = require("@remix-run/react"), import_remix_typedjson40 = require("remix-typedjson");

// app/components/event/EventDetail.tsx
var import_jsx_runtime163 = require("react/jsx-runtime");
function EventDetail({ event }) {
  let { id, name, payload, context: context7, timestamp, deliveredAt } = event;
  return /* @__PURE__ */ (0, import_jsx_runtime163.jsx)(RunPanel, { selected: !1, children: /* @__PURE__ */ (0, import_jsx_runtime163.jsxs)(RunPanelBody, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime163.jsxs)(RunPanelIconSection, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime163.jsx)(
        RunPanelIconProperty,
        {
          icon: "calendar",
          label: "Created",
          value: /* @__PURE__ */ (0, import_jsx_runtime163.jsx)(DateTime, { date: timestamp })
        }
      ),
      deliveredAt && /* @__PURE__ */ (0, import_jsx_runtime163.jsx)(
        RunPanelIconProperty,
        {
          icon: "flag",
          label: "Delivered",
          value: /* @__PURE__ */ (0, import_jsx_runtime163.jsx)(DateTime, { date: deliveredAt })
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime163.jsx)(RunPanelIconProperty, { icon: "id", label: "Event name", value: name }),
      /* @__PURE__ */ (0, import_jsx_runtime163.jsx)(RunPanelIconProperty, { icon: "account", label: "Event ID", value: id })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime163.jsx)(RunPanelDivider, {}),
    /* @__PURE__ */ (0, import_jsx_runtime163.jsxs)("div", { className: "mt-4 flex flex-col gap-2", children: [
      /* @__PURE__ */ (0, import_jsx_runtime163.jsx)(Header3, { children: "Payload" }),
      /* @__PURE__ */ (0, import_jsx_runtime163.jsx)(CodeBlock3, { code: payload }),
      /* @__PURE__ */ (0, import_jsx_runtime163.jsx)(Header3, { children: "Context" }),
      /* @__PURE__ */ (0, import_jsx_runtime163.jsx)(CodeBlock3, { code: context7 })
    ] })
  ] }) });
}

// app/presenters/EventPresenter.server.ts
var EventPresenter = class {
  #prismaClient;
  constructor(prismaClient = prisma) {
    this.#prismaClient = prismaClient;
  }
  async call({
    userId,
    projectSlug,
    organizationSlug,
    eventId
  }) {
    let organization = await this.#prismaClient.organization.findFirstOrThrow({
      where: {
        slug: organizationSlug,
        members: { some: { userId } }
      }
    }), project = await this.#prismaClient.project.findFirstOrThrow({
      where: {
        slug: projectSlug,
        organizationId: organization.id
      }
    }), event = await this.#prismaClient.eventRecord.findFirst({
      select: {
        id: !0,
        name: !0,
        payload: !0,
        context: !0,
        timestamp: !0,
        deliveredAt: !0
      },
      where: {
        id: eventId,
        projectId: project.id,
        organizationId: organization.id
      }
    });
    if (!event)
      throw new Error("Could not find Event");
    return {
      id: event.id,
      name: event.name,
      timestamp: event.timestamp,
      payload: JSON.stringify(event.payload, null, 2),
      context: JSON.stringify(event.context, null, 2),
      deliveredAt: event.deliveredAt
    };
  }
};

// app/routes/_app.orgs.$organizationSlug.projects.$projectParam.events.$eventParam/route.tsx
var import_jsx_runtime164 = require("react/jsx-runtime"), loader39 = async ({ request, params }) => {
  let userId = await requireUserId(request), { eventParam, projectParam: projectParam2, organizationSlug } = EventParamSchema.parse(params), url = new URL(request.url), s = Object.fromEntries(url.searchParams.entries()), searchParams = RunListSearchSchema.parse(s), presenter = new EventPresenter();
  try {
    let event = await presenter.call({
      userId,
      projectSlug: projectParam2,
      organizationSlug,
      eventId: eventParam
    });
    if (!event)
      throw new Response("Not Found", { status: 404 });
    let list3 = await new RunListPresenter().call({
      userId,
      filterEnvironment: searchParams.environment,
      filterStatus: searchParams.status,
      eventId: event.id,
      projectSlug: projectParam2,
      organizationSlug,
      direction: searchParams.direction,
      cursor: searchParams.cursor,
      from: searchParams.from,
      to: searchParams.to
    });
    return (0, import_remix_typedjson40.typedjson)({ event, list: list3 });
  } catch (e) {
    throw console.log(e), new Response(e instanceof Error ? e.message : JSON.stringify(e), { status: 404 });
  }
};
function Page29() {
  let { event, list: list3 } = (0, import_remix_typedjson40.useTypedLoaderData)(), isLoading2 = (0, import_react114.useNavigation)().state !== "idle", organization = useOrganization(), project = useProject(), user = useUser();
  return /* @__PURE__ */ (0, import_jsx_runtime164.jsxs)(PageContainer, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime164.jsx)(NavBar, { children: /* @__PURE__ */ (0, import_jsx_runtime164.jsx)(
      PageTitle,
      {
        title: event.name,
        backButton: {
          to: projectEventsPath(organization, project),
          text: "Events"
        }
      }
    ) }),
    /* @__PURE__ */ (0, import_jsx_runtime164.jsx)(PageBody, { scrollable: !1, children: /* @__PURE__ */ (0, import_jsx_runtime164.jsxs)("div", { className: "grid h-full grid-cols-2", children: [
      /* @__PURE__ */ (0, import_jsx_runtime164.jsx)("div", { className: "overflow-y-auto p-4 scrollbar-thin scrollbar-track-transparent scrollbar-thumb-charcoal-600", children: /* @__PURE__ */ (0, import_jsx_runtime164.jsx)(EventDetail, { event }) }),
      /* @__PURE__ */ (0, import_jsx_runtime164.jsxs)("div", { className: "overflow-y-auto p-4 scrollbar-thin scrollbar-track-transparent scrollbar-thumb-charcoal-600", children: [
        /* @__PURE__ */ (0, import_jsx_runtime164.jsxs)("div", { className: "mb-2 flex items-center justify-between gap-x-2", children: [
          /* @__PURE__ */ (0, import_jsx_runtime164.jsx)(RunsFilters, {}),
          /* @__PURE__ */ (0, import_jsx_runtime164.jsx)("div", { className: "flex items-center justify-end gap-x-2", children: /* @__PURE__ */ (0, import_jsx_runtime164.jsx)(ListPagination, { list: list3 }) })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime164.jsx)(
          RunsTable,
          {
            total: list3.runs.length,
            hasFilters: !1,
            runs: list3.runs,
            isLoading: isLoading2,
            showJob: !0,
            runsParentPath: projectPath(organization, project),
            currentUser: user
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime164.jsx)(ListPagination, { list: list3, className: "mt-2 justify-end" })
      ] })
    ] }) })
  ] });
}

// app/routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers.scheduled/route.tsx
var route_exports45 = {};
__export(route_exports45, {
  default: () => Route,
  loader: () => loader40
});
var import_solid58 = require("@heroicons/react/20/solid"), import_solid59 = require("@heroicons/react/24/solid"), import_remix_typedjson41 = require("remix-typedjson"), import_zod108 = require("zod");

// app/presenters/ScheduledTriggersPresenter.server.ts
var DEFAULT_PAGE_SIZE3 = 20, ScheduledTriggersPresenter = class extends BasePresenter {
  async call({
    userId,
    projectSlug,
    organizationSlug,
    direction = "forward",
    pageSize: pageSize3 = DEFAULT_PAGE_SIZE3,
    cursor
  }) {
    let organization = await this._replica.organization.findFirstOrThrow({
      select: {
        id: !0
      },
      where: {
        slug: organizationSlug,
        members: { some: { userId } }
      }
    }), project = await this._replica.project.findFirstOrThrow({
      select: {
        id: !0
      },
      where: {
        slug: projectSlug,
        organizationId: organization.id
      }
    }), directionMultiplier = direction === "forward" ? 1 : -1, scheduled = await this._replica.scheduleSource.findMany({
      select: {
        id: !0,
        key: !0,
        active: !0,
        schedule: !0,
        lastEventTimestamp: !0,
        environment: {
          select: {
            type: !0
          }
        },
        createdAt: !0,
        updatedAt: !0,
        metadata: !0,
        dynamicTrigger: !0
      },
      where: {
        environment: {
          OR: [
            {
              orgMember: null
            },
            {
              orgMember: {
                userId
              }
            }
          ],
          projectId: project.id
        }
      },
      orderBy: [{ id: "desc" }],
      //take an extra record to tell if there are more
      take: directionMultiplier * (pageSize3 + 1),
      //skip the cursor if there is one
      skip: cursor ? 1 : 0,
      cursor: cursor ? {
        id: cursor
      } : void 0
    }), hasMore = scheduled.length > pageSize3, next, previous;
    switch (direction) {
      case "forward":
        previous = cursor ? scheduled.at(0)?.id : void 0, hasMore && (next = scheduled[pageSize3 - 1]?.id);
        break;
      case "backward":
        hasMore ? (previous = scheduled[1]?.id, next = scheduled[pageSize3]?.id) : next = scheduled[pageSize3 - 1]?.id;
        break;
    }
    return {
      scheduled: (direction === "backward" && hasMore ? scheduled.slice(1, pageSize3 + 1) : scheduled.slice(0, pageSize3)).map((s) => {
        let schedule = ScheduleMetadataSchema.parse(s.schedule), nextEventTimestamp = s.active ? calculateNextScheduledEvent(schedule, s.lastEventTimestamp) : void 0;
        return {
          ...s,
          schedule,
          nextEventTimestamp
        };
      }),
      pagination: {
        next,
        previous
      }
    };
  }
};

// app/routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers.scheduled/route.tsx
var import_jsx_runtime165 = require("react/jsx-runtime"), SearchSchema = import_zod108.z.object({
  cursor: import_zod108.z.string().optional(),
  direction: DirectionSchema.optional()
}), loader40 = async ({ request, params }) => {
  let userId = await requireUserId(request), { organizationSlug, projectParam: projectParam2 } = ProjectParamSchema.parse(params), url = new URL(request.url), s = Object.fromEntries(url.searchParams.entries()), searchParams = SearchSchema.parse(s), data2 = await new ScheduledTriggersPresenter().call({
    userId,
    organizationSlug,
    projectSlug: projectParam2,
    direction: searchParams.direction,
    cursor: searchParams.cursor
  });
  return (0, import_remix_typedjson41.typedjson)(data2);
};
function Route() {
  let { scheduled, pagination } = (0, import_remix_typedjson41.useTypedLoaderData)();
  return /* @__PURE__ */ (0, import_jsx_runtime165.jsxs)(import_jsx_runtime165.Fragment, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime165.jsx)(Paragraph, { variant: "small", spacing: !0, className: "pt-2", children: "A Scheduled Trigger runs a Job on a repeated schedule. The schedule can use a CRON expression or an interval." }),
    scheduled.length > 0 && /* @__PURE__ */ (0, import_jsx_runtime165.jsx)(ListPagination, { list: { pagination }, className: "mt-2 justify-end" }),
    /* @__PURE__ */ (0, import_jsx_runtime165.jsxs)(Table, { containerClassName: "mt-4", children: [
      /* @__PURE__ */ (0, import_jsx_runtime165.jsx)(TableHeader, { children: /* @__PURE__ */ (0, import_jsx_runtime165.jsxs)(TableRow, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime165.jsx)(TableHeaderCell, { children: "ID" }),
        /* @__PURE__ */ (0, import_jsx_runtime165.jsx)(TableHeaderCell, { children: "Schedule" }),
        /* @__PURE__ */ (0, import_jsx_runtime165.jsx)(TableHeaderCell, { children: "Environment" }),
        /* @__PURE__ */ (0, import_jsx_runtime165.jsx)(TableHeaderCell, { children: "Active" }),
        /* @__PURE__ */ (0, import_jsx_runtime165.jsx)(TableHeaderCell, { children: "Dynamic" }),
        /* @__PURE__ */ (0, import_jsx_runtime165.jsx)(TableHeaderCell, { children: "Last run" }),
        /* @__PURE__ */ (0, import_jsx_runtime165.jsx)(TableHeaderCell, { children: "Next run" })
      ] }) }),
      /* @__PURE__ */ (0, import_jsx_runtime165.jsx)(TableBody, { children: scheduled.length > 0 ? scheduled.map((t) => /* @__PURE__ */ (0, import_jsx_runtime165.jsxs)(TableRow, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime165.jsx)(TableCell, { children: t.key }),
        /* @__PURE__ */ (0, import_jsx_runtime165.jsx)(TableCell, { children: /* @__PURE__ */ (0, import_jsx_runtime165.jsx)("div", { className: "flex items-center gap-1", children: t.schedule.type === "cron" ? /* @__PURE__ */ (0, import_jsx_runtime165.jsxs)(import_jsx_runtime165.Fragment, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime165.jsx)(NamedIcon, { name: "schedule-cron", className: "h-8 w-8" }),
          /* @__PURE__ */ (0, import_jsx_runtime165.jsx)(
            LabelValueStack,
            {
              label: "CRON",
              value: t.schedule.options.cron,
              variant: "primary"
            }
          )
        ] }) : /* @__PURE__ */ (0, import_jsx_runtime165.jsxs)(import_jsx_runtime165.Fragment, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime165.jsx)(NamedIcon, { name: "schedule-interval", className: "h-8 w-8" }),
          /* @__PURE__ */ (0, import_jsx_runtime165.jsx)(
            LabelValueStack,
            {
              label: "Interval",
              value: `${t.schedule.options.seconds}s`,
              variant: "primary"
            }
          )
        ] }) }) }),
        /* @__PURE__ */ (0, import_jsx_runtime165.jsx)(TableCell, { children: /* @__PURE__ */ (0, import_jsx_runtime165.jsx)("span", { className: "flex", children: /* @__PURE__ */ (0, import_jsx_runtime165.jsx)(EnvironmentLabel, { environment: t.environment }) }) }),
        /* @__PURE__ */ (0, import_jsx_runtime165.jsx)(TableCell, { children: t.active ? /* @__PURE__ */ (0, import_jsx_runtime165.jsx)(import_solid59.CheckCircleIcon, { className: "h-6 w-6 text-green-500" }) : t.environment.type === "DEVELOPMENT" ? /* @__PURE__ */ (0, import_jsx_runtime165.jsxs)("span", { className: "flex items-center gap-1", children: [
          /* @__PURE__ */ (0, import_jsx_runtime165.jsx)(import_solid58.NoSymbolIcon, { className: "h-6 w-6 text-text-dimmed" }),
          /* @__PURE__ */ (0, import_jsx_runtime165.jsx)(Paragraph, { variant: "extra-small", children: /* @__PURE__ */ (0, import_jsx_runtime165.jsx)(
            TextLink,
            {
              href: docsPath("documentation/concepts/triggers/scheduled"),
              variant: "secondary",
              children: "Won't run in DEV"
            }
          ) })
        ] }) : /* @__PURE__ */ (0, import_jsx_runtime165.jsx)(import_solid59.XCircleIcon, { className: "h-6 w-6 text-rose-500" }) }),
        /* @__PURE__ */ (0, import_jsx_runtime165.jsx)(TableCell, { children: t.dynamicTrigger ? /* @__PURE__ */ (0, import_jsx_runtime165.jsxs)("span", { className: "flex items-center gap-0.5", children: [
          /* @__PURE__ */ (0, import_jsx_runtime165.jsx)(NamedIcon, { name: "dynamic", className: "h-4 w-4" }),
          t.dynamicTrigger.slug
        ] }) : /* @__PURE__ */ (0, import_jsx_runtime165.jsx)("span", { className: "text-text-dimmed", children: "\u2013" }) }),
        /* @__PURE__ */ (0, import_jsx_runtime165.jsx)(TableCell, { children: t.lastEventTimestamp ? /* @__PURE__ */ (0, import_jsx_runtime165.jsx)(DateTime, { date: t.lastEventTimestamp }) : "\u2013" }),
        /* @__PURE__ */ (0, import_jsx_runtime165.jsx)(TableCell, { children: t.nextEventTimestamp ? /* @__PURE__ */ (0, import_jsx_runtime165.jsx)(DateTime, { date: t.nextEventTimestamp }) : "\u2013" })
      ] }, t.id)) : /* @__PURE__ */ (0, import_jsx_runtime165.jsx)(TableBlankRow, { colSpan: 100, children: /* @__PURE__ */ (0, import_jsx_runtime165.jsx)(Paragraph, { children: "No Scheduled triggers" }) }) })
    ] })
  ] });
}

// app/routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers.webhooks/route.tsx
var route_exports46 = {};
__export(route_exports46, {
  default: () => Integrations,
  loader: () => loader41
});
var import_solid60 = require("@heroicons/react/24/solid"), import_remix_typedjson42 = require("remix-typedjson");

// app/presenters/WebhookTriggersPresenter.server.ts
var WebhookTriggersPresenter = class {
  #prismaClient;
  constructor(prismaClient = prisma) {
    this.#prismaClient = prismaClient;
  }
  async call({
    userId,
    projectSlug,
    organizationSlug
  }) {
    return { webhooks: await this.#prismaClient.webhook.findMany({
      select: {
        id: !0,
        key: !0,
        active: !0,
        params: !0,
        integration: {
          select: {
            id: !0,
            title: !0,
            slug: !0,
            definitionId: !0,
            setupStatus: !0,
            definition: {
              select: {
                icon: !0
              }
            }
          }
        },
        webhookEnvironments: {
          select: {
            id: !0,
            environment: {
              select: {
                type: !0
              }
            }
          }
        },
        createdAt: !0,
        updatedAt: !0
      },
      where: {
        project: {
          slug: projectSlug,
          organization: {
            slug: organizationSlug,
            members: {
              some: {
                userId
              }
            }
          }
        }
      }
    }) };
  }
};

// app/routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers.webhooks/route.tsx
var import_jsx_runtime166 = require("react/jsx-runtime"), loader41 = async ({ request, params }) => {
  let user = await requireUser(request), { organizationSlug, projectParam: projectParam2 } = ProjectParamSchema.parse(params), data2 = await new WebhookTriggersPresenter().call({
    userId: user.id,
    organizationSlug,
    projectSlug: projectParam2
  });
  return (0, import_remix_typedjson42.typedjson)(data2);
};
function Integrations() {
  let { webhooks } = (0, import_remix_typedjson42.useTypedLoaderData)(), organization = useOrganization(), project = useProject();
  return /* @__PURE__ */ (0, import_jsx_runtime166.jsxs)(import_jsx_runtime166.Fragment, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime166.jsx)(Paragraph, { variant: "small", spacing: !0, className: "pt-2", children: "A Webhook Trigger runs a Job when it receives a matching payload at a registered HTTP Endpoint." }),
    /* @__PURE__ */ (0, import_jsx_runtime166.jsxs)(Table, { containerClassName: "mt-4", children: [
      /* @__PURE__ */ (0, import_jsx_runtime166.jsx)(TableHeader, { children: /* @__PURE__ */ (0, import_jsx_runtime166.jsxs)(TableRow, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime166.jsx)(TableHeaderCell, { children: "Key" }),
        /* @__PURE__ */ (0, import_jsx_runtime166.jsx)(TableHeaderCell, { children: "Integration" }),
        /* @__PURE__ */ (0, import_jsx_runtime166.jsx)(TableHeaderCell, { children: "Properties" }),
        /* @__PURE__ */ (0, import_jsx_runtime166.jsx)(TableHeaderCell, { children: "Environment" }),
        /* @__PURE__ */ (0, import_jsx_runtime166.jsx)(TableHeaderCell, { children: "Active" }),
        /* @__PURE__ */ (0, import_jsx_runtime166.jsx)(TableHeaderCell, { hiddenLabel: !0, children: "Go to page" })
      ] }) }),
      /* @__PURE__ */ (0, import_jsx_runtime166.jsx)(TableBody, { children: webhooks.length > 0 ? webhooks.map((w) => {
        let path2 = webhookTriggerPath(organization, project, w);
        return /* @__PURE__ */ (0, import_jsx_runtime166.jsxs)(TableRow, { className: cn(!w.active && "bg-rose-500/30"), children: [
          /* @__PURE__ */ (0, import_jsx_runtime166.jsx)(TableCell, { to: path2, children: w.key }),
          /* @__PURE__ */ (0, import_jsx_runtime166.jsx)(TableCell, { to: path2, children: /* @__PURE__ */ (0, import_jsx_runtime166.jsxs)("div", { className: "flex items-center gap-1", children: [
            /* @__PURE__ */ (0, import_jsx_runtime166.jsx)(
              NamedIcon,
              {
                name: w.integration.definition.icon ?? w.integration.definitionId,
                className: "h-8 w-8"
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime166.jsx)(
              LabelValueStack,
              {
                label: w.integration.title,
                value: w.integration.slug,
                variant: "primary"
              }
            )
          ] }) }),
          /* @__PURE__ */ (0, import_jsx_runtime166.jsx)(TableCell, { to: path2, children: w.params && /* @__PURE__ */ (0, import_jsx_runtime166.jsx)(
            SimpleTooltip,
            {
              button: /* @__PURE__ */ (0, import_jsx_runtime166.jsx)("div", { className: "flex max-w-[200px] items-start justify-start gap-5 truncate", children: Object.entries(w.params).map(([label, value], index) => /* @__PURE__ */ (0, import_jsx_runtime166.jsx)(
                LabelValueStack,
                {
                  label,
                  value,
                  className: "last:truncate"
                },
                index
              )) }),
              content: /* @__PURE__ */ (0, import_jsx_runtime166.jsx)("div", { className: "flex flex-col gap-2", children: Object.entries(w.params).map(([label, value], index) => /* @__PURE__ */ (0, import_jsx_runtime166.jsx)(LabelValueStack, { label, value }, index)) })
            }
          ) }),
          /* @__PURE__ */ (0, import_jsx_runtime166.jsx)(TableCell, { to: path2, children: /* @__PURE__ */ (0, import_jsx_runtime166.jsx)("div", { className: "flex items-center justify-end gap-1", children: w.webhookEnvironments.map((env6) => /* @__PURE__ */ (0, import_jsx_runtime166.jsx)(EnvironmentLabel, { environment: env6.environment }, env6.id)) }) }),
          /* @__PURE__ */ (0, import_jsx_runtime166.jsx)(TableCell, { to: path2, children: w.active ? /* @__PURE__ */ (0, import_jsx_runtime166.jsx)(import_solid60.CheckCircleIcon, { className: "h-6 w-6 text-green-500" }) : /* @__PURE__ */ (0, import_jsx_runtime166.jsx)(import_solid60.XCircleIcon, { className: "h-6 w-6 text-rose-500" }) }),
          /* @__PURE__ */ (0, import_jsx_runtime166.jsx)(TableCellChevron, { to: path2 })
        ] }, w.id);
      }) : /* @__PURE__ */ (0, import_jsx_runtime166.jsx)(TableBlankRow, { colSpan: 100, children: /* @__PURE__ */ (0, import_jsx_runtime166.jsx)(Paragraph, { children: "No External triggers" }) }) })
    ] })
  ] });
}

// app/routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.runs.$runParam/route.tsx
var route_exports47 = {};
__export(route_exports47, {
  default: () => Page30,
  loader: () => loader42
});
var import_solid61 = require("@heroicons/react/20/solid"), import_react120 = require("@remix-run/react");
var import_framer_motion9 = require("framer-motion"), import_react121 = require("react"), import_react_hotkeys_hook2 = require("react-hotkeys-hook");

// app/assets/icons/ShowParentIcon.tsx
var import_jsx_runtime167 = require("react/jsx-runtime");
function ShowParentIcon({ className }) {
  return /* @__PURE__ */ (0, import_jsx_runtime167.jsx)("svg", { className, viewBox: "0 0 16 16", fill: "none", xmlns: "http://www.w3.org/2000/svg", children: /* @__PURE__ */ (0, import_jsx_runtime167.jsx)(
    "path",
    {
      fill: "currentColor",
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M3.125 16H3.625H4.125V15H3.125H2C1.89733 15 1.8 14.9848 1.70919 14.9573L1.19765 14.8024L1.04267 14.2908C1.01515 14.2 1 14.1027 1 14V12.875V11.875H0V12.375V12.875V14C0 14.202 0.0299409 14.397 0.0856265 14.5808C0.135047 14.7439 0.204744 14.8982 0.291786 15.0407C0.363386 15.158 0.446722 15.2673 0.540161 15.3671C0.570065 15.399 0.601004 15.4299 0.632924 15.4598C0.732663 15.5533 0.841982 15.6366 0.95925 15.7082C1.10181 15.7953 1.25612 15.865 1.41923 15.9144C1.60303 15.9701 1.79802 16 2 16H3.125ZM10.125 15V16H9.625H9.125H6.875H6.375H5.875V15H6.875H9.125H10.125ZM15 5.875H16V6.375V6.875V9.125V9.625V10.125H15V9.125V6.875V5.875ZM5.875 1V0H6.375H6.875H9.125H9.625H10.125V1H9.125H6.875H5.875ZM1 10.125H0V9.625V9.125V6.875V6.375V5.875H1V6.875V9.125V10.125ZM0 3.625V4.125H1V3.125V2C1 1.89733 1.01515 1.8 1.04267 1.70919L1.19765 1.19765L1.70919 1.04267C1.8 1.01515 1.89733 1 2 1H3.125H4.125V0H3.625H3.125H2C1.79802 0 1.60303 0.0299409 1.41923 0.0856264C1.25612 0.135047 1.10181 0.204744 0.95925 0.291786C0.841983 0.363386 0.732663 0.446722 0.632924 0.540161C0.601004 0.570065 0.570065 0.601004 0.540161 0.632924C0.446722 0.732663 0.363386 0.841982 0.291786 0.95925C0.204744 1.10181 0.135047 1.25612 0.0856265 1.41923C0.0299409 1.60303 0 1.79802 0 2V3.125V3.625ZM12.375 0H11.875V1H12.875H14C14.1027 1 14.2 1.01515 14.2908 1.04267L14.8024 1.19765L14.9573 1.70919C14.9848 1.8 15 1.89733 15 2V3.125V4.125H16V3.625V3.125V2C16 1.79802 15.9701 1.60303 15.9144 1.41923C15.865 1.25612 15.7953 1.10181 15.7082 0.95925C15.6366 0.841982 15.5533 0.732663 15.4598 0.632924C15.4299 0.601004 15.399 0.570065 15.3671 0.540161C15.2673 0.446722 15.158 0.363386 15.0407 0.291786C14.8982 0.204744 14.7439 0.135047 14.5808 0.0856265C14.397 0.0299409 14.202 0 14 0H12.875H12.375ZM16 12.375V11.875H15V12.875V14C15 14.1027 14.9848 14.2 14.9573 14.2908L14.8024 14.8024L14.2908 14.9573C14.2 14.9848 14.1027 15 14 15H12.875H11.875V16H12.375H12.875H14C14.202 16 14.397 15.9701 14.5808 15.9144C14.7439 15.865 14.8982 15.7953 15.0407 15.7082C15.158 15.6366 15.2673 15.5533 15.3671 15.4598C15.399 15.4299 15.4299 15.399 15.4598 15.3671C15.5533 15.2673 15.6366 15.158 15.7082 15.0407C15.7953 14.8982 15.865 14.7439 15.9144 14.5808C15.9701 14.397 16 14.202 16 14V12.875V12.375ZM8.75 6.26758L10.4523 7.96991C10.7452 8.26281 11.2201 8.26281 11.513 7.96991C11.8059 7.67702 11.8059 7.20215 11.513 6.90925L8.59099 3.98725C8.43431 3.83057 8.22556 3.7577 8.02045 3.76865C7.81604 3.75834 7.60821 3.83124 7.45209 3.98736L4.53009 6.90937C4.23719 7.20226 4.23719 7.67713 4.53009 7.97003C4.82298 8.26292 5.29785 8.26292 5.59075 7.97003L7.25 6.31077L7.25 11.25C7.25 11.6642 7.58579 12 8 12C8.41421 12 8.75 11.6642 8.75 11.25L8.75 6.26758Z"
    }
  ) });
}
function ShowParentIconSelected({ className }) {
  return /* @__PURE__ */ (0, import_jsx_runtime167.jsx)("svg", { className, viewBox: "0 0 16 16", fill: "none", xmlns: "http://www.w3.org/2000/svg", children: /* @__PURE__ */ (0, import_jsx_runtime167.jsx)(
    "path",
    {
      fill: "currentColor",
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M2 0C0.895431 0 0 0.895431 0 2V14C0 15.1046 0.895431 16 2 16H14C15.1046 16 16 15.1046 16 14V2C16 0.895431 15.1046 0 14 0H2ZM8.75 6.26758L10.4523 7.96991C10.7452 8.26281 11.2201 8.26281 11.513 7.96991C11.8059 7.67702 11.8059 7.20215 11.513 6.90925L8.59099 3.98725C8.43344 3.8297 8.22324 3.7569 8.01703 3.76884C7.8138 3.75958 7.60752 3.83254 7.45234 3.98773L4.53033 6.90973C4.23744 7.20263 4.23744 7.6775 4.53033 7.97039C4.82322 8.26329 5.2981 8.26329 5.59099 7.97039L7.25 6.31138L7.25 11.25C7.25 11.6642 7.58579 12 8 12C8.41421 12 8.75 11.6642 8.75 11.25L8.75 6.26758Z"
    }
  ) });
}

// app/components/BlankstateInstructions.tsx
var import_jsx_runtime168 = require("react/jsx-runtime");
function BlankstateInstructions({
  children,
  className,
  title: title2
}) {
  return /* @__PURE__ */ (0, import_jsx_runtime168.jsxs)("div", { className: cn("flex flex-col gap-2", className), children: [
    title2 && /* @__PURE__ */ (0, import_jsx_runtime168.jsx)("div", { className: "flex h-10 items-center border-b border-grid-bright", children: /* @__PURE__ */ (0, import_jsx_runtime168.jsx)(Header2, { children: title2 }) }),
    children
  ] });
}

// app/components/primitives/Slider.tsx
var RadixSlider = __toESM(require("@radix-ui/react-slider"));
var import_jsx_runtime169 = require("react/jsx-runtime"), variants13 = {
  tertiary: {
    container: "h-6 gap-1 rounded-sm hover:bg-charcoal-700 px-1",
    icons: "h-4 w-4 text-text-bright",
    root: "h-4",
    track: "h-1 bg-grid-bright group-hover:bg-background-dimmed",
    range: "bg-transparent group-hover:bg-secondary",
    thumb: "h-3 w-3 border-2 border-text-dimmed bg-grid-bright shadow-[0_1px_3px_4px_rgb(0_0_0_/_0.2),_0_1px_2px_-1px_rgb(0_0_0_/_0.1)] hover:border-text-dimmed focus:shadow-[0_1px_3px_4px_rgb(0_0_0_/_0.2),_0_1px_2px_-1px_rgb(0_0_0_/_0.1)]"
  }
};
function Slider({ variant: variant3, className, LeadingIcon, TrailingIcon, ...props }) {
  let variation = variants13[variant3];
  return /* @__PURE__ */ (0, import_jsx_runtime169.jsxs)("div", { className: cn("group flex items-center", variation.container), children: [
    LeadingIcon && /* @__PURE__ */ (0, import_jsx_runtime169.jsx)(Icon, { icon: LeadingIcon, className: variation.icons }),
    /* @__PURE__ */ (0, import_jsx_runtime169.jsxs)(
      RadixSlider.Root,
      {
        className: cn(
          "relative flex touch-none select-none items-center",
          variation.root,
          className
        ),
        ...props,
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime169.jsx)(RadixSlider.Track, { className: cn("relative grow rounded-full", variation.track), children: /* @__PURE__ */ (0, import_jsx_runtime169.jsx)(RadixSlider.Range, { className: cn("absolute h-full rounded-full", variation.range) }) }),
          /* @__PURE__ */ (0, import_jsx_runtime169.jsx)(
            RadixSlider.Thumb,
            {
              className: cn(
                "block cursor-pointer rounded-full transition focus:outline-none",
                variation.thumb
              )
            }
          )
        ]
      }
    ),
    TrailingIcon && /* @__PURE__ */ (0, import_jsx_runtime169.jsx)(Icon, { icon: TrailingIcon, className: variation.icons })
  ] });
}

// app/components/primitives/Timeline.tsx
var import_react115 = require("react");

// app/utils/lerp.ts
function lerp(min, max, t) {
  return min + (max - min) * clamp(t, 0, 1);
}
function inverseLerp(min, max, value) {
  return (value - min) / (max - min);
}
function clamp(value, min, max) {
  return Math.min(max, Math.max(min, value));
}

// app/components/primitives/Timeline.tsx
var import_jsx_runtime170 = require("react/jsx-runtime"), MousePositionContext = (0, import_react115.createContext)(void 0);
function MousePositionProvider({ children }) {
  let ref = (0, import_react115.useRef)(null), [position, setPosition] = (0, import_react115.useState)(void 0), handleMouseMove = (0, import_react115.useCallback)(
    (e) => {
      if (!ref.current) {
        setPosition(void 0);
        return;
      }
      let { top, left, width, height } = ref.current.getBoundingClientRect(), x = (e.clientX - left) / width, y = (e.clientY - top) / height;
      if (x < 0 || x > 1 || y < 0 || y > 1) {
        setPosition(void 0);
        return;
      }
      setPosition({ x, y });
    },
    [ref.current]
  );
  return /* @__PURE__ */ (0, import_jsx_runtime170.jsx)(
    "div",
    {
      ref,
      onMouseEnter: handleMouseMove,
      onMouseLeave: () => setPosition(void 0),
      onMouseMove: handleMouseMove,
      style: { width: "100%", height: "100%" },
      children: /* @__PURE__ */ (0, import_jsx_runtime170.jsx)(MousePositionContext.Provider, { value: position, children })
    }
  );
}
var useMousePosition = () => (0, import_react115.useContext)(MousePositionContext), TimelineContext = (0, import_react115.createContext)({});
function useTimeline() {
  return (0, import_react115.useContext)(TimelineContext);
}
var TimelineMousePositionContext = (0, import_react115.createContext)(void 0);
function Root10({
  startMs = 0,
  durationMs,
  scale,
  minWidth,
  maxWidth,
  children,
  className
}) {
  let pixelWidth = calculatePixelWidth(minWidth, maxWidth, scale);
  return /* @__PURE__ */ (0, import_jsx_runtime170.jsx)(TimelineContext.Provider, { value: { startMs, durationMs }, children: /* @__PURE__ */ (0, import_jsx_runtime170.jsx)(
    "div",
    {
      className,
      style: {
        position: "relative",
        width: `${pixelWidth}px`
      },
      children: /* @__PURE__ */ (0, import_jsx_runtime170.jsx)(MousePositionProvider, { children })
    }
  ) });
}
function Row({ className, children, ...props }) {
  return /* @__PURE__ */ (0, import_jsx_runtime170.jsx)("div", { ...props, className, style: { ...props.style, position: "relative" }, children });
}
function Point({ ms, className, children }) {
  let { startMs, durationMs } = useTimeline(), position = inverseLerp(startMs, startMs + durationMs, ms);
  return /* @__PURE__ */ (0, import_jsx_runtime170.jsx)(
    "div",
    {
      className,
      style: {
        position: "absolute",
        left: `${position * 100}%`
      },
      children: children && children(ms)
    }
  );
}
function Span8({ startMs, durationMs, className, children }) {
  let { startMs: rootStartMs, durationMs: rootDurationMs } = useTimeline(), position = inverseLerp(rootStartMs, rootStartMs + rootDurationMs, startMs), width = inverseLerp(rootStartMs, rootStartMs + rootDurationMs, startMs + durationMs) - position;
  return /* @__PURE__ */ (0, import_jsx_runtime170.jsx)(
    "div",
    {
      className,
      style: {
        position: "absolute",
        left: `${position * 100}%`,
        width: `${width * 100}%`
      },
      children
    }
  );
}
function EquallyDistribute({ count, children }) {
  let { startMs, durationMs } = useTimeline();
  return /* @__PURE__ */ (0, import_jsx_runtime170.jsx)(import_jsx_runtime170.Fragment, { children: Array.from({ length: count }).map((_, index) => {
    let ms = startMs + durationMs / (count - 1) * index;
    return /* @__PURE__ */ (0, import_jsx_runtime170.jsx)(import_react115.Fragment, { children: children(ms, index) }, index);
  }) });
}
function FollowCursor({ children }) {
  let { startMs, durationMs } = useTimeline(), relativeMousePosition = useMousePosition(), ms = relativeMousePosition?.x ? lerp(startMs, startMs + durationMs, relativeMousePosition.x) : void 0;
  return ms === void 0 ? null : /* @__PURE__ */ (0, import_jsx_runtime170.jsx)(
    "div",
    {
      style: {
        position: "absolute",
        top: 0,
        left: relativeMousePosition ? `${relativeMousePosition?.x * 100}%` : 0,
        height: "100%",
        pointerEvents: "none"
      },
      children: children(ms)
    }
  );
}
function calculatePixelWidth(minWidth, maxWidth, scale) {
  return lerp(minWidth, maxWidth, scale);
}

// app/components/primitives/TreeView/TreeView.tsx
var import_react_virtual2 = require("@tanstack/react-virtual"), import_framer_motion8 = require("framer-motion"), import_react116 = require("react");

// app/components/primitives/TreeView/reducer.ts
var import_assert_never10 = __toESM(require("assert-never"));

// app/components/primitives/TreeView/utils.ts
var defaultSelected = !1, defaultExpanded = !0;
function concreteStateFromInput({
  tree: tree2,
  filter,
  selectedId,
  collapsedIds
}) {
  let state = {};
  if (collapsedIds?.forEach((id) => {
    tree2.some((item) => item.id === id) && (state[id] = { expanded: !1 });
  }), selectedId) {
    let selectedNode = tree2.find((node) => node.id === selectedId);
    if (selectedNode) {
      state[selectedId] = { selected: !0 };
      let parentId = selectedNode.parentId;
      for (; parentId; )
        state[parentId] = { expanded: !0 }, parentId = tree2.find((node) => node.id === parentId)?.parentId;
    }
  }
  let nodes = concreteStateFromPartialState(tree2, state);
  return {
    tree: tree2,
    nodes,
    changes: { selectedId },
    filter,
    filteredNodes: nodes,
    visibleNodeIds: visibleNodes(tree2, nodes).map((node) => node.id)
  };
}
function concreteStateFromPartialState(tree2, state) {
  let concreteState = tree2.reduce((acc, node) => (acc[node.id] = {
    selected: acc[node.id]?.selected ?? defaultSelected,
    expanded: acc[node.id]?.expanded ?? defaultExpanded,
    visible: acc[node.id]?.visible ?? !0
  }, acc), state);
  return applyVisibility(tree2, concreteState);
}
function applyVisibility(tree2, state) {
  return tree2.reduce((acc, node) => {
    let nodeState = state[node.id] ?? {
      selected: defaultSelected,
      expanded: node.hasChildren ? defaultExpanded : !defaultExpanded
    }, parent = node.parentId ? acc[node.parentId] : { selected: defaultSelected, expanded: defaultExpanded, visible: !0 }, visible = !!(parent.expanded && parent.visible === !0);
    return acc[node.id] = { ...nodeState, visible }, acc;
  }, {});
}
function selectedIdFromState(state) {
  return Object.entries(state).find(([id, node]) => node.selected)?.[0];
}
function applyFilterToState({
  tree: tree2,
  nodes,
  filter,
  visibleNodeIds,
  changes
}) {
  if (!filter || !filter.value)
    return {
      tree: tree2,
      nodes,
      filteredNodes: nodes,
      changes,
      filter,
      visibleNodeIds: visibleNodes(tree2, nodes).map((node) => node.id)
    };
  let newFilteredOut = /* @__PURE__ */ new Set();
  for (let node of tree2)
    filter.fn(filter.value, node) || newFilteredOut.add(node.id);
  if (newFilteredOut.size === 0)
    return {
      tree: tree2,
      nodes,
      filteredNodes: nodes,
      changes,
      filter,
      visibleNodeIds: visibleNodes(tree2, nodes).map((node) => node.id)
    };
  let filteredNodes = { ...nodes }, selected = selectedIdFromState(filteredNodes), visible = /* @__PURE__ */ new Set(), expanded = /* @__PURE__ */ new Set();
  for (let node of tree2)
    if (!newFilteredOut.has(node.id)) {
      visible.add(node.id), node.hasChildren && expanded.add(node.id);
      let parentId = node.parentId;
      for (; parentId; )
        visible.add(parentId), expanded.add(parentId), parentId = tree2.find((node2) => node2.id === parentId)?.parentId;
      if (node.hasChildren) {
        let children = tree2.filter((child) => child.parentId === node.id);
        for (let child of children)
          visible.add(child.id), child.hasChildren && expanded.add(child.id);
      }
    }
  let allItems = new Set(tree2.map((node) => node.id)), hidden = difference(allItems, visible), collapsed = difference(visible, expanded);
  for (let id of hidden)
    filteredNodes[id] = { ...filteredNodes[id], visible: !1 };
  for (let id of visible)
    filteredNodes[id] = { ...filteredNodes[id], visible: !0 };
  for (let id of collapsed)
    filteredNodes[id] = { ...filteredNodes[id], expanded: !1 };
  for (let id of expanded)
    filteredNodes[id] = { ...filteredNodes[id], expanded: !0 };
  return selected && (visible.has(selected) ? filteredNodes[selected] = { ...filteredNodes[selected], selected: !0 } : filteredNodes[selected] = { ...filteredNodes[selected], selected: !1 }), {
    tree: tree2,
    nodes,
    filteredNodes,
    changes,
    filter,
    visibleNodeIds: visibleNodes(tree2, filteredNodes).map((node) => node.id)
  };
}
function visibleNodes(tree2, nodes) {
  return tree2.filter((node) => nodes[node.id].visible === !0);
}
function firstVisibleNode(tree2, nodes) {
  return tree2.find((node) => nodes[node.id].visible === !0);
}
function lastVisibleNode(tree2, nodes) {
  return tree2.slice().reverse().find((node) => nodes[node.id].visible === !0);
}
function difference(a, b) {
  return new Set([...a].filter((x) => !b.has(x)));
}
function collapsedIdsFromState(state) {
  return Object.entries(state).filter(([_, s]) => s.expanded === !1).map(([id]) => id);
}
function generateChanges(a, b) {
  let selectedIdA = selectedIdFromState(a), selectedIdB = selectedIdFromState(b), collapsedIdsA = new Set(collapsedIdsFromState(a)), collapsedIdsB = new Set(collapsedIdsFromState(b)), collapsedChanges = [...difference(collapsedIdsA, collapsedIdsB)];
  return {
    selectedId: selectedIdA !== selectedIdB ? selectedIdB : void 0
  };
}

// app/components/primitives/TreeView/reducer.ts
function reducer2(state, action106) {
  switch (action106.type) {
    case "SELECT_NODE": {
      if (state.nodes[action106.payload.id]?.selected ?? !1)
        return state;
      let newNodes = Object.fromEntries(
        Object.entries(state.nodes).map(([key, value]) => [key, { ...value, selected: !1 }])
      );
      return newNodes[action106.payload.id] = { ...newNodes[action106.payload.id], selected: !0 }, action106.payload.scrollToNode && action106.payload.scrollToNodeFn(action106.payload.id), applyFilterToState({
        ...state,
        tree: state.tree,
        nodes: newNodes,
        changes: generateChanges(state.nodes, newNodes)
      });
    }
    case "DESELECT_NODE": {
      let nodes = {
        ...state.nodes,
        [action106.payload.id]: { ...state.nodes[action106.payload.id], selected: !1 }
      };
      return applyFilterToState({
        ...state,
        nodes,
        changes: generateChanges(state.nodes, nodes)
      });
    }
    case "DESELECT_ALL_NODES": {
      let nodes = Object.fromEntries(
        Object.entries(state.nodes).map(([key, value]) => [key, { ...value, selected: !1 }])
      );
      return applyFilterToState({
        ...state,
        nodes,
        changes: generateChanges(state.nodes, nodes)
      });
    }
    case "TOGGLE_NODE_SELECTION":
      return state.nodes[action106.payload.id]?.selected ?? !1 ? reducer2(state, { type: "DESELECT_NODE", payload: { id: action106.payload.id } }) : reducer2(state, {
        type: "SELECT_NODE",
        payload: {
          id: action106.payload.id,
          scrollToNode: action106.payload.scrollToNode,
          scrollToNodeFn: action106.payload.scrollToNodeFn
        }
      });
    case "EXPAND_NODE": {
      let newNodes = {
        ...state.nodes,
        [action106.payload.id]: { ...state.nodes[action106.payload.id], expanded: !0 }
      };
      action106.payload.scrollToNode && action106.payload.scrollToNodeFn(action106.payload.id);
      let visibleNodes2 = applyVisibility(state.tree, newNodes);
      return applyFilterToState({
        ...state,
        nodes: visibleNodes2,
        changes: generateChanges(state.nodes, visibleNodes2)
      });
    }
    case "COLLAPSE_NODE": {
      let visibleNodes2 = applyVisibility(state.tree, {
        ...state.nodes,
        [action106.payload.id]: { ...state.nodes[action106.payload.id], expanded: !1 }
      });
      return applyFilterToState({
        ...state,
        nodes: visibleNodes2,
        changes: generateChanges(state.nodes, visibleNodes2)
      });
    }
    case "TOGGLE_EXPAND_NODE":
      return state.nodes[action106.payload.id]?.expanded ?? !0 ? reducer2(state, {
        type: "COLLAPSE_NODE",
        payload: { id: action106.payload.id }
      }) : reducer2(state, {
        type: "EXPAND_NODE",
        payload: {
          id: action106.payload.id,
          scrollToNode: action106.payload.scrollToNode,
          scrollToNodeFn: action106.payload.scrollToNodeFn
        }
      });
    case "EXPAND_ALL_BELOW_DEPTH": {
      let nodesToExpand = state.tree.filter(
        (n) => n.level >= action106.payload.depth && n.hasChildren
      ), newNodes = Object.fromEntries(
        Object.entries(state.nodes).map(([key, value]) => [
          key,
          {
            ...value,
            expanded: nodesToExpand.find((n) => n.id === key) ? !0 : value.expanded
          }
        ])
      ), visibleNodes2 = applyVisibility(state.tree, newNodes);
      return applyFilterToState({
        ...state,
        nodes: visibleNodes2,
        changes: generateChanges(state.nodes, visibleNodes2)
      });
    }
    case "COLLAPSE_ALL_BELOW_DEPTH": {
      let nodesToCollapse = state.tree.filter(
        (n) => n.level >= action106.payload.depth && n.hasChildren
      ), newNodes = Object.fromEntries(
        Object.entries(state.nodes).map(([key, value]) => [
          key,
          {
            ...value,
            expanded: nodesToCollapse.find((n) => n.id === key) ? !1 : value.expanded
          }
        ])
      ), visibleNodes2 = applyVisibility(state.tree, newNodes);
      return applyFilterToState({
        ...state,
        nodes: visibleNodes2,
        changes: generateChanges(state.nodes, visibleNodes2)
      });
    }
    case "EXPAND_LEVEL": {
      let nodesToExpand = state.tree.filter(
        (n) => n.level <= action106.payload.level && n.hasChildren
      ), newNodes = Object.fromEntries(
        Object.entries(state.nodes).map(([key, value]) => [
          key,
          {
            ...value,
            expanded: nodesToExpand.find((n) => n.id === key) ? !0 : value.expanded
          }
        ])
      ), visibleNodes2 = applyVisibility(state.tree, newNodes);
      return applyFilterToState({
        ...state,
        nodes: visibleNodes2,
        changes: generateChanges(state.nodes, visibleNodes2)
      });
    }
    case "COLLAPSE_LEVEL": {
      let nodesToCollapse = state.tree.filter(
        (n) => n.level === action106.payload.level && n.hasChildren
      ), newNodes = Object.fromEntries(
        Object.entries(state.nodes).map(([key, value]) => [
          key,
          {
            ...value,
            expanded: nodesToCollapse.find((n) => n.id === key) ? !1 : value.expanded
          }
        ])
      ), visibleNodes2 = applyVisibility(state.tree, newNodes);
      return applyFilterToState({
        ...state,
        nodes: visibleNodes2,
        changes: generateChanges(state.nodes, visibleNodes2)
      });
    }
    case "TOGGLE_EXPAND_LEVEL": {
      let firstNode = state.tree.filter(
        (n) => n.level === action106.payload.level && n.hasChildren
      )[0];
      if (!firstNode)
        return state;
      let currentlyExpanded = state.nodes[firstNode.id]?.expanded ?? !0, currentVisible = state.nodes[firstNode.id]?.visible ?? !0;
      return currentlyExpanded && currentVisible ? reducer2(state, {
        type: "COLLAPSE_LEVEL",
        payload: {
          level: action106.payload.level
        }
      }) : reducer2(state, {
        type: "EXPAND_LEVEL",
        payload: {
          level: action106.payload.level
        }
      });
    }
    case "SELECT_FIRST_VISIBLE_NODE": {
      let node = firstVisibleNode(state.tree, state.filteredNodes);
      return node ? reducer2(state, {
        type: "SELECT_NODE",
        payload: {
          id: node.id,
          scrollToNode: action106.payload.scrollToNode,
          scrollToNodeFn: action106.payload.scrollToNodeFn
        }
      }) : state;
    }
    case "SELECT_LAST_VISIBLE_NODE": {
      let node = lastVisibleNode(state.tree, state.filteredNodes);
      return node ? reducer2(state, {
        type: "SELECT_NODE",
        payload: {
          id: node.id,
          scrollToNode: action106.payload.scrollToNode,
          scrollToNodeFn: action106.payload.scrollToNodeFn
        }
      }) : state;
    }
    case "SELECT_NEXT_VISIBLE_NODE": {
      let selected = selectedIdFromState(state.nodes);
      if (!selected)
        return reducer2(state, {
          type: "SELECT_FIRST_VISIBLE_NODE",
          payload: {
            scrollToNode: action106.payload.scrollToNode,
            scrollToNodeFn: action106.payload.scrollToNodeFn
          }
        });
      let visible = visibleNodes(state.tree, state.filteredNodes), selectedIndex = visible.findIndex((node) => node.id === selected), nextNode = visible[selectedIndex + 1];
      return nextNode ? reducer2(state, {
        type: "SELECT_NODE",
        payload: {
          id: nextNode.id,
          scrollToNode: action106.payload.scrollToNode,
          scrollToNodeFn: action106.payload.scrollToNodeFn
        }
      }) : state;
    }
    case "SELECT_PREVIOUS_VISIBLE_NODE": {
      let selected = selectedIdFromState(state.nodes);
      if (!selected)
        return reducer2(state, {
          type: "SELECT_FIRST_VISIBLE_NODE",
          payload: {
            scrollToNode: action106.payload.scrollToNode,
            scrollToNodeFn: action106.payload.scrollToNodeFn
          }
        });
      let visible = visibleNodes(state.tree, state.filteredNodes), selectedIndex = visible.findIndex((node) => node.id === selected), previousNode = visible[Math.max(0, selectedIndex - 1)];
      return previousNode ? reducer2(state, {
        type: "SELECT_NODE",
        payload: {
          id: previousNode.id,
          scrollToNode: action106.payload.scrollToNode,
          scrollToNodeFn: action106.payload.scrollToNodeFn
        }
      }) : state;
    }
    case "SELECT_PARENT_NODE": {
      let selected = selectedIdFromState(state.nodes);
      if (!selected)
        return reducer2(state, {
          type: "SELECT_FIRST_VISIBLE_NODE",
          payload: {
            scrollToNode: action106.payload.scrollToNode,
            scrollToNodeFn: action106.payload.scrollToNodeFn
          }
        });
      let selectedNode = state.tree.find((node) => node.id === selected);
      if (!selectedNode)
        return state;
      let parentNode = state.tree.find((node) => node.id === selectedNode.parentId);
      return parentNode ? reducer2(state, {
        type: "SELECT_NODE",
        payload: {
          id: parentNode.id,
          scrollToNode: action106.payload.scrollToNode,
          scrollToNodeFn: action106.payload.scrollToNodeFn
        }
      }) : state;
    }
    case "UPDATE_TREE": {
      let selectedId = selectedIdFromState(state.nodes), collapsedIds = collapsedIdsFromState(state.nodes);
      return concreteStateFromInput({
        ...state,
        tree: action106.payload.tree,
        selectedId,
        collapsedIds
      });
    }
    case "UPDATE_FILTER":
      return applyFilterToState({
        ...state,
        filter: action106.payload.filter
      });
    default:
      (0, import_assert_never10.default)(action106);
  }
  throw new Error(`Unhandled action type: ${action106.type}`);
}

// app/components/primitives/TreeView/TreeView.tsx
var import_jsx_runtime171 = require("react/jsx-runtime");
function TreeView({
  tree: tree2,
  renderNode,
  nodes,
  autoFocus = !1,
  getTreeProps,
  getNodeProps,
  parentClassName,
  virtualizer,
  parentRef,
  scrollRef,
  onScroll
}) {
  (0, import_react116.useEffect)(() => {
    autoFocus && parentRef?.current?.focus();
  }, [autoFocus, parentRef?.current]);
  let virtualItems = virtualizer.getVirtualItems(), scrollCallback = (0, import_react116.useCallback)(
    (event) => {
      if (!onScroll)
        return;
      let target = event.target;
      onScroll?.(target.scrollTop);
    },
    [onScroll]
  );
  return (0, import_react116.useEffect)(() => {
    if (!(!scrollRef?.current || onScroll === void 0))
      return scrollRef.current.addEventListener("scroll", scrollCallback), () => scrollRef.current?.removeEventListener("scroll", scrollCallback);
  }, [scrollRef?.current]), /* @__PURE__ */ (0, import_jsx_runtime171.jsx)(
    import_framer_motion8.motion.div,
    {
      ref: (element) => {
        parentRef && (parentRef.current = element), scrollRef && (scrollRef.current = element);
      },
      className: cn(
        "w-full overflow-y-auto scrollbar-thin scrollbar-track-transparent scrollbar-thumb-charcoal-600 focus-within:outline-none",
        parentClassName
      ),
      layoutScroll: !0,
      ...getTreeProps(),
      children: /* @__PURE__ */ (0, import_jsx_runtime171.jsx)(
        "div",
        {
          style: {
            height: `${virtualizer.getTotalSize()}px`,
            width: "100%",
            position: "relative",
            overflowY: "visible"
          },
          children: /* @__PURE__ */ (0, import_jsx_runtime171.jsx)(
            "div",
            {
              style: {
                position: "absolute",
                overflowY: "visible",
                top: 0,
                left: 0,
                width: "100%",
                transform: `translateY(${virtualItems.at(0)?.start ?? 0}px)`
              },
              children: virtualItems.map((virtualItem) => {
                let node = tree2.find((node2) => node2.id === virtualItem.key);
                if (!node)
                  return null;
                let state = nodes[node.id];
                return !state || !state.visible ? null : /* @__PURE__ */ (0, import_jsx_runtime171.jsx)(
                  "div",
                  {
                    "data-index": virtualItem.index,
                    ref: virtualizer.measureElement,
                    className: "overflow-clip",
                    ...getNodeProps(node.id),
                    children: renderNode({
                      node,
                      state,
                      index: virtualItem.index,
                      virtualizer,
                      virtualItem
                    })
                  },
                  node.id
                );
              })
            }
          )
        }
      )
    }
  );
}
function useTree({
  tree: tree2,
  selectedId,
  collapsedIds,
  onSelectedIdChanged,
  parentRef,
  estimatedRowHeight,
  filter
}) {
  let previousNodeCount = (0, import_react116.useRef)(tree2.length), previousSelectedId = (0, import_react116.useRef)(selectedId), [state, dispatch] = (0, import_react116.useReducer)(
    reducer2,
    concreteStateFromInput({ tree: tree2, selectedId, collapsedIds, filter })
  );
  (0, import_react116.useEffect)(() => {
    let selectedId2 = selectedIdFromState(state.nodes);
    selectedId2 !== previousSelectedId.current && (previousSelectedId.current = selectedId2, onSelectedIdChanged?.(selectedId2));
  }, [state.changes.selectedId]), (0, import_react116.useEffect)(() => {
    tree2.length !== previousNodeCount.current && (previousNodeCount.current = tree2.length, dispatch({ type: "UPDATE_TREE", payload: { tree: tree2 } }));
  }, [previousNodeCount.current, tree2.length]);
  let previousFilter = (0, import_react116.useRef)(filter);
  (0, import_react116.useEffect)(() => {
    let previousValue = previousFilter.current ? JSON.stringify(previousFilter.current.value) : void 0, newValue = filter ? JSON.stringify(filter.value) : void 0;
    previousFilter.current = filter, previousValue !== newValue && dispatch({ type: "UPDATE_FILTER", payload: { filter } });
  }, [filter?.value]);
  let virtualizer = (0, import_react_virtual2.useVirtualizer)({
    count: state.visibleNodeIds.length,
    getItemKey: (index) => state.visibleNodeIds[index],
    getScrollElement: () => parentRef.current,
    estimateSize: (index) => estimatedRowHeight({
      node: tree2[index],
      state: state.nodes[tree2[index].id],
      index
    }),
    overscan: 20
  }), scrollToNodeFn = (0, import_react116.useCallback)(
    (id) => {
      let itemIndex = state.visibleNodeIds.findIndex((n) => n === id);
      itemIndex !== -1 && virtualizer.scrollToIndex(itemIndex, { align: "auto" });
    },
    [state]
  ), selectNode = (0, import_react116.useCallback)(
    (id, scrollToNode = !0) => {
      dispatch({ type: "SELECT_NODE", payload: { id, scrollToNode, scrollToNodeFn } });
    },
    [state]
  ), deselectNode = (0, import_react116.useCallback)(
    (id) => {
      dispatch({ type: "DESELECT_NODE", payload: { id } });
    },
    [state]
  ), deselectAllNodes = (0, import_react116.useCallback)(() => {
    dispatch({ type: "DESELECT_ALL_NODES" });
  }, [state]), toggleNodeSelection = (0, import_react116.useCallback)(
    (id, scrollToNode = !0) => {
      dispatch({ type: "TOGGLE_NODE_SELECTION", payload: { id, scrollToNode, scrollToNodeFn } });
    },
    [state]
  ), expandNode = (0, import_react116.useCallback)(
    (id, scrollToNode = !0) => {
      dispatch({ type: "EXPAND_NODE", payload: { id, scrollToNode, scrollToNodeFn } });
    },
    [state]
  ), collapseNode = (0, import_react116.useCallback)(
    (id) => {
      dispatch({ type: "COLLAPSE_NODE", payload: { id } });
    },
    [state]
  ), toggleExpandNode = (0, import_react116.useCallback)(
    (id, scrollToNode = !0) => {
      dispatch({ type: "TOGGLE_EXPAND_NODE", payload: { id, scrollToNode, scrollToNodeFn } });
    },
    [state]
  ), selectFirstVisibleNode = (0, import_react116.useCallback)(
    (scrollToNode = !0) => {
      dispatch({
        type: "SELECT_FIRST_VISIBLE_NODE",
        payload: { scrollToNode, scrollToNodeFn }
      });
    },
    [tree2, state]
  ), selectLastVisibleNode = (0, import_react116.useCallback)(
    (scrollToNode = !0) => {
      dispatch({
        type: "SELECT_LAST_VISIBLE_NODE",
        payload: { scrollToNode, scrollToNodeFn }
      });
    },
    [tree2, state]
  ), selectNextVisibleNode = (0, import_react116.useCallback)(
    (scrollToNode = !0) => {
      dispatch({
        type: "SELECT_NEXT_VISIBLE_NODE",
        payload: { scrollToNode, scrollToNodeFn }
      });
    },
    [state]
  ), selectPreviousVisibleNode = (0, import_react116.useCallback)(
    (scrollToNode = !0) => {
      dispatch({
        type: "SELECT_PREVIOUS_VISIBLE_NODE",
        payload: { scrollToNode, scrollToNodeFn }
      });
    },
    [state]
  ), selectParentNode = (0, import_react116.useCallback)(
    (scrollToNode = !0) => {
      dispatch({
        type: "SELECT_PARENT_NODE",
        payload: { scrollToNode, scrollToNodeFn }
      });
    },
    [state]
  ), expandAllBelowDepth = (0, import_react116.useCallback)(
    (depth) => {
      dispatch({ type: "EXPAND_ALL_BELOW_DEPTH", payload: { depth } });
    },
    [state]
  ), collapseAllBelowDepth = (0, import_react116.useCallback)(
    (depth) => {
      dispatch({ type: "COLLAPSE_ALL_BELOW_DEPTH", payload: { depth } });
    },
    [state]
  ), expandLevel = (0, import_react116.useCallback)(
    (level) => {
      dispatch({ type: "EXPAND_LEVEL", payload: { level } });
    },
    [state]
  ), collapseLevel = (0, import_react116.useCallback)(
    (level) => {
      dispatch({ type: "COLLAPSE_LEVEL", payload: { level } });
    },
    [state]
  ), toggleExpandLevel = (0, import_react116.useCallback)(
    (level) => {
      dispatch({ type: "TOGGLE_EXPAND_LEVEL", payload: { level } });
    },
    [state]
  ), getTreeProps = (0, import_react116.useCallback)(() => ({
    role: "tree",
    "aria-multiselectable": !0,
    tabIndex: -1,
    onKeyDown: (e) => {
      if (!e.defaultPrevented)
        switch (e.key) {
          case "Home": {
            selectFirstVisibleNode(!0), e.preventDefault();
            break;
          }
          case "End": {
            selectLastVisibleNode(!0), e.preventDefault();
            break;
          }
          case "Down":
          case "ArrowDown": {
            selectNextVisibleNode(!0), e.preventDefault();
            break;
          }
          case "Up":
          case "ArrowUp": {
            selectPreviousVisibleNode(!0), e.preventDefault();
            break;
          }
          case "Left":
          case "ArrowLeft": {
            e.preventDefault();
            let selected = selectedIdFromState(state.nodes);
            if (selected) {
              let treeNode = tree2.find((node) => node.id === selected);
              if (e.altKey) {
                treeNode && treeNode.hasChildren && collapseLevel(treeNode.level);
                break;
              }
              treeNode && treeNode.hasChildren && state.nodes[selected].expanded ? collapseNode(selected) : selectParentNode(!0);
            }
            break;
          }
          case "Right":
          case "ArrowRight": {
            e.preventDefault();
            let selected = selectedIdFromState(state.nodes);
            if (selected) {
              let treeNode = tree2.find((node) => node.id === selected);
              if (e.altKey) {
                treeNode && treeNode.hasChildren && expandLevel(treeNode.level);
                break;
              }
              expandNode(selected, !0);
            }
            break;
          }
          case "Escape": {
            deselectAllNodes(), e.preventDefault();
            break;
          }
        }
    }
  }), [state]), getNodeProps = (0, import_react116.useCallback)(
    (id) => {
      let node = state.nodes[id];
      if (!node)
        return {};
      let treeItemIndex = tree2.findIndex((node2) => node2.id === id), treeItem = tree2[treeItemIndex];
      return {
        "aria-expanded": node.expanded,
        "aria-level": treeItem.level + 1,
        role: "treeitem",
        tabIndex: node.selected ? -1 : void 0
      };
    },
    [state]
  );
  return {
    selected: selectedIdFromState(state.nodes),
    nodes: state.nodes,
    getTreeProps,
    getNodeProps,
    selectNode,
    deselectNode,
    deselectAllNodes,
    toggleNodeSelection,
    expandNode,
    collapseNode,
    toggleExpandNode,
    expandAllBelowDepth,
    collapseAllBelowDepth,
    expandLevel,
    collapseLevel,
    toggleExpandLevel,
    selectFirstVisibleNode,
    selectLastVisibleNode,
    selectNextVisibleNode,
    selectPreviousVisibleNode,
    selectParentNode,
    scrollToNode: scrollToNodeFn,
    virtualizer
  };
}
function flattenTree(tree2) {
  let flatTree = [];
  function flattenNode(node, parentId, level) {
    let children = node.children?.map((child) => child.id) ?? [];
    flatTree.push({
      id: node.id,
      parentId,
      children,
      hasChildren: children.length > 0,
      level,
      data: node.data
    }), node.children?.forEach((child) => {
      flattenNode(child, node.id, level + 1);
    });
  }
  return flattenNode(tree2, void 0, 0), flatTree;
}
function createTreeFromFlatItems(withoutChildren, rootId) {
  let indexedItems = withoutChildren.reduce((acc, item) => (acc[item.id] = { id: item.id, data: item.data, children: [] }, acc), {});
  return withoutChildren.forEach((item) => {
    let indexedItem = indexedItems[item.id];
    if (item.parentId !== void 0) {
      let parentItem = indexedItems[item.parentId];
      parentItem && parentItem.children?.push(indexedItem);
    }
  }), indexedItems[rootId];
}

// app/hooks/useDebounce.ts
var import_react117 = require("react");
function useDebounce(fn, delay) {
  let timeout = (0, import_react117.useRef)();
  return (...args) => {
    timeout.current && clearTimeout(timeout.current), timeout.current = setTimeout(() => {
      fn(...args);
    }, delay);
  };
}

// app/hooks/useInitialDimensions.ts
var import_react118 = require("react");
function useInitialDimensions(ref) {
  let [dimensions, setDimensions] = (0, import_react118.useState)(null);
  return (0, import_react118.useEffect)(() => {
    ref.current && setDimensions(ref.current.getBoundingClientRect());
  }, [ref]), dimensions;
}

// app/hooks/useReplaceLocation.ts
var import_react119 = require("react");
function useReplaceLocation() {
  let optimisticLocation = useOptimisticLocation(), [location, setLocation] = (0, import_react119.useState)(optimisticLocation), replaceLocation = (0, import_react119.useCallback)((location2) => {
    let fullPath = location2.pathname + location2.search + location2.hash;
    history.replaceState(null, "", fullPath);
    let newLocation = { ...location2 };
    setLocation(newLocation);
  }, []), replaceSearchParam = (0, import_react119.useCallback)(
    (key, value) => {
      let searchParams = new URLSearchParams(location.search);
      value ? searchParams.set(key, value) : searchParams.delete(key), replaceLocation({ ...optimisticLocation, search: "?" + searchParams.toString() });
    },
    [optimisticLocation, replaceLocation]
  );
  return { location, replaceLocation, replaceSearchParam };
}

// app/presenters/v3/RunPresenter.server.ts
var RunPresenter2 = class {
  #prismaClient;
  constructor(prismaClient = prisma) {
    this.#prismaClient = prismaClient;
  }
  async call({
    userId,
    projectSlug,
    organizationSlug,
    runFriendlyId
  }) {
    let run = await this.#prismaClient.taskRun.findFirstOrThrow({
      select: {
        id: !0,
        number: !0,
        traceId: !0,
        spanId: !0,
        friendlyId: !0,
        runtimeEnvironment: {
          select: {
            id: !0,
            type: !0,
            slug: !0,
            organizationId: !0,
            orgMember: {
              select: {
                user: {
                  select: {
                    id: !0,
                    name: !0,
                    displayName: !0
                  }
                }
              }
            }
          }
        }
      },
      where: {
        friendlyId: runFriendlyId,
        project: {
          slug: projectSlug
        }
      }
    }), traceSummary = await eventRepository.getTraceSummary(run.traceId);
    if (!traceSummary)
      return {
        run: {
          id: run.id,
          number: run.number,
          friendlyId: run.friendlyId,
          traceId: run.traceId,
          environment: {
            id: run.runtimeEnvironment.id,
            organizationId: run.runtimeEnvironment.organizationId,
            type: run.runtimeEnvironment.type,
            slug: run.runtimeEnvironment.slug,
            userId: run.runtimeEnvironment.orgMember?.user.id,
            userName: getUsername(run.runtimeEnvironment.orgMember?.user)
          }
        },
        trace: void 0
      };
    let tree2 = createTreeFromFlatItems(traceSummary.spans, run.spanId), treeRootStartTimeMs = tree2 ? tree2?.data.startTime.getTime() : 0, totalDuration = tree2?.data.duration ?? 0, events = tree2 ? flattenTree(tree2).map((n) => {
      let offset = millisecondsToNanoseconds(
        n.data.startTime.getTime() - treeRootStartTimeMs
      );
      return totalDuration = Math.max(totalDuration, offset + n.data.duration), {
        ...n,
        data: {
          ...n.data,
          //set partial nodes to null duration
          duration: n.data.isPartial ? null : n.data.duration,
          offset,
          isRoot: n.id === traceSummary.rootSpan.id
        }
      };
    }) : [];
    totalDuration = Math.max(totalDuration, millisecondsToNanoseconds(1));
    let rootSpanStatus = "executing";
    return events[0] && (events[0].data.isError ? rootSpanStatus = "failed" : events[0].data.isPartial || (rootSpanStatus = "completed")), {
      run: {
        id: run.id,
        number: run.number,
        friendlyId: run.friendlyId,
        traceId: run.traceId,
        environment: {
          id: run.runtimeEnvironment.id,
          organizationId: run.runtimeEnvironment.organizationId,
          type: run.runtimeEnvironment.type,
          slug: run.runtimeEnvironment.slug,
          userId: run.runtimeEnvironment.orgMember?.user.id,
          userName: getUsername(run.runtimeEnvironment.orgMember?.user)
        }
      },
      trace: {
        rootSpanStatus,
        events,
        parentRunFriendlyId: tree2?.id === traceSummary.rootSpan.id ? void 0 : traceSummary.rootSpan.runId,
        duration: totalDuration,
        rootStartedAt: tree2?.data.startTime
      }
    };
  }
};

// app/services/resizablePanel.ts
var import_zod109 = require("zod"), ResizableConfig = import_zod109.z.object({ layout: import_zod109.z.array(import_zod109.z.number()).optional() }).default({ layout: void 0 });
function getCookieValue(cookieHeader, cookieName) {
  let cookieValue = cookieHeader?.split(`${cookieName}=`)[1]?.split(";")[0];
  if (!cookieValue)
    return { layout: void 0 };
  try {
    let json118 = JSON.parse(cookieValue);
    return ResizableConfig.parse(json118);
  } catch {
    return { layout: void 0 };
  }
}
var runResizableName = "resizable-panels:run";
async function getResizableRunSettings(request) {
  let cookieHeader = request.headers.get("Cookie");
  return getCookieValue(cookieHeader, runResizableName);
}
async function setResizableRunSettings(document2, layout) {
  document2.cookie = `${runResizableName}=${JSON.stringify({ layout })}`;
}

// app/routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.runs.$runParam/route.tsx
var import_jsx_runtime172 = require("react/jsx-runtime"), loader42 = async ({ request, params }) => {
  let userId = await requireUserId(request), { projectParam: projectParam2, organizationSlug, runParam: runParam2 } = v3RunParamsSchema.parse(params), result = await new RunPresenter2().call({
    userId,
    organizationSlug,
    projectSlug: projectParam2,
    runFriendlyId: runParam2
  }), resizeSettings = await getResizableRunSettings(request);
  return {
    run: result.run,
    trace: result.trace,
    maximumLiveReloadingSetting: env2.MAXIMUM_LIVE_RELOADING_EVENTS,
    resizeSettings
  };
};
function getSpanId(location) {
  return new URLSearchParams(location.search).get("span") ?? void 0;
}
function Page30() {
  let { run, trace: trace9, resizeSettings, maximumLiveReloadingSetting } = (0, import_react120.useLoaderData)(), organization = useOrganization(), project = useProject(), user = useUser(), { location, replaceSearchParam } = useReplaceLocation(), selectedSpanId = getSpanId(location), usernameForEnv = user.id !== run.environment.userId ? run.environment.userName : void 0;
  if (!trace9)
    return /* @__PURE__ */ (0, import_jsx_runtime172.jsxs)(import_jsx_runtime172.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime172.jsxs)(NavBar, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(
          PageTitle,
          {
            backButton: {
              to: v3RunsPath(organization, project),
              text: "Runs"
            },
            title: `Run #${run.number}`
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime172.jsxs)(PageAccessories, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(AdminDebugTooltip, { children: /* @__PURE__ */ (0, import_jsx_runtime172.jsxs)(PropertyTable, { children: [
            /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(Property, { label: "ID", children: /* @__PURE__ */ (0, import_jsx_runtime172.jsx)("div", { className: "flex items-center gap-2", children: /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(Paragraph, { variant: "extra-small/bright/mono", children: run.id }) }) }),
            /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(Property, { label: "Trace ID", children: /* @__PURE__ */ (0, import_jsx_runtime172.jsx)("div", { className: "flex items-center gap-2", children: /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(Paragraph, { variant: "extra-small/bright/mono", children: run.traceId }) }) }),
            /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(Property, { label: "Env ID", children: /* @__PURE__ */ (0, import_jsx_runtime172.jsx)("div", { className: "flex items-center gap-2", children: /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(Paragraph, { variant: "extra-small/bright/mono", children: run.environment.id }) }) }),
            /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(Property, { label: "Org ID", children: /* @__PURE__ */ (0, import_jsx_runtime172.jsx)("div", { className: "flex items-center gap-2", children: /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(Paragraph, { variant: "extra-small/bright/mono", children: run.environment.organizationId }) }) })
          ] }) }),
          /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(
            EnvironmentLabel,
            {
              size: "large",
              environment: run.environment,
              userName: usernameForEnv
            }
          )
        ] })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(PageBody, { children: /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(MainCenteredContainer, { className: "max-w-prose", children: /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(BlankstateInstructions, { title: "These logs have taken a walk", children: /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(Paragraph, { spacing: !0, children: "Looks like the logs from this run have wandered off after their 7-day stay. We tidy up older logs to keep things running smoothly." }) }) }) })
    ] });
  let { events, parentRunFriendlyId, duration, rootSpanStatus, rootStartedAt } = trace9, shouldLiveReload = events.length <= maximumLiveReloadingSetting, changeToSpan = useDebounce((selectedSpan) => {
    replaceSearchParam("span", selectedSpan);
  }, 250), revalidator = (0, import_react120.useRevalidator)(), streamedEvents = useEventSource2(v3RunStreamingPath(organization, project, run), {
    event: "message",
    disabled: !shouldLiveReload
  });
  return (0, import_react121.useEffect)(() => {
    streamedEvents !== null && revalidator.revalidate();
  }, [streamedEvents]), /* @__PURE__ */ (0, import_jsx_runtime172.jsxs)(import_jsx_runtime172.Fragment, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime172.jsxs)(NavBar, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(
        PageTitle,
        {
          backButton: {
            to: v3RunsPath(organization, project),
            text: "Runs"
          },
          title: `Run #${run.number}`
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime172.jsxs)(PageAccessories, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(AdminDebugTooltip, { children: /* @__PURE__ */ (0, import_jsx_runtime172.jsxs)(PropertyTable, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(Property, { label: "ID", children: /* @__PURE__ */ (0, import_jsx_runtime172.jsx)("div", { className: "flex items-center gap-2", children: /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(Paragraph, { variant: "extra-small/bright/mono", children: run.id }) }) }),
          /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(Property, { label: "Trace ID", children: /* @__PURE__ */ (0, import_jsx_runtime172.jsx)("div", { className: "flex items-center gap-2", children: /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(Paragraph, { variant: "extra-small/bright/mono", children: run.traceId }) }) }),
          /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(Property, { label: "Env ID", children: /* @__PURE__ */ (0, import_jsx_runtime172.jsx)("div", { className: "flex items-center gap-2", children: /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(Paragraph, { variant: "extra-small/bright/mono", children: run.environment.id }) }) }),
          /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(Property, { label: "Org ID", children: /* @__PURE__ */ (0, import_jsx_runtime172.jsx)("div", { className: "flex items-center gap-2", children: /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(Paragraph, { variant: "extra-small/bright/mono", children: run.environment.organizationId }) }) })
        ] }) }),
        /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(EnvironmentLabel, { size: "large", environment: run.environment, userName: usernameForEnv })
      ] })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(PageBody, { scrollable: !1, children: /* @__PURE__ */ (0, import_jsx_runtime172.jsx)("div", { className: cn("grid h-full max-h-full grid-cols-1 overflow-hidden"), children: /* @__PURE__ */ (0, import_jsx_runtime172.jsxs)(
      ResizablePanelGroup,
      {
        direction: "horizontal",
        className: "h-full max-h-full",
        onLayout: (layout) => {
          layout.length === 2 && selectedSpanId && setResizableRunSettings(document, layout);
        },
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(ResizablePanel, { order: 1, minSize: 30, defaultSize: resizeSettings.layout?.[0], children: /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(
            TasksTreeView,
            {
              selectedId: selectedSpanId,
              events,
              parentRunFriendlyId,
              onSelectedIdChanged: (selectedSpan) => {
                if (!selectedSpan) {
                  replaceSearchParam("span");
                  return;
                }
                changeToSpan(selectedSpan);
              },
              totalDuration: duration,
              rootSpanStatus,
              rootStartedAt: rootStartedAt ? new Date(rootStartedAt) : void 0,
              environmentType: run.environment.type,
              shouldLiveReload,
              maximumLiveReloadingSetting
            },
            events[0]?.id ?? "-"
          ) }),
          /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(ResizableHandle, { withHandle: !0 }),
          selectedSpanId && /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(ResizablePanel, { order: 2, minSize: 30, defaultSize: resizeSettings.layout?.[1], children: /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(
            SpanView,
            {
              runParam: run.friendlyId,
              spanId: selectedSpanId,
              closePanel: () => replaceSearchParam("span")
            }
          ) })
        ]
      }
    ) }) })
  ] });
}
function TasksTreeView({
  events,
  selectedId,
  parentRunFriendlyId,
  onSelectedIdChanged,
  totalDuration,
  rootSpanStatus,
  rootStartedAt,
  environmentType,
  shouldLiveReload,
  maximumLiveReloadingSetting
}) {
  let [filterText, setFilterText] = (0, import_react121.useState)(""), [errorsOnly, setErrorsOnly] = (0, import_react121.useState)(!1), [showDurations, setShowDurations] = (0, import_react121.useState)(!1), [scale, setScale] = (0, import_react121.useState)(0), parentRef = (0, import_react121.useRef)(null), treeScrollRef = (0, import_react121.useRef)(null), timelineScrollRef = (0, import_react121.useRef)(null), {
    nodes,
    getTreeProps,
    getNodeProps,
    toggleNodeSelection,
    toggleExpandNode,
    expandAllBelowDepth,
    toggleExpandLevel,
    collapseAllBelowDepth,
    selectNode,
    scrollToNode,
    virtualizer
  } = useTree({
    tree: events,
    selectedId,
    // collapsedIds,
    onSelectedIdChanged,
    estimatedRowHeight: () => 32,
    parentRef,
    filter: {
      value: { text: filterText, errorsOnly },
      fn: (value, node) => value.errorsOnly && node.data.isError || !value.errorsOnly ? !!(value.text === "" || node.data.message.toLowerCase().includes(value.text.toLowerCase())) : !1
    }
  });
  return /* @__PURE__ */ (0, import_jsx_runtime172.jsxs)("div", { className: "grid h-full grid-rows-[2.5rem_1fr_3.25rem] overflow-hidden", children: [
    /* @__PURE__ */ (0, import_jsx_runtime172.jsxs)("div", { className: "mx-3 flex items-center justify-between gap-2 border-b border-grid-dimmed", children: [
      /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(SearchField, { onChange: setFilterText }),
      /* @__PURE__ */ (0, import_jsx_runtime172.jsx)("div", { className: "flex items-center gap-2", children: /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(
        Switch,
        {
          variant: "small",
          label: "Errors only",
          checked: errorsOnly,
          onCheckedChange: (e) => setErrorsOnly(e.valueOf())
        }
      ) })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime172.jsxs)(
      ResizablePanelGroup,
      {
        direction: "horizontal",
        onLayout: (layout) => {
          layout.length === 2 && setResizableRunSettings(document, layout);
        },
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(ResizablePanel, { order: 1, minSize: 20, defaultSize: 50, className: "pl-3", children: /* @__PURE__ */ (0, import_jsx_runtime172.jsxs)("div", { className: "grid h-full grid-rows-[2rem_1fr] overflow-hidden", children: [
            /* @__PURE__ */ (0, import_jsx_runtime172.jsxs)("div", { className: "flex items-center pr-2", children: [
              parentRunFriendlyId ? /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(ShowParentLink, { runFriendlyId: parentRunFriendlyId }) : /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(Paragraph, { variant: "small", className: "flex-1 text-charcoal-500", children: "This is the root task" }),
              /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(
                LiveReloadingStatus,
                {
                  rootSpanCompleted: rootSpanStatus !== "executing",
                  isLiveReloading: shouldLiveReload,
                  settingValue: maximumLiveReloadingSetting
                }
              )
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(
              TreeView,
              {
                parentRef,
                scrollRef: treeScrollRef,
                virtualizer,
                autoFocus: !0,
                tree: events,
                nodes,
                getNodeProps,
                getTreeProps,
                renderNode: ({ node, state }) => /* @__PURE__ */ (0, import_jsx_runtime172.jsxs)(import_jsx_runtime172.Fragment, { children: [
                  /* @__PURE__ */ (0, import_jsx_runtime172.jsxs)(
                    "div",
                    {
                      className: cn(
                        "flex h-8 cursor-pointer items-center overflow-hidden rounded-l-sm pr-2",
                        state.selected ? "bg-grid-dimmed hover:bg-grid-bright" : "bg-transparent hover:bg-grid-dimmed"
                      ),
                      onClick: () => {
                        selectNode(node.id);
                      },
                      children: [
                        /* @__PURE__ */ (0, import_jsx_runtime172.jsxs)("div", { className: "flex h-8 items-center", children: [
                          Array.from({ length: node.level }).map((_, index) => /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(
                            TaskLine,
                            {
                              isError: node.data.isError,
                              isSelected: state.selected
                            },
                            index
                          )),
                          /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(
                            "div",
                            {
                              className: cn(
                                "flex h-8 w-4 items-center",
                                node.hasChildren && "hover:bg-charcoal-600"
                              ),
                              onClick: (e) => {
                                e.stopPropagation(), e.altKey ? state.expanded ? collapseAllBelowDepth(node.level) : expandAllBelowDepth(node.level) : toggleExpandNode(node.id), scrollToNode(node.id);
                              },
                              children: node.hasChildren ? state.expanded ? /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(import_solid61.ChevronDownIcon, { className: "h-4 w-4 text-charcoal-400" }) : /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(import_solid61.ChevronRightIcon, { className: "h-4 w-4 text-charcoal-400" }) : /* @__PURE__ */ (0, import_jsx_runtime172.jsx)("div", { className: "h-8 w-4" })
                            }
                          )
                        ] }),
                        /* @__PURE__ */ (0, import_jsx_runtime172.jsxs)("div", { className: "flex w-full items-center justify-between gap-2 pl-1", children: [
                          /* @__PURE__ */ (0, import_jsx_runtime172.jsxs)("div", { className: "flex items-center gap-2 overflow-x-hidden", children: [
                            /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(
                              RunIcon,
                              {
                                name: node.data.style?.icon,
                                spanName: node.data.message,
                                className: "h-4 min-h-4 w-4 min-w-4"
                              }
                            ),
                            /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(NodeText, { node }),
                            node.data.isRoot && /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(Badge, { variant: "outline-rounded", children: "Root" })
                          ] }),
                          /* @__PURE__ */ (0, import_jsx_runtime172.jsx)("div", { className: "flex items-center gap-1", children: /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(NodeStatusIcon, { node }) })
                        ] })
                      ]
                    }
                  ),
                  events.length === 1 && environmentType === "DEVELOPMENT" && /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(ConnectedDevWarning, {})
                ] }),
                onScroll: (scrollTop) => {
                  timelineScrollRef.current && (timelineScrollRef.current.scrollTop = scrollTop);
                }
              }
            )
          ] }) }),
          /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(ResizableHandle, { withHandle: !0 }),
          /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(ResizablePanel, { order: 2, minSize: 20, defaultSize: 50, children: /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(
            TimelineView,
            {
              totalDuration,
              scale,
              events,
              rootSpanStatus,
              rootStartedAt,
              parentRef,
              timelineScrollRef,
              nodes,
              getNodeProps,
              getTreeProps,
              showDurations,
              treeScrollRef,
              virtualizer,
              toggleNodeSelection
            }
          ) })
        ]
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime172.jsxs)("div", { className: "flex items-center justify-between gap-2 border-t border-grid-dimmed px-2", children: [
      /* @__PURE__ */ (0, import_jsx_runtime172.jsxs)("div", { className: "grow @container", children: [
        /* @__PURE__ */ (0, import_jsx_runtime172.jsx)("div", { className: "hidden items-center gap-4 @[42rem]:flex", children: /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(
          KeyboardShortcuts,
          {
            expandAllBelowDepth,
            collapseAllBelowDepth,
            toggleExpandLevel,
            setShowDurations
          }
        ) }),
        /* @__PURE__ */ (0, import_jsx_runtime172.jsx)("div", { className: "@[42rem]:hidden", children: /* @__PURE__ */ (0, import_jsx_runtime172.jsxs)(Popover, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(PopoverArrowTrigger, { children: "Shortcuts" }),
          /* @__PURE__ */ (0, import_jsx_runtime172.jsxs)(
            PopoverContent,
            {
              className: "min-w-[20rem] overflow-y-auto p-2 scrollbar-thin scrollbar-track-transparent scrollbar-thumb-charcoal-600",
              align: "start",
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(Header3, { spacing: !0, children: "Keyboard shortcuts" }),
                /* @__PURE__ */ (0, import_jsx_runtime172.jsx)("div", { className: "flex flex-col gap-2", children: /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(
                  KeyboardShortcuts,
                  {
                    expandAllBelowDepth,
                    collapseAllBelowDepth,
                    toggleExpandLevel,
                    setShowDurations
                  }
                ) })
              ]
            }
          )
        ] }) })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime172.jsx)("div", { className: "flex items-center gap-4", children: /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(
        Slider,
        {
          variant: "tertiary",
          className: "w-20",
          LeadingIcon: import_solid61.MagnifyingGlassMinusIcon,
          TrailingIcon: import_solid61.MagnifyingGlassPlusIcon,
          value: [scale],
          onValueChange: (value) => setScale(value[0]),
          min: 0,
          max: 1,
          step: 0.05
        }
      ) })
    ] })
  ] });
}
var tickCount = 5;
function TimelineView({
  totalDuration,
  scale,
  rootSpanStatus,
  rootStartedAt,
  parentRef,
  timelineScrollRef,
  virtualizer,
  events,
  nodes,
  getNodeProps,
  getTreeProps,
  toggleNodeSelection,
  showDurations,
  treeScrollRef
}) {
  let timelineContainerRef = (0, import_react121.useRef)(null), minTimelineWidth = useInitialDimensions(timelineContainerRef)?.width ?? 300, maxTimelineWidth = minTimelineWidth * 10, [duration, setDuration] = (0, import_react121.useState)(totalDuration);
  return (0, import_react121.useEffect)(() => {
    if (rootSpanStatus !== "executing" || !rootStartedAt) {
      setDuration(totalDuration);
      return;
    }
    let interval = setInterval(() => {
      setDuration(millisecondsToNanoseconds(Date.now() - rootStartedAt.getTime()));
    }, 500);
    return () => clearInterval(interval);
  }, [totalDuration, rootSpanStatus]), /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(
    "div",
    {
      className: "h-full overflow-x-auto overflow-y-hidden scrollbar-thin scrollbar-track-transparent scrollbar-thumb-charcoal-600",
      ref: timelineContainerRef,
      children: /* @__PURE__ */ (0, import_jsx_runtime172.jsxs)(
        Root10,
        {
          durationMs: nanosecondsToMilliseconds(duration * 1.05),
          scale,
          className: "h-full overflow-hidden",
          minWidth: minTimelineWidth,
          maxWidth: maxTimelineWidth,
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(CurrentTimeIndicator, { totalDuration: duration }),
            /* @__PURE__ */ (0, import_jsx_runtime172.jsxs)(Row, { className: "grid h-full grid-rows-[2rem_1fr]", children: [
              /* @__PURE__ */ (0, import_jsx_runtime172.jsxs)(Row, { children: [
                /* @__PURE__ */ (0, import_jsx_runtime172.jsxs)(Row, { className: "h-6", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(EquallyDistribute, { count: tickCount, children: (ms, index) => index === tickCount - 1 ? null : /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(
                    Point,
                    {
                      ms,
                      className: "relative bottom-[2px] text-xxs text-text-dimmed",
                      children: (ms2) => /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(
                        "div",
                        {
                          className: cn(
                            "whitespace-nowrap",
                            index === 0 ? "ml-1" : index === tickCount - 1 ? "-ml-1 -translate-x-full" : "-translate-x-1/2"
                          ),
                          children: formatDurationMilliseconds(ms2, {
                            style: "short",
                            maxDecimalPoints: ms2 < 1e3 ? 0 : 1
                          })
                        }
                      )
                    }
                  ) }),
                  rootSpanStatus !== "executing" && /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(
                    Point,
                    {
                      ms: nanosecondsToMilliseconds(duration),
                      className: cn(
                        "relative bottom-[2px] text-xxs",
                        rootSpanStatus === "completed" ? "text-success" : "text-error"
                      ),
                      children: (ms) => /* @__PURE__ */ (0, import_jsx_runtime172.jsx)("div", { className: cn("-translate-x-1/2 whitespace-nowrap"), children: formatDurationMilliseconds(ms, {
                        style: "short",
                        maxDecimalPoints: ms < 1e3 ? 0 : 1
                      }) })
                    }
                  )
                ] }),
                /* @__PURE__ */ (0, import_jsx_runtime172.jsxs)(Row, { className: "h-2", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(EquallyDistribute, { count: tickCount, children: (ms, index) => index === 0 || index === tickCount - 1 ? null : /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(Point, { ms, className: "h-full border-r border-grid-dimmed" }) }),
                  /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(
                    Point,
                    {
                      ms: nanosecondsToMilliseconds(duration),
                      className: cn(
                        "h-full border-r",
                        rootSpanStatus === "completed" ? "border-success/30" : "border-error/30"
                      )
                    }
                  )
                ] })
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime172.jsxs)(Row, { className: "overflow-hidden", children: [
                /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(EquallyDistribute, { count: tickCount, children: (ms, index) => index === 0 ? null : /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(Point, { ms, className: "h-full border-r border-grid-dimmed" }) }),
                rootSpanStatus !== "executing" && /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(
                  Point,
                  {
                    ms: nanosecondsToMilliseconds(duration),
                    className: cn(
                      "h-full border-r",
                      rootSpanStatus === "completed" ? "border-success/30" : "border-error/30"
                    )
                  }
                ),
                /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(
                  TreeView,
                  {
                    scrollRef: timelineScrollRef,
                    virtualizer,
                    tree: events,
                    nodes,
                    getNodeProps,
                    getTreeProps,
                    parentClassName: "h-full scrollbar-hide",
                    renderNode: ({ node, state, index, virtualizer: virtualizer2, virtualItem }) => /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(
                      Row,
                      {
                        className: cn(
                          "group flex h-8 items-center",
                          state.selected ? "bg-grid-dimmed hover:bg-grid-bright" : "bg-transparent hover:bg-grid-dimmed"
                        ),
                        onClick: (e) => {
                          toggleNodeSelection(node.id);
                        },
                        children: node.data.level === "TRACE" ? /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(
                          SpanWithDuration,
                          {
                            showDuration: state.selected ? !0 : showDurations,
                            startMs: nanosecondsToMilliseconds(node.data.offset),
                            durationMs: node.data.duration ? nanosecondsToMilliseconds(node.data.duration) : nanosecondsToMilliseconds(duration - node.data.offset),
                            node
                          }
                        ) : /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(Point, { ms: nanosecondsToMilliseconds(node.data.offset), children: (ms) => /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(
                          import_framer_motion9.motion.div,
                          {
                            className: cn(
                              "-ml-1 h-3 w-3 rounded-full border-2 border-background-bright",
                              eventBackgroundClassName(node.data)
                            ),
                            layoutId: node.id
                          }
                        ) })
                      },
                      index
                    ),
                    onScroll: (scrollTop) => {
                      treeScrollRef.current && (treeScrollRef.current.scrollTop = scrollTop);
                    }
                  }
                )
              ] })
            ] })
          ]
        }
      )
    }
  );
}
function NodeText({ node }) {
  return /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(Paragraph, { variant: "small", className: cn("truncate"), children: /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(SpanTitle, { ...node.data, size: "small" }) });
}
function NodeStatusIcon({ node }) {
  return node.data.level !== "TRACE" || node.data.style.variant !== "primary" ? null : node.data.isCancelled ? /* @__PURE__ */ (0, import_jsx_runtime172.jsxs)(import_jsx_runtime172.Fragment, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(Paragraph, { variant: "extra-small", className: runStatusClassNameColor2("CANCELED"), children: "Canceled" }),
    /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(TaskRunStatusIcon, { status: "CANCELED", className: cn("size-4") })
  ] }) : node.data.isError ? /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(TaskRunStatusIcon, { status: "COMPLETED_WITH_ERRORS", className: cn("size-4") }) : node.data.isPartial ? /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(TaskRunStatusIcon, { status: "EXECUTING", className: cn("size-4") }) : /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(TaskRunStatusIcon, { status: "COMPLETED_SUCCESSFULLY", className: cn("size-4") });
}
function TaskLine({ isError: isError2, isSelected }) {
  return /* @__PURE__ */ (0, import_jsx_runtime172.jsx)("div", { className: cn("h-8 w-2 border-r border-grid-bright") });
}
function ShowParentLink({ runFriendlyId }) {
  let [mouseOver, setMouseOver] = (0, import_react121.useState)(!1), organization = useOrganization(), project = useProject(), { spanParam } = (0, import_react120.useParams)();
  return /* @__PURE__ */ (0, import_jsx_runtime172.jsxs)(
    LinkButton,
    {
      variant: "minimal/medium",
      to: spanParam ? v3RunSpanPath(
        organization,
        project,
        {
          friendlyId: runFriendlyId
        },
        { spanId: spanParam }
      ) : v3RunPath(organization, project, {
        friendlyId: runFriendlyId
      }),
      onMouseEnter: () => setMouseOver(!0),
      onMouseLeave: () => setMouseOver(!1),
      fullWidth: !0,
      textAlignLeft: !0,
      shortcut: { key: "p" },
      className: "flex-1",
      children: [
        mouseOver ? /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(ShowParentIconSelected, { className: "h-4 w-4 text-indigo-500" }) : /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(ShowParentIcon, { className: "text-charcoal-650 h-4 w-4" }),
        /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(
          Paragraph,
          {
            variant: "small",
            className: cn(mouseOver ? "text-indigo-500" : "text-charcoal-500"),
            children: "Show parent items"
          }
        )
      ]
    }
  );
}
function LiveReloadingStatus({
  rootSpanCompleted,
  isLiveReloading,
  settingValue
}) {
  return rootSpanCompleted ? null : /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(import_jsx_runtime172.Fragment, { children: isLiveReloading ? /* @__PURE__ */ (0, import_jsx_runtime172.jsxs)("div", { className: "flex items-center gap-1", children: [
    /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(PulsingDot, {}),
    /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(Paragraph, { variant: "extra-small", className: "whitespace-nowrap text-blue-500", children: "Live reloading" })
  ] }) : /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(
    SimpleTooltip,
    {
      content: `Live reloading is disabled because you've exceeded ${settingValue} logs.`,
      button: /* @__PURE__ */ (0, import_jsx_runtime172.jsxs)("div", { className: "flex items-center gap-1", children: [
        /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(import_solid61.BoltSlashIcon, { className: "size-3.5 text-text-dimmed" }),
        /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(Paragraph, { variant: "extra-small", className: "whitespace-nowrap text-text-dimmed", children: "Live reloading disabled" })
      ] })
    }
  ) });
}
function PulsingDot() {
  return /* @__PURE__ */ (0, import_jsx_runtime172.jsxs)("span", { className: "relative flex h-2 w-2", children: [
    /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(
      "span",
      {
        className: "absolute h-full w-full animate-ping rounded-full border border-blue-500 opacity-100 duration-1000"
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime172.jsx)("span", { className: "h-2 w-2 rounded-full bg-blue-500" })
  ] });
}
function SpanWithDuration({
  showDuration,
  node,
  ...props
}) {
  return /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(Span8, { ...props, children: /* @__PURE__ */ (0, import_jsx_runtime172.jsxs)(
    import_framer_motion9.motion.div,
    {
      className: cn(
        "relative flex h-4 w-full min-w-[2px] items-center rounded-sm",
        eventBackgroundClassName(node.data)
      ),
      layoutId: node.id,
      children: [
        node.data.isPartial && /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(
          "div",
          {
            className: "absolute left-0 top-0 h-full w-full animate-tile-scroll rounded-sm opacity-30",
            style: { backgroundImage: `url(${error_banner_tile_2x_default})`, backgroundSize: "8px 8px" }
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(
          "div",
          {
            className: cn(
              "sticky left-0 z-10 transition group-hover:opacity-100",
              !showDuration && "opacity-0"
            ),
            children: /* @__PURE__ */ (0, import_jsx_runtime172.jsx)("div", { className: "rounded-sm px-1 py-0.5 text-xxs text-text-bright text-shadow-custom", children: formatDurationMilliseconds(props.durationMs, {
              style: "short",
              maxDecimalPoints: props.durationMs < 1e3 ? 0 : 1
            }) })
          }
        )
      ]
    }
  ) });
}
var edgeBoundary = 0.05;
function CurrentTimeIndicator({ totalDuration }) {
  return /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(FollowCursor, { children: (ms) => {
    let ratio = ms / nanosecondsToMilliseconds(totalDuration), offset = 0.5;
    return ratio < edgeBoundary ? offset = lerp(0, 0.5, ratio / edgeBoundary) : ratio > 1 - edgeBoundary && (offset = lerp(0.5, 1, (ratio - (1 - edgeBoundary)) / edgeBoundary)), /* @__PURE__ */ (0, import_jsx_runtime172.jsxs)("div", { className: "relative z-50 flex h-full flex-col", children: [
      /* @__PURE__ */ (0, import_jsx_runtime172.jsx)("div", { className: "relative flex h-6 items-end", children: /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(
        "div",
        {
          className: "absolute w-fit whitespace-nowrap rounded-sm border border-charcoal-600 bg-charcoal-750 px-1 py-0.5 text-xxs tabular-nums text-text-bright",
          style: {
            left: `${offset * 100}%`,
            transform: `translateX(-${offset * 100}%)`
          },
          children: formatDurationMilliseconds(ms, {
            style: "short",
            maxDecimalPoints: ms < 1e3 ? 0 : 1
          })
        }
      ) }),
      /* @__PURE__ */ (0, import_jsx_runtime172.jsx)("div", { className: "w-px grow border-r border-charcoal-600" })
    ] });
  } });
}
function ConnectedDevWarning() {
  let [isVisible, setIsVisible] = (0, import_react121.useState)(!1);
  return (0, import_react121.useEffect)(() => {
    let timer = setTimeout(() => {
      setIsVisible(!0);
    }, 3e3);
    return () => clearTimeout(timer);
  }, []), /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(
    "div",
    {
      className: cn(
        "flex items-center overflow-hidden pl-5 pr-2 transition-opacity duration-500",
        isVisible ? "opacity-100" : "h-0 opacity-0"
      ),
      children: /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(Callout, { variant: "info", children: /* @__PURE__ */ (0, import_jsx_runtime172.jsx)("div", { className: "flex flex-col gap-1", children: /* @__PURE__ */ (0, import_jsx_runtime172.jsxs)(Paragraph, { variant: "small", children: [
        "Runs usually start within 1 second in",
        " ",
        /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(EnvironmentLabel, { environment: { type: "DEVELOPMENT" } }),
        ". Check you're running the CLI: ",
        /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(InlineCode, { className: "whitespace-nowrap", children: "npx trigger.dev@beta dev" })
      ] }) }) })
    }
  );
}
function KeyboardShortcuts({
  expandAllBelowDepth,
  collapseAllBelowDepth,
  toggleExpandLevel,
  setShowDurations
}) {
  return /* @__PURE__ */ (0, import_jsx_runtime172.jsxs)(import_jsx_runtime172.Fragment, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(ArrowKeyShortcuts, {}),
    /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(
      ShortcutWithAction,
      {
        shortcut: { key: "e" },
        action: () => expandAllBelowDepth(0),
        title: "Expand all"
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(
      ShortcutWithAction,
      {
        shortcut: { key: "c" },
        action: () => collapseAllBelowDepth(1),
        title: "Collapse all"
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(NumberShortcuts, { toggleLevel: (number) => toggleExpandLevel(number) }),
    /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(
      ShortcutWithAction,
      {
        shortcut: { key: "d" },
        action: () => setShowDurations((d) => !d),
        title: "Toggle durations"
      }
    )
  ] });
}
function ArrowKeyShortcuts() {
  return /* @__PURE__ */ (0, import_jsx_runtime172.jsxs)("div", { className: "flex items-center gap-0.5", children: [
    /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(ShortcutKey, { shortcut: { key: "arrowup" }, variant: "medium", className: "ml-0 mr-0" }),
    /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(ShortcutKey, { shortcut: { key: "arrowdown" }, variant: "medium", className: "ml-0 mr-0" }),
    /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(ShortcutKey, { shortcut: { key: "arrowleft" }, variant: "medium", className: "ml-0 mr-0" }),
    /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(ShortcutKey, { shortcut: { key: "arrowright" }, variant: "medium", className: "ml-0 mr-0" }),
    /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(Paragraph, { variant: "extra-small", className: "ml-1.5 whitespace-nowrap", children: "Navigate" })
  ] });
}
function ShortcutWithAction({
  shortcut: shortcut2,
  title: title2,
  action: action106
}) {
  return useShortcutKeys({
    shortcut: shortcut2,
    action: action106
  }), /* @__PURE__ */ (0, import_jsx_runtime172.jsxs)("div", { className: "flex items-center gap-0.5", children: [
    /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(ShortcutKey, { shortcut: shortcut2, variant: "medium", className: "ml-0 mr-0" }),
    /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(Paragraph, { variant: "extra-small", className: "ml-1.5 whitespace-nowrap", children: title2 })
  ] });
}
function NumberShortcuts({ toggleLevel }) {
  return (0, import_react_hotkeys_hook2.useHotkeys)(["1", "2", "3", "4", "5", "6", "7", "8", "9", "0"], (event, hotkeysEvent) => {
    toggleLevel(Number(event.key));
  }), /* @__PURE__ */ (0, import_jsx_runtime172.jsxs)("div", { className: "flex items-center gap-0.5", children: [
    /* @__PURE__ */ (0, import_jsx_runtime172.jsx)("span", { className: cn(variants2.medium, "ml-0 mr-0"), children: "0" }),
    /* @__PURE__ */ (0, import_jsx_runtime172.jsx)("span", { className: "text-[0.75rem] text-text-dimmed", children: "\u2013" }),
    /* @__PURE__ */ (0, import_jsx_runtime172.jsx)("span", { className: cn(variants2.medium, "ml-0 mr-0"), children: "9" }),
    /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(Paragraph, { variant: "extra-small", className: "ml-1.5 whitespace-nowrap", children: "Toggle level" })
  ] });
}
function SearchField({ onChange }) {
  let [value, setValue] = (0, import_react121.useState)(""), updateFilterText = useDebounce((text) => {
    onChange(text);
  }, 250), updateValue = (0, import_react121.useCallback)((value2) => {
    setValue(value2), updateFilterText(value2);
  }, []);
  return /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(
    Input,
    {
      placeholder: "Search log",
      variant: "tertiary",
      icon: "search",
      fullWidth: !0,
      value,
      onChange: (e) => updateValue(e.target.value)
    }
  );
}

// app/routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.schedules.new/route.tsx
var route_exports48 = {};
__export(route_exports48, {
  default: () => Page31,
  loader: () => loader43
});
var import_remix_typedjson43 = require("remix-typedjson");
var import_jsx_runtime173 = require("react/jsx-runtime"), loader43 = async ({ request, params }) => {
  let userId = await requireUserId(request), { projectParam: projectParam2, organizationSlug } = ProjectParamSchema.parse(params), result = await new EditSchedulePresenter().call({
    userId,
    projectSlug: projectParam2
  });
  return (0, import_remix_typedjson43.typedjson)({ ...result, showGenerateField: humanToCronSupported });
};
function Page31() {
  let { schedule, possibleTasks, possibleEnvironments, possibleTimezones, showGenerateField } = (0, import_remix_typedjson43.useTypedLoaderData)();
  return /* @__PURE__ */ (0, import_jsx_runtime173.jsx)(
    UpsertScheduleForm,
    {
      schedule,
      possibleTasks,
      possibleEnvironments,
      showGenerateField,
      possibleTimezones
    }
  );
}

// app/routes/_app.orgs.$organizationSlug.integrations_.$clientParam.connections/route.tsx
var route_exports49 = {};
__export(route_exports49, {
  default: () => Page32,
  loader: () => loader44
});
var import_remix_typedjson44 = require("remix-typedjson");

// app/components/integrations/connectionType.ts
function connectionType(type) {
  switch (type) {
    case "DEVELOPER":
      return "Developer";
    case "EXTERNAL":
      return "Your users";
  }
}

// app/presenters/IntegrationClientConnectionsPresenter.server.ts
var IntegrationClientConnectionsPresenter = class {
  #prismaClient;
  constructor(prismaClient = prisma) {
    this.#prismaClient = prismaClient;
  }
  async call({
    userId,
    organizationSlug,
    clientSlug
  }) {
    return {
      connections: (await this.#prismaClient.integrationConnection.findMany({
        select: {
          id: !0,
          expiresAt: !0,
          metadata: !0,
          connectionType: !0,
          createdAt: !0,
          updatedAt: !0,
          _count: {
            select: {
              runConnections: !0
            }
          }
        },
        where: {
          organization: {
            slug: organizationSlug,
            members: {
              some: {
                userId
              }
            }
          },
          integration: {
            slug: clientSlug
          }
        },
        orderBy: {
          createdAt: "desc"
        }
      })).map((c) => ({
        id: c.id,
        expiresAt: c.expiresAt,
        metadata: c.metadata != null ? ConnectionMetadataSchema.parse(c.metadata) : null,
        type: c.connectionType,
        createdAt: c.createdAt,
        updatedAt: c.updatedAt,
        runCount: c._count.runConnections
      }))
    };
  }
};

// app/routes/_app.orgs.$organizationSlug.integrations_.$clientParam.connections/route.tsx
var import_jsx_runtime174 = require("react/jsx-runtime"), loader44 = async ({ request, params }) => {
  let userId = await requireUserId(request), { organizationSlug, clientParam: clientParam2 } = IntegrationClientParamSchema.parse(params), presenter = new IntegrationClientConnectionsPresenter(), { connections } = await presenter.call({
    userId,
    organizationSlug,
    clientSlug: clientParam2
  });
  return (0, import_remix_typedjson44.typedjson)({ connections });
};
function Page32() {
  let { connections } = (0, import_remix_typedjson44.useTypedLoaderData)();
  return /* @__PURE__ */ (0, import_jsx_runtime174.jsxs)(Table, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime174.jsx)(TableHeader, { children: /* @__PURE__ */ (0, import_jsx_runtime174.jsxs)(TableRow, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime174.jsx)(TableHeaderCell, { children: "ID" }),
      /* @__PURE__ */ (0, import_jsx_runtime174.jsx)(TableHeaderCell, { children: "Type" }),
      /* @__PURE__ */ (0, import_jsx_runtime174.jsx)(TableHeaderCell, { children: "Run count" }),
      /* @__PURE__ */ (0, import_jsx_runtime174.jsx)(TableHeaderCell, { children: "Account" }),
      /* @__PURE__ */ (0, import_jsx_runtime174.jsx)(TableHeaderCell, { children: "Expires" }),
      /* @__PURE__ */ (0, import_jsx_runtime174.jsx)(TableHeaderCell, { children: "Created" }),
      /* @__PURE__ */ (0, import_jsx_runtime174.jsx)(TableHeaderCell, { children: "Updated" })
    ] }) }),
    /* @__PURE__ */ (0, import_jsx_runtime174.jsx)(TableBody, { children: connections.length > 0 ? connections.map((connection) => /* @__PURE__ */ (0, import_jsx_runtime174.jsxs)(TableRow, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime174.jsx)(TableCell, { children: connection.id }),
      /* @__PURE__ */ (0, import_jsx_runtime174.jsx)(TableCell, { children: connectionType(connection.type) }),
      /* @__PURE__ */ (0, import_jsx_runtime174.jsx)(TableCell, { children: connection.runCount }),
      /* @__PURE__ */ (0, import_jsx_runtime174.jsx)(TableCell, { children: connection.metadata?.account ?? "\u2013" }),
      /* @__PURE__ */ (0, import_jsx_runtime174.jsx)(TableCell, { children: /* @__PURE__ */ (0, import_jsx_runtime174.jsx)(ExpiresAt, { expiresAt: connection.expiresAt }) }),
      /* @__PURE__ */ (0, import_jsx_runtime174.jsx)(TableCell, { children: /* @__PURE__ */ (0, import_jsx_runtime174.jsx)(DateTime, { date: connection.createdAt }) }),
      /* @__PURE__ */ (0, import_jsx_runtime174.jsx)(TableCell, { children: /* @__PURE__ */ (0, import_jsx_runtime174.jsx)(DateTime, { date: connection.updatedAt }) })
    ] }, connection.id)) : /* @__PURE__ */ (0, import_jsx_runtime174.jsx)(TableBlankRow, { colSpan: 7, children: /* @__PURE__ */ (0, import_jsx_runtime174.jsx)(Paragraph, { variant: "small", className: "flex items-center justify-center", children: "No connections" }) }) })
  ] });
}
function ExpiresAt({ expiresAt }) {
  if (!expiresAt)
    return /* @__PURE__ */ (0, import_jsx_runtime174.jsx)(import_jsx_runtime174.Fragment, { children: "\u2013" });
  let inPast = expiresAt < /* @__PURE__ */ new Date();
  return /* @__PURE__ */ (0, import_jsx_runtime174.jsx)("span", { className: inPast ? "text-rose-500" : "", children: /* @__PURE__ */ (0, import_jsx_runtime174.jsx)(DateTime, { date: expiresAt }) });
}

// app/routes/_app.orgs.$organizationSlug.projects.$projectParam.setup.sveltekit/route.tsx
var route_exports51 = {};
__export(route_exports51, {
  default: () => SetUpSveltekit
});
var import_solid62 = require("@heroicons/react/20/solid");

// app/assets/logos/SveltekitLogo.tsx
var import_jsx_runtime175 = require("react/jsx-runtime");
function SvelteKitLogo({ className }) {
  return /* @__PURE__ */ (0, import_jsx_runtime175.jsxs)("svg", { className, viewBox: "0 0 184 34", fill: "none", xmlns: "http://www.w3.org/2000/svg", children: [
    /* @__PURE__ */ (0, import_jsx_runtime175.jsxs)("g", { clipPath: "url(#clip0_5341_22451)", children: [
      /* @__PURE__ */ (0, import_jsx_runtime175.jsx)(
        "path",
        {
          d: "M153.928 25.3304L149.002 16.1776L145.901 19.929V25.3304H143.3V7.82486H145.901V16.3027L152.653 7.82486H155.654L150.753 13.977L156.98 25.3304H153.928ZM162.606 25.3304V7.82486H165.206V25.3304H162.606ZM178.761 10.3257V25.3304H176.16V10.3257H171.208V7.82486H183.712V10.3257H178.761Z",
          fill: "#8D8D93"
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime175.jsx)(
        "path",
        {
          d: "M43.8554 25.6303C42.4293 25.6662 41.0258 25.2695 39.8294 24.4926C38.7117 23.7554 37.8816 22.6561 37.4785 21.3792L39.9292 20.4789C40.2691 21.2628 40.8241 21.9343 41.53 22.4157C42.2466 22.8959 43.0933 23.1447 43.9558 23.1285C44.7848 23.1719 45.603 22.9242 46.2688 22.4283C46.5585 22.1851 46.7873 21.8776 46.9371 21.5302C47.0869 21.1829 47.1535 20.8054 47.1316 20.4278C47.1349 20.076 47.0534 19.7285 46.8939 19.4148C46.7552 19.1342 46.5738 18.8768 46.3563 18.6518C46.0811 18.4012 45.7691 18.1946 45.431 18.0391C45.0139 17.8311 44.6679 17.6727 44.393 17.5639C44.1181 17.4552 43.7138 17.3093 43.1801 17.1264C42.5134 16.893 42.0133 16.7097 41.68 16.5764C41.2284 16.3842 40.7898 16.1628 40.367 15.9135C39.912 15.6721 39.4983 15.3598 39.1415 14.9882C38.8329 14.6257 38.5839 14.2162 38.4041 13.7754C38.0584 12.9348 37.9858 12.0069 38.1964 11.1229C38.4071 10.2388 38.8904 9.44335 39.5779 8.84903C40.5782 7.96552 41.9368 7.52366 43.6538 7.52347C45.0876 7.52347 46.2672 7.84021 47.1926 8.47369C48.0908 9.07097 48.7503 9.96521 49.0555 10.9998L46.655 11.7998C46.4138 11.258 46.0065 10.807 45.492 10.5121C44.8698 10.1667 44.1651 9.99797 43.4539 10.024C42.7565 9.98411 42.0657 10.1777 41.4907 10.5743C41.2559 10.7563 41.0685 10.9924 40.9445 11.2623C40.8204 11.5323 40.7634 11.8282 40.7782 12.1249C40.7802 12.3524 40.8303 12.5769 40.9251 12.7837C41.0198 12.9906 41.1572 13.1751 41.3281 13.3252C41.6604 13.6524 42.0504 13.9153 42.4785 14.1005C42.8791 14.2672 43.4878 14.4922 44.3044 14.7755C44.8041 14.9592 45.1749 15.0967 45.4169 15.1881C45.6589 15.2794 46.0132 15.4336 46.4798 15.6506C46.8539 15.816 47.2136 16.0123 47.555 16.2375C47.8608 16.4574 48.1532 16.6954 48.4304 16.9503C48.732 17.2117 48.9896 17.5199 49.1934 17.863C49.3877 18.2188 49.5387 18.5965 49.6433 18.9881C49.771 19.4482 49.8342 19.9239 49.8311 20.4014C49.8311 22.0354 49.2726 23.3149 48.1555 24.2399C47.0384 25.1649 45.605 25.6283 43.8554 25.6303ZM59.8851 25.3304L53.8832 7.82485H56.6843L60.6604 20.0287C60.8801 20.6851 61.0638 21.3531 61.2107 22.0295C61.357 21.3529 61.5407 20.685 61.7609 20.0287L65.6868 7.82485H68.4627L62.4858 25.3304H59.8851ZM73.764 25.3304V7.82485H84.6174V10.2758H76.365V15.0772H81.6916V17.5281H76.365V22.8794H85.1688V25.3304H73.764ZM91.7943 25.3304V7.82485H94.3955V22.8295H102.948V25.3304H91.7943ZM112.75 10.3257V25.3304H110.149V10.3257H105.198V7.82485H117.702V10.3257H112.75ZM123.078 25.3304V7.82485H133.931V10.2758H125.679V15.0772H131.006V17.5281H125.679V22.8794H134.483V25.3304H123.078Z",
          fill: "#4A4A55"
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime175.jsx)(
        "path",
        {
          d: "M25.615 4.49554C22.563 0.127376 16.5351 -1.16825 12.1769 1.60935L4.52282 6.48785C3.48875 7.13833 2.6018 7.99743 1.91867 9.01023C1.23553 10.023 0.771258 11.1672 0.555527 12.3697C0.190411 14.395 0.51127 16.4843 1.46731 18.3067C0.812002 19.3005 0.365144 20.417 0.153779 21.5885C-0.0643107 22.8151 -0.0352588 24.073 0.239231 25.2882C0.51372 26.5035 1.02812 27.6517 1.75226 28.6656C4.80425 33.0343 10.8325 34.3294 15.1901 31.5518L22.8445 26.6733C23.8786 26.0228 24.7655 25.1637 25.4487 24.1509C26.1318 23.1381 26.5961 21.9939 26.8118 20.7914C27.1767 18.766 26.856 16.6768 25.9003 14.8541C26.5553 13.8603 27.0019 12.744 27.2132 11.5726C27.4315 10.346 27.4025 9.08811 27.128 7.87282C26.8535 6.65752 26.3393 5.5093 25.615 4.49554Z",
          fill: "#FF3E00"
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime175.jsx)(
        "path",
        {
          d: "M11.4291 29.0767C10.2246 29.3898 8.95296 29.3257 7.78598 28.8932C6.619 28.4606 5.61287 27.6803 4.90345 26.6577C4.46805 26.0481 4.15874 25.3578 3.99365 24.6271C3.82857 23.8964 3.81103 23.1401 3.94207 22.4025C3.98642 22.1604 4.04751 21.9216 4.1249 21.6879L4.26898 21.2478L4.66134 21.5356C5.56664 22.2013 6.57896 22.7074 7.65464 23.0323L7.93901 23.1186L7.91289 23.4026C7.87805 23.8066 7.98742 24.2097 8.22161 24.5407C8.43522 24.849 8.73834 25.0842 9.08998 25.2146C9.44162 25.345 9.82483 25.3644 10.1878 25.2699C10.3539 25.2258 10.5122 25.1565 10.6573 25.0645L18.312 20.1845C18.4992 20.0666 18.6599 19.9109 18.7837 19.7275C18.9075 19.544 18.9917 19.3368 19.0309 19.119C19.0702 18.8966 19.0648 18.6687 19.015 18.4485C18.9652 18.2282 18.8721 18.0201 18.741 17.8363C18.5274 17.528 18.2243 17.2928 17.8727 17.1622C17.521 17.0317 17.1379 17.0122 16.7748 17.1064C16.6087 17.1505 16.4504 17.2198 16.3053 17.3119L13.3842 19.1739C12.9035 19.4793 12.379 19.7095 11.8288 19.8565C10.6243 20.1696 9.35266 20.1055 8.18568 19.6729C7.01869 19.2403 6.01256 18.4601 5.30314 17.4375C4.86762 16.8279 4.55821 16.1376 4.39307 15.4069C4.22793 14.6762 4.21039 13.9198 4.34147 13.1823C4.47158 12.4591 4.75119 11.7711 5.16242 11.1622C5.57365 10.5533 6.10744 10.0369 6.72965 9.64607L14.3834 4.76787C14.8639 4.46198 15.3885 4.23149 15.9388 4.0844C17.1433 3.77125 18.4149 3.8353 19.5819 4.26789C20.7489 4.70048 21.755 5.48077 22.4644 6.5034C22.8999 7.11296 23.2093 7.80332 23.3744 8.53401C23.5395 9.2647 23.5571 10.021 23.4261 10.7586C23.3812 11.0011 23.3197 11.2402 23.2421 11.4743L23.098 11.9145L22.706 11.6272C21.8007 10.9615 20.7884 10.4553 19.7127 10.1306L19.428 10.0443L19.4544 9.76023C19.4889 9.35635 19.3795 8.95328 19.1457 8.62219C18.9322 8.31419 18.6293 8.07913 18.278 7.94872C17.9266 7.81831 17.5437 7.79884 17.181 7.89294C17.0149 7.93707 16.8566 8.00635 16.7114 8.09836L9.05592 12.9766C8.86868 13.0944 8.70806 13.25 8.58432 13.4335C8.46058 13.6169 8.37643 13.8241 8.33723 14.0418C8.29778 14.2642 8.30305 14.4922 8.35274 14.7125C8.40242 14.9328 8.49551 15.1409 8.62659 15.3248C8.84026 15.6331 9.14336 15.8683 9.49496 15.9988C9.84656 16.1293 10.2297 16.1488 10.5928 16.0547C10.7588 16.0104 10.9171 15.9411 11.0623 15.8493L13.9828 13.9881C14.4633 13.6822 14.9878 13.4518 15.5382 13.3049C16.7424 12.9919 18.0136 13.0559 19.1803 13.4882C20.347 13.9205 21.3529 14.7004 22.0624 15.7225C22.4979 16.332 22.8073 17.0224 22.9725 17.7531C23.1376 18.4838 23.1552 19.2401 23.0241 19.9777C22.8943 20.7008 22.615 21.3889 22.2042 21.998C21.7934 22.607 21.26 23.1237 20.6382 23.515L12.9845 28.3932C12.504 28.6992 11.9795 28.9297 11.4291 29.0767Z",
          fill: "white"
        }
      )
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime175.jsx)("defs", { children: /* @__PURE__ */ (0, import_jsx_runtime175.jsx)("clipPath", { id: "clip0_5341_22451", children: /* @__PURE__ */ (0, import_jsx_runtime175.jsx)("rect", { width: "184", height: "33.1611", fill: "white" }) }) })
  ] });
}

// app/hooks/useProjectSetupComplete.ts
var import_react122 = require("react");
var import_react123 = require("@remix-run/react");
function useProjectSetupComplete() {
  let project = useProject(), organization = useOrganization(), navigate = (0, import_react123.useNavigate)(), events = useEventSource2(projectStreamingPath(project.id), {
    event: "message"
  });
  (0, import_react122.useEffect)(() => {
    if (events !== null) {
      if ("confetti" in window && typeof window.confetti < "u") {
        let randomInRange2 = function(min, max) {
          return Math.random() * (max - min) + min;
        };
        var randomInRange = randomInRange2;
        let animationEnd = Date.now() + 3500, defaults = {
          startVelocity: 30,
          spread: 360,
          ticks: 60,
          zIndex: 0,
          colors: [
            "#E7FF52",
            "#41FF54",
            "rgb(245 158 11)",
            "rgb(22 163 74)",
            "rgb(37 99 235)",
            "rgb(67 56 202)",
            "rgb(219 39 119)",
            "rgb(225 29 72)",
            "rgb(217 70 239)"
          ]
        }, interval = setInterval(function() {
          let timeLeft = animationEnd - Date.now();
          if (timeLeft <= 0)
            return clearInterval(interval);
          let particleCount = 60 * (timeLeft / 3500);
          window.confetti(
            Object.assign({}, defaults, {
              particleCount,
              origin: { x: randomInRange2(0.1, 0.4), y: Math.random() - 0.2 }
            })
          ), window.confetti(
            Object.assign({}, defaults, {
              particleCount,
              origin: { x: randomInRange2(0.6, 0.9), y: Math.random() - 0.2 }
            })
          );
        }, 250);
      }
      navigate(projectPath(organization, project));
    }
  }, [events]);
}

// app/routes/_app.orgs.$organizationSlug.projects.$projectParam.setup/route.tsx
var route_exports50 = {};
__export(route_exports50, {
  default: () => Page33,
  loader: () => loader45,
  useV2OnboardingApiKey: () => useV2OnboardingApiKey
});
var import_react124 = require("@remix-run/react"), import_remix_typedjson45 = require("remix-typedjson");
var import_jsx_runtime176 = require("react/jsx-runtime"), loader45 = async ({ request, params }) => {
  let userId = await requireUserId(request), { organizationSlug, projectParam: projectParam2 } = ProjectParamSchema.parse(params), environment = await prisma.runtimeEnvironment.findFirst({
    where: {
      organization: {
        slug: organizationSlug
      },
      project: {
        slug: projectParam2
      },
      orgMember: {
        userId
      }
    }
  });
  if (!environment)
    throw new Response("Not Found", { status: 404 });
  return (0, import_remix_typedjson45.typedjson)({
    apiKey: environment.apiKey
  });
};
function useV2OnboardingApiKey() {
  let routeMatch = useTypedMatchesData({
    id: "routes/_app.orgs.$organizationSlug.projects.$projectParam.setup"
  });
  if (!routeMatch)
    throw new Error("Route match not found");
  return routeMatch;
}
function Page33() {
  return /* @__PURE__ */ (0, import_jsx_runtime176.jsx)("div", { className: "h-full overflow-y-auto overflow-x-hidden p-4 scrollbar-thin scrollbar-track-transparent scrollbar-thumb-charcoal-600", children: /* @__PURE__ */ (0, import_jsx_runtime176.jsx)(import_react124.Outlet, {}) });
}

// app/routes/_app.orgs.$organizationSlug.projects.$projectParam.setup.sveltekit/route.tsx
var import_jsx_runtime177 = require("react/jsx-runtime");
function SetUpSveltekit() {
  let organization = useOrganization(), project = useProject();
  useProjectSetupComplete();
  let { apiKey } = useV2OnboardingApiKey();
  return /* @__PURE__ */ (0, import_jsx_runtime177.jsxs)("div", { className: "mx-auto max-w-3xl pt-16", children: [
    /* @__PURE__ */ (0, import_jsx_runtime177.jsx)("div", { className: "mb-12 grid place-items-center", children: /* @__PURE__ */ (0, import_jsx_runtime177.jsx)(SvelteKitLogo, { className: "w-72" }) }),
    /* @__PURE__ */ (0, import_jsx_runtime177.jsxs)("div", { className: "flex items-center justify-between", children: [
      /* @__PURE__ */ (0, import_jsx_runtime177.jsx)(Header1, { spacing: !0, className: "text-text-bright", children: "Get setup in 5 minutes" }),
      /* @__PURE__ */ (0, import_jsx_runtime177.jsxs)("div", { className: "flex items-center gap-2", children: [
        /* @__PURE__ */ (0, import_jsx_runtime177.jsx)(
          LinkButton,
          {
            to: projectSetupPath(organization, project),
            variant: "tertiary/small",
            LeadingIcon: import_solid62.Squares2X2Icon,
            children: "Choose a different framework"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime177.jsx)(
          Feedback,
          {
            button: /* @__PURE__ */ (0, import_jsx_runtime177.jsx)(Button, { variant: "tertiary/small", LeadingIcon: import_solid62.ChatBubbleLeftRightIcon, children: "I'm stuck!" }),
            defaultValue: "help"
          }
        )
      ] })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime177.jsxs)("div", { children: [
      /* @__PURE__ */ (0, import_jsx_runtime177.jsx)(
        Callout,
        {
          variant: "info",
          to: "https://github.com/triggerdotdev/trigger.dev/discussions/430",
          className: "mb-8",
          children: "Trigger.dev has full support for serverless. We will be adding support for long-running servers soon."
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime177.jsxs)("div", { children: [
        /* @__PURE__ */ (0, import_jsx_runtime177.jsx)(
          StepNumber,
          {
            stepNumber: "1",
            title: "Follow the steps from the Sveltekit manual installation guide"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime177.jsxs)(StepContentContainer, { className: "flex flex-col gap-2", children: [
          /* @__PURE__ */ (0, import_jsx_runtime177.jsx)(Paragraph, { className: "mt-2", children: "Copy your server API Key to your clipboard:" }),
          /* @__PURE__ */ (0, import_jsx_runtime177.jsx)("div", { className: "mb-2 flex w-full items-center justify-between", children: /* @__PURE__ */ (0, import_jsx_runtime177.jsx)(
            ClipboardField,
            {
              secure: !0,
              className: "w-fit",
              value: apiKey,
              variant: "secondary/medium",
              icon: /* @__PURE__ */ (0, import_jsx_runtime177.jsx)(Badge, { variant: "outline", children: "Server" })
            }
          ) }),
          /* @__PURE__ */ (0, import_jsx_runtime177.jsx)(Paragraph, { children: "Now follow this guide:" }),
          /* @__PURE__ */ (0, import_jsx_runtime177.jsx)(
            LinkButton,
            {
              to: "https://trigger.dev/docs/documentation/guides/manual/sveltekit",
              variant: "primary/medium",
              TrailingIcon: "external-link",
              children: "Manual installation guide"
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime177.jsx)("div", { className: "flex items-start justify-start gap-2" })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime177.jsx)(StepNumber, { stepNumber: "2", title: "Run your sveltekit app" }),
        /* @__PURE__ */ (0, import_jsx_runtime177.jsx)(StepContentContainer, { children: /* @__PURE__ */ (0, import_jsx_runtime177.jsx)(RunDevCommand, { extra: " -- --open --host" }) }),
        /* @__PURE__ */ (0, import_jsx_runtime177.jsx)(StepNumber, { stepNumber: "3", title: "Run the CLI 'dev' command" }),
        /* @__PURE__ */ (0, import_jsx_runtime177.jsx)(StepContentContainer, { children: /* @__PURE__ */ (0, import_jsx_runtime177.jsx)(TriggerDevStep, { extra: " --port 5173" }) }),
        /* @__PURE__ */ (0, import_jsx_runtime177.jsx)(StepNumber, { stepNumber: "6", title: "Wait for Jobs", displaySpinner: !0 }),
        /* @__PURE__ */ (0, import_jsx_runtime177.jsx)(StepContentContainer, { children: /* @__PURE__ */ (0, import_jsx_runtime177.jsx)(Paragraph, { children: "This page will automatically refresh." }) })
      ] })
    ] })
  ] });
}

// app/routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers._index/route.tsx
var route_exports52 = {};
__export(route_exports52, {
  default: () => Integrations2,
  loader: () => loader46
});
var import_solid63 = require("@heroicons/react/24/solid"), import_remix_typedjson46 = require("remix-typedjson");

// app/presenters/TriggersPresenter.server.ts
var TriggersPresenter = class {
  #prismaClient;
  constructor(prismaClient = prisma) {
    this.#prismaClient = prismaClient;
  }
  async call({
    userId,
    projectSlug,
    organizationSlug
  }) {
    return {
      triggers: await this.#prismaClient.triggerSource.findMany({
        select: {
          id: !0,
          active: !0,
          dynamicTrigger: {
            select: {
              id: !0,
              slug: !0
            }
          },
          integration: {
            select: {
              id: !0,
              title: !0,
              slug: !0,
              definitionId: !0,
              setupStatus: !0,
              definition: {
                select: {
                  icon: !0
                }
              }
            }
          },
          environment: {
            select: {
              type: !0
            }
          },
          createdAt: !0,
          updatedAt: !0,
          params: !0,
          registrations: !0,
          sourceRegistrationJob: !0
        },
        where: {
          organization: {
            slug: organizationSlug,
            members: {
              some: {
                userId
              }
            }
          },
          environment: {
            OR: [
              {
                orgMember: null
              },
              {
                orgMember: {
                  userId
                }
              }
            ]
          },
          project: {
            slug: projectSlug
          }
        }
      })
    };
  }
};

// app/routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers._index/route.tsx
var import_jsx_runtime178 = require("react/jsx-runtime"), loader46 = async ({ request, params }) => {
  let userId = await requireUserId(request), { organizationSlug, projectParam: projectParam2 } = ProjectParamSchema.parse(params), data2 = await new TriggersPresenter().call({
    userId,
    organizationSlug,
    projectSlug: projectParam2
  });
  return (0, import_remix_typedjson46.typedjson)(data2);
};
function Integrations2() {
  let { triggers } = (0, import_remix_typedjson46.useTypedLoaderData)(), organization = useOrganization(), project = useProject();
  return /* @__PURE__ */ (0, import_jsx_runtime178.jsxs)(import_jsx_runtime178.Fragment, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime178.jsx)(Paragraph, { variant: "small", spacing: !0, className: "pt-2", children: "External Triggers get registered with external APIs, for example a webhook." }),
    /* @__PURE__ */ (0, import_jsx_runtime178.jsxs)(Table, { containerClassName: "mt-4", children: [
      /* @__PURE__ */ (0, import_jsx_runtime178.jsx)(TableHeader, { children: /* @__PURE__ */ (0, import_jsx_runtime178.jsxs)(TableRow, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime178.jsx)(TableHeaderCell, { children: "Integration" }),
        /* @__PURE__ */ (0, import_jsx_runtime178.jsx)(TableHeaderCell, { children: "Dynamic" }),
        /* @__PURE__ */ (0, import_jsx_runtime178.jsx)(TableHeaderCell, { children: "Properties" }),
        /* @__PURE__ */ (0, import_jsx_runtime178.jsx)(TableHeaderCell, { children: "Environment" }),
        /* @__PURE__ */ (0, import_jsx_runtime178.jsx)(TableHeaderCell, { children: "Active" }),
        /* @__PURE__ */ (0, import_jsx_runtime178.jsx)(TableHeaderCell, { hiddenLabel: !0, children: "Go to page" })
      ] }) }),
      /* @__PURE__ */ (0, import_jsx_runtime178.jsx)(TableBody, { children: triggers.length > 0 ? triggers.map((t) => {
        let path2 = externalTriggerPath(organization, project, t);
        return /* @__PURE__ */ (0, import_jsx_runtime178.jsxs)(TableRow, { className: cn(!t.active && "bg-rose-500/30"), children: [
          /* @__PURE__ */ (0, import_jsx_runtime178.jsx)(TableCell, { to: path2, children: /* @__PURE__ */ (0, import_jsx_runtime178.jsxs)("div", { className: "flex items-center gap-1", children: [
            /* @__PURE__ */ (0, import_jsx_runtime178.jsx)(
              NamedIcon,
              {
                name: t.integration.definition.icon ?? t.integration.definitionId,
                className: "h-8 w-8"
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime178.jsx)(
              LabelValueStack,
              {
                label: t.integration.title,
                value: t.integration.slug,
                variant: "primary"
              }
            )
          ] }) }),
          /* @__PURE__ */ (0, import_jsx_runtime178.jsx)(TableCell, { to: path2, children: t.dynamicTrigger ? /* @__PURE__ */ (0, import_jsx_runtime178.jsxs)("span", { className: "flex items-center gap-0.5", children: [
            /* @__PURE__ */ (0, import_jsx_runtime178.jsx)(NamedIcon, { name: "dynamic", className: "h-4 w-4" }),
            t.dynamicTrigger.slug
          ] }) : /* @__PURE__ */ (0, import_jsx_runtime178.jsx)("span", { className: "text-text-dimmed", children: "\u2013" }) }),
          /* @__PURE__ */ (0, import_jsx_runtime178.jsx)(TableCell, { to: path2, children: t.params && /* @__PURE__ */ (0, import_jsx_runtime178.jsx)(
            SimpleTooltip,
            {
              button: /* @__PURE__ */ (0, import_jsx_runtime178.jsx)("div", { className: "flex max-w-[200px] items-start justify-start gap-5 truncate", children: Object.entries(t.params).map(([label, value], index) => /* @__PURE__ */ (0, import_jsx_runtime178.jsx)(
                LabelValueStack,
                {
                  label,
                  value,
                  className: "last:truncate"
                },
                index
              )) }),
              content: /* @__PURE__ */ (0, import_jsx_runtime178.jsx)("div", { className: "flex flex-col gap-2", children: Object.entries(t.params).map(([label, value], index) => /* @__PURE__ */ (0, import_jsx_runtime178.jsx)(LabelValueStack, { label, value }, index)) })
            }
          ) }),
          /* @__PURE__ */ (0, import_jsx_runtime178.jsx)(TableCell, { to: path2, children: /* @__PURE__ */ (0, import_jsx_runtime178.jsx)("span", { className: "flex", children: /* @__PURE__ */ (0, import_jsx_runtime178.jsx)(EnvironmentLabel, { environment: t.environment }) }) }),
          /* @__PURE__ */ (0, import_jsx_runtime178.jsx)(TableCell, { to: path2, children: t.active ? /* @__PURE__ */ (0, import_jsx_runtime178.jsx)(import_solid63.CheckCircleIcon, { className: "h-6 w-6 text-green-500" }) : /* @__PURE__ */ (0, import_jsx_runtime178.jsx)(import_solid63.XCircleIcon, { className: "h-6 w-6 text-rose-500" }) }),
          /* @__PURE__ */ (0, import_jsx_runtime178.jsx)(TableCellChevron, { to: path2 })
        ] }, t.id);
      }) : /* @__PURE__ */ (0, import_jsx_runtime178.jsx)(TableBlankRow, { colSpan: 100, children: /* @__PURE__ */ (0, import_jsx_runtime178.jsx)(Paragraph, { children: "No External triggers" }) }) })
    ] })
  ] });
}

// app/routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.tasks.stream/route.tsx
var route_exports53 = {};
__export(route_exports53, {
  loader: () => loader47
});

// app/presenters/v3/TasksStreamPresenter.server.ts
var pingInterval2 = 1e3, TasksStreamPresenter = class {
  #prismaClient;
  constructor(prismaClient = prisma) {
    this.#prismaClient = prismaClient;
  }
  async call({
    request,
    organizationSlug,
    projectSlug,
    userId
  }) {
    let project = await this.#prismaClient.project.findUnique({
      where: {
        slug: projectSlug,
        organization: {
          slug: organizationSlug,
          members: {
            some: {
              userId
            }
          }
        }
      },
      select: {
        id: !0
      }
    });
    if (!project)
      return new Response("Not found", { status: 404 });
    logger.info("TasksStreamPresenter.call", {
      projectSlug
    });
    let pinger, subscriber = await projectPubSub.subscribe(`project:${project.id}:*`);
    return eventStream(request.signal, (send, close) => {
      let safeSend = (args) => {
        try {
          send(args);
        } catch (error) {
          error instanceof Error ? error.name !== "TypeError" && logger.debug("Error sending SSE, aborting", {
            error: {
              name: error.name,
              message: error.message,
              stack: error.stack
            },
            args
          }) : logger.debug("Unknown error sending SSE, aborting", {
            error,
            args
          }), close();
        }
      };
      return subscriber.on("WORKER_CREATED", async (message) => {
        safeSend({ data: message.createdAt.toISOString() });
      }), pinger = setInterval(() => {
        if (request.signal.aborted)
          return close();
        safeSend({ event: "ping", data: (/* @__PURE__ */ new Date()).toISOString() });
      }, pingInterval2), async function() {
        logger.info("TasksStreamPresenter.abort", {
          projectSlug
        }), clearInterval(pinger), await subscriber.stopListening();
      };
    });
  }
};

// app/routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.tasks.stream/route.tsx
async function loader47({ request, params }) {
  let userId = await requireUserId(request), { organizationSlug, projectParam: projectParam2 } = ProjectParamSchema.parse(params);
  return new TasksStreamPresenter().call({ request, projectSlug: projectParam2, organizationSlug, userId });
}

// app/routes/_app.orgs.$organizationSlug.projects.$projectParam.http-endpoints/route.tsx
var route_exports54 = {};
__export(route_exports54, {
  default: () => Page34
});
var import_react125 = require("@remix-run/react"), import_jsx_runtime179 = require("react/jsx-runtime");
function Page34() {
  return /* @__PURE__ */ (0, import_jsx_runtime179.jsx)(import_react125.Outlet, {});
}

// app/routes/_app.orgs.$organizationSlug.projects.$projectParam.jobs.$jobParam/route.tsx
var route_exports55 = {};
__export(route_exports55, {
  default: () => Job2,
  loader: () => loader48
});
var import_react126 = require("@remix-run/react"), import_remix_typedjson47 = require("remix-typedjson");

// app/presenters/JobPresenter.server.ts
var import_zod110 = require("zod");
var JobPresenter = class extends BasePresenter {
  async call({
    userId,
    jobSlug,
    projectSlug,
    organizationSlug
  }) {
    let job = await this._replica.job.findFirst({
      select: {
        id: !0,
        slug: !0,
        title: !0,
        aliases: {
          select: {
            version: {
              select: {
                version: !0,
                eventSpecification: !0,
                properties: !0,
                status: !0,
                concurrencyLimit: !0,
                concurrencyLimitGroup: {
                  select: {
                    name: !0,
                    concurrencyLimit: !0
                  }
                },
                runs: {
                  select: {
                    createdAt: !0,
                    status: !0
                  },
                  take: 1,
                  orderBy: [{ createdAt: "desc" }]
                },
                integrations: {
                  select: {
                    key: !0,
                    integration: {
                      select: {
                        slug: !0,
                        definition: !0,
                        setupStatus: !0
                      }
                    }
                  }
                },
                triggerLink: !0,
                triggerHelp: !0
              }
            },
            environment: {
              select: {
                type: !0,
                orgMember: {
                  select: {
                    userId: !0
                  }
                }
              }
            }
          },
          where: {
            name: "latest"
          }
        },
        dynamicTriggers: {
          select: {
            type: !0
          }
        },
        project: {
          select: {
            slug: !0
          }
        },
        _count: {
          select: {
            runs: {
              where: {
                isTest: !1
              }
            }
          }
        }
      },
      where: {
        slug: jobSlug,
        deletedAt: null,
        organization: {
          members: {
            some: {
              userId
            }
          }
        },
        project: {
          slug: projectSlug
        }
      }
    });
    if (!job)
      return;
    let alias = job.aliases.sort((a, b) => a.environment.type === "DEVELOPMENT" && a.environment.orgMember?.userId === userId ? -1 : b.environment.type === "DEVELOPMENT" && b.environment.orgMember?.userId === userId ? 1 : a.environment.type === "PRODUCTION" ? -1 : b.environment.type === "PRODUCTION" ? 1 : 0).at(0);
    if (!alias)
      throw new Error(`No aliases found for job ${job.id}, this should never happen.`);
    let eventSpecification = EventSpecificationSchema.parse(alias.version.eventSpecification), lastRun = job.aliases.map((alias2) => alias2.version.runs.at(0)).filter(Boolean).sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime()).at(0), integrations = alias.version.integrations.map((integration) => ({
      key: integration.key,
      title: integration.integration.slug,
      icon: integration.integration.definition.icon ?? integration.integration.definition.id,
      setupStatus: integration.integration.setupStatus
    })), properties = [];
    if (eventSpecification.properties && (properties = [...properties, ...eventSpecification.properties]), alias.version.properties) {
      let versionProperties = import_zod110.z.array(DisplayPropertySchema).parse(alias.version.properties);
      properties = [...properties, ...versionProperties];
    }
    let environments2 = job.aliases.map((alias2) => ({
      type: alias2.environment.type,
      enabled: alias2.version.status === "ACTIVE",
      lastRun: alias2.version.runs.at(0)?.createdAt,
      version: alias2.version.version,
      concurrencyLimit: alias2.version.concurrencyLimit,
      concurrencyLimitGroup: alias2.version.concurrencyLimitGroup
    })), projectRootPath = projectPath({ slug: organizationSlug }, { slug: projectSlug }), hasRealRuns = job._count.runs > 0;
    return {
      id: job.id,
      slug: job.slug,
      title: job.title,
      version: alias.version.version,
      status: alias.version.status,
      dynamic: job.dynamicTriggers.length > 0,
      event: {
        title: eventSpecification.title,
        icon: eventSpecification.icon,
        source: eventSpecification.source,
        link: alias.version.triggerLink ? `${projectRootPath}/${alias.version.triggerLink}` : void 0
      },
      noRunsHelp: hasRealRuns ? void 0 : this.#getNoRunsHelp(alias.version.triggerHelp, projectRootPath),
      integrations,
      hasIntegrationsRequiringAction: integrations.some((i) => i.setupStatus === "MISSING_FIELDS"),
      lastRun,
      properties,
      environments: environments2
    };
  }
  #getNoRunsHelp(data2, projectPath2) {
    let triggerHelp = TriggerHelpSchema.nullish().parse(data2);
    if (triggerHelp && triggerHelp.noRuns)
      return triggerHelp.noRuns.link = triggerHelp.noRuns.link ? `${projectPath2}/${triggerHelp.noRuns.link}` : void 0, triggerHelp.noRuns;
  }
};

// app/routes/_app.orgs.$organizationSlug.projects.$projectParam.jobs.$jobParam/route.tsx
var import_jsx_runtime180 = require("react/jsx-runtime"), loader48 = async ({ request, params }) => {
  let userId = await requireUserId(request), { jobParam: jobParam2, projectParam: projectParam2, organizationSlug } = JobParamsSchema.parse(params), job = await new JobPresenter().call({
    userId,
    jobSlug: jobParam2,
    organizationSlug,
    projectSlug: projectParam2
  });
  if (!job)
    throw new Response("Not Found", {
      status: 404,
      statusText: `There is no Job ${jobParam2} in this Project.`
    });
  return (0, import_remix_typedjson47.typedjson)({
    job
  });
};
function Job2() {
  let organization = useOrganization(), project = useProject(), job = useJob(), renderHeader = useOptionalRun() === void 0, isTestPage = (0, import_react126.useLocation)().pathname.endsWith("/test");
  return renderHeader ? /* @__PURE__ */ (0, import_jsx_runtime180.jsxs)(PageContainer, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime180.jsxs)(NavBar, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime180.jsx)(PageTitle, { title: job.title }),
      !isTestPage && /* @__PURE__ */ (0, import_jsx_runtime180.jsx)(PageAccessories, { children: /* @__PURE__ */ (0, import_jsx_runtime180.jsx)(
        LinkButton,
        {
          to: jobTestPath(organization, project, job),
          variant: "primary/small",
          shortcut: { key: "t" },
          children: "Test"
        }
      ) })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime180.jsxs)(PageBody, { className: "grid grid-rows-[auto_1fr] px-4", scrollable: !1, children: [
      /* @__PURE__ */ (0, import_jsx_runtime180.jsxs)("div", { className: "py-4", children: [
        /* @__PURE__ */ (0, import_jsx_runtime180.jsxs)(PageInfoRow, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime180.jsxs)(PageInfoGroup, { children: [
            /* @__PURE__ */ (0, import_jsx_runtime180.jsx)(
              PageInfoProperty,
              {
                icon: job.event.icon,
                label: "Trigger",
                value: job.event.title,
                to: job.event.link ?? void 0
              }
            ),
            job.dynamic && /* @__PURE__ */ (0, import_jsx_runtime180.jsx)(PageInfoProperty, { icon: "dynamic", value: "Dynamic" }),
            /* @__PURE__ */ (0, import_jsx_runtime180.jsx)(PageInfoProperty, { icon: "id", label: "ID", value: job.slug }),
            job.properties && job.properties.map((property, index) => /* @__PURE__ */ (0, import_jsx_runtime180.jsx)(
              PageInfoProperty,
              {
                icon: "property",
                label: property.label,
                value: property.text
              },
              index
            )),
            job.integrations.length > 0 && /* @__PURE__ */ (0, import_jsx_runtime180.jsx)(
              PageInfoProperty,
              {
                label: "Integrations",
                value: /* @__PURE__ */ (0, import_jsx_runtime180.jsx)("span", { className: "flex gap-0.5", children: job.integrations.map((integration, index) => /* @__PURE__ */ (0, import_jsx_runtime180.jsx)(NamedIcon, { name: integration.icon, className: "h-4 w-4" }, index)) })
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime180.jsx)(
              PageInfoProperty,
              {
                icon: "pulse",
                label: "STATUS",
                value: titleCase(job.status.toLowerCase())
              }
            )
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime180.jsx)(PageInfoGroup, { alignment: "right", children: /* @__PURE__ */ (0, import_jsx_runtime180.jsxs)(Paragraph, { variant: "extra-small", className: "text-charcoal-600", children: [
            "UID: ",
            job.id
          ] }) })
        ] }),
        job.noRunsHelp && /* @__PURE__ */ (0, import_jsx_runtime180.jsx)(Callout, { variant: "info", to: job.noRunsHelp.link, className: "mt-2", children: job.noRunsHelp.text }),
        /* @__PURE__ */ (0, import_jsx_runtime180.jsx)(
          PageTabs,
          {
            layoutId: "jobs",
            tabs: [
              { label: "Runs", to: jobPath(organization, project, job) },
              { label: "Test", to: jobTestPath(organization, project, job) },
              {
                label: "Settings",
                to: jobSettingsPath(organization, project, job)
              }
            ]
          }
        )
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime180.jsx)(import_react126.Outlet, {})
    ] })
  ] }) : /* @__PURE__ */ (0, import_jsx_runtime180.jsx)(import_react126.Outlet, {});
}

// app/routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.deployments/route.tsx
var route_exports56 = {};
__export(route_exports56, {
  default: () => Page35,
  loader: () => loader49
});
var import_solid66 = require("@heroicons/react/20/solid"), import_react130 = require("@remix-run/react"), import_remix_typedjson48 = require("remix-typedjson"), import_zod111 = require("zod");

// app/components/primitives/Pagination.tsx
var import_outline6 = require("@heroicons/react/24/outline"), import_solid64 = require("@heroicons/react/24/solid"), import_react128 = require("@remix-run/react");

// app/components/primitives/LinkWithDisabled.tsx
var import_react127 = require("@remix-run/react");
var import_jsx_runtime181 = require("react/jsx-runtime");
function LinkDisabled({ disabled = !1, disabledClassName, ...props }) {
  return disabled ? /* @__PURE__ */ (0, import_jsx_runtime181.jsx)("span", { ...props, className: cn(props.className, disabledClassName), children: props.children }) : /* @__PURE__ */ (0, import_jsx_runtime181.jsx)(import_react127.Link, { ...props, children: props.children });
}

// app/components/primitives/Pagination.tsx
var import_jsx_runtime182 = require("react/jsx-runtime");
function PaginationControls({
  currentPage,
  totalPages,
  showPageNumbers = !0
}) {
  let location = (0, import_react128.useLocation)();
  return totalPages <= 1 ? null : /* @__PURE__ */ (0, import_jsx_runtime182.jsxs)("nav", { className: "flex items-center gap-1", "aria-label": "Pagination", children: [
    /* @__PURE__ */ (0, import_jsx_runtime182.jsx)(
      LinkDisabled,
      {
        to: pageUrl(location, currentPage - 1),
        className: currentPage > 1 ? "group" : "",
        disabled: currentPage === 1,
        disabledClassName: "opacity-30 cursor-default",
        children: /* @__PURE__ */ (0, import_jsx_runtime182.jsx)(ButtonContent, { variant: "minimal/medium", LeadingIcon: import_solid64.ChevronLeftIcon, children: "Previous" })
      }
    ),
    showPageNumbers ? calculatePageLinks(currentPage, totalPages).map((page, i) => /* @__PURE__ */ (0, import_jsx_runtime182.jsx)(PageLinkComponent, { page, location }, i)) : null,
    /* @__PURE__ */ (0, import_jsx_runtime182.jsx)(
      LinkDisabled,
      {
        to: pageUrl(location, currentPage + 1),
        className: currentPage !== totalPages ? "group" : "",
        disabled: currentPage === totalPages,
        disabledClassName: "opacity-30 cursor-default",
        children: /* @__PURE__ */ (0, import_jsx_runtime182.jsx)(ButtonContent, { variant: "minimal/medium", TrailingIcon: import_outline6.ChevronRightIcon, children: "Next" })
      }
    )
  ] });
}
function pageUrl(location, page) {
  let search = new URLSearchParams(location.search);
  return search.set("page", String(page)), location.pathname + "?" + search.toString();
}
var baseClass = "flex items-center justify-center border border-transparent h-8 w-8 text-xs font-medium transition text-text-dimmed rounded-sm", unselectedClass = "hover:bg-tertiary hover:text-text-bright", selectedClass = "border-text-dimmed text-text-bright hover:bg-tertiary";
function PageLinkComponent({
  page,
  location
}) {
  return page.type === "specific" ? /* @__PURE__ */ (0, import_jsx_runtime182.jsx)(
    import_react128.Link,
    {
      to: pageUrl(location, page.page),
      className: cn(baseClass, page.isCurrent ? selectedClass : unselectedClass),
      children: page.page
    }
  ) : /* @__PURE__ */ (0, import_jsx_runtime182.jsx)("span", { className: baseClass, children: "..." });
}
function calculatePageLinks(currentPage, totalPages) {
  let pageLinks = [];
  if (totalPages <= 10)
    for (let i = 1; i <= totalPages; i++)
      pageLinks.push({
        type: "specific",
        page: i,
        isCurrent: i === currentPage
      });
  else if (currentPage <= 3) {
    for (let i = 1; i <= 4; i++)
      pageLinks.push({
        type: "specific",
        page: i,
        isCurrent: i === currentPage
      });
    pageLinks.push({
      type: "ellipses"
    });
    for (let i = totalPages - 3; i <= totalPages; i++)
      pageLinks.push({
        type: "specific",
        page: i,
        isCurrent: i === currentPage
      });
  } else if (currentPage >= totalPages - 3) {
    for (let i = 1; i <= 3; i++)
      pageLinks.push({
        type: "specific",
        page: i,
        isCurrent: i === currentPage
      });
    pageLinks.push({
      type: "ellipses"
    });
    for (let i = totalPages - 4; i <= totalPages; i++)
      pageLinks.push({
        type: "specific",
        page: i,
        isCurrent: i === currentPage
      });
  } else {
    for (let i = 1; i <= 3; i++)
      pageLinks.push({
        type: "specific",
        page: i,
        isCurrent: i === currentPage
      });
    pageLinks.push({
      type: "ellipses"
    });
    for (let i = currentPage - 1; i <= currentPage + 1; i++)
      pageLinks.push({
        type: "specific",
        page: i,
        isCurrent: i === currentPage
      });
    pageLinks.push({
      type: "ellipses"
    });
    for (let i = totalPages - 2; i <= totalPages; i++)
      pageLinks.push({
        type: "specific",
        page: i,
        isCurrent: i === currentPage
      });
  }
  return pageLinks;
}

// app/components/runs/v3/RollbackDeploymentDialog.tsx
var import_solid65 = require("@heroicons/react/20/solid"), import_react129 = require("@remix-run/react");
var import_jsx_runtime183 = require("react/jsx-runtime");
function RollbackDeploymentDialog({
  projectId,
  deploymentShortCode,
  redirectPath
}) {
  let navigation = (0, import_react129.useNavigation)(), formAction = `/resources/${projectId}/deployments/${deploymentShortCode}/rollback`, isLoading2 = navigation.formAction === formAction;
  return /* @__PURE__ */ (0, import_jsx_runtime183.jsxs)(DialogContent, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime183.jsx)(DialogHeader, { children: "Roll back to this deployment?" }),
    /* @__PURE__ */ (0, import_jsx_runtime183.jsx)(DialogDescription, { children: "This deployment will become the default for all future runs. Tasks triggered but not included in this deploy will remain queued until you roll back to or create a new deployment with these tasks included." }),
    /* @__PURE__ */ (0, import_jsx_runtime183.jsx)(DialogFooter, { children: /* @__PURE__ */ (0, import_jsx_runtime183.jsx)(
      import_react129.Form,
      {
        action: `/resources/${projectId}/deployments/${deploymentShortCode}/rollback`,
        method: "post",
        children: /* @__PURE__ */ (0, import_jsx_runtime183.jsx)(
          Button,
          {
            type: "submit",
            name: "redirectUrl",
            value: redirectPath,
            variant: "primary/small",
            LeadingIcon: isLoading2 ? "spinner-white" : import_solid65.ArrowPathIcon,
            disabled: isLoading2,
            shortcut: { modifiers: ["meta"], key: "enter" },
            children: isLoading2 ? "Rolling back..." : "Roll back deployment"
          }
        )
      }
    ) })
  ] }, "rollback");
}

// app/presenters/v3/DeploymentListPresenter.server.ts
var pageSize = 20, DeploymentListPresenter = class {
  #prismaClient;
  constructor(prismaClient = prisma) {
    this.#prismaClient = prismaClient;
  }
  async call({
    userId,
    projectSlug,
    organizationSlug,
    page = 1
  }) {
    let project = await this.#prismaClient.project.findFirstOrThrow({
      select: {
        id: !0,
        environments: {
          select: {
            id: !0,
            type: !0,
            slug: !0,
            orgMember: {
              select: {
                user: {
                  select: {
                    id: !0,
                    name: !0,
                    displayName: !0
                  }
                }
              }
            }
          }
        }
      },
      where: {
        slug: projectSlug,
        organization: {
          slug: organizationSlug,
          members: {
            some: {
              userId
            }
          }
        }
      }
    }), totalCount = await this.#prismaClient.workerDeployment.count({
      where: {
        projectId: project.id
      }
    }), labeledDeployments = await this.#prismaClient.workerDeploymentPromotion.findMany({
      where: {
        environmentId: {
          in: project.environments.map((env6) => env6.id)
        }
      },
      select: {
        deploymentId: !0,
        label: !0
      }
    }), deployments = await this.#prismaClient.$queryRaw`
    SELECT 
  wd."id", 
  wd."shortCode", 
  wd."version", 
  (SELECT COUNT(*) FROM ${sqlDatabaseSchema}."BackgroundWorkerTask" WHERE "BackgroundWorkerTask"."workerId" = wd."workerId") AS "tasksCount", 
  wd."environmentId", 
  wd."status", 
  u."id" AS "userId", 
  u."name" AS "userName", 
  u."displayName" AS "userDisplayName", 
  u."avatarUrl" AS "userAvatarUrl", 
  wd."deployedAt"
FROM 
  ${sqlDatabaseSchema}."WorkerDeployment" as wd
INNER JOIN 
  ${sqlDatabaseSchema}."User" as u ON wd."triggeredById" = u."id" 
WHERE 
  wd."projectId" = ${project.id}
ORDER BY 
  string_to_array(wd."version", '.')::int[] DESC 
LIMIT ${pageSize} OFFSET ${pageSize * (page - 1)};`;
    return {
      currentPage: page,
      totalPages: Math.ceil(totalCount / pageSize),
      deployments: deployments.map((deployment) => {
        let environment = project.environments.find((env6) => env6.id === deployment.environmentId);
        if (!environment)
          throw new Error(`Environment not found for deployment ${deployment.id}`);
        let label = labeledDeployments.find(
          (labeledDeployment) => labeledDeployment.deploymentId === deployment.id
        );
        return {
          id: deployment.id,
          shortCode: deployment.shortCode,
          version: deployment.version,
          status: deployment.status,
          deployedAt: deployment.deployedAt,
          tasksCount: deployment.tasksCount ? Number(deployment.tasksCount) : null,
          label: label?.label,
          isCurrent: label?.label === "current",
          isDeployed: deployment.status === "DEPLOYED",
          environment: {
            id: environment.id,
            type: environment.type,
            slug: environment.slug,
            userId: environment.orgMember?.user.id,
            userName: getUsername(environment.orgMember?.user)
          },
          deployedBy: deployment.userId ? {
            id: deployment.userId,
            name: deployment.userName,
            displayName: deployment.userDisplayName,
            avatarUrl: deployment.userAvatarUrl
          } : void 0
        };
      })
    };
  }
};

// app/routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.deployments/route.tsx
var import_jsx_runtime184 = require("react/jsx-runtime"), SearchParams2 = import_zod111.z.object({
  page: import_zod111.z.coerce.number().optional()
}), loader49 = async ({ request, params }) => {
  let userId = await requireUserId(request), { organizationSlug, projectParam: projectParam2 } = ProjectParamSchema.parse(params), searchParams = createSearchParams(request.url, SearchParams2), page = searchParams.success ? searchParams.params.get("page") ?? 1 : 1;
  try {
    let result = await new DeploymentListPresenter().call({
      userId,
      organizationSlug,
      projectSlug: projectParam2,
      page
    });
    return (0, import_remix_typedjson48.typedjson)(result);
  } catch (error) {
    throw console.error(error), new Response(void 0, {
      status: 400,
      statusText: "Something went wrong, if this problem persists please contact support."
    });
  }
};
function Page35() {
  let organization = useOrganization(), project = useProject(), user = useUser(), { deployments, currentPage, totalPages } = (0, import_remix_typedjson48.useTypedLoaderData)(), hasDeployments = totalPages > 0, { deploymentParam } = (0, import_react130.useParams)();
  return /* @__PURE__ */ (0, import_jsx_runtime184.jsxs)(PageContainer, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime184.jsx)(NavBar, { children: /* @__PURE__ */ (0, import_jsx_runtime184.jsx)(PageTitle, { title: "Deployments" }) }),
    /* @__PURE__ */ (0, import_jsx_runtime184.jsx)(PageBody, { scrollable: !1, children: /* @__PURE__ */ (0, import_jsx_runtime184.jsxs)(ResizablePanelGroup, { direction: "horizontal", className: "h-full max-h-full", children: [
      /* @__PURE__ */ (0, import_jsx_runtime184.jsx)(ResizablePanel, { order: 1, minSize: 20, defaultSize: 60, children: hasDeployments ? /* @__PURE__ */ (0, import_jsx_runtime184.jsxs)("div", { className: "flex flex-col gap-4 p-3", children: [
        /* @__PURE__ */ (0, import_jsx_runtime184.jsxs)(Table, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime184.jsx)(TableHeader, { children: /* @__PURE__ */ (0, import_jsx_runtime184.jsxs)(TableRow, { children: [
            /* @__PURE__ */ (0, import_jsx_runtime184.jsx)(TableHeaderCell, { children: "Deploy" }),
            /* @__PURE__ */ (0, import_jsx_runtime184.jsx)(TableHeaderCell, { children: "Env" }),
            /* @__PURE__ */ (0, import_jsx_runtime184.jsx)(TableHeaderCell, { children: "Version" }),
            /* @__PURE__ */ (0, import_jsx_runtime184.jsx)(TableHeaderCell, { children: "Status" }),
            /* @__PURE__ */ (0, import_jsx_runtime184.jsx)(TableHeaderCell, { children: "Tasks" }),
            /* @__PURE__ */ (0, import_jsx_runtime184.jsx)(TableHeaderCell, { children: "Deployed at" }),
            /* @__PURE__ */ (0, import_jsx_runtime184.jsx)(TableHeaderCell, { children: "Deployed by" }),
            /* @__PURE__ */ (0, import_jsx_runtime184.jsx)(TableHeaderCell, { hiddenLabel: !0, children: "Go to page" })
          ] }) }),
          /* @__PURE__ */ (0, import_jsx_runtime184.jsx)(TableBody, { children: deployments.length > 0 ? deployments.map((deployment) => {
            let usernameForEnv = user.id !== deployment.environment.userId ? deployment.environment.userName : void 0, path2 = v3DeploymentPath(organization, project, deployment);
            return /* @__PURE__ */ (0, import_jsx_runtime184.jsxs)(TableRow, { className: "group", children: [
              /* @__PURE__ */ (0, import_jsx_runtime184.jsx)(TableCell, { to: path2, children: /* @__PURE__ */ (0, import_jsx_runtime184.jsxs)("div", { className: "flex items-center gap-2", children: [
                /* @__PURE__ */ (0, import_jsx_runtime184.jsx)(Paragraph, { variant: "extra-small", children: deployment.shortCode }),
                deployment.label && /* @__PURE__ */ (0, import_jsx_runtime184.jsx)(Badge, { variant: "outline-rounded", children: deployment.label })
              ] }) }),
              /* @__PURE__ */ (0, import_jsx_runtime184.jsx)(TableCell, { to: path2, children: /* @__PURE__ */ (0, import_jsx_runtime184.jsx)(
                EnvironmentLabel,
                {
                  environment: deployment.environment,
                  userName: usernameForEnv
                }
              ) }),
              /* @__PURE__ */ (0, import_jsx_runtime184.jsx)(TableCell, { to: path2, children: deployment.version }),
              /* @__PURE__ */ (0, import_jsx_runtime184.jsx)(TableCell, { to: path2, children: /* @__PURE__ */ (0, import_jsx_runtime184.jsx)(DeploymentStatus, { status: deployment.status }) }),
              /* @__PURE__ */ (0, import_jsx_runtime184.jsx)(TableCell, { to: path2, children: deployment.tasksCount !== null ? deployment.tasksCount : "\u2013" }),
              /* @__PURE__ */ (0, import_jsx_runtime184.jsx)(TableCell, { to: path2, children: deployment.deployedAt ? /* @__PURE__ */ (0, import_jsx_runtime184.jsx)(DateTime, { date: deployment.deployedAt }) : "\u2013" }),
              /* @__PURE__ */ (0, import_jsx_runtime184.jsx)(TableCell, { to: path2, children: deployment.deployedBy ? /* @__PURE__ */ (0, import_jsx_runtime184.jsxs)("div", { className: "flex items-center gap-1", children: [
                /* @__PURE__ */ (0, import_jsx_runtime184.jsx)(
                  UserAvatar,
                  {
                    avatarUrl: deployment.deployedBy.avatarUrl,
                    name: deployment.deployedBy.name ?? deployment.deployedBy.displayName,
                    className: "h-4 w-4"
                  }
                ),
                /* @__PURE__ */ (0, import_jsx_runtime184.jsx)(Paragraph, { variant: "extra-small", children: deployment.deployedBy.name ?? deployment.deployedBy.displayName })
              ] }) : "\u2013" }),
              /* @__PURE__ */ (0, import_jsx_runtime184.jsx)(DeploymentActionsCell, { deployment, path: path2 })
            ] }, deployment.id);
          }) : /* @__PURE__ */ (0, import_jsx_runtime184.jsx)(TableBlankRow, { colSpan: 6, children: /* @__PURE__ */ (0, import_jsx_runtime184.jsx)(Paragraph, { variant: "small", className: "flex items-center justify-center", children: "No deploys match your filters" }) }) })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime184.jsx)("div", { className: "flex justify-end", children: /* @__PURE__ */ (0, import_jsx_runtime184.jsx)(PaginationControls, { currentPage, totalPages }) })
      ] }) : /* @__PURE__ */ (0, import_jsx_runtime184.jsx)(CreateDeploymentInstructions, {}) }),
      deploymentParam && /* @__PURE__ */ (0, import_jsx_runtime184.jsxs)(import_jsx_runtime184.Fragment, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime184.jsx)(ResizableHandle, { withHandle: !0 }),
        /* @__PURE__ */ (0, import_jsx_runtime184.jsx)(ResizablePanel, { order: 2, minSize: 20, defaultSize: 40, children: /* @__PURE__ */ (0, import_jsx_runtime184.jsx)(import_react130.Outlet, {}) })
      ] })
    ] }) })
  ] });
}
function CreateDeploymentInstructions() {
  let organization = useOrganization(), project = useProject();
  return /* @__PURE__ */ (0, import_jsx_runtime184.jsx)(MainCenteredContainer, { className: "max-w-md", children: /* @__PURE__ */ (0, import_jsx_runtime184.jsxs)(
    InfoPanel,
    {
      icon: import_solid66.ServerStackIcon,
      iconClassName: "text-blue-400",
      title: "Deploy for the first time",
      panelClassName: "max-w-full",
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime184.jsxs)(Paragraph, { spacing: !0, variant: "small", children: [
          "There are several ways to deploy your tasks. You can use the CLI, Continuous Integration (like GitHub Actions), or an integration with a service like Netlify or Vercel. Make sure you",
          " ",
          /* @__PURE__ */ (0, import_jsx_runtime184.jsx)(TextLink, { href: v3EnvironmentVariablesPath(organization, project), children: "set your environment variables" }),
          " ",
          "first."
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime184.jsxs)("div", { className: "flex gap-3", children: [
          /* @__PURE__ */ (0, import_jsx_runtime184.jsx)(
            LinkButton,
            {
              to: docsPath("v3/cli-deploy"),
              variant: "tertiary/small",
              LeadingIcon: import_solid66.BookOpenIcon,
              className: "inline-flex",
              children: "Deploy with the CLI"
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime184.jsx)(
            LinkButton,
            {
              to: docsPath("v3/github-actions"),
              variant: "tertiary/small",
              LeadingIcon: import_solid66.BookOpenIcon,
              className: "inline-flex",
              children: "Deploy with GitHub actions"
            }
          )
        ] })
      ]
    }
  ) });
}
function DeploymentActionsCell({
  deployment,
  path: path2
}) {
  let location = (0, import_react130.useLocation)(), project = useProject();
  return deployment.isCurrent || !deployment.isDeployed ? /* @__PURE__ */ (0, import_jsx_runtime184.jsx)(TableCell, { to: path2, children: "" }) : /* @__PURE__ */ (0, import_jsx_runtime184.jsx)(TableCellMenu, { isSticky: !0, children: !deployment.isCurrent && deployment.isDeployed && /* @__PURE__ */ (0, import_jsx_runtime184.jsxs)(Dialog, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime184.jsx)(DialogTrigger, { asChild: !0, children: /* @__PURE__ */ (0, import_jsx_runtime184.jsx)(Button, { variant: "small-menu-item", LeadingIcon: import_solid66.ArrowPathIcon, children: "Rollback" }) }),
    /* @__PURE__ */ (0, import_jsx_runtime184.jsx)(
      RollbackDeploymentDialog,
      {
        projectId: project.id,
        deploymentShortCode: deployment.shortCode,
        redirectPath: `${location.pathname}${location.search}`
      }
    )
  ] }) });
}

// app/routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.runs._index/route.tsx
var route_exports57 = {};
__export(route_exports57, {
  default: () => Page36,
  loader: () => loader50
});
var import_solid71 = require("@heroicons/react/20/solid"), import_solid72 = require("@heroicons/react/24/solid"), import_react135 = require("@remix-run/react"), import_icons_react2 = require("@tabler/icons-react"), import_framer_motion10 = require("framer-motion"), import_lucide_react13 = require("lucide-react"), import_react136 = require("react"), import_remix_typedjson49 = require("remix-typedjson");

// app/components/runs/v3/RunFilters.tsx
var Ariakit2 = __toESM(require("@ariakit/react")), import_solid70 = require("@heroicons/react/20/solid"), import_react133 = require("@remix-run/react"), import_lucide_react12 = require("lucide-react"), import_react134 = require("react"), import_zod112 = require("zod");

// app/components/primitives/AppliedFilter.tsx
var import_solid67 = require("@heroicons/react/20/solid");
var import_jsx_runtime185 = require("react/jsx-runtime"), variants14 = {
  "tertiary/small": {
    box: "h-6 bg-tertiary rounded pl-1.5 gap-1.5 text-xs divide-x divide-black/15 group-hover:bg-charcoal-600",
    clear: "size-6 text-text-dimmed hover:text-text-bright transition-colors"
  },
  "minimal/small": {
    box: "h-6 hover:bg-tertiary rounded pl-1.5 gap-1.5 text-xs",
    clear: "size-6 text-text-dimmed hover:text-text-bright transition-colors"
  }
};
function AppliedFilter({
  label,
  value,
  removable = !0,
  onRemove,
  variant: variant3 = "tertiary/small",
  className
}) {
  let variantClassName = variants14[variant3];
  return /* @__PURE__ */ (0, import_jsx_runtime185.jsxs)("div", { className: cn("flex items-center transition", variantClassName.box, className), children: [
    /* @__PURE__ */ (0, import_jsx_runtime185.jsxs)("div", { className: "flex items-center gap-0.5", children: [
      /* @__PURE__ */ (0, import_jsx_runtime185.jsxs)("div", { className: "text-text-dimmed", children: [
        /* @__PURE__ */ (0, import_jsx_runtime185.jsx)("span", { children: label }),
        ":"
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime185.jsx)("div", { className: "text-text-bright", children: /* @__PURE__ */ (0, import_jsx_runtime185.jsx)("div", { children: value }) })
    ] }),
    removable && /* @__PURE__ */ (0, import_jsx_runtime185.jsx)(
      "button",
      {
        className: cn("group flex size-6 items-center justify-center", variantClassName.clear),
        onClick: onRemove,
        children: /* @__PURE__ */ (0, import_jsx_runtime185.jsx)(import_solid67.XMarkIcon, { className: "size-3.5" })
      }
    )
  ] });
}

// app/hooks/useSearchParam.ts
var import_react131 = require("@remix-run/react");
var import_react132 = require("react");
function useSearchParams() {
  let navigate = (0, import_react131.useNavigate)(), location = useOptimisticLocation(), search = new URLSearchParams(location.search), set = (0, import_react132.useCallback)(
    (values2) => {
      for (let [param, value2] of Object.entries(values2)) {
        if (value2 === void 0) {
          search.delete(param);
          continue;
        }
        if (typeof value2 == "string") {
          search.set(param, value2);
          continue;
        }
        search.delete(param);
        for (let v of value2)
          search.append(param, v);
      }
    },
    [location, search]
  ), replace = (0, import_react132.useCallback)(
    (values2) => {
      set(values2), navigate(`${location.pathname}?${search.toString()}`, { replace: !0 });
    },
    [location, search]
  ), del = (0, import_react132.useCallback)(
    (keys) => {
      Array.isArray(keys) || (keys = [keys]);
      for (let key of keys)
        search.delete(key);
      navigate(`${location.pathname}?${search.toString()}`, { replace: !0 });
    },
    [location, search]
  ), value = (0, import_react132.useCallback)(
    (param) => search.get(param) ?? void 0,
    [location, search]
  ), values = (0, import_react132.useCallback)(
    (param) => search.getAll(param),
    [location, search]
  );
  return {
    value,
    values,
    set,
    replace,
    del
  };
}

// app/components/runs/v3/TaskTriggerSource.tsx
var import_solid68 = require("@heroicons/react/20/solid");
var import_jsx_runtime186 = require("react/jsx-runtime");
function TaskTriggerSourceIcon({
  source,
  className
}) {
  switch (source) {
    case "STANDARD":
      return /* @__PURE__ */ (0, import_jsx_runtime186.jsx)("div", { className: cn("grid size-4 place-items-center text-blue-500", className), children: /* @__PURE__ */ (0, import_jsx_runtime186.jsx)(TaskIcon, { className: "size-[87.5%]" }) });
    case "SCHEDULED":
      return /* @__PURE__ */ (0, import_jsx_runtime186.jsx)(import_solid68.ClockIcon, { className: cn("size-4 text-sun-500", className) });
  }
}
function taskTriggerSourceDescription(source) {
  switch (source) {
    case "STANDARD":
      return "Standard task";
    case "SCHEDULED":
      return "Scheduled task";
  }
}

// app/components/runs/v3/BulkAction.tsx
var import_solid69 = require("@heroicons/react/20/solid"), import_assert_never11 = __toESM(require("assert-never"));
var import_jsx_runtime187 = require("react/jsx-runtime");
function BulkActionStatusCombo({
  type,
  className,
  iconClassName
}) {
  return /* @__PURE__ */ (0, import_jsx_runtime187.jsxs)("span", { className: cn("flex items-center gap-1", className), children: [
    /* @__PURE__ */ (0, import_jsx_runtime187.jsx)(BulkActionIcon, { type, className: cn("h-4 w-4", iconClassName) }),
    /* @__PURE__ */ (0, import_jsx_runtime187.jsx)(BulkActionLabel, { type })
  ] });
}
function BulkActionLabel({ type }) {
  return /* @__PURE__ */ (0, import_jsx_runtime187.jsx)("span", { className: bulkActionClassName(type), children: bulkActionTitle(type) });
}
function BulkActionIcon({ type, className }) {
  switch (type) {
    case "REPLAY":
      return /* @__PURE__ */ (0, import_jsx_runtime187.jsx)(import_solid69.ArrowPathIcon, { className: cn(bulkActionClassName(type), className) });
    case "CANCEL":
      return /* @__PURE__ */ (0, import_jsx_runtime187.jsx)(import_solid69.NoSymbolIcon, { className: cn(bulkActionClassName(type), className) });
    default:
      (0, import_assert_never11.default)(type);
  }
}
function bulkActionClassName(type) {
  switch (type) {
    case "REPLAY":
      return "text-indigo-500";
    case "CANCEL":
      return "text-rose-500";
    default:
      (0, import_assert_never11.default)(type);
  }
}
function bulkActionTitle(type) {
  switch (type) {
    case "REPLAY":
      return "Replay";
    case "CANCEL":
      return "Cancel";
    default:
      (0, import_assert_never11.default)(type);
  }
}
function bulkActionVerb(type) {
  switch (type) {
    case "REPLAY":
      return "Replaying";
    case "CANCEL":
      return "Canceling";
    default:
      (0, import_assert_never11.default)(type);
  }
}

// app/components/runs/v3/RunFilters.tsx
var import_jsx_runtime188 = require("react/jsx-runtime"), TaskAttemptStatus = import_zod112.z.enum(allTaskRunStatuses), TaskRunListSearchFilters = import_zod112.z.object({
  cursor: import_zod112.z.string().optional(),
  direction: import_zod112.z.enum(["forward", "backward"]).optional(),
  environments: import_zod112.z.preprocess(
    (value) => typeof value == "string" ? [value] : value,
    import_zod112.z.string().array().optional()
  ),
  tasks: import_zod112.z.preprocess(
    (value) => typeof value == "string" ? [value] : value,
    import_zod112.z.string().array().optional()
  ),
  versions: import_zod112.z.preprocess(
    (value) => typeof value == "string" ? [value] : value,
    import_zod112.z.string().array().optional()
  ),
  statuses: import_zod112.z.preprocess(
    (value) => typeof value == "string" ? [value] : value,
    TaskAttemptStatus.array().optional()
  ),
  period: import_zod112.z.preprocess((value) => value === "all" ? void 0 : value, import_zod112.z.string().optional()),
  bulkId: import_zod112.z.string().optional(),
  from: import_zod112.z.coerce.number().optional(),
  to: import_zod112.z.coerce.number().optional()
});
function RunsFilters2(props) {
  let location = useOptimisticLocation(), searchParams = new URLSearchParams(location.search), hasFilters = searchParams.has("statuses") || searchParams.has("environments") || searchParams.has("tasks") || searchParams.has("period") || searchParams.has("bulkId");
  return /* @__PURE__ */ (0, import_jsx_runtime188.jsxs)("div", { className: "flex flex-row flex-wrap items-center gap-1", children: [
    /* @__PURE__ */ (0, import_jsx_runtime188.jsx)(FilterMenu, { ...props }),
    /* @__PURE__ */ (0, import_jsx_runtime188.jsx)(AppliedFilters, { ...props }),
    hasFilters && /* @__PURE__ */ (0, import_jsx_runtime188.jsx)(import_react133.Form, { children: /* @__PURE__ */ (0, import_jsx_runtime188.jsx)(Button, { variant: "minimal/small", LeadingIcon: import_solid70.XMarkIcon, children: "Clear all" }) })
  ] });
}
var filterTypes = [
  {
    name: "statuses",
    title: "Status",
    icon: /* @__PURE__ */ (0, import_jsx_runtime188.jsx)("div", { className: "flex size-4 items-center justify-center", children: /* @__PURE__ */ (0, import_jsx_runtime188.jsx)("div", { className: "size-3 rounded-full border-2 border-text-dimmed" }) })
  },
  { name: "environments", title: "Environment", icon: /* @__PURE__ */ (0, import_jsx_runtime188.jsx)(import_solid70.CpuChipIcon, { className: "size-4" }) },
  { name: "tasks", title: "Tasks", icon: /* @__PURE__ */ (0, import_jsx_runtime188.jsx)(TaskIcon, { className: "size-4" }) },
  { name: "created", title: "Created", icon: /* @__PURE__ */ (0, import_jsx_runtime188.jsx)(import_solid70.CalendarIcon, { className: "size-4" }) },
  { name: "bulk", title: "Bulk action", icon: /* @__PURE__ */ (0, import_jsx_runtime188.jsx)(import_solid70.InboxStackIcon, { className: "size-4" }) }
], shortcut = { key: "f" };
function FilterMenu(props) {
  let [filterType, setFilterType] = (0, import_react134.useState)(), filterTrigger = /* @__PURE__ */ (0, import_jsx_runtime188.jsx)(
    SelectTrigger,
    {
      icon: /* @__PURE__ */ (0, import_jsx_runtime188.jsx)("div", { className: "flex size-4 items-center justify-center", children: /* @__PURE__ */ (0, import_jsx_runtime188.jsx)(import_lucide_react12.ListFilterIcon, { className: "size-3.5" }) }),
      variant: "minimal/small",
      shortcut,
      tooltipTitle: "Filter runs",
      children: "Filter"
    }
  );
  return /* @__PURE__ */ (0, import_jsx_runtime188.jsx)(FilterMenuProvider, { onClose: () => setFilterType(void 0), children: (search, setSearch) => /* @__PURE__ */ (0, import_jsx_runtime188.jsx)(
    Menu,
    {
      searchValue: search,
      clearSearchValue: () => setSearch(""),
      trigger: filterTrigger,
      filterType,
      setFilterType,
      ...props
    }
  ) });
}
function FilterMenuProvider({
  children,
  onClose
}) {
  let [searchValue, setSearchValue] = (0, import_react134.useState)("");
  return /* @__PURE__ */ (0, import_jsx_runtime188.jsx)(
    ComboboxProvider2,
    {
      resetValueOnHide: !0,
      setValue: (value) => {
        (0, import_react134.startTransition)(() => {
          setSearchValue(value);
        });
      },
      setOpen: (open) => {
        !open && onClose && onClose();
      },
      children: children(searchValue, setSearchValue)
    }
  );
}
function AppliedFilters({ possibleEnvironments, possibleTasks, bulkActions }) {
  return /* @__PURE__ */ (0, import_jsx_runtime188.jsxs)(import_jsx_runtime188.Fragment, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime188.jsx)(AppliedStatusFilter, {}),
    /* @__PURE__ */ (0, import_jsx_runtime188.jsx)(AppliedEnvironmentFilter, { possibleEnvironments }),
    /* @__PURE__ */ (0, import_jsx_runtime188.jsx)(AppliedTaskFilter, { possibleTasks }),
    /* @__PURE__ */ (0, import_jsx_runtime188.jsx)(AppliedPeriodFilter, {}),
    /* @__PURE__ */ (0, import_jsx_runtime188.jsx)(AppliedBulkActionsFilter, { bulkActions })
  ] });
}
function Menu(props) {
  switch (props.filterType) {
    case void 0:
      return /* @__PURE__ */ (0, import_jsx_runtime188.jsx)(MainMenu, { ...props });
    case "statuses":
      return /* @__PURE__ */ (0, import_jsx_runtime188.jsx)(StatusDropdown, { onClose: () => props.setFilterType(void 0), ...props });
    case "environments":
      return /* @__PURE__ */ (0, import_jsx_runtime188.jsx)(EnvironmentsDropdown, { onClose: () => props.setFilterType(void 0), ...props });
    case "tasks":
      return /* @__PURE__ */ (0, import_jsx_runtime188.jsx)(TasksDropdown, { onClose: () => props.setFilterType(void 0), ...props });
    case "created":
      return /* @__PURE__ */ (0, import_jsx_runtime188.jsx)(CreatedDropdown, { onClose: () => props.setFilterType(void 0), ...props });
    case "bulk":
      return /* @__PURE__ */ (0, import_jsx_runtime188.jsx)(BulkActionsDropdown, { onClose: () => props.setFilterType(void 0), ...props });
  }
}
function MainMenu({ searchValue, trigger, clearSearchValue, setFilterType }) {
  let filtered = (0, import_react134.useMemo)(() => filterTypes.filter(
    (item) => item.title.toLowerCase().includes(searchValue.toLowerCase())
  ), [searchValue]);
  return /* @__PURE__ */ (0, import_jsx_runtime188.jsxs)(SelectProvider2, { virtualFocus: !0, children: [
    trigger,
    /* @__PURE__ */ (0, import_jsx_runtime188.jsxs)(SelectPopover2, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime188.jsx)(ComboBox, { placeholder: "Filter by...", shortcut, value: searchValue }),
      /* @__PURE__ */ (0, import_jsx_runtime188.jsx)(SelectList2, { children: filtered.map((type, index) => /* @__PURE__ */ (0, import_jsx_runtime188.jsx)(
        SelectButtonItem,
        {
          onClick: () => {
            clearSearchValue(), setFilterType(type.name);
          },
          icon: type.icon,
          shortcut: shortcutFromIndex(index, { shortcutsEnabled: !0 }),
          children: type.title
        },
        type.name
      )) })
    ] })
  ] });
}
var statuses = filterableTaskRunStatuses.map((status) => ({
  title: runStatusTitle2(status),
  value: status
}));
function StatusDropdown({
  trigger,
  clearSearchValue,
  searchValue,
  onClose
}) {
  let { values, replace } = useSearchParams(), handleChange = (values2) => {
    clearSearchValue(), replace({ statuses: values2, cursor: void 0, direction: void 0 });
  }, filtered = (0, import_react134.useMemo)(() => statuses.filter((item) => item.title.toLowerCase().includes(searchValue.toLowerCase())), [searchValue]);
  return /* @__PURE__ */ (0, import_jsx_runtime188.jsxs)(SelectProvider2, { value: values("statuses"), setValue: handleChange, virtualFocus: !0, children: [
    trigger,
    /* @__PURE__ */ (0, import_jsx_runtime188.jsxs)(
      SelectPopover2,
      {
        className: "min-w-0 max-w-[min(240px,var(--popover-available-width))]",
        hideOnEscape: () => onClose ? (onClose(), !1) : !0,
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime188.jsx)(ComboBox, { placeholder: "Filter by status...", value: searchValue }),
          /* @__PURE__ */ (0, import_jsx_runtime188.jsx)(SelectList2, { children: filtered.map((item, index) => /* @__PURE__ */ (0, import_jsx_runtime188.jsx)(
            SelectItem2,
            {
              value: item.value,
              shortcut: shortcutFromIndex(index, { shortcutsEnabled: !0 }),
              children: /* @__PURE__ */ (0, import_jsx_runtime188.jsx)(TooltipProvider, { children: /* @__PURE__ */ (0, import_jsx_runtime188.jsxs)(Tooltip, { children: [
                /* @__PURE__ */ (0, import_jsx_runtime188.jsx)(TooltipTrigger, { className: "group flex w-full flex-col py-0", children: /* @__PURE__ */ (0, import_jsx_runtime188.jsx)(TaskRunStatusCombo, { status: item.value, iconClassName: "animate-none" }) }),
                /* @__PURE__ */ (0, import_jsx_runtime188.jsx)(TooltipContent, { side: "right", sideOffset: 9, children: /* @__PURE__ */ (0, import_jsx_runtime188.jsx)(Paragraph, { variant: "extra-small", children: descriptionForTaskRunStatus(item.value) }) })
              ] }) })
            },
            item.value
          )) })
        ]
      }
    )
  ] });
}
function AppliedStatusFilter() {
  let { values, del } = useSearchParams(), statuses4 = values("statuses");
  return statuses4.length === 0 ? null : /* @__PURE__ */ (0, import_jsx_runtime188.jsx)(FilterMenuProvider, { children: (search, setSearch) => /* @__PURE__ */ (0, import_jsx_runtime188.jsx)(
    StatusDropdown,
    {
      trigger: /* @__PURE__ */ (0, import_jsx_runtime188.jsx)(Ariakit2.Select, { render: /* @__PURE__ */ (0, import_jsx_runtime188.jsx)("div", { className: "group cursor-pointer" }), children: /* @__PURE__ */ (0, import_jsx_runtime188.jsx)(
        AppliedFilter,
        {
          label: "Status",
          value: appliedSummary(statuses4.map((v) => runStatusTitle2(v))),
          onRemove: () => del(["statuses", "cursor", "direction"])
        }
      ) }),
      searchValue: search,
      clearSearchValue: () => setSearch("")
    }
  ) });
}
function EnvironmentsDropdown({
  trigger,
  clearSearchValue,
  searchValue,
  onClose,
  possibleEnvironments
}) {
  let { values, replace } = useSearchParams(), handleChange = (values2) => {
    clearSearchValue(), replace({ environments: values2, cursor: void 0, direction: void 0 });
  }, filtered = (0, import_react134.useMemo)(() => possibleEnvironments.filter((item) => environmentTitle(item, item.userName).toLowerCase().includes(searchValue.toLowerCase())), [searchValue, possibleEnvironments]);
  return /* @__PURE__ */ (0, import_jsx_runtime188.jsxs)(SelectProvider2, { value: values("environments"), setValue: handleChange, virtualFocus: !0, children: [
    trigger,
    /* @__PURE__ */ (0, import_jsx_runtime188.jsxs)(
      SelectPopover2,
      {
        className: "min-w-0 max-w-[min(240px,var(--popover-available-width))]",
        hideOnEscape: () => onClose ? (onClose(), !1) : !0,
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime188.jsx)(ComboBox, { placeholder: "Filter by environment...", value: searchValue }),
          /* @__PURE__ */ (0, import_jsx_runtime188.jsx)(SelectList2, { children: filtered.map((item, index) => /* @__PURE__ */ (0, import_jsx_runtime188.jsx)(
            SelectItem2,
            {
              value: item.id,
              shortcut: shortcutFromIndex(index, { shortcutsEnabled: !0 }),
              children: /* @__PURE__ */ (0, import_jsx_runtime188.jsx)(EnvironmentLabel, { environment: item, userName: item.userName })
            },
            item.id
          )) })
        ]
      }
    )
  ] });
}
function AppliedEnvironmentFilter({
  possibleEnvironments
}) {
  let { values, del } = useSearchParams();
  return values("environments").length === 0 ? null : /* @__PURE__ */ (0, import_jsx_runtime188.jsx)(FilterMenuProvider, { children: (search, setSearch) => /* @__PURE__ */ (0, import_jsx_runtime188.jsx)(
    EnvironmentsDropdown,
    {
      trigger: /* @__PURE__ */ (0, import_jsx_runtime188.jsx)(Ariakit2.Select, { render: /* @__PURE__ */ (0, import_jsx_runtime188.jsx)("div", { className: "group cursor-pointer" }), children: /* @__PURE__ */ (0, import_jsx_runtime188.jsx)(
        AppliedFilter,
        {
          label: "Environment",
          value: appliedSummary(
            values("environments").map((v) => {
              let environment = possibleEnvironments.find((env6) => env6.id === v);
              return environment ? environmentTitle(environment, environment.userName) : v;
            })
          ),
          onRemove: () => del(["environments", "cursor", "direction"])
        }
      ) }),
      searchValue: search,
      clearSearchValue: () => setSearch(""),
      possibleEnvironments
    }
  ) });
}
function TasksDropdown({
  trigger,
  clearSearchValue,
  searchValue,
  onClose,
  possibleTasks
}) {
  let { values, replace } = useSearchParams(), handleChange = (values2) => {
    clearSearchValue(), replace({ tasks: values2, cursor: void 0, direction: void 0 });
  }, filtered = (0, import_react134.useMemo)(() => possibleTasks.filter((item) => item.slug.toLowerCase().includes(searchValue.toLowerCase())), [searchValue, possibleTasks]);
  return /* @__PURE__ */ (0, import_jsx_runtime188.jsxs)(SelectProvider2, { value: values("tasks"), setValue: handleChange, virtualFocus: !0, children: [
    trigger,
    /* @__PURE__ */ (0, import_jsx_runtime188.jsxs)(
      SelectPopover2,
      {
        className: "min-w-0 max-w-[min(240px,var(--popover-available-width))]",
        hideOnEscape: () => onClose ? (onClose(), !1) : !0,
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime188.jsx)(ComboBox, { placeholder: "Filter by task...", value: searchValue }),
          /* @__PURE__ */ (0, import_jsx_runtime188.jsx)(SelectList2, { children: filtered.map((item, index) => /* @__PURE__ */ (0, import_jsx_runtime188.jsx)(
            SelectItem2,
            {
              value: item.slug,
              icon: /* @__PURE__ */ (0, import_jsx_runtime188.jsx)(TaskTriggerSourceIcon, { source: item.triggerSource, className: "size-4" }),
              children: item.slug
            },
            item.slug
          )) })
        ]
      }
    )
  ] });
}
function AppliedTaskFilter({ possibleTasks }) {
  let { values, del } = useSearchParams();
  return values("tasks").length === 0 ? null : /* @__PURE__ */ (0, import_jsx_runtime188.jsx)(FilterMenuProvider, { children: (search, setSearch) => /* @__PURE__ */ (0, import_jsx_runtime188.jsx)(
    TasksDropdown,
    {
      trigger: /* @__PURE__ */ (0, import_jsx_runtime188.jsx)(Ariakit2.Select, { render: /* @__PURE__ */ (0, import_jsx_runtime188.jsx)("div", { className: "group cursor-pointer" }), children: /* @__PURE__ */ (0, import_jsx_runtime188.jsx)(
        AppliedFilter,
        {
          label: "Task",
          value: appliedSummary(
            values("tasks").map((v) => {
              let task = possibleTasks.find((task2) => task2.slug === v);
              return task ? task.slug : v;
            })
          ),
          onRemove: () => del(["tasks", "cursor", "direction"])
        }
      ) }),
      searchValue: search,
      clearSearchValue: () => setSearch(""),
      possibleTasks
    }
  ) });
}
function BulkActionsDropdown({
  trigger,
  clearSearchValue,
  searchValue,
  onClose,
  bulkActions
}) {
  let { value, replace } = useSearchParams(), handleChange = (value2) => {
    clearSearchValue(), replace({ bulkId: value2, cursor: void 0, direction: void 0 });
  }, filtered = (0, import_react134.useMemo)(() => bulkActions.filter((item) => item.type.toLowerCase().includes(searchValue.toLowerCase()) || item.createdAt.toISOString().includes(searchValue)), [searchValue, bulkActions]);
  return /* @__PURE__ */ (0, import_jsx_runtime188.jsxs)(SelectProvider2, { value: value("bulkId"), setValue: handleChange, virtualFocus: !0, children: [
    trigger,
    /* @__PURE__ */ (0, import_jsx_runtime188.jsxs)(
      SelectPopover2,
      {
        className: "min-w-0 max-w-[min(240px,var(--popover-available-width))]",
        hideOnEscape: () => onClose ? (onClose(), !1) : !0,
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime188.jsx)(ComboBox, { placeholder: "Filter by bulk action...", value: searchValue }),
          /* @__PURE__ */ (0, import_jsx_runtime188.jsxs)(SelectList2, { children: [
            /* @__PURE__ */ (0, import_jsx_runtime188.jsx)(SelectItem2, { value: "", children: "None" }),
            filtered.map((item, index) => /* @__PURE__ */ (0, import_jsx_runtime188.jsx)(SelectItem2, { value: item.id, children: /* @__PURE__ */ (0, import_jsx_runtime188.jsxs)("div", { className: "flex gap-3", children: [
              /* @__PURE__ */ (0, import_jsx_runtime188.jsx)(BulkActionStatusCombo, { type: item.type, iconClassName: "size-4" }),
              /* @__PURE__ */ (0, import_jsx_runtime188.jsx)(DateTime, { date: item.createdAt })
            ] }) }, item.id))
          ] })
        ]
      }
    )
  ] });
}
function AppliedBulkActionsFilter({ bulkActions }) {
  let { value, del } = useSearchParams(), bulkId = value("bulkId");
  if (!bulkId)
    return null;
  let action106 = bulkActions.find((action107) => action107.id === bulkId);
  return /* @__PURE__ */ (0, import_jsx_runtime188.jsx)(FilterMenuProvider, { children: (search, setSearch) => /* @__PURE__ */ (0, import_jsx_runtime188.jsx)(
    BulkActionsDropdown,
    {
      trigger: /* @__PURE__ */ (0, import_jsx_runtime188.jsx)(Ariakit2.Select, { render: /* @__PURE__ */ (0, import_jsx_runtime188.jsx)("div", { className: "group cursor-pointer" }), children: /* @__PURE__ */ (0, import_jsx_runtime188.jsx)(
        AppliedFilter,
        {
          label: "Bulk action",
          value: bulkId,
          onRemove: () => del(["bulkId", "cursor", "direction"])
        }
      ) }),
      searchValue: search,
      clearSearchValue: () => setSearch(""),
      bulkActions
    }
  ) });
}
var timePeriods = [
  {
    label: "All periods",
    value: "all"
  },
  {
    label: "5 mins ago",
    value: "5m"
  },
  {
    label: "15 mins ago",
    value: "15m"
  },
  {
    label: "30 mins ago",
    value: "30m"
  },
  {
    label: "1 hour ago",
    value: "1h"
  },
  {
    label: "3 hours ago",
    value: "3h"
  },
  {
    label: "6 hours ago",
    value: "6h"
  },
  {
    label: "1 day ago",
    value: "1d"
  },
  {
    label: "3 days ago",
    value: "3d"
  },
  {
    label: "7 days ago",
    value: "7d"
  },
  {
    label: "10 days ago",
    value: "10d"
  },
  {
    label: "14 days ago",
    value: "14d"
  },
  {
    label: "30 days ago",
    value: "30d"
  }
];
function CreatedDropdown({
  trigger,
  clearSearchValue,
  searchValue,
  onClose
}) {
  let { value, replace } = useSearchParams(), handleChange = (newValue) => {
    clearSearchValue(), !(newValue === "all" && !value) && replace({ period: newValue, cursor: void 0, direction: void 0 });
  }, filtered = (0, import_react134.useMemo)(() => timePeriods.filter(
    (item) => item.label.toLowerCase().includes(searchValue.toLowerCase())
  ), [searchValue]);
  return /* @__PURE__ */ (0, import_jsx_runtime188.jsxs)(SelectProvider2, { value: value("period"), setValue: handleChange, virtualFocus: !0, children: [
    trigger,
    /* @__PURE__ */ (0, import_jsx_runtime188.jsxs)(
      SelectPopover2,
      {
        hideOnEnter: !1,
        hideOnEscape: () => onClose ? (onClose(), !1) : !0,
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime188.jsx)(ComboBox, { placeholder: "Filter by period...", value: searchValue }),
          /* @__PURE__ */ (0, import_jsx_runtime188.jsx)(SelectList2, { children: filtered.map((item) => /* @__PURE__ */ (0, import_jsx_runtime188.jsx)(SelectItem2, { value: item.value, hideOnClick: !1, children: item.label }, item.value)) })
        ]
      }
    )
  ] });
}
function AppliedPeriodFilter() {
  let { value, del } = useSearchParams();
  return value("period") === void 0 || value("period") === "all" ? null : /* @__PURE__ */ (0, import_jsx_runtime188.jsx)(FilterMenuProvider, { children: (search, setSearch) => /* @__PURE__ */ (0, import_jsx_runtime188.jsx)(
    CreatedDropdown,
    {
      trigger: /* @__PURE__ */ (0, import_jsx_runtime188.jsx)(Ariakit2.Select, { render: /* @__PURE__ */ (0, import_jsx_runtime188.jsx)("div", { className: "group cursor-pointer" }), children: /* @__PURE__ */ (0, import_jsx_runtime188.jsx)(
        AppliedFilter,
        {
          label: "Created",
          value: timePeriods.find((t) => t.value === value("period"))?.label ?? value("period"),
          onRemove: () => del(["period", "cursor", "direction"])
        }
      ) }),
      searchValue: search,
      clearSearchValue: () => setSearch("")
    }
  ) });
}
function appliedSummary(values, maxValues = 3) {
  return values.length === 0 ? null : values.length > maxValues ? `${values.slice(0, maxValues).join(", ")} + ${values.length - maxValues} more` : values.join(", ");
}

// app/routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.runs._index/route.tsx
var import_jsx_runtime189 = require("react/jsx-runtime"), loader50 = async ({ request, params }) => {
  let userId = await requireUserId(request), { projectParam: projectParam2, organizationSlug } = ProjectParamSchema.parse(params), url = new URL(request.url), s = {
    cursor: url.searchParams.get("cursor") ?? void 0,
    direction: url.searchParams.get("direction") ?? void 0,
    statuses: url.searchParams.getAll("statuses"),
    environments: url.searchParams.getAll("environments"),
    tasks: url.searchParams.getAll("tasks"),
    period: url.searchParams.get("period") ?? void 0,
    bulkId: url.searchParams.get("bulkId") ?? void 0
  }, { tasks, versions, statuses: statuses4, environments: environments2, period, bulkId, from, to, cursor, direction } = TaskRunListSearchFilters.parse(s), project = await findProjectBySlug(organizationSlug, projectParam2, userId);
  if (!project)
    throw new Error("Project not found");
  let list3 = new RunListPresenter2().call({
    userId,
    projectId: project.id,
    tasks,
    versions,
    statuses: statuses4,
    environments: environments2,
    period,
    bulkId,
    from,
    to,
    direction,
    cursor
  });
  return (0, import_remix_typedjson49.typeddefer)({
    data: list3
  });
};
function Page36() {
  let { data: data2 } = (0, import_remix_typedjson49.useTypedLoaderData)(), isLoading2 = (0, import_react135.useNavigation)().state !== "idle", project = useProject(), user = useUser();
  return /* @__PURE__ */ (0, import_jsx_runtime189.jsxs)(import_jsx_runtime189.Fragment, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime189.jsx)(NavBar, { children: /* @__PURE__ */ (0, import_jsx_runtime189.jsx)(PageTitle, { title: "Runs" }) }),
    /* @__PURE__ */ (0, import_jsx_runtime189.jsx)(PageBody, { scrollable: !1, children: /* @__PURE__ */ (0, import_jsx_runtime189.jsx)(
      SelectedItemsProvider,
      {
        initialSelectedItems: [],
        maxSelectedItemCount: BULK_ACTION_RUN_LIMIT,
        children: ({ selectedItems }) => /* @__PURE__ */ (0, import_jsx_runtime189.jsxs)(
          "div",
          {
            className: cn(
              "grid h-full max-h-full overflow-hidden",
              selectedItems.size === 0 ? "grid-rows-1" : "grid-rows-[1fr_3.5rem]"
            ),
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime189.jsx)("div", { className: "overflow-y-auto p-3 scrollbar-thin scrollbar-track-transparent scrollbar-thumb-charcoal-600", children: /* @__PURE__ */ (0, import_jsx_runtime189.jsx)(
                import_react136.Suspense,
                {
                  fallback: /* @__PURE__ */ (0, import_jsx_runtime189.jsx)("div", { className: "flex items-center justify-center py-2", children: /* @__PURE__ */ (0, import_jsx_runtime189.jsxs)("div", { className: "mx-auto flex items-center gap-2", children: [
                    /* @__PURE__ */ (0, import_jsx_runtime189.jsx)(Spinner, {}),
                    /* @__PURE__ */ (0, import_jsx_runtime189.jsx)(Paragraph, { variant: "small", children: "Loading runs" })
                  ] }) }),
                  children: /* @__PURE__ */ (0, import_jsx_runtime189.jsx)(import_remix_typedjson49.TypedAwait, { resolve: data2, children: (list3) => /* @__PURE__ */ (0, import_jsx_runtime189.jsx)(import_jsx_runtime189.Fragment, { children: list3.runs.length === 0 && !list3.hasFilters ? list3.possibleTasks.length === 0 ? /* @__PURE__ */ (0, import_jsx_runtime189.jsx)(CreateFirstTaskInstructions, {}) : /* @__PURE__ */ (0, import_jsx_runtime189.jsx)(RunTaskInstructions, {}) : /* @__PURE__ */ (0, import_jsx_runtime189.jsx)("div", { className: cn("grid h-fit grid-cols-1 gap-4"), children: /* @__PURE__ */ (0, import_jsx_runtime189.jsxs)("div", { children: [
                    /* @__PURE__ */ (0, import_jsx_runtime189.jsxs)("div", { className: "mb-2 flex items-start justify-between gap-x-2", children: [
                      /* @__PURE__ */ (0, import_jsx_runtime189.jsx)(
                        RunsFilters2,
                        {
                          possibleEnvironments: project.environments,
                          possibleTasks: list3.possibleTasks,
                          bulkActions: list3.bulkActions,
                          hasFilters: list3.hasFilters
                        }
                      ),
                      /* @__PURE__ */ (0, import_jsx_runtime189.jsx)("div", { className: "flex items-center justify-end gap-x-2", children: /* @__PURE__ */ (0, import_jsx_runtime189.jsx)(ListPagination, { list: list3 }) })
                    ] }),
                    /* @__PURE__ */ (0, import_jsx_runtime189.jsx)(
                      TaskRunsTable,
                      {
                        total: list3.runs.length,
                        hasFilters: list3.hasFilters,
                        filters: list3.filters,
                        runs: list3.runs,
                        isLoading: isLoading2,
                        allowSelection: !0
                      }
                    ),
                    /* @__PURE__ */ (0, import_jsx_runtime189.jsx)(ListPagination, { list: list3, className: "mt-2 justify-end" })
                  ] }) }) }) })
                }
              ) }),
              /* @__PURE__ */ (0, import_jsx_runtime189.jsx)(BulkActionBar, {})
            ]
          }
        )
      }
    ) })
  ] });
}
function BulkActionBar() {
  let { selectedItems, deselectAll } = useSelectedItems(), [barState, setBarState] = (0, import_react136.useState)("none"), hasSelectedMaximum = selectedItems.size >= BULK_ACTION_RUN_LIMIT;
  return /* @__PURE__ */ (0, import_jsx_runtime189.jsx)(import_framer_motion10.AnimatePresence, { children: selectedItems.size > 0 && /* @__PURE__ */ (0, import_jsx_runtime189.jsxs)(
    import_framer_motion10.motion.div,
    {
      initial: { translateY: "100%" },
      animate: { translateY: 0 },
      exit: { translateY: "100%" },
      className: "flex items-center justify-between gap-3 border-t border-grid-bright bg-background-bright pl-4 pr-3",
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime189.jsxs)("div", { className: "flex items-center gap-1.5 text-sm text-text-bright", children: [
          /* @__PURE__ */ (0, import_jsx_runtime189.jsx)(import_lucide_react13.ListChecks, { className: "mr-1 size-7 text-indigo-400" }),
          /* @__PURE__ */ (0, import_jsx_runtime189.jsx)(Header2, { children: "Bulk actions:" }),
          hasSelectedMaximum ? /* @__PURE__ */ (0, import_jsx_runtime189.jsxs)(Paragraph, { className: "text-warning", children: [
            "Maximum of ",
            selectedItems.size,
            " runs selected"
          ] }) : /* @__PURE__ */ (0, import_jsx_runtime189.jsxs)(Paragraph, { className: "", children: [
            selectedItems.size,
            " runs selected"
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime189.jsxs)("div", { className: "flex items-center gap-3", children: [
          /* @__PURE__ */ (0, import_jsx_runtime189.jsx)(
            CancelRuns,
            {
              onOpen: (o) => {
                setBarState(o ? "cancel" : "none");
              }
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime189.jsx)(
            ReplayRuns,
            {
              onOpen: (o) => {
                setBarState(o ? "replay" : "none");
              }
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime189.jsx)(
            Button,
            {
              variant: "tertiary/medium",
              shortcut: { key: "esc", enabledOnInputElements: !0 },
              onClick: () => {
                barState === "none" && deselectAll();
              },
              LeadingIcon: import_lucide_react13.ListX,
              leadingIconClassName: "text-indigo-400 w-6 h-6",
              children: "Clear selection"
            }
          )
        ] })
      ]
    }
  ) });
}
function CancelRuns({ onOpen }) {
  let { selectedItems } = useSelectedItems(), organization = useOrganization(), project = useProject(), failedRedirect = v3RunsPath(organization, project), formAction = "/resources/taskruns/bulk/cancel", isLoading2 = (0, import_react135.useNavigation)().formAction === formAction;
  return /* @__PURE__ */ (0, import_jsx_runtime189.jsxs)(Dialog, { onOpenChange: (o) => onOpen(o), children: [
    /* @__PURE__ */ (0, import_jsx_runtime189.jsx)(DialogTrigger, { asChild: !0, children: /* @__PURE__ */ (0, import_jsx_runtime189.jsx)(
      Button,
      {
        type: "button",
        variant: "tertiary/medium",
        shortcut: { key: "c", enabledOnInputElements: !0 },
        LeadingIcon: import_icons_react2.IconCircleX,
        leadingIconClassName: "text-error w-[1.3rem] h-[1.3rem]",
        children: "Cancel runs"
      }
    ) }),
    /* @__PURE__ */ (0, import_jsx_runtime189.jsxs)(DialogContent, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime189.jsxs)(DialogHeader, { children: [
        "Cancel ",
        selectedItems.size,
        " runs?"
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime189.jsx)(DialogDescription, { className: "pt-2", children: /* @__PURE__ */ (0, import_jsx_runtime189.jsx)(Paragraph, { children: "Canceling these runs will stop them from running. Only runs that are not already finished will be canceled, the others will remain in their existing state." }) }),
      /* @__PURE__ */ (0, import_jsx_runtime189.jsx)(DialogFooter, { children: /* @__PURE__ */ (0, import_jsx_runtime189.jsxs)(import_react135.Form, { action: formAction, method: "post", reloadDocument: !0, children: [
        /* @__PURE__ */ (0, import_jsx_runtime189.jsx)("input", { type: "hidden", name: "failedRedirect", value: failedRedirect }),
        /* @__PURE__ */ (0, import_jsx_runtime189.jsx)("input", { type: "hidden", name: "organizationSlug", value: organization.slug }),
        /* @__PURE__ */ (0, import_jsx_runtime189.jsx)("input", { type: "hidden", name: "projectSlug", value: project.slug }),
        [...selectedItems].map((runId) => /* @__PURE__ */ (0, import_jsx_runtime189.jsx)("input", { type: "hidden", name: "runIds", value: runId }, runId)),
        /* @__PURE__ */ (0, import_jsx_runtime189.jsx)(
          Button,
          {
            type: "submit",
            variant: "danger/medium",
            LeadingIcon: isLoading2 ? "spinner-white" : import_solid71.StopCircleIcon,
            disabled: isLoading2,
            shortcut: { modifiers: ["meta"], key: "enter" },
            children: isLoading2 ? "Canceling..." : `Cancel ${selectedItems.size} runs`
          }
        )
      ] }) })
    ] }, "replay")
  ] });
}
function ReplayRuns({ onOpen }) {
  let { selectedItems } = useSelectedItems(), organization = useOrganization(), project = useProject(), failedRedirect = v3RunsPath(organization, project), formAction = "/resources/taskruns/bulk/replay", isLoading2 = (0, import_react135.useNavigation)().formAction === formAction;
  return /* @__PURE__ */ (0, import_jsx_runtime189.jsxs)(Dialog, { onOpenChange: (o) => onOpen(o), children: [
    /* @__PURE__ */ (0, import_jsx_runtime189.jsx)(DialogTrigger, { asChild: !0, children: /* @__PURE__ */ (0, import_jsx_runtime189.jsx)(
      Button,
      {
        type: "button",
        variant: "tertiary/medium",
        shortcut: { key: "r", enabledOnInputElements: !0 },
        LeadingIcon: import_solid71.ArrowPathIcon,
        leadingIconClassName: "text-blue-400 w-[1.3rem] h-[1.3rem]",
        children: /* @__PURE__ */ (0, import_jsx_runtime189.jsxs)("span", { className: "text-text-bright", children: [
          "Replay ",
          selectedItems.size,
          " runs"
        ] })
      }
    ) }),
    /* @__PURE__ */ (0, import_jsx_runtime189.jsxs)(DialogContent, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime189.jsx)(DialogHeader, { children: "Replay runs?" }),
      /* @__PURE__ */ (0, import_jsx_runtime189.jsx)(DialogDescription, { className: "pt-2", children: /* @__PURE__ */ (0, import_jsx_runtime189.jsx)(Paragraph, { children: "Replaying these runs will create a new run for each with the same payload and environment as the original. It will use the latest version of the code for each task." }) }),
      /* @__PURE__ */ (0, import_jsx_runtime189.jsx)(DialogFooter, { children: /* @__PURE__ */ (0, import_jsx_runtime189.jsxs)(import_react135.Form, { action: formAction, method: "post", reloadDocument: !0, children: [
        /* @__PURE__ */ (0, import_jsx_runtime189.jsx)("input", { type: "hidden", name: "failedRedirect", value: failedRedirect }),
        /* @__PURE__ */ (0, import_jsx_runtime189.jsx)("input", { type: "hidden", name: "organizationSlug", value: organization.slug }),
        /* @__PURE__ */ (0, import_jsx_runtime189.jsx)("input", { type: "hidden", name: "projectSlug", value: project.slug }),
        [...selectedItems].map((runId) => /* @__PURE__ */ (0, import_jsx_runtime189.jsx)("input", { type: "hidden", name: "runIds", value: runId }, runId)),
        /* @__PURE__ */ (0, import_jsx_runtime189.jsx)(
          Button,
          {
            type: "submit",
            variant: "primary/medium",
            LeadingIcon: isLoading2 ? "spinner-white" : import_solid71.ArrowPathIcon,
            disabled: isLoading2,
            shortcut: { modifiers: ["meta"], key: "enter" },
            children: isLoading2 ? "Replaying..." : `Replay ${selectedItems.size} runs`
          }
        )
      ] }) })
    ] }, "replay")
  ] });
}
function CreateFirstTaskInstructions() {
  let organization = useOrganization(), project = useProject();
  return /* @__PURE__ */ (0, import_jsx_runtime189.jsx)(MainCenteredContainer, { className: "max-w-md", children: /* @__PURE__ */ (0, import_jsx_runtime189.jsx)(
    InfoPanel,
    {
      icon: TaskIcon,
      iconClassName: "text-blue-500",
      panelClassName: "max-full",
      title: "Create your first task",
      to: v3ProjectPath(organization, project),
      buttonLabel: "Create a task",
      children: /* @__PURE__ */ (0, import_jsx_runtime189.jsxs)(Paragraph, { variant: "small", children: [
        "Before running a task, you must first create one. Follow the instructions on the",
        " ",
        /* @__PURE__ */ (0, import_jsx_runtime189.jsx)(TextLink, { to: v3ProjectPath(organization, project), children: "Tasks" }),
        " page to create a task, then return here to run it."
      ] })
    }
  ) });
}
function RunTaskInstructions() {
  let organization = useOrganization(), project = useProject();
  return /* @__PURE__ */ (0, import_jsx_runtime189.jsxs)(MainCenteredContainer, { className: "max-w-prose", children: [
    /* @__PURE__ */ (0, import_jsx_runtime189.jsx)(Header1, { className: "mb-6 border-b py-2", children: "How to run your tasks" }),
    /* @__PURE__ */ (0, import_jsx_runtime189.jsx)(StepNumber, { stepNumber: "A", title: "Trigger a test run" }),
    /* @__PURE__ */ (0, import_jsx_runtime189.jsxs)(StepContentContainer, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime189.jsx)(Paragraph, { spacing: !0, children: "You can perform a Run with any payload you want, or use one of our examples on the test page." }),
      /* @__PURE__ */ (0, import_jsx_runtime189.jsx)(
        LinkButton,
        {
          to: v3TestPath(organization, project),
          variant: "primary/medium",
          LeadingIcon: import_solid72.BeakerIcon,
          className: "inline-flex",
          children: "Test"
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime189.jsxs)("div", { className: "mt-6 flex items-center gap-2", children: [
        /* @__PURE__ */ (0, import_jsx_runtime189.jsx)("hr", { className: "w-full" }),
        /* @__PURE__ */ (0, import_jsx_runtime189.jsx)(Paragraph, { variant: "extra-extra-small/dimmed/caps", children: "OR" }),
        /* @__PURE__ */ (0, import_jsx_runtime189.jsx)("hr", { className: "w-full" })
      ] })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime189.jsx)(StepNumber, { stepNumber: "B", title: "Trigger your task for real" }),
    /* @__PURE__ */ (0, import_jsx_runtime189.jsxs)(StepContentContainer, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime189.jsx)(Paragraph, { spacing: !0, children: "Performing a real run depends on the type of Trigger your Task is using." }),
      /* @__PURE__ */ (0, import_jsx_runtime189.jsx)(
        LinkButton,
        {
          to: "https://trigger.dev/docs",
          variant: "primary/medium",
          LeadingIcon: import_solid72.BookOpenIcon,
          className: "inline-flex",
          children: "How to run a task"
        }
      )
    ] })
  ] });
}

// app/routes/_app.orgs.$organizationSlug.projects.$projectParam.events._index/route.tsx
var route_exports58 = {};
__export(route_exports58, {
  default: () => Page37,
  loader: () => loader51
});
var import_react139 = require("@remix-run/react"), import_remix_typedjson50 = require("remix-typedjson");

// app/components/events/EventStatuses.tsx
var import_zod113 = require("zod");
var EventListSearchSchema = import_zod113.z.object({
  cursor: import_zod113.z.string().optional(),
  direction: DirectionSchema.optional(),
  environment: FilterableEnvironment.optional(),
  from: import_zod113.z.string().transform((value) => parseInt(value)).optional(),
  to: import_zod113.z.string().transform((value) => parseInt(value)).optional()
});

// app/components/events/EventsFilters.tsx
var import_react137 = require("@remix-run/react");
var import_react138 = require("react");
var import_solid73 = require("@heroicons/react/20/solid"), import_jsx_runtime190 = require("react/jsx-runtime");
function EventsFilters() {
  let navigate = (0, import_react137.useNavigate)(), location = useOptimisticLocation(), searchParams = new URLSearchParams(location.search), { environment, from, to } = EventListSearchSchema.parse(
    Object.fromEntries(searchParams.entries())
  ), handleFilterChange = (0, import_react138.useCallback)((filterType, value) => {
    value ? searchParams.set(filterType, value) : searchParams.delete(filterType), searchParams.delete("cursor"), searchParams.delete("direction"), navigate(`${location.pathname}?${searchParams.toString()}`);
  }, []), handleTimeFrameChange = (0, import_react138.useCallback)((range) => {
    range.from ? searchParams.set("from", range.from.toString()) : searchParams.delete("from"), range.to ? searchParams.set("to", range.to.toString()) : searchParams.delete("to"), searchParams.delete("cursor"), searchParams.delete("direction"), navigate(`${location.pathname}?${searchParams.toString()}`);
  }, []), handleEnvironmentChange = (value) => {
    handleFilterChange("environment", value === "ALL" ? void 0 : value);
  }, clearFilters = (0, import_react138.useCallback)(() => {
    searchParams.delete("status"), searchParams.delete("environment"), searchParams.delete("from"), searchParams.delete("to"), navigate(`${location.pathname}?${searchParams.toString()}`);
  }, []);
  return /* @__PURE__ */ (0, import_jsx_runtime190.jsxs)("div", { className: "flex flex-row justify-between", children: [
    /* @__PURE__ */ (0, import_jsx_runtime190.jsx)(SelectGroup3, { children: /* @__PURE__ */ (0, import_jsx_runtime190.jsxs)(
      Select3,
      {
        name: "environment",
        value: environment ?? "ALL",
        onValueChange: handleEnvironmentChange,
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime190.jsx)(SelectTrigger2, { size: "minimal", width: "full", children: /* @__PURE__ */ (0, import_jsx_runtime190.jsx)(SelectValue2, { placeholder: "Select environment", className: "ml-2 p-0" }) }),
          /* @__PURE__ */ (0, import_jsx_runtime190.jsxs)(SelectContent, { children: [
            /* @__PURE__ */ (0, import_jsx_runtime190.jsx)(SelectItem3, { value: "ALL", children: /* @__PURE__ */ (0, import_jsx_runtime190.jsx)(
              Paragraph,
              {
                variant: "extra-small",
                className: "pl-0.5 transition group-hover:text-text-bright",
                children: "All environments"
              }
            ) }),
            environmentKeys.map((env6) => /* @__PURE__ */ (0, import_jsx_runtime190.jsx)(SelectItem3, { value: env6, children: /* @__PURE__ */ (0, import_jsx_runtime190.jsxs)("div", { className: "flex items-center gap-x-2", children: [
              /* @__PURE__ */ (0, import_jsx_runtime190.jsx)(EnvironmentLabel, { environment: { type: env6 } }),
              /* @__PURE__ */ (0, import_jsx_runtime190.jsx)(Paragraph, { variant: "extra-small", children: "environment" })
            ] }) }, env6))
          ] })
        ]
      }
    ) }),
    /* @__PURE__ */ (0, import_jsx_runtime190.jsx)(TimeFrameFilter, { from, to, onRangeChanged: handleTimeFrameChange }),
    /* @__PURE__ */ (0, import_jsx_runtime190.jsx)(Button, { variant: "minimal/small", onClick: () => clearFilters(), LeadingIcon: import_solid73.TrashIcon })
  ] });
}

// app/components/events/EventsTable.tsx
var import_outline7 = require("@heroicons/react/24/outline"), import_solid74 = require("@heroicons/react/24/solid");
var import_jsx_runtime191 = require("react/jsx-runtime");
function EventsTable({
  total,
  hasFilters,
  events,
  isLoading: isLoading2 = !1,
  eventsParentPath,
  currentUser
}) {
  return /* @__PURE__ */ (0, import_jsx_runtime191.jsxs)(Table, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime191.jsx)(TableHeader, { children: /* @__PURE__ */ (0, import_jsx_runtime191.jsxs)(TableRow, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime191.jsx)(TableHeaderCell, { children: "Event" }),
      /* @__PURE__ */ (0, import_jsx_runtime191.jsx)(TableHeaderCell, { children: "Env" }),
      /* @__PURE__ */ (0, import_jsx_runtime191.jsx)(TableHeaderCell, { children: "Received Time" }),
      /* @__PURE__ */ (0, import_jsx_runtime191.jsx)(TableHeaderCell, { children: "Delivery Time" }),
      /* @__PURE__ */ (0, import_jsx_runtime191.jsx)(TableHeaderCell, { children: "Delivered" }),
      /* @__PURE__ */ (0, import_jsx_runtime191.jsx)(TableHeaderCell, { children: "Canceled Time" }),
      /* @__PURE__ */ (0, import_jsx_runtime191.jsx)(TableHeaderCell, { children: "Test" }),
      /* @__PURE__ */ (0, import_jsx_runtime191.jsx)(TableHeaderCell, { children: "Runs" }),
      /* @__PURE__ */ (0, import_jsx_runtime191.jsx)(TableHeaderCell, { children: /* @__PURE__ */ (0, import_jsx_runtime191.jsx)("span", { className: "sr-only", children: "Go to page" }) })
    ] }) }),
    /* @__PURE__ */ (0, import_jsx_runtime191.jsxs)(TableBody, { children: [
      total === 0 && !hasFilters ? /* @__PURE__ */ (0, import_jsx_runtime191.jsx)(TableBlankRow, { colSpan: 9, children: /* @__PURE__ */ (0, import_jsx_runtime191.jsx)(NoEvents, { title: "No events found" }) }) : events.length === 0 ? /* @__PURE__ */ (0, import_jsx_runtime191.jsx)(TableBlankRow, { colSpan: 9, children: /* @__PURE__ */ (0, import_jsx_runtime191.jsx)(NoEvents, { title: "No events match your filters" }) }) : events.map((event) => {
        let path2 = `${eventsParentPath}/events/${event.id}`, usernameForEnv = currentUser.id !== event.environment.userId ? event.environment.userName : void 0;
        return /* @__PURE__ */ (0, import_jsx_runtime191.jsxs)(TableRow, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime191.jsx)(TableCell, { to: path2, children: typeof event.name == "string" ? event.name : "-" }),
          /* @__PURE__ */ (0, import_jsx_runtime191.jsx)(TableCell, { to: path2, children: /* @__PURE__ */ (0, import_jsx_runtime191.jsx)(EnvironmentLabel, { environment: event.environment, userName: usernameForEnv }) }),
          /* @__PURE__ */ (0, import_jsx_runtime191.jsx)(TableCell, { to: path2, children: event.createdAt ? /* @__PURE__ */ (0, import_jsx_runtime191.jsx)(DateTime, { date: event.createdAt }) : "\u2013" }),
          /* @__PURE__ */ (0, import_jsx_runtime191.jsx)(TableCell, { to: path2, children: event.deliverAt ? /* @__PURE__ */ (0, import_jsx_runtime191.jsx)(DateTime, { date: event.deliverAt }) : "\u2013" }),
          /* @__PURE__ */ (0, import_jsx_runtime191.jsx)(TableCell, { to: path2, children: event.deliveredAt ? /* @__PURE__ */ (0, import_jsx_runtime191.jsx)(DateTime, { date: event.deliveredAt }) : "\u2013" }),
          /* @__PURE__ */ (0, import_jsx_runtime191.jsx)(TableCell, { to: path2, children: event.cancelledAt ? /* @__PURE__ */ (0, import_jsx_runtime191.jsx)(DateTime, { date: event.cancelledAt }) : "\u2013" }),
          /* @__PURE__ */ (0, import_jsx_runtime191.jsx)(TableCell, { to: path2, children: event.isTest ? /* @__PURE__ */ (0, import_jsx_runtime191.jsx)(import_solid74.CheckIcon, { className: "h-4 w-4 text-charcoal-400" }) : /* @__PURE__ */ (0, import_jsx_runtime191.jsx)(import_outline7.StopIcon, { className: "h-4 w-4 text-charcoal-850" }) }),
          /* @__PURE__ */ (0, import_jsx_runtime191.jsx)(TableCell, { to: path2, children: event.runs }),
          /* @__PURE__ */ (0, import_jsx_runtime191.jsx)(TableCellChevron, { to: path2, isSticky: !0 })
        ] }, event.id);
      }),
      isLoading2 && /* @__PURE__ */ (0, import_jsx_runtime191.jsxs)(
        TableBlankRow,
        {
          colSpan: 8,
          className: "absolute left-0 top-0 flex h-full w-full items-center justify-center gap-2 bg-charcoal-900/90",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime191.jsx)(Spinner, {}),
            " ",
            /* @__PURE__ */ (0, import_jsx_runtime191.jsx)("span", { className: "text-text-dimmed", children: "Loading\u2026" })
          ]
        }
      )
    ] })
  ] });
}
function NoEvents({ title: title2 }) {
  return /* @__PURE__ */ (0, import_jsx_runtime191.jsx)("div", { className: "flex items-center justify-center", children: /* @__PURE__ */ (0, import_jsx_runtime191.jsx)(Paragraph, { className: "w-auto", children: title2 }) });
}

// app/presenters/EventListPresenter.server.ts
var DEFAULT_PAGE_SIZE4 = 20, EventListPresenter = class {
  #prismaClient;
  constructor(prismaClient = prisma) {
    this.#prismaClient = prismaClient;
  }
  async call({
    userId,
    organizationSlug,
    projectSlug,
    filterEnvironment,
    direction = "forward",
    cursor,
    pageSize: pageSize3 = DEFAULT_PAGE_SIZE4,
    from,
    to
  }) {
    let directionMultiplier = direction === "forward" ? 1 : -1, organization = await this.#prismaClient.organization.findFirstOrThrow({
      select: {
        id: !0
      },
      where: {
        slug: organizationSlug,
        members: { some: { userId } }
      }
    }), project = await this.#prismaClient.project.findFirstOrThrow({
      select: {
        id: !0
      },
      where: {
        slug: projectSlug,
        organizationId: organization.id
      }
    }), events = await this.#prismaClient.eventRecord.findMany({
      select: {
        id: !0,
        name: !0,
        deliverAt: !0,
        deliveredAt: !0,
        isTest: !0,
        createdAt: !0,
        cancelledAt: !0,
        environment: {
          select: {
            type: !0,
            slug: !0,
            orgMember: {
              select: {
                user: {
                  select: {
                    id: !0,
                    name: !0,
                    displayName: !0
                  }
                }
              }
            }
          }
        },
        runs: {
          select: {
            id: !0
          }
        }
      },
      where: {
        internal: !1,
        name: {
          notIn: ["trigger.scheduled", "dev.trigger.scheduled"]
        },
        projectId: project.id,
        organizationId: organization.id,
        environment: filterEnvironment ? { type: filterEnvironment } : void 0,
        createdAt: {
          gte: from ? new Date(from).toISOString() : void 0,
          lte: to ? new Date(to).toISOString() : void 0
        }
      },
      orderBy: [{ id: "desc" }],
      //take an extra record to tell if there are more
      take: directionMultiplier * (pageSize3 + 1),
      //skip the cursor if there is one
      skip: cursor ? 1 : 0,
      cursor: cursor ? {
        id: cursor
      } : void 0
    }), hasMore = events.length > pageSize3, next, previous;
    switch (direction) {
      case "forward":
        previous = cursor ? events.at(0)?.id : void 0, hasMore && (next = events[pageSize3 - 1]?.id);
        break;
      case "backward":
        hasMore ? (previous = events[1]?.id, next = events[pageSize3]?.id) : next = events[pageSize3 - 1]?.id;
        break;
    }
    return {
      events: (direction === "backward" && hasMore ? events.slice(1, pageSize3 + 1) : events.slice(0, pageSize3)).map((event) => ({
        id: event.id,
        name: event.name,
        deliverAt: event.deliverAt,
        deliveredAt: event.deliveredAt,
        createdAt: event.createdAt,
        cancelledAt: event.cancelledAt,
        isTest: event.isTest,
        environment: {
          type: event.environment.type,
          slug: event.environment.slug,
          userId: event.environment.orgMember?.user.id,
          userName: getUsername(event.environment.orgMember?.user)
        },
        runs: event.runs.length
      })),
      pagination: {
        next,
        previous
      }
    };
  }
};

// app/routes/_app.orgs.$organizationSlug.projects.$projectParam.events._index/route.tsx
var import_solid75 = require("@heroicons/react/20/solid"), import_jsx_runtime192 = require("react/jsx-runtime"), loader51 = async ({ request, params }) => {
  let userId = await requireUserId(request), { projectParam: projectParam2, organizationSlug } = ProjectParamSchema.parse(params), url = new URL(request.url), s = Object.fromEntries(url.searchParams.entries()), searchParams = EventListSearchSchema.parse(s), list3 = await new EventListPresenter().call({
    userId,
    filterEnvironment: searchParams.environment,
    projectSlug: projectParam2,
    organizationSlug,
    direction: searchParams.direction,
    cursor: searchParams.cursor,
    from: searchParams.from,
    to: searchParams.to,
    pageSize: 25
  });
  return (0, import_remix_typedjson50.typedjson)({
    list: list3
  });
};
function Page37() {
  let { list: list3 } = (0, import_remix_typedjson50.useTypedLoaderData)(), isLoading2 = (0, import_react139.useNavigation)().state !== "idle", organization = useOrganization(), project = useProject(), user = useUser();
  return /* @__PURE__ */ (0, import_jsx_runtime192.jsxs)(PageContainer, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime192.jsxs)(NavBar, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime192.jsx)(PageTitle, { title: `${project.name} events` }),
      /* @__PURE__ */ (0, import_jsx_runtime192.jsx)(PageAccessories, { children: /* @__PURE__ */ (0, import_jsx_runtime192.jsx)(
        LinkButton,
        {
          variant: "minimal/small",
          LeadingIcon: import_solid75.BookOpenIcon,
          to: docsPath("documentation/concepts/triggers/events"),
          children: "Event documentation"
        }
      ) })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime192.jsx)(PageBody, { scrollable: !1, children: /* @__PURE__ */ (0, import_jsx_runtime192.jsxs)("div", { className: "h-full overflow-y-auto p-4 scrollbar-thin scrollbar-track-transparent scrollbar-thumb-charcoal-600", children: [
      /* @__PURE__ */ (0, import_jsx_runtime192.jsxs)("div", { className: "mb-2 flex items-center justify-between gap-x-2", children: [
        /* @__PURE__ */ (0, import_jsx_runtime192.jsx)(EventsFilters, {}),
        /* @__PURE__ */ (0, import_jsx_runtime192.jsx)(ListPagination, { list: list3 })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime192.jsx)(
        EventsTable,
        {
          total: list3.events.length,
          hasFilters: !1,
          events: list3.events,
          isLoading: isLoading2,
          eventsParentPath: projectPath(organization, project),
          currentUser: user
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime192.jsx)(ListPagination, { list: list3, className: "mt-2 justify-end" })
    ] }) })
  ] });
}

// app/routes/_app.orgs.$organizationSlug.projects.$projectParam.setup.express/route.tsx
var route_exports59 = {};
__export(route_exports59, {
  default: () => Page38
});
var import_solid76 = require("@heroicons/react/20/solid");

// app/assets/logos/ExpressLogo.tsx
var import_jsx_runtime193 = require("react/jsx-runtime");
function ExpressLogo({ className }) {
  return /* @__PURE__ */ (0, import_jsx_runtime193.jsxs)("svg", { className, viewBox: "0 0 184 56", fill: "none", xmlns: "http://www.w3.org/2000/svg", children: [
    /* @__PURE__ */ (0, import_jsx_runtime193.jsx)(
      "path",
      {
        d: "M3.11752 45.2234H22.4124V46.0659H2.27495V15.9861H22.2439V16.8286H3.11752V29.9728H21.1065V30.8154H3.11752V45.2234ZM38.6366 24.4118H39.6477L31.7275 34.8597L40.406 46.0659H39.3528L31.1798 35.4916L23.049 46.0659H22.0379L30.6743 34.8597L22.7962 24.4118H23.8916L31.1798 34.2278L38.6366 24.4118ZM42.9432 53.4806H42.1007V24.4118H42.9432V30.4783H43.0275C43.3084 29.5234 43.7156 28.6528 44.2492 27.8664C44.7829 27.0519 45.4148 26.3497 46.145 25.7599C46.8753 25.1701 47.7038 24.7207 48.6306 24.4118C49.5855 24.0748 50.6107 23.9063 51.706 23.9063C53.1384 23.9063 54.4163 24.1871 55.5397 24.7488C56.6912 25.3105 57.6602 26.0969 58.4466 27.108C59.2611 28.1191 59.879 29.3128 60.3003 30.689C60.7215 32.0652 60.9322 33.5678 60.9322 35.1967C60.9322 36.7134 60.7215 38.1598 60.3003 39.536C59.9071 40.9122 59.3173 42.1199 58.5309 43.1591C57.7725 44.1982 56.8176 45.0268 55.6661 45.6446C54.5146 46.2344 53.1946 46.5293 51.706 46.5293C49.403 46.5293 47.5072 45.9395 46.0186 44.7599C44.5301 43.5523 43.5331 41.9654 43.0275 39.9994H42.9432V53.4806ZM51.706 45.7289C53.1946 45.7289 54.4584 45.42 55.4976 44.8021C56.5648 44.1561 57.4355 43.3416 58.1096 42.3586C58.7836 41.3475 59.2751 40.2241 59.5841 38.9883C59.9211 37.7245 60.0896 36.4606 60.0896 35.1967C60.0896 33.7925 59.9071 32.4724 59.5419 31.2366C59.2049 29.9728 58.6853 28.8634 57.9832 27.9085C57.3091 26.9255 56.4385 26.1531 55.3712 25.5914C54.332 25.0297 53.1103 24.7488 51.706 24.7488C50.3298 24.7488 49.094 25.0297 47.9987 25.5914C46.9033 26.1531 45.9765 26.9114 45.2182 27.8664C44.488 28.8213 43.9263 29.9307 43.5331 31.1945C43.1398 32.4584 42.9432 33.7925 42.9432 35.1967C42.9432 38.5951 43.7437 41.2071 45.3446 43.0327C46.9455 44.8302 49.0659 45.7289 51.706 45.7289ZM65.5709 46.0659H64.7284V24.4118H65.5709V29.7621H65.6552C65.8518 28.9477 66.1607 28.1893 66.582 27.4872C67.0033 26.757 67.565 26.125 68.2672 25.5914C68.9693 25.0578 69.7979 24.6365 70.7528 24.3275C71.7358 24.0186 72.8732 23.8782 74.1652 23.9063V24.7488C72.6766 24.6646 71.3847 24.8752 70.2894 25.3808C69.2221 25.8582 68.3374 26.5323 67.6353 27.4029C66.9331 28.2455 66.4135 29.2285 66.0765 30.3519C65.7395 31.4754 65.5709 32.6269 65.5709 33.8065V46.0659ZM75.2095 35.4074C75.2376 36.8678 75.4061 38.23 75.7151 39.4939C76.0521 40.7296 76.5576 41.8109 77.2317 42.7378C77.9058 43.6646 78.7764 44.3948 79.8437 44.9285C80.9109 45.4621 82.2169 45.7289 83.7616 45.7289C86.0366 45.7289 87.9183 45.1391 89.4069 43.9595C90.9235 42.7518 91.8644 40.9543 92.2295 38.567H93.0721C92.7631 41.0948 91.7661 43.0608 90.0809 44.465C88.3958 45.8412 86.3174 46.5293 83.8459 46.5293C82.1608 46.5574 80.7143 46.2906 79.5066 45.7289C78.327 45.1672 77.3581 44.3808 76.5998 43.3697C75.8415 42.3305 75.2797 41.1228 74.9146 39.7466C74.5495 38.3423 74.367 36.8398 74.367 35.2389C74.367 33.4414 74.6338 31.8405 75.1674 30.4362C75.701 29.0319 76.4032 27.8523 77.2738 26.8974C78.1445 25.9144 79.1556 25.1701 80.3071 24.6646C81.4586 24.159 82.6382 23.9063 83.8459 23.9063C85.531 23.9063 86.9775 24.2292 88.1852 24.8752C89.4209 25.5212 90.418 26.3778 91.1763 27.4451C91.9627 28.5123 92.5244 29.7341 92.8614 31.1103C93.2265 32.4865 93.381 33.9188 93.3248 35.4074H75.2095ZM92.4823 34.5648C92.4823 33.2448 92.2997 31.995 91.9346 30.8154C91.5695 29.6077 91.0218 28.5545 90.2916 27.6557C89.5894 26.757 88.7047 26.0548 87.6375 25.5493C86.5702 25.0156 85.3344 24.7488 83.9302 24.7488C82.7506 24.7488 81.6412 24.9735 80.602 25.4229C79.5909 25.8723 78.6922 26.5323 77.9058 27.4029C77.1474 28.2455 76.5296 29.2706 76.0521 30.4783C75.5746 31.686 75.2938 33.0482 75.2095 34.5648H92.4823ZM110.808 30.8154C110.808 29.72 110.64 28.7932 110.303 28.0349C109.966 27.2766 109.488 26.6587 108.87 26.1812C108.252 25.6757 107.508 25.3105 106.637 25.0859C105.795 24.8612 104.854 24.7488 103.815 24.7488C102.298 24.7488 101.105 24.9595 100.234 25.3808C99.3633 25.774 98.7173 26.2374 98.296 26.771C97.8747 27.2766 97.6079 27.7821 97.4956 28.2876C97.3832 28.7932 97.3271 29.1443 97.3271 29.3409C97.3271 30.4081 97.5377 31.2366 97.959 31.8264C98.4084 32.3882 98.9982 32.8235 99.7284 33.1324C100.487 33.4414 101.301 33.7082 102.172 33.9329C103.071 34.1576 104.11 34.4244 105.289 34.7333C106.132 34.958 106.96 35.1967 107.775 35.4495C108.618 35.6742 109.362 35.9972 110.008 36.4185C110.682 36.8398 111.215 37.3734 111.609 38.0194C112.03 38.6653 112.241 39.5079 112.241 40.5471C112.241 41.6424 112.002 42.5693 111.524 43.3276C111.075 44.0859 110.471 44.7038 109.713 45.1812C108.983 45.6587 108.14 45.9957 107.185 46.1923C106.258 46.417 105.332 46.5293 104.405 46.5293C101.512 46.5293 99.3212 45.8974 97.8326 44.6336C96.3721 43.3697 95.6419 41.3756 95.6419 38.6513H96.4845C96.4845 41.0948 97.1586 42.8922 98.5067 44.0438C99.8829 45.1672 101.849 45.7289 104.405 45.7289C105.191 45.7289 105.992 45.6446 106.806 45.4761C107.649 45.2795 108.407 44.9846 109.081 44.5914C109.755 44.1701 110.303 43.6365 110.724 42.9905C111.173 42.3446 111.398 41.5582 111.398 40.6313C111.398 39.6764 111.173 38.9041 110.724 38.3143C110.303 37.7245 109.741 37.247 109.039 36.8819C108.365 36.4887 107.578 36.1797 106.68 35.9551C105.781 35.7304 104.868 35.5057 103.941 35.281C102.902 35.0282 101.989 34.7895 101.203 34.5648C100.416 34.3401 99.7144 34.0874 99.0965 33.8065C98.1977 33.4133 97.5377 32.8656 97.1164 32.1635C96.6951 31.4613 96.4845 30.5205 96.4845 29.3409C96.4845 28.7511 96.6109 28.1332 96.8637 27.4872C97.1164 26.8412 97.5377 26.2514 98.1275 25.7178C98.7173 25.1842 99.4756 24.7488 100.402 24.4118C101.329 24.0748 102.467 23.9063 103.815 23.9063C106.23 23.9063 108.14 24.4539 109.544 25.5493C110.949 26.6446 111.651 28.4 111.651 30.8154H110.808ZM130.309 30.8154C130.309 29.72 130.141 28.7932 129.804 28.0349C129.467 27.2766 128.989 26.6587 128.371 26.1812C127.753 25.6757 127.009 25.3105 126.138 25.0859C125.296 24.8612 124.355 24.7488 123.316 24.7488C121.799 24.7488 120.606 24.9595 119.735 25.3808C118.864 25.774 118.218 26.2374 117.797 26.771C117.376 27.2766 117.109 27.7821 116.997 28.2876C116.884 28.7932 116.828 29.1443 116.828 29.3409C116.828 30.4081 117.039 31.2366 117.46 31.8264C117.909 32.3882 118.499 32.8235 119.229 33.1324C119.988 33.4414 120.802 33.7082 121.673 33.9329C122.572 34.1576 123.611 34.4244 124.79 34.7333C125.633 34.958 126.461 35.1967 127.276 35.4495C128.119 35.6742 128.863 35.9972 129.509 36.4185C130.183 36.8398 130.716 37.3734 131.11 38.0194C131.531 38.6653 131.742 39.5079 131.742 40.5471C131.742 41.6424 131.503 42.5693 131.025 43.3276C130.576 44.0859 129.972 44.7038 129.214 45.1812C128.484 45.6587 127.641 45.9957 126.686 46.1923C125.759 46.417 124.832 46.5293 123.906 46.5293C121.013 46.5293 118.822 45.8974 117.334 44.6336C115.873 43.3697 115.143 41.3756 115.143 38.6513H115.985C115.985 41.0948 116.66 42.8922 118.008 44.0438C119.384 45.1672 121.35 45.7289 123.906 45.7289C124.692 45.7289 125.492 45.6446 126.307 45.4761C127.15 45.2795 127.908 44.9846 128.582 44.5914C129.256 44.1701 129.804 43.6365 130.225 42.9905C130.674 42.3446 130.899 41.5582 130.899 40.6313C130.899 39.6764 130.674 38.9041 130.225 38.3143C129.804 37.7245 129.242 37.247 128.54 36.8819C127.866 36.4887 127.079 36.1797 126.181 35.9551C125.282 35.7304 124.369 35.5057 123.442 35.281C122.403 35.0282 121.49 34.7895 120.704 34.5648C119.917 34.3401 119.215 34.0874 118.597 33.8065C117.699 33.4133 117.039 32.8656 116.617 32.1635C116.196 31.4613 115.985 30.5205 115.985 29.3409C115.985 28.7511 116.112 28.1332 116.365 27.4872C116.617 26.8412 117.039 26.2514 117.628 25.7178C118.218 25.1842 118.977 24.7488 119.903 24.4118C120.83 24.0748 121.968 23.9063 123.316 23.9063C125.731 23.9063 127.641 24.4539 129.045 25.5493C130.45 26.6446 131.152 28.4 131.152 30.8154H130.309Z",
        fill: "white"
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime193.jsx)("rect", { x: "137.747", width: "46.2527", height: "46.2527", fill: "#F7DF1E" }),
    /* @__PURE__ */ (0, import_jsx_runtime193.jsx)(
      "path",
      {
        d: "M156.217 42.9784C152.657 42.9784 150.591 41.1348 149.542 38.9098L153.166 36.7166C153.865 37.9562 154.501 39.0052 156.026 39.0052C157.488 39.0052 158.41 38.433 158.41 36.208V21.078H162.86V36.2716C162.86 40.8805 160.158 42.9784 156.217 42.9784ZM173.384 42.9784C169.252 42.9784 166.582 41.0077 165.279 38.433L168.903 36.3352C169.856 37.8927 171.096 39.037 173.289 39.037C175.133 39.037 176.309 38.1152 176.309 36.8437C176.309 35.318 175.101 34.7777 173.066 33.8877L171.954 33.4109C168.744 32.0441 166.614 30.3277 166.614 26.7041C166.614 23.3666 169.157 20.8238 173.13 20.8238C175.959 20.8238 177.993 21.8091 179.455 24.3837L175.991 26.6087C175.228 25.242 174.401 24.7016 173.13 24.7016C171.827 24.7016 171 25.528 171 26.6087C171 27.9437 171.827 28.4841 173.734 29.3105L174.846 29.7873C178.629 31.4084 180.759 33.0612 180.759 36.7802C180.759 40.7852 177.612 42.9784 173.384 42.9784Z",
        fill: "black"
      }
    )
  ] });
}

// app/routes/_app.orgs.$organizationSlug.projects.$projectParam.setup.express/route.tsx
var import_jsx_runtime194 = require("react/jsx-runtime");
function Page38() {
  let organization = useOrganization(), project = useProject();
  useProjectSetupComplete();
  let { apiKey } = useV2OnboardingApiKey();
  return /* @__PURE__ */ (0, import_jsx_runtime194.jsxs)("div", { className: "mx-auto max-w-3xl pt-16", children: [
    /* @__PURE__ */ (0, import_jsx_runtime194.jsx)("div", { className: "mb-12 grid place-items-center", children: /* @__PURE__ */ (0, import_jsx_runtime194.jsx)(ExpressLogo, { className: "w-64" }) }),
    /* @__PURE__ */ (0, import_jsx_runtime194.jsxs)("div", { className: "flex items-center justify-between", children: [
      /* @__PURE__ */ (0, import_jsx_runtime194.jsx)(Header1, { spacing: !0, className: "text-text-bright", children: "Get setup in 5 minutes" }),
      /* @__PURE__ */ (0, import_jsx_runtime194.jsxs)("div", { className: "flex items-center gap-2", children: [
        /* @__PURE__ */ (0, import_jsx_runtime194.jsx)(
          LinkButton,
          {
            to: projectSetupPath(organization, project),
            variant: "tertiary/small",
            LeadingIcon: import_solid76.Squares2X2Icon,
            children: "Choose a different framework"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime194.jsx)(
          Feedback,
          {
            button: /* @__PURE__ */ (0, import_jsx_runtime194.jsx)(Button, { variant: "tertiary/small", LeadingIcon: import_solid76.ChatBubbleLeftRightIcon, children: "I'm stuck!" }),
            defaultValue: "help"
          }
        )
      ] })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime194.jsxs)("div", { children: [
      /* @__PURE__ */ (0, import_jsx_runtime194.jsx)(
        Callout,
        {
          variant: "info",
          to: "https://github.com/triggerdotdev/trigger.dev/discussions/430",
          className: "mb-8",
          children: "Trigger.dev has full support for serverless. We will be adding support for long-running servers soon."
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime194.jsxs)("div", { children: [
        /* @__PURE__ */ (0, import_jsx_runtime194.jsx)(
          StepNumber,
          {
            stepNumber: "1",
            title: "Manually set up Trigger.dev in your existing Express project"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime194.jsxs)(StepContentContainer, { className: "flex flex-col gap-2", children: [
          /* @__PURE__ */ (0, import_jsx_runtime194.jsx)(Paragraph, { className: "mt-2", children: "Copy your server API Key to your clipboard:" }),
          /* @__PURE__ */ (0, import_jsx_runtime194.jsx)("div", { className: "mb-2 flex w-full items-center justify-between", children: /* @__PURE__ */ (0, import_jsx_runtime194.jsx)(
            ClipboardField,
            {
              secure: !0,
              className: "w-fit",
              value: apiKey,
              variant: "secondary/medium",
              icon: /* @__PURE__ */ (0, import_jsx_runtime194.jsx)(Badge, { variant: "outline", children: "Server" })
            }
          ) }),
          /* @__PURE__ */ (0, import_jsx_runtime194.jsx)(Paragraph, { children: "Now follow this guide:" }),
          /* @__PURE__ */ (0, import_jsx_runtime194.jsx)(
            LinkButton,
            {
              to: "https://trigger.dev/docs/documentation/guides/manual/express",
              variant: "primary/medium",
              TrailingIcon: "external-link",
              children: "Manual installation guide"
            }
          )
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime194.jsx)(StepNumber, { stepNumber: "2", title: "Run your Express app" }),
        /* @__PURE__ */ (0, import_jsx_runtime194.jsxs)(StepContentContainer, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime194.jsx)(RunDevCommand, {}),
          /* @__PURE__ */ (0, import_jsx_runtime194.jsx)(Callout, { variant: "info", children: "You may be using the `start` script instead, in which case substitute `dev` in the above commands." })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime194.jsx)(StepNumber, { stepNumber: "3", title: "Run the CLI 'dev' command" }),
        /* @__PURE__ */ (0, import_jsx_runtime194.jsx)(StepContentContainer, { children: /* @__PURE__ */ (0, import_jsx_runtime194.jsx)(TriggerDevStep, {}) }),
        /* @__PURE__ */ (0, import_jsx_runtime194.jsx)(StepNumber, { stepNumber: "6", title: "Wait for Jobs", displaySpinner: !0 }),
        /* @__PURE__ */ (0, import_jsx_runtime194.jsx)(StepContentContainer, { children: /* @__PURE__ */ (0, import_jsx_runtime194.jsx)(Paragraph, { children: "This page will automatically refresh." }) })
      ] })
    ] })
  ] });
}

// app/routes/_app.orgs.$organizationSlug.projects.$projectParam.setup.fastify/route.tsx
var route_exports60 = {};
__export(route_exports60, {
  default: () => Page39
});

// app/assets/logos/FastifyLogo.tsx
var import_jsx_runtime195 = require("react/jsx-runtime");
function FastifyLogo({ className }) {
  return /* @__PURE__ */ (0, import_jsx_runtime195.jsxs)("svg", { className, viewBox: "0 0 184 55", fill: "none", xmlns: "http://www.w3.org/2000/svg", children: [
    /* @__PURE__ */ (0, import_jsx_runtime195.jsxs)("g", { clipPath: "url(#clip0_5342_22458)", children: [
      /* @__PURE__ */ (0, import_jsx_runtime195.jsx)(
        "path",
        {
          d: "M181.319 7.73806L184 0.829078L183.889 0.386903L157.47 7.35116C160.288 3.26104 159.321 0 159.321 0C159.321 0 150.892 5.38901 144.508 5.25083C138.124 5.11265 136.079 3.39922 126.296 6.52208C116.513 9.64494 113.749 19.207 110.903 21.2797C108.084 23.3247 99.213 30.1508 99.213 30.1508L107.227 27.5807C107.227 27.5807 104.961 29.7363 100.291 36.0096V36.0372C101.037 37.0874 104.326 41.4263 107.587 40.4866C107.946 40.3761 108.36 40.1826 108.83 39.9615C110.295 40.7906 112.257 41.5921 114.385 41.8132C114.385 41.8132 112.948 40.155 111.732 38.2205L112.727 37.5849L112.561 37.6954L115.629 38.8008L115.297 35.9267H115.325L118.309 37.0321L117.95 34.4067L119.083 33.854L122.206 22.0258L135.14 13.1823L134.117 15.7801C131.492 22.2193 126.573 23.7393 126.573 23.7393L124.527 24.5407C122.98 26.337 122.344 26.7792 121.819 32.8591C123.063 32.5275 124.223 32.4722 125.301 32.7486C130.828 34.2409 132.735 40.9012 131.243 42.7528C130.884 43.195 129.999 43.9964 128.866 44.9084H126.628L126.6 46.7324L126.379 46.9258H124.085L124.058 48.6945L123.45 49.1367C121.322 49.1919 118.586 47.3127 118.586 47.3127C118.613 49.0261 120.023 51.6515 120.023 51.6515L120.272 51.5134L120.05 51.6792C120.05 51.6792 125.799 55.4929 129.419 54.0835C132.625 52.8123 140.943 46.2625 148.129 43.1673L169.85 37.419L172.725 30.0126L156.171 34.3791V27.6912L175.599 22.5786L178.473 15.1445L156.171 21.0309V14.3707L181.319 7.73806ZM141.883 21.86L147.051 20.5059L147.106 20.7546L145.503 24.9276L140.169 26.337L141.883 21.86ZM143.652 30.7864L138.318 32.1959L140.059 27.7188L145.199 26.3647L145.282 26.6134L143.652 30.7864ZM150.616 29.2941L145.282 30.7035L147.023 26.2265L152.163 24.8723L152.246 25.1211L150.616 29.2941Z",
          fill: "white"
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime195.jsx)(
        "path",
        {
          d: "M4.00721 16.7197L4.17302 15.863C4.64284 13.3758 5.58246 11.2478 7.32352 9.64495C8.59477 8.4566 10.474 7.73807 12.602 7.73807C13.9561 7.73807 14.9787 7.93152 15.6143 8.15261L14.426 12.2427C13.9285 12.0769 13.4587 11.994 12.7678 11.994C10.8609 11.994 9.75548 13.9838 9.39621 15.8078L9.2304 16.7197H13.2652L12.5467 20.4506H8.59477L5.3061 37.5296H0L3.26104 20.4506",
          fill: "white"
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime195.jsx)(
        "path",
        {
          d: "M21.4178 37.5296L21.5837 34.0475H21.4455C19.7873 36.8111 17.7975 37.8612 16.1394 37.8612C13.0994 37.8612 11.6071 35.2634 11.6071 31.6155C11.6071 25.3145 14.7576 16.3605 23.7116 16.3605C25.7843 16.3605 27.8846 16.7197 29.1559 17.2172L26.8621 28.7966C26.3647 31.2286 25.9778 35.2634 26.0054 37.5296H21.4178ZM23.3247 20.4506C22.9102 20.3677 22.5233 20.34 22.2193 20.34C18.7372 20.34 16.8579 27.2767 16.8026 30.3443C16.8026 32.1682 17.079 33.4947 18.3779 33.4947C19.8426 33.4947 21.1968 31.0904 21.9706 27.3043L23.3247 20.4506Z",
          fill: "white"
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime195.jsx)(
        "path",
        {
          d: "M29.7915 32.9697C30.6482 33.4395 31.6708 33.854 33.1631 33.8264C34.7107 33.7711 35.5398 32.8038 35.5398 31.4773C35.5398 30.3166 34.9871 29.5152 33.55 28.3821C31.7537 26.9174 30.897 25.0934 30.897 23.2971C30.897 19.4833 33.8816 16.3605 38.6074 16.3605C40.459 16.3605 41.7579 16.6921 42.5317 17.1343L41.371 21.0033C40.7906 20.6717 39.7957 20.3677 38.9114 20.3677C37.198 20.3677 36.1478 21.252 36.1478 22.6615C36.1478 23.7393 36.7558 24.3749 37.723 25.1763C40.0721 26.9727 40.8459 29.0177 40.8459 30.6206C40.8459 35.2358 37.6401 37.7783 32.8591 37.7783C30.9522 37.7783 29.2388 37.2256 28.5203 36.7282L29.7915 32.9697Z",
          fill: "white"
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime195.jsx)(
        "path",
        {
          d: "M53.3097 11.082L52.2319 16.7197H60.4121L59.7212 20.4506H51.5134L49.6894 30.1232C49.5512 30.8417 49.5236 31.4773 49.5236 31.8642C49.5236 33.1355 50.1592 33.6053 51.1265 33.6053C51.5134 33.6053 52.0661 33.6053 52.5635 33.5224L51.9279 37.5296C50.9606 37.7783 49.7723 37.8612 48.7498 37.8612C45.544 37.8612 43.9688 36.0925 43.9688 33.2736C43.9688 32.334 44.1346 31.1733 44.3557 30.1508L46.1796 20.4506H43.7753L44.4938 16.6921H46.9258L47.7549 12.4085L53.3097 11.082Z",
          fill: "white"
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime195.jsx)(
        "path",
        {
          d: "M54.581 37.5296L58.5882 16.7197H63.8943L59.9147 37.5296H54.581ZM59.5554 11.386C59.5554 9.83838 60.6609 8.09732 62.5401 8.09732C64.2812 8.09732 65.1103 9.42384 65.055 10.8609C64.9997 12.9889 63.5626 14.2049 61.9874 14.2049C60.274 14.2049 59.5278 12.9612 59.5554 11.386Z",
          fill: "white"
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime195.jsx)(
        "path",
        {
          d: "M67.2106 16.7197L67.3764 15.863C67.8462 13.3758 68.7858 11.2478 70.5269 9.64495C71.7981 8.4566 73.6774 7.73807 75.8054 7.73807C77.1595 7.73807 78.182 7.93152 78.8177 8.15261L77.6293 12.2427C77.1319 12.0769 76.6621 11.994 75.9712 11.994C74.0643 11.994 72.9589 13.9838 72.6272 15.8078L72.4338 16.7197H78.6242L77.9057 20.4506H71.7981L68.5371 37.5296H63.2034L66.492 20.4506",
          fill: "white"
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime195.jsx)(
        "path",
        {
          d: "M81.9405 16.7197L82.0787 26.7239C82.1063 28.6861 82.1616 30.1232 82.1063 31.6431H82.1892C82.6314 29.9574 83.046 28.5479 83.7645 26.337L86.915 16.6921H92.2764L85.4779 33.1078C83.4329 37.8612 81.0838 41.8684 78.5413 44.2175C77.2977 45.3506 75.8606 46.2625 74.9763 46.6218L72.8483 42.283C73.7603 41.8132 74.7552 41.2604 75.6119 40.5972C76.8002 39.6023 77.9333 38.4139 78.4584 37.2532C78.5413 36.9769 78.6242 36.7558 78.5689 36.3413L76.3581 16.6921H81.9405V16.7197Z",
          fill: "white"
        }
      )
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime195.jsx)("defs", { children: /* @__PURE__ */ (0, import_jsx_runtime195.jsx)("clipPath", { id: "clip0_5342_22458", children: /* @__PURE__ */ (0, import_jsx_runtime195.jsx)("rect", { width: "184", height: "54.4151", fill: "white" }) }) })
  ] });
}

// app/components/frameworks/FrameworkComingSoon.tsx
var import_solid77 = require("@heroicons/react/20/solid"), import_companyicons5 = require("@trigger.dev/companyicons");
var import_jsx_runtime196 = require("react/jsx-runtime");
function FrameworkComingSoon({
  frameworkName,
  githubIssueUrl,
  githubIssueNumber,
  children
}) {
  let organization = useOrganization(), project = useProject();
  return /* @__PURE__ */ (0, import_jsx_runtime196.jsxs)("div", { className: "mx-auto max-w-3xl pt-16", children: [
    /* @__PURE__ */ (0, import_jsx_runtime196.jsx)("div", { className: "mb-6 grid place-items-center pb-6", children }),
    /* @__PURE__ */ (0, import_jsx_runtime196.jsxs)("div", { className: "flex items-center justify-between", children: [
      /* @__PURE__ */ (0, import_jsx_runtime196.jsxs)(Header1, { spacing: !0, children: [
        frameworkName,
        " is coming soon!"
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime196.jsx)(
        LinkButton,
        {
          to: projectSetupPath(organization, project),
          variant: "tertiary/small",
          LeadingIcon: import_solid77.Squares2X2Icon,
          children: "Choose a different framework"
        }
      )
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime196.jsxs)(Paragraph, { spacing: !0, className: "border-b border-charcoal-800 pb-4", children: [
      "We're working hard to bring support for ",
      frameworkName,
      " in Trigger.dev. Follow along with the GitHub issue or contribute and help us bring it to Trigger.dev faster."
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime196.jsxs)(
      "a",
      {
        href: githubIssueUrl,
        target: "_blank",
        className: "bg-bright group mt-4 block max-w-sm rounded-md px-10 py-8 transition hover:bg-charcoal-100",
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime196.jsx)(Paragraph, { spacing: !0, children: "triggerdotdev/trigger.dev" }),
          /* @__PURE__ */ (0, import_jsx_runtime196.jsxs)("h2", { className: "text-2xl font-semibold text-black", children: [
            /* @__PURE__ */ (0, import_jsx_runtime196.jsxs)("span", { className: "mr-1 font-normal text-text-dimmed", children: [
              "#",
              githubIssueNumber
            ] }),
            "Framework: support for ",
            frameworkName
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime196.jsxs)("div", { className: "mt-4 flex items-center gap-1.5", children: [
            /* @__PURE__ */ (0, import_jsx_runtime196.jsx)(import_companyicons5.GitHubDarkIcon, { className: "h-4 w-4" }),
            /* @__PURE__ */ (0, import_jsx_runtime196.jsx)(Paragraph, { variant: "small", children: "View on GitHub" }),
            /* @__PURE__ */ (0, import_jsx_runtime196.jsx)(
              NamedIcon,
              {
                name: "arrow-right",
                className: "h-4 w-4 text-text-dimmed transition group-hover:translate-x-1"
              }
            )
          ] })
        ]
      }
    )
  ] });
}

// app/routes/_app.orgs.$organizationSlug.projects.$projectParam.setup.fastify/route.tsx
var import_jsx_runtime197 = require("react/jsx-runtime");
function Page39() {
  return /* @__PURE__ */ (0, import_jsx_runtime197.jsx)(
    FrameworkComingSoon,
    {
      frameworkName: "Fastify",
      githubIssueUrl: "https://github.com/triggerdotdev/trigger.dev/issues/450",
      githubIssueNumber: 450,
      children: /* @__PURE__ */ (0, import_jsx_runtime197.jsx)(FastifyLogo, { className: "w-56" })
    }
  );
}

// app/routes/_app.orgs.$organizationSlug.projects.$projectParam.setup.redwood/route.tsx
var route_exports61 = {};
__export(route_exports61, {
  default: () => Page40
});

// app/assets/logos/RedwoodLogo.tsx
var import_jsx_runtime198 = require("react/jsx-runtime");
function RedwoodLogo({ className }) {
  return /* @__PURE__ */ (0, import_jsx_runtime198.jsxs)("svg", { className, viewBox: "0 0 184 34", fill: "none", xmlns: "http://www.w3.org/2000/svg", children: [
    /* @__PURE__ */ (0, import_jsx_runtime198.jsxs)("g", { clipPath: "url(#clip0_5336_22419)", children: [
      /* @__PURE__ */ (0, import_jsx_runtime198.jsx)(
        "path",
        {
          fillRule: "evenodd",
          clipRule: "evenodd",
          d: "M14.2919 1.20543C13.0487 1.83372 10.4288 3.0562 9.00971 4.03185C7.59067 5.0075 7.76659 5.91672 7.14548 6.54502C6.52437 7.17331 4.65924 8.74314 3.41701 9.68469C2.17389 10.6271 2.48445 13.1403 2.17389 14.0827C1.86333 15.0243 1.24222 17.2224 0.931665 18.1648C0.620212 19.1073 1.55278 20.3639 2.17389 21.6205C2.7959 22.8761 4.34868 26.3309 4.97069 27.5865C5.5918 28.8431 7.45693 28.2148 9.00971 29.4714C10.5625 30.728 12.7382 32.2987 14.2919 33.2403C15.8446 34.1827 16.4667 34.1827 18.0203 33.2403C19.5731 32.2978 21.7488 30.7271 23.3025 29.4705C24.8553 28.2148 26.7204 28.8431 27.3415 27.5865C27.9626 26.33 29.5163 22.8761 30.1383 21.6196C30.7594 20.363 31.6911 19.1064 31.3805 18.1648C31.07 17.2224 30.4489 15.0234 30.1383 14.0818C29.8277 13.1394 30.1383 10.6271 28.8952 9.68469C27.6521 8.74225 26.2097 7.54311 25.1667 6.54412C24.1237 5.54513 24.5456 4.97339 23.3025 4.03095C22.0594 3.08941 19.2635 1.83372 18.0203 1.20543C16.7772 0.577134 15.5341 0.577134 14.2919 1.20543Z",
          fill: "white"
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime198.jsx)(
        "path",
        {
          fillRule: "evenodd",
          clipRule: "evenodd",
          d: "M9.90369 6.65452L15.719 10.6442C15.8498 10.732 16.0031 10.7803 16.1606 10.7833C16.3183 10.7819 16.4721 10.7334 16.6022 10.6442L22.422 6.64105C22.5336 6.56057 22.6226 6.45263 22.6804 6.32767C22.7381 6.20271 22.7626 6.06497 22.7515 5.92778C22.7404 5.79058 22.6941 5.65857 22.617 5.54452C22.5399 5.43047 22.4347 5.33824 22.3116 5.27676L16.4963 2.38302C16.3876 2.32989 16.2681 2.30228 16.1471 2.30228C16.0261 2.30228 15.9067 2.32989 15.798 2.38302L9.99973 5.27676C9.87423 5.33838 9.7671 5.43186 9.68905 5.54785C9.611 5.66384 9.56475 5.79829 9.55494 5.93775C9.54513 6.07722 9.57209 6.21682 9.63313 6.3426C9.69418 6.46838 9.78716 6.57593 9.90279 6.65452H9.90369ZM18.1361 11.8963C18.136 12.0263 18.1673 12.1544 18.2273 12.2697C18.2873 12.385 18.3743 12.4841 18.4808 12.5587L23.1427 15.7612C23.2874 15.8616 23.4618 15.91 23.6375 15.8986C23.8132 15.8872 23.9798 15.8166 24.1103 15.6983L28.021 12.1826C28.1073 12.1049 28.1758 12.0093 28.2215 11.9024C28.2672 11.7956 28.2891 11.6801 28.2857 11.5639C28.2823 11.4478 28.2536 11.3338 28.2017 11.2298C28.1498 11.1258 28.0759 11.0344 27.9851 10.9619L24.2512 7.96047C24.1195 7.85511 23.9575 7.79477 23.789 7.7883C23.6205 7.78184 23.4544 7.8296 23.315 7.92457L18.4808 11.2482C18.3761 11.3214 18.2903 11.4184 18.2304 11.5312C18.1705 11.6441 18.1382 11.7686 18.1361 11.8963ZM6.54053 16.253C6.72902 16.4236 6.82596 16.6749 6.80082 16.9289C6.78911 17.0545 6.74726 17.1754 6.67881 17.2813C6.61037 17.3873 6.51736 17.4751 6.40769 17.5374L3.62436 19.215C3.34162 19.3837 2.98529 19.3595 2.72859 19.1531C2.47189 18.9466 2.36687 18.6011 2.4665 18.2842L3.496 15.0279C3.53514 14.9015 3.60536 14.787 3.70023 14.6948C3.7951 14.6025 3.91159 14.5356 4.03903 14.5001C4.16599 14.4629 4.30046 14.4594 4.4292 14.4899C4.55793 14.5204 4.6765 14.584 4.77323 14.6742L6.54053 16.253ZM21.6402 16.5941L16.6067 13.1313C16.4763 13.043 16.3225 12.9958 16.1651 12.9958C16.0076 12.9958 15.8538 13.043 15.7235 13.1313L10.69 16.5932C10.5908 16.6626 10.5084 16.7532 10.4488 16.8585C10.3891 16.9638 10.3538 17.0811 10.3453 17.2018C10.3386 17.3234 10.3589 17.4451 10.4047 17.558C10.4505 17.671 10.5206 17.7724 10.6101 17.8552L15.6391 22.3771C15.7834 22.5072 15.9708 22.5792 16.1651 22.5792C16.3594 22.5792 16.5468 22.5072 16.691 22.3771L21.7192 17.8543C21.8088 17.7721 21.8787 17.6707 21.9238 17.5577C21.9689 17.4448 21.9879 17.3231 21.9795 17.2018C21.973 17.0812 21.939 16.9637 21.8802 16.8583C21.8214 16.7528 21.7393 16.6621 21.6402 16.5932V16.5941ZM8.21538 15.6983L4.3083 12.1826C4.2212 12.1029 4.15237 12.0054 4.10651 11.8966C4.06065 11.7879 4.03886 11.6705 4.04262 11.5525C4.04447 11.4362 4.07199 11.3218 4.12319 11.2174C4.17439 11.1129 4.24802 11.0211 4.33881 10.9484L8.07267 7.92905C8.20536 7.82364 8.36822 7.76332 8.53756 7.75686C8.7069 7.7504 8.87388 7.79815 9.01421 7.89315L13.844 11.2168C14.0684 11.3649 14.203 11.6171 14.203 11.8882C14.203 12.1593 14.0684 12.4106 13.844 12.5587L9.18654 15.7612C8.88586 15.9676 8.48734 15.9407 8.21538 15.6983ZM28.2732 20.7489L24.2961 18.356C24.1524 18.2689 23.9844 18.2306 23.8171 18.2467C23.6499 18.2629 23.4923 18.3327 23.368 18.4458L18.5068 22.8061C18.406 22.8972 18.3299 23.0122 18.2855 23.1405C18.2411 23.2689 18.2298 23.4064 18.2527 23.5402C18.2756 23.6741 18.332 23.8 18.4166 23.9063C18.5012 24.0125 18.6113 24.0957 18.7366 24.148L25.48 26.8945C25.6703 26.9702 25.8825 26.9691 26.0721 26.8914C26.2616 26.8137 26.4136 26.6655 26.496 26.478L28.5873 21.773C28.6695 21.5935 28.6829 21.39 28.625 21.2012C28.5671 21.0125 28.4419 20.8515 28.2732 20.7489ZM28.8252 15.0279L29.8547 18.2842H29.8457C29.8832 18.4043 29.8922 18.5315 29.872 18.6557C29.8517 18.7799 29.8028 18.8976 29.729 18.9996C29.6138 19.1591 29.443 19.2698 29.2503 19.3096C29.0576 19.3495 28.8569 19.3157 28.6878 19.215L25.9 17.5365C25.7926 17.4731 25.7019 17.3848 25.6357 17.2791C25.5695 17.1734 25.5296 17.0533 25.5195 16.9289C25.5064 16.8037 25.5232 16.6772 25.5684 16.5597C25.6136 16.4422 25.6861 16.3371 25.7797 16.253L27.5479 14.6697C27.7481 14.4902 28.0237 14.4247 28.2813 14.4956C28.4088 14.5325 28.5252 14.6005 28.6202 14.6933C28.7151 14.7862 28.7855 14.9011 28.8252 15.0279ZM14.0738 23.5394C14.0973 23.4059 14.0866 23.2686 14.0426 23.1404C13.9987 23.0121 13.9229 22.8971 13.8224 22.8061L8.96215 18.4449C8.83782 18.3318 8.68028 18.262 8.51302 18.2458C8.34576 18.2297 8.17776 18.268 8.03407 18.3551L4.05788 20.7489C3.8909 20.852 3.76674 21.0119 3.70821 21.1992C3.64967 21.3866 3.66069 21.5887 3.73924 21.7685L5.83325 26.4745C5.91515 26.6626 6.06728 26.8114 6.25724 26.889C6.4472 26.9666 6.65996 26.967 6.85019 26.89L13.5891 24.1435C13.7145 24.0924 13.8249 24.0102 13.9098 23.9047C13.9948 23.7992 14.0515 23.6738 14.0747 23.5403L14.0738 23.5394ZM16.4604 24.8813L21.8691 27.0821C21.9995 27.1388 22.1124 27.2292 22.1962 27.344C22.28 27.4589 22.3316 27.5941 22.3457 27.7355C22.3627 27.8787 22.3405 28.0239 22.2813 28.1554C22.2222 28.287 22.1284 28.4 22.01 28.4823L16.5977 32.2619C16.4682 32.3537 16.3139 32.4038 16.1552 32.4055C15.997 32.4028 15.8432 32.3528 15.7136 32.2619L10.3049 28.4832C10.1859 28.4012 10.0914 28.2886 10.0313 28.1572C9.9712 28.0258 9.94784 27.8806 9.96367 27.737C9.97951 27.5934 10.0339 27.4567 10.1212 27.3416C10.2085 27.2264 10.3253 27.1371 10.4593 27.083L15.868 24.8822C16.0581 24.8059 16.2703 24.805 16.4604 24.8813Z",
          fill: "#BF4722"
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime198.jsx)("mask", { id: "mask0_5336_22419", maskUnits: "userSpaceOnUse", x: "39", y: "6", width: "145", height: "29", children: /* @__PURE__ */ (0, import_jsx_runtime198.jsx)("path", { d: "M39.4927 6.26048H184V34.0849H39.4927V6.26048Z", fill: "white" }) }),
      /* @__PURE__ */ (0, import_jsx_runtime198.jsxs)("g", { mask: "url(#mask0_5336_22419)", children: [
        /* @__PURE__ */ (0, import_jsx_runtime198.jsx)(
          "path",
          {
            d: "M43.8692 16.6085H45.2802C46.6642 16.6085 47.6856 16.3805 48.3435 15.9263C49.0023 15.4713 49.3317 14.7559 49.3317 13.7811C49.3317 12.8154 48.9934 12.1287 48.3157 11.7203C47.647 11.3111 46.6076 11.1073 45.1958 11.1073H43.8692V16.6085ZM43.8692 20.1179V27.9303H39.4927V7.57002H45.5063C48.3112 7.57002 50.3864 8.07625 51.7318 9.0878C53.0782 10.0904 53.7504 11.618 53.7504 13.6698C53.7504 14.8672 53.4165 15.9353 52.7479 16.8732C52.0801 17.8013 51.134 18.5301 49.9116 19.0597C53.0171 23.6373 55.0402 26.5938 55.9809 27.9303H51.1251L46.1975 20.1179H43.8692Z",
            fill: "white"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime198.jsx)(
          "path",
          {
            d: "M62.3069 15.0907C61.3941 15.0907 60.6787 15.3779 60.1617 15.9541C59.6429 16.5196 59.3467 17.3274 59.2713 18.3776H65.3137C65.2949 17.3274 65.0175 16.5196 64.4808 15.9541C63.944 15.3779 63.2197 15.0907 62.3069 15.0907ZM62.9136 28.2094C60.3735 28.2094 58.3872 27.5183 56.9565 26.1343C55.5258 24.7511 54.8114 22.7918 54.8114 20.257C54.8114 17.6478 55.4693 15.6337 56.7869 14.2129C58.1144 12.7831 59.9445 12.0677 62.2782 12.0677C64.5086 12.0677 66.2454 12.6951 67.4876 13.9481C68.7298 15.202 69.3509 16.9334 69.3509 19.1432V21.204H59.1726C59.2202 22.4112 59.5819 23.3536 60.2596 24.0313C60.9372 24.709 61.8877 25.0482 63.1111 25.0482C64.0625 25.0482 64.9601 24.9504 65.8074 24.7556C66.7219 24.537 67.6114 24.2241 68.4615 23.8222V27.109C67.7084 27.4806 66.9042 27.7544 66.047 27.9303C65.1916 28.1161 64.1469 28.2094 62.9136 28.2094ZM76.693 28.2094C74.8386 28.2094 73.381 27.4995 72.3165 26.0786C71.2627 24.6578 70.7359 22.6894 70.7359 20.1736C70.7359 17.62 71.2717 15.6337 72.3452 14.2138C73.4268 12.7831 74.914 12.0686 76.8061 12.0686C78.7915 12.0686 80.3066 12.8297 81.3513 14.352H81.4923C81.2768 13.1914 81.1682 12.1566 81.1682 11.2464V6.26048H85.4873V27.9303H82.1843L81.3513 25.9108H81.1682C80.1899 27.4429 78.6972 28.2094 76.693 28.2094ZM78.2036 24.8256C79.304 24.8256 80.1091 24.5097 80.618 23.8778C81.135 23.2468 81.4169 22.1742 81.4644 20.661V20.2014C81.4644 18.5301 81.2005 17.3328 80.6737 16.6085C80.1558 15.8841 79.3094 15.5224 78.1327 15.5224C77.1723 15.5224 76.4246 15.9263 75.8888 16.7341C75.361 17.533 75.0971 18.6971 75.0971 20.2292C75.0971 21.7614 75.3664 22.9129 75.9022 23.683C76.439 24.4442 77.2055 24.8256 78.2036 24.8256ZM101.808 27.9303L100.593 22.4857L98.9561 15.6059H98.8574L95.9771 27.9303H91.3466L86.8579 12.3603H91.1491L92.9703 19.2545C93.262 20.4895 93.5582 22.1931 93.8597 24.3652H93.9441C93.9818 23.6597 94.147 22.5413 94.4387 21.0092L94.664 19.8253L96.6126 12.3603H101.355L103.205 19.8253L103.374 20.731C103.553 21.593 103.699 22.4616 103.812 23.3348C103.877 23.762 103.915 24.1058 103.925 24.3652H104.009C104.095 23.6974 104.245 22.7828 104.462 21.6222C104.603 20.8303 104.758 20.0409 104.928 19.2545L106.819 12.3612H111.04L106.494 27.9312L101.808 27.9303ZM115.869 20.1179C115.869 21.659 116.123 22.8241 116.631 23.613C117.149 24.4029 117.986 24.7978 119.144 24.7978C120.292 24.7978 121.115 24.4074 121.614 23.6274C122.122 22.8375 122.376 21.668 122.376 20.1179C122.376 18.5768 122.122 17.4208 121.614 16.6498C121.106 15.8796 120.273 15.4946 119.115 15.4946C117.967 15.4946 117.139 15.8796 116.631 16.6498C116.123 17.4118 115.869 18.5669 115.869 20.1179ZM126.78 20.1179C126.78 22.6526 126.104 24.6345 124.748 26.0643C123.393 27.4941 121.506 28.2094 119.087 28.2094C117.572 28.2094 116.236 27.8845 115.078 27.2347C113.921 26.575 113.032 25.6325 112.411 24.4074C111.789 23.1813 111.479 21.7515 111.479 20.117C111.479 17.5742 112.151 15.596 113.497 14.185C114.843 12.7741 116.735 12.0686 119.172 12.0686C120.687 12.0686 122.023 12.3935 123.181 13.0434C124.339 13.6932 125.228 14.6258 125.849 15.8419C126.47 17.059 126.78 18.4835 126.78 20.1179ZM132.612 20.1179C132.612 21.659 132.866 22.8241 133.375 23.613C133.892 24.4029 134.73 24.7978 135.887 24.7978C137.035 24.7978 137.859 24.4074 138.357 23.6274C138.866 22.8375 139.12 21.668 139.12 20.1179C139.12 18.5768 138.866 17.4208 138.357 16.6498C137.849 15.8796 137.016 15.4946 135.859 15.4946C134.71 15.4946 133.883 15.8796 133.375 16.6498C132.866 17.4118 132.612 18.5669 132.612 20.1179ZM143.524 20.1179C143.524 22.6526 142.847 24.6345 141.492 26.0643C140.136 27.4941 138.25 28.2094 135.831 28.2094C134.316 28.2094 132.979 27.8845 131.822 27.2347C130.664 26.575 129.775 25.6325 129.154 24.4074C128.533 23.1813 128.222 21.7515 128.222 20.117C128.222 17.5742 128.895 15.596 130.241 14.185C131.587 12.7741 133.478 12.0686 135.916 12.0686C137.431 12.0686 138.767 12.3935 139.924 13.0434C141.082 13.6932 141.972 14.6258 142.593 15.8419C143.214 17.059 143.524 18.4835 143.524 20.1179ZM150.922 28.2094C149.069 28.2094 147.61 27.4995 146.547 26.0786C145.492 24.6578 144.965 22.6894 144.965 20.1736C144.965 17.62 145.502 15.6337 146.574 14.2138C147.657 12.7831 149.144 12.0686 151.035 12.0686C153.022 12.0686 154.537 12.8297 155.581 14.352H155.722C155.506 13.1914 155.397 12.1566 155.397 11.2464V6.26048H159.717V27.9303H156.413L155.581 25.9108H155.397C154.419 27.4429 152.927 28.2094 150.922 28.2094ZM152.433 24.8256C153.534 24.8256 154.339 24.5097 154.847 23.8778C155.364 23.2468 155.647 22.1742 155.694 20.661V20.2014C155.694 18.5301 155.431 17.3328 154.904 16.6085C154.386 15.8841 153.539 15.5224 152.363 15.5224C151.402 15.5224 150.655 15.9263 150.118 16.7341C149.591 17.533 149.327 18.6971 149.327 20.2292C149.327 21.7614 149.596 22.9129 150.132 23.683C150.668 24.4442 151.436 24.8256 152.433 24.8256Z",
            fill: "white"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime198.jsx)(
          "path",
          {
            d: "M161.243 33.9188C160.255 33.9188 159.393 33.8174 158.66 33.6137V30.0198C159.412 30.2056 160.1 30.2981 160.721 30.2981C161.68 30.2981 162.368 30.0019 162.782 29.4068C163.196 28.8225 163.403 27.9025 163.403 26.6495V7.57003H167.779V26.6217C167.779 28.9984 167.228 30.8088 166.128 32.0528C165.026 33.2968 163.398 33.9188 161.243 33.9188ZM184 22.2766C184 24.1148 183.327 25.5634 181.981 26.6208C180.645 27.6799 178.782 28.2094 176.391 28.2094C174.189 28.2094 172.241 27.8002 170.546 26.9834V22.9731C171.939 23.5852 173.116 24.0169 174.076 24.2683C175.045 24.5187 175.93 24.6443 176.73 24.6443C177.689 24.6443 178.423 24.463 178.932 24.1004C179.449 23.7387 179.709 23.2002 179.709 22.4848C179.709 22.0863 179.596 21.7335 179.369 21.4266C179.143 21.1115 178.809 20.8091 178.367 20.5218C177.934 20.2346 177.045 19.7742 175.699 19.1432C174.438 18.558 173.492 17.9961 172.862 17.4576C172.243 16.9334 171.73 16.295 171.352 15.5772C170.975 14.8627 170.787 14.0271 170.787 13.0712C170.787 11.2698 171.403 9.85342 172.636 8.82302C173.878 7.79262 175.591 7.27742 177.775 7.27742C178.847 7.27742 179.869 7.40308 180.838 7.6535C181.816 7.90482 182.838 8.25666 183.901 8.71262L182.489 12.0677C181.388 11.6225 180.475 11.3111 179.751 11.1342C179.058 10.9609 178.347 10.8723 177.634 10.8704C176.805 10.8704 176.17 11.0606 175.727 11.4412C175.286 11.8218 175.064 12.319 175.064 12.9312C175.064 13.3126 175.154 13.6465 175.332 13.9346C175.511 14.2129 175.794 14.4866 176.18 14.7559C176.574 15.0162 177.502 15.4892 178.96 16.1767C180.889 17.086 182.212 18.0006 182.927 18.9197C183.642 19.8298 184 20.9482 184 22.2766Z",
            fill: "white"
          }
        )
      ] })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime198.jsx)("defs", { children: /* @__PURE__ */ (0, import_jsx_runtime198.jsx)("clipPath", { id: "clip0_5336_22419", children: /* @__PURE__ */ (0, import_jsx_runtime198.jsx)("rect", { width: "184", height: "34.1073", fill: "white" }) }) })
  ] });
}

// app/routes/_app.orgs.$organizationSlug.projects.$projectParam.setup.redwood/route.tsx
var import_jsx_runtime199 = require("react/jsx-runtime");
function Page40() {
  return /* @__PURE__ */ (0, import_jsx_runtime199.jsx)(
    FrameworkComingSoon,
    {
      frameworkName: "Redwood",
      githubIssueUrl: "https://github.com/triggerdotdev/trigger.dev/issues/448",
      githubIssueNumber: 448,
      children: /* @__PURE__ */ (0, import_jsx_runtime199.jsx)(RedwoodLogo, { className: "w-56" })
    }
  );
}

// app/routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.alerts.new/route.tsx
var route_exports62 = {};
__export(route_exports62, {
  action: () => action13,
  default: () => Page41,
  loader: () => loader52
});
var import_react141 = require("@conform-to/react"), import_zod114 = require("@conform-to/zod"), import_solid78 = require("@heroicons/react/20/solid"), import_react142 = require("@remix-run/react"), import_server_runtime15 = require("@remix-run/server-runtime"), import_companyicons6 = require("@trigger.dev/companyicons"), import_react143 = require("react"), import_remix_typedjson51 = require("remix-typedjson"), import_zod115 = require("zod");

// app/components/primitives/SegmentedControl.tsx
var import_react140 = require("@headlessui/react"), import_framer_motion11 = require("framer-motion");
var import_jsx_runtime200 = require("react/jsx-runtime"), variants15 = {
  primary: {
    base: "bg-charcoal-700",
    active: "text-text-bright hover:bg-charcoal-750/50"
  },
  secondary: {
    base: "bg-charcoal-700/50",
    active: "text-text-bright bg-charcoal-700 rounded-[2px] border border-charcoal-600/50"
  }
};
function SegmentedControl({
  name,
  value,
  defaultValue,
  options: options2,
  variant: variant3 = "secondary",
  fullWidth,
  onChange
}) {
  return /* @__PURE__ */ (0, import_jsx_runtime200.jsx)(
    "div",
    {
      className: cn(
        "flex h-10 rounded text-text-bright",
        variants15[variant3].base,
        fullWidth ? "w-full" : "w-fit"
      ),
      children: /* @__PURE__ */ (0, import_jsx_runtime200.jsx)(
        import_react140.RadioGroup,
        {
          value,
          defaultValue: defaultValue ?? options2[0].value,
          name,
          onChange: (c) => {
            onChange && onChange(c);
          },
          className: "w-full",
          children: /* @__PURE__ */ (0, import_jsx_runtime200.jsx)("div", { className: "flex h-full w-full items-center justify-between gap-x-1 p-1", children: options2.map((option) => /* @__PURE__ */ (0, import_jsx_runtime200.jsx)(
            import_react140.RadioGroup.Option,
            {
              value: option.value,
              className: ({ active, checked }) => cn(
                "relative flex h-full grow cursor-pointer text-center font-normal focus:outline-none",
                active ? "ring-offset-2 focus-visible:ring focus-visible:ring-secondary focus-visible:ring-opacity-60" : "",
                checked ? variants15[variant3].active : "text-text-dimmed transition hover:text-text-bright"
              ),
              children: ({ checked }) => /* @__PURE__ */ (0, import_jsx_runtime200.jsx)(import_jsx_runtime200.Fragment, { children: /* @__PURE__ */ (0, import_jsx_runtime200.jsxs)("div", { className: "relative flex h-full w-full items-center justify-between px-3 py-[0.13rem]", children: [
                /* @__PURE__ */ (0, import_jsx_runtime200.jsx)("div", { className: "z-10 flex h-full w-full items-center justify-center text-sm", children: /* @__PURE__ */ (0, import_jsx_runtime200.jsx)(import_react140.RadioGroup.Label, { as: "p", children: option.label }) }),
                checked && variant3 === "primary" && /* @__PURE__ */ (0, import_jsx_runtime200.jsx)(
                  import_framer_motion11.motion.div,
                  {
                    layoutId: `segmented-control-${name}`,
                    transition: { duration: 0.4, type: "spring" },
                    className: "absolute inset-0 rounded-[2px] shadow-md outline outline-3 outline-primary"
                  }
                )
              ] }) })
            },
            option.value
          )) })
        }
      )
    }
  );
}

// app/presenters/v3/NewAlertChannelPresenter.server.ts
var NewAlertChannelPresenter = class extends BasePresenter {
  async call(projectId) {
    let project = await this._prisma.project.findUniqueOrThrow({
      where: {
        id: projectId
      }
    }), slackIntegration = await this._prisma.organizationIntegration.findFirst({
      where: {
        service: "SLACK",
        organizationId: project.organizationId
      },
      orderBy: {
        createdAt: "desc"
      },
      include: {
        tokenReference: !0
      }
    });
    return slackIntegration ? {
      slack: {
        status: "READY",
        channels: await getSlackChannelsForToken(slackIntegration),
        integrationId: slackIntegration.id
      }
    } : OrgIntegrationRepository.isSlackSupported ? {
      slack: {
        status: "NOT_CONFIGURED"
      }
    } : {
      slack: {
        status: "NOT_AVAILABLE"
      }
    };
  }
};
async function getSlackChannelsForToken(integration) {
  let client3 = await OrgIntegrationRepository.getAuthenticatedClientForIntegration(integration), channels = await getAllSlackConversations(client3);
  return logger.debug("Received a list of slack conversations", {
    channels
  }), (channels ?? []).filter((channel) => !channel.is_archived).filter((channel) => channel.is_channel).filter((channel) => !channel.is_ext_shared).filter((channel) => channel.unlinked === 0).filter((channel) => channel.num_members).sort((a, b) => a.name.localeCompare(b.name));
}
async function getSlackConversationsPage(client3, nextCursor) {
  return client3.conversations.list({
    types: "public_channel,private_channel",
    exclude_archived: !0,
    cursor: nextCursor
  });
}
async function getAllSlackConversations(client3) {
  let nextCursor, channels = [];
  do {
    let response = await getSlackConversationsPage(client3, nextCursor);
    if (!response.ok)
      throw new Error(`Failed to get channels: ${response.error}`);
    channels = channels.concat(response.channels ?? []), nextCursor = response.response_metadata?.next_cursor;
  } while (nextCursor);
  return channels;
}

// app/v3/services/alerts/createAlertChannel.server.ts
var import_nanoid9 = require("nanoid");
var CreateAlertChannelService = class extends BaseService {
  async call(projectRef, userId, options2) {
    let project = await findProjectByRef(projectRef, userId);
    if (!project)
      throw new ServiceValidationError("Project not found");
    let environmentTypes = options2.environmentTypes.length === 0 ? ["STAGING", "PRODUCTION"] : options2.environmentTypes, existingAlertChannel = options2.deduplicationKey ? await this._prisma.projectAlertChannel.findUnique({
      where: {
        projectId_deduplicationKey: {
          projectId: project.id,
          deduplicationKey: options2.deduplicationKey
        }
      }
    }) : void 0;
    return existingAlertChannel ? await this._prisma.projectAlertChannel.update({
      where: { id: existingAlertChannel.id },
      data: {
        name: options2.name,
        alertTypes: options2.alertTypes,
        type: options2.channel.type,
        properties: await this.#createProperties(options2.channel),
        environmentTypes
      }
    }) : await this._prisma.projectAlertChannel.create({
      data: {
        friendlyId: generateFriendlyId("alert_channel"),
        name: options2.name,
        alertTypes: options2.alertTypes,
        projectId: project.id,
        type: options2.channel.type,
        properties: await this.#createProperties(options2.channel),
        enabled: !0,
        deduplicationKey: options2.deduplicationKey,
        userProvidedDeduplicationKey: !!options2.deduplicationKey,
        environmentTypes
      }
    });
  }
  async #createProperties(channel) {
    switch (channel.type) {
      case "EMAIL":
        return {
          email: channel.email
        };
      case "WEBHOOK":
        return {
          url: channel.url,
          secret: await encryptSecret(env2.ENCRYPTION_KEY, channel.secret ?? (0, import_nanoid9.nanoid)())
        };
      case "SLACK":
        return {
          channelId: channel.channelId,
          channelName: channel.channelName,
          integrationId: channel.integrationId
        };
    }
  }
};

// app/routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.alerts.new/route.tsx
var import_jsx_runtime201 = require("react/jsx-runtime"), FormSchema = import_zod115.z.object({
  alertTypes: import_zod115.z.array(import_zod115.z.enum(["TASK_RUN_ATTEMPT", "DEPLOYMENT_FAILURE", "DEPLOYMENT_SUCCESS"])).min(1).or(import_zod115.z.enum(["TASK_RUN_ATTEMPT", "DEPLOYMENT_FAILURE", "DEPLOYMENT_SUCCESS"])),
  environmentTypes: import_zod115.z.array(import_zod115.z.enum(["STAGING", "PRODUCTION"])).min(1).or(import_zod115.z.enum(["STAGING", "PRODUCTION"])),
  type: import_zod115.z.enum(["WEBHOOK", "SLACK", "EMAIL"]).default("EMAIL"),
  channelValue: import_zod115.z.string().nonempty(),
  integrationId: import_zod115.z.string().optional()
}).refine(
  (value) => value.type === "EMAIL" ? import_zod115.z.string().email().safeParse(value.channelValue).success : !0,
  {
    message: "Must be a valid email address",
    path: ["channelValue"]
  }
).refine(
  (value) => value.type === "WEBHOOK" ? import_zod115.z.string().url().safeParse(value.channelValue).success : !0,
  {
    message: "Must be a valid URL",
    path: ["channelValue"]
  }
).refine(
  (value) => value.type === "SLACK" ? typeof value.channelValue == "string" && value.channelValue.startsWith("C") : !0,
  {
    message: "Must select a Slack channel",
    path: ["channelValue"]
  }
);
function formDataToCreateAlertChannelOptions(formData) {
  switch (formData.type) {
    case "WEBHOOK":
      return {
        name: `Webhook to ${new URL(formData.channelValue).hostname}`,
        alertTypes: Array.isArray(formData.alertTypes) ? formData.alertTypes : [formData.alertTypes],
        environmentTypes: Array.isArray(formData.environmentTypes) ? formData.environmentTypes : [formData.environmentTypes],
        channel: {
          type: "WEBHOOK",
          url: formData.channelValue
        }
      };
    case "EMAIL":
      return {
        name: `Email to ${formData.channelValue}`,
        alertTypes: Array.isArray(formData.alertTypes) ? formData.alertTypes : [formData.alertTypes],
        environmentTypes: Array.isArray(formData.environmentTypes) ? formData.environmentTypes : [formData.environmentTypes],
        channel: {
          type: "EMAIL",
          email: formData.channelValue
        }
      };
    case "SLACK": {
      let [channelId, channelName] = formData.channelValue.split("/");
      return {
        name: `Slack message to ${channelName}`,
        alertTypes: Array.isArray(formData.alertTypes) ? formData.alertTypes : [formData.alertTypes],
        environmentTypes: Array.isArray(formData.environmentTypes) ? formData.environmentTypes : [formData.environmentTypes],
        channel: {
          type: "SLACK",
          channelId,
          channelName,
          integrationId: formData.integrationId
        }
      };
    }
  }
}
async function loader52({ request, params }) {
  let userId = await requireUserId(request), { organizationSlug, projectParam: projectParam2 } = ProjectParamSchema.parse(params), project = await findProjectBySlug(organizationSlug, projectParam2, userId);
  if (!project)
    throw new Response("Project not found", { status: 404 });
  let results = await new NewAlertChannelPresenter().call(project.id), option = new URL(request.url).searchParams.get("option");
  return (0, import_remix_typedjson51.typedjson)({
    ...results,
    option: option === "slack" ? "SLACK" : void 0
  });
}
var action13 = async ({ request, params }) => {
  let userId = await requireUserId(request), { organizationSlug, projectParam: projectParam2 } = ProjectParamSchema.parse(params);
  if (request.method.toUpperCase() !== "POST")
    return { status: 405, body: "Method Not Allowed" };
  let formData = await request.formData(), submission = (0, import_zod114.parse)(formData, { schema: FormSchema });
  if (!submission.value)
    return (0, import_server_runtime15.json)(submission);
  let project = await findProjectBySlug(organizationSlug, projectParam2, userId);
  if (!project)
    return submission.error.key = "Project not found", (0, import_server_runtime15.json)(submission);
  let alertChannel = await new CreateAlertChannelService().call(
    project.externalRef,
    userId,
    formDataToCreateAlertChannelOptions(submission.value)
  );
  return alertChannel ? redirectWithSuccessMessage(
    v3ProjectAlertsPath({ slug: organizationSlug }, { slug: projectParam2 }),
    request,
    `Created ${alertChannel.name} alert`
  ) : (submission.error.key = "Failed to create alert channel", (0, import_server_runtime15.json)(submission));
};
function Page41() {
  let [isOpen, setIsOpen] = (0, import_react143.useState)(!1), { slack: slack2, option } = (0, import_remix_typedjson51.useTypedLoaderData)(), lastSubmission = (0, import_react142.useActionData)(), navigation = (0, import_react142.useNavigation)(), navigate = (0, import_react142.useNavigate)(), organization = useOrganization(), project = useProject(), [currentAlertChannel, setCurrentAlertChannel] = (0, import_react143.useState)(option ?? "EMAIL"), [selectedSlackChannelValue, setSelectedSlackChannelValue] = (0, import_react143.useState)(), selectedSlackChannel = slack2.channels?.find(
    (s) => selectedSlackChannelValue === `${s.id}/${s.name}`
  ), isLoading2 = navigation.state !== "idle" && navigation.formMethod === "post" && navigation.formData?.get("action") === "create", [form, { channelValue, alertTypes, environmentTypes, type, integrationId }] = (0, import_react141.useForm)({
    id: "create-alert",
    // TODO: type this
    lastSubmission,
    onValidate({ formData }) {
      return (0, import_zod114.parse)(formData, { schema: FormSchema });
    },
    shouldRevalidate: "onSubmit"
  });
  return (0, import_react143.useEffect)(() => {
    setIsOpen(!0);
  }, []), (0, import_react143.useEffect)(() => {
    navigation.state === "idle" && lastSubmission === void 0 && form.ref.current?.reset();
  }, [navigation.state, lastSubmission]), /* @__PURE__ */ (0, import_jsx_runtime201.jsx)(
    Dialog,
    {
      open: isOpen,
      onOpenChange: (o) => {
        o || navigate(v3ProjectAlertsPath(organization, project));
      },
      children: /* @__PURE__ */ (0, import_jsx_runtime201.jsxs)(DialogContent, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime201.jsx)(DialogHeader, { children: "New alert" }),
        /* @__PURE__ */ (0, import_jsx_runtime201.jsx)(import_react142.Form, { method: "post", ...form.props, children: /* @__PURE__ */ (0, import_jsx_runtime201.jsxs)(Fieldset, { className: "mt-2", children: [
          /* @__PURE__ */ (0, import_jsx_runtime201.jsx)(InputGroup, { fullWidth: !0, children: /* @__PURE__ */ (0, import_jsx_runtime201.jsx)(
            SegmentedControl,
            {
              ...import_react141.conform.input(type),
              options: [
                { label: "Email", value: "EMAIL" },
                { label: "Slack", value: "SLACK" },
                { label: "Webhook", value: "WEBHOOK" }
              ],
              onChange: (value) => {
                setCurrentAlertChannel(value);
              },
              fullWidth: !0,
              defaultValue: currentAlertChannel ?? void 0
            }
          ) }),
          currentAlertChannel === "EMAIL" ? /* @__PURE__ */ (0, import_jsx_runtime201.jsxs)(InputGroup, { fullWidth: !0, children: [
            /* @__PURE__ */ (0, import_jsx_runtime201.jsx)(Label, { children: "Email" }),
            /* @__PURE__ */ (0, import_jsx_runtime201.jsx)(
              Input,
              {
                ...import_react141.conform.input(channelValue),
                placeholder: "email@youremail.com",
                type: "email",
                autoFocus: !0
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime201.jsx)(FormError, { id: channelValue.errorId, children: channelValue.error })
          ] }) : currentAlertChannel === "SLACK" ? /* @__PURE__ */ (0, import_jsx_runtime201.jsx)(InputGroup, { fullWidth: !0, children: slack2.status === "READY" ? /* @__PURE__ */ (0, import_jsx_runtime201.jsxs)(import_jsx_runtime201.Fragment, { children: [
            /* @__PURE__ */ (0, import_jsx_runtime201.jsx)(
              Select2,
              {
                ...import_react141.conform.select(channelValue),
                placeholder: "Select a Slack channel",
                heading: "Filter channels\u2026",
                defaultValue: void 0,
                dropdownIcon: !0,
                variant: "tertiary/medium",
                items: slack2.channels,
                setValue: (value) => {
                  typeof value == "string" && setSelectedSlackChannelValue(value);
                },
                filter: (channel, search) => channel.name?.toLowerCase().includes(search.toLowerCase()) ?? !1,
                text: (value) => {
                  let channel = slack2.channels.find((s) => value === `${s.id}/${s.name}`);
                  if (channel)
                    return /* @__PURE__ */ (0, import_jsx_runtime201.jsx)(SlackChannelTitle, { ...channel });
                },
                children: (matches) => /* @__PURE__ */ (0, import_jsx_runtime201.jsx)(import_jsx_runtime201.Fragment, { children: matches?.map((channel) => /* @__PURE__ */ (0, import_jsx_runtime201.jsx)(SelectItem2, { value: `${channel.id}/${channel.name}`, children: /* @__PURE__ */ (0, import_jsx_runtime201.jsx)(SlackChannelTitle, { ...channel }) }, channel.id)) })
              }
            ),
            selectedSlackChannel && selectedSlackChannel.is_private && /* @__PURE__ */ (0, import_jsx_runtime201.jsxs)(
              Callout,
              {
                variant: "warning",
                className: cn("text-sm", variantClasses2.warning.textColor),
                children: [
                  "To receive alerts in the",
                  " ",
                  /* @__PURE__ */ (0, import_jsx_runtime201.jsx)(InlineCode, { variant: "extra-small", children: selectedSlackChannel.name }),
                  " ",
                  "channel, you need to invite the @Trigger.dev Slack Bot. Go to the channel in Slack and type:",
                  " ",
                  /* @__PURE__ */ (0, import_jsx_runtime201.jsx)(InlineCode, { variant: "extra-small", children: "/invite @Trigger.dev" }),
                  "."
                ]
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime201.jsx)(FormError, { id: channelValue.errorId, children: channelValue.error }),
            /* @__PURE__ */ (0, import_jsx_runtime201.jsx)("input", { type: "hidden", name: "integrationId", value: slack2.integrationId })
          ] }) : slack2.status === "NOT_CONFIGURED" ? /* @__PURE__ */ (0, import_jsx_runtime201.jsx)(LinkButton, { variant: "tertiary/large", to: "connect-to-slack", fullWidth: !0, children: /* @__PURE__ */ (0, import_jsx_runtime201.jsxs)("span", { className: "flex items-center gap-2 text-text-bright", children: [
            /* @__PURE__ */ (0, import_jsx_runtime201.jsx)(import_companyicons6.SlackIcon, { className: "size-5" }),
            " Connect to Slack"
          ] }) }) : /* @__PURE__ */ (0, import_jsx_runtime201.jsx)(Callout, { variant: "warning", children: "Slack integration is not available. Please contact your organization administrator." }) }) : /* @__PURE__ */ (0, import_jsx_runtime201.jsxs)(InputGroup, { fullWidth: !0, children: [
            /* @__PURE__ */ (0, import_jsx_runtime201.jsx)(Label, { children: "URL" }),
            /* @__PURE__ */ (0, import_jsx_runtime201.jsx)(
              Input,
              {
                ...import_react141.conform.input(channelValue),
                placeholder: "https://foobar.com/webhooks",
                type: "url",
                autoFocus: !0
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime201.jsx)(FormError, { id: channelValue.errorId, children: channelValue.error }),
            /* @__PURE__ */ (0, import_jsx_runtime201.jsx)(Hint, { children: "We'll issue POST requests to this URL with a JSON payload." })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime201.jsxs)(InputGroup, { children: [
            /* @__PURE__ */ (0, import_jsx_runtime201.jsx)(Label, { children: "Alert me when" }),
            /* @__PURE__ */ (0, import_jsx_runtime201.jsxs)("div", { className: "flex items-center gap-1", children: [
              /* @__PURE__ */ (0, import_jsx_runtime201.jsx)(
                CheckboxWithLabel,
                {
                  name: alertTypes.name,
                  id: "TASK_RUN_ATTEMPT",
                  value: "TASK_RUN_ATTEMPT",
                  variant: "simple/small",
                  label: "Task run attempts fail",
                  defaultChecked: !0,
                  className: "pr-0"
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime201.jsx)(InfoIconTooltip, { content: "You'll receive an alert every time an attempt fails on a run." })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime201.jsx)(
              CheckboxWithLabel,
              {
                name: alertTypes.name,
                id: "DEPLOYMENT_FAILURE",
                value: "DEPLOYMENT_FAILURE",
                variant: "simple/small",
                label: "Deployments fail",
                defaultChecked: !0
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime201.jsx)(
              CheckboxWithLabel,
              {
                name: alertTypes.name,
                id: "DEPLOYMENT_SUCCESS",
                value: "DEPLOYMENT_SUCCESS",
                variant: "simple/small",
                label: "Deployments succeed",
                defaultChecked: !0
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime201.jsx)(FormError, { id: alertTypes.errorId, children: alertTypes.error })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime201.jsxs)(InputGroup, { children: [
            /* @__PURE__ */ (0, import_jsx_runtime201.jsx)(Label, { children: "Environments" }),
            /* @__PURE__ */ (0, import_jsx_runtime201.jsx)(
              CheckboxWithLabel,
              {
                name: environmentTypes.name,
                id: "PRODUCTION",
                value: "PRODUCTION",
                variant: "simple/small",
                label: "PROD",
                defaultChecked: !0
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime201.jsx)(
              CheckboxWithLabel,
              {
                name: environmentTypes.name,
                id: "STAGING",
                value: "STAGING",
                variant: "simple/small",
                label: "STAGING",
                defaultChecked: !0
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime201.jsx)(FormError, { id: environmentTypes.errorId, children: environmentTypes.error })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime201.jsx)(FormError, { children: form.error }),
          /* @__PURE__ */ (0, import_jsx_runtime201.jsx)("div", { className: "border-t border-grid-bright pt-3", children: /* @__PURE__ */ (0, import_jsx_runtime201.jsx)(
            FormButtons,
            {
              confirmButton: /* @__PURE__ */ (0, import_jsx_runtime201.jsx)(
                Button,
                {
                  variant: "primary/medium",
                  disabled: isLoading2,
                  name: "action",
                  value: "create",
                  children: isLoading2 ? "Saving\u2026" : "Save"
                }
              ),
              cancelButton: /* @__PURE__ */ (0, import_jsx_runtime201.jsx)(
                LinkButton,
                {
                  to: v3ProjectAlertsPath(organization, project),
                  variant: "tertiary/medium",
                  children: "Cancel"
                }
              )
            }
          ) })
        ] }) })
      ] })
    }
  );
}
function SlackChannelTitle({ name, is_private }) {
  return /* @__PURE__ */ (0, import_jsx_runtime201.jsxs)("div", { className: "flex items-center gap-1.5", children: [
    is_private ? /* @__PURE__ */ (0, import_jsx_runtime201.jsx)(import_solid78.LockClosedIcon, { className: "size-4" }) : /* @__PURE__ */ (0, import_jsx_runtime201.jsx)(import_solid78.HashtagIcon, { className: "size-4" }),
    /* @__PURE__ */ (0, import_jsx_runtime201.jsx)("span", { children: name })
  ] });
}

// app/routes/resources.environments.$environmentParam.endpoint.$endpointParam.ts
var resources_environments_environmentParam_endpoint_endpointParam_exports = {};
__export(resources_environments_environmentParam_endpoint_endpointParam_exports, {
  action: () => action14
});
var import_server_runtime16 = require("@remix-run/server-runtime"), import_zod116 = require("zod");

// app/services/endpoints/deleteEndpointService.ts
var DeleteEndpointService = class {
  #prismaClient;
  constructor(prismaClient = prisma) {
    this.#prismaClient = prismaClient;
  }
  async call(id, userId) {
    await this.#prismaClient.endpoint.update({
      data: {
        url: null
      },
      where: {
        id,
        organization: {
          members: {
            some: {
              userId
            }
          }
        }
      }
    });
  }
};

// app/routes/resources.environments.$environmentParam.endpoint.$endpointParam.ts
var ParamsSchema4 = import_zod116.z.object({
  environmentParam: import_zod116.z.string(),
  endpointParam: import_zod116.z.string()
}), BodySchema = import_zod116.z.discriminatedUnion("action", [
  import_zod116.z.object({ action: import_zod116.z.literal("refresh") }),
  import_zod116.z.object({ action: import_zod116.z.literal("delete") })
]);
async function action14({ request, params }) {
  let userId = await requireUserId(request);
  if (request.method !== "POST")
    throw new Response(null, { status: 405 });
  try {
    let { endpointParam } = ParamsSchema4.parse(params), form = await request.formData(), formObject = Object.fromEntries(form.entries()), { action: action106 } = BodySchema.parse(formObject);
    switch (action106) {
      case "refresh":
        return await new IndexEndpointService().call(endpointParam, "MANUAL"), await workerQueue.enqueue(
          "probeEndpoint",
          { id: endpointParam },
          { jobKey: `probe:${endpointParam}`, runAt: new Date(Date.now() + 1e4) }
        ), (0, import_server_runtime16.json)({ success: !0 });
      case "delete":
        return await new DeleteEndpointService().call(endpointParam, userId), (0, import_server_runtime16.json)({ success: !0 });
    }
  } catch (e) {
    return (0, import_server_runtime16.json)({ success: !1, error: e }, { status: 400 });
  }
}

// app/routes/_app.orgs.$organizationSlug.projects.$projectParam.environments/route.tsx
var route_exports63 = {};
__export(route_exports63, {
  default: () => Page42,
  loader: () => loader53
});
var import_react151 = require("@remix-run/react"), import_react152 = require("react"), import_remix_typedjson52 = require("remix-typedjson");

// app/components/environments/EndpointIndexStatus.tsx
var import_solid79 = require("@heroicons/react/20/solid");
var import_jsx_runtime202 = require("react/jsx-runtime");
function EndpointIndexStatusIcon({ status }) {
  switch (status) {
    case "PENDING":
      return /* @__PURE__ */ (0, import_jsx_runtime202.jsx)(import_solid79.ClockIcon, { className: cn("h-4 w-4", endpointIndexStatusClassNameColor(status)) });
    case "STARTED":
      return /* @__PURE__ */ (0, import_jsx_runtime202.jsx)(Spinner, { className: cn("h-4 w-4", endpointIndexStatusClassNameColor(status)) });
    case "SUCCESS":
      return /* @__PURE__ */ (0, import_jsx_runtime202.jsx)(import_solid79.CheckCircleIcon, { className: cn("h-4 w-4", endpointIndexStatusClassNameColor(status)) });
    case "FAILURE":
      return /* @__PURE__ */ (0, import_jsx_runtime202.jsx)(import_solid79.XCircleIcon, { className: cn("h-4 w-4", endpointIndexStatusClassNameColor(status)) });
  }
}
function EndpointIndexStatusLabel({ status }) {
  switch (status) {
    case "PENDING":
      return /* @__PURE__ */ (0, import_jsx_runtime202.jsx)("span", { className: endpointIndexStatusClassNameColor(status), children: endpointIndexStatusTitle(status) });
    case "STARTED":
      return /* @__PURE__ */ (0, import_jsx_runtime202.jsx)("span", { className: endpointIndexStatusClassNameColor(status), children: endpointIndexStatusTitle(status) });
    case "SUCCESS":
      return /* @__PURE__ */ (0, import_jsx_runtime202.jsx)("span", { className: endpointIndexStatusClassNameColor(status), children: endpointIndexStatusTitle(status) });
    case "FAILURE":
      return /* @__PURE__ */ (0, import_jsx_runtime202.jsx)("span", { className: endpointIndexStatusClassNameColor(status), children: endpointIndexStatusTitle(status) });
  }
}
function endpointIndexStatusTitle(status) {
  switch (status) {
    case "PENDING":
      return "Pending";
    case "STARTED":
      return "Started";
    case "SUCCESS":
      return "Success";
    case "FAILURE":
      return "Failure";
  }
}
function endpointIndexStatusClassNameColor(status) {
  switch (status) {
    case "PENDING":
      return "text-text-dimmed";
    case "STARTED":
      return "text-blue-500";
    case "SUCCESS":
      return "text-green-500";
    case "FAILURE":
      return "text-rose-500";
  }
}

// app/components/environments/RegenerateApiKeyModal.tsx
var import_solid80 = require("@heroicons/react/20/solid"), import_react144 = require("@remix-run/react"), import_react145 = require("react");

// app/utils/randomWords.ts
function generateTwoRandomWords() {
  return randomWords({ exactly: 2, join: "-" });
}
function randomWords({ exactly, join }) {
  let words2 = [];
  for (let i = 0; i < exactly; i++) {
    let nextWord = randomWord();
    for (; words2.includes(nextWord); )
      nextWord = randomWord();
    words2.push(nextWord);
  }
  return words2.join(join);
}
var wordList2 = [
  // Borrowed from xkcd password generator which borrowed it from wherever
  "ability",
  "able",
  "aboard",
  "about",
  "above",
  "accept",
  "accident",
  "according",
  "account",
  "accurate",
  "acres",
  "across",
  "act",
  "action",
  "active",
  "activity",
  "actual",
  "actually",
  "add",
  "addition",
  "additional",
  "adjective",
  "adult",
  "adventure",
  "advice",
  "affect",
  "afraid",
  "after",
  "afternoon",
  "again",
  "against",
  "age",
  "ago",
  "agree",
  "ahead",
  "aid",
  "air",
  "airplane",
  "alike",
  "alive",
  "all",
  "allow",
  "almost",
  "alone",
  "along",
  "aloud",
  "alphabet",
  "already",
  "also",
  "although",
  "am",
  "among",
  "amount",
  "ancient",
  "angle",
  "angry",
  "animal",
  "announced",
  "another",
  "answer",
  "ants",
  "any",
  "anybody",
  "anyone",
  "anything",
  "anyway",
  "anywhere",
  "apart",
  "apartment",
  "appearance",
  "apple",
  "applied",
  "appropriate",
  "are",
  "area",
  "arm",
  "army",
  "around",
  "arrange",
  "arrangement",
  "arrive",
  "arrow",
  "art",
  "article",
  "as",
  "aside",
  "ask",
  "asleep",
  "at",
  "ate",
  "atmosphere",
  "atom",
  "atomic",
  "attached",
  "attack",
  "attempt",
  "attention",
  "audience",
  "author",
  "automobile",
  "available",
  "average",
  "avoid",
  "aware",
  "away",
  "baby",
  "back",
  "bad",
  "badly",
  "bag",
  "balance",
  "ball",
  "balloon",
  "band",
  "bank",
  "bar",
  "bare",
  "bark",
  "barn",
  "base",
  "baseball",
  "basic",
  "basis",
  "basket",
  "bat",
  "battle",
  "be",
  "bean",
  "bear",
  "beat",
  "beautiful",
  "beauty",
  "became",
  "because",
  "become",
  "becoming",
  "bee",
  "been",
  "before",
  "began",
  "beginning",
  "begun",
  "behavior",
  "behind",
  "being",
  "believed",
  "bell",
  "belong",
  "below",
  "belt",
  "bend",
  "beneath",
  "bent",
  "beside",
  "best",
  "bet",
  "better",
  "between",
  "beyond",
  "bicycle",
  "bigger",
  "biggest",
  "bill",
  "birds",
  "birth",
  "birthday",
  "bit",
  "bite",
  "black",
  "blank",
  "blanket",
  "blew",
  "blind",
  "block",
  "blood",
  "blow",
  "blue",
  "board",
  "boat",
  "body",
  "bone",
  "book",
  "border",
  "born",
  "both",
  "bottle",
  "bottom",
  "bound",
  "bow",
  "bowl",
  "box",
  "boy",
  "brain",
  "branch",
  "brass",
  "brave",
  "bread",
  "break",
  "breakfast",
  "breath",
  "breathe",
  "breathing",
  "breeze",
  "brick",
  "bridge",
  "brief",
  "bright",
  "bring",
  "broad",
  "broke",
  "broken",
  "brother",
  "brought",
  "brown",
  "brush",
  "buffalo",
  "build",
  "building",
  "built",
  "buried",
  "burn",
  "burst",
  "bus",
  "bush",
  "business",
  "busy",
  "but",
  "butter",
  "buy",
  "by",
  "cabin",
  "cage",
  "cake",
  "call",
  "calm",
  "came",
  "camera",
  "camp",
  "can",
  "canal",
  "cannot",
  "cap",
  "capital",
  "captain",
  "captured",
  "car",
  "carbon",
  "card",
  "care",
  "careful",
  "carefully",
  "carried",
  "carry",
  "case",
  "cast",
  "castle",
  "cat",
  "catch",
  "cattle",
  "caught",
  "cause",
  "cave",
  "cell",
  "cent",
  "center",
  "central",
  "century",
  "certain",
  "certainly",
  "chain",
  "chair",
  "chamber",
  "chance",
  "change",
  "changing",
  "chapter",
  "character",
  "characteristic",
  "charge",
  "chart",
  "check",
  "cheese",
  "chemical",
  "chest",
  "chicken",
  "chief",
  "child",
  "children",
  "choice",
  "choose",
  "chose",
  "chosen",
  "church",
  "circle",
  "circus",
  "citizen",
  "city",
  "class",
  "classroom",
  "claws",
  "clay",
  "clean",
  "clear",
  "clearly",
  "climate",
  "climb",
  "clock",
  "close",
  "closely",
  "closer",
  "cloth",
  "clothes",
  "clothing",
  "cloud",
  "club",
  "coach",
  "coal",
  "coast",
  "coat",
  "coffee",
  "cold",
  "collect",
  "college",
  "colony",
  "color",
  "column",
  "combination",
  "combine",
  "come",
  "comfortable",
  "coming",
  "command",
  "common",
  "community",
  "company",
  "compare",
  "compass",
  "complete",
  "completely",
  "complex",
  "composed",
  "composition",
  "compound",
  "concerned",
  "condition",
  "congress",
  "connected",
  "consider",
  "consist",
  "consonant",
  "constantly",
  "construction",
  "contain",
  "continent",
  "continued",
  "contrast",
  "control",
  "conversation",
  "cook",
  "cookies",
  "cool",
  "copper",
  "copy",
  "corn",
  "corner",
  "correct",
  "correctly",
  "cost",
  "cotton",
  "could",
  "count",
  "country",
  "couple",
  "courage",
  "course",
  "court",
  "cover",
  "cow",
  "cowboy",
  "crack",
  "cream",
  "create",
  "creature",
  "crew",
  "crop",
  "cross",
  "crowd",
  "cry",
  "cup",
  "curious",
  "current",
  "curve",
  "customs",
  "cut",
  "cutting",
  "daily",
  "damage",
  "dance",
  "danger",
  "dangerous",
  "dark",
  "darkness",
  "date",
  "daughter",
  "dawn",
  "day",
  "dead",
  "deal",
  "dear",
  "death",
  "decide",
  "declared",
  "deep",
  "deeply",
  "deer",
  "definition",
  "degree",
  "depend",
  "depth",
  "describe",
  "desert",
  "design",
  "desk",
  "detail",
  "determine",
  "develop",
  "development",
  "diagram",
  "diameter",
  "did",
  "die",
  "differ",
  "difference",
  "different",
  "difficult",
  "difficulty",
  "dig",
  "dinner",
  "direct",
  "direction",
  "directly",
  "dirt",
  "dirty",
  "disappear",
  "discover",
  "discovery",
  "discuss",
  "discussion",
  "disease",
  "dish",
  "distance",
  "distant",
  "divide",
  "division",
  "do",
  "doctor",
  "does",
  "dog",
  "doing",
  "doll",
  "dollar",
  "done",
  "donkey",
  "door",
  "dot",
  "double",
  "doubt",
  "down",
  "dozen",
  "draw",
  "drawn",
  "dream",
  "dress",
  "drew",
  "dried",
  "drink",
  "drive",
  "driven",
  "driver",
  "driving",
  "drop",
  "dropped",
  "drove",
  "dry",
  "duck",
  "due",
  "dug",
  "dull",
  "during",
  "dust",
  "duty",
  "each",
  "eager",
  "ear",
  "earlier",
  "early",
  "earn",
  "earth",
  "easier",
  "easily",
  "east",
  "easy",
  "eat",
  "eaten",
  "edge",
  "education",
  "effect",
  "effort",
  "egg",
  "eight",
  "either",
  "electric",
  "electricity",
  "element",
  "elephant",
  "eleven",
  "else",
  "empty",
  "end",
  "enemy",
  "energy",
  "engine",
  "engineer",
  "enjoy",
  "enough",
  "enter",
  "entire",
  "entirely",
  "environment",
  "equal",
  "equally",
  "equator",
  "equipment",
  "escape",
  "especially",
  "essential",
  "establish",
  "even",
  "evening",
  "event",
  "eventually",
  "ever",
  "every",
  "everybody",
  "everyone",
  "everything",
  "everywhere",
  "evidence",
  "exact",
  "exactly",
  "examine",
  "example",
  "excellent",
  "except",
  "exchange",
  "excited",
  "excitement",
  "exciting",
  "exclaimed",
  "exercise",
  "exist",
  "expect",
  "experience",
  "experiment",
  "explain",
  "explanation",
  "explore",
  "express",
  "expression",
  "extra",
  "eye",
  "face",
  "facing",
  "fact",
  "factor",
  "factory",
  "failed",
  "fair",
  "fairly",
  "fall",
  "fallen",
  "familiar",
  "family",
  "famous",
  "far",
  "farm",
  "farmer",
  "farther",
  "fast",
  "fastened",
  "faster",
  "fat",
  "father",
  "favorite",
  "fear",
  "feathers",
  "feature",
  "fed",
  "feed",
  "feel",
  "feet",
  "fell",
  "fellow",
  "felt",
  "fence",
  "few",
  "fewer",
  "field",
  "fierce",
  "fifteen",
  "fifth",
  "fifty",
  "fight",
  "fighting",
  "figure",
  "fill",
  "film",
  "final",
  "finally",
  "find",
  "fine",
  "finest",
  "finger",
  "finish",
  "fire",
  "fireplace",
  "firm",
  "first",
  "fish",
  "five",
  "fix",
  "flag",
  "flame",
  "flat",
  "flew",
  "flies",
  "flight",
  "floating",
  "floor",
  "flow",
  "flower",
  "fly",
  "fog",
  "folks",
  "follow",
  "food",
  "foot",
  "football",
  "for",
  "force",
  "foreign",
  "forest",
  "forget",
  "forgot",
  "forgotten",
  "form",
  "former",
  "fort",
  "forth",
  "forty",
  "forward",
  "fought",
  "found",
  "four",
  "fourth",
  "fox",
  "frame",
  "free",
  "freedom",
  "frequently",
  "fresh",
  "friend",
  "friendly",
  "frighten",
  "frog",
  "from",
  "front",
  "frozen",
  "fruit",
  "fuel",
  "full",
  "fully",
  "fun",
  "function",
  "funny",
  "fur",
  "furniture",
  "further",
  "future",
  "gain",
  "game",
  "garage",
  "garden",
  "gas",
  "gasoline",
  "gate",
  "gather",
  "gave",
  "general",
  "generally",
  "gentle",
  "gently",
  "get",
  "getting",
  "giant",
  "gift",
  "girl",
  "give",
  "given",
  "giving",
  "glad",
  "glass",
  "globe",
  "go",
  "goes",
  "gold",
  "golden",
  "gone",
  "good",
  "goose",
  "got",
  "government",
  "grabbed",
  "grade",
  "gradually",
  "grain",
  "grandfather",
  "grandmother",
  "graph",
  "grass",
  "gravity",
  "gray",
  "great",
  "greater",
  "greatest",
  "greatly",
  "green",
  "grew",
  "ground",
  "group",
  "grow",
  "grown",
  "growth",
  "guard",
  "guess",
  "guide",
  "gulf",
  "gun",
  "habit",
  "had",
  "hair",
  "half",
  "halfway",
  "hall",
  "hand",
  "handle",
  "handsome",
  "hang",
  "happen",
  "happened",
  "happily",
  "happy",
  "harbor",
  "hard",
  "harder",
  "hardly",
  "has",
  "hat",
  "have",
  "having",
  "hay",
  "he",
  "headed",
  "heading",
  "health",
  "heard",
  "hearing",
  "heart",
  "heat",
  "heavy",
  "height",
  "held",
  "hello",
  "help",
  "helpful",
  "her",
  "herd",
  "here",
  "herself",
  "hidden",
  "hide",
  "high",
  "higher",
  "highest",
  "highway",
  "hill",
  "him",
  "himself",
  "his",
  "history",
  "hit",
  "hold",
  "hole",
  "hollow",
  "home",
  "honor",
  "hope",
  "horn",
  "horse",
  "hospital",
  "hot",
  "hour",
  "house",
  "how",
  "however",
  "huge",
  "human",
  "hundred",
  "hung",
  "hungry",
  "hunt",
  "hunter",
  "hurried",
  "hurry",
  "hurt",
  "husband",
  "ice",
  "idea",
  "identity",
  "if",
  "ill",
  "image",
  "imagine",
  "immediately",
  "importance",
  "important",
  "impossible",
  "improve",
  "in",
  "inch",
  "include",
  "including",
  "income",
  "increase",
  "indeed",
  "independent",
  "indicate",
  "individual",
  "industrial",
  "industry",
  "influence",
  "information",
  "inside",
  "instance",
  "instant",
  "instead",
  "instrument",
  "interest",
  "interior",
  "into",
  "introduced",
  "invented",
  "involved",
  "iron",
  "is",
  "island",
  "it",
  "its",
  "itself",
  "jack",
  "jar",
  "jet",
  "job",
  "join",
  "joined",
  "journey",
  "joy",
  "judge",
  "jump",
  "jungle",
  "just",
  "keep",
  "kept",
  "key",
  "kids",
  "kill",
  "kind",
  "kitchen",
  "knew",
  "knife",
  "know",
  "knowledge",
  "known",
  "label",
  "labor",
  "lack",
  "lady",
  "laid",
  "lake",
  "lamp",
  "land",
  "language",
  "large",
  "larger",
  "largest",
  "last",
  "late",
  "later",
  "laugh",
  "law",
  "lay",
  "layers",
  "lead",
  "leader",
  "leaf",
  "learn",
  "least",
  "leather",
  "leave",
  "leaving",
  "led",
  "left",
  "leg",
  "length",
  "lesson",
  "let",
  "letter",
  "level",
  "library",
  "lie",
  "life",
  "lift",
  "light",
  "like",
  "likely",
  "limited",
  "line",
  "lion",
  "lips",
  "liquid",
  "list",
  "listen",
  "little",
  "live",
  "living",
  "load",
  "local",
  "locate",
  "location",
  "log",
  "lonely",
  "long",
  "longer",
  "look",
  "loose",
  "lose",
  "loss",
  "lost",
  "lot",
  "loud",
  "love",
  "lovely",
  "low",
  "lower",
  "luck",
  "lucky",
  "lunch",
  "lungs",
  "lying",
  "machine",
  "machinery",
  "mad",
  "made",
  "magic",
  "magnet",
  "mail",
  "main",
  "mainly",
  "major",
  "make",
  "making",
  "man",
  "managed",
  "manner",
  "manufacturing",
  "many",
  "map",
  "mark",
  "market",
  "married",
  "mass",
  "massage",
  "master",
  "material",
  "mathematics",
  "matter",
  "may",
  "maybe",
  "me",
  "meal",
  "mean",
  "means",
  "meant",
  "measure",
  "meat",
  "medicine",
  "meet",
  "melted",
  "member",
  "memory",
  "men",
  "mental",
  "merely",
  "met",
  "metal",
  "method",
  "mice",
  "middle",
  "might",
  "mighty",
  "mile",
  "military",
  "milk",
  "mill",
  "mind",
  "mine",
  "minerals",
  "minute",
  "mirror",
  "missing",
  "mission",
  "mistake",
  "mix",
  "mixture",
  "model",
  "modern",
  "molecular",
  "moment",
  "money",
  "monkey",
  "month",
  "mood",
  "moon",
  "more",
  "morning",
  "most",
  "mostly",
  "mother",
  "motion",
  "motor",
  "mountain",
  "mouse",
  "mouth",
  "move",
  "movement",
  "movie",
  "moving",
  "mud",
  "muscle",
  "music",
  "musical",
  "must",
  "my",
  "myself",
  "mysterious",
  "nails",
  "name",
  "nation",
  "national",
  "native",
  "natural",
  "naturally",
  "nature",
  "near",
  "nearby",
  "nearer",
  "nearest",
  "nearly",
  "necessary",
  "neck",
  "needed",
  "needle",
  "needs",
  "negative",
  "neighbor",
  "neighborhood",
  "nervous",
  "nest",
  "never",
  "new",
  "news",
  "newspaper",
  "next",
  "nice",
  "night",
  "nine",
  "no",
  "nobody",
  "nodded",
  "noise",
  "none",
  "noon",
  "nor",
  "north",
  "nose",
  "not",
  "note",
  "noted",
  "nothing",
  "notice",
  "noun",
  "now",
  "number",
  "numeral",
  "nuts",
  "object",
  "observe",
  "obtain",
  "occasionally",
  "occur",
  "ocean",
  "of",
  "off",
  "offer",
  "office",
  "officer",
  "official",
  "oil",
  "old",
  "older",
  "oldest",
  "on",
  "once",
  "one",
  "only",
  "onto",
  "open",
  "operation",
  "opinion",
  "opportunity",
  "opposite",
  "or",
  "orange",
  "orbit",
  "order",
  "ordinary",
  "organization",
  "organized",
  "origin",
  "original",
  "other",
  "ought",
  "our",
  "ourselves",
  "out",
  "outer",
  "outline",
  "outside",
  "over",
  "own",
  "owner",
  "oxygen",
  "pack",
  "package",
  "page",
  "paid",
  "pain",
  "paint",
  "pair",
  "palace",
  "pale",
  "pan",
  "paper",
  "paragraph",
  "parallel",
  "parent",
  "park",
  "part",
  "particles",
  "particular",
  "particularly",
  "partly",
  "parts",
  "party",
  "pass",
  "passage",
  "past",
  "path",
  "pattern",
  "pay",
  "peace",
  "pen",
  "pencil",
  "people",
  "per",
  "percent",
  "perfect",
  "perfectly",
  "perhaps",
  "period",
  "person",
  "personal",
  "pet",
  "phrase",
  "physical",
  "piano",
  "pick",
  "picture",
  "pictured",
  "pie",
  "piece",
  "pig",
  "pile",
  "pilot",
  "pine",
  "pink",
  "pipe",
  "pitch",
  "place",
  "plain",
  "plan",
  "plane",
  "planet",
  "planned",
  "planning",
  "plant",
  "plastic",
  "plate",
  "plates",
  "play",
  "pleasant",
  "please",
  "pleasure",
  "plenty",
  "plural",
  "plus",
  "pocket",
  "poem",
  "poet",
  "poetry",
  "point",
  "pole",
  "police",
  "policeman",
  "political",
  "pond",
  "pony",
  "pool",
  "poor",
  "popular",
  "population",
  "porch",
  "port",
  "position",
  "positive",
  "possible",
  "possibly",
  "post",
  "pot",
  "potatoes",
  "pound",
  "pour",
  "powder",
  "power",
  "powerful",
  "practical",
  "practice",
  "prepare",
  "present",
  "president",
  "press",
  "pressure",
  "pretty",
  "prevent",
  "previous",
  "price",
  "pride",
  "primitive",
  "principal",
  "principle",
  "printed",
  "private",
  "prize",
  "probably",
  "problem",
  "process",
  "produce",
  "product",
  "production",
  "program",
  "progress",
  "promised",
  "proper",
  "properly",
  "property",
  "protection",
  "proud",
  "prove",
  "provide",
  "public",
  "pull",
  "pupil",
  "pure",
  "purple",
  "purpose",
  "push",
  "put",
  "putting",
  "quarter",
  "queen",
  "question",
  "quick",
  "quickly",
  "quiet",
  "quietly",
  "quite",
  "rabbit",
  "race",
  "radio",
  "railroad",
  "rain",
  "raise",
  "ran",
  "ranch",
  "range",
  "rapidly",
  "rate",
  "rather",
  "raw",
  "rays",
  "reach",
  "read",
  "reader",
  "ready",
  "real",
  "realize",
  "rear",
  "reason",
  "recall",
  "receive",
  "recent",
  "recently",
  "recognize",
  "record",
  "red",
  "refer",
  "refused",
  "region",
  "regular",
  "related",
  "relationship",
  "religious",
  "remain",
  "remarkable",
  "remember",
  "remove",
  "repeat",
  "replace",
  "replied",
  "report",
  "represent",
  "require",
  "research",
  "respect",
  "rest",
  "result",
  "return",
  "review",
  "rhyme",
  "rhythm",
  "rice",
  "rich",
  "ride",
  "riding",
  "right",
  "ring",
  "rise",
  "rising",
  "river",
  "road",
  "roar",
  "rock",
  "rocket",
  "rocky",
  "rod",
  "roll",
  "roof",
  "room",
  "root",
  "rope",
  "rose",
  "rough",
  "round",
  "route",
  "row",
  "rubbed",
  "rubber",
  "rule",
  "ruler",
  "run",
  "running",
  "rush",
  "sad",
  "saddle",
  "safe",
  "safety",
  "said",
  "sail",
  "sale",
  "salmon",
  "salt",
  "same",
  "sand",
  "sang",
  "sat",
  "satellites",
  "satisfied",
  "save",
  "saved",
  "saw",
  "say",
  "scale",
  "scared",
  "scene",
  "school",
  "science",
  "scientific",
  "scientist",
  "score",
  "screen",
  "sea",
  "search",
  "season",
  "seat",
  "second",
  "secret",
  "section",
  "see",
  "seed",
  "seeing",
  "seems",
  "seen",
  "seldom",
  "select",
  "selection",
  "sell",
  "send",
  "sense",
  "sent",
  "sentence",
  "separate",
  "series",
  "serious",
  "serve",
  "service",
  "sets",
  "setting",
  "settle",
  "settlers",
  "seven",
  "several",
  "shade",
  "shadow",
  "shake",
  "shaking",
  "shall",
  "shallow",
  "shape",
  "share",
  "sharp",
  "she",
  "sheep",
  "sheet",
  "shelf",
  "shells",
  "shelter",
  "shine",
  "shinning",
  "ship",
  "shirt",
  "shoe",
  "shoot",
  "shop",
  "shore",
  "short",
  "shorter",
  "shot",
  "should",
  "shoulder",
  "shout",
  "show",
  "shown",
  "shut",
  "sick",
  "sides",
  "sight",
  "sign",
  "signal",
  "silence",
  "silent",
  "silk",
  "silly",
  "silver",
  "similar",
  "simple",
  "simplest",
  "simply",
  "since",
  "sing",
  "single",
  "sink",
  "sister",
  "sit",
  "sitting",
  "situation",
  "six",
  "size",
  "skill",
  "skin",
  "sky",
  "slabs",
  "slave",
  "sleep",
  "slept",
  "slide",
  "slight",
  "slightly",
  "slip",
  "slipped",
  "slope",
  "slow",
  "slowly",
  "small",
  "smaller",
  "smallest",
  "smell",
  "smile",
  "smoke",
  "smooth",
  "snake",
  "snow",
  "so",
  "soap",
  "social",
  "society",
  "soft",
  "softly",
  "soil",
  "solar",
  "sold",
  "soldier",
  "solid",
  "solution",
  "solve",
  "some",
  "somebody",
  "somehow",
  "someone",
  "something",
  "sometime",
  "somewhere",
  "son",
  "song",
  "soon",
  "sort",
  "sound",
  "source",
  "south",
  "southern",
  "space",
  "speak",
  "special",
  "species",
  "specific",
  "speech",
  "speed",
  "spell",
  "spend",
  "spent",
  "spider",
  "spin",
  "spirit",
  "spite",
  "split",
  "spoken",
  "sport",
  "spread",
  "spring",
  "square",
  "stage",
  "stairs",
  "stand",
  "standard",
  "star",
  "stared",
  "start",
  "state",
  "statement",
  "station",
  "stay",
  "steady",
  "steam",
  "steel",
  "steep",
  "stems",
  "step",
  "stepped",
  "stick",
  "stiff",
  "still",
  "stock",
  "stomach",
  "stone",
  "stood",
  "stop",
  "stopped",
  "store",
  "storm",
  "story",
  "stove",
  "straight",
  "strange",
  "stranger",
  "straw",
  "stream",
  "street",
  "strength",
  "stretch",
  "strike",
  "string",
  "strip",
  "strong",
  "stronger",
  "struck",
  "structure",
  "struggle",
  "stuck",
  "student",
  "studied",
  "studying",
  "subject",
  "substance",
  "success",
  "successful",
  "such",
  "sudden",
  "suddenly",
  "sugar",
  "suggest",
  "suit",
  "sum",
  "summer",
  "sun",
  "sunlight",
  "supper",
  "supply",
  "support",
  "suppose",
  "sure",
  "surface",
  "surprise",
  "surrounded",
  "swam",
  "sweet",
  "swept",
  "swim",
  "swimming",
  "swing",
  "swung",
  "syllable",
  "symbol",
  "system",
  "table",
  "tail",
  "take",
  "taken",
  "tales",
  "talk",
  "tall",
  "tank",
  "tape",
  "task",
  "taste",
  "taught",
  "tax",
  "tea",
  "teach",
  "teacher",
  "team",
  "tears",
  "teeth",
  "telephone",
  "television",
  "tell",
  "temperature",
  "ten",
  "tent",
  "term",
  "terrible",
  "test",
  "than",
  "thank",
  "that",
  "thee",
  "them",
  "themselves",
  "then",
  "theory",
  "there",
  "therefore",
  "these",
  "they",
  "thick",
  "thin",
  "thing",
  "think",
  "third",
  "thirty",
  "this",
  "those",
  "thou",
  "though",
  "thought",
  "thousand",
  "thread",
  "three",
  "threw",
  "throat",
  "through",
  "throughout",
  "throw",
  "thrown",
  "thumb",
  "thus",
  "thy",
  "tide",
  "tie",
  "tight",
  "tightly",
  "till",
  "time",
  "tin",
  "tiny",
  "tip",
  "tired",
  "title",
  "to",
  "tobacco",
  "today",
  "together",
  "told",
  "tomorrow",
  "tone",
  "tongue",
  "tonight",
  "too",
  "took",
  "tool",
  "top",
  "topic",
  "torn",
  "total",
  "touch",
  "toward",
  "tower",
  "town",
  "toy",
  "trace",
  "track",
  "trade",
  "traffic",
  "trail",
  "train",
  "transportation",
  "trap",
  "travel",
  "treated",
  "tree",
  "triangle",
  "tribe",
  "trick",
  "tried",
  "trip",
  "troops",
  "tropical",
  "trouble",
  "truck",
  "trunk",
  "truth",
  "try",
  "tube",
  "tune",
  "turn",
  "twelve",
  "twenty",
  "twice",
  "two",
  "type",
  "typical",
  "uncle",
  "under",
  "underline",
  "understanding",
  "unhappy",
  "union",
  "unit",
  "universe",
  "unknown",
  "unless",
  "until",
  "unusual",
  "up",
  "upon",
  "upper",
  "upward",
  "us",
  "use",
  "useful",
  "using",
  "usual",
  "usually",
  "valley",
  "valuable",
  "value",
  "vapor",
  "variety",
  "various",
  "vast",
  "vegetable",
  "verb",
  "vertical",
  "very",
  "vessels",
  "victory",
  "view",
  "village",
  "visit",
  "visitor",
  "voice",
  "volume",
  "vote",
  "vowel",
  "voyage",
  "wagon",
  "wait",
  "walk",
  "wall",
  "want",
  "war",
  "warm",
  "warn",
  "was",
  "wash",
  "waste",
  "watch",
  "water",
  "wave",
  "way",
  "we",
  "weak",
  "wealth",
  "wear",
  "weather",
  "week",
  "weigh",
  "weight",
  "welcome",
  "well",
  "went",
  "were",
  "west",
  "western",
  "wet",
  "whale",
  "what",
  "whatever",
  "wheat",
  "wheel",
  "when",
  "whenever",
  "where",
  "wherever",
  "whether",
  "which",
  "while",
  "whispered",
  "whistle",
  "white",
  "who",
  "whole",
  "whom",
  "whose",
  "why",
  "wide",
  "widely",
  "wife",
  "wild",
  "will",
  "willing",
  "win",
  "wind",
  "window",
  "wing",
  "winter",
  "wire",
  "wise",
  "wish",
  "with",
  "within",
  "without",
  "wolf",
  "women",
  "won",
  "wonder",
  "wonderful",
  "wood",
  "wooden",
  "wool",
  "word",
  "wore",
  "work",
  "worker",
  "world",
  "worried",
  "worry",
  "worse",
  "worth",
  "would",
  "wrapped",
  "write",
  "writer",
  "writing",
  "written",
  "wrong",
  "wrote",
  "yard",
  "year",
  "yellow",
  "yes",
  "yesterday",
  "yet",
  "you",
  "young",
  "younger",
  "your",
  "yourself",
  "youth",
  "zero",
  "zebra",
  "zipper",
  "zoo",
  "zulu"
];
function randomWord() {
  return wordList2[Math.floor(Math.random() * wordList2.length)];
}

// app/components/environments/RegenerateApiKeyModal.tsx
var import_jsx_runtime203 = require("react/jsx-runtime");
function RegenerateApiKeyModal({ id, title: title2 }) {
  let randomWord2 = generateTwoRandomWords(), [open, setOpen] = (0, import_react145.useState)(!1);
  return /* @__PURE__ */ (0, import_jsx_runtime203.jsxs)(Dialog, { open, onOpenChange: setOpen, children: [
    /* @__PURE__ */ (0, import_jsx_runtime203.jsx)(DialogTrigger, { asChild: !0, children: /* @__PURE__ */ (0, import_jsx_runtime203.jsx)(
      Button,
      {
        variant: "minimal/small",
        leadingIconClassName: "text-text-dimmed",
        LeadingIcon: import_solid80.ArrowPathIcon,
        children: "Regenerate"
      }
    ) }),
    /* @__PURE__ */ (0, import_jsx_runtime203.jsxs)(DialogContent, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime203.jsx)(DialogHeader, { children: `Regenerate ${title2} Environment Key` }),
      /* @__PURE__ */ (0, import_jsx_runtime203.jsx)(
        RegenerateApiKeyModalContent,
        {
          id,
          title: title2,
          randomWord: randomWord2,
          closeModal: () => setOpen(!1)
        }
      )
    ] })
  ] });
}
var RegenerateApiKeyModalContent = ({ id, randomWord: randomWord2, title: title2, closeModal }) => {
  let [confirmationText, setConfirmationText] = (0, import_react145.useState)(""), fetcher = (0, import_react144.useFetcher)(), isSubmitting = fetcher.state === "submitting";
  return fetcher.state === "loading" && closeModal(), /* @__PURE__ */ (0, import_jsx_runtime203.jsxs)("div", { className: "flex flex-col items-center gap-y-5 py-4", children: [
    /* @__PURE__ */ (0, import_jsx_runtime203.jsx)(Callout, { variant: "warning", children: `Regenerating the keys for this environment will temporarily break any live Jobs in the
        ${title2} Environmentuntil the new API keys are set in the relevant environment variables.` }),
    /* @__PURE__ */ (0, import_jsx_runtime203.jsx)(
      fetcher.Form,
      {
        method: "post",
        action: `/resources/environments/${id}/regenerate-api-key`,
        className: "mt-2 w-full",
        children: /* @__PURE__ */ (0, import_jsx_runtime203.jsxs)(Fieldset, { className: "w-full", children: [
          /* @__PURE__ */ (0, import_jsx_runtime203.jsxs)(InputGroup, { children: [
            /* @__PURE__ */ (0, import_jsx_runtime203.jsx)(Paragraph, { variant: "small/bright", children: "Enter this text below to confirm:" }),
            /* @__PURE__ */ (0, import_jsx_runtime203.jsx)(
              Paragraph,
              {
                variant: "small",
                className: "select-all rounded-md border border-grid-bright bg-charcoal-900 px-2 py-1 font-mono",
                children: randomWord2
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime203.jsx)(
              Input,
              {
                type: "text",
                placeholder: "Confirmation text",
                fullWidth: !0,
                value: confirmationText,
                onChange: (e) => setConfirmationText(e.target.value)
              }
            )
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime203.jsx)(
            FormButtons,
            {
              confirmButton: /* @__PURE__ */ (0, import_jsx_runtime203.jsx)(
                Button,
                {
                  type: "submit",
                  variant: "primary/small",
                  LeadingIcon: isSubmitting ? Spinner : void 0,
                  disabled: confirmationText !== randomWord2,
                  children: "Regenerate"
                }
              ),
              cancelButton: /* @__PURE__ */ (0, import_jsx_runtime203.jsx)(Button, { variant: "tertiary/small", children: "Cancel" })
            }
          )
        ] })
      }
    )
  ] });
};

// app/presenters/EnvironmentsPresenter.server.ts
var EnvironmentsPresenter = class {
  #prismaClient;
  constructor(prismaClient = prisma) {
    this.#prismaClient = prismaClient;
  }
  async call({
    userId,
    projectSlug,
    baseUrl
  }) {
    let filtered = (await this.#prismaClient.runtimeEnvironment.findMany({
      select: {
        id: !0,
        apiKey: !0,
        pkApiKey: !0,
        type: !0,
        slug: !0,
        orgMember: {
          select: {
            userId: !0
          }
        },
        endpoints: {
          select: {
            id: !0,
            slug: !0,
            url: !0,
            indexingHookIdentifier: !0,
            indexings: {
              select: {
                status: !0,
                source: !0,
                updatedAt: !0,
                stats: !0,
                error: !0
              },
              take: 1,
              orderBy: {
                updatedAt: "desc"
              }
            }
          },
          where: {
            url: {
              not: null
            }
          }
        }
      },
      where: {
        project: {
          slug: projectSlug
        },
        organization: {
          members: {
            some: {
              userId
            }
          }
        }
      }
    })).filter((environment) => environment.type === "DEVELOPMENT" ? environment.orgMember?.userId === userId : !0), clientSlugs = /* @__PURE__ */ new Set();
    for (let environment of filtered)
      for (let endpoint of environment.endpoints)
        clientSlugs.add(endpoint.slug);
    let clients = [];
    for (let slug3 of clientSlugs) {
      let developmentEnvironment = filtered.find(
        (environment) => environment.type === "DEVELOPMENT"
      );
      if (!developmentEnvironment)
        throw new Error("Development environment not found, this should not happen");
      let stagingEnvironment = filtered.find((environment) => environment.type === "STAGING"), productionEnvironment = filtered.find(
        (environment) => environment.type === "PRODUCTION"
      );
      if (!productionEnvironment)
        throw new Error("Production environment not found, this should not happen");
      let client3 = {
        slug: slug3,
        endpoints: {
          DEVELOPMENT: {
            state: "unconfigured",
            environment: developmentEnvironment
          },
          PRODUCTION: {
            state: "unconfigured",
            environment: productionEnvironment
          },
          STAGING: stagingEnvironment ? { state: "unconfigured", environment: stagingEnvironment } : void 0
        }
      }, devEndpoint = developmentEnvironment.endpoints.find(
        (endpoint) => endpoint.slug === slug3
      );
      if (devEndpoint && (client3.endpoints.DEVELOPMENT = endpointClient(devEndpoint, developmentEnvironment, baseUrl)), stagingEnvironment) {
        let stagingEndpoint = stagingEnvironment.endpoints.find(
          (endpoint) => endpoint.slug === slug3
        );
        stagingEndpoint && (client3.endpoints.STAGING = endpointClient(stagingEndpoint, stagingEnvironment, baseUrl));
      }
      let prodEndpoint = productionEnvironment.endpoints.find(
        (endpoint) => endpoint.slug === slug3
      );
      prodEndpoint && (client3.endpoints.PRODUCTION = endpointClient(prodEndpoint, productionEnvironment, baseUrl)), clients.push(client3);
    }
    return {
      environments: sortEnvironments(
        filtered.map((environment) => ({
          id: environment.id,
          apiKey: environment.apiKey,
          pkApiKey: environment.pkApiKey,
          type: environment.type,
          slug: environment.slug
        }))
      ),
      clients
    };
  }
};
function endpointClient(endpoint, environment, baseUrl) {
  return {
    state: "configured",
    id: endpoint.id,
    slug: endpoint.slug,
    url: endpoint.url,
    indexWebhookPath: `${baseUrl}/api/v1/endpoints/${environment.id}/${endpoint.slug}/index/${endpoint.indexingHookIdentifier}`,
    latestIndex: endpoint.indexings[0] ? {
      status: endpoint.indexings[0].status,
      source: endpoint.indexings[0].source,
      updatedAt: endpoint.indexings[0].updatedAt,
      stats: parseEndpointIndexStats(endpoint.indexings[0].stats),
      error: endpoint.indexings[0].error ? EndpointIndexErrorSchema.parse(endpoint.indexings[0].error) : void 0
    } : void 0,
    environment
  };
}

// app/routes/_app.orgs.$organizationSlug.projects.$projectParam.environments/ConfigureEndpointSheet.tsx
var import_react146 = require("@conform-to/react"), import_zod119 = require("@conform-to/zod"), import_react147 = require("@remix-run/react"), import_react148 = require("react");

// app/routes/resources.environments.$environmentParam.endpoint.ts
var resources_environments_environmentParam_endpoint_exports = {};
__export(resources_environments_environmentParam_endpoint_exports, {
  action: () => action15,
  bodySchema: () => bodySchema
});
var import_zod117 = require("@conform-to/zod"), import_server_runtime17 = require("@remix-run/server-runtime"), import_zod118 = require("zod");

// app/services/endpoints/createEndpoint.server.ts
var import_nanoid10 = require("nanoid");
var indexingHookIdentifier = (0, import_nanoid10.customAlphabet)("0123456789abcdefghijklmnopqrstuvxyz", 10), CreateEndpointError = class extends Error {
  constructor(code, message) {
    super(message);
    Object.setPrototypeOf(this, CreateEndpointError.prototype), this.code = code;
  }
}, CreateEndpointService = class {
  #prismaClient;
  constructor(prismaClient = prisma) {
    this.#prismaClient = prismaClient;
  }
  async call({
    environment,
    url,
    id
  }) {
    let endpointUrl = this.#normalizeEndpointUrl(url), pong = await new EndpointApi(environment.apiKey, endpointUrl).ping(id);
    if (!pong.ok)
      throw new CreateEndpointError("FAILED_PING", pong.error);
    try {
      return await $transaction(this.#prismaClient, async (tx) => {
        let endpoint = await tx.endpoint.upsert({
          where: {
            environmentId_slug: {
              environmentId: environment.id,
              slug: id
            }
          },
          include: {
            environment: !0
          },
          create: {
            environment: {
              connect: {
                id: environment.id
              }
            },
            organization: {
              connect: {
                id: environment.organizationId
              }
            },
            project: {
              connect: {
                id: environment.projectId
              }
            },
            slug: id,
            url: endpointUrl,
            indexingHookIdentifier: indexingHookIdentifier(),
            version: pong.triggerVersion
          },
          update: {
            url: endpointUrl,
            version: pong.triggerVersion
          }
        }), endpointIndex = await tx.endpointIndex.create({
          data: {
            endpointId: endpoint.id,
            status: "PENDING",
            source: "INTERNAL"
          }
        });
        return await workerQueue.enqueue(
          "performEndpointIndexing",
          {
            id: endpointIndex.id
          },
          {
            tx,
            maxAttempts: endpoint.environment.type === RuntimeEnvironmentType3.DEVELOPMENT ? 1 : void 0
          }
        ), { ...endpoint, endpointIndex };
      });
    } catch (error) {
      throw error instanceof Error ? new CreateEndpointError("FAILED_UPSERT", error.message) : new CreateEndpointError("FAILED_UPSERT", "Something went wrong");
    }
  }
  // If the endpoint URL points to localhost, and the RUNTIME_PLATFORM is docker-compose, then we need to rewrite the host to host.docker.internal
  // otherwise we shouldn't change anything
  #normalizeEndpointUrl(url) {
    if (env2.RUNTIME_PLATFORM === "docker-compose") {
      let urlObj = new URL(url);
      if (urlObj.hostname === "localhost")
        return urlObj.hostname = "host.docker.internal", urlObj.toString();
    }
    return url;
  }
};

// app/routes/resources.environments.$environmentParam.endpoint.ts
var ParamsSchema5 = import_zod118.z.object({
  environmentParam: import_zod118.z.string()
}), bodySchema = import_zod118.z.object({
  clientSlug: import_zod118.z.string(),
  url: import_zod118.z.string().url("Must be a valid URL")
});
async function action15({ request, params }) {
  let userId = await requireUserId(request), { environmentParam } = ParamsSchema5.parse(params), formData = await request.formData(), submission = (0, import_zod117.parse)(formData, { schema: bodySchema });
  if (!submission.value || submission.intent !== "submit")
    return (0, import_server_runtime17.json)(submission);
  try {
    let environment = await prisma.runtimeEnvironment.findUnique({
      include: {
        organization: !0,
        project: !0
      },
      where: {
        id: environmentParam
      }
    });
    if (!environment)
      throw new Error("Environment not found");
    let result = await new CreateEndpointService().call({
      id: submission.value.clientSlug,
      url: submission.value.url,
      environment
    });
    return (0, import_server_runtime17.json)(submission);
  } catch (e) {
    return e instanceof CreateEndpointError ? (submission.error.url = e.message, (0, import_server_runtime17.json)(submission)) : (e instanceof Error ? submission.error.url = `${e.name}: ${e.message}` : submission.error.url = "Unknown error", (0, import_server_runtime17.json)(submission, { status: 400 }));
  }
}

// app/routes/_app.orgs.$organizationSlug.projects.$projectParam.environments/ConfigureEndpointSheet.tsx
var import_jsx_runtime204 = require("react/jsx-runtime");
function ConfigureEndpointSheet({ slug: slug3, endpoint, onClose }) {
  let setEndpointUrlFetcher = (0, import_react147.useFetcher)(), [form, { url, clientSlug }] = (0, import_react146.useForm)({
    id: "endpoint-url",
    lastSubmission: setEndpointUrlFetcher.data,
    onValidate({ formData }) {
      return (0, import_zod119.parse)(formData, { schema: bodySchema });
    }
  }), loadingEndpointUrl = setEndpointUrlFetcher.state !== "idle", refreshEndpointFetcher = (0, import_react147.useFetcher)(), refreshingEndpoint = refreshEndpointFetcher.state !== "idle", deleteEndpointFetcher = (0, import_react147.useFetcher)(), deletingEndpoint = deleteEndpointFetcher.state !== "idle", revalidator = (0, import_react147.useRevalidator)(), events = useEventSource2(endpointStreamingPath({ id: endpoint.environment.id }), {
    event: "message"
  });
  return (0, import_react148.useEffect)(() => {
    events !== null && revalidator.revalidate();
  }, [events]), /* @__PURE__ */ (0, import_jsx_runtime204.jsx)(
    Sheet,
    {
      open: !0,
      onOpenChange: (open) => {
        open || onClose();
      },
      children: /* @__PURE__ */ (0, import_jsx_runtime204.jsxs)(SheetContent, { size: "lg", children: [
        /* @__PURE__ */ (0, import_jsx_runtime204.jsx)(SheetHeader, { children: /* @__PURE__ */ (0, import_jsx_runtime204.jsxs)("div", { className: "flex w-full items-center justify-between", children: [
          /* @__PURE__ */ (0, import_jsx_runtime204.jsx)(Header1, { children: /* @__PURE__ */ (0, import_jsx_runtime204.jsxs)("div", { className: "flex items-center gap-2", children: [
            /* @__PURE__ */ (0, import_jsx_runtime204.jsx)(EnvironmentLabel, { environment: { type: endpoint.environment.type } }),
            /* @__PURE__ */ (0, import_jsx_runtime204.jsx)(Header1, { children: "Configure endpoint" })
          ] }) }),
          endpoint.state === "configured" && /* @__PURE__ */ (0, import_jsx_runtime204.jsxs)(
            deleteEndpointFetcher.Form,
            {
              method: "post",
              action: `/resources/environments/${endpoint.environment.id}/endpoint/${endpoint.id}`,
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime204.jsx)("input", { type: "hidden", name: "action", value: "delete" }),
                /* @__PURE__ */ (0, import_jsx_runtime204.jsx)(
                  Button,
                  {
                    variant: "danger/small",
                    type: "submit",
                    disabled: deletingEndpoint,
                    LeadingIcon: deletingEndpoint ? "spinner-white" : void 0,
                    children: deletingEndpoint ? "Deleting" : "Delete"
                  }
                )
              ]
            }
          )
        ] }) }),
        /* @__PURE__ */ (0, import_jsx_runtime204.jsxs)(SheetBody, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime204.jsx)(
            setEndpointUrlFetcher.Form,
            {
              method: "post",
              action: `/resources/environments/${endpoint.environment.id}/endpoint`,
              ...form.props,
              children: /* @__PURE__ */ (0, import_jsx_runtime204.jsxs)(InputGroup, { className: "max-w-none", children: [
                /* @__PURE__ */ (0, import_jsx_runtime204.jsx)(Header2, { children: "Endpoint URL" }),
                /* @__PURE__ */ (0, import_jsx_runtime204.jsxs)("div", { className: "flex items-center", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime204.jsx)("input", { ...import_react146.conform.input(clientSlug, { type: "hidden" }), value: slug3 }),
                  /* @__PURE__ */ (0, import_jsx_runtime204.jsx)(
                    Input,
                    {
                      className: "rounded-r-none",
                      ...import_react146.conform.input(url, { type: "url" }),
                      defaultValue: "url" in endpoint ? endpoint.url ?? "" : "",
                      placeholder: "URL for your Trigger API route"
                    }
                  ),
                  /* @__PURE__ */ (0, import_jsx_runtime204.jsx)(
                    Button,
                    {
                      type: "submit",
                      variant: "primary/medium",
                      className: "rounded-l-none",
                      disabled: loadingEndpointUrl,
                      LeadingIcon: loadingEndpointUrl ? "spinner-white" : void 0,
                      children: loadingEndpointUrl ? "Saving" : "Save"
                    }
                  )
                ] }),
                /* @__PURE__ */ (0, import_jsx_runtime204.jsx)(FormError, { id: url.errorId, children: url.error }),
                /* @__PURE__ */ (0, import_jsx_runtime204.jsx)(FormError, { id: form.errorId, children: form.error }),
                /* @__PURE__ */ (0, import_jsx_runtime204.jsxs)(Hint, { children: [
                  "This is the URL of your Trigger API route, Typically this would be:",
                  " ",
                  /* @__PURE__ */ (0, import_jsx_runtime204.jsx)(InlineCode, { variant: "extra-small", children: "https://yourdomain.com/api/trigger" }),
                  "."
                ] })
              ] })
            }
          ),
          endpoint.state === "configured" && /* @__PURE__ */ (0, import_jsx_runtime204.jsxs)("div", { className: "mt-4 flex flex-col gap-4", children: [
            /* @__PURE__ */ (0, import_jsx_runtime204.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime204.jsx)(Header2, { children: "Status" }),
              /* @__PURE__ */ (0, import_jsx_runtime204.jsx)(Paragraph, { className: "mb-2", variant: "small", children: "We connect to your endpoint and refresh your Jobs." }),
              /* @__PURE__ */ (0, import_jsx_runtime204.jsxs)(
                refreshEndpointFetcher.Form,
                {
                  method: "post",
                  action: `/resources/environments/${endpoint.environment.id}/endpoint/${endpoint.id}`,
                  children: [
                    /* @__PURE__ */ (0, import_jsx_runtime204.jsx)("input", { type: "hidden", name: "action", value: "refresh" }),
                    /* @__PURE__ */ (0, import_jsx_runtime204.jsxs)(
                      Callout,
                      {
                        variant: "info",
                        icon: /* @__PURE__ */ (0, import_jsx_runtime204.jsx)(EndpointIndexStatusIcon, { status: endpoint.latestIndex?.status ?? "PENDING" }),
                        className: "justiy-between items-center",
                        children: [
                          /* @__PURE__ */ (0, import_jsx_runtime204.jsxs)("div", { className: "flex grow items-center gap-2", children: [
                            /* @__PURE__ */ (0, import_jsx_runtime204.jsx)(
                              EndpointIndexStatusLabel,
                              {
                                status: endpoint.latestIndex?.status ?? "PENDING"
                              }
                            ),
                            /* @__PURE__ */ (0, import_jsx_runtime204.jsxs)(Paragraph, { variant: "small", className: "grow", children: [
                              "Last refreshed:",
                              " ",
                              endpoint.latestIndex ? /* @__PURE__ */ (0, import_jsx_runtime204.jsx)(import_jsx_runtime204.Fragment, { children: /* @__PURE__ */ (0, import_jsx_runtime204.jsx)(DateTime, { date: endpoint.latestIndex.updatedAt }) }) : "\u2013"
                            ] })
                          ] }),
                          /* @__PURE__ */ (0, import_jsx_runtime204.jsx)(
                            Button,
                            {
                              variant: "secondary/small",
                              type: "submit",
                              disabled: refreshingEndpoint,
                              LeadingIcon: refreshingEndpoint ? "spinner-white" : void 0,
                              children: refreshingEndpoint ? "Refreshing" : "Refresh now"
                            }
                          )
                        ]
                      }
                    ),
                    endpoint.latestIndex?.error && /* @__PURE__ */ (0, import_jsx_runtime204.jsx)(FormError, { className: "p-2", children: /* @__PURE__ */ (0, import_jsx_runtime204.jsx)("pre", { children: endpoint.latestIndex.error.message }) })
                  ]
                }
              )
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime204.jsxs)("div", { className: "max-w-full overflow-hidden", children: [
              /* @__PURE__ */ (0, import_jsx_runtime204.jsx)(Header2, { children: "Automatic refreshing" }),
              /* @__PURE__ */ (0, import_jsx_runtime204.jsx)(Paragraph, { className: "mb-2", variant: "small", children: "Use this webhook URL so your Jobs get automatically refreshed when you deploy. You just need to hit this URL (POST) and we will refresh your Jobs." }),
              /* @__PURE__ */ (0, import_jsx_runtime204.jsx)(ClipboardField, { variant: "secondary/medium", value: endpoint.indexWebhookPath })
            ] })
          ] })
        ] })
      ] })
    }
  );
}

// app/routes/_app.orgs.$organizationSlug.projects.$projectParam.environments/FirstEndpointSheet.tsx
var import_react149 = require("@conform-to/react"), import_zod122 = require("@conform-to/zod"), import_react150 = require("@remix-run/react");

// app/routes/resources.projects.$projectId.endpoint.ts
var resources_projects_projectId_endpoint_exports = {};
__export(resources_projects_projectId_endpoint_exports, {
  action: () => action16,
  bodySchema: () => bodySchema2
});
var import_zod120 = require("@conform-to/zod"), import_server_runtime18 = require("@remix-run/server-runtime"), import_zod121 = require("zod");

// app/services/endpoints/validateCreateEndpoint.server.ts
var import_nanoid11 = require("nanoid");
var indexingHookIdentifier2 = (0, import_nanoid11.customAlphabet)("0123456789abcdefghijklmnopqrstuvxyz", 10), ValidateCreateEndpointService = class {
  #prismaClient;
  constructor(prismaClient = prisma) {
    this.#prismaClient = prismaClient;
  }
  async call({ environment, url }) {
    let endpointUrl = this.#normalizeEndpointUrl(url), validationResult = await new EndpointApi(environment.apiKey, endpointUrl).validate();
    if (!validationResult.ok)
      throw new Error(validationResult.error);
    try {
      return await $transaction(this.#prismaClient, async (tx) => {
        let endpoint = await tx.endpoint.upsert({
          where: {
            environmentId_slug: {
              environmentId: environment.id,
              slug: validationResult.endpointId
            }
          },
          include: {
            environment: !0
          },
          create: {
            environment: {
              connect: {
                id: environment.id
              }
            },
            organization: {
              connect: {
                id: environment.organizationId
              }
            },
            project: {
              connect: {
                id: environment.projectId
              }
            },
            slug: validationResult.endpointId,
            url: endpointUrl,
            indexingHookIdentifier: indexingHookIdentifier2(),
            version: validationResult.triggerVersion
          },
          update: {
            url: endpointUrl,
            version: validationResult.triggerVersion
          }
        }), index = await tx.endpointIndex.create({
          data: { endpointId: endpoint.id, status: "PENDING", source: "INTERNAL" }
        });
        return await workerQueue.enqueue(
          "performEndpointIndexing",
          {
            id: index.id
          },
          {
            tx,
            maxAttempts: endpoint.environment.type === RuntimeEnvironmentType3.DEVELOPMENT ? 1 : void 0
          }
        ), endpoint;
      });
    } catch (error) {
      throw error instanceof Error ? new CreateEndpointError("FAILED_UPSERT", error.message) : new CreateEndpointError("FAILED_UPSERT", "Something went wrong");
    }
  }
  // If the endpoint URL points to localhost, and the RUNTIME_PLATFORM is docker-compose, then we need to rewrite the host to host.docker.internal
  // otherwise we shouldn't change anything
  #normalizeEndpointUrl(url) {
    if (env2.RUNTIME_PLATFORM === "docker-compose") {
      let urlObj = new URL(url);
      if (urlObj.hostname === "localhost")
        return urlObj.hostname = "host.docker.internal", urlObj.toString();
    }
    return url;
  }
};

// app/routes/resources.projects.$projectId.endpoint.ts
var bodySchema2 = import_zod121.z.object({
  environmentId: import_zod121.z.string(),
  url: import_zod121.z.string().url("Must be a valid URL")
});
async function action16({ request }) {
  let formData = await request.formData(), submission = (0, import_zod120.parse)(formData, { schema: bodySchema2 });
  if (!submission.value || submission.intent !== "submit")
    return (0, import_server_runtime18.json)(submission);
  try {
    let environment = await prisma.runtimeEnvironment.findUnique({
      include: {
        organization: !0,
        project: !0
      },
      where: {
        id: submission.value.environmentId
      }
    });
    return environment ? (await new ValidateCreateEndpointService().call({
      url: submission.value.url,
      environment
    }), (0, import_server_runtime18.json)(submission)) : (submission.error.environmentId = "Environment not found", (0, import_server_runtime18.json)(submission));
  } catch (e) {
    return e instanceof CreateEndpointError ? (submission.error.url = e.message, (0, import_server_runtime18.json)(submission)) : (e instanceof Error ? submission.error.url = `${e.name}: ${e.message}` : submission.error.url = "Unknown error", (0, import_server_runtime18.json)(submission, { status: 400 }));
  }
}

// app/routes/_app.orgs.$organizationSlug.projects.$projectParam.environments/FirstEndpointSheet.tsx
var import_jsx_runtime205 = require("react/jsx-runtime");
function FirstEndpointSheet({ projectId, environments: environments2 }) {
  let setEndpointUrlFetcher = (0, import_react150.useFetcher)(), [form, { url, environmentId }] = (0, import_react149.useForm)({
    id: "new-endpoint-url",
    // TODO: type this
    lastSubmission: setEndpointUrlFetcher.data,
    onValidate({ formData }) {
      return (0, import_zod122.parse)(formData, { schema: bodySchema2 });
    }
  }), loadingEndpointUrl = setEndpointUrlFetcher.state !== "idle";
  return /* @__PURE__ */ (0, import_jsx_runtime205.jsxs)(Sheet, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime205.jsx)(SheetTrigger, { children: /* @__PURE__ */ (0, import_jsx_runtime205.jsx)(ButtonContent, { variant: "secondary/medium", children: "Add your first endpoint" }) }),
    /* @__PURE__ */ (0, import_jsx_runtime205.jsxs)(SheetContent, { size: "lg", children: [
      /* @__PURE__ */ (0, import_jsx_runtime205.jsx)(SheetHeader, { children: /* @__PURE__ */ (0, import_jsx_runtime205.jsxs)("div", { children: [
        /* @__PURE__ */ (0, import_jsx_runtime205.jsx)(Header1, { children: "Add your first endpoint" }),
        /* @__PURE__ */ (0, import_jsx_runtime205.jsxs)(Paragraph, { variant: "small", children: [
          "We recommend you",
          " ",
          /* @__PURE__ */ (0, import_jsx_runtime205.jsx)(TextLink, { href: docsPath("documentation/guides/cli"), children: "use the CLI" }),
          " when working in development."
        ] })
      ] }) }),
      /* @__PURE__ */ (0, import_jsx_runtime205.jsx)(SheetBody, { children: /* @__PURE__ */ (0, import_jsx_runtime205.jsxs)(
        setEndpointUrlFetcher.Form,
        {
          method: "post",
          action: `/resources/projects/${projectId}/endpoint`,
          ...form.props,
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime205.jsxs)(InputGroup, { className: "mb-4 max-w-none", children: [
              /* @__PURE__ */ (0, import_jsx_runtime205.jsx)(Header2, { children: "Environment type" }),
              /* @__PURE__ */ (0, import_jsx_runtime205.jsx)(SelectGroup3, { children: /* @__PURE__ */ (0, import_jsx_runtime205.jsxs)(Select3, { name: "environmentId", defaultValue: environments2[0].id, children: [
                /* @__PURE__ */ (0, import_jsx_runtime205.jsxs)(SelectTrigger2, { size: "secondary/small", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime205.jsx)(SelectValue2, { placeholder: "Select environment", className: "m-0 p-0" }),
                  " Environment"
                ] }),
                /* @__PURE__ */ (0, import_jsx_runtime205.jsx)(SelectContent, { children: environments2.map((environment) => /* @__PURE__ */ (0, import_jsx_runtime205.jsx)(SelectItem3, { value: environment.id, children: /* @__PURE__ */ (0, import_jsx_runtime205.jsx)(EnvironmentLabel, { environment }) }, environment.id)) })
              ] }) }),
              /* @__PURE__ */ (0, import_jsx_runtime205.jsx)(FormError, { id: environmentId.errorId, children: environmentId.error })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime205.jsxs)(InputGroup, { className: "max-w-none", children: [
              /* @__PURE__ */ (0, import_jsx_runtime205.jsx)(Header2, { children: "Endpoint URL" }),
              /* @__PURE__ */ (0, import_jsx_runtime205.jsxs)("div", { className: "flex items-center", children: [
                /* @__PURE__ */ (0, import_jsx_runtime205.jsx)(
                  Input,
                  {
                    className: "rounded-r-none",
                    ...import_react149.conform.input(url, { type: "url" }),
                    placeholder: "URL for your Trigger API route"
                  }
                ),
                /* @__PURE__ */ (0, import_jsx_runtime205.jsx)(
                  Button,
                  {
                    type: "submit",
                    variant: "primary/medium",
                    className: "rounded-l-none",
                    disabled: loadingEndpointUrl,
                    LeadingIcon: loadingEndpointUrl ? "spinner-white" : void 0,
                    children: loadingEndpointUrl ? "Saving" : "Save"
                  }
                )
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime205.jsx)(FormError, { id: url.errorId, children: url.error }),
              /* @__PURE__ */ (0, import_jsx_runtime205.jsx)(FormError, { id: form.errorId, children: form.error }),
              /* @__PURE__ */ (0, import_jsx_runtime205.jsxs)(Hint, { children: [
                "This is the URL of your Trigger API route, Typically this would be:",
                " ",
                /* @__PURE__ */ (0, import_jsx_runtime205.jsx)(InlineCode, { variant: "extra-small", children: "https://yourdomain.com/api/trigger" }),
                "."
              ] })
            ] })
          ]
        }
      ) })
    ] })
  ] });
}

// app/routes/_app.orgs.$organizationSlug.projects.$projectParam.environments/route.tsx
var import_solid81 = require("@heroicons/react/20/solid"), import_jsx_runtime206 = require("react/jsx-runtime"), loader53 = async ({ request, params }) => {
  let userId = await requireUserId(request), { projectParam: projectParam2 } = ProjectParamSchema.parse(params);
  try {
    let url = requestUrl(request), baseUrl = `${url.protocol}//${url.host}`, presenter = new EnvironmentsPresenter(), { environments: environments2, clients } = await presenter.call({
      userId,
      projectSlug: projectParam2,
      baseUrl
    });
    return (0, import_remix_typedjson52.typedjson)({
      environments: environments2,
      clients
    });
  } catch (error) {
    throw console.error(error), new Response(void 0, {
      status: 400,
      statusText: "Something went wrong, if this problem persists please contact support."
    });
  }
};
function Page42() {
  let { environments: environments2, clients } = (0, import_remix_typedjson52.useTypedLoaderData)(), [selected, setSelected] = (0, import_react152.useState)(), selectedEndpoint = (0, import_react152.useMemo)(() => {
    if (!selected)
      return;
    let client3 = clients.find((c) => c.slug === selected.client);
    if (client3) {
      if (selected.type === "PREVIEW")
        throw new Error("PREVIEW is not yet supported");
      return {
        clientSlug: selected.client,
        type: selected.type,
        endpoint: client3.endpoints[selected.type]
      };
    }
  }, [selected, clients]), isAnyClientFullyConfigured = clients.some((client3) => {
    let { DEVELOPMENT, PRODUCTION, STAGING } = client3.endpoints;
    return PRODUCTION.state === "configured" || DEVELOPMENT.state === "configured" || STAGING && STAGING.state === "configured";
  }), organization = useOrganization(), project = useProject(), revalidator = (0, import_react151.useRevalidator)(), events = useEventSource2(projectEnvironmentsStreamingPath(organization, project), {
    event: "message"
  });
  return (0, import_react152.useEffect)(() => {
    events !== null && revalidator.revalidate();
  }, [events]), /* @__PURE__ */ (0, import_jsx_runtime206.jsxs)(PageContainer, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime206.jsxs)(NavBar, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime206.jsx)(PageTitle, { title: "Environments & API Keys" }),
      /* @__PURE__ */ (0, import_jsx_runtime206.jsx)(PageAccessories, { children: /* @__PURE__ */ (0, import_jsx_runtime206.jsx)(
        LinkButton,
        {
          variant: "minimal/small",
          LeadingIcon: import_solid81.BookOpenIcon,
          to: docsPath("/documentation/concepts/environments-endpoints#environments"),
          children: "Environments documentation"
        }
      ) })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime206.jsx)(PageBody, { children: /* @__PURE__ */ (0, import_jsx_runtime206.jsx)(Help, { defaultOpen: !isAnyClientFullyConfigured, children: (open) => /* @__PURE__ */ (0, import_jsx_runtime206.jsxs)("div", { className: cn("grid h-full gap-4", open ? "grid-cols-2" : "grid-cols-1"), children: [
      /* @__PURE__ */ (0, import_jsx_runtime206.jsxs)("div", { children: [
        /* @__PURE__ */ (0, import_jsx_runtime206.jsxs)("div", { className: "mb-2 flex items-center justify-between gap-x-2", children: [
          /* @__PURE__ */ (0, import_jsx_runtime206.jsx)(Header2, { children: "API Keys" }),
          /* @__PURE__ */ (0, import_jsx_runtime206.jsx)(HelpTrigger, { title: "How do I use API Keys and Endpoints?" })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime206.jsxs)("div", { className: "mb-8", children: [
          /* @__PURE__ */ (0, import_jsx_runtime206.jsxs)(Paragraph, { variant: "small", spacing: !0, children: [
            "Server API keys should be used on your server \u2013 they give full API access.",
            " ",
            /* @__PURE__ */ (0, import_jsx_runtime206.jsx)("br", {}),
            "Public API keys should be used in your frontend \u2013 they have limited read-only access."
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime206.jsx)("div", { className: "mt-4 flex flex-col gap-6", children: environments2.map((environment) => /* @__PURE__ */ (0, import_jsx_runtime206.jsxs)("div", { className: "w-[400px]", children: [
            /* @__PURE__ */ (0, import_jsx_runtime206.jsxs)("div", { className: "flex justify-between", children: [
              /* @__PURE__ */ (0, import_jsx_runtime206.jsxs)(Header3, { className: "flex items-center gap-1", children: [
                /* @__PURE__ */ (0, import_jsx_runtime206.jsx)(EnvironmentLabel, { environment }),
                " Environment"
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime206.jsx)(
                RegenerateApiKeyModal,
                {
                  id: environment.id,
                  title: environmentTitle(environment)
                }
              )
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime206.jsxs)("div", { className: "mt-3 inline-flex w-full flex-col gap-3", children: [
              /* @__PURE__ */ (0, import_jsx_runtime206.jsx)(
                ClipboardField,
                {
                  className: "w-full max-w-none",
                  secure: !0,
                  value: environment.apiKey,
                  variant: "secondary/medium",
                  icon: /* @__PURE__ */ (0, import_jsx_runtime206.jsx)(Badge, { variant: "outline", children: "Server" })
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime206.jsx)(
                ClipboardField,
                {
                  className: "w-full max-w-none",
                  value: environment.pkApiKey,
                  variant: "secondary/medium",
                  icon: /* @__PURE__ */ (0, import_jsx_runtime206.jsx)(Badge, { variant: "outline", children: "Public" })
                }
              )
            ] })
          ] }, environment.id)) })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime206.jsx)(Header2, { className: "mb-2", children: "Endpoints" }),
        /* @__PURE__ */ (0, import_jsx_runtime206.jsx)("div", { className: "flex flex-col gap-4", children: clients.length > 0 ? clients.map((client3) => /* @__PURE__ */ (0, import_jsx_runtime206.jsxs)("div", { children: [
          /* @__PURE__ */ (0, import_jsx_runtime206.jsx)(Header3, { className: "mb-2", children: client3.slug }),
          /* @__PURE__ */ (0, import_jsx_runtime206.jsxs)(Table, { children: [
            /* @__PURE__ */ (0, import_jsx_runtime206.jsx)(TableHeader, { children: /* @__PURE__ */ (0, import_jsx_runtime206.jsxs)(TableRow, { children: [
              /* @__PURE__ */ (0, import_jsx_runtime206.jsx)(TableHeaderCell, { children: "Environment" }),
              /* @__PURE__ */ (0, import_jsx_runtime206.jsx)(TableHeaderCell, { children: "Url" }),
              /* @__PURE__ */ (0, import_jsx_runtime206.jsx)(TableHeaderCell, { children: "Last refreshed" }),
              /* @__PURE__ */ (0, import_jsx_runtime206.jsx)(TableHeaderCell, { children: "Last refresh Status" }),
              /* @__PURE__ */ (0, import_jsx_runtime206.jsx)(TableHeaderCell, { children: "Jobs" }),
              /* @__PURE__ */ (0, import_jsx_runtime206.jsx)(TableHeaderCell, { hiddenLabel: !0, children: "Go to page" })
            ] }) }),
            /* @__PURE__ */ (0, import_jsx_runtime206.jsxs)(TableBody, { children: [
              /* @__PURE__ */ (0, import_jsx_runtime206.jsx)(
                EndpointRow,
                {
                  endpoint: client3.endpoints.DEVELOPMENT,
                  type: "DEVELOPMENT",
                  onClick: () => setSelected({
                    client: client3.slug,
                    type: "DEVELOPMENT"
                  })
                }
              ),
              client3.endpoints.STAGING && /* @__PURE__ */ (0, import_jsx_runtime206.jsx)(
                EndpointRow,
                {
                  endpoint: client3.endpoints.STAGING,
                  type: "STAGING",
                  onClick: () => setSelected({
                    client: client3.slug,
                    type: "STAGING"
                  })
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime206.jsx)(
                EndpointRow,
                {
                  endpoint: client3.endpoints.PRODUCTION,
                  type: "PRODUCTION",
                  onClick: () => setSelected({
                    client: client3.slug,
                    type: "PRODUCTION"
                  })
                }
              )
            ] })
          ] })
        ] }, client3.slug)) : /* @__PURE__ */ (0, import_jsx_runtime206.jsx)(Paragraph, { children: /* @__PURE__ */ (0, import_jsx_runtime206.jsx)(FirstEndpointSheet, { projectId: project.id, environments: environments2 }) }) }),
        selectedEndpoint && selectedEndpoint.endpoint && /* @__PURE__ */ (0, import_jsx_runtime206.jsx)(
          ConfigureEndpointSheet,
          {
            slug: selectedEndpoint.clientSlug,
            endpoint: selectedEndpoint.endpoint,
            type: selectedEndpoint.type,
            onClose: () => setSelected(void 0)
          }
        )
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime206.jsx)(HelpContent, { title: "How to use API Keys and Endpoints", children: /* @__PURE__ */ (0, import_jsx_runtime206.jsx)(HowToUseApiKeysAndEndpoints, {}) })
    ] }) }) })
  ] });
}
function EndpointRow({
  endpoint,
  type,
  onClick
}) {
  switch (endpoint.state) {
    case "unconfigured":
      return /* @__PURE__ */ (0, import_jsx_runtime206.jsxs)(TableRow, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime206.jsx)(TableCell, { onClick, children: /* @__PURE__ */ (0, import_jsx_runtime206.jsx)("div", { className: "flex", children: /* @__PURE__ */ (0, import_jsx_runtime206.jsx)(EnvironmentLabel, { environment: { type } }) }) }),
        /* @__PURE__ */ (0, import_jsx_runtime206.jsx)(TableCell, { onClick, colSpan: 5, alignment: "right", children: /* @__PURE__ */ (0, import_jsx_runtime206.jsxs)("div", { className: "flex items-center justify-end gap-4", children: [
          /* @__PURE__ */ (0, import_jsx_runtime206.jsxs)("span", { className: "text-sun-400/50", children: [
            "The ",
            environmentTitle({ type }),
            " environment is not configured"
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime206.jsx)(ButtonContent, { variant: "tertiary/small", children: "Configure" })
        ] }) })
      ] });
    case "configured":
      return /* @__PURE__ */ (0, import_jsx_runtime206.jsxs)(TableRow, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime206.jsx)(TableCell, { onClick, children: /* @__PURE__ */ (0, import_jsx_runtime206.jsx)("div", { className: "flex", children: /* @__PURE__ */ (0, import_jsx_runtime206.jsx)(EnvironmentLabel, { environment: { type } }) }) }),
        /* @__PURE__ */ (0, import_jsx_runtime206.jsx)(TableCell, { onClick, children: endpoint.url }),
        /* @__PURE__ */ (0, import_jsx_runtime206.jsx)(TableCell, { onClick, children: endpoint.latestIndex ? /* @__PURE__ */ (0, import_jsx_runtime206.jsx)(DateTime, { date: endpoint.latestIndex.updatedAt }) : "\u2013" }),
        /* @__PURE__ */ (0, import_jsx_runtime206.jsx)(TableCell, { onClick, children: endpoint.latestIndex ? /* @__PURE__ */ (0, import_jsx_runtime206.jsxs)("div", { className: "flex items-center gap-1", children: [
          /* @__PURE__ */ (0, import_jsx_runtime206.jsx)(EndpointIndexStatusIcon, { status: endpoint.latestIndex.status }),
          /* @__PURE__ */ (0, import_jsx_runtime206.jsx)(EndpointIndexStatusLabel, { status: endpoint.latestIndex.status })
        ] }) : "\u2013" }),
        /* @__PURE__ */ (0, import_jsx_runtime206.jsx)(TableCell, { onClick, children: endpoint.latestIndex?.stats?.jobs ?? "\u2013" }),
        /* @__PURE__ */ (0, import_jsx_runtime206.jsx)(TableCellChevron, { onClick })
      ] });
  }
}

// app/routes/_app.orgs.$organizationSlug.projects.$projectParam.setup._index/route.tsx
var route_exports64 = {};
__export(route_exports64, {
  default: () => Page43
});

// app/components/frameworks/FrameworkSelector.tsx
var import_solid82 = require("@heroicons/react/20/solid"), import_react153 = require("@remix-run/react");

// app/assets/logos/AstroLogo.tsx
var import_jsx_runtime207 = require("react/jsx-runtime");
function AstroLogo({ className }) {
  return /* @__PURE__ */ (0, import_jsx_runtime207.jsxs)("svg", { className, viewBox: "0 0 184 49", fill: "none", xmlns: "http://www.w3.org/2000/svg", children: [
    /* @__PURE__ */ (0, import_jsx_runtime207.jsxs)("g", { clipPath: "url(#clip0_5336_22429)", children: [
      /* @__PURE__ */ (0, import_jsx_runtime207.jsx)("mask", { id: "mask0_5336_22429", maskUnits: "userSpaceOnUse", x: "0", y: "0", width: "184", height: "49", children: /* @__PURE__ */ (0, import_jsx_runtime207.jsx)("path", { d: "M184 0H0V48.4533H184V0Z", fill: "white" }) }),
      /* @__PURE__ */ (0, import_jsx_runtime207.jsxs)("g", { mask: "url(#mask0_5336_22429)", children: [
        /* @__PURE__ */ (0, import_jsx_runtime207.jsx)(
          "path",
          {
            d: "M12.4424 40.9986C10.2625 39.0108 9.62608 34.8341 10.5343 31.8083C12.1092 33.716 14.2912 34.3203 16.5514 34.6615C20.0406 35.1879 23.4674 34.991 26.7087 33.4002C27.0795 33.218 27.4221 32.9759 27.8273 32.7306C28.1315 33.6107 28.2106 34.4993 28.1044 35.4037C27.8461 37.6063 26.7472 39.3077 24.9995 40.5974C24.3006 41.1133 23.5611 41.5744 22.8393 42.0609C20.6218 43.5559 20.0219 45.3089 20.8551 47.8589C20.8749 47.921 20.8926 47.9831 20.9374 48.1347C19.8053 47.6293 18.9783 46.8934 18.3481 45.9258C17.6825 44.9046 17.3659 43.7749 17.3492 42.5525C17.3409 41.9577 17.3409 41.3576 17.2607 40.7711C17.0649 39.3413 16.3921 38.7013 15.1245 38.6644C13.8236 38.6265 12.7945 39.4287 12.5216 40.6921C12.5008 40.789 12.4706 40.8849 12.4404 40.9975L12.4424 40.9986Z",
            fill: "url(#paint0_linear_5336_22429)"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime207.jsx)(
          "path",
          {
            d: "M0 31.3041C0 31.3041 6.45527 28.1673 12.9286 28.1673L17.8093 13.1001C17.992 12.3714 18.5256 11.8762 19.1278 11.8762C19.7302 11.8762 20.2637 12.3714 20.4464 13.1001L25.3271 28.1673C32.9938 28.1673 38.2557 31.3041 38.2557 31.3041C38.2557 31.3041 27.2909 1.50808 27.2694 1.44829C26.9547 0.567361 26.4234 0 25.7072 0H12.5496C11.8333 0 11.3235 0.567361 10.9874 1.44829C10.9637 1.50695 0 31.3041 0 31.3041Z",
            fill: "white"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime207.jsx)(
          "path",
          {
            d: "M68.0598 26.9653C68.0598 29.6056 64.7674 31.1825 60.2089 31.1825C57.2422 31.1825 56.1929 30.4491 56.1929 28.9089C56.1929 27.2954 57.4954 26.5253 60.4622 26.5253C63.1396 26.5253 65.4188 26.5619 68.0598 26.892V26.9653ZM68.096 23.7016C66.4682 23.3349 64.0081 23.1149 61.0773 23.1149C52.5388 23.1149 48.5228 25.1318 48.5228 29.8257C48.5228 34.7029 51.2725 36.5731 57.6402 36.5731C63.031 36.5731 66.6853 35.2163 68.0236 31.8792H68.2407C68.2045 32.6859 68.1683 33.4927 68.1683 34.1161C68.1683 35.8396 68.4578 35.9864 69.8691 35.9864H76.5262C76.1644 34.9596 75.9472 32.0626 75.9472 29.5689C75.9472 26.892 76.0558 24.8751 76.0558 22.1615C76.0558 16.6241 72.7272 13.1037 62.3073 13.1037C57.821 13.1037 52.8282 13.8738 49.0293 15.0106C49.3911 16.5141 49.8977 19.5578 50.1509 21.538C53.4433 19.9979 58.1105 19.3378 61.7283 19.3378C66.7215 19.3378 68.096 20.4745 68.096 22.7848V23.7016Z",
            fill: "white"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime207.jsx)(
          "path",
          {
            d: "M86.3622 28.5055C85.4576 28.6155 84.2278 28.6155 82.9613 28.6155C81.6224 28.6155 80.3927 28.5788 79.5604 28.4688C79.5604 28.7622 79.5242 29.0922 79.5242 29.3856C79.5242 33.9695 82.5271 36.6464 93.0917 36.6464C103.041 36.6464 106.261 34.0062 106.261 29.3489C106.261 24.9484 104.127 22.7848 94.6833 22.3081C87.3393 21.9781 86.6879 21.1713 86.6879 20.2545C86.6879 19.1911 87.6288 18.641 92.5489 18.641C97.6506 18.641 99.0251 19.3378 99.0251 20.8046V21.1346C99.7489 21.098 101.052 21.0613 102.39 21.0613C103.656 21.0613 105.031 21.098 105.827 21.1713C105.827 20.8413 105.863 20.5479 105.863 20.2912C105.863 14.9006 101.377 13.1404 92.6937 13.1404C82.9251 13.1404 79.6327 15.524 79.6327 20.1812C79.6327 24.3617 82.2738 26.9653 91.6443 27.3687C98.5547 27.5887 99.3146 28.3588 99.3146 29.4223C99.3146 30.559 98.1928 31.0725 93.345 31.0725C87.7735 31.0725 86.3622 30.3024 86.3622 28.7255V28.5055Z",
            fill: "white"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime207.jsx)(
          "path",
          {
            d: "M118.203 9.17995C115.562 11.6369 110.822 14.0939 108.181 14.7539C108.217 16.1107 108.217 18.6044 108.217 19.9612L110.641 19.9979C110.605 22.6015 110.569 25.7552 110.569 27.8454C110.569 32.7226 113.137 36.3897 121.133 36.3897C124.498 36.3897 126.741 36.023 129.527 35.4363C129.237 33.6394 128.912 30.8891 128.804 28.7988C127.139 29.3489 125.041 29.6423 122.725 29.6423C119.505 29.6423 118.203 28.7622 118.203 26.2319C118.203 24.0316 118.203 21.9781 118.239 20.0712C122.364 20.1078 126.488 20.1812 128.912 20.2545C128.876 18.3477 128.948 15.5973 129.057 13.7638C125.547 13.8371 121.604 13.8738 118.348 13.8738C118.384 12.2603 118.42 10.7201 118.456 9.17995H118.203Z",
            fill: "white"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime207.jsx)(
          "path",
          {
            d: "M139.812 18.861C139.848 16.9541 139.884 15.3406 139.92 13.7638H132.648C132.757 16.9175 132.757 20.1445 132.757 24.8751C132.757 29.6056 132.72 32.8693 132.648 35.9864H140.969C140.824 33.7861 140.788 30.0823 140.788 26.9286C140.788 21.9414 142.815 20.5112 147.409 20.5112C149.544 20.5112 151.063 20.768 152.402 21.2446C152.438 19.3745 152.8 15.744 153.017 14.1305C151.642 13.7271 150.123 13.4705 148.278 13.4705C144.334 13.4338 141.44 15.0473 140.101 18.8977L139.812 18.861Z",
            fill: "white"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime207.jsx)(
          "path",
          {
            d: "M176.038 24.7284C176.038 28.7255 173.143 30.5957 168.584 30.5957C164.062 30.5957 161.167 28.8355 161.167 24.7284C161.167 20.6213 164.098 19.0811 168.584 19.0811C173.107 19.0811 176.038 20.7313 176.038 24.7284ZM183.599 24.5451C183.599 16.5875 177.376 13.0304 168.584 13.0304C159.757 13.0304 153.75 16.5875 153.75 24.5451C153.75 32.4659 159.359 36.7198 168.548 36.7198C177.81 36.7198 183.599 32.4659 183.599 24.5451Z",
            fill: "white"
          }
        )
      ] })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime207.jsxs)("defs", { children: [
      /* @__PURE__ */ (0, import_jsx_runtime207.jsxs)(
        "linearGradient",
        {
          id: "paint0_linear_5336_22429",
          x1: "10.1338",
          y1: "48.1347",
          x2: "31.1641",
          y2: "38.1736",
          gradientUnits: "userSpaceOnUse",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime207.jsx)("stop", { stopColor: "#D83333" }),
            /* @__PURE__ */ (0, import_jsx_runtime207.jsx)("stop", { offset: "1", stopColor: "#F041FF" })
          ]
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime207.jsx)("clipPath", { id: "clip0_5336_22429", children: /* @__PURE__ */ (0, import_jsx_runtime207.jsx)("rect", { width: "184", height: "48.4533", fill: "white" }) })
    ] })
  ] });
}

// app/assets/logos/NestjsLogo.tsx
var import_jsx_runtime208 = require("react/jsx-runtime");
function NestjsLogo({ className }) {
  return /* @__PURE__ */ (0, import_jsx_runtime208.jsxs)("svg", { className, viewBox: "0 0 184 74", fill: "none", xmlns: "http://www.w3.org/2000/svg", children: [
    /* @__PURE__ */ (0, import_jsx_runtime208.jsx)(
      "path",
      {
        fillRule: "evenodd",
        clipRule: "evenodd",
        d: "M43.4143 1.5614C42.9043 1.5614 42.4209 1.674 41.9904 1.82633C42.9176 2.44891 43.4342 3.27018 43.6925 4.21067C43.7124 4.34313 43.7455 4.42923 43.7587 4.55507C43.772 4.68091 43.7985 4.77364 43.7985 4.88623C43.8647 6.49566 43.3812 6.69436 43.0302 7.6481C42.7813 8.22424 42.6748 8.85186 42.7197 9.47786C42.7647 10.1039 42.9598 10.7098 43.2885 11.2445C43.3469 11.3865 43.4202 11.5219 43.5071 11.6485C42.8116 7.02552 46.6663 6.33008 47.3816 4.89286C47.4346 3.56822 46.3881 2.79331 45.5735 2.20385C44.9271 1.79632 44.1784 1.58044 43.4143 1.58127V1.5614ZM49.2229 2.60124C49.1566 3.0185 49.203 2.91253 49.1831 3.13109L49.1434 3.60796L49.0109 4.04509C48.9706 4.19341 48.9219 4.33935 48.8652 4.48222L48.6665 4.89948C48.6135 4.96571 48.5738 5.04519 48.5208 5.11804L48.4082 5.28362L48.1433 5.6479C48.0307 5.76049 47.9446 5.88633 47.8121 5.97906C47.6797 6.07178 47.5936 6.19762 47.4677 6.29035C47.0836 6.58177 46.6464 6.80033 46.2424 7.08513C46.11 7.17785 45.9775 7.25071 45.8782 7.35005C45.7788 7.4494 45.6397 7.5355 45.5337 7.64147C45.4278 7.74744 45.3152 7.86004 45.2026 7.98588C45.09 8.11172 45.0039 8.22431 44.9377 8.35015L44.6727 8.7343L44.474 9.15156L44.3283 9.56882L44.1959 10.0324C44.176 10.0987 44.176 10.198 44.1561 10.2709C44.1363 10.3437 44.1363 10.4166 44.1164 10.4894L44.0965 10.9531C44.0939 11.0638 44.1005 11.1746 44.1164 11.2842C44.1164 11.4299 44.1363 11.5756 44.1694 11.7478C44.2025 11.92 44.2224 12.0393 44.2621 12.185L44.4078 12.6221C44.4475 12.7148 44.5005 12.8075 44.5403 12.887L40.3412 11.2577L38.2218 10.708L37.0693 10.4431C35.9698 10.2249 34.8602 10.0613 33.7445 9.95296C32.6272 9.82979 31.504 9.76788 30.3799 9.76751L27.9956 9.86023C26.8748 9.94078 25.7586 10.0756 24.6509 10.2642L23.8296 10.41L22.1871 10.7742L21.3658 10.9928L20.571 11.3372L19.9749 11.6021L19.3788 11.8935C19.3259 11.9134 19.2861 11.9333 19.2464 11.9465L18.6768 12.238C18.5443 12.2909 18.4119 12.3704 18.3125 12.4234C18.2595 12.4631 18.18 12.4896 18.1469 12.5161L17.6701 12.7811C17.5045 12.8738 17.3588 12.9665 17.2329 13.046L16.8687 13.3109L16.4713 13.6023L16.16 13.8673C15.9613 14.013 15.8686 14.1057 15.7758 14.1785L15.3784 14.5627L15.0142 14.9071L14.7029 15.2383C14.6631 15.278 14.6102 15.3045 14.5704 15.3508C14.4777 15.4634 14.3717 15.5694 14.2591 15.682L13.769 16.2119L12.7755 17.159C12.4526 17.4471 12.1119 17.7147 11.7556 17.9604L10.6561 18.6558C10.2828 18.861 9.89804 19.0445 9.50369 19.2055C9.11955 19.3711 8.70891 19.5168 8.31152 19.6427C7.54323 19.8082 6.7617 20.1195 6.07951 20.1725C5.9338 20.1725 5.76822 20.2123 5.61589 20.2255L5.15227 20.3381L4.71514 20.5037C4.56943 20.5567 4.42372 20.6361 4.27801 20.7024C4.1323 20.7686 4.01308 20.8679 3.88062 20.9673C3.75103 21.0611 3.62922 21.1652 3.51634 21.2786C3.38388 21.3713 3.25142 21.4971 3.15207 21.6097L2.84078 21.974C2.74805 22.1197 2.64208 22.2389 2.57585 22.3913C2.50962 22.5436 2.3904 22.6562 2.31093 22.8085L2.11223 23.2854L1.94665 23.7623L1.85393 24.1994C1.80094 24.418 1.80094 24.6365 1.78769 24.7491C1.77445 24.8617 1.74796 24.9876 1.74796 25.1134C1.74796 25.1796 1.74796 25.279 1.76782 25.3518C1.78769 25.4843 1.80756 25.5903 1.83406 25.6962L1.96652 26.0274C2.01951 26.1599 2.09898 26.2658 2.16521 26.3718L2.40365 26.703L2.71494 26.9944C2.82753 27.107 2.9335 27.1931 3.05934 27.2858C3.49647 27.6699 3.60907 27.7958 4.17204 28.0806C4.26476 28.1336 4.35749 28.1733 4.46346 28.2263C4.55618 28.4912 4.59592 28.6237 4.62904 28.776C4.66215 28.9283 4.72176 29.0873 4.77475 29.2131L4.92046 29.5443L5.18538 30.0344L5.45031 30.4186L5.7616 30.763C5.87419 30.8756 5.98016 30.9617 6.106 31.0743L6.47028 31.3392C6.59832 31.4294 6.73343 31.5091 6.87429 31.5776C7.00676 31.6439 7.13922 31.7233 7.29155 31.7763C7.40415 31.8293 7.52998 31.869 7.65582 31.9088C7.78167 31.9485 7.89426 31.975 7.96711 32.0015C7.91413 32.995 7.90088 33.9885 8.03335 34.2534C8.19893 34.6177 9.00033 33.505 9.80836 32.2267C9.69576 33.5513 9.62291 34.9687 9.80836 35.4058C9.9938 35.8429 11.1065 34.4388 12.0602 32.8625C25.0152 29.8688 36.8309 38.8234 38.0893 51.4604C37.8509 49.4867 35.4202 48.3939 34.3141 48.6654C33.7644 50.0165 32.8371 51.7518 31.3337 52.838C31.4637 51.6171 31.4011 50.3834 31.1482 49.182C30.7508 50.8643 29.956 52.4274 28.8831 53.7851C28.0463 53.842 27.2084 53.6917 26.4436 53.3474C25.6788 53.0031 25.0107 52.4756 24.4986 51.8114C24.4323 51.7584 24.4058 51.6458 24.3528 51.573L24.1608 51.1226C24.1078 50.9901 24.068 50.8577 24.0482 50.7385C24.0283 50.6192 24.0283 50.4735 24.0283 50.3411V50.0761C24.0482 49.9437 24.0813 49.8112 24.121 49.692L24.2535 49.3079C24.3197 49.1754 24.386 49.0429 24.4721 48.9237C24.7833 48.0494 24.7833 47.3341 24.2071 46.9169C24.0945 46.8507 23.9886 46.7844 23.8627 46.7314C23.7965 46.7116 23.6971 46.6785 23.6243 46.6652L23.4786 46.6122L23.0944 46.5195C22.9695 46.484 22.8402 46.4661 22.7103 46.4665C22.5767 46.4441 22.4417 46.4308 22.3063 46.4268C22.2136 46.4268 22.1208 46.4466 22.0414 46.4466C21.8956 46.4466 21.7764 46.4665 21.644 46.4996L21.2598 46.5659L20.8757 46.6983L20.5114 46.8639L20.167 47.0493C15.9083 49.8311 18.445 56.3218 21.3592 58.216C20.2597 58.4147 19.147 58.6531 18.8424 58.8916C19.5908 59.4016 20.4121 59.8056 21.2731 60.2162L24.2336 61.0905C25.7451 61.4146 27.2938 61.5304 28.8367 61.4349C36.9302 60.8653 43.5667 54.7124 44.7721 46.599L44.8847 47.0758L45.0503 48.0958C45.09 48.2813 45.1032 48.4402 45.1165 48.5859L45.1562 49.1356L45.196 49.7317V50.0232C45.196 50.1159 45.2158 50.2218 45.2158 50.3146C45.2158 50.4073 45.196 50.5331 45.196 50.6457V50.9107C45.196 51.0431 45.1761 51.1491 45.1761 51.2749C45.1761 51.3412 45.1761 51.4206 45.1562 51.5134L45.1364 51.9108C45.1165 51.9637 45.1165 52.0234 45.1165 52.0763L45.0635 52.4936C45.0635 52.5466 45.0635 52.6062 45.0436 52.6592L44.9774 53.189V53.2221L44.8648 53.7321L44.7522 54.2818L44.4608 55.4078L44.2753 55.9906L43.878 57.0503L43.6594 57.5802L43.3945 58.0902C43.3746 58.1432 43.3547 58.1829 43.3415 58.2226C42.1236 60.6619 40.3522 62.7826 38.1688 64.4153C38.0231 64.508 37.8774 64.614 37.7316 64.7266C37.6919 64.7663 37.6389 64.7796 37.5992 64.8193L37.2018 65.0842L37.2548 65.1968H37.2747L38.0429 65.0842H38.0628L39.4868 64.8193C39.6193 64.7995 39.7517 64.7663 39.8842 64.7266L40.1491 64.6736L40.5333 64.6074L40.8644 64.5146C42.6749 64.0731 44.4469 63.4861 46.1629 62.7595C43.2275 66.7597 39.3234 69.9481 34.8175 72.0253C36.9271 71.8856 39.0161 71.5237 41.0499 70.9458C48.4148 68.7734 54.6075 63.8192 58.3165 57.1497C57.568 61.3686 55.8858 65.3889 53.4021 68.8992C55.1771 67.7269 56.7998 66.3824 58.2834 64.8458C62.3765 60.5672 65.0655 55.1429 65.9662 49.3145C66.5888 52.2022 66.761 55.1826 66.4961 58.1233C79.6894 39.7241 67.5955 20.6494 62.5222 15.6224C62.456 15.7549 62.4295 15.9668 62.4162 16.192L62.2308 17.4173L61.9195 18.6227L61.4823 19.795L60.9326 20.9077L60.2703 21.9475L59.5219 22.941C59.257 23.2722 58.9523 23.5636 58.6609 23.855L58.131 24.3186L57.7138 24.6829C57.3887 24.9419 57.048 25.1808 56.6938 25.3982L55.6142 26.0208L54.4618 26.5308C54.073 26.6779 53.6774 26.8061 53.2762 26.9149L52.051 27.1798C51.6337 27.2461 51.2098 27.2924 50.8058 27.3255L49.9315 27.3653C49.5143 27.3653 49.0904 27.3255 48.6864 27.299C48.2677 27.2681 47.8517 27.2084 47.4412 27.1202C47.024 27.054 46.6199 26.9348 46.2159 26.8089H46.1961L47.4015 26.6632L48.6268 26.3983L49.8189 26.0142C50.2163 25.8684 50.6137 25.683 50.9714 25.5042C51.3475 25.3214 51.7144 25.1202 52.0708 24.9015L53.0908 24.2391C53.4188 23.985 53.7307 23.7107 54.0247 23.4179C54.33 23.1381 54.6176 22.8394 54.8857 22.5237L55.654 21.5303C55.6937 21.4773 55.7202 21.3978 55.7665 21.3448L56.2964 20.4706L56.8461 19.3579L57.2833 18.1856C57.4157 17.8014 57.5018 17.3908 57.5945 16.9934L57.78 15.7681L57.8462 14.5229L57.8131 13.6487L57.6674 12.4234L57.4025 11.1981L57.0051 10.0258C56.8594 9.64167 56.6739 9.25753 56.4951 8.89987L55.8725 7.8203L55.2102 6.81358L54.3691 5.88633L53.8922 5.42271L51.3555 3.63445C51.2231 3.56822 51.1171 3.50199 50.9912 3.449C50.3952 3.06486 49.8189 2.86617 49.256 2.68072L49.2229 2.60124Z",
        fill: "#EA2845"
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime208.jsx)(
      "path",
      {
        d: "M85.796 49.1754C86.22 48.9738 86.6671 48.8248 87.1273 48.7316C88.1539 48.5661 88.7367 48.427 88.9023 48.3144C89.1805 48.1488 89.3659 47.917 89.4586 47.7051C89.5712 47.3077 89.6242 46.5129 89.6242 45.2346V42.8172L89.6507 40.8435L89.5646 37.8961V36.1542C89.5646 34.9886 89.4785 34.015 89.2864 33.293C89.2334 33.0149 88.9818 32.7367 88.591 32.4585C88.0611 32.0611 87.2664 31.7101 85.955 31.3458L85.9285 30.0212L86.5643 29.8887C86.763 29.8622 87.5114 29.6635 88.8162 29.3324L90.7899 28.5575L91.2535 28.3058C91.4905 28.1041 91.7405 27.9183 92.0019 27.7494C92.7503 27.1597 93.4223 26.4788 94.0021 25.7227L95.4725 25.6102L95.4195 28.7495C95.393 29.0542 95.393 29.3059 95.393 29.498L95.4195 30.7762C96.9759 29.4516 98.3668 28.5243 99.6451 27.9945C101.128 27.3396 102.727 26.9905 104.348 26.9679C105.98 26.935 107.584 27.3893 108.957 28.2727C110.255 29.1337 111.143 30.1272 111.607 31.2531C112.07 32.379 112.216 34.6971 112.216 38.1147L112.103 47.2282C112.097 47.5918 112.174 47.952 112.328 48.2813C112.82 48.5064 113.346 48.6475 113.885 48.6985L115.249 48.9502C115.423 49.2129 115.511 49.523 115.501 49.8377L115.474 50.7517L110.004 50.3543L108.394 50.4073H107.116L103.42 50.6855H102.473C102.447 50.4338 102.447 50.2682 102.447 50.1291L102.5 49.0429C102.751 48.99 103.414 48.9105 104.447 48.7648C104.725 48.7383 105.03 48.6522 105.394 48.5661C105.758 48.4336 105.977 48.2614 106.03 48.1223C106.162 47.7912 106.255 47.2083 106.255 46.3142L106.202 42.7046L106.229 39.4791C106.229 35.5317 106.003 33.0877 105.566 32.1472C104.904 30.7299 103.791 30.0278 102.374 30.0278C101.252 30.0541 100.15 30.3302 99.1483 30.8358C97.8745 31.4591 96.704 32.2745 95.6778 33.2533L95.6248 33.7169L95.6778 35.4654L95.6513 37.3199L95.7639 41.7906L95.7109 42.486C95.7109 45.5128 95.8235 47.2348 96.0752 47.6256C96.3269 48.0163 97.2409 48.4336 98.8569 48.9039L98.943 49.5993C98.943 49.8245 98.8569 50.1556 98.7443 50.6259L97.274 50.6524C96.6597 50.6336 96.0471 50.5783 95.4394 50.4868L92.3795 50.4603L85.9351 50.659C85.858 50.4745 85.8197 50.2761 85.8225 50.0762L85.849 49.1886L85.796 49.1754ZM118.607 35.8893C119.104 34.2998 119.521 33.2533 119.912 32.7499C120.939 31.2266 122.051 30.1007 123.224 29.1734C124.396 28.2462 125.475 27.7561 126.416 27.4779C127.387 27.1645 128.397 26.9862 129.416 26.948C130.837 26.9095 132.256 27.0497 133.642 27.3653C134.613 27.5703 135.536 27.9568 136.364 28.5045C137.278 29.1362 138.116 29.8719 138.861 30.6967C139.515 31.4836 140.032 32.3747 140.391 33.3328C140.834 34.4946 141.07 35.7254 141.086 36.9689L137.973 36.9159C136.093 36.8727 134.214 36.7888 132.337 36.6642L130.112 36.5516L127.111 36.5781H124.694L124.641 37.2404C124.641 38.2339 124.773 39.2671 125.005 40.3798C125.237 41.4925 125.615 42.4065 126.091 43.241C126.563 44.0477 127.175 44.7633 127.9 45.3538C128.562 45.9632 129.37 46.3804 130.125 46.6586L131.734 47.1884L134.622 47.056C135.418 46.8934 136.198 46.6607 136.953 46.3605C137.824 45.9443 138.652 45.4429 139.424 44.8637L141.119 46.1883C139.483 47.9634 137.755 49.3012 136.006 50.1623C134.258 51.0233 132.284 51.3544 130.045 51.3544C128.575 51.3544 127.376 51.2418 126.436 50.957C125.236 50.6438 124.098 50.1287 123.071 49.4337C122.066 48.7183 121.173 47.8566 120.422 46.8772C119.627 45.8837 119.144 44.7909 118.786 43.7113C118.342 42.2939 118.091 41.1547 118.091 40.3202C118.076 38.8469 118.209 37.3758 118.488 35.9291L118.607 35.8893ZM134.834 34.6971C134.807 33.6374 134.609 32.6705 134.225 31.6968C133.841 30.7232 133.231 30.0278 132.39 29.5112C131.664 29.0049 130.805 28.7239 129.92 28.7032C128.595 28.7032 127.555 29.2595 126.529 30.3391C125.502 31.4187 124.972 32.9884 124.833 34.8097L131.191 34.8362L132.913 34.7501L134.079 34.664L134.827 34.6905L134.834 34.6971ZM145.431 42.7907C145.834 42.6992 146.244 42.6438 146.656 42.6251L147.239 42.6516L147.491 42.9297L149.491 46.1552C150.127 46.9037 150.769 47.5196 151.478 47.9899C151.895 48.268 152.564 48.5992 153.478 48.9039C154.112 49.1285 154.78 49.2406 155.452 49.235C156.558 49.2634 157.632 48.8649 158.452 48.1223C159.287 47.3474 159.777 46.5328 159.777 45.6519C159.777 45.069 159.611 44.5657 159.313 44.155C159.015 43.7444 158.366 43.3205 157.426 42.8304C156.962 42.6317 155.79 42.3005 153.895 41.8369L150.663 40.9229C149.809 40.604 149.019 40.1327 148.332 39.5321C147.68 38.9701 147.15 38.2803 146.776 37.5054C146.312 36.4457 146.113 35.5317 146.113 34.8561C146.113 33.4387 146.338 32.2996 146.723 31.3856C147.145 30.4827 147.739 29.6706 148.471 28.9946C149.001 28.4647 149.796 28.0011 150.889 27.5772C152.005 27.151 153.191 26.9355 154.386 26.9414C155.95 26.9205 157.513 27.0424 159.055 27.3057C160.231 27.5043 161.373 27.8701 162.446 28.3919C162.578 28.8091 162.724 29.8092 162.943 31.3392L163.247 34.0878C163.247 34.2203 163.221 34.366 163.161 34.5051C162.764 34.6334 162.353 34.7091 161.936 34.7303C161.77 34.7303 161.492 34.7038 161.128 34.6773C160.89 34.2985 160.669 33.9096 160.466 33.5116C159.578 31.8426 158.658 30.6769 157.717 30.0146C156.777 29.3522 155.717 28.988 154.405 28.988C153.094 28.988 152.041 29.3854 151.18 30.1007C150.865 30.3764 150.616 30.7197 150.452 31.105C150.288 31.4904 150.213 31.9077 150.233 32.326C150.233 32.9354 150.564 33.5513 151.226 34.1805C151.889 34.8097 153.001 35.3197 154.617 35.6509C157.068 36.1807 158.869 36.7371 160.009 37.2603C161.678 38.0352 162.87 38.9823 163.539 40.042C164.208 41.1018 164.565 42.3204 164.565 43.7113C164.565 45.8771 163.731 47.6852 162.095 49.129C160.459 50.5729 158.121 51.2683 154.982 51.2683C153.914 51.2178 152.849 51.125 151.789 50.9901C151.014 50.904 150.094 50.712 149.041 50.4338C148.345 50.1944 147.66 49.9248 146.988 49.6258C146.814 49.5253 146.663 49.39 146.544 49.2284C146.491 49.0628 146.345 48.2813 146.179 46.897L145.716 42.8105L145.431 42.7907ZM168.321 29.4516C170.506 28.5376 172.096 27.617 173.07 26.8023C174.043 25.9877 175.096 24.4379 176.209 22.431H177.799C177.965 22.9239 178.05 23.4407 178.05 23.961L178.024 26.2394L177.938 27.8753L177.964 28.5111L178.6 28.5376L181.209 28.425L183.296 28.372C183.406 28.8078 183.471 29.254 183.488 29.7033C183.488 30.147 183.402 30.6504 183.263 31.2001C182.802 31.2687 182.337 31.3064 181.872 31.3127C181.739 31.3127 181.428 31.3127 180.984 31.2597H179.54L179.037 31.2332L177.712 31.2862L177.659 41.8833L177.772 45.7446C177.89 46.276 178.118 46.7768 178.441 47.2149C178.885 47.4199 179.369 47.524 179.858 47.5196C180.355 47.5196 180.719 47.4666 180.971 47.3871C181.223 47.3077 181.633 47.0229 182.196 46.5791C182.309 46.4665 182.501 46.3539 182.726 46.1817C183.142 46.4823 183.516 46.8363 183.839 47.2348L183.951 47.566C183.268 48.6131 182.307 49.45 181.176 49.9834C180.011 50.5663 178.759 50.8444 177.428 50.8444C175.679 50.8444 174.288 50.2881 173.202 49.2085C172.116 48.1289 171.593 46.4003 171.593 44.0954L171.705 39.2075V31.2531L170.844 31.2266L168.817 31.2531L168.453 31.167C168.35 31.0339 168.292 30.8715 168.288 30.7034L168.341 29.3787L168.321 29.4516Z",
        fill: "#EA2845"
      }
    )
  ] });
}

// app/assets/logos/NextjsLogo.tsx
var import_jsx_runtime209 = require("react/jsx-runtime");
function NextjsLogo({ className }) {
  return /* @__PURE__ */ (0, import_jsx_runtime209.jsxs)("svg", { className, viewBox: "0 0 184 38", fill: "none", xmlns: "http://www.w3.org/2000/svg", children: [
    /* @__PURE__ */ (0, import_jsx_runtime209.jsxs)("g", { clipPath: "url(#clip0_5291_19580)", children: [
      /* @__PURE__ */ (0, import_jsx_runtime209.jsx)(
        "path",
        {
          d: "M122.318 0.0154419H154.367V5.93096H141.653V37.0517H135.296V5.93096H122.318V0.0154419Z",
          fill: "white"
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime209.jsx)(
        "path",
        {
          d: "M69.608 0.0154419V5.93096H43.9181V15.4472H64.5779V21.3627H43.9181V31.1362H69.608V37.0517H37.5612L37.5586 0.0154419H69.608Z",
          fill: "white"
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime209.jsx)(
        "path",
        {
          d: "M85.6114 0.0308914H77.2921L107.09 37.0672H115.433L100.533 18.5618L115.41 0.0591477L107.09 0.0720044L96.3674 13.3889L85.6114 0.0308914Z",
          fill: "white"
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime209.jsx)(
        "path",
        {
          d: "M94.1482 26.4861L89.9821 21.3061L77.2683 37.0954H85.6114L94.1482 26.4861Z",
          fill: "white"
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime209.jsx)(
        "path",
        {
          fillRule: "evenodd",
          clipRule: "evenodd",
          d: "M37.784 37.0517L7.94614 0H0V37.0363H6.35692V7.91648L29.7981 37.0517H37.784Z",
          fill: "white"
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime209.jsx)(
        "path",
        {
          d: "M155.796 36.8255C155.331 36.8255 154.935 36.6642 154.603 36.3417C154.271 36.0191 154.107 35.6286 154.112 35.166C154.107 34.7161 154.271 34.3298 154.603 34.0073C154.935 33.6847 155.331 33.5234 155.796 33.5234C156.244 33.5234 156.636 33.6847 156.967 34.0073C157.304 34.3298 157.471 34.7161 157.476 35.166C157.471 35.4716 157.394 35.7517 157.239 36.0021C157.079 36.2568 156.877 36.4563 156.623 36.6006C156.373 36.7491 156.097 36.8255 155.796 36.8255Z",
          fill: "white"
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime209.jsx)(
        "path",
        {
          d: "M166.646 21.2232H169.463V32.0761C169.459 33.0735 169.243 33.9266 168.821 34.6439C168.395 35.3612 167.805 35.9087 167.047 36.2949C166.293 36.6769 165.41 36.8722 164.406 36.8722C163.489 36.8722 162.666 36.7066 161.934 36.3841C161.202 36.0615 160.62 35.5777 160.194 34.941C159.763 34.3043 159.552 33.5107 159.552 32.5599H162.373C162.378 32.9759 162.472 33.3366 162.653 33.638C162.834 33.9393 163.084 34.1685 163.403 34.3298C163.725 34.4911 164.096 34.5717 164.514 34.5717C164.966 34.5717 165.354 34.4783 165.668 34.2873C165.982 34.1006 166.224 33.8205 166.392 33.447C166.555 33.0777 166.642 32.6193 166.646 32.0761V21.2232Z",
          fill: "white"
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime209.jsx)(
        "path",
        {
          d: "M181.054 25.4676C180.985 24.8097 180.683 24.2961 180.158 23.9311C179.628 23.5619 178.943 23.3793 178.103 23.3793C177.513 23.3793 177.005 23.4685 176.583 23.6425C176.161 23.8208 175.833 24.0584 175.609 24.3598C175.386 24.6611 175.274 25.0049 175.265 25.3912C175.265 25.7138 175.342 25.9939 175.493 26.2273C175.644 26.465 175.846 26.6645 176.109 26.8258C176.367 26.9913 176.656 27.1271 176.971 27.2375C177.289 27.3478 177.608 27.4412 177.927 27.5176L179.395 27.8784C179.986 28.0142 180.559 28.1967 181.105 28.4301C181.652 28.6594 182.148 28.9522 182.583 29.3045C183.018 29.6568 183.363 30.0812 183.617 30.5778C183.871 31.0744 184 31.6558 184 32.3265C184 33.2305 183.767 34.0242 183.298 34.7118C182.828 35.3951 182.152 35.9299 181.265 36.3162C180.382 36.6982 179.314 36.8934 178.056 36.8934C176.841 36.8934 175.782 36.7067 174.89 36.3332C173.994 35.9639 173.296 35.4206 172.792 34.7075C172.288 33.9945 172.017 33.1244 171.978 32.1015H174.77C174.808 32.6363 174.981 33.082 175.274 33.4427C175.571 33.7993 175.958 34.0624 176.432 34.2407C176.91 34.4147 177.444 34.5038 178.034 34.5038C178.65 34.5038 179.193 34.4104 179.662 34.2279C180.128 34.0454 180.494 33.7908 180.757 33.4597C181.024 33.1329 181.157 32.7467 181.162 32.3053C181.157 31.902 181.036 31.5667 180.804 31.3035C180.567 31.0404 180.24 30.8197 179.822 30.6415C179.4 30.4632 178.909 30.3019 178.349 30.1618L176.566 29.7119C175.278 29.3851 174.257 28.8886 173.512 28.2222C172.762 27.5558 172.392 26.673 172.392 25.5652C172.392 24.6569 172.641 23.859 173.146 23.1756C173.645 22.4923 174.33 21.9618 175.196 21.584C176.066 21.202 177.048 21.0152 178.142 21.0152C179.253 21.0152 180.227 21.202 181.067 21.584C181.906 21.9618 182.566 22.4881 183.044 23.1586C183.522 23.8293 183.772 24.5975 183.785 25.4676H181.054Z",
          fill: "white"
        }
      )
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime209.jsx)("defs", { children: /* @__PURE__ */ (0, import_jsx_runtime209.jsx)("clipPath", { id: "clip0_5291_19580", children: /* @__PURE__ */ (0, import_jsx_runtime209.jsx)("rect", { width: "184", height: "37.3604", fill: "white" }) }) })
  ] });
}

// app/assets/logos/NuxtLogo.tsx
var import_jsx_runtime210 = require("react/jsx-runtime");
function NuxtLogo({ className }) {
  return /* @__PURE__ */ (0, import_jsx_runtime210.jsxs)("svg", { className, viewBox: "0 0 184 46", fill: "none", xmlns: "http://www.w3.org/2000/svg", children: [
    /* @__PURE__ */ (0, import_jsx_runtime210.jsxs)("g", { clipPath: "url(#clip0_5336_22448)", children: [
      /* @__PURE__ */ (0, import_jsx_runtime210.jsx)(
        "path",
        {
          d: "M38.7097 46H64.3598C65.1746 46 65.9748 45.7875 66.6805 45.3838C67.3846 44.9814 67.9704 44.4006 68.379 43.7C68.7859 43.0017 69.0002 42.208 69 41.3998C68.9994 40.5916 68.7844 39.7981 68.3769 39.1002L51.1511 9.52867C50.7425 8.82816 50.1568 8.24752 49.4528 7.84507C48.7462 7.44109 47.9464 7.22869 47.1325 7.2289C46.3181 7.2289 45.5179 7.44165 44.8125 7.8453C44.1084 8.24768 43.5227 8.82834 43.1142 9.5289L38.7097 17.095L30.0978 2.29954C29.6891 1.59892 29.1031 1.01826 28.3988 0.61594C27.6921 0.212089 26.8922 -0.000228035 26.0783 1.8379e-07C25.2637 1.8379e-07 24.4633 0.21252 23.7576 0.61617C23.0534 1.01847 22.4674 1.59904 22.0586 2.29954L0.623071 39.1C0.215509 39.7979 0.000499188 40.5915 7.38785e-07 41.3998C-0.000459261 42.2073 0.213901 43.0006 0.621001 43.7C1.0296 44.4006 1.61541 44.9813 2.31955 45.3838C3.02626 45.7878 3.82623 46.0002 4.64025 46H20.7412C27.1207 46 31.8253 43.2228 35.0624 37.8044L42.9217 24.3144L47.1314 17.095L59.7653 38.7805H42.9217L38.7097 46ZM20.4787 38.7732L9.24232 38.7706L26.0857 9.85826L34.4901 24.3144L28.8629 33.9768C26.7131 37.4923 24.271 38.7732 20.4787 38.7732Z",
          fill: "#00DC82"
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime210.jsx)(
        "path",
        {
          d: "M86.71 46C86.954 46 87.188 45.9031 87.3605 45.7305C87.5331 45.558 87.63 45.324 87.63 45.08V23.69C87.63 23.69 88.8361 25.5958 91.08 29.44L99.9826 44.841C100.394 45.5584 101.152 46 101.972 46H108.1V11.5H101.89C101.646 11.5 101.412 11.5969 101.239 11.7695C101.067 11.942 100.97 12.176 100.97 12.42V34.04L97.06 27.14L88.6448 12.6546C88.2326 11.9398 87.4761 11.5 86.6578 11.5H80.5V46H86.71ZM155.527 33.0871L163.427 21.16H157.509C157.128 21.1607 156.754 21.2561 156.419 21.4377C156.084 21.6193 155.8 21.8813 155.592 22.2001L151.974 27.715L148.356 22.2001C148.148 21.8813 147.864 21.6193 147.529 21.4377C147.195 21.2561 146.82 21.1607 146.439 21.16H140.568L148.468 33.0379L139.961 46H145.703C146.08 45.9993 146.452 45.9054 146.785 45.7265C147.117 45.5477 147.401 45.2894 147.609 44.9747L152.021 38.3608L156.386 44.9664C156.595 45.2834 156.878 45.5438 157.212 45.7242C157.546 45.9046 157.919 45.9993 158.298 46H163.988L155.527 33.0871ZM166.658 21.16H171.192V13.8163H177.689V21.16H184V26.8771H177.689V36.685C177.689 39.1 178.905 40.2337 181.008 40.2337H184V46H180.12C174.698 46 171.192 42.7471 171.192 36.9808V26.8771H166.658V21.16ZM135.7 21.16H132.25C131.448 21.16 130.82 21.1934 130.295 21.7403C129.77 22.2569 129.72 22.5752 129.72 23.3655V35.4372C129.72 37.2906 129.634 38.4185 128.8 39.33C127.966 40.2111 126.818 40.48 125.12 40.48C123.453 40.48 122.274 40.2111 121.44 39.33C120.606 38.4185 120.52 37.2906 120.52 35.4372V23.3655C120.52 22.5754 120.47 22.2569 119.945 21.7403C119.42 21.1934 118.792 21.16 117.99 21.16H114.54V35.5171C114.54 38.738 115.435 41.2903 117.225 43.1742C119.047 45.0582 121.694 46 125.12 46C128.546 46 131.147 45.0582 132.968 43.1742C134.789 41.2903 135.7 38.738 135.7 35.5171V21.16Z",
          fill: "white"
        }
      )
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime210.jsx)("defs", { children: /* @__PURE__ */ (0, import_jsx_runtime210.jsx)("clipPath", { id: "clip0_5336_22448", children: /* @__PURE__ */ (0, import_jsx_runtime210.jsx)("rect", { width: "184", height: "46", fill: "white" }) }) })
  ] });
}

// app/assets/logos/RemixLogo.tsx
var import_jsx_runtime211 = require("react/jsx-runtime");
function RemixLogo({ className }) {
  return /* @__PURE__ */ (0, import_jsx_runtime211.jsxs)("svg", { className, viewBox: "0 0 204 66", fill: "none", xmlns: "http://www.w3.org/2000/svg", children: [
    /* @__PURE__ */ (0, import_jsx_runtime211.jsx)("g", { filter: "url(#filter0_d_5334_22407)", children: /* @__PURE__ */ (0, import_jsx_runtime211.jsx)(
      "path",
      {
        fillRule: "evenodd",
        clipRule: "evenodd",
        d: "M47.4777 45.058C47.8835 50.3106 47.8835 52.7727 47.8835 55.4603H35.8237C35.8237 54.8748 35.8341 54.3393 35.8445 53.7962C35.8771 52.1081 35.9111 50.3479 35.6397 46.7928C35.2811 41.5885 33.0571 40.4319 28.9676 40.4319H25.3444H10V30.9627H29.5415C34.7071 30.9627 37.2898 29.379 37.2898 25.1865C37.2898 21.5001 34.7071 19.2659 29.5415 19.2659H10V10H31.6937C43.3882 10 49.1997 15.5659 49.1997 24.457C49.1997 31.1071 45.1102 35.4441 39.5857 36.167C44.2492 37.1068 46.9754 39.7813 47.4777 45.058Z",
        fill: "#E5F3FF"
      }
    ) }),
    /* @__PURE__ */ (0, import_jsx_runtime211.jsx)(
      "path",
      {
        d: "M10 55.4604V48.4012H22.7516C24.8815 48.4012 25.3439 49.9932 25.3439 50.9423V55.4604H10Z",
        fill: "#E5F3FF"
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime211.jsx)("g", { filter: "url(#filter1_d_5334_22407)", children: /* @__PURE__ */ (0, import_jsx_runtime211.jsx)(
      "path",
      {
        d: "M192.998 23.7133H181.045L175.606 31.3573L170.309 23.7133H157.498L169.021 39.5059L156.496 55.8753H168.448L174.819 47.1497L181.188 55.8753H194L181.403 39.0011L192.998 23.7133Z",
        fill: "#FFF1F1"
      }
    ) }),
    /* @__PURE__ */ (0, import_jsx_runtime211.jsx)("g", { filter: "url(#filter2_d_5334_22407)", children: /* @__PURE__ */ (0, import_jsx_runtime211.jsx)(
      "path",
      {
        d: "M117.711 29.0434C116.351 25.2935 113.416 22.6975 107.762 22.6975C102.966 22.6975 99.5309 24.861 97.8132 28.3943V23.5629H86.2185V55.7246H97.8132V39.9322C97.8132 35.1008 99.1731 31.9279 102.966 31.9279C106.474 31.9279 107.333 34.2354 107.333 38.6343V55.7246H118.927V39.9322C118.927 35.1008 120.215 31.9279 124.08 31.9279C127.588 31.9279 128.375 34.2354 128.375 38.6343V55.7246H139.97V35.5335C139.97 28.827 137.393 22.6975 128.59 22.6975C123.222 22.6975 119.428 25.4377 117.711 29.0434Z",
        fill: "#FFFAEA"
      }
    ) }),
    /* @__PURE__ */ (0, import_jsx_runtime211.jsx)("g", { filter: "url(#filter3_d_5334_22407)", children: /* @__PURE__ */ (0, import_jsx_runtime211.jsx)(
      "path",
      {
        d: "M74.1446 43.2432C73.071 45.7671 71.067 46.8487 67.9178 46.8487C64.4107 46.8487 61.5477 44.9738 61.2614 41.0076H83.6637V37.7628C83.6637 29.0372 78.0096 21.6817 67.345 21.6817C57.3964 21.6817 49.9529 28.9651 49.9529 39.1328C49.9529 49.3725 57.2534 55.5742 67.4883 55.5742C75.934 55.5742 81.803 51.464 83.4491 44.1084L74.1446 43.2432ZM61.4047 35.3829C61.8339 32.3542 63.4803 30.0466 67.202 30.0466C70.6375 30.0466 72.4983 32.4984 72.6415 35.3829H61.4047Z",
        fill: "#F1FFF0"
      }
    ) }),
    /* @__PURE__ */ (0, import_jsx_runtime211.jsx)("g", { filter: "url(#filter4_d_5334_22407)", children: /* @__PURE__ */ (0, import_jsx_runtime211.jsx)(
      "path",
      {
        d: "M143.762 23.7765V55.9383H155.357V23.7765H143.762ZM143.691 20.7478H155.429V10.5078H143.691V20.7478Z",
        fill: "white"
      }
    ) }),
    /* @__PURE__ */ (0, import_jsx_runtime211.jsxs)("defs", { children: [
      /* @__PURE__ */ (0, import_jsx_runtime211.jsxs)(
        "filter",
        {
          id: "filter0_d_5334_22407",
          x: "0",
          y: "0",
          width: "59.1997",
          height: "65.4604",
          filterUnits: "userSpaceOnUse",
          colorInterpolationFilters: "sRGB",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime211.jsx)("feFlood", { floodOpacity: "0", result: "BackgroundImageFix" }),
            /* @__PURE__ */ (0, import_jsx_runtime211.jsx)(
              "feColorMatrix",
              {
                in: "SourceAlpha",
                type: "matrix",
                values: "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0",
                result: "hardAlpha"
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime211.jsx)("feOffset", {}),
            /* @__PURE__ */ (0, import_jsx_runtime211.jsx)("feGaussianBlur", { stdDeviation: "5" }),
            /* @__PURE__ */ (0, import_jsx_runtime211.jsx)("feComposite", { in2: "hardAlpha", operator: "out" }),
            /* @__PURE__ */ (0, import_jsx_runtime211.jsx)(
              "feColorMatrix",
              {
                type: "matrix",
                values: "0 0 0 0 0.203922 0 0 0 0 0.45098 0 0 0 0 0.74902 0 0 0 1 0"
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime211.jsx)("feBlend", { mode: "normal", in2: "BackgroundImageFix", result: "effect1_dropShadow_5334_22407" }),
            /* @__PURE__ */ (0, import_jsx_runtime211.jsx)(
              "feBlend",
              {
                mode: "normal",
                in: "SourceGraphic",
                in2: "effect1_dropShadow_5334_22407",
                result: "shape"
              }
            )
          ]
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime211.jsxs)(
        "filter",
        {
          id: "filter1_d_5334_22407",
          x: "146.496",
          y: "13.7133",
          width: "57.5044",
          height: "52.162",
          filterUnits: "userSpaceOnUse",
          colorInterpolationFilters: "sRGB",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime211.jsx)("feFlood", { floodOpacity: "0", result: "BackgroundImageFix" }),
            /* @__PURE__ */ (0, import_jsx_runtime211.jsx)(
              "feColorMatrix",
              {
                in: "SourceAlpha",
                type: "matrix",
                values: "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0",
                result: "hardAlpha"
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime211.jsx)("feOffset", {}),
            /* @__PURE__ */ (0, import_jsx_runtime211.jsx)("feGaussianBlur", { stdDeviation: "5" }),
            /* @__PURE__ */ (0, import_jsx_runtime211.jsx)("feComposite", { in2: "hardAlpha", operator: "out" }),
            /* @__PURE__ */ (0, import_jsx_runtime211.jsx)(
              "feColorMatrix",
              {
                type: "matrix",
                values: "0 0 0 0 0.882353 0 0 0 0 0.180392 0 0 0 0 0.227451 0 0 0 1 0"
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime211.jsx)("feBlend", { mode: "normal", in2: "BackgroundImageFix", result: "effect1_dropShadow_5334_22407" }),
            /* @__PURE__ */ (0, import_jsx_runtime211.jsx)(
              "feBlend",
              {
                mode: "normal",
                in: "SourceGraphic",
                in2: "effect1_dropShadow_5334_22407",
                result: "shape"
              }
            )
          ]
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime211.jsxs)(
        "filter",
        {
          id: "filter2_d_5334_22407",
          x: "78.2185",
          y: "14.6975",
          width: "69.7512",
          height: "49.0271",
          filterUnits: "userSpaceOnUse",
          colorInterpolationFilters: "sRGB",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime211.jsx)("feFlood", { floodOpacity: "0", result: "BackgroundImageFix" }),
            /* @__PURE__ */ (0, import_jsx_runtime211.jsx)(
              "feColorMatrix",
              {
                in: "SourceAlpha",
                type: "matrix",
                values: "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0",
                result: "hardAlpha"
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime211.jsx)("feOffset", {}),
            /* @__PURE__ */ (0, import_jsx_runtime211.jsx)("feGaussianBlur", { stdDeviation: "4" }),
            /* @__PURE__ */ (0, import_jsx_runtime211.jsx)("feComposite", { in2: "hardAlpha", operator: "out" }),
            /* @__PURE__ */ (0, import_jsx_runtime211.jsx)(
              "feColorMatrix",
              {
                type: "matrix",
                values: "0 0 0 0 0.937255 0 0 0 0 0.72549 0 0 0 0 0.117647 0 0 0 1 0"
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime211.jsx)("feBlend", { mode: "normal", in2: "BackgroundImageFix", result: "effect1_dropShadow_5334_22407" }),
            /* @__PURE__ */ (0, import_jsx_runtime211.jsx)(
              "feBlend",
              {
                mode: "normal",
                in: "SourceGraphic",
                in2: "effect1_dropShadow_5334_22407",
                result: "shape"
              }
            )
          ]
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime211.jsxs)(
        "filter",
        {
          id: "filter3_d_5334_22407",
          x: "41.9529",
          y: "13.6817",
          width: "49.7108",
          height: "49.8926",
          filterUnits: "userSpaceOnUse",
          colorInterpolationFilters: "sRGB",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime211.jsx)("feFlood", { floodOpacity: "0", result: "BackgroundImageFix" }),
            /* @__PURE__ */ (0, import_jsx_runtime211.jsx)(
              "feColorMatrix",
              {
                in: "SourceAlpha",
                type: "matrix",
                values: "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0",
                result: "hardAlpha"
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime211.jsx)("feOffset", {}),
            /* @__PURE__ */ (0, import_jsx_runtime211.jsx)("feGaussianBlur", { stdDeviation: "4" }),
            /* @__PURE__ */ (0, import_jsx_runtime211.jsx)("feComposite", { in2: "hardAlpha", operator: "out" }),
            /* @__PURE__ */ (0, import_jsx_runtime211.jsx)(
              "feColorMatrix",
              {
                type: "matrix",
                values: "0 0 0 0 0.384314 0 0 0 0 0.788235 0 0 0 0 0.372549 0 0 0 1 0"
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime211.jsx)("feBlend", { mode: "normal", in2: "BackgroundImageFix", result: "effect1_dropShadow_5334_22407" }),
            /* @__PURE__ */ (0, import_jsx_runtime211.jsx)(
              "feBlend",
              {
                mode: "normal",
                in: "SourceGraphic",
                in2: "effect1_dropShadow_5334_22407",
                result: "shape"
              }
            )
          ]
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime211.jsxs)(
        "filter",
        {
          id: "filter4_d_5334_22407",
          x: "133.691",
          y: "0.507791",
          width: "31.738",
          height: "65.4305",
          filterUnits: "userSpaceOnUse",
          colorInterpolationFilters: "sRGB",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime211.jsx)("feFlood", { floodOpacity: "0", result: "BackgroundImageFix" }),
            /* @__PURE__ */ (0, import_jsx_runtime211.jsx)(
              "feColorMatrix",
              {
                in: "SourceAlpha",
                type: "matrix",
                values: "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0",
                result: "hardAlpha"
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime211.jsx)("feOffset", {}),
            /* @__PURE__ */ (0, import_jsx_runtime211.jsx)("feGaussianBlur", { stdDeviation: "5" }),
            /* @__PURE__ */ (0, import_jsx_runtime211.jsx)("feComposite", { in2: "hardAlpha", operator: "out" }),
            /* @__PURE__ */ (0, import_jsx_runtime211.jsx)(
              "feColorMatrix",
              {
                type: "matrix",
                values: "0 0 0 0 0.596078 0 0 0 0 0.192157 0 0 0 0 0.556863 0 0 0 1 0"
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime211.jsx)("feBlend", { mode: "normal", in2: "BackgroundImageFix", result: "effect1_dropShadow_5334_22407" }),
            /* @__PURE__ */ (0, import_jsx_runtime211.jsx)(
              "feBlend",
              {
                mode: "normal",
                in: "SourceGraphic",
                in2: "effect1_dropShadow_5334_22407",
                result: "shape"
              }
            )
          ]
        }
      )
    ] })
  ] });
}

// app/components/frameworks/FrameworkSelector.tsx
var import_jsx_runtime212 = require("react/jsx-runtime");
function FrameworkSelector() {
  let organization = useOrganization(), project = useProject();
  return /* @__PURE__ */ (0, import_jsx_runtime212.jsxs)("div", { className: "mx-auto max-w-3xl pt-28", children: [
    /* @__PURE__ */ (0, import_jsx_runtime212.jsxs)("div", { className: "flex items-center justify-between", children: [
      /* @__PURE__ */ (0, import_jsx_runtime212.jsx)(Header1, { spacing: !0, children: "Choose a framework to get started\u2026" }),
      /* @__PURE__ */ (0, import_jsx_runtime212.jsx)(
        Feedback,
        {
          button: /* @__PURE__ */ (0, import_jsx_runtime212.jsx)(Button, { variant: "tertiary/small", LeadingIcon: import_solid82.ChatBubbleLeftRightIcon, children: "Request a framework" }),
          defaultValue: "feature"
        }
      )
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime212.jsxs)("div", { className: "grid grid-cols-3 place-items-center gap-2", children: [
      /* @__PURE__ */ (0, import_jsx_runtime212.jsx)(FrameworkLink, { to: projectSetupNextjsPath(organization, project), supported: !0, children: /* @__PURE__ */ (0, import_jsx_runtime212.jsx)(NextjsLogo, { className: "w-32" }) }),
      /* @__PURE__ */ (0, import_jsx_runtime212.jsx)(FrameworkLink, { to: projectSetupExpressPath(organization, project), supported: !0, children: /* @__PURE__ */ (0, import_jsx_runtime212.jsx)(ExpressLogo, { className: "w-36" }) }),
      /* @__PURE__ */ (0, import_jsx_runtime212.jsx)(FrameworkLink, { to: projectSetupRemixPath(organization, project), supported: !0, children: /* @__PURE__ */ (0, import_jsx_runtime212.jsx)(RemixLogo, { className: "w-32" }) }),
      /* @__PURE__ */ (0, import_jsx_runtime212.jsx)(FrameworkLink, { to: projectSetupAstroPath(organization, project), supported: !0, children: /* @__PURE__ */ (0, import_jsx_runtime212.jsx)(AstroLogo, { className: "w-32" }) }),
      /* @__PURE__ */ (0, import_jsx_runtime212.jsx)(FrameworkLink, { to: projectSetupSvelteKitPath(organization, project), supported: !0, children: /* @__PURE__ */ (0, import_jsx_runtime212.jsx)(SvelteKitLogo, { className: "w-44" }) }),
      /* @__PURE__ */ (0, import_jsx_runtime212.jsx)(FrameworkLink, { to: projectSetupNestjsPath(organization, project), supported: !0, children: /* @__PURE__ */ (0, import_jsx_runtime212.jsx)(NestjsLogo, { className: "w-36" }) }),
      /* @__PURE__ */ (0, import_jsx_runtime212.jsx)(FrameworkLink, { to: projectSetupFastifyPath(organization, project), children: /* @__PURE__ */ (0, import_jsx_runtime212.jsx)(FastifyLogo, { className: "w-36" }) }),
      /* @__PURE__ */ (0, import_jsx_runtime212.jsx)(FrameworkLink, { to: projectSetupNuxtPath(organization, project), children: /* @__PURE__ */ (0, import_jsx_runtime212.jsx)(NuxtLogo, { className: "w-32" }) }),
      /* @__PURE__ */ (0, import_jsx_runtime212.jsx)(FrameworkLink, { to: projectSetupRedwoodPath(organization, project), children: /* @__PURE__ */ (0, import_jsx_runtime212.jsx)(RedwoodLogo, { className: "w-44" }) })
    ] })
  ] });
}
function FrameworkLink({ children, to, supported = !1 }) {
  return /* @__PURE__ */ (0, import_jsx_runtime212.jsx)(
    import_react153.Link,
    {
      to,
      className: cn(
        "flex h-28 w-full items-center justify-center rounded-md border border-charcoal-750 px-8 py-4 transition hover:bg-charcoal-850",
        !supported && "border opacity-30 grayscale transition hover:opacity-100 hover:grayscale-0"
      ),
      children
    }
  );
}

// app/routes/_app.orgs.$organizationSlug.projects.$projectParam.setup._index/route.tsx
var import_jsx_runtime213 = require("react/jsx-runtime");
function Page43() {
  return /* @__PURE__ */ (0, import_jsx_runtime213.jsx)(import_jsx_runtime213.Fragment, { children: /* @__PURE__ */ (0, import_jsx_runtime213.jsx)(FrameworkSelector, {}) });
}

// app/routes/_app.orgs.$organizationSlug.projects.$projectParam.setup.nestjs/route.tsx
var route_exports65 = {};
__export(route_exports65, {
  default: () => SetupNestJS
});
var import_solid83 = require("@heroicons/react/20/solid");

// app/components/code/InstallPackages.tsx
var import_jsx_runtime214 = require("react/jsx-runtime");
function InstallPackages({ packages }) {
  return /* @__PURE__ */ (0, import_jsx_runtime214.jsxs)(ClientTabs, { defaultValue: "npm", children: [
    /* @__PURE__ */ (0, import_jsx_runtime214.jsxs)(ClientTabsList, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime214.jsx)(ClientTabsTrigger, { value: "npm", children: "npm" }),
      /* @__PURE__ */ (0, import_jsx_runtime214.jsx)(ClientTabsTrigger, { value: "pnpm", children: "pnpm" }),
      /* @__PURE__ */ (0, import_jsx_runtime214.jsx)(ClientTabsTrigger, { value: "yarn", children: "yarn" })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime214.jsx)(ClientTabsContent, { value: "npm", children: /* @__PURE__ */ (0, import_jsx_runtime214.jsx)(
      ClipboardField,
      {
        variant: "primary/medium",
        className: "mb-4",
        value: `npm install ${packages.join(" ")}`
      }
    ) }),
    /* @__PURE__ */ (0, import_jsx_runtime214.jsx)(ClientTabsContent, { value: "pnpm", children: /* @__PURE__ */ (0, import_jsx_runtime214.jsx)(
      ClipboardField,
      {
        variant: "primary/medium",
        className: "mb-4",
        value: `pnpm install ${packages.join(" ")}`
      }
    ) }),
    /* @__PURE__ */ (0, import_jsx_runtime214.jsx)(ClientTabsContent, { value: "yarn", children: /* @__PURE__ */ (0, import_jsx_runtime214.jsx)(
      ClipboardField,
      {
        variant: "primary/medium",
        className: "mb-4",
        value: `yarn add ${packages.join(" ")}`
      }
    ) })
  ] });
}

// app/routes/_app.orgs.$organizationSlug.projects.$projectParam.setup.nestjs/route.tsx
var import_jsx_runtime215 = require("react/jsx-runtime"), AppModuleCode = `
import { Module } from '@nestjs/common';
import { ConfigModule, ConfigService } from '@nestjs/config';
import { TriggerDevModule } from '@trigger.dev/nestjs';

@Module({
  imports: [
    ConfigModule.forRoot({
      isGlobal: true,
    }),
    TriggerDevModule.registerAsync({
      inject: [ConfigService],
      useFactory: (config: ConfigService) => ({
        id: 'my-nest-app',
        apiKey: config.getOrThrow('TRIGGER_API_KEY'),
        apiUrl: config.getOrThrow('TRIGGER_API_URL'),
        verbose: false,
        ioLogLocalEnabled: true,
      }),
    }),
  ],
})
export class AppModule {}
`, JobControllerCode = `
import { Controller, Get } from '@nestjs/common';
import { InjectTriggerDevClient } from '@trigger.dev/nestjs';
import { eventTrigger, TriggerClient } from '@trigger.dev/sdk';

@Controller()
export class JobController {
  constructor(
    @InjectTriggerDevClient() private readonly client: TriggerClient,
  ) {
    this.client.defineJob({
      id: 'test-job',
      name: 'Test Job One',
      version: '0.0.1',
      trigger: eventTrigger({
        name: 'test.event',
      }),
      run: async (payload, io, ctx) => {
        await io.logger.info('Hello world!', { payload });

        return {
          message: 'Hello world!',
        };
      },
    });
  }

  @Get()
  getHello(): string {
    return \`Running Trigger.dev with client-id \${this.client.id}\`;
  }
}`, AppModuleWithControllerCode = `
import { Module } from '@nestjs/common';
import { ConfigModule, ConfigService } from '@nestjs/config';
import { TriggerDevModule } from '@trigger.dev/nestjs';
import { JobController } from './job.controller';

@Module({
  imports: [
    ConfigModule.forRoot({
      isGlobal: true,
    }),
    TriggerDevModule.registerAsync({
      inject: [ConfigService],
      useFactory: (config: ConfigService) => ({
        id: 'my-nest-app',
        apiKey: config.getOrThrow('TRIGGER_API_KEY'),
        apiUrl: config.getOrThrow('TRIGGER_API_URL'),
        verbose: false,
        ioLogLocalEnabled: true,
      }),
    }),
  ],
  controllers: [
    //...existingControllers,
    JobController
  ],
})
export class AppModule {}
`, packageJsonCode = `"trigger.dev": {
  "endpointId": "my-nest-app"
}`;
function SetupNestJS() {
  let organization = useOrganization(), project = useProject();
  useProjectSetupComplete();
  let { apiKey } = useV2OnboardingApiKey(), appOrigin = useAppOrigin();
  return /* @__PURE__ */ (0, import_jsx_runtime215.jsxs)("div", { className: "mx-auto max-w-3xl pt-16", children: [
    /* @__PURE__ */ (0, import_jsx_runtime215.jsx)("div", { className: "mb-12 grid place-items-center", children: /* @__PURE__ */ (0, import_jsx_runtime215.jsx)(NestjsLogo, { className: "w-52" }) }),
    /* @__PURE__ */ (0, import_jsx_runtime215.jsxs)("div", { className: "flex items-center justify-between", children: [
      /* @__PURE__ */ (0, import_jsx_runtime215.jsx)(Header1, { spacing: !0, className: "text-text-bright", children: "Get setup in 5 minutes" }),
      /* @__PURE__ */ (0, import_jsx_runtime215.jsxs)("div", { className: "flex items-center gap-2", children: [
        /* @__PURE__ */ (0, import_jsx_runtime215.jsx)(
          LinkButton,
          {
            to: projectSetupPath(organization, project),
            variant: "tertiary/small",
            LeadingIcon: import_solid83.Squares2X2Icon,
            children: "Choose a different framework"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime215.jsx)(
          Feedback,
          {
            button: /* @__PURE__ */ (0, import_jsx_runtime215.jsx)(Button, { variant: "tertiary/small", LeadingIcon: import_solid83.ChatBubbleLeftRightIcon, children: "I'm stuck!" }),
            defaultValue: "help"
          }
        )
      ] })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime215.jsxs)(import_jsx_runtime215.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime215.jsx)(StepNumber, { stepNumber: "1", title: "Add the dependencies" }),
      /* @__PURE__ */ (0, import_jsx_runtime215.jsx)(StepContentContainer, { children: /* @__PURE__ */ (0, import_jsx_runtime215.jsx)(
        InstallPackages,
        {
          packages: ["@trigger.dev/sdk", "@trigger.dev/nestjs", "@nestjs/config"]
        }
      ) }),
      /* @__PURE__ */ (0, import_jsx_runtime215.jsx)(StepNumber, { stepNumber: "2", title: "Add the environment variables" }),
      /* @__PURE__ */ (0, import_jsx_runtime215.jsxs)(StepContentContainer, { className: "flex flex-col gap-2", children: [
        /* @__PURE__ */ (0, import_jsx_runtime215.jsxs)(Paragraph, { children: [
          "Inside your ",
          /* @__PURE__ */ (0, import_jsx_runtime215.jsx)(InlineCode, { children: ".env" }),
          " file, create the following env variables:"
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime215.jsx)(
          CodeBlock3,
          {
            fileName: ".env",
            showChrome: !0,
            code: `TRIGGER_API_KEY=${apiKey}
TRIGGER_API_URL=${appOrigin}`
          }
        )
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime215.jsx)(StepNumber, { stepNumber: "3", title: "Add the TriggerDevModule" }),
      /* @__PURE__ */ (0, import_jsx_runtime215.jsxs)(StepContentContainer, { className: "flex flex-col gap-2", children: [
        /* @__PURE__ */ (0, import_jsx_runtime215.jsxs)(Paragraph, { children: [
          "Now, go to your ",
          /* @__PURE__ */ (0, import_jsx_runtime215.jsx)(InlineCode, { children: "app.module.ts" }),
          " and add the",
          " ",
          /* @__PURE__ */ (0, import_jsx_runtime215.jsx)(InlineCode, { children: "TriggerDevModule" }),
          ":"
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime215.jsx)(CodeBlock3, { fileName: "app.module.ts", showChrome: !0, code: AppModuleCode })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime215.jsx)(StepNumber, { stepNumber: "4", title: "Add the first job" }),
      /* @__PURE__ */ (0, import_jsx_runtime215.jsxs)(StepContentContainer, { className: "flex flex-col gap-2", children: [
        /* @__PURE__ */ (0, import_jsx_runtime215.jsxs)(Paragraph, { children: [
          "Create a ",
          /* @__PURE__ */ (0, import_jsx_runtime215.jsx)(InlineCode, { children: "controller" }),
          " called",
          " ",
          /* @__PURE__ */ (0, import_jsx_runtime215.jsx)(InlineCode, { children: "job.controller.ts" }),
          " and add the following code:"
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime215.jsx)(CodeBlock3, { fileName: "src/job.controller.ts", showChrome: !0, code: JobControllerCode })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime215.jsx)(StepNumber, { stepNumber: "5", title: "Update your app.module.ts" }),
      /* @__PURE__ */ (0, import_jsx_runtime215.jsxs)(StepContentContainer, { className: "flex flex-col gap-2", children: [
        /* @__PURE__ */ (0, import_jsx_runtime215.jsxs)(Paragraph, { children: [
          "Now, add the new ",
          /* @__PURE__ */ (0, import_jsx_runtime215.jsx)(InlineCode, { children: "controller" }),
          " to your",
          " ",
          /* @__PURE__ */ (0, import_jsx_runtime215.jsx)(InlineCode, { children: "app.module.ts" }),
          ":"
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime215.jsx)(CodeBlock3, { fileName: "app.module.ts", showChrome: !0, code: AppModuleWithControllerCode })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime215.jsx)(StepNumber, { stepNumber: "6", title: "Update your package.json" }),
      /* @__PURE__ */ (0, import_jsx_runtime215.jsxs)(StepContentContainer, { className: "flex flex-col gap-2", children: [
        /* @__PURE__ */ (0, import_jsx_runtime215.jsxs)(Paragraph, { children: [
          "Now, add this to the top-level of your ",
          /* @__PURE__ */ (0, import_jsx_runtime215.jsx)(InlineCode, { children: "package.json" }),
          ":"
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime215.jsx)(CodeBlock3, { fileName: "package.json", showChrome: !0, code: packageJsonCode })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime215.jsx)(StepNumber, { stepNumber: "7", title: "Run your app" }),
      /* @__PURE__ */ (0, import_jsx_runtime215.jsx)(StepContentContainer, { className: "flex flex-col gap-2", children: /* @__PURE__ */ (0, import_jsx_runtime215.jsxs)(Paragraph, { children: [
        "Finally, run your project with ",
        /* @__PURE__ */ (0, import_jsx_runtime215.jsx)(InlineCode, { children: "npm run start" }),
        ":"
      ] }) }),
      /* @__PURE__ */ (0, import_jsx_runtime215.jsx)(StepNumber, { stepNumber: "8", title: "Run the CLI 'dev' command" }),
      /* @__PURE__ */ (0, import_jsx_runtime215.jsx)(StepContentContainer, { children: /* @__PURE__ */ (0, import_jsx_runtime215.jsx)(TriggerDevStep, {}) }),
      /* @__PURE__ */ (0, import_jsx_runtime215.jsx)(StepNumber, { stepNumber: "9", title: "Wait for Jobs", displaySpinner: !0 }),
      /* @__PURE__ */ (0, import_jsx_runtime215.jsx)(StepContentContainer, { children: /* @__PURE__ */ (0, import_jsx_runtime215.jsx)(Paragraph, { children: "This page will automatically refresh." }) })
    ] })
  ] });
}

// app/routes/_app.orgs.$organizationSlug.projects.$projectParam.setup.nextjs/route.tsx
var route_exports66 = {};
__export(route_exports66, {
  default: () => SetupNextjs
});
var import_solid84 = require("@heroicons/react/20/solid"), import_react154 = require("react");
var import_jsx_runtime216 = require("react/jsx-runtime");
function SetupNextjs() {
  let organization = useOrganization(), project = useProject();
  useProjectSetupComplete();
  let { apiKey } = useV2OnboardingApiKey(), appOrigin = useAppOrigin(), [selectedValue, setSelectedValue] = (0, import_react154.useState)(null);
  return /* @__PURE__ */ (0, import_jsx_runtime216.jsxs)("div", { className: "mx-auto max-w-3xl pt-16", children: [
    /* @__PURE__ */ (0, import_jsx_runtime216.jsx)("div", { className: "mb-12 grid place-items-center", children: /* @__PURE__ */ (0, import_jsx_runtime216.jsx)(NextjsLogo, { className: "w-56" }) }),
    /* @__PURE__ */ (0, import_jsx_runtime216.jsxs)("div", { className: "flex items-center justify-between", children: [
      /* @__PURE__ */ (0, import_jsx_runtime216.jsxs)(Header1, { spacing: !0, className: "text-text-bright", children: [
        "Get setup in ",
        selectedValue === "create-new-next-app" ? "5" : "2",
        " minutes"
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime216.jsxs)("div", { className: "flex items-center gap-2", children: [
        /* @__PURE__ */ (0, import_jsx_runtime216.jsx)(
          LinkButton,
          {
            to: projectSetupPath(organization, project),
            variant: "tertiary/small",
            LeadingIcon: import_solid84.Squares2X2Icon,
            children: "Choose a different framework"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime216.jsx)(
          Feedback,
          {
            button: /* @__PURE__ */ (0, import_jsx_runtime216.jsx)(Button, { variant: "tertiary/small", LeadingIcon: import_solid84.ChatBubbleLeftRightIcon, children: "I'm stuck!" }),
            defaultValue: "help"
          }
        )
      ] })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime216.jsxs)(
      RadioGroup,
      {
        className: "mb-4 flex gap-x-2",
        onValueChange: (value) => setSelectedValue(value),
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime216.jsx)(
            RadioGroupItem,
            {
              label: "Use an existing Next.js project",
              description: "Use Trigger.dev in an existing Next.js project in less than 2 mins.",
              value: "use-existing-project",
              checked: selectedValue === "use-existing-project",
              variant: "icon",
              "data-action": "use-existing-project",
              icon: /* @__PURE__ */ (0, import_jsx_runtime216.jsx)(NamedIcon, { className: "h-12 w-12 text-green-600", name: "tree" })
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime216.jsx)(
            RadioGroupItem,
            {
              label: "Create a new Next.js project",
              description: "This is the quickest way to try out Trigger.dev in a new Next.js project and takes 5 mins.",
              value: "create-new-next-app",
              checked: selectedValue === "create-new-next-app",
              variant: "icon",
              "data-action": "create-new-next-app",
              icon: /* @__PURE__ */ (0, import_jsx_runtime216.jsx)(NamedIcon, { className: "h-8 w-8 text-green-600", name: "sapling" })
            }
          )
        ]
      }
    ),
    selectedValue && /* @__PURE__ */ (0, import_jsx_runtime216.jsxs)(import_jsx_runtime216.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime216.jsx)(
        Callout,
        {
          variant: "info",
          to: "https://github.com/triggerdotdev/trigger.dev/discussions/430",
          className: "mb-8",
          children: "Trigger.dev has full support for serverless. We will be adding support for long-running servers soon."
        }
      ),
      selectedValue === "create-new-next-app" ? /* @__PURE__ */ (0, import_jsx_runtime216.jsxs)(import_jsx_runtime216.Fragment, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime216.jsx)(StepNumber, { stepNumber: "1", title: "Create a new Next.js project" }),
        /* @__PURE__ */ (0, import_jsx_runtime216.jsxs)(StepContentContainer, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime216.jsxs)(ClientTabs, { defaultValue: "npm", children: [
            /* @__PURE__ */ (0, import_jsx_runtime216.jsxs)(ClientTabsList, { children: [
              /* @__PURE__ */ (0, import_jsx_runtime216.jsx)(ClientTabsTrigger, { value: "npm", children: "npm" }),
              /* @__PURE__ */ (0, import_jsx_runtime216.jsx)(ClientTabsTrigger, { value: "pnpm", children: "pnpm" }),
              /* @__PURE__ */ (0, import_jsx_runtime216.jsx)(ClientTabsTrigger, { value: "yarn", children: "yarn" })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime216.jsx)(ClientTabsContent, { value: "npm", children: /* @__PURE__ */ (0, import_jsx_runtime216.jsx)(
              ClipboardField,
              {
                variant: "primary/medium",
                className: "mb-4",
                value: "npx create-next-app@latest"
              }
            ) }),
            /* @__PURE__ */ (0, import_jsx_runtime216.jsx)(ClientTabsContent, { value: "pnpm", children: /* @__PURE__ */ (0, import_jsx_runtime216.jsx)(
              ClipboardField,
              {
                variant: "primary/medium",
                className: "mb-4",
                value: "pnpm create next-app"
              }
            ) }),
            /* @__PURE__ */ (0, import_jsx_runtime216.jsx)(ClientTabsContent, { value: "yarn", children: /* @__PURE__ */ (0, import_jsx_runtime216.jsx)(
              ClipboardField,
              {
                variant: "primary/medium",
                className: "mb-4",
                value: "yarn create next-app"
              }
            ) })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime216.jsx)(Paragraph, { spacing: !0, variant: "small", children: "Trigger.dev works with either the Pages or App Router configuration." })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime216.jsx)(StepNumber, { stepNumber: "2", title: "Navigate to your new Next.js project" }),
        /* @__PURE__ */ (0, import_jsx_runtime216.jsxs)(StepContentContainer, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime216.jsxs)(Paragraph, { spacing: !0, children: [
            "You have now created a new Next.js project. Let\u2019s ",
            /* @__PURE__ */ (0, import_jsx_runtime216.jsx)(InlineCode, { children: "cd" }),
            " into it using the project name you just provided:"
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime216.jsx)(
            ClipboardField,
            {
              value: "cd [replace with your project name]",
              variant: "primary/medium"
            }
          )
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime216.jsx)(
          StepNumber,
          {
            stepNumber: "3",
            title: "Run the CLI 'init' command in your new Next.js project"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime216.jsxs)(StepContentContainer, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime216.jsx)(InitCommand, { appOrigin, apiKey }),
          /* @__PURE__ */ (0, import_jsx_runtime216.jsxs)(Paragraph, { spacing: !0, variant: "small", children: [
            "You\u2019ll notice a new folder in your project called 'jobs'. We\u2019ve added a very simple example Job in ",
            /* @__PURE__ */ (0, import_jsx_runtime216.jsx)(InlineCode, { variant: "extra-small", children: "examples.ts" }),
            " ",
            "to help you get started."
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime216.jsx)(StepNumber, { stepNumber: "4", title: "Run your Next.js app" }),
        /* @__PURE__ */ (0, import_jsx_runtime216.jsx)(StepContentContainer, { children: /* @__PURE__ */ (0, import_jsx_runtime216.jsx)(RunDevCommand, {}) }),
        /* @__PURE__ */ (0, import_jsx_runtime216.jsx)(StepNumber, { stepNumber: "5", title: "Run the CLI 'dev' command" }),
        /* @__PURE__ */ (0, import_jsx_runtime216.jsx)(StepContentContainer, { children: /* @__PURE__ */ (0, import_jsx_runtime216.jsx)(TriggerDevStep, {}) }),
        /* @__PURE__ */ (0, import_jsx_runtime216.jsx)(StepNumber, { stepNumber: "6", title: "Wait for Jobs", displaySpinner: !0 }),
        /* @__PURE__ */ (0, import_jsx_runtime216.jsx)(StepContentContainer, { children: /* @__PURE__ */ (0, import_jsx_runtime216.jsx)(Paragraph, { children: "This page will automatically refresh." }) })
      ] }) : /* @__PURE__ */ (0, import_jsx_runtime216.jsxs)(import_jsx_runtime216.Fragment, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime216.jsx)(
          StepNumber,
          {
            stepNumber: "1",
            title: "Run the CLI 'init' command in an existing Next.js project"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime216.jsxs)(StepContentContainer, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime216.jsx)(InitCommand, { appOrigin, apiKey }),
          /* @__PURE__ */ (0, import_jsx_runtime216.jsxs)(Paragraph, { spacing: !0, variant: "small", children: [
            "You\u2019ll notice a new folder in your project called 'jobs'. We\u2019ve added a very simple example Job in ",
            /* @__PURE__ */ (0, import_jsx_runtime216.jsx)(InlineCode, { variant: "extra-small", children: "examples.ts" }),
            " ",
            "to help you get started."
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime216.jsx)(StepNumber, { stepNumber: "2", title: "Run your Next.js app" }),
        /* @__PURE__ */ (0, import_jsx_runtime216.jsx)(StepContentContainer, { children: /* @__PURE__ */ (0, import_jsx_runtime216.jsx)(RunDevCommand, {}) }),
        /* @__PURE__ */ (0, import_jsx_runtime216.jsx)(StepNumber, { stepNumber: "3", title: "Run the CLI 'dev' command" }),
        /* @__PURE__ */ (0, import_jsx_runtime216.jsx)(StepContentContainer, { children: /* @__PURE__ */ (0, import_jsx_runtime216.jsx)(TriggerDevStep, {}) }),
        /* @__PURE__ */ (0, import_jsx_runtime216.jsx)(StepNumber, { stepNumber: "4", title: "Wait for Jobs", displaySpinner: !0 }),
        /* @__PURE__ */ (0, import_jsx_runtime216.jsx)(StepContentContainer, { children: /* @__PURE__ */ (0, import_jsx_runtime216.jsx)(Paragraph, { children: "This page will automatically refresh." }) })
      ] })
    ] })
  ] });
}

// app/routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.schedules/route.tsx
var route_exports67 = {};
__export(route_exports67, {
  default: () => Page44,
  loader: () => loader54
});
var import_solid86 = require("@heroicons/react/20/solid"), import_solid87 = require("@heroicons/react/24/solid"), import_react158 = require("@remix-run/react"), import_remix_typedjson53 = require("remix-typedjson");

// app/components/runs/v3/ScheduleFilters.tsx
var import_solid85 = require("@heroicons/react/20/solid"), import_react156 = require("@remix-run/react"), import_react157 = require("react"), import_zod123 = require("zod");

// app/hooks/useThrottle.ts
var import_react155 = require("react");
function useThrottle(fn, duration) {
  let timeout = (0, import_react155.useRef)();
  return (0, import_react155.useEffect)(() => () => {
    timeout.current && clearTimeout(timeout.current);
  }, []), (...args) => {
    timeout.current && clearTimeout(timeout.current), timeout.current = setTimeout(() => {
      fn(...args), timeout.current = void 0;
    }, duration);
  };
}

// app/components/runs/v3/ScheduleFilters.tsx
var import_jsx_runtime217 = require("react/jsx-runtime"), ScheduleListFilters = import_zod123.z.object({
  page: import_zod123.z.coerce.number().default(1),
  tasks: import_zod123.z.string().optional().transform((value) => value ? value.split(",") : void 0),
  environments: import_zod123.z.string().optional().transform((value) => value ? value.split(",") : void 0),
  search: import_zod123.z.string().optional()
});
function ScheduleFilters({ possibleEnvironments, possibleTasks }) {
  let navigate = (0, import_react156.useNavigate)(), location = useOptimisticLocation(), searchParams = new URLSearchParams(location.search), { environments: environments2, tasks, page, search } = ScheduleListFilters.parse(
    Object.fromEntries(searchParams.entries())
  ), hasFilters = searchParams.has("tasks") || searchParams.has("environments") || searchParams.has("search"), handleFilterChange = (0, import_react157.useCallback)((filterType, value) => {
    value ? searchParams.set(filterType, value) : searchParams.delete(filterType), searchParams.delete("page"), navigate(`${location.pathname}?${searchParams.toString()}`);
  }, []), handleTaskChange = (0, import_react157.useCallback)((value) => {
    handleFilterChange("tasks", value === "ALL" ? void 0 : value);
  }, []), handleEnvironmentChange = (0, import_react157.useCallback)((value) => {
    handleFilterChange("environments", value === "ALL" ? void 0 : value);
  }, []), handleSearchChange = useThrottle((value) => {
    handleFilterChange("search", value.length === 0 ? void 0 : value);
  }, 300), clearFilters = (0, import_react157.useCallback)(() => {
    searchParams.delete("page"), searchParams.delete("enabled"), searchParams.delete("tasks"), searchParams.delete("environments"), searchParams.delete("search"), navigate(`${location.pathname}?${searchParams.toString()}`);
  }, []);
  return /* @__PURE__ */ (0, import_jsx_runtime217.jsxs)("div", { className: "flex w-full flex-row", children: [
    /* @__PURE__ */ (0, import_jsx_runtime217.jsx)(
      Input,
      {
        name: "search",
        placeholder: "Search schedule id, external id, deduplication id or CRON pattern",
        icon: "search",
        variant: "tertiary",
        className: "grow",
        defaultValue: search,
        onChange: (e) => handleSearchChange(e.target.value)
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime217.jsx)(SelectGroup3, { children: /* @__PURE__ */ (0, import_jsx_runtime217.jsxs)(
      Select3,
      {
        name: "environment",
        value: environments2?.at(0) ?? "ALL",
        onValueChange: handleEnvironmentChange,
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime217.jsx)(SelectTrigger2, { size: "minimal", width: "full", children: /* @__PURE__ */ (0, import_jsx_runtime217.jsx)(
            SelectValue2,
            {
              placeholder: "Select environment",
              className: "ml-2 whitespace-nowrap p-0"
            }
          ) }),
          /* @__PURE__ */ (0, import_jsx_runtime217.jsxs)(SelectContent, { children: [
            /* @__PURE__ */ (0, import_jsx_runtime217.jsx)(SelectItem3, { value: "ALL", children: /* @__PURE__ */ (0, import_jsx_runtime217.jsx)(
              Paragraph,
              {
                variant: "extra-small",
                className: "whitespace-nowrap pl-0.5 transition group-hover:text-text-bright",
                children: "All environments"
              }
            ) }),
            possibleEnvironments.map((env6) => /* @__PURE__ */ (0, import_jsx_runtime217.jsx)(SelectItem3, { value: env6.id, children: /* @__PURE__ */ (0, import_jsx_runtime217.jsxs)("div", { className: "flex items-center gap-x-2", children: [
              /* @__PURE__ */ (0, import_jsx_runtime217.jsx)(EnvironmentLabel, { environment: env6, userName: env6.userName }),
              /* @__PURE__ */ (0, import_jsx_runtime217.jsx)(Paragraph, { variant: "extra-small", children: "environment" })
            ] }) }, env6.id))
          ] })
        ]
      }
    ) }),
    /* @__PURE__ */ (0, import_jsx_runtime217.jsx)(SelectGroup3, { children: /* @__PURE__ */ (0, import_jsx_runtime217.jsxs)(Select3, { name: "tasks", value: tasks?.at(0) ?? "ALL", onValueChange: handleTaskChange, children: [
      /* @__PURE__ */ (0, import_jsx_runtime217.jsx)(SelectTrigger2, { size: "minimal", width: "full", children: /* @__PURE__ */ (0, import_jsx_runtime217.jsx)(SelectValue2, { placeholder: "Select task", className: "ml-2 p-0" }) }),
      /* @__PURE__ */ (0, import_jsx_runtime217.jsxs)(SelectContent, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime217.jsx)(SelectItem3, { value: "ALL", children: /* @__PURE__ */ (0, import_jsx_runtime217.jsx)(
          Paragraph,
          {
            variant: "extra-small",
            className: "whitespace-nowrap pl-0.5 transition group-hover:text-text-bright",
            children: "All tasks"
          }
        ) }),
        possibleTasks.map((task) => /* @__PURE__ */ (0, import_jsx_runtime217.jsx)(SelectItem3, { value: task, children: /* @__PURE__ */ (0, import_jsx_runtime217.jsx)(
          Paragraph,
          {
            variant: "extra-small",
            className: "whitespace-nowrap pl-0.5 transition group-hover:text-text-bright",
            children: task
          }
        ) }, task))
      ] })
    ] }) }),
    hasFilters && /* @__PURE__ */ (0, import_jsx_runtime217.jsx)(Button, { variant: "minimal/small", onClick: () => clearFilters(), LeadingIcon: import_solid85.XMarkIcon, children: "Clear all" })
  ] });
}

// app/presenters/v3/ScheduleListPresenter.server.ts
var DEFAULT_PAGE_SIZE5 = 20, ScheduleListPresenter = class extends BasePresenter {
  async call({
    userId,
    projectId,
    tasks,
    environments: environments2,
    search,
    page,
    pageSize: pageSize3 = DEFAULT_PAGE_SIZE5
  }) {
    let hasFilters = tasks !== void 0 || environments2 !== void 0 || search !== void 0 && search !== "", project = await this._replica.project.findFirstOrThrow({
      select: {
        id: !0,
        organizationId: !0,
        environments: {
          select: {
            id: !0,
            type: !0,
            slug: !0,
            orgMember: {
              select: {
                user: {
                  select: {
                    id: !0,
                    name: !0,
                    displayName: !0
                  }
                }
              }
            }
          }
        }
      },
      where: {
        id: projectId
      }
    }), schedulesCount = await this._prisma.taskSchedule.count({
      where: {
        projectId
      }
    }), possibleTasks = await this._replica.backgroundWorkerTask.findMany({
      distinct: ["slug"],
      where: {
        projectId: project.id,
        triggerSource: "SCHEDULED"
      }
    });
    search = search && search !== "" ? `%${search}%` : void 0;
    let totalCount = await this._replica.taskSchedule.count({
      where: {
        projectId: project.id,
        taskIdentifier: tasks ? { in: tasks } : void 0,
        instances: {
          some: {
            environmentId: environments2 ? { in: environments2 } : void 0
          }
        },
        AND: search ? {
          OR: [
            {
              externalId: {
                contains: search,
                mode: "insensitive"
              }
            },
            {
              friendlyId: {
                contains: search,
                mode: "insensitive"
              }
            },
            {
              deduplicationKey: {
                contains: search,
                mode: "insensitive"
              }
            },
            {
              generatorExpression: {
                contains: search,
                mode: "insensitive"
              }
            }
          ]
        } : void 0
      }
    }), rawSchedules = await this._replica.taskSchedule.findMany({
      select: {
        id: !0,
        friendlyId: !0,
        taskIdentifier: !0,
        deduplicationKey: !0,
        userProvidedDeduplicationKey: !0,
        generatorExpression: !0,
        generatorDescription: !0,
        timezone: !0,
        externalId: !0,
        instances: {
          select: {
            environmentId: !0
          }
        },
        active: !0
      },
      where: {
        projectId: project.id,
        taskIdentifier: tasks ? { in: tasks } : void 0,
        instances: environments2 ? {
          some: {
            environmentId: environments2 ? { in: environments2 } : void 0
          }
        } : void 0,
        AND: search ? {
          OR: [
            {
              externalId: {
                contains: search,
                mode: "insensitive"
              }
            },
            {
              friendlyId: {
                contains: search,
                mode: "insensitive"
              }
            },
            {
              deduplicationKey: {
                contains: search,
                mode: "insensitive"
              }
            },
            {
              generatorExpression: {
                contains: search,
                mode: "insensitive"
              }
            }
          ]
        } : void 0
      },
      take: pageSize3,
      skip: (page - 1) * pageSize3
    }), latestRuns = rawSchedules.length > 0 ? await this._replica.$queryRaw`
    SELECT t."scheduleId", t."createdAt"
    FROM (
      SELECT "scheduleId", MAX("createdAt") as "LatestRun"
      FROM ${sqlDatabaseSchema}."TaskRun"
      WHERE "scheduleId" IN (${src_exports.Prisma.join(rawSchedules.map((s) => s.id))})
      GROUP BY "scheduleId"
    ) r
    JOIN ${sqlDatabaseSchema}."TaskRun" t
    ON t."scheduleId" = r."scheduleId" AND t."createdAt" = r."LatestRun";` : [], schedules = rawSchedules.map((schedule) => {
      let latestRun = latestRuns.find((r) => r.scheduleId === schedule.id);
      return {
        id: schedule.id,
        friendlyId: schedule.friendlyId,
        taskIdentifier: schedule.taskIdentifier,
        deduplicationKey: schedule.deduplicationKey,
        userProvidedDeduplicationKey: schedule.userProvidedDeduplicationKey,
        cron: schedule.generatorExpression,
        cronDescription: schedule.generatorDescription,
        timezone: schedule.timezone,
        active: schedule.active,
        externalId: schedule.externalId,
        lastRun: latestRun?.createdAt,
        nextRun: calculateNextScheduledTimestamp(schedule.generatorExpression, schedule.timezone),
        environments: schedule.instances.map((instance) => {
          let environment = project.environments.find((env6) => env6.id === instance.environmentId);
          if (!environment)
            throw new Error(
              `Environment not found for TaskScheduleInstance env: ${instance.environmentId}`
            );
          return displayableEnvironment(environment, userId);
        })
      };
    }), limit = await getLimit(project.organizationId, "schedules", 500);
    return {
      currentPage: page,
      totalPages: Math.ceil(totalCount / pageSize3),
      totalCount,
      schedules,
      possibleTasks: possibleTasks.map((task) => task.slug),
      possibleEnvironments: project.environments.map((environment) => displayableEnvironment(environment, userId)),
      hasFilters,
      limits: {
        used: schedulesCount,
        limit
      },
      filters: {
        tasks,
        environments: environments2,
        search
      }
    };
  }
};

// app/routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.schedules/route.tsx
var import_jsx_runtime218 = require("react/jsx-runtime"), loader54 = async ({ request, params }) => {
  let userId = await requireUserId(request), { projectParam: projectParam2, organizationSlug } = ProjectParamSchema.parse(params), url = new URL(request.url), s = Object.fromEntries(url.searchParams.entries()), filters = ScheduleListFilters.parse(s), project = await findProjectBySlug(organizationSlug, projectParam2, userId);
  if (!project)
    return redirectWithErrorMessage("/", request, "Project not found");
  let list3 = await new ScheduleListPresenter().call({
    userId,
    projectId: project.id,
    ...filters
  });
  return (0, import_remix_typedjson53.typedjson)(list3);
};
function Page44() {
  let {
    schedules,
    possibleTasks,
    possibleEnvironments,
    hasFilters,
    filters,
    limits,
    currentPage,
    totalPages
  } = (0, import_remix_typedjson53.useTypedLoaderData)(), location = (0, import_react158.useLocation)(), organization = useOrganization(), project = useProject(), pathName = usePathName(), plan = useCurrentPlan(), requiresUpgrade = plan?.v3Subscription?.plan && limits.used >= plan.v3Subscription.plan.limits.schedules.number && !plan.v3Subscription.plan.limits.schedules.canExceed, canUpgrade = plan?.v3Subscription?.plan && !plan.v3Subscription.plan.limits.schedules.canExceed, { scheduleParam } = (0, import_react158.useParams)(), isShowingNewPane = pathName.endsWith("/new"), isShowingSchedule = !!scheduleParam;
  return /* @__PURE__ */ (0, import_jsx_runtime218.jsxs)(PageContainer, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime218.jsxs)(NavBar, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime218.jsx)(PageTitle, { title: "Schedules" }),
      /* @__PURE__ */ (0, import_jsx_runtime218.jsxs)(PageAccessories, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime218.jsx)(AdminDebugTooltip, { children: /* @__PURE__ */ (0, import_jsx_runtime218.jsx)(PropertyTable, { children: schedules.map((schedule) => /* @__PURE__ */ (0, import_jsx_runtime218.jsx)(Property, { label: schedule.friendlyId, children: /* @__PURE__ */ (0, import_jsx_runtime218.jsx)("div", { className: "flex items-center gap-2", children: /* @__PURE__ */ (0, import_jsx_runtime218.jsx)(Paragraph, { variant: "extra-small/bright/mono", children: schedule.id }) }) }, schedule.id)) }) }),
        limits.used >= limits.limit ? /* @__PURE__ */ (0, import_jsx_runtime218.jsxs)(Dialog, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime218.jsx)(DialogTrigger, { asChild: !0, children: /* @__PURE__ */ (0, import_jsx_runtime218.jsx)(
            Button,
            {
              LeadingIcon: import_solid86.PlusIcon,
              variant: "primary/small",
              shortcut: { key: "n" },
              disabled: possibleTasks.length === 0 || isShowingNewPane,
              children: "New schedule"
            }
          ) }),
          /* @__PURE__ */ (0, import_jsx_runtime218.jsxs)(DialogContent, { children: [
            /* @__PURE__ */ (0, import_jsx_runtime218.jsx)(DialogHeader, { children: "You've exceeded your limit" }),
            /* @__PURE__ */ (0, import_jsx_runtime218.jsxs)(DialogDescription, { children: [
              "You've used ",
              limits.used,
              "/",
              limits.limit,
              " of your schedules."
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime218.jsx)(DialogFooter, { children: canUpgrade ? /* @__PURE__ */ (0, import_jsx_runtime218.jsx)(LinkButton, { variant: "primary/small", to: v3BillingPath(organization), children: "Upgrade" }) : /* @__PURE__ */ (0, import_jsx_runtime218.jsx)(
              Feedback,
              {
                button: /* @__PURE__ */ (0, import_jsx_runtime218.jsx)(Button, { variant: "primary/small", children: "Request more" }),
                defaultValue: "help"
              }
            ) })
          ] })
        ] }) : /* @__PURE__ */ (0, import_jsx_runtime218.jsx)(
          LinkButton,
          {
            LeadingIcon: import_solid86.PlusIcon,
            to: `${v3NewSchedulePath(organization, project)}${location.search}`,
            variant: "primary/small",
            shortcut: { key: "n" },
            disabled: possibleTasks.length === 0 || isShowingNewPane,
            children: "New schedule"
          }
        )
      ] })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime218.jsx)(PageBody, { scrollable: !1, children: /* @__PURE__ */ (0, import_jsx_runtime218.jsxs)(ResizablePanelGroup, { direction: "horizontal", className: "h-full max-h-full", children: [
      /* @__PURE__ */ (0, import_jsx_runtime218.jsx)(ResizablePanel, { order: 1, minSize: 20, defaultSize: 60, children: possibleTasks.length === 0 ? /* @__PURE__ */ (0, import_jsx_runtime218.jsx)(CreateScheduledTaskInstructions, {}) : schedules.length === 0 && !hasFilters ? /* @__PURE__ */ (0, import_jsx_runtime218.jsx)(AttachYourFirstScheduleInstructions, {}) : /* @__PURE__ */ (0, import_jsx_runtime218.jsxs)("div", { className: "p-3", children: [
        /* @__PURE__ */ (0, import_jsx_runtime218.jsxs)("div", { className: "mb-2 flex items-center justify-between gap-x-2", children: [
          /* @__PURE__ */ (0, import_jsx_runtime218.jsx)(
            ScheduleFilters,
            {
              possibleEnvironments,
              possibleTasks
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime218.jsx)("div", { className: "flex items-center justify-end gap-x-2", children: /* @__PURE__ */ (0, import_jsx_runtime218.jsx)(
            PaginationControls,
            {
              currentPage,
              totalPages,
              showPageNumbers: !1
            }
          ) })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime218.jsx)(SchedulesTable, { schedules, hasFilters }),
        /* @__PURE__ */ (0, import_jsx_runtime218.jsxs)("div", { className: "mt-3 flex w-full items-start justify-between", children: [
          requiresUpgrade ? /* @__PURE__ */ (0, import_jsx_runtime218.jsx)(
            InfoPanel,
            {
              variant: "upgrade",
              icon: import_solid86.LockOpenIcon,
              iconClassName: "text-indigo-500",
              title: "Unlock more schedules",
              to: v3BillingPath(organization),
              buttonLabel: "Upgrade",
              children: /* @__PURE__ */ (0, import_jsx_runtime218.jsxs)(Paragraph, { variant: "small", children: [
                "You've used all ",
                limits.limit,
                " of your available schedules. Upgrade your plan to enable more."
              ] })
            }
          ) : /* @__PURE__ */ (0, import_jsx_runtime218.jsxs)("div", { className: "flex h-fit flex-col items-start gap-4 rounded-md border border-grid-bright bg-background-bright p-4", children: [
            /* @__PURE__ */ (0, import_jsx_runtime218.jsxs)("div", { className: "flex items-center justify-between gap-6", children: [
              /* @__PURE__ */ (0, import_jsx_runtime218.jsxs)(Header3, { children: [
                "You've used ",
                limits.used,
                "/",
                limits.limit,
                " of your schedules."
              ] }),
              canUpgrade ? /* @__PURE__ */ (0, import_jsx_runtime218.jsx)(LinkButton, { to: v3BillingPath(organization), variant: "secondary/small", children: "Upgrade" }) : /* @__PURE__ */ (0, import_jsx_runtime218.jsx)(
                Feedback,
                {
                  button: /* @__PURE__ */ (0, import_jsx_runtime218.jsx)(Button, { variant: "secondary/small", children: "Request more" }),
                  defaultValue: "help"
                }
              )
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime218.jsx)("div", { className: "h-2 w-full overflow-hidden rounded-full border border-grid-bright", children: /* @__PURE__ */ (0, import_jsx_runtime218.jsx)(
              "div",
              {
                className: "h-full bg-grid-bright",
                style: { width: `${limits.used / limits.limit * 100}%` }
              }
            ) })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime218.jsx)(PaginationControls, { currentPage, totalPages })
        ] })
      ] }) }),
      (isShowingNewPane || isShowingSchedule) && /* @__PURE__ */ (0, import_jsx_runtime218.jsxs)(import_jsx_runtime218.Fragment, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime218.jsx)(ResizableHandle, { withHandle: !0 }),
        /* @__PURE__ */ (0, import_jsx_runtime218.jsx)(ResizablePanel, { order: 2, minSize: 20, defaultSize: 40, children: /* @__PURE__ */ (0, import_jsx_runtime218.jsx)(import_react158.Outlet, {}) })
      ] })
    ] }) })
  ] });
}
function CreateScheduledTaskInstructions() {
  return /* @__PURE__ */ (0, import_jsx_runtime218.jsx)(MainCenteredContainer, { className: "max-w-md", children: /* @__PURE__ */ (0, import_jsx_runtime218.jsx)(
    InfoPanel,
    {
      title: "Create your first scheduled task",
      icon: import_solid86.ClockIcon,
      iconClassName: "text-sun-500",
      panelClassName: "max-w-full",
      to: docsPath("v3/tasks-scheduled"),
      buttonLabel: "Scheduled task docs",
      children: /* @__PURE__ */ (0, import_jsx_runtime218.jsxs)(Paragraph, { variant: "small", children: [
        "You have no scheduled tasks in your project. Before you can schedule a task you need to create a ",
        /* @__PURE__ */ (0, import_jsx_runtime218.jsx)(InlineCode, { children: "schedules.task" }),
        "."
      ] })
    }
  ) });
}
function AttachYourFirstScheduleInstructions() {
  let organization = useOrganization(), project = useProject(), location = (0, import_react158.useLocation)();
  return /* @__PURE__ */ (0, import_jsx_runtime218.jsx)(MainCenteredContainer, { className: "max-w-md", children: /* @__PURE__ */ (0, import_jsx_runtime218.jsxs)(
    InfoPanel,
    {
      title: "Attach your first schedule",
      icon: import_solid86.ClockIcon,
      iconClassName: "text-sun-500",
      panelClassName: "max-w-full",
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime218.jsx)(Paragraph, { spacing: !0, variant: "small", children: "Scheduled tasks will only run automatically if you connect a schedule to them, you can do this in the dashboard or using the SDK." }),
        /* @__PURE__ */ (0, import_jsx_runtime218.jsxs)("div", { className: "flex gap-2", children: [
          /* @__PURE__ */ (0, import_jsx_runtime218.jsx)(
            LinkButton,
            {
              to: `${v3NewSchedulePath(organization, project)}${location.search}`,
              variant: "primary/small",
              LeadingIcon: import_solid86.RectangleGroupIcon,
              className: "inline-flex",
              children: "Use the dashboard"
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime218.jsx)(
            LinkButton,
            {
              to: docsPath("v3/tasks-scheduled"),
              variant: "primary/small",
              LeadingIcon: import_solid87.BookOpenIcon,
              className: "inline-flex",
              children: "Use the SDK"
            }
          )
        ] })
      ]
    }
  ) });
}
function SchedulesTable({
  schedules,
  hasFilters
}) {
  let organization = useOrganization(), project = useProject(), location = (0, import_react158.useLocation)(), { scheduleParam } = (0, import_react158.useParams)();
  return /* @__PURE__ */ (0, import_jsx_runtime218.jsxs)(Table, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime218.jsx)(TableHeader, { children: /* @__PURE__ */ (0, import_jsx_runtime218.jsxs)(TableRow, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime218.jsx)(TableHeaderCell, { children: "ID" }),
      /* @__PURE__ */ (0, import_jsx_runtime218.jsx)(TableHeaderCell, { children: "Task ID" }),
      /* @__PURE__ */ (0, import_jsx_runtime218.jsx)(TableHeaderCell, { children: "External ID" }),
      /* @__PURE__ */ (0, import_jsx_runtime218.jsx)(TableHeaderCell, { children: "CRON" }),
      /* @__PURE__ */ (0, import_jsx_runtime218.jsx)(TableHeaderCell, { hiddenLabel: !0, children: "CRON description" }),
      /* @__PURE__ */ (0, import_jsx_runtime218.jsx)(TableHeaderCell, { children: "Timezone" }),
      /* @__PURE__ */ (0, import_jsx_runtime218.jsx)(TableHeaderCell, { children: "Next run" }),
      /* @__PURE__ */ (0, import_jsx_runtime218.jsx)(TableHeaderCell, { children: "Last run" }),
      /* @__PURE__ */ (0, import_jsx_runtime218.jsx)(TableHeaderCell, { children: "Deduplication key" }),
      /* @__PURE__ */ (0, import_jsx_runtime218.jsx)(TableHeaderCell, { children: "Environments" }),
      /* @__PURE__ */ (0, import_jsx_runtime218.jsx)(TableHeaderCell, { children: "Enabled" })
    ] }) }),
    /* @__PURE__ */ (0, import_jsx_runtime218.jsx)(TableBody, { children: schedules.length === 0 ? /* @__PURE__ */ (0, import_jsx_runtime218.jsx)(TableBlankRow, { colSpan: 10, children: "There are no matches for your filters" }) : schedules.map((schedule) => {
      let path2 = `${v3SchedulePath(organization, project, schedule)}${location.search}`, isSelected = scheduleParam === schedule.friendlyId, cellClass = schedule.active ? "" : "opacity-50";
      return /* @__PURE__ */ (0, import_jsx_runtime218.jsxs)(TableRow, { className: isSelected ? "bg-grid-dimmed" : void 0, children: [
        /* @__PURE__ */ (0, import_jsx_runtime218.jsx)(TableCell, { to: path2, className: cellClass, children: schedule.friendlyId }),
        /* @__PURE__ */ (0, import_jsx_runtime218.jsx)(TableCell, { to: path2, className: cellClass, children: schedule.taskIdentifier }),
        /* @__PURE__ */ (0, import_jsx_runtime218.jsx)(TableCell, { to: path2, className: cellClass, children: schedule.externalId ? schedule.externalId : "\u2013" }),
        /* @__PURE__ */ (0, import_jsx_runtime218.jsx)(TableCell, { to: path2, className: cellClass, children: schedule.cron }),
        /* @__PURE__ */ (0, import_jsx_runtime218.jsx)(TableCell, { to: path2, className: cellClass, children: schedule.cronDescription }),
        /* @__PURE__ */ (0, import_jsx_runtime218.jsx)(TableCell, { to: path2, className: cellClass, children: schedule.timezone }),
        /* @__PURE__ */ (0, import_jsx_runtime218.jsx)(TableCell, { to: path2, className: cellClass, children: /* @__PURE__ */ (0, import_jsx_runtime218.jsx)(DateTime, { date: schedule.nextRun, timeZone: schedule.timezone }) }),
        /* @__PURE__ */ (0, import_jsx_runtime218.jsx)(TableCell, { to: path2, className: cellClass, children: schedule.lastRun ? /* @__PURE__ */ (0, import_jsx_runtime218.jsx)(DateTime, { date: schedule.lastRun, timeZone: schedule.timezone }) : "\u2013" }),
        /* @__PURE__ */ (0, import_jsx_runtime218.jsx)(TableCell, { to: path2, className: cellClass, children: schedule.userProvidedDeduplicationKey ? schedule.deduplicationKey : "\u2013" }),
        /* @__PURE__ */ (0, import_jsx_runtime218.jsx)(TableCell, { to: path2, className: cellClass, children: /* @__PURE__ */ (0, import_jsx_runtime218.jsx)(EnvironmentLabels, { environments: schedule.environments, size: "small" }) }),
        /* @__PURE__ */ (0, import_jsx_runtime218.jsx)(TableCell, { to: path2, children: /* @__PURE__ */ (0, import_jsx_runtime218.jsx)(EnabledStatus, { enabled: schedule.active }) })
      ] }, schedule.id);
    }) })
  ] });
}

// app/routes/_app.orgs.$organizationId.subscription.v3.free_connect_success/route.tsx
var route_exports68 = {};
__export(route_exports68, {
  loader: () => loader55
});
var import_remix_typedjson54 = require("remix-typedjson"), import_zod124 = require("zod");
var ParamsSchema6 = import_zod124.z.object({
  organizationId: import_zod124.z.string()
}), loader55 = async ({ request, params }) => {
  let { organizationId } = ParamsSchema6.parse(params), org = await prisma.organization.findUnique({
    select: {
      slug: !0,
      _count: {
        select: {
          projects: !0
        }
      }
    },
    where: {
      id: organizationId
    }
  });
  if (!org)
    throw new Response(null, { status: 404 });
  return org._count.projects > 0 ? redirectWithSuccessMessage(
    v3BillingPath({ slug: org.slug }),
    request,
    "Free tier unlocked successfully."
  ) : (0, import_remix_typedjson54.redirect)(newProjectPath({ slug: org.slug }, "You're on the Free plan."));
};

// app/routes/_app.orgs.$organizationSlug.projects.$projectParam.setup.astro/route.tsx
var route_exports69 = {};
__export(route_exports69, {
  default: () => SetUpAstro
});
var import_solid88 = require("@heroicons/react/20/solid");
var import_jsx_runtime219 = require("react/jsx-runtime");
function SetUpAstro() {
  let organization = useOrganization(), project = useProject();
  useProjectSetupComplete();
  let { apiKey } = useV2OnboardingApiKey(), appOrigin = useAppOrigin();
  return /* @__PURE__ */ (0, import_jsx_runtime219.jsxs)("div", { className: "mx-auto max-w-3xl pt-16", children: [
    /* @__PURE__ */ (0, import_jsx_runtime219.jsx)("div", { className: "mb-12 grid place-items-center", children: /* @__PURE__ */ (0, import_jsx_runtime219.jsx)(AstroLogo, { className: "w-64" }) }),
    /* @__PURE__ */ (0, import_jsx_runtime219.jsxs)("div", { className: "flex items-center justify-between", children: [
      /* @__PURE__ */ (0, import_jsx_runtime219.jsx)(Header1, { spacing: !0, className: "text-text-bright", children: "Get setup in 5 minutes" }),
      /* @__PURE__ */ (0, import_jsx_runtime219.jsxs)("div", { className: "flex items-center gap-2", children: [
        /* @__PURE__ */ (0, import_jsx_runtime219.jsx)(
          LinkButton,
          {
            to: projectSetupPath(organization, project),
            variant: "tertiary/small",
            LeadingIcon: import_solid88.Squares2X2Icon,
            children: "Choose a different framework"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime219.jsx)(
          Feedback,
          {
            button: /* @__PURE__ */ (0, import_jsx_runtime219.jsx)(Button, { variant: "tertiary/small", LeadingIcon: import_solid88.ChatBubbleLeftRightIcon, children: "I'm stuck!" }),
            defaultValue: "help"
          }
        )
      ] })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime219.jsxs)("div", { children: [
      /* @__PURE__ */ (0, import_jsx_runtime219.jsx)(
        Callout,
        {
          variant: "info",
          to: "https://github.com/triggerdotdev/trigger.dev/discussions/430",
          className: "mb-8",
          children: "Trigger.dev has full support for serverless. We will be adding support for long-running servers soon."
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime219.jsxs)("div", { children: [
        /* @__PURE__ */ (0, import_jsx_runtime219.jsx)(
          StepNumber,
          {
            stepNumber: "1",
            title: "Run the CLI 'init' command in an existing Astro project"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime219.jsxs)(StepContentContainer, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime219.jsx)(InitCommand, { appOrigin, apiKey }),
          /* @__PURE__ */ (0, import_jsx_runtime219.jsxs)(Paragraph, { spacing: !0, variant: "small", children: [
            "You\u2019ll notice a new folder in your project called 'jobs'. We\u2019ve added a very simple example Job in ",
            /* @__PURE__ */ (0, import_jsx_runtime219.jsx)(InlineCode, { variant: "extra-small", children: "example.ts" }),
            " to help you get started."
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime219.jsx)(StepNumber, { stepNumber: "2", title: "Run your Astro app" }),
        /* @__PURE__ */ (0, import_jsx_runtime219.jsx)(StepContentContainer, { children: /* @__PURE__ */ (0, import_jsx_runtime219.jsx)(RunDevCommand, {}) }),
        /* @__PURE__ */ (0, import_jsx_runtime219.jsx)(StepNumber, { stepNumber: "3", title: "Run the CLI 'dev' command" }),
        /* @__PURE__ */ (0, import_jsx_runtime219.jsx)(StepContentContainer, { children: /* @__PURE__ */ (0, import_jsx_runtime219.jsx)(TriggerDevStep, {}) }),
        /* @__PURE__ */ (0, import_jsx_runtime219.jsx)(StepNumber, { stepNumber: "6", title: "Wait for Jobs", displaySpinner: !0 }),
        /* @__PURE__ */ (0, import_jsx_runtime219.jsx)(StepContentContainer, { children: /* @__PURE__ */ (0, import_jsx_runtime219.jsx)(Paragraph, { children: "This page will automatically refresh." }) })
      ] })
    ] })
  ] });
}

// app/routes/_app.orgs.$organizationSlug.projects.$projectParam.setup.remix/route.tsx
var route_exports70 = {};
__export(route_exports70, {
  default: () => SetUpRemix
});
var import_solid89 = require("@heroicons/react/20/solid");
var import_jsx_runtime220 = require("react/jsx-runtime");
function SetUpRemix() {
  let organization = useOrganization(), project = useProject();
  useProjectSetupComplete();
  let { apiKey } = useV2OnboardingApiKey(), appOrigin = useAppOrigin();
  return /* @__PURE__ */ (0, import_jsx_runtime220.jsxs)("div", { className: "mx-auto max-w-3xl pt-16", children: [
    /* @__PURE__ */ (0, import_jsx_runtime220.jsx)("div", { className: "mb-12 grid place-items-center", children: /* @__PURE__ */ (0, import_jsx_runtime220.jsx)(RemixLogo, { className: "w-64" }) }),
    /* @__PURE__ */ (0, import_jsx_runtime220.jsxs)("div", { className: "flex items-center justify-between", children: [
      /* @__PURE__ */ (0, import_jsx_runtime220.jsx)(Header1, { spacing: !0, className: "text-text-bright", children: "Get setup in 5 minutes" }),
      /* @__PURE__ */ (0, import_jsx_runtime220.jsxs)("div", { className: "flex items-center gap-2", children: [
        /* @__PURE__ */ (0, import_jsx_runtime220.jsx)(
          LinkButton,
          {
            to: projectSetupPath(organization, project),
            variant: "tertiary/small",
            LeadingIcon: import_solid89.Squares2X2Icon,
            children: "Choose a different framework"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime220.jsx)(
          Feedback,
          {
            button: /* @__PURE__ */ (0, import_jsx_runtime220.jsx)(Button, { variant: "tertiary/small", LeadingIcon: import_solid89.ChatBubbleLeftRightIcon, children: "I'm stuck!" }),
            defaultValue: "help"
          }
        )
      ] })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime220.jsxs)("div", { children: [
      /* @__PURE__ */ (0, import_jsx_runtime220.jsx)(
        Callout,
        {
          variant: "info",
          to: "https://github.com/triggerdotdev/trigger.dev/discussions/430",
          className: "mb-8",
          children: "Trigger.dev has full support for serverless. We will be adding support for long-running servers soon."
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime220.jsxs)("div", { children: [
        /* @__PURE__ */ (0, import_jsx_runtime220.jsx)(
          StepNumber,
          {
            stepNumber: "1",
            title: "Run the CLI 'init' command in an existing Remix project"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime220.jsxs)(StepContentContainer, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime220.jsx)(InitCommand, { appOrigin, apiKey }),
          /* @__PURE__ */ (0, import_jsx_runtime220.jsxs)(Paragraph, { spacing: !0, variant: "small", children: [
            "You\u2019ll notice a new folder in your project called 'jobs'. We\u2019ve added a very simple example Job in ",
            /* @__PURE__ */ (0, import_jsx_runtime220.jsx)(InlineCode, { variant: "extra-small", children: "example.server.ts" }),
            " to help you get started."
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime220.jsx)(StepNumber, { stepNumber: "2", title: "Run your Remix app" }),
        /* @__PURE__ */ (0, import_jsx_runtime220.jsx)(StepContentContainer, { children: /* @__PURE__ */ (0, import_jsx_runtime220.jsx)(RunDevCommand, {}) }),
        /* @__PURE__ */ (0, import_jsx_runtime220.jsx)(StepNumber, { stepNumber: "3", title: "Run the CLI 'dev' command" }),
        /* @__PURE__ */ (0, import_jsx_runtime220.jsx)(StepContentContainer, { children: /* @__PURE__ */ (0, import_jsx_runtime220.jsx)(TriggerDevStep, {}) }),
        /* @__PURE__ */ (0, import_jsx_runtime220.jsx)(StepNumber, { stepNumber: "6", title: "Wait for Jobs", displaySpinner: !0 }),
        /* @__PURE__ */ (0, import_jsx_runtime220.jsx)(StepContentContainer, { children: /* @__PURE__ */ (0, import_jsx_runtime220.jsx)(Paragraph, { children: "This page will automatically refresh." }) })
      ] })
    ] })
  ] });
}

// app/routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.settings/route.tsx
var route_exports71 = {};
__export(route_exports71, {
  action: () => action17,
  createSchema: () => createSchema,
  default: () => Page45
});
var import_react159 = require("@conform-to/react"), import_zod125 = require("@conform-to/zod"), import_react160 = require("@remix-run/react"), import_server_runtime19 = require("@remix-run/server-runtime"), import_zod126 = require("zod");
var import_jsx_runtime221 = require("react/jsx-runtime");
function createSchema(constraints = {}) {
  return import_zod126.z.discriminatedUnion("action", [
    import_zod126.z.object({
      action: import_zod126.z.literal("rename"),
      projectName: import_zod126.z.string().min(3, "Project name must have at least 3 characters").max(50)
    })
  ]);
}
var action17 = async ({ request, params }) => {
  let userId = await requireUserId(request), { organizationSlug, projectParam: projectParam2 } = params;
  if (!organizationSlug || !projectParam2)
    return (0, import_server_runtime19.json)({ errors: { body: "organizationSlug is required" } }, { status: 400 });
  let formData = await request.formData(), schema18 = createSchema({
    getSlugMatch: (slug3) => ({ isMatch: slug3 === projectParam2, projectSlug: projectParam2 })
  }), submission = (0, import_zod125.parse)(formData, { schema: schema18 });
  if (!submission.value || submission.intent !== "submit")
    return (0, import_server_runtime19.json)(submission);
  try {
    switch (submission.value.action) {
      case "rename":
        return await prisma.project.update({
          where: {
            slug: projectParam2,
            organization: {
              members: {
                some: {
                  userId
                }
              }
            }
          },
          data: {
            name: submission.value.projectName
          }
        }), redirectWithSuccessMessage(
          v3ProjectPath({ slug: organizationSlug }, { slug: projectParam2 }),
          request,
          `Project renamed to ${submission.value.projectName}`
        );
    }
  } catch (error) {
    return (0, import_server_runtime19.json)({ errors: { body: error.message } }, { status: 400 });
  }
};
function Page45() {
  let project = useProject(), lastSubmission = (0, import_react160.useActionData)(), navigation = (0, import_react160.useNavigation)(), [renameForm, { projectName }] = (0, import_react159.useForm)({
    id: "rename-project",
    // TODO: type this
    lastSubmission,
    shouldRevalidate: "onSubmit",
    onValidate({ formData }) {
      return (0, import_zod125.parse)(formData, {
        schema: createSchema()
      });
    }
  }), isRenameLoading = navigation.formData?.get("action") === "rename" && (navigation.state === "submitting" || navigation.state === "loading");
  return /* @__PURE__ */ (0, import_jsx_runtime221.jsxs)(PageContainer, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime221.jsxs)(NavBar, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime221.jsx)(PageTitle, { title: `${project.name} project settings` }),
      /* @__PURE__ */ (0, import_jsx_runtime221.jsx)(PageAccessories, { children: /* @__PURE__ */ (0, import_jsx_runtime221.jsx)(AdminDebugTooltip, { children: /* @__PURE__ */ (0, import_jsx_runtime221.jsxs)(PropertyTable, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime221.jsx)(Property, { label: "ID", children: /* @__PURE__ */ (0, import_jsx_runtime221.jsx)("div", { className: "flex items-center gap-2", children: /* @__PURE__ */ (0, import_jsx_runtime221.jsx)(Paragraph, { variant: "extra-small/bright/mono", children: project.id }) }) }),
        /* @__PURE__ */ (0, import_jsx_runtime221.jsx)(Property, { label: "Org ID", children: /* @__PURE__ */ (0, import_jsx_runtime221.jsx)("div", { className: "flex items-center gap-2", children: /* @__PURE__ */ (0, import_jsx_runtime221.jsx)(Paragraph, { variant: "extra-small/bright/mono", children: project.organizationId }) }) })
      ] }) }) })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime221.jsx)(PageBody, { children: /* @__PURE__ */ (0, import_jsx_runtime221.jsx)("div", { className: "flex flex-col gap-4", children: /* @__PURE__ */ (0, import_jsx_runtime221.jsxs)("div", { className: "flex flex-col gap-4", children: [
      /* @__PURE__ */ (0, import_jsx_runtime221.jsx)(Fieldset, { children: /* @__PURE__ */ (0, import_jsx_runtime221.jsxs)(InputGroup, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime221.jsx)(Label, { children: "Project ref" }),
        /* @__PURE__ */ (0, import_jsx_runtime221.jsx)(ClipboardField, { value: project.ref, variant: "secondary/small" }),
        /* @__PURE__ */ (0, import_jsx_runtime221.jsxs)(Hint, { children: [
          "This goes in your",
          " ",
          /* @__PURE__ */ (0, import_jsx_runtime221.jsx)(InlineCode, { variant: "extra-extra-small", children: "trigger.config" }),
          " file."
        ] })
      ] }) }),
      /* @__PURE__ */ (0, import_jsx_runtime221.jsxs)(import_react160.Form, { method: "post", ...renameForm.props, className: "max-w-md", children: [
        /* @__PURE__ */ (0, import_jsx_runtime221.jsx)("input", { type: "hidden", name: "action", value: "rename" }),
        /* @__PURE__ */ (0, import_jsx_runtime221.jsxs)(Fieldset, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime221.jsxs)(InputGroup, { children: [
            /* @__PURE__ */ (0, import_jsx_runtime221.jsx)(Label, { htmlFor: projectName.id, children: "Rename your project" }),
            /* @__PURE__ */ (0, import_jsx_runtime221.jsx)(
              Input,
              {
                ...import_react159.conform.input(projectName, { type: "text" }),
                defaultValue: project.name,
                placeholder: "Your project name",
                icon: "folder",
                autoFocus: !0
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime221.jsx)(FormError, { id: projectName.errorId, children: projectName.error })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime221.jsx)(
            FormButtons,
            {
              confirmButton: /* @__PURE__ */ (0, import_jsx_runtime221.jsx)(
                Button,
                {
                  type: "submit",
                  variant: "primary/small",
                  disabled: isRenameLoading,
                  LeadingIcon: isRenameLoading ? "spinner-white" : void 0,
                  children: "Rename project"
                }
              )
            }
          )
        ] })
      ] })
    ] }) }) })
  ] });
}

// app/routes/api.v1.integrations.$integrationSlug.connections.$connectionId.ts
var api_v1_integrations_integrationSlug_connections_connectionId_exports = {};
__export(api_v1_integrations_integrationSlug_connections_connectionId_exports, {
  loader: () => loader56
});
var import_server_runtime20 = require("@remix-run/server-runtime"), import_zod127 = require("zod");

// ../../node_modules/.pnpm/remix-utils@7.1.0_@remix-run+node@2.1.0_@remix-run+react@2.1.0_@remix-run+router@1.15.3_intl-_2dqvfzp5ebofcgnne2ur4wrx2i/node_modules/remix-utils/build/server/cors.js
var DEFAULT_OPTIONS = {
  origin: !0,
  methods: ["GET", "HEAD", "PUT", "PATCH", "POST", "DELETE"],
  allowedHeaders: [],
  exposedHeaders: []
}, CORS = class {
  options;
  constructor(options2) {
    this.options = Object.assign({}, DEFAULT_OPTIONS, options2);
  }
  async exec(request, response) {
    let isPreflight = request.method.toLowerCase() === "options";
    return await this.configureOrigin(response.headers, request), this.configureCredentials(response.headers), this.configureExposedHeaders(response.headers), isPreflight && (this.configureMethods(response.headers), this.configureAllowedHeaders(response.headers, request), this.configureMaxAge(response.headers), response.status === 204 && response.headers.set("Content-Length", "0")), response;
  }
  async resolveOrigin(request) {
    let { origin } = this.options;
    return typeof origin == "function" ? await origin(request.headers.get("origin") ?? "") : origin;
  }
  configureMaxAge(headers) {
    var { maxAge } = this.options;
    return this.isNumber(maxAge) && headers.append("Access-Control-Max-Age", maxAge.toString()), headers;
  }
  configureExposedHeaders(headers) {
    let exposedHeaders = this.options.exposedHeaders?.join(",");
    return !this.isString(exposedHeaders) || exposedHeaders === "" ? headers : (headers.append("Access-Control-Expose-Headers", exposedHeaders), null);
  }
  configureAllowedHeaders(headers, request) {
    let allowedHeaders = this.options.allowedHeaders?.join(",");
    if (!allowedHeaders) {
      let requestHeaders = request.headers.get("Access-Control-Request-Headers");
      this.isString(requestHeaders) && (allowedHeaders = requestHeaders), headers.append("Vary", "Access-Control-Request-Headers");
    }
    return allowedHeaders && allowedHeaders !== "" && headers.append("Access-Control-Allow-Headers", allowedHeaders), headers;
  }
  configureCredentials(headers) {
    return this.options.credentials === !0 && headers.append("Access-Control-Allow-Credentials", "true"), headers;
  }
  configureMethods(headers) {
    let methods = this.options.methods?.join(",");
    return this.isString(methods) && headers.append("Access-Control-Allow-Methods", methods), headers;
  }
  async configureOrigin(headers, request) {
    let origin = await this.resolveOrigin(request), requestOrigin = request.headers.get("origin");
    return !requestOrigin || origin === !1 ? headers : origin === void 0 || origin === "*" ? (headers.append("Access-Control-Allow-Origin", "*"), headers) : this.isString(origin) ? (headers.append("Access-Control-Allow-Origin", origin), headers.append("Vary", "Origin"), headers) : (this.isOriginAllowed(requestOrigin, origin) && (headers.append("Access-Control-Allow-Origin", requestOrigin), headers.append("Vary", "Origin")), headers);
  }
  isOriginAllowed(origin, allowedOrigin) {
    if (Array.isArray(allowedOrigin)) {
      for (let element of allowedOrigin)
        if (this.isOriginAllowed(origin, element))
          return !0;
      return !1;
    }
    return this.isString(allowedOrigin) ? origin === allowedOrigin : allowedOrigin instanceof RegExp ? allowedOrigin.test(origin) : !!allowedOrigin;
  }
  isString(value) {
    return typeof value == "string" || value instanceof String;
  }
  isNumber(value) {
    return typeof value == "number" || value instanceof Number;
  }
};
async function cors(request, response, options2 = DEFAULT_OPTIONS) {
  return new CORS(options2).exec(request, response);
}

// app/utils/apiCors.ts
function apiCors(request, response, options2 = { maxAge: 5 * 60 }) {
  return cors(request, response, options2);
}

// app/routes/api.v1.integrations.$integrationSlug.connections.$connectionId.ts
var ParamsSchema7 = import_zod127.z.object({
  integrationSlug: import_zod127.z.string(),
  connectionId: import_zod127.z.string()
});
async function loader56({ request, params }) {
  let authenticationResult = await authenticateApiRequest(request);
  if (!authenticationResult)
    return (0, import_server_runtime20.json)({ error: "Invalid or Missing API key" }, { status: 401 });
  if (authenticationResult.type !== "PRIVATE")
    return (0, import_server_runtime20.json)({ error: "Only private API keys can access this endpoint" }, { status: 403 });
  let authenticatedEnv = authenticationResult.environment, parsedParams = ParamsSchema7.safeParse(params);
  if (!parsedParams.success)
    return apiCors(request, (0, import_server_runtime20.json)({ error: parsedParams.error.message }, { status: 400 }));
  let connection = await prisma.integrationConnection.findFirst({
    where: {
      id: parsedParams.data.connectionId,
      integration: {
        slug: parsedParams.data.integrationSlug,
        organization: authenticatedEnv.organization
      }
    },
    include: {
      integration: {
        include: {
          authMethod: !0
        }
      },
      dataReference: !0
    }
  });
  if (!connection)
    return apiCors(request, (0, import_server_runtime20.json)({ error: "Connection not found" }, { status: 404 }));
  let auth = await resolveApiConnection(connection);
  return (0, import_server_runtime20.json)({
    id: connection.id,
    type: connection.connectionType,
    externalAccountId: connection.externalAccountId,
    expiresAt: connection.expiresAt,
    auth,
    integration: {
      id: connection.integration.id,
      slug: connection.integration.slug,
      title: connection.integration.title,
      description: connection.integration.description,
      authSource: connection.integration.authSource,
      authMethod: connection.integration.authMethod ? {
        id: connection.integration.authMethod.id,
        key: connection.integration.authMethod.key,
        name: connection.integration.authMethod.name,
        description: connection.integration.authMethod.description,
        type: connection.integration.authMethod.type
      } : null
    },
    createdAt: connection.createdAt,
    updatedAt: connection.updatedAt
  });
}

// app/routes/resources.$projectId.deployments.$deploymentShortCode.rollback.ts
var resources_projectId_deployments_deploymentShortCode_rollback_exports = {};
__export(resources_projectId_deployments_deploymentShortCode_rollback_exports, {
  action: () => action18,
  rollbackSchema: () => rollbackSchema
});
var import_zod128 = require("@conform-to/zod"), import_node10 = require("@remix-run/node"), import_zod129 = require("zod");

// app/v3/services/rollbackDeployment.server.ts
var RollbackDeploymentService = class extends BaseService {
  async call(deployment) {
    if (deployment.status !== "DEPLOYED") {
      logger.error("Can't roll back to unsuccessful deployment", { id: deployment.id });
      return;
    }
    if (await this._prisma.workerDeploymentPromotion.findFirst({
      where: {
        deploymentId: deployment.id,
        label: CURRENT_DEPLOYMENT_LABEL
      }
    })) {
      logger.error("Deployment is already the current deployment", { id: deployment.id });
      return;
    }
    return await this._prisma.workerDeploymentPromotion.upsert({
      where: {
        environmentId_label: {
          environmentId: deployment.environmentId,
          label: CURRENT_DEPLOYMENT_LABEL
        }
      },
      create: {
        deploymentId: deployment.id,
        environmentId: deployment.environmentId,
        label: CURRENT_DEPLOYMENT_LABEL
      },
      update: {
        deploymentId: deployment.id
      }
    }), deployment.workerId && await ExecuteTasksWaitingForDeployService.enqueue(deployment.workerId, this._prisma), {
      id: deployment.id
    };
  }
};

// app/routes/resources.$projectId.deployments.$deploymentShortCode.rollback.ts
var rollbackSchema = import_zod129.z.object({
  redirectUrl: import_zod129.z.string()
}), ParamSchema3 = import_zod129.z.object({
  projectId: import_zod129.z.string(),
  deploymentShortCode: import_zod129.z.string()
}), action18 = async ({ request, params }) => {
  let userId = await requireUserId(request), { projectId, deploymentShortCode } = ParamSchema3.parse(params);
  console.log("projectId", projectId), console.log("deploymentShortCode", deploymentShortCode);
  let formData = await request.formData(), submission = (0, import_zod128.parse)(formData, { schema: rollbackSchema });
  if (!submission.value)
    return (0, import_node10.json)(submission);
  try {
    let project = await prisma.project.findUnique({
      where: {
        id: projectId,
        organization: {
          members: {
            some: {
              userId
            }
          }
        }
      }
    });
    if (!project)
      return redirectWithErrorMessage(submission.value.redirectUrl, request, "Project not found");
    let deployment = await prisma.workerDeployment.findUnique({
      where: {
        projectId_shortCode: {
          projectId: project.id,
          shortCode: deploymentShortCode
        }
      }
    });
    return deployment ? (await new RollbackDeploymentService().call(deployment), redirectWithSuccessMessage(
      submission.value.redirectUrl,
      request,
      "Rolled back deployment"
    )) : redirectWithErrorMessage(
      submission.value.redirectUrl,
      request,
      "Deployment not found"
    );
  } catch (error) {
    return error instanceof Error ? (logger.error("Failed to roll back deployment", {
      error: {
        name: error.name,
        message: error.message,
        stack: error.stack
      }
    }), submission.error = { runParam: error.message }, (0, import_node10.json)(submission)) : (logger.error("Failed to roll back deployment", { error }), submission.error = { runParam: JSON.stringify(error) }, (0, import_node10.json)(submission));
  }
};

// app/routes/_app.orgs.$organizationId.subscription.v3.free_connect_failed/route.tsx
var route_exports72 = {};
__export(route_exports72, {
  loader: () => loader57
});
var import_zod130 = require("zod");
var ParamsSchema8 = import_zod130.z.object({
  organizationId: import_zod130.z.string()
}), loader57 = async ({ request, params }) => {
  let { organizationId } = ParamsSchema8.parse(params), org = await prisma.organization.findUnique({
    select: {
      slug: !0,
      _count: {
        select: {
          projects: !0
        }
      }
    },
    where: {
      id: organizationId
    }
  });
  if (!org)
    throw new Response(null, { status: 404 });
  let url = new URL(request.url), reason = new URLSearchParams(url.search).get("reason"), errorMessage = reason ? decodeURIComponent(reason) : "Failed to verify your GitHub account";
  return redirectWithErrorMessage(newProjectPath({ slug: org.slug }), request, errorMessage);
};

// app/routes/_app.orgs.$organizationSlug.integrations_.$clientParam._index/route.tsx
var route_exports73 = {};
__export(route_exports73, {
  default: () => Page46,
  loader: () => loader58
});
var import_remix_typedjson55 = require("remix-typedjson");

// app/components/jobs/JobStatusBadge.tsx
var import_jsx_runtime222 = require("react/jsx-runtime");
function JobStatusBadge({
  enabled,
  hasIntegrationsRequiringAction,
  hasRuns,
  badgeSize = "normal"
}) {
  return enabled ? hasIntegrationsRequiringAction ? /* @__PURE__ */ (0, import_jsx_runtime222.jsx)(MissingIntegrationBadge, { badgeSize }) : hasRuns ? /* @__PURE__ */ (0, import_jsx_runtime222.jsx)(ActiveBadge, { active: !0, badgeSize }) : /* @__PURE__ */ (0, import_jsx_runtime222.jsx)(NewBadge, { badgeSize }) : /* @__PURE__ */ (0, import_jsx_runtime222.jsx)(ActiveBadge, { active: !1, badgeSize });
}

// app/components/jobs/JobsTable.tsx
var import_jsx_runtime223 = require("react/jsx-runtime");
function JobsTable({ jobs, noResultsText }) {
  let organization = useOrganization();
  return /* @__PURE__ */ (0, import_jsx_runtime223.jsxs)(Table, { containerClassName: "mb-4", children: [
    /* @__PURE__ */ (0, import_jsx_runtime223.jsx)(TableHeader, { children: /* @__PURE__ */ (0, import_jsx_runtime223.jsxs)(TableRow, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime223.jsx)(TableHeaderCell, { children: "Job" }),
      /* @__PURE__ */ (0, import_jsx_runtime223.jsx)(TableHeaderCell, { children: "ID" }),
      /* @__PURE__ */ (0, import_jsx_runtime223.jsx)(TableHeaderCell, { children: "Integrations" }),
      /* @__PURE__ */ (0, import_jsx_runtime223.jsx)(TableHeaderCell, { children: "Properties" }),
      /* @__PURE__ */ (0, import_jsx_runtime223.jsx)(TableHeaderCell, { children: "Last run" }),
      /* @__PURE__ */ (0, import_jsx_runtime223.jsx)(TableHeaderCell, { children: "Status" }),
      /* @__PURE__ */ (0, import_jsx_runtime223.jsx)(TableHeaderCell, { hiddenLabel: !0, children: "Go to page" })
    ] }) }),
    /* @__PURE__ */ (0, import_jsx_runtime223.jsx)(TableBody, { children: jobs.length > 0 ? jobs.map((job) => {
      let path2 = jobPath(organization, { slug: job.projectSlug }, job);
      return /* @__PURE__ */ (0, import_jsx_runtime223.jsxs)(TableRow, { className: "group", children: [
        /* @__PURE__ */ (0, import_jsx_runtime223.jsx)(TableCell, { to: path2, children: /* @__PURE__ */ (0, import_jsx_runtime223.jsxs)("span", { className: "flex items-center gap-2", children: [
          /* @__PURE__ */ (0, import_jsx_runtime223.jsx)(NamedIcon, { name: job.event.icon, className: "h-8 w-8" }),
          /* @__PURE__ */ (0, import_jsx_runtime223.jsx)(
            LabelValueStack,
            {
              label: job.title,
              value: job.dynamic ? /* @__PURE__ */ (0, import_jsx_runtime223.jsxs)("span", { className: "flex items-center gap-0.5", children: [
                /* @__PURE__ */ (0, import_jsx_runtime223.jsx)(NamedIcon, { name: "dynamic", className: "h-4 w-4" }),
                " ",
                /* @__PURE__ */ (0, import_jsx_runtime223.jsx)("span", { className: "uppercase", children: "Dynamic:" }),
                " ",
                job.event.title
              ] }) : job.event.title,
              variant: "primary"
            }
          )
        ] }) }),
        /* @__PURE__ */ (0, import_jsx_runtime223.jsx)(TableCell, { to: path2, children: /* @__PURE__ */ (0, import_jsx_runtime223.jsx)(LabelValueStack, { label: job.slug, value: `v${job.version}`, variant: "primary" }) }),
        /* @__PURE__ */ (0, import_jsx_runtime223.jsx)(TableCell, { to: path2, children: job.integrations.map((integration) => /* @__PURE__ */ (0, import_jsx_runtime223.jsx)(
          SimpleTooltip,
          {
            button: /* @__PURE__ */ (0, import_jsx_runtime223.jsxs)("div", { className: "relative", children: [
              /* @__PURE__ */ (0, import_jsx_runtime223.jsx)(NamedIcon, { name: integration.icon, className: "h-6 w-6" }),
              integration.setupStatus === "MISSING_FIELDS" && /* @__PURE__ */ (0, import_jsx_runtime223.jsx)(NamedIcon, { name: "error", className: "absolute -left-1 -top-1 h-4 w-4" })
            ] }),
            content: /* @__PURE__ */ (0, import_jsx_runtime223.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime223.jsx)("p", { className: "mb-1 text-rose-400", children: integration.setupStatus === "MISSING_FIELDS" && "This integration requires configuration" }),
              /* @__PURE__ */ (0, import_jsx_runtime223.jsxs)("p", { children: [
                integration.title,
                ": ",
                integration.key
              ] })
            ] })
          },
          integration.key
        )) }),
        /* @__PURE__ */ (0, import_jsx_runtime223.jsx)(TableCell, { to: path2, children: job.properties && /* @__PURE__ */ (0, import_jsx_runtime223.jsx)(
          SimpleTooltip,
          {
            button: /* @__PURE__ */ (0, import_jsx_runtime223.jsx)("div", { className: "flex max-w-[300px] items-start justify-start gap-5 truncate", children: job.properties.map((property, index) => /* @__PURE__ */ (0, import_jsx_runtime223.jsx)(
              LabelValueStack,
              {
                label: property.label,
                value: property.text,
                className: " last:truncate"
              },
              index
            )) }),
            content: /* @__PURE__ */ (0, import_jsx_runtime223.jsx)("div", { className: "flex flex-col gap-2", children: job.properties.map((property, index) => /* @__PURE__ */ (0, import_jsx_runtime223.jsx)(
              LabelValueStack,
              {
                label: property.label,
                value: property.text
              },
              index
            )) })
          }
        ) }),
        /* @__PURE__ */ (0, import_jsx_runtime223.jsx)(TableCell, { to: path2, children: job.lastRun ? /* @__PURE__ */ (0, import_jsx_runtime223.jsx)(
          LabelValueStack,
          {
            label: /* @__PURE__ */ (0, import_jsx_runtime223.jsx)("span", { className: classForJobStatus(job.lastRun.status), children: runStatusTitle(job.lastRun.status) }),
            value: /* @__PURE__ */ (0, import_jsx_runtime223.jsx)("span", { className: classForJobStatus(job.lastRun.status), children: /* @__PURE__ */ (0, import_jsx_runtime223.jsx)(DateTime, { date: job.lastRun.createdAt }) })
          }
        ) : /* @__PURE__ */ (0, import_jsx_runtime223.jsx)(LabelValueStack, { label: "Never run", value: "\u2013" }) }),
        /* @__PURE__ */ (0, import_jsx_runtime223.jsx)(TableCell, { to: path2, children: /* @__PURE__ */ (0, import_jsx_runtime223.jsx)(
          JobStatusBadge,
          {
            enabled: job.status === "ACTIVE",
            hasIntegrationsRequiringAction: job.hasIntegrationsRequiringAction,
            hasRuns: job.lastRun !== void 0
          }
        ) }),
        /* @__PURE__ */ (0, import_jsx_runtime223.jsxs)(TableCellMenu, { isSticky: !0, children: [
          /* @__PURE__ */ (0, import_jsx_runtime223.jsx)(PopoverMenuItem, { to: path2, title: "View Job", icon: "eye" }),
          /* @__PURE__ */ (0, import_jsx_runtime223.jsx)(
            PopoverMenuItem,
            {
              to: jobTestPath(organization, { slug: job.projectSlug }, job),
              title: "Test Job",
              icon: "beaker"
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime223.jsxs)(Dialog, { children: [
            /* @__PURE__ */ (0, import_jsx_runtime223.jsx)(DialogTrigger, { asChild: !0, children: /* @__PURE__ */ (0, import_jsx_runtime223.jsx)(Button, { variant: "small-menu-item", LeadingIcon: "trash-can", className: "text-xs", children: "Delete Job" }) }),
            /* @__PURE__ */ (0, import_jsx_runtime223.jsxs)(DialogContent, { children: [
              /* @__PURE__ */ (0, import_jsx_runtime223.jsx)(DialogHeader, { children: "Delete Job" }),
              /* @__PURE__ */ (0, import_jsx_runtime223.jsx)(DeleteJobDialog, { id: job.id, title: job.title, slug: job.slug })
            ] })
          ] })
        ] })
      ] }, job.id);
    }) : /* @__PURE__ */ (0, import_jsx_runtime223.jsx)(TableBlankRow, { colSpan: 6, children: /* @__PURE__ */ (0, import_jsx_runtime223.jsx)(Paragraph, { variant: "small", className: "flex items-center justify-center", children: noResultsText }) }) })
  ] });
}
function classForJobStatus(status) {
  switch (status) {
    case "FAILURE":
    case "TIMED_OUT":
    case "WAITING_ON_CONNECTIONS":
    case "PENDING":
    case "UNRESOLVED_AUTH":
    case "INVALID_PAYLOAD":
      return "text-rose-500";
    default:
      return "";
  }
}

// app/hooks/useTextFilter.ts
var import_react161 = require("react");
function useTextFilter({ defaultValue = "", items, filter }) {
  let [filterText, setFilterText] = (0, import_react161.useState)(defaultValue), filteredItems = (0, import_react161.useMemo)(() => filterText === "" ? items : items.filter((item) => filter(item, filterText)), [items, filterText]);
  return {
    filterText,
    setFilterText,
    filteredItems
  };
}

// app/hooks/useToggleFilter.ts
var import_react162 = require("react");
function useToggleFilter({ items, filter, defaultValue = !1 }) {
  let [isToggleActive, setToggleActive] = (0, import_react162.useState)(defaultValue), filteredItems = (0, import_react162.useMemo)(() => items.filter((item) => filter(item, isToggleActive)), [items, isToggleActive]);
  return {
    isToggleActive,
    setToggleActive,
    filteredItems
  };
}

// app/hooks/useFilterJobs.ts
function useFilterJobs(jobs, onlyActiveJobs = !1) {
  let toggleFilterRes = useToggleFilter({
    items: jobs,
    filter: (job, onlyActiveJobs2) => !(onlyActiveJobs2 && job.status !== "ACTIVE"),
    defaultValue: onlyActiveJobs
  }), textFilterRes = useTextFilter({
    items: toggleFilterRes.filteredItems,
    filter: (job, text) => !!(job.slug.toLowerCase().includes(text.toLowerCase()) || job.title.toLowerCase().includes(text.toLowerCase()) || job.event.title.toLowerCase().includes(text.toLowerCase()) || job.integrations.some(
      (integration) => integration.title.toLowerCase().includes(text.toLowerCase())
    ) || job.properties && job.properties.some((property) => property.text.toLowerCase().includes(text.toLowerCase())))
  });
  return {
    filteredItems: textFilterRes.filteredItems,
    filterText: textFilterRes.filterText,
    setFilterText: textFilterRes.setFilterText,
    onlyActiveJobs: toggleFilterRes.isToggleActive,
    setOnlyActiveJobs: toggleFilterRes.setToggleActive
  };
}

// app/hooks/useIntegrationClient.tsx
var import_tiny_invariant6 = __toESM(require("tiny-invariant"));
function useOptionalIntegrationClient(matches) {
  return useTypedMatchesData({
    id: "routes/_app.orgs.$organizationSlug.integrations_.$clientParam",
    matches
  })?.client;
}
function useIntegrationClient(matches) {
  let integration = useOptionalIntegrationClient(matches);
  return (0, import_tiny_invariant6.default)(integration, "Integration must be defined"), integration;
}

// app/presenters/JobListPresenter.server.ts
var import_zod131 = require("zod");
var JobListPresenter = class extends BasePresenter {
  async call({
    userId,
    projectSlug,
    organizationSlug,
    integrationSlug
  }) {
    let orgWhere = organizationSlug ? { slug: organizationSlug, members: { some: { userId } } } : { members: { some: { userId } } }, integrationsWhere = integrationSlug ? { some: { integration: { slug: integrationSlug } } } : {}, jobs = await this._replica.job.findMany({
      select: {
        id: !0,
        slug: !0,
        title: !0,
        integrations: {
          select: {
            key: !0,
            integration: {
              select: {
                slug: !0,
                definition: !0,
                setupStatus: !0
              }
            }
          }
        },
        versions: {
          select: {
            version: !0,
            eventSpecification: !0,
            properties: !0,
            status: !0,
            triggerLink: !0,
            triggerHelp: !0,
            environment: {
              select: {
                type: !0
              }
            }
          },
          orderBy: [{ updatedAt: "desc" }],
          take: 1
        },
        dynamicTriggers: {
          select: {
            type: !0
          }
        },
        project: {
          select: {
            slug: !0
          }
        }
      },
      where: {
        internal: !1,
        deletedAt: null,
        organization: orgWhere,
        project: projectSlug ? {
          slug: projectSlug
        } : void 0,
        integrations: integrationsWhere
      },
      orderBy: [{ title: "asc" }]
    }), latestRuns = [];
    return jobs.length > 0 && (latestRuns = await this._replica.$queryRaw`
        SELECT * FROM (
          SELECT 
              "id", 
              "createdAt", 
              "status", 
              "jobId",
              ROW_NUMBER() OVER(PARTITION BY "jobId" ORDER BY "createdAt" DESC) as rn
          FROM 
              ${sqlDatabaseSchema}."JobRun" 
          WHERE 
              "jobId" IN (${src_exports.Prisma.join(jobs.map((j) => j.id))})
      ) t
      WHERE rn = 1;`), jobs.flatMap((job) => {
      let version3 = job.versions.at(0);
      if (!version3)
        return [];
      let eventSpecification = EventSpecificationSchema.parse(version3.eventSpecification), integrations = job.integrations.map((integration) => ({
        key: integration.key,
        title: integration.integration.slug,
        icon: integration.integration.definition.icon ?? integration.integration.definition.id,
        setupStatus: integration.integration.setupStatus
      })), uniqueIntegrations = /* @__PURE__ */ new Map();
      integrations.forEach((i) => {
        uniqueIntegrations.set(i.key, i);
      });
      let properties = [];
      if (eventSpecification.properties && (properties = [...properties, ...eventSpecification.properties]), version3.properties) {
        let versionProperties = import_zod131.z.array(DisplayPropertySchema).parse(version3.properties);
        properties = [...properties, ...versionProperties];
      }
      let latestRun = latestRuns.find((r) => r.jobId === job.id);
      return [
        {
          id: job.id,
          slug: job.slug,
          title: job.title,
          version: version3.version,
          status: version3.status,
          dynamic: job.dynamicTriggers.length > 0,
          event: {
            title: eventSpecification.title,
            icon: eventSpecification.icon,
            source: eventSpecification.source,
            link: projectSlug ? `${projectPath({ slug: organizationSlug }, { slug: projectSlug })}/${version3.triggerLink}` : void 0
          },
          integrations: Array.from(uniqueIntegrations.values()),
          hasIntegrationsRequiringAction: integrations.some(
            (i) => i.setupStatus === "MISSING_FIELDS"
          ),
          environment: version3.environment,
          lastRun: latestRun,
          properties,
          projectSlug: job.project.slug
        }
      ];
    }).filter(Boolean);
  }
};

// app/routes/_app.orgs.$organizationSlug.integrations_.$clientParam._index/route.tsx
var import_jsx_runtime224 = require("react/jsx-runtime"), loader58 = async ({ request, params }) => {
  let userId = await requireUserId(request), { organizationSlug, clientParam: clientParam2 } = IntegrationClientParamSchema.parse(params), jobs = await new JobListPresenter().call({
    userId,
    organizationSlug,
    integrationSlug: clientParam2
  });
  return (0, import_remix_typedjson55.typedjson)({ jobs });
};
function Page46() {
  let { jobs } = (0, import_remix_typedjson55.useTypedLoaderData)(), client3 = useIntegrationClient(), { filterText, setFilterText, filteredItems } = useFilterJobs(jobs);
  return /* @__PURE__ */ (0, import_jsx_runtime224.jsx)(Help, { defaultOpen: jobs.length === 0, children: (open) => /* @__PURE__ */ (0, import_jsx_runtime224.jsxs)("div", { className: cn("grid h-full gap-4", open ? "grid-cols-2" : "grid-cols-1"), children: [
    /* @__PURE__ */ (0, import_jsx_runtime224.jsxs)("div", { className: "grow", children: [
      /* @__PURE__ */ (0, import_jsx_runtime224.jsxs)("div", { className: "mb-2 flex items-center justify-end gap-x-2", children: [
        jobs.length !== 0 && /* @__PURE__ */ (0, import_jsx_runtime224.jsx)(
          Input,
          {
            placeholder: "Search Jobs",
            variant: "tertiary",
            icon: "search",
            fullWidth: !0,
            value: filterText,
            onChange: (e) => setFilterText(e.target.value)
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime224.jsx)(HelpTrigger, { title: "How do I use this integration?" })
      ] }),
      jobs.length === 0 ? /* @__PURE__ */ (0, import_jsx_runtime224.jsx)("div", { className: "mt-8 rounded border border-grid-bright px-2 py-6 text-center", children: /* @__PURE__ */ (0, import_jsx_runtime224.jsx)(Paragraph, { variant: "small", children: "Jobs using this Integration will appear here." }) }) : /* @__PURE__ */ (0, import_jsx_runtime224.jsx)(
        JobsTable,
        {
          jobs: filteredItems,
          noResultsText: jobs.length === 0 ? `No Jobs are currently using "${client3.title}"` : `No Jobs found for "${filterText}"`
        }
      )
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime224.jsxs)(HelpContent, { title: "How to use this Integration", children: [
      /* @__PURE__ */ (0, import_jsx_runtime224.jsx)(
        HowToUseThisIntegration,
        {
          integration: {
            name: client3.integration.name,
            identifier: client3.integrationIdentifier,
            packageName: client3.integration.packageName
          },
          integrationClient: client3,
          help: client3.help
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime224.jsxs)(Callout, { variant: "docs", to: docsIntegrationPath(client3.integration.identifier), children: [
        "View the docs to learn more about using the ",
        client3.integration.name,
        " Integration."
      ] })
    ] })
  ] }) });
}

// app/routes/_app.orgs.$organizationSlug.integrations_.$clientParam.scopes/route.tsx
var route_exports74 = {};
__export(route_exports74, {
  default: () => Page47,
  loader: () => loader59
});
var import_remix_typedjson56 = require("remix-typedjson");

// app/presenters/IntegrationClientScopesPresenter.server.ts
var IntegrationClientScopesPresenter = class {
  #prismaClient;
  constructor(prismaClient = prisma) {
    this.#prismaClient = prismaClient;
  }
  async call({
    userId,
    organizationSlug,
    clientSlug
  }) {
    let integration = await this.#prismaClient.integration.findFirst({
      select: {
        authMethod: !0,
        scopes: !0
      },
      where: {
        organization: {
          slug: organizationSlug,
          members: {
            some: {
              userId
            }
          }
        },
        slug: clientSlug
      }
    });
    if (!integration)
      throw new Error("Client not found");
    let authMethodScopes = integration.authMethod?.scopes ?? [];
    return {
      scopes: integration.scopes.map((s) => {
        let matchingScope = authMethodScopes.find((scope) => scope.name === s);
        return {
          name: s,
          description: matchingScope?.description
        };
      })
    };
  }
};

// app/routes/_app.orgs.$organizationSlug.integrations_.$clientParam.scopes/route.tsx
var import_jsx_runtime225 = require("react/jsx-runtime"), loader59 = async ({ request, params }) => {
  let userId = await requireUserId(request), { organizationSlug, clientParam: clientParam2 } = IntegrationClientParamSchema.parse(params), presenter = new IntegrationClientScopesPresenter(), { scopes } = await presenter.call({
    userId,
    organizationSlug,
    clientSlug: clientParam2
  });
  return (0, import_remix_typedjson56.typedjson)({ scopes });
};
function Page47() {
  let { scopes } = (0, import_remix_typedjson56.useTypedLoaderData)();
  return /* @__PURE__ */ (0, import_jsx_runtime225.jsx)("ul", { className: "flex max-w-md flex-col gap-4 divide-y divide-charcoal-800", children: scopes.map((scope) => /* @__PURE__ */ (0, import_jsx_runtime225.jsxs)("li", { className: "flex flex-col gap-1 pt-4 first:pt-0", children: [
    /* @__PURE__ */ (0, import_jsx_runtime225.jsx)(Paragraph, { className: "font-mono text-text-bright", children: scope.name }),
    /* @__PURE__ */ (0, import_jsx_runtime225.jsx)(Paragraph, { variant: "small", children: scope.description })
  ] }, scope.name)) });
}

// app/routes/_app.orgs.$organizationSlug.projects.$projectParam.setup.nuxt/route.tsx
var route_exports75 = {};
__export(route_exports75, {
  default: () => Page48
});
var import_jsx_runtime226 = require("react/jsx-runtime");
function Page48() {
  return /* @__PURE__ */ (0, import_jsx_runtime226.jsx)(
    FrameworkComingSoon,
    {
      frameworkName: "Nuxt",
      githubIssueUrl: "https://github.com/triggerdotdev/trigger.dev/issues/447",
      githubIssueNumber: 447,
      children: /* @__PURE__ */ (0, import_jsx_runtime226.jsx)(NuxtLogo, { className: "w-56" })
    }
  );
}

// app/routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.apikeys/route.tsx
var route_exports76 = {};
__export(route_exports76, {
  default: () => Page49,
  loader: () => loader60
});
var import_solid90 = require("@heroicons/react/20/solid"), import_remix_typedjson57 = require("remix-typedjson");

// app/presenters/v3/ApiKeysPresenter.server.ts
var ApiKeysPresenter = class {
  #prismaClient;
  constructor(prismaClient = prisma) {
    this.#prismaClient = prismaClient;
  }
  async call({ userId, projectSlug }) {
    let environments2 = await this.#prismaClient.runtimeEnvironment.findMany({
      select: {
        id: !0,
        apiKey: !0,
        pkApiKey: !0,
        type: !0,
        slug: !0,
        updatedAt: !0,
        orgMember: {
          select: {
            userId: !0
          }
        },
        backgroundWorkers: {
          select: {
            version: !0
          },
          take: 1,
          orderBy: {
            version: "desc"
          }
        },
        _count: {
          select: {
            environmentVariableValues: !0
          }
        }
      },
      where: {
        project: {
          slug: projectSlug
        },
        organization: {
          members: {
            some: {
              userId
            }
          }
        }
      }
    }), filtered = environments2.filter((environment) => environment.type === "DEVELOPMENT" ? environment.orgMember?.userId === userId : !0);
    return {
      environments: sortEnvironments(
        filtered.map((environment) => ({
          id: environment.id,
          apiKey: environment.apiKey,
          pkApiKey: environment.pkApiKey,
          type: environment.type,
          slug: environment.slug,
          updatedAt: environment.updatedAt,
          latestVersion: environment.backgroundWorkers.at(0)?.version,
          environmentVariableCount: environment._count.environmentVariableValues
        }))
      ),
      hasStaging: environments2.some((environment) => environment.type === "STAGING")
    };
  }
};

// app/routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.apikeys/route.tsx
var import_jsx_runtime227 = require("react/jsx-runtime"), loader60 = async ({ request, params }) => {
  let userId = await requireUserId(request), { projectParam: projectParam2 } = ProjectParamSchema.parse(params);
  try {
    let presenter = new ApiKeysPresenter(), { environments: environments2, hasStaging } = await presenter.call({
      userId,
      projectSlug: projectParam2
    });
    return (0, import_remix_typedjson57.typedjson)({
      environments: environments2,
      hasStaging
    });
  } catch (error) {
    throw console.error(error), new Response(void 0, {
      status: 400,
      statusText: "Something went wrong, if this problem persists please contact support."
    });
  }
};
function Page49() {
  let { environments: environments2, hasStaging } = (0, import_remix_typedjson57.useTypedLoaderData)(), organization = useOrganization();
  return /* @__PURE__ */ (0, import_jsx_runtime227.jsxs)(PageContainer, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime227.jsxs)(NavBar, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime227.jsx)(PageTitle, { title: "API keys" }),
      /* @__PURE__ */ (0, import_jsx_runtime227.jsxs)(PageAccessories, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime227.jsx)(AdminDebugTooltip, { children: /* @__PURE__ */ (0, import_jsx_runtime227.jsx)(PropertyTable, { children: environments2.map((environment) => /* @__PURE__ */ (0, import_jsx_runtime227.jsx)(Property, { label: environment.slug, children: /* @__PURE__ */ (0, import_jsx_runtime227.jsx)("div", { className: "flex items-center gap-2", children: /* @__PURE__ */ (0, import_jsx_runtime227.jsx)(Paragraph, { variant: "extra-small/bright/mono", children: environment.id }) }) }, environment.id)) }) }),
        /* @__PURE__ */ (0, import_jsx_runtime227.jsx)(
          LinkButton,
          {
            variant: "minimal/small",
            LeadingIcon: import_solid90.BookOpenIcon,
            to: docsPath("/v3/apikeys"),
            children: "API keys docs"
          }
        )
      ] })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime227.jsx)(PageBody, { children: /* @__PURE__ */ (0, import_jsx_runtime227.jsxs)("div", { className: "mt-1 flex flex-col gap-4", children: [
      /* @__PURE__ */ (0, import_jsx_runtime227.jsxs)(Table, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime227.jsx)(TableHeader, { children: /* @__PURE__ */ (0, import_jsx_runtime227.jsxs)(TableRow, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime227.jsx)(TableHeaderCell, { children: "Environment" }),
          /* @__PURE__ */ (0, import_jsx_runtime227.jsx)(TableHeaderCell, { children: "Secret key" }),
          /* @__PURE__ */ (0, import_jsx_runtime227.jsx)(TableHeaderCell, { children: "Key generated" }),
          /* @__PURE__ */ (0, import_jsx_runtime227.jsx)(TableHeaderCell, { children: "Latest version" }),
          /* @__PURE__ */ (0, import_jsx_runtime227.jsx)(TableHeaderCell, { children: "Env vars" }),
          /* @__PURE__ */ (0, import_jsx_runtime227.jsx)(TableHeaderCell, { hiddenLabel: !0, children: "Actions" })
        ] }) }),
        /* @__PURE__ */ (0, import_jsx_runtime227.jsx)(TableBody, { children: environments2.map((environment) => /* @__PURE__ */ (0, import_jsx_runtime227.jsxs)(TableRow, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime227.jsx)(TableCell, { children: /* @__PURE__ */ (0, import_jsx_runtime227.jsx)(EnvironmentLabel, { environment }) }),
          /* @__PURE__ */ (0, import_jsx_runtime227.jsx)(TableCell, { children: /* @__PURE__ */ (0, import_jsx_runtime227.jsx)(
            ClipboardField,
            {
              className: "w-full max-w-none",
              secure: `tr_${environment.apiKey.split("_")[1]}_\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022`,
              value: environment.apiKey,
              variant: "tertiary/small"
            }
          ) }),
          /* @__PURE__ */ (0, import_jsx_runtime227.jsx)(TableCell, { children: /* @__PURE__ */ (0, import_jsx_runtime227.jsx)(DateTime, { date: environment.updatedAt }) }),
          /* @__PURE__ */ (0, import_jsx_runtime227.jsx)(TableCell, { children: environment.latestVersion ?? "\u2013" }),
          /* @__PURE__ */ (0, import_jsx_runtime227.jsx)(TableCell, { children: environment.environmentVariableCount }),
          /* @__PURE__ */ (0, import_jsx_runtime227.jsx)(TableCellMenu, { isSticky: !0, children: /* @__PURE__ */ (0, import_jsx_runtime227.jsx)(
            RegenerateApiKeyModal,
            {
              id: environment.id,
              title: environmentTitle(environment)
            }
          ) })
        ] }, environment.id)) })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime227.jsxs)("div", { className: "flex gap-3", children: [
        /* @__PURE__ */ (0, import_jsx_runtime227.jsx)(InfoPanel, { icon: import_solid90.InformationCircleIcon, panelClassName: "max-w-sm", children: /* @__PURE__ */ (0, import_jsx_runtime227.jsxs)(Paragraph, { variant: "small", children: [
          "Secret keys should be used on your server. They give full API access and allow you to ",
          /* @__PURE__ */ (0, import_jsx_runtime227.jsx)(TextLink, { to: docsPath("v3/triggering"), children: "trigger tasks" }),
          " from your backend."
        ] }) }),
        !hasStaging && /* @__PURE__ */ (0, import_jsx_runtime227.jsx)(
          InfoPanel,
          {
            icon: import_solid90.LockOpenIcon,
            variant: "upgrade",
            title: "Unlock a Staging environment",
            to: v3BillingPath(organization),
            buttonLabel: "Upgrade",
            iconClassName: "text-indigo-500",
            children: "Upgrade your plan to add a Staging environment."
          }
        )
      ] })
    ] }) })
  ] });
}

// app/routes/api.v1.http-endpoints.$httpEndpointId.env.$envType.$shortcode.ts
var api_v1_http_endpoints_httpEndpointId_env_envType_shortcode_exports = {};
__export(api_v1_http_endpoints_httpEndpointId_env_envType_shortcode_exports, {
  action: () => action19,
  loader: () => loader61
});
async function action19({ request, params }) {
  logger.info("Handling httpendpoint (action)", { url: request.url, method: request.method });
  try {
    let parsedParams = HttpEndpointParamsSchema.parse(params), response = await new HandleHttpEndpointService().call(parsedParams, request);
    return logger.info("Handled httpendpoint (action)", {
      url: request.url,
      method: request.method,
      response
    }), response;
  } catch (e) {
    return e instanceof Error ? logger.error("Error handling http endpoint", { error: e.message }) : logger.error("Error handling http endpoint", { error: JSON.stringify(e) }), new Response(void 0, {
      status: 500
    });
  }
}
async function loader61({ request, params }) {
  logger.info("Handling httpendpoint (loader)", { url: request.url, method: request.method });
  try {
    let parsedParams = HttpEndpointParamsSchema.parse(params), response = await new HandleHttpEndpointService().call(parsedParams, request);
    return logger.info("Handled httpendpoint (loader)", {
      url: request.url,
      method: request.method,
      response
    }), response;
  } catch (e) {
    return e instanceof Error ? logger.error("Error handling http endpoint", { error: e.message }) : logger.error("Error handling http endpoint", { error: JSON.stringify(e) }), new Response(void 0, {
      status: 500
    });
  }
}

// app/routes/_app.orgs.$organizationSlug.projects.v3.$projectParam._index/route.tsx
var route_exports77 = {};
__export(route_exports77, {
  default: () => Page50,
  loader: () => loader62
});
var import_solid91 = require("@heroicons/react/20/solid"), import_react165 = require("@remix-run/react");
var import_react166 = require("react"), import_recharts = require("recharts"), import_remix_typedjson58 = require("remix-typedjson");

// app/components/primitives/TooltipPortal.tsx
var import_react164 = require("react"), import_react_dom = require("react-dom"), import_react_popper = require("react-popper"), import_react_use = require("react-use");

// app/hooks/useLazyRef.ts
var import_react163 = require("react"), useLazyRef = (initialValFunc) => {
  let ref = (0, import_react163.useRef)(null);
  return ref.current === null && (ref.current = initialValFunc()), ref;
}, useLazyRef_default = useLazyRef;

// app/components/primitives/TooltipPortal.tsx
var import_jsx_runtime228 = require("react/jsx-runtime");
function TooltipPortal({ active = !0, children }) {
  let [portalElement, setPortalElement] = (0, import_react164.useState)(), [popperElement, setPopperElement] = (0, import_react164.useState)(), virtualElementRef = useLazyRef_default(() => new VirtualElement()), { styles, attributes, update } = (0, import_react_popper.usePopper)(
    virtualElementRef.current,
    popperElement,
    POPPER_OPTIONS
  );
  return (0, import_react164.useEffect)(() => {
    let el = document.createElement("div");
    return document.body.appendChild(el), setPortalElement(el), () => el.remove();
  }, []), (0, import_react_use.useEvent)("mousemove", ({ clientX: x, clientY: y }) => {
    virtualElementRef.current?.update(x, y), active && update?.();
  }), (0, import_react164.useEffect)(() => {
    active && update?.();
  }, [active, update]), portalElement ? (0, import_react_dom.createPortal)(
    /* @__PURE__ */ (0, import_jsx_runtime228.jsx)(
      "div",
      {
        ref: setPopperElement,
        ...attributes.popper,
        style: {
          ...styles.popper,
          zIndex: 1e3,
          display: active ? "block" : "none"
        },
        children
      }
    ),
    portalElement
  ) : null;
}
var VirtualElement = class {
  constructor() {
    this.rect = {
      width: 0,
      height: 0,
      top: 0,
      right: 0,
      bottom: 0,
      left: 0,
      x: 0,
      y: 0,
      toJSON() {
        return this;
      }
    };
  }
  update(x, y) {
    this.rect.y = y, this.rect.top = y, this.rect.bottom = y, this.rect.x = x, this.rect.left = x, this.rect.right = x;
  }
  getBoundingClientRect() {
    return this.rect;
  }
}, POPPER_OPTIONS = {
  placement: "right-start",
  modifiers: [
    {
      name: "offset",
      options: {
        offset: [8, 8]
      }
    }
  ]
};

// app/presenters/v3/TaskListPresenter.server.ts
var TaskListPresenter = class extends BasePresenter {
  async call({
    userId,
    projectSlug,
    organizationSlug
  }) {
    let project = await this._replica.project.findFirstOrThrow({
      select: {
        id: !0,
        environments: {
          select: {
            id: !0,
            type: !0,
            slug: !0,
            orgMember: {
              select: {
                user: {
                  select: {
                    id: !0,
                    name: !0,
                    displayName: !0
                  }
                }
              }
            }
          }
        }
      },
      where: {
        slug: projectSlug,
        organization: {
          slug: organizationSlug
        }
      }
    }), devEnvironments = onlyDevEnvironments(project.environments), nonDevEnvironments = exceptDevEnvironments(project.environments), outputTasks = (await this._replica.$queryRaw`
    WITH non_dev_workers AS (
      SELECT wd."workerId" AS id
      FROM ${sqlDatabaseSchema}."WorkerDeploymentPromotion" wdp
      INNER JOIN ${sqlDatabaseSchema}."WorkerDeployment" wd
        ON wd.id = wdp."deploymentId"
      WHERE wdp."environmentId" IN (${src_exports.Prisma.join(nonDevEnvironments.map((e) => e.id))})
        AND wdp."label" = ${CURRENT_DEPLOYMENT_LABEL}
    ),
    workers AS (      
      SELECT DISTINCT ON ("runtimeEnvironmentId") id, "runtimeEnvironmentId", version
      FROM ${sqlDatabaseSchema}."BackgroundWorker"
      WHERE "runtimeEnvironmentId" IN (${src_exports.Prisma.join(
      filterOrphanedEnvironments(devEnvironments).map((e) => e.id)
    )})
        OR id IN (SELECT id FROM non_dev_workers)
      ORDER BY "runtimeEnvironmentId", "createdAt" DESC
    )
    SELECT tasks.id, slug, "filePath", "exportName", "triggerSource", tasks."runtimeEnvironmentId", tasks."createdAt"
    FROM workers
    JOIN ${sqlDatabaseSchema}."BackgroundWorkerTask" tasks ON tasks."workerId" = workers.id
    ORDER BY slug ASC;`).reduce((acc, task) => {
      let environment = project.environments.find((env6) => env6.id === task.runtimeEnvironmentId);
      if (!environment)
        throw new Error(`Environment not found for TaskRun ${task.id}`);
      let existingTask = acc.find((t) => t.slug === task.slug);
      return existingTask || (existingTask = {
        ...task,
        environments: []
      }, acc.push(existingTask)), task.createdAt > existingTask.createdAt && (existingTask.createdAt = task.createdAt, existingTask.exportName = task.exportName, existingTask.filePath = task.filePath, existingTask.triggerSource = task.triggerSource), existingTask.environments.push(displayableEnvironment(environment, userId)), existingTask.environments = sortEnvironments(existingTask.environments), acc;
    }, []), activity = this.#getActivity(
      outputTasks.map((t) => t.slug),
      project.id
    ), runningStats = this.#getRunningStats(
      outputTasks.map((t) => t.slug),
      project.id
    ), durations = this.#getAverageDurations(
      outputTasks.map((t) => t.slug),
      project.id
    ), userEnvironment = project.environments.find((e) => e.orgMember?.user.id === userId), userHasTasks = userEnvironment ? outputTasks.some((t) => t.environments.some((e) => e.id === userEnvironment.id)) : !1;
    return { tasks: outputTasks, userHasTasks, activity, runningStats, durations };
  }
  async #getActivity(tasks, projectId) {
    if (tasks.length === 0)
      return {};
    let activity = await this._replica.$queryRaw`
    SELECT 
    tr."taskIdentifier", 
    tr."status",
    DATE(tr."createdAt") as day, 
    COUNT(*) 
  FROM 
    ${sqlDatabaseSchema}."TaskRun" as tr
  WHERE 
    tr."taskIdentifier" IN (${src_exports.Prisma.join(tasks)})
    AND tr."projectId" = ${projectId}
    AND tr."createdAt" >= (current_date - interval '6 days')
  GROUP BY 
    tr."taskIdentifier", 
    tr."status", 
    day
  ORDER BY 
    tr."taskIdentifier" ASC,
    day ASC,
    tr."status" ASC;`, today = /* @__PURE__ */ new Date();
    return today.setUTCHours(0, 0, 0, 0), activity.reduce((acc, a) => {
      let existingTask = acc[a.taskIdentifier];
      if (!existingTask) {
        existingTask = [];
        for (let i = 6; i >= 0; i--) {
          let day2 = new Date(today);
          day2.setUTCDate(today.getDate() - i), day2.setUTCHours(0, 0, 0, 0), existingTask.push({
            day: day2.toISOString(),
            [TaskRunStatus.COMPLETED_SUCCESSFULLY]: 0
          });
        }
        acc[a.taskIdentifier] = existingTask;
      }
      let dayString = a.day.toISOString(), day = existingTask.find((d) => d.day === dayString);
      return day ? (day[a.status] = Number(a.count), acc) : (logger.warn("Day not found for TaskRun", {
        day: dayString,
        taskIdentifier: a.taskIdentifier,
        existingTask
      }), acc);
    }, {});
  }
  async #getRunningStats(tasks, projectId) {
    return tasks.length === 0 ? {} : (await this._replica.$queryRaw`
    SELECT 
    tr."taskIdentifier", 
    tr."status",
    COUNT(*) 
  FROM 
    ${sqlDatabaseSchema}."TaskRun" as tr
  WHERE 
    tr."taskIdentifier" IN (${src_exports.Prisma.join(tasks)})
    AND tr."projectId" = ${projectId}
    AND tr."status" IN ('PENDING', 'WAITING_FOR_DEPLOY', 'EXECUTING', 'RETRYING_AFTER_FAILURE', 'WAITING_TO_RESUME')
  GROUP BY 
    tr."taskIdentifier", 
    tr."status"
  ORDER BY 
    tr."taskIdentifier" ASC,
    tr."status" ASC;`).reduce((acc, a) => {
      let existingTask = acc[a.taskIdentifier];
      return existingTask || (existingTask = {
        queued: 0,
        running: 0
      }, acc[a.taskIdentifier] = existingTask), QUEUED_STATUSES.includes(a.status) && (existingTask.queued += Number(a.count)), RUNNING_STATUSES.includes(a.status) && (existingTask.running += Number(a.count)), acc;
    }, {});
  }
  async #getAverageDurations(tasks, projectId) {
    if (tasks.length === 0)
      return {};
    let durations = await this._replica.$queryRaw`    
    SELECT 
      tr."taskIdentifier", 
      AVG(EXTRACT(EPOCH FROM (tr."updatedAt" - COALESCE(tr."startedAt", tr."lockedAt")))) as duration
      FROM 
      ${sqlDatabaseSchema}."TaskRun" as tr
    WHERE 
      tr."taskIdentifier" IN (${src_exports.Prisma.join(tasks)})
      AND tr."projectId" = ${projectId}
      AND tr."createdAt" >= (current_date - interval '6 days')
      AND tr."status" IN ('COMPLETED_SUCCESSFULLY', 'COMPLETED_WITH_ERRORS')
    GROUP BY 
      tr."taskIdentifier";`;
    return Object.fromEntries(durations.map((s) => [s.taskIdentifier, Number(s.duration)]));
  }
};

// app/routes/_app.orgs.$organizationSlug.projects.v3.$projectParam._index/route.tsx
var import_jsx_runtime229 = require("react/jsx-runtime"), loader62 = async ({ request, params }) => {
  let userId = await requireUserId(request), { organizationSlug, projectParam: projectParam2 } = ProjectParamSchema.parse(params);
  try {
    let presenter = new TaskListPresenter(), { tasks, userHasTasks, activity, runningStats, durations } = await presenter.call({
      userId,
      organizationSlug,
      projectSlug: projectParam2
    });
    return (0, import_remix_typedjson58.typeddefer)({
      tasks,
      userHasTasks,
      activity,
      runningStats,
      durations
    });
  } catch (error) {
    throw console.error(error), new Response(void 0, {
      status: 400,
      statusText: "Something went wrong, if this problem persists please contact support."
    });
  }
};
function Page50() {
  let organization = useOrganization(), project = useProject(), { tasks, userHasTasks, activity, runningStats, durations } = (0, import_remix_typedjson58.useTypedLoaderData)(), { filterText, setFilterText, filteredItems } = useTextFilter({
    items: tasks,
    filter: (task, text) => !!(task.slug.toLowerCase().includes(text.toLowerCase()) || task.exportName.toLowerCase().includes(text.toLowerCase().replace("(", "").replace(")", "")) || task.filePath.toLowerCase().includes(text.toLowerCase()) || task.triggerSource === "SCHEDULED" && "scheduled".includes(text.toLowerCase()))
  }), hasTasks = tasks.length > 0, revalidator = (0, import_react165.useRevalidator)(), streamedEvents = useEventSource2(v3TasksStreamingPath(organization, project), {
    event: "message"
  });
  return (0, import_react166.useEffect)(() => {
    streamedEvents !== null && revalidator.revalidate();
  }, [streamedEvents]), /* @__PURE__ */ (0, import_jsx_runtime229.jsxs)(PageContainer, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime229.jsxs)(NavBar, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime229.jsx)(PageTitle, { title: "Tasks" }),
      /* @__PURE__ */ (0, import_jsx_runtime229.jsx)(PageAccessories, { children: /* @__PURE__ */ (0, import_jsx_runtime229.jsx)(AdminDebugTooltip, { children: /* @__PURE__ */ (0, import_jsx_runtime229.jsx)(PropertyTable, { children: tasks.map((task) => /* @__PURE__ */ (0, import_jsx_runtime229.jsx)(Property, { label: task.exportName, children: /* @__PURE__ */ (0, import_jsx_runtime229.jsx)("div", { className: "flex items-center gap-2", children: /* @__PURE__ */ (0, import_jsx_runtime229.jsx)(Paragraph, { variant: "extra-small/bright/mono", children: task.environments.map(
        (e) => e.userName ? `${e.userName}/${e.id}` : `${e.type.slice(0, 3)}/${e.id}`
      ).join(", ") }) }) }, task.slug)) }) }) })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime229.jsx)(PageBody, { children: /* @__PURE__ */ (0, import_jsx_runtime229.jsx)("div", { className: cn("grid h-full grid-rows-1"), children: hasTasks ? /* @__PURE__ */ (0, import_jsx_runtime229.jsxs)("div", { className: "flex flex-col gap-4 pb-4", children: [
      !userHasTasks && /* @__PURE__ */ (0, import_jsx_runtime229.jsx)(UserHasNoTasks, {}),
      /* @__PURE__ */ (0, import_jsx_runtime229.jsxs)("div", { className: "pb-4", children: [
        /* @__PURE__ */ (0, import_jsx_runtime229.jsx)("div", { className: "h-8", children: /* @__PURE__ */ (0, import_jsx_runtime229.jsx)(
          Input,
          {
            placeholder: "Search tasks",
            variant: "tertiary",
            icon: "search",
            fullWidth: !0,
            value: filterText,
            onChange: (e) => setFilterText(e.target.value),
            autoFocus: !0
          }
        ) }),
        /* @__PURE__ */ (0, import_jsx_runtime229.jsxs)(Table, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime229.jsx)(TableHeader, { children: /* @__PURE__ */ (0, import_jsx_runtime229.jsxs)(TableRow, { children: [
            /* @__PURE__ */ (0, import_jsx_runtime229.jsx)(TableHeaderCell, { children: "Task ID" }),
            /* @__PURE__ */ (0, import_jsx_runtime229.jsx)(TableHeaderCell, { children: "Task" }),
            /* @__PURE__ */ (0, import_jsx_runtime229.jsx)(TableHeaderCell, { children: "Running" }),
            /* @__PURE__ */ (0, import_jsx_runtime229.jsx)(TableHeaderCell, { children: "Queued" }),
            /* @__PURE__ */ (0, import_jsx_runtime229.jsx)(TableHeaderCell, { children: "Activity (7d)" }),
            /* @__PURE__ */ (0, import_jsx_runtime229.jsx)(TableHeaderCell, { children: "Avg. duration" }),
            /* @__PURE__ */ (0, import_jsx_runtime229.jsx)(TableHeaderCell, { children: "Environments" }),
            /* @__PURE__ */ (0, import_jsx_runtime229.jsx)(TableHeaderCell, { hiddenLabel: !0, children: "Go to page" })
          ] }) }),
          /* @__PURE__ */ (0, import_jsx_runtime229.jsx)(TableBody, { children: filteredItems.length > 0 ? filteredItems.map((task) => {
            let path2 = v3RunsPath(organization, project, {
              tasks: [task.slug]
            });
            return /* @__PURE__ */ (0, import_jsx_runtime229.jsxs)(TableRow, { className: "group", children: [
              /* @__PURE__ */ (0, import_jsx_runtime229.jsx)(TableCell, { to: path2, children: /* @__PURE__ */ (0, import_jsx_runtime229.jsxs)("div", { className: "flex items-center gap-2", children: [
                /* @__PURE__ */ (0, import_jsx_runtime229.jsx)(
                  SimpleTooltip,
                  {
                    button: /* @__PURE__ */ (0, import_jsx_runtime229.jsx)(TaskTriggerSourceIcon, { source: task.triggerSource }),
                    content: taskTriggerSourceDescription(task.triggerSource)
                  }
                ),
                /* @__PURE__ */ (0, import_jsx_runtime229.jsx)("span", { children: task.slug })
              ] }) }),
              /* @__PURE__ */ (0, import_jsx_runtime229.jsx)(TableCell, { to: path2, className: "py-0", actionClassName: "py-0", children: /* @__PURE__ */ (0, import_jsx_runtime229.jsx)(
                TaskFunctionName,
                {
                  functionName: task.exportName,
                  variant: "extra-extra-small"
                }
              ) }),
              /* @__PURE__ */ (0, import_jsx_runtime229.jsx)(TableCell, { to: path2, className: "p-0", children: /* @__PURE__ */ (0, import_jsx_runtime229.jsx)(
                import_react166.Suspense,
                {
                  fallback: /* @__PURE__ */ (0, import_jsx_runtime229.jsx)(import_jsx_runtime229.Fragment, { children: /* @__PURE__ */ (0, import_jsx_runtime229.jsx)(Spinner, { color: "muted" }) }),
                  children: /* @__PURE__ */ (0, import_jsx_runtime229.jsx)(import_remix_typedjson58.TypedAwait, { resolve: runningStats, children: (data2) => data2[task.slug]?.running ?? "0" })
                }
              ) }),
              /* @__PURE__ */ (0, import_jsx_runtime229.jsx)(TableCell, { to: path2, className: "p-0", children: /* @__PURE__ */ (0, import_jsx_runtime229.jsx)(import_react166.Suspense, { fallback: /* @__PURE__ */ (0, import_jsx_runtime229.jsx)(import_jsx_runtime229.Fragment, {}), children: /* @__PURE__ */ (0, import_jsx_runtime229.jsx)(import_remix_typedjson58.TypedAwait, { resolve: runningStats, children: (data2) => data2[task.slug]?.queued ?? "0" }) }) }),
              /* @__PURE__ */ (0, import_jsx_runtime229.jsx)(TableCell, { to: path2, className: "p-0", actionClassName: "py-0", children: /* @__PURE__ */ (0, import_jsx_runtime229.jsx)(import_react166.Suspense, { fallback: /* @__PURE__ */ (0, import_jsx_runtime229.jsx)(TaskActivityBlankState, {}), children: /* @__PURE__ */ (0, import_jsx_runtime229.jsx)(import_remix_typedjson58.TypedAwait, { resolve: activity, children: (data2) => {
                let taskData = data2[task.slug];
                return /* @__PURE__ */ (0, import_jsx_runtime229.jsx)(import_jsx_runtime229.Fragment, { children: taskData !== void 0 ? /* @__PURE__ */ (0, import_jsx_runtime229.jsx)("div", { className: "h-6 w-[5.125rem] rounded-sm", children: /* @__PURE__ */ (0, import_jsx_runtime229.jsx)(TaskActivityGraph, { activity: taskData }) }) : /* @__PURE__ */ (0, import_jsx_runtime229.jsx)(TaskActivityBlankState, {}) });
              } }) }) }),
              /* @__PURE__ */ (0, import_jsx_runtime229.jsx)(TableCell, { to: path2, className: "p-0", children: /* @__PURE__ */ (0, import_jsx_runtime229.jsx)(import_react166.Suspense, { fallback: /* @__PURE__ */ (0, import_jsx_runtime229.jsx)(import_jsx_runtime229.Fragment, {}), children: /* @__PURE__ */ (0, import_jsx_runtime229.jsx)(import_remix_typedjson58.TypedAwait, { resolve: durations, children: (data2) => {
                let taskData = data2[task.slug];
                return taskData ? formatDurationMilliseconds(taskData * 1e3, {
                  style: "short"
                }) : "\u2013";
              } }) }) }),
              /* @__PURE__ */ (0, import_jsx_runtime229.jsx)(TableCell, { to: path2, children: /* @__PURE__ */ (0, import_jsx_runtime229.jsx)(EnvironmentLabels, { environments: task.environments }) }),
              /* @__PURE__ */ (0, import_jsx_runtime229.jsx)(TableCellChevron, { to: path2 })
            ] }, task.slug);
          }) : /* @__PURE__ */ (0, import_jsx_runtime229.jsx)(TableBlankRow, { colSpan: 8, children: /* @__PURE__ */ (0, import_jsx_runtime229.jsx)(Paragraph, { variant: "small", className: "flex items-center justify-center", children: "No tasks match your filters" }) }) })
        ] })
      ] })
    ] }) : /* @__PURE__ */ (0, import_jsx_runtime229.jsx)(MainCenteredContainer, { className: "max-w-prose", children: /* @__PURE__ */ (0, import_jsx_runtime229.jsx)(CreateTaskInstructions, {}) }) }) })
  ] });
}
function CreateTaskInstructions() {
  return /* @__PURE__ */ (0, import_jsx_runtime229.jsxs)("div", { children: [
    /* @__PURE__ */ (0, import_jsx_runtime229.jsxs)("div", { className: "mb-6 flex items-center justify-between border-b", children: [
      /* @__PURE__ */ (0, import_jsx_runtime229.jsx)(Header1, { spacing: !0, children: "Get setup in 3 minutes" }),
      /* @__PURE__ */ (0, import_jsx_runtime229.jsx)("div", { className: "flex items-center gap-2", children: /* @__PURE__ */ (0, import_jsx_runtime229.jsx)(
        Feedback,
        {
          button: /* @__PURE__ */ (0, import_jsx_runtime229.jsx)(Button, { variant: "minimal/small", LeadingIcon: import_solid91.ChatBubbleLeftRightIcon, children: "I'm stuck!" }),
          defaultValue: "help"
        }
      ) })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime229.jsx)(StepNumber, { stepNumber: "1", title: "Run the CLI 'init' command in your project" }),
    /* @__PURE__ */ (0, import_jsx_runtime229.jsxs)(StepContentContainer, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime229.jsx)(InitCommandV3, {}),
      /* @__PURE__ */ (0, import_jsx_runtime229.jsxs)(Paragraph, { spacing: !0, children: [
        "You\u2019ll notice a new folder in your project called",
        " ",
        /* @__PURE__ */ (0, import_jsx_runtime229.jsx)(InlineCode, { variant: "small", children: "trigger" }),
        ". We\u2019ve added a very simple example task in here to help you get started."
      ] })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime229.jsx)(StepNumber, { stepNumber: "2", title: "Run the CLI 'dev' command" }),
    /* @__PURE__ */ (0, import_jsx_runtime229.jsx)(StepContentContainer, { children: /* @__PURE__ */ (0, import_jsx_runtime229.jsx)(TriggerDevStepV3, {}) }),
    /* @__PURE__ */ (0, import_jsx_runtime229.jsx)(StepNumber, { stepNumber: "3", title: "Waiting for tasks", displaySpinner: !0 }),
    /* @__PURE__ */ (0, import_jsx_runtime229.jsx)(StepContentContainer, { children: /* @__PURE__ */ (0, import_jsx_runtime229.jsx)(Paragraph, { children: "This page will automatically refresh." }) })
  ] });
}
function UserHasNoTasks() {
  let [open, setOpen] = (0, import_react166.useState)(!1);
  return /* @__PURE__ */ (0, import_jsx_runtime229.jsx)(
    Callout,
    {
      variant: "info",
      cta: /* @__PURE__ */ (0, import_jsx_runtime229.jsx)(
        Button,
        {
          variant: "tertiary/small",
          TrailingIcon: open ? import_solid91.ChevronUpIcon : import_solid91.ChevronDownIcon,
          onClick: () => setOpen((o) => !o),
          children: open ? "Close" : "Setup your dev environment"
        }
      ),
      children: open ? /* @__PURE__ */ (0, import_jsx_runtime229.jsxs)("div", { children: [
        /* @__PURE__ */ (0, import_jsx_runtime229.jsx)(Header2, { spacing: !0, children: "Get setup in 3 minutes" }),
        /* @__PURE__ */ (0, import_jsx_runtime229.jsx)(StepNumber, { stepNumber: "1", title: "Open up your project", className: "mt-6" }),
        /* @__PURE__ */ (0, import_jsx_runtime229.jsx)(StepContentContainer, { children: /* @__PURE__ */ (0, import_jsx_runtime229.jsx)(Paragraph, { children: "You'll need to open a terminal at the root of your project." }) }),
        /* @__PURE__ */ (0, import_jsx_runtime229.jsx)(StepNumber, { stepNumber: "2", title: "Run the CLI 'login' command" }),
        /* @__PURE__ */ (0, import_jsx_runtime229.jsx)(StepContentContainer, { children: /* @__PURE__ */ (0, import_jsx_runtime229.jsx)(TriggerLoginStepV3, {}) }),
        /* @__PURE__ */ (0, import_jsx_runtime229.jsx)(StepNumber, { stepNumber: "3", title: "Run the CLI 'dev' command" }),
        /* @__PURE__ */ (0, import_jsx_runtime229.jsx)(StepContentContainer, { children: /* @__PURE__ */ (0, import_jsx_runtime229.jsx)(TriggerDevStepV3, {}) }),
        /* @__PURE__ */ (0, import_jsx_runtime229.jsx)(StepNumber, { stepNumber: "4", title: "Waiting for tasks", displaySpinner: !0 }),
        /* @__PURE__ */ (0, import_jsx_runtime229.jsx)(StepContentContainer, { children: /* @__PURE__ */ (0, import_jsx_runtime229.jsx)(Paragraph, { children: "This page will automatically refresh." }) })
      ] }) : "Your DEV environment isn't setup yet."
    }
  );
}
function TaskActivityGraph({ activity }) {
  return /* @__PURE__ */ (0, import_jsx_runtime229.jsx)(import_recharts.ResponsiveContainer, { width: "100%", height: "100%", children: /* @__PURE__ */ (0, import_jsx_runtime229.jsxs)(
    import_recharts.BarChart,
    {
      data: activity,
      margin: {
        top: 0,
        right: 0,
        left: 0,
        bottom: 0
      },
      width: 82,
      height: 24,
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime229.jsx)(
          import_recharts.Tooltip,
          {
            cursor: { fill: "transparent" },
            content: /* @__PURE__ */ (0, import_jsx_runtime229.jsx)(CustomTooltip, {}),
            allowEscapeViewBox: { x: !0, y: !0 },
            wrapperStyle: { zIndex: 1e3 },
            animationDuration: 0
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime229.jsx)(
          import_recharts.Bar,
          {
            dataKey: "bg",
            background: { fill: "#212327" },
            strokeWidth: 0,
            stackId: "a",
            barSize: 10,
            isAnimationActive: !1
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime229.jsx)(import_recharts.Bar, { dataKey: "PENDING", fill: "#5F6570", stackId: "a", strokeWidth: 0, barSize: 10 }),
        /* @__PURE__ */ (0, import_jsx_runtime229.jsx)(import_recharts.Bar, { dataKey: "WAITING_FOR_DEPLOY", fill: "#F59E0B", stackId: "a", strokeWidth: 0, barSize: 10 }),
        /* @__PURE__ */ (0, import_jsx_runtime229.jsx)(import_recharts.Bar, { dataKey: "EXECUTING", fill: "#3B82F6", stackId: "a", strokeWidth: 0, barSize: 10 }),
        /* @__PURE__ */ (0, import_jsx_runtime229.jsx)(
          import_recharts.Bar,
          {
            dataKey: "RETRYING_AFTER_FAILURE",
            fill: "#3B82F6",
            stackId: "a",
            strokeWidth: 0,
            barSize: 10
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime229.jsx)(import_recharts.Bar, { dataKey: "WAITING_TO_RESUME", fill: "#3B82F6", stackId: "a", strokeWidth: 0, barSize: 10 }),
        /* @__PURE__ */ (0, import_jsx_runtime229.jsx)(
          import_recharts.Bar,
          {
            dataKey: "COMPLETED_SUCCESSFULLY",
            fill: "#28BF5C",
            stackId: "a",
            strokeWidth: 0,
            barSize: 10
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime229.jsx)(import_recharts.Bar, { dataKey: "CANCELED", fill: "#5F6570", stackId: "a", strokeWidth: 0, barSize: 10 }),
        /* @__PURE__ */ (0, import_jsx_runtime229.jsx)(
          import_recharts.Bar,
          {
            dataKey: "COMPLETED_WITH_ERRORS",
            fill: "#F43F5E",
            stackId: "a",
            strokeWidth: 0,
            barSize: 10
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime229.jsx)(import_recharts.Bar, { dataKey: "INTERRUPTED", fill: "#F43F5E", stackId: "a", strokeWidth: 0, barSize: 10 }),
        /* @__PURE__ */ (0, import_jsx_runtime229.jsx)(import_recharts.Bar, { dataKey: "SYSTEM_FAILURE", fill: "#F43F5E", stackId: "a", strokeWidth: 0, barSize: 10 }),
        /* @__PURE__ */ (0, import_jsx_runtime229.jsx)(import_recharts.Bar, { dataKey: "PAUSED", fill: "#FCD34D", stackId: "a", strokeWidth: 0, barSize: 10 }),
        /* @__PURE__ */ (0, import_jsx_runtime229.jsx)(import_recharts.Bar, { dataKey: "CRASHED", fill: "#F43F5E", stackId: "a", strokeWidth: 0, barSize: 10 })
      ]
    }
  ) });
}
function TaskActivityBlankState() {
  return /* @__PURE__ */ (0, import_jsx_runtime229.jsx)("div", { className: "flex h-6 w-[5.125rem] items-center gap-0.5 rounded-sm", children: [...Array(7)].map((_, i) => /* @__PURE__ */ (0, import_jsx_runtime229.jsx)("div", { className: "h-full w-2.5 bg-[#212327]" }, i)) });
}
var CustomTooltip = ({ active, payload, label }) => {
  if (active && payload) {
    let items = payload.map((p) => ({
      status: p.dataKey,
      value: p.value
    })), title2 = payload[0].payload.day, formattedDate = formatDateTime(new Date(title2), "UTC", [], !1, !1);
    return /* @__PURE__ */ (0, import_jsx_runtime229.jsx)(TooltipPortal, { active, children: /* @__PURE__ */ (0, import_jsx_runtime229.jsxs)("div", { className: "rounded-sm border border-grid-bright bg-background-dimmed px-3 py-2", children: [
      /* @__PURE__ */ (0, import_jsx_runtime229.jsx)(Header3, { className: "border-b-charcoal-650 border-b pb-2", children: formattedDate }),
      /* @__PURE__ */ (0, import_jsx_runtime229.jsx)("div", { className: "mt-2 grid grid-cols-[1fr_auto] gap-2 text-xs text-text-bright", children: items.map((item) => /* @__PURE__ */ (0, import_jsx_runtime229.jsxs)(import_react166.Fragment, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime229.jsx)(TaskRunStatusCombo, { status: item.status }),
        /* @__PURE__ */ (0, import_jsx_runtime229.jsx)("p", { children: item.value })
      ] }, item.status)) })
    ] }) });
  }
  return null;
};

// app/routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.alerts/route.tsx
var route_exports78 = {};
__export(route_exports78, {
  AlertChannelTypeIcon: () => AlertChannelTypeIcon,
  action: () => action20,
  alertTypeTitle: () => alertTypeTitle,
  default: () => Page51,
  loader: () => loader63
});
var import_react167 = require("@conform-to/react"), import_zod132 = require("@conform-to/zod"), import_solid92 = require("@heroicons/react/20/solid"), import_react168 = require("@remix-run/react"), import_server_runtime21 = require("@remix-run/server-runtime"), import_companyicons7 = require("@trigger.dev/companyicons"), import_assert_never12 = __toESM(require("assert-never")), import_remix_typedjson59 = require("remix-typedjson"), import_zod133 = require("zod");

// app/presenters/v3/AlertChannelListPresenter.server.ts
var AlertChannelListPresenter = class extends BasePresenter {
  async call(projectId) {
    logger.debug("AlertChannelListPresenter", { projectId });
    let alertChannels = await this._prisma.projectAlertChannel.findMany({
      where: {
        projectId
      },
      orderBy: {
        createdAt: "desc"
      }
    }), organization = await this._replica.project.findFirst({
      where: {
        id: projectId
      },
      select: {
        organizationId: !0
      }
    });
    if (!organization)
      throw new Error(`Project not found: ${projectId}`);
    let limit = await getLimit(organization.organizationId, "alerts", 25);
    return {
      alertChannels: await Promise.all(
        alertChannels.map(async (alertChannel) => ({
          ...alertChannel,
          properties: await this.#presentProperties(alertChannel)
        }))
      ),
      limits: {
        used: alertChannels.length,
        limit
      }
    };
  }
  async #presentProperties(alertChannel) {
    if (alertChannel.properties)
      switch (alertChannel.type) {
        case "WEBHOOK":
          let parsedProperties = ProjectAlertWebhookProperties.parse(alertChannel.properties), secret2 = await decryptSecret(env2.ENCRYPTION_KEY, parsedProperties.secret);
          return {
            type: "WEBHOOK",
            url: parsedProperties.url,
            secret: secret2
          };
        case "EMAIL":
          return {
            type: "EMAIL",
            ...ProjectAlertEmailProperties.parse(alertChannel.properties)
          };
        case "SLACK":
          return {
            type: "SLACK",
            ...ProjectAlertSlackProperties.parse(alertChannel.properties)
          };
        default:
          throw new Error(`Unsupported alert channel type: ${alertChannel.type}`);
      }
  }
};

// app/routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.alerts/route.tsx
var import_jsx_runtime230 = require("react/jsx-runtime"), loader63 = async ({ request, params }) => {
  let userId = await requireUserId(request), { projectParam: projectParam2, organizationSlug } = ProjectParamSchema.parse(params), project = await findProjectBySlug(organizationSlug, projectParam2, userId);
  if (!project)
    throw new Response(void 0, {
      status: 404,
      statusText: "Project not found"
    });
  let data2 = await new AlertChannelListPresenter().call(project.id);
  return (0, import_remix_typedjson59.typedjson)(data2);
}, schema10 = import_zod133.z.discriminatedUnion("action", [
  import_zod133.z.object({ action: import_zod133.z.literal("delete"), id: import_zod133.z.string() }),
  import_zod133.z.object({ action: import_zod133.z.literal("disable"), id: import_zod133.z.string() }),
  import_zod133.z.object({ action: import_zod133.z.literal("enable"), id: import_zod133.z.string() })
]), action20 = async ({ request, params }) => {
  let userId = await requireUserId(request), { organizationSlug, projectParam: projectParam2 } = ProjectParamSchema.parse(params);
  if (request.method.toUpperCase() !== "POST")
    return { status: 405, body: "Method Not Allowed" };
  let formData = await request.formData(), submission = (0, import_zod132.parse)(formData, { schema: schema10 });
  if (!submission.value)
    return (0, import_server_runtime21.json)(submission);
  let project = await findProjectBySlug(organizationSlug, projectParam2, userId);
  if (!project)
    return submission.error.key = "Project not found", (0, import_server_runtime21.json)(submission);
  switch (submission.value.action) {
    case "delete": {
      let alertChannel = await prisma.projectAlertChannel.delete({
        where: { id: submission.value.id, projectId: project.id }
      });
      return redirectWithSuccessMessage(
        v3ProjectAlertsPath({ slug: organizationSlug }, { slug: projectParam2 }),
        request,
        `Deleted ${alertChannel.name} alert`
      );
    }
    case "disable": {
      let alertChannel = await prisma.projectAlertChannel.update({
        where: { id: submission.value.id, projectId: project.id },
        data: { enabled: !1 }
      });
      return redirectWithSuccessMessage(
        v3ProjectAlertsPath({ slug: organizationSlug }, { slug: projectParam2 }),
        request,
        `Disabled ${alertChannel.name} alert`
      );
    }
    case "enable": {
      let alertChannel = await prisma.projectAlertChannel.update({
        where: { id: submission.value.id, projectId: project.id },
        data: { enabled: !0 }
      });
      return redirectWithSuccessMessage(
        v3ProjectAlertsPath({ slug: organizationSlug }, { slug: projectParam2 }),
        request,
        `Enabled ${alertChannel.name} alert`
      );
    }
  }
};
function Page51() {
  let { alertChannels, limits } = (0, import_remix_typedjson59.useTypedLoaderData)(), project = useProject(), organization = useOrganization(), requiresUpgrade = limits.used >= limits.limit;
  return /* @__PURE__ */ (0, import_jsx_runtime230.jsxs)(PageContainer, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime230.jsxs)(NavBar, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime230.jsx)(PageTitle, { title: "Alerts" }),
      /* @__PURE__ */ (0, import_jsx_runtime230.jsx)(PageAccessories, { children: /* @__PURE__ */ (0, import_jsx_runtime230.jsx)(
        LinkButton,
        {
          LeadingIcon: import_solid92.BookOpenIcon,
          to: docsPath("v3/troubleshooting-alerts"),
          variant: "minimal/small",
          children: "Alerts docs"
        }
      ) })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime230.jsxs)(PageBody, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime230.jsxs)("div", { className: cn("flex h-full flex-col gap-3"), children: [
        alertChannels.length > 0 && !requiresUpgrade && /* @__PURE__ */ (0, import_jsx_runtime230.jsxs)("div", { className: "flex items-end justify-between", children: [
          /* @__PURE__ */ (0, import_jsx_runtime230.jsx)(Header2, { className: "", children: "Project alerts" }),
          /* @__PURE__ */ (0, import_jsx_runtime230.jsx)(
            LinkButton,
            {
              to: v3NewProjectAlertPath(organization, project),
              variant: "primary/small",
              LeadingIcon: import_solid92.PlusIcon,
              shortcut: { key: "n" },
              children: "New alert"
            }
          )
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime230.jsxs)(Table, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime230.jsx)(TableHeader, { children: /* @__PURE__ */ (0, import_jsx_runtime230.jsxs)(TableRow, { children: [
            /* @__PURE__ */ (0, import_jsx_runtime230.jsx)(TableHeaderCell, { children: "Name" }),
            /* @__PURE__ */ (0, import_jsx_runtime230.jsx)(TableHeaderCell, { children: "Alert types" }),
            /* @__PURE__ */ (0, import_jsx_runtime230.jsx)(TableHeaderCell, { children: "Environments" }),
            /* @__PURE__ */ (0, import_jsx_runtime230.jsx)(TableHeaderCell, { children: "Channel" }),
            /* @__PURE__ */ (0, import_jsx_runtime230.jsx)(TableHeaderCell, { children: "Enabled" }),
            /* @__PURE__ */ (0, import_jsx_runtime230.jsx)(TableHeaderCell, { hiddenLabel: !0, children: "Actions" })
          ] }) }),
          /* @__PURE__ */ (0, import_jsx_runtime230.jsx)(TableBody, { children: alertChannels.length > 0 ? alertChannels.map((alertChannel) => /* @__PURE__ */ (0, import_jsx_runtime230.jsxs)(TableRow, { children: [
            /* @__PURE__ */ (0, import_jsx_runtime230.jsx)(TableCell, { className: alertChannel.enabled ? "" : "opacity-50", children: alertChannel.name }),
            /* @__PURE__ */ (0, import_jsx_runtime230.jsx)(TableCell, { className: alertChannel.enabled ? "" : "opacity-50", children: alertChannel.alertTypes.map((type) => alertTypeTitle(type)).join(", ") }),
            /* @__PURE__ */ (0, import_jsx_runtime230.jsx)(
              TableCell,
              {
                className: cn("space-x-2", alertChannel.enabled ? "" : "opacity-50"),
                children: alertChannel.environmentTypes.map((environmentType) => /* @__PURE__ */ (0, import_jsx_runtime230.jsx)(
                  EnvironmentTypeLabel,
                  {
                    environment: { type: environmentType }
                  },
                  environmentType
                ))
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime230.jsx)(TableCell, { className: alertChannel.enabled ? "" : "opacity-50", children: /* @__PURE__ */ (0, import_jsx_runtime230.jsx)(AlertChannelDetails, { alertChannel }) }),
            /* @__PURE__ */ (0, import_jsx_runtime230.jsx)(TableCell, { className: alertChannel.enabled ? "" : "opacity-50", children: /* @__PURE__ */ (0, import_jsx_runtime230.jsx)(
              EnabledStatus,
              {
                enabled: alertChannel.enabled,
                enabledIcon: import_solid92.BellAlertIcon,
                disabledIcon: import_solid92.BellSlashIcon
              }
            ) }),
            /* @__PURE__ */ (0, import_jsx_runtime230.jsxs)(TableCellMenu, { isSticky: !0, children: [
              alertChannel.enabled ? /* @__PURE__ */ (0, import_jsx_runtime230.jsx)(DisableAlertChannelButton, { id: alertChannel.id }) : /* @__PURE__ */ (0, import_jsx_runtime230.jsx)(EnableAlertChannelButton, { id: alertChannel.id }),
              /* @__PURE__ */ (0, import_jsx_runtime230.jsx)(DeleteAlertChannelButton, { id: alertChannel.id })
            ] })
          ] }, alertChannel.id)) : /* @__PURE__ */ (0, import_jsx_runtime230.jsx)(TableRow, { children: /* @__PURE__ */ (0, import_jsx_runtime230.jsx)(TableCell, { colSpan: 5, children: /* @__PURE__ */ (0, import_jsx_runtime230.jsxs)("div", { className: "flex flex-col items-center justify-center py-6", children: [
            /* @__PURE__ */ (0, import_jsx_runtime230.jsx)(Header2, { spacing: !0, className: "text-text-bright", children: "You haven't created any project alerts yet" }),
            /* @__PURE__ */ (0, import_jsx_runtime230.jsx)(Paragraph, { variant: "small", className: "mb-4", children: "Get alerted when runs or deployments fail, or when deployments succeed in both Prod and Staging environments." }),
            /* @__PURE__ */ (0, import_jsx_runtime230.jsx)(
              LinkButton,
              {
                to: v3NewProjectAlertPath(organization, project),
                variant: "primary/medium",
                LeadingIcon: import_solid92.PlusIcon,
                shortcut: { key: "n" },
                children: "New alert"
              }
            )
          ] }) }) }) })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime230.jsx)("div", { className: "flex items-stretch gap-3", children: requiresUpgrade ? /* @__PURE__ */ (0, import_jsx_runtime230.jsx)(
          InfoPanel,
          {
            variant: "upgrade",
            icon: import_solid92.LockOpenIcon,
            iconClassName: "text-indigo-500",
            title: "Unlock more alerts",
            to: v3BillingPath(organization),
            buttonLabel: "Upgrade",
            children: /* @__PURE__ */ (0, import_jsx_runtime230.jsxs)(Paragraph, { variant: "small", children: [
              "You've used all ",
              limits.limit,
              " of your available alerts. Upgrade your plan to enable more."
            ] })
          }
        ) : /* @__PURE__ */ (0, import_jsx_runtime230.jsxs)("div", { className: "flex h-fit flex-col items-start gap-4 rounded-md border border-grid-bright bg-background-bright p-4", children: [
          /* @__PURE__ */ (0, import_jsx_runtime230.jsxs)("div", { className: "flex items-center justify-between gap-6", children: [
            /* @__PURE__ */ (0, import_jsx_runtime230.jsxs)(Header3, { children: [
              "You've used ",
              limits.used,
              "/",
              limits.limit,
              " of your alerts."
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime230.jsx)(LinkButton, { to: v3BillingPath(organization), variant: "secondary/small", children: "Upgrade" })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime230.jsx)("div", { className: "h-2 w-full overflow-hidden rounded-full border border-grid-bright", children: /* @__PURE__ */ (0, import_jsx_runtime230.jsx)(
            "div",
            {
              className: "h-full bg-grid-bright",
              style: { width: `${limits.used / limits.limit * 100}%` }
            }
          ) })
        ] }) })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime230.jsx)(import_react168.Outlet, {})
    ] })
  ] });
}
function DeleteAlertChannelButton(props) {
  let lastSubmission = (0, import_react168.useActionData)(), navigation = (0, import_react168.useNavigation)(), isLoading2 = navigation.state !== "idle" && navigation.formMethod === "post" && navigation.formData?.get("action") === "delete", [form, { id }] = (0, import_react167.useForm)({
    id: "delete-alert-channel",
    // TODO: type this
    lastSubmission,
    onValidate({ formData }) {
      return (0, import_zod132.parse)(formData, { schema: schema10 });
    },
    shouldRevalidate: "onSubmit"
  });
  return /* @__PURE__ */ (0, import_jsx_runtime230.jsxs)(import_react168.Form, { method: "post", ...form.props, children: [
    /* @__PURE__ */ (0, import_jsx_runtime230.jsx)("input", { type: "hidden", name: "id", value: props.id }),
    /* @__PURE__ */ (0, import_jsx_runtime230.jsx)(
      Button,
      {
        name: "action",
        value: "delete",
        type: "submit",
        variant: "small-menu-item",
        LeadingIcon: import_solid92.TrashIcon,
        leadingIconClassName: "text-rose-500",
        className: "text-xs",
        children: isLoading2 ? "Deleting" : "Delete"
      }
    )
  ] });
}
function DisableAlertChannelButton(props) {
  let lastSubmission = (0, import_react168.useActionData)(), navigation = (0, import_react168.useNavigation)(), isLoading2 = navigation.state !== "idle" && navigation.formMethod === "post" && navigation.formData?.get("action") === "delete", [form, { id }] = (0, import_react167.useForm)({
    id: "disable-alert-channel",
    // TODO: type this
    lastSubmission,
    onValidate({ formData }) {
      return (0, import_zod132.parse)(formData, { schema: schema10 });
    },
    shouldRevalidate: "onSubmit"
  });
  return /* @__PURE__ */ (0, import_jsx_runtime230.jsxs)(import_react168.Form, { method: "post", ...form.props, children: [
    /* @__PURE__ */ (0, import_jsx_runtime230.jsx)("input", { type: "hidden", name: "id", value: props.id }),
    /* @__PURE__ */ (0, import_jsx_runtime230.jsx)(
      Button,
      {
        name: "action",
        value: "disable",
        type: "submit",
        variant: "small-menu-item",
        LeadingIcon: import_solid92.BellSlashIcon,
        leadingIconClassName: "text-dimmed",
        className: "text-xs",
        children: isLoading2 ? "Disabling" : "Disable"
      }
    )
  ] });
}
function EnableAlertChannelButton(props) {
  let lastSubmission = (0, import_react168.useActionData)(), navigation = (0, import_react168.useNavigation)(), isLoading2 = navigation.state !== "idle" && navigation.formMethod === "post" && navigation.formData?.get("action") === "delete", [form, { id }] = (0, import_react167.useForm)({
    id: "enable-alert-channel",
    // TODO: type this
    lastSubmission,
    onValidate({ formData }) {
      return (0, import_zod132.parse)(formData, { schema: schema10 });
    },
    shouldRevalidate: "onSubmit"
  });
  return /* @__PURE__ */ (0, import_jsx_runtime230.jsxs)(import_react168.Form, { method: "post", ...form.props, children: [
    /* @__PURE__ */ (0, import_jsx_runtime230.jsx)("input", { type: "hidden", name: "id", value: props.id }),
    /* @__PURE__ */ (0, import_jsx_runtime230.jsx)(
      Button,
      {
        name: "action",
        value: "enable",
        type: "submit",
        variant: "small-menu-item",
        LeadingIcon: import_solid92.BellAlertIcon,
        leadingIconClassName: "text-success",
        className: "text-xs",
        children: isLoading2 ? "Enabling" : "Enable"
      }
    )
  ] });
}
function AlertChannelDetails({ alertChannel }) {
  switch (alertChannel.properties?.type) {
    case "EMAIL":
      return /* @__PURE__ */ (0, import_jsx_runtime230.jsx)(
        DetailCell,
        {
          leadingIcon: /* @__PURE__ */ (0, import_jsx_runtime230.jsx)(
            AlertChannelTypeIcon,
            {
              channelType: alertChannel.type,
              className: "size-5 text-charcoal-400"
            }
          ),
          leadingIconClassName: "text-charcoal-400",
          label: "Email",
          description: alertChannel.properties.email
        }
      );
    case "WEBHOOK":
      return /* @__PURE__ */ (0, import_jsx_runtime230.jsx)(
        DetailCell,
        {
          leadingIcon: /* @__PURE__ */ (0, import_jsx_runtime230.jsx)(TooltipProvider, { children: /* @__PURE__ */ (0, import_jsx_runtime230.jsxs)(Tooltip, { children: [
            /* @__PURE__ */ (0, import_jsx_runtime230.jsx)(TooltipTrigger, { children: /* @__PURE__ */ (0, import_jsx_runtime230.jsx)(
              AlertChannelTypeIcon,
              {
                channelType: alertChannel.type,
                className: "size-5 text-charcoal-400"
              }
            ) }),
            /* @__PURE__ */ (0, import_jsx_runtime230.jsx)(TooltipContent, { className: "flex items-center gap-1", children: "Webhook" })
          ] }) }),
          leadingIconClassName: "text-charcoal-400",
          label: alertChannel.properties.url,
          description: /* @__PURE__ */ (0, import_jsx_runtime230.jsx)(
            ClipboardField,
            {
              value: alertChannel.properties.secret,
              variant: "secondary/small",
              icon: /* @__PURE__ */ (0, import_jsx_runtime230.jsx)(import_solid92.LockClosedIcon, { className: "size-4" }),
              iconButton: !0,
              secure: "\u2022".repeat(alertChannel.properties.secret.length),
              className: "mt-1 w-80"
            }
          )
        }
      );
    case "SLACK":
      return /* @__PURE__ */ (0, import_jsx_runtime230.jsx)(
        DetailCell,
        {
          leadingIcon: /* @__PURE__ */ (0, import_jsx_runtime230.jsx)(
            AlertChannelTypeIcon,
            {
              channelType: alertChannel.type,
              className: "size-5 text-charcoal-400"
            }
          ),
          leadingIconClassName: "text-charcoal-400",
          label: "Slack",
          description: `#${alertChannel.properties.channelName}`
        }
      );
  }
  return null;
}
function alertTypeTitle(alertType) {
  switch (alertType) {
    case "TASK_RUN_ATTEMPT":
      return "Task attempt failure";
    case "DEPLOYMENT_FAILURE":
      return "Deployment failure";
    case "DEPLOYMENT_SUCCESS":
      return "Deployment success";
    default:
      (0, import_assert_never12.default)(alertType);
  }
}
function AlertChannelTypeIcon({
  channelType,
  className
}) {
  switch (channelType) {
    case "EMAIL":
      return /* @__PURE__ */ (0, import_jsx_runtime230.jsx)(import_solid92.EnvelopeIcon, { className });
    case "SLACK":
      return /* @__PURE__ */ (0, import_jsx_runtime230.jsx)(import_companyicons7.SlackIcon, { className });
    case "WEBHOOK":
      return /* @__PURE__ */ (0, import_jsx_runtime230.jsx)(import_solid92.GlobeAltIcon, { className });
    default:
      (0, import_assert_never12.default)(channelType);
  }
}

// app/routes/_app.orgs.$organizationSlug.projects.$projectParam.settings/route.tsx
var route_exports79 = {};
__export(route_exports79, {
  action: () => action21,
  createSchema: () => createSchema2,
  default: () => Page52
});
var import_react169 = require("@conform-to/react"), import_zod134 = require("@conform-to/zod"), import_react170 = require("@remix-run/react"), import_server_runtime22 = require("@remix-run/server-runtime"), import_remix_typedjson60 = require("remix-typedjson"), import_zod135 = require("zod");

// app/services/deleteProject.server.ts
var DeleteProjectService = class {
  #prismaClient;
  constructor(prismaClient = prisma) {
    this.#prismaClient = prismaClient;
  }
  async call(options2) {
    let projectId = await this.#getProjectId(options2), project = await this.#prismaClient.project.findFirst({
      include: {
        environments: {
          include: {
            endpoints: !0
          }
        },
        jobs: {
          where: { deletedAt: null },
          include: {
            aliases: {
              where: {
                name: "latest"
              },
              include: {
                version: !0
              },
              take: 1
            }
          }
        },
        organization: !0
      },
      where: {
        id: projectId,
        organization: { members: { some: { userId: options2.userId } } }
      }
    });
    if (!project)
      throw new Error("Project not found");
    if (project.deletedAt)
      return;
    let service = new DisableScheduleSourceService();
    for (let environment of project.environments) {
      await this.#prismaClient.eventDispatcher.updateMany({
        where: {
          environmentId: environment.id
        },
        data: {
          enabled: !1
        }
      });
      let eventDispatchers = await this.#prismaClient.eventDispatcher.findMany({
        where: {
          environmentId: environment.id
        }
      });
      logger.info("Deleting jobs", { jobs: project.jobs });
      for (let job of project.jobs) {
        await this.#prismaClient.jobVersion.updateMany({
          where: {
            jobId: job.id
          },
          data: {
            status: "DISABLED"
          }
        }), await this.#prismaClient.job.update({
          where: {
            id: job.id
          },
          data: {
            deletedAt: /* @__PURE__ */ new Date()
          }
        });
        for (let eventDispatcher of eventDispatchers)
          await service.call({
            key: job.id,
            dispatcher: eventDispatcher
          });
      }
    }
    let deleteEndpointService = new DeleteEndpointService();
    for (let environment of project.environments)
      for (let endpoint of environment.endpoints)
        await deleteEndpointService.call(endpoint.id, options2.userId);
    await this.#prismaClient.project.update({
      where: {
        id: project.id
      },
      data: {
        deletedAt: /* @__PURE__ */ new Date()
      }
    });
  }
  async #getProjectId(options2) {
    if ("projectId" in options2)
      return options2.projectId;
    let { id } = await this.#prismaClient.project.findFirstOrThrow({
      select: {
        id: !0
      },
      where: {
        slug: options2.projectSlug
      }
    });
    return id;
  }
};

// app/routes/_app.orgs.$organizationSlug.projects.$projectParam.settings/route.tsx
var import_jsx_runtime231 = require("react/jsx-runtime");
function createSchema2(constraints = {}) {
  return import_zod135.z.discriminatedUnion("action", [
    import_zod135.z.object({
      action: import_zod135.z.literal("rename"),
      projectName: import_zod135.z.string().min(3, "Project name must have at least 3 characters").max(50)
    }),
    import_zod135.z.object({
      action: import_zod135.z.literal("delete"),
      projectSlug: import_zod135.z.string().superRefine((slug3, ctx) => {
        if (constraints.getSlugMatch === void 0)
          ctx.addIssue({
            code: import_zod135.z.ZodIssueCode.custom,
            message: import_react169.conform.VALIDATION_UNDEFINED
          });
        else {
          let { isMatch, projectSlug } = constraints.getSlugMatch(slug3);
          if (isMatch)
            return;
          ctx.addIssue({
            code: import_zod135.z.ZodIssueCode.custom,
            message: `The slug must match ${projectSlug}`
          });
        }
      })
    })
  ]);
}
var action21 = async ({ request, params }) => {
  let userId = await requireUserId(request), { organizationSlug, projectParam: projectParam2 } = params;
  if (!organizationSlug || !projectParam2)
    return (0, import_server_runtime22.json)({ errors: { body: "organizationSlug is required" } }, { status: 400 });
  let formData = await request.formData(), schema18 = createSchema2({
    getSlugMatch: (slug3) => ({ isMatch: slug3 === projectParam2, projectSlug: projectParam2 })
  }), submission = (0, import_zod134.parse)(formData, { schema: schema18 });
  if (!submission.value || submission.intent !== "submit")
    return (0, import_server_runtime22.json)(submission);
  try {
    switch (submission.value.action) {
      case "rename":
        return await prisma.project.update({
          where: {
            slug: projectParam2,
            organization: {
              members: {
                some: {
                  userId
                }
              }
            }
          },
          data: {
            name: submission.value.projectName
          }
        }), redirectWithSuccessMessage(
          projectPath({ slug: organizationSlug }, { slug: projectParam2 }),
          request,
          `Project renamed to ${submission.value.projectName}`
        );
      case "delete": {
        let deleteProjectService = new DeleteProjectService();
        try {
          await deleteProjectService.call({ projectSlug: projectParam2, userId });
          let removeProjectIdSession = await clearCurrentProjectId(request);
          return (0, import_remix_typedjson60.redirect)(organizationPath({ slug: organizationSlug }), {
            headers: { "Set-Cookie": await commitCurrentProjectSession(removeProjectIdSession) }
          });
        } catch (error) {
          return logger.error("Project could not be deleted", {
            error: error instanceof Error ? error.message : JSON.stringify(error)
          }), redirectWithErrorMessage(
            organizationPath({ slug: organizationSlug }),
            request,
            `Project ${projectParam2} could not be deleted`
          );
        }
      }
    }
  } catch (error) {
    return (0, import_server_runtime22.json)({ errors: { body: error.message } }, { status: 400 });
  }
};
function Page52() {
  let project = useProject(), lastSubmission = (0, import_react170.useActionData)(), navigation = (0, import_react170.useNavigation)(), [renameForm, { projectName }] = (0, import_react169.useForm)({
    id: "rename-project",
    // TODO: type this
    lastSubmission,
    shouldRevalidate: "onSubmit",
    onValidate({ formData }) {
      return (0, import_zod134.parse)(formData, {
        schema: createSchema2()
      });
    }
  }), [deleteForm, { projectSlug }] = (0, import_react169.useForm)({
    id: "delete-project",
    // TODO: type this
    lastSubmission,
    shouldValidate: "onInput",
    shouldRevalidate: "onSubmit",
    onValidate({ formData }) {
      return (0, import_zod134.parse)(formData, {
        schema: createSchema2({
          getSlugMatch: (slug3) => ({ isMatch: slug3 === project.slug, projectSlug: project.slug })
        })
      });
    }
  }), isRenameLoading = navigation.formData?.get("action") === "rename" && (navigation.state === "submitting" || navigation.state === "loading"), isDeleteLoading = navigation.formData?.get("action") === "delete" && (navigation.state === "submitting" || navigation.state === "loading");
  return /* @__PURE__ */ (0, import_jsx_runtime231.jsxs)(PageContainer, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime231.jsx)(NavBar, { children: /* @__PURE__ */ (0, import_jsx_runtime231.jsx)(PageTitle, { title: `${project.name} project settings` }) }),
    /* @__PURE__ */ (0, import_jsx_runtime231.jsx)(PageBody, { children: /* @__PURE__ */ (0, import_jsx_runtime231.jsxs)("div", { className: "flex flex-col gap-4", children: [
      /* @__PURE__ */ (0, import_jsx_runtime231.jsx)("div", { children: /* @__PURE__ */ (0, import_jsx_runtime231.jsxs)(import_react170.Form, { method: "post", ...renameForm.props, className: "max-w-md", children: [
        /* @__PURE__ */ (0, import_jsx_runtime231.jsx)("input", { type: "hidden", name: "action", value: "rename" }),
        /* @__PURE__ */ (0, import_jsx_runtime231.jsxs)(Fieldset, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime231.jsxs)(InputGroup, { children: [
            /* @__PURE__ */ (0, import_jsx_runtime231.jsx)(Label, { htmlFor: projectName.id, children: "Rename your project" }),
            /* @__PURE__ */ (0, import_jsx_runtime231.jsx)(
              Input,
              {
                ...import_react169.conform.input(projectName, { type: "text" }),
                defaultValue: project.name,
                placeholder: "Your project name",
                icon: "folder",
                autoFocus: !0
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime231.jsx)(FormError, { id: projectName.errorId, children: projectName.error })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime231.jsx)(
            FormButtons,
            {
              confirmButton: /* @__PURE__ */ (0, import_jsx_runtime231.jsx)(
                Button,
                {
                  type: "submit",
                  variant: "primary/small",
                  disabled: isRenameLoading,
                  LeadingIcon: isRenameLoading ? "spinner-white" : void 0,
                  children: "Rename project"
                }
              )
            }
          )
        ] })
      ] }) }),
      /* @__PURE__ */ (0, import_jsx_runtime231.jsxs)("div", { children: [
        /* @__PURE__ */ (0, import_jsx_runtime231.jsx)(Header2, { spacing: !0, children: "Danger zone" }),
        /* @__PURE__ */ (0, import_jsx_runtime231.jsxs)(
          import_react170.Form,
          {
            method: "post",
            ...deleteForm.props,
            className: "max-w-md rounded-sm border border-rose-500/40",
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime231.jsx)("input", { type: "hidden", name: "action", value: "delete" }),
              /* @__PURE__ */ (0, import_jsx_runtime231.jsxs)(Fieldset, { className: "p-4", children: [
                /* @__PURE__ */ (0, import_jsx_runtime231.jsxs)(InputGroup, { children: [
                  /* @__PURE__ */ (0, import_jsx_runtime231.jsx)(Label, { htmlFor: projectSlug.id, children: "Delete project" }),
                  /* @__PURE__ */ (0, import_jsx_runtime231.jsx)(
                    Input,
                    {
                      ...import_react169.conform.input(projectSlug, { type: "text" }),
                      placeholder: "Your project slug",
                      icon: "warning"
                    }
                  ),
                  /* @__PURE__ */ (0, import_jsx_runtime231.jsx)(FormError, { id: projectSlug.errorId, children: projectSlug.error }),
                  /* @__PURE__ */ (0, import_jsx_runtime231.jsx)(FormError, { children: deleteForm.error }),
                  /* @__PURE__ */ (0, import_jsx_runtime231.jsxs)(Hint, { children: [
                    "This change is irreversible, so please be certain. Type in the Project slug",
                    " ",
                    /* @__PURE__ */ (0, import_jsx_runtime231.jsx)(InlineCode, { variant: "extra-small", children: project.slug }),
                    " and then press Delete."
                  ] })
                ] }),
                /* @__PURE__ */ (0, import_jsx_runtime231.jsx)(
                  FormButtons,
                  {
                    confirmButton: /* @__PURE__ */ (0, import_jsx_runtime231.jsx)(
                      Button,
                      {
                        type: "submit",
                        variant: "danger/small",
                        LeadingIcon: isDeleteLoading ? "spinner-white" : "trash-can",
                        leadingIconClassName: "text-white",
                        disabled: isDeleteLoading,
                        children: "Delete project"
                      }
                    )
                  }
                )
              ] })
            ]
          }
        )
      ] })
    ] }) })
  ] });
}

// app/routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers/route.tsx
var route_exports80 = {};
__export(route_exports80, {
  default: () => Page53
});
var import_solid93 = require("@heroicons/react/20/solid"), import_react171 = require("@remix-run/react");
var import_jsx_runtime232 = require("react/jsx-runtime");
function Page53() {
  let organization = useOrganization(), project = useProject();
  return /* @__PURE__ */ (0, import_jsx_runtime232.jsxs)(PageContainer, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime232.jsxs)(NavBar, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime232.jsx)(PageTitle, { title: "Triggers" }),
      /* @__PURE__ */ (0, import_jsx_runtime232.jsx)(PageAccessories, { children: /* @__PURE__ */ (0, import_jsx_runtime232.jsx)(
        LinkButton,
        {
          LeadingIcon: import_solid93.BookOpenIcon,
          to: docsPath("documentation/concepts/triggers"),
          variant: "minimal/small",
          children: "Triggers documentation"
        }
      ) })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime232.jsx)(PageBody, { scrollable: !1, children: /* @__PURE__ */ (0, import_jsx_runtime232.jsxs)("div", { className: "grid max-h-full grid-rows-[auto_1fr] overflow-hidden px-4", children: [
      /* @__PURE__ */ (0, import_jsx_runtime232.jsx)(
        PageTabs,
        {
          layoutId: "triggers",
          tabs: [
            {
              label: "External Triggers",
              to: projectTriggersPath(organization, project)
            },
            {
              label: "Scheduled Triggers",
              to: projectScheduledTriggersPath(organization, project)
            },
            {
              label: "Webhook Triggers",
              to: projectWebhookTriggersPath(organization, project)
            }
          ]
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime232.jsx)("div", { className: "overflow-y-auto scrollbar-thin scrollbar-track-transparent scrollbar-thumb-charcoal-600", children: /* @__PURE__ */ (0, import_jsx_runtime232.jsx)(import_react171.Outlet, {}) })
    ] }) })
  ] });
}

// app/routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.runs/route.tsx
var route_exports81 = {};
__export(route_exports81, {
  default: () => Page54
});
var import_react172 = require("@remix-run/react");
var import_jsx_runtime233 = require("react/jsx-runtime");
function Page54() {
  return /* @__PURE__ */ (0, import_jsx_runtime233.jsx)(PageContainer, { children: /* @__PURE__ */ (0, import_jsx_runtime233.jsx)(import_react172.Outlet, {}) });
}

// app/routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.test/route.tsx
var route_exports82 = {};
__export(route_exports82, {
  TestSearchParams: () => TestSearchParams,
  default: () => Page55,
  loader: () => loader64
});
var import_react174 = require("@remix-run/react"), import_remix_typedjson61 = require("remix-typedjson"), import_zod136 = require("zod");

// app/hooks/useFilterTasks.ts
function useFilterTasks({ tasks }) {
  return useTextFilter({
    items: tasks,
    filter: (task, text) => !!(task.taskIdentifier.toLowerCase().includes(text.toLowerCase()) || task.exportName.toLowerCase().includes(text.toLowerCase()) || task.filePath.toLowerCase().includes(text.toLowerCase()) || task.id.toLowerCase().includes(text.toLowerCase()) || task.friendlyId.toLowerCase().includes(text.toLowerCase()) || task.triggerSource === "SCHEDULED" && "scheduled".includes(text.toLowerCase()))
  });
}

// app/hooks/useLinkStatus.ts
var import_react173 = require("@remix-run/react");
function useLinkStatus(to, options2) {
  let { relative, end = !1 } = options2 || {}, pathName = (0, import_react173.useResolvedPath)(to, { relative }).pathname.toLowerCase(), locationPathname = (0, import_react173.useLocation)().pathname.toLowerCase(), navigation = (0, import_react173.useNavigation)(), nextLocationPathname = navigation.location ? navigation.location.pathname.toLowerCase() : null, endSlashPosition = pathName !== "/" && pathName.endsWith("/") ? pathName.length - 1 : pathName.length, isActive = locationPathname === pathName || !end && locationPathname.startsWith(pathName) && locationPathname.charAt(endSlashPosition) === "/", isPending = nextLocationPathname != null && (nextLocationPathname === pathName || !end && nextLocationPathname.startsWith(pathName) && nextLocationPathname.charAt(pathName.length) === "/");
  return {
    isActive,
    isPending,
    isTransitioning: navigation.state === "loading"
  };
}

// app/presenters/v3/TestPresenter.server.ts
var TestPresenter = class extends BasePresenter {
  async call({ userId, projectSlug, url }) {
    let project = await this._replica.project.findFirstOrThrow({
      select: {
        id: !0,
        environments: {
          select: {
            id: !0,
            type: !0,
            slug: !0
          },
          where: {
            OR: [
              {
                type: {
                  in: ["PREVIEW", "STAGING", "PRODUCTION"]
                }
              },
              {
                type: "DEVELOPMENT",
                orgMember: {
                  userId
                }
              }
            ]
          }
        }
      },
      where: {
        slug: projectSlug
      }
    }), environments2 = sortEnvironments(
      project.environments.map((environment2) => ({
        id: environment2.id,
        type: environment2.type,
        slug: environment2.slug
      }))
    ), searchParams = createSearchParams(url, TestSearchParams);
    if (!searchParams.success)
      return {
        hasSelectedEnvironment: !1,
        environments: environments2
      };
    let environment = searchParams.params.get("environment") ?? "dev", matchingEnvironment = project.environments.find((env6) => env6.slug === environment);
    if (!matchingEnvironment)
      return {
        hasSelectedEnvironment: !1,
        environments: environments2
      };
    let isDev = matchingEnvironment.type === "DEVELOPMENT", tasks = await this.#getTasks(matchingEnvironment.id, isDev);
    return {
      hasSelectedEnvironment: !0,
      environments: environments2,
      selectedEnvironment: matchingEnvironment,
      tasks: tasks.map((task) => ({
        id: task.id,
        taskIdentifier: task.slug,
        filePath: task.filePath,
        exportName: task.exportName,
        friendlyId: task.friendlyId,
        triggerSource: task.triggerSource
      }))
    };
  }
  async #getTasks(envId, isDev) {
    return isDev ? await this._replica.$queryRaw`WITH workers AS (
          SELECT 
                bw.*,
                ROW_NUMBER() OVER(ORDER BY string_to_array(bw.version, '.')::int[] DESC) AS rn
          FROM 
                ${sqlDatabaseSchema}."BackgroundWorker" bw
          WHERE "runtimeEnvironmentId" = ${envId}
        ),
        latest_workers AS (SELECT * FROM workers WHERE rn = 1)
        SELECT bwt.id, version, slug, "filePath", "exportName", bwt."friendlyId", bwt."triggerSource"
        FROM latest_workers
        JOIN ${sqlDatabaseSchema}."BackgroundWorkerTask" bwt ON bwt."workerId" = latest_workers.id
        ORDER BY bwt."exportName" ASC;` : (await findCurrentWorkerDeployment(envId))?.worker?.tasks ?? [];
  }
};

// app/routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.test/route.tsx
var import_jsx_runtime234 = require("react/jsx-runtime"), TestSearchParams = import_zod136.z.object({
  environment: import_zod136.z.string().optional()
}), loader64 = async ({ request, params }) => {
  let userId = await requireUserId(request), { projectParam: projectParam2, organizationSlug } = ProjectParamSchema.parse(params), result = await new TestPresenter().call({
    userId,
    projectSlug: projectParam2,
    url: request.url
  });
  return (0, import_remix_typedjson61.typedjson)(result);
};
function Page55() {
  let { hasSelectedEnvironment, environments: environments2, ...rest } = (0, import_remix_typedjson61.useTypedLoaderData)(), { taskParam } = (0, import_react174.useParams)(), organization = useOrganization(), project = useProject(), optimisticLocation = useOptimisticLocation(), environment = new URLSearchParams(optimisticLocation.search).get("environment") ?? "dev", navigation = (0, import_react174.useNavigation)(), location = (0, import_react174.useLocation)(), isLoadingTasks = navigation.state === "loading" && navigation.location.pathname === location.pathname;
  return /* @__PURE__ */ (0, import_jsx_runtime234.jsxs)(PageContainer, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime234.jsx)(NavBar, { children: /* @__PURE__ */ (0, import_jsx_runtime234.jsx)(PageTitle, { title: "Test" }) }),
    /* @__PURE__ */ (0, import_jsx_runtime234.jsx)(PageBody, { scrollable: !1, children: /* @__PURE__ */ (0, import_jsx_runtime234.jsx)("div", { className: cn("grid h-full max-h-full grid-cols-1"), children: /* @__PURE__ */ (0, import_jsx_runtime234.jsxs)(ResizablePanelGroup, { direction: "horizontal", className: "h-full max-h-full", children: [
      /* @__PURE__ */ (0, import_jsx_runtime234.jsx)(ResizablePanel, { order: 1, minSize: 20, defaultSize: 30, children: /* @__PURE__ */ (0, import_jsx_runtime234.jsxs)("div", { className: "grid h-full max-h-full grid-rows-[5.625rem_1fr] overflow-hidden", children: [
        /* @__PURE__ */ (0, import_jsx_runtime234.jsxs)("div", { className: "mx-3 flex flex-col gap-1 border-b border-grid-dimmed", children: [
          /* @__PURE__ */ (0, import_jsx_runtime234.jsx)("div", { className: "flex h-10 items-center", children: /* @__PURE__ */ (0, import_jsx_runtime234.jsx)(Header2, { children: "Select an environment" }) }),
          /* @__PURE__ */ (0, import_jsx_runtime234.jsx)("div", { className: "flex items-center justify-stretch gap-1", children: environments2.map((env6) => {
            let isSelected = env6.slug === environment;
            return /* @__PURE__ */ (0, import_jsx_runtime234.jsx)(
              import_react174.Link,
              {
                className: cn(
                  "flex h-8 flex-1 items-center justify-center rounded-sm border text-xs uppercase tracking-wider",
                  isSelected ? cn(environmentBorderClassName(env6), environmentTextClassName(env6)) : "border-grid-bright text-text-dimmed"
                ),
                to: v3TestPath(organization, project, env6.slug),
                children: /* @__PURE__ */ (0, import_jsx_runtime234.jsx)("span", { children: environmentTitle(env6) })
              },
              env6.id
            );
          }) })
        ] }),
        isLoadingTasks ? /* @__PURE__ */ (0, import_jsx_runtime234.jsx)("div", { className: "flex h-full w-full items-center justify-center", children: /* @__PURE__ */ (0, import_jsx_runtime234.jsx)(Spinner, {}) }) : hasSelectedEnvironment ? /* @__PURE__ */ (0, import_jsx_runtime234.jsxs)("div", { className: "grid grid-rows-[2.5rem_1fr]  overflow-hidden", children: [
          /* @__PURE__ */ (0, import_jsx_runtime234.jsx)("div", { className: "mx-3 flex items-center border-b border-grid-dimmed", children: /* @__PURE__ */ (0, import_jsx_runtime234.jsx)(Header2, { children: "Select a task" }) }),
          rest.tasks?.length ? /* @__PURE__ */ (0, import_jsx_runtime234.jsx)(
            TaskSelector,
            {
              tasks: rest.tasks,
              environmentSlug: rest.selectedEnvironment.slug
            }
          ) : /* @__PURE__ */ (0, import_jsx_runtime234.jsx)(NoTaskInstructions, { environment: rest.selectedEnvironment })
        ] }) : /* @__PURE__ */ (0, import_jsx_runtime234.jsx)(import_jsx_runtime234.Fragment, {})
      ] }) }),
      /* @__PURE__ */ (0, import_jsx_runtime234.jsx)(ResizableHandle, { withHandle: !0 }),
      /* @__PURE__ */ (0, import_jsx_runtime234.jsx)(ResizablePanel, { order: 2, minSize: 30, defaultSize: 70, children: /* @__PURE__ */ (0, import_jsx_runtime234.jsx)(import_react174.Outlet, {}, taskParam) })
    ] }) }) })
  ] });
}
function TaskSelector({
  tasks,
  environmentSlug
}) {
  let { filterText, setFilterText, filteredItems } = useFilterTasks({ tasks });
  return /* @__PURE__ */ (0, import_jsx_runtime234.jsxs)("div", { className: "divide-y divide-charcoal-800 overflow-y-auto scrollbar-thin scrollbar-track-transparent scrollbar-thumb-charcoal-600", children: [
    /* @__PURE__ */ (0, import_jsx_runtime234.jsx)("div", { className: "px-2 pb-2", children: /* @__PURE__ */ (0, import_jsx_runtime234.jsx)(
      Input,
      {
        placeholder: "Search tasks",
        variant: "medium",
        icon: "search",
        fullWidth: !0,
        value: filterText,
        autoFocus: !0,
        onChange: (e) => setFilterText(e.target.value)
      }
    ) }),
    /* @__PURE__ */ (0, import_jsx_runtime234.jsxs)(Table, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime234.jsx)(TableHeader, { children: /* @__PURE__ */ (0, import_jsx_runtime234.jsxs)(TableRow, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime234.jsx)(TableHeaderCell, { className: "px-2", children: /* @__PURE__ */ (0, import_jsx_runtime234.jsx)("span", { className: "sr-only", children: "Go to test task" }) }),
        /* @__PURE__ */ (0, import_jsx_runtime234.jsx)(TableHeaderCell, { className: "px-2", children: "Task" }),
        /* @__PURE__ */ (0, import_jsx_runtime234.jsx)(TableHeaderCell, { className: "px-2", children: "File path" })
      ] }) }),
      /* @__PURE__ */ (0, import_jsx_runtime234.jsx)(TableBody, { children: filteredItems.length > 0 ? filteredItems.map((t) => /* @__PURE__ */ (0, import_jsx_runtime234.jsx)(TaskRow, { task: t, environmentSlug }, t.friendlyId)) : /* @__PURE__ */ (0, import_jsx_runtime234.jsx)(TableBlankRow, { colSpan: 3, children: /* @__PURE__ */ (0, import_jsx_runtime234.jsxs)(Paragraph, { spacing: !0, variant: "small", children: [
        'No tasks match "',
        filterText,
        '"'
      ] }) }) })
    ] })
  ] });
}
function NoTaskInstructions({ environment }) {
  return /* @__PURE__ */ (0, import_jsx_runtime234.jsx)("div", { className: "px-3 py-3", children: /* @__PURE__ */ (0, import_jsx_runtime234.jsxs)(Paragraph, { spacing: !0, variant: "small", children: [
    "You have no tasks ",
    environment ? `in ${environmentTitle(environment)}` : "",
    "."
  ] }) });
}
function TaskRow({ task, environmentSlug }) {
  let organization = useOrganization(), project = useProject(), path2 = v3TestTaskPath(organization, project, task, environmentSlug), { isActive, isPending } = useLinkStatus(path2);
  return /* @__PURE__ */ (0, import_jsx_runtime234.jsxs)(
    TableRow,
    {
      className: cn(
        (isActive || isPending) && "z-20 rounded-sm outline outline-1 outline-offset-[-1px] outline-secondary"
      ),
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime234.jsx)(TableCell, { to: path2, actionClassName: "pl-2.5 pr-1 py-1", children: /* @__PURE__ */ (0, import_jsx_runtime234.jsx)(RadioButtonCircle, { checked: isActive || isPending }) }),
        /* @__PURE__ */ (0, import_jsx_runtime234.jsx)(TableCell, { to: path2, actionClassName: "pl-1 pr-2 py-1", children: /* @__PURE__ */ (0, import_jsx_runtime234.jsxs)("div", { className: "flex flex-col gap-0.5", children: [
          /* @__PURE__ */ (0, import_jsx_runtime234.jsx)(
            TaskFunctionName,
            {
              variant: "extra-small",
              functionName: task.exportName,
              className: "-ml-1 inline-flex"
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime234.jsxs)("div", { className: "flex items-start gap-1", children: [
            /* @__PURE__ */ (0, import_jsx_runtime234.jsx)(TaskTriggerSourceIcon, { source: task.triggerSource, className: "size-3.5" }),
            /* @__PURE__ */ (0, import_jsx_runtime234.jsx)(Paragraph, { variant: "extra-small", className: "text-text-dimmed", children: task.taskIdentifier })
          ] })
        ] }) }),
        /* @__PURE__ */ (0, import_jsx_runtime234.jsx)(TableCell, { to: path2, actionClassName: "px-2 py-1", children: task.filePath })
      ]
    },
    task.taskIdentifier
  );
}

// app/routes/resources.connection.$organizationId.oauth2.$integrationId.ts
var resources_connection_organizationId_oauth2_integrationId_exports = {};
__export(resources_connection_organizationId_oauth2_integrationId_exports, {
  action: () => action22,
  schema: () => schema11
});
var import_zod137 = require("@conform-to/zod"), import_server_runtime23 = require("@remix-run/server-runtime"), import_remix_typedjson62 = require("remix-typedjson"), import_zod138 = __toESM(require("zod"));
var schema11 = import_zod138.default.object({
  integrationIdentifier: import_zod138.default.string(),
  integrationAuthMethod: import_zod138.default.string(),
  title: import_zod138.default.string().min(2, "The title must be unique and at least 2 characters long"),
  description: import_zod138.default.string().optional(),
  hasCustomClient: import_zod138.default.preprocess((value) => value === "on", import_zod138.default.boolean()),
  customClientId: import_zod138.default.string().optional(),
  customClientSecret: import_zod138.default.string().optional(),
  clientType: import_zod138.default.union([import_zod138.default.literal("DEVELOPER"), import_zod138.default.literal("EXTERNAL")]),
  redirectTo: import_zod138.default.string(),
  scopes: import_zod138.default.preprocess(
    (data2) => typeof data2 == "string" ? [data2] : data2,
    import_zod138.default.array(import_zod138.default.string(), {
      required_error: "You must select at least one scope"
    }).nonempty("You must select at least one scope")
  )
}).refine(
  (value) => value.hasCustomClient ? value.customClientId !== void 0 && value.customClientId !== "" && value.customClientSecret !== void 0 && value.customClientSecret !== "" : !0,
  {
    message: "You must enter a Client ID and Client secret if you want to use your own OAuth app.",
    path: ["customClientId"]
  }
), ParamsSchema9 = import_zod138.default.object({
  organizationId: import_zod138.default.string(),
  integrationId: import_zod138.default.string()
});
async function action22({ request, params }) {
  let userId = await requireUserId(request);
  if (request.method.toUpperCase() !== "PUT")
    return (0, import_remix_typedjson62.typedjson)(
      {
        type: "error",
        error: "Method not allowed"
      },
      { status: 405 }
    );
  let { integrationId, organizationId } = ParamsSchema9.parse(params), formData = await request.formData(), submission = (0, import_zod137.parse)(formData, { schema: schema11 });
  if (!submission.value || submission.intent !== "submit")
    return (0, import_server_runtime23.json)(submission);
  let {
    hasCustomClient,
    customClientId,
    customClientSecret,
    integrationIdentifier,
    integrationAuthMethod,
    clientType,
    title: title2,
    description,
    redirectTo,
    scopes
  } = submission.value, organization = await prisma.organization.findFirstOrThrow({
    where: {
      id: organizationId,
      members: {
        some: {
          userId
        }
      }
    }
  }), url = requestUrl(request), redirectUrl = await integrationAuthRepository.populateMissingConnectionClientFields({
    id: integrationId,
    customClient: hasCustomClient ? { id: customClientId, secret: customClientSecret } : void 0,
    clientType,
    organizationId: organization.id,
    integrationIdentifier,
    integrationAuthMethod,
    scopes,
    title: title2,
    description,
    redirectTo,
    url
  });
  return (0, import_remix_typedjson62.redirect)(redirectUrl);
}

// app/routes/_app.orgs.$organizationSlug.projects.$projectParam._index/route.tsx
var route_exports83 = {};
__export(route_exports83, {
  default: () => Page56,
  loader: () => loader65
});
var import_solid94 = require("@heroicons/react/24/solid"), import_remix_typedjson63 = require("remix-typedjson");
var import_jsx_runtime235 = require("react/jsx-runtime"), loader65 = async ({ request, params }) => {
  let userId = await requireUserId(request), { organizationSlug, projectParam: projectParam2 } = ProjectParamSchema.parse(params);
  try {
    let jobs = await new JobListPresenter().call({ userId, organizationSlug, projectSlug: projectParam2 });
    return (0, import_remix_typedjson63.typedjson)({
      jobs
    });
  } catch (error) {
    throw console.error(error), new Response(void 0, {
      status: 400,
      statusText: "Something went wrong, if this problem persists please contact support."
    });
  }
};
function Page56() {
  let organization = useOrganization(), project = useProject(), { jobs } = (0, import_remix_typedjson63.useTypedLoaderData)(), { filterText, setFilterText, filteredItems, onlyActiveJobs, setOnlyActiveJobs } = useFilterJobs(jobs), hasJobs = jobs.length > 0, activeJobCount = jobs.filter((j) => j.status === "ACTIVE").length;
  return /* @__PURE__ */ (0, import_jsx_runtime235.jsxs)(PageContainer, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime235.jsx)(NavBar, { children: /* @__PURE__ */ (0, import_jsx_runtime235.jsx)(PageTitle, { title: "Jobs" }) }),
    /* @__PURE__ */ (0, import_jsx_runtime235.jsx)(PageBody, { children: /* @__PURE__ */ (0, import_jsx_runtime235.jsx)(Help, { children: (open) => /* @__PURE__ */ (0, import_jsx_runtime235.jsxs)("div", { className: cn("grid gap-4", open ? "grid-cols-2" : "grid-cols-1"), children: [
      /* @__PURE__ */ (0, import_jsx_runtime235.jsx)("div", { className: "h-full", children: hasJobs ? /* @__PURE__ */ (0, import_jsx_runtime235.jsxs)(import_jsx_runtime235.Fragment, { children: [
        jobs.some((j) => j.hasIntegrationsRequiringAction) && /* @__PURE__ */ (0, import_jsx_runtime235.jsx)(
          Callout,
          {
            variant: "error",
            to: organizationIntegrationsPath(organization),
            className: "mb-2",
            children: "Some of your Jobs have Integrations that have not been configured."
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime235.jsx)("div", { className: "mb-2 flex flex-col", children: /* @__PURE__ */ (0, import_jsx_runtime235.jsxs)("div", { className: "flex w-full gap-x-2", children: [
          /* @__PURE__ */ (0, import_jsx_runtime235.jsx)(
            Input,
            {
              placeholder: "Search Jobs",
              variant: "tertiary",
              icon: "search",
              fullWidth: !0,
              value: filterText,
              onChange: (e) => setFilterText(e.target.value),
              autoFocus: !0
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime235.jsx)(
            Switch,
            {
              variant: "small",
              label: "Active Jobs",
              checked: onlyActiveJobs,
              onCheckedChange: setOnlyActiveJobs,
              className: "shrink-0"
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime235.jsx)(HelpTrigger, { title: "Example Jobs and inspiration" })
        ] }) }),
        /* @__PURE__ */ (0, import_jsx_runtime235.jsx)(
          JobsTable,
          {
            jobs: filteredItems,
            noResultsText: `No Jobs match ${filterText}. Try a different search
          query.`
          }
        ),
        jobs.length === 1 && jobs.every((r) => r.lastRun === void 0) && jobs.every((i) => i.hasIntegrationsRequiringAction === !1) && /* @__PURE__ */ (0, import_jsx_runtime235.jsx)(RunYourJobPrompt, {})
      ] }) : /* @__PURE__ */ (0, import_jsx_runtime235.jsx)(FrameworkSelector, {}) }),
      /* @__PURE__ */ (0, import_jsx_runtime235.jsx)(HelpContent, { title: "Example Jobs and inspiration", children: /* @__PURE__ */ (0, import_jsx_runtime235.jsx)(ExampleJobs, {}) })
    ] }) }) })
  ] });
}
function RunYourJobPrompt() {
  return /* @__PURE__ */ (0, import_jsx_runtime235.jsxs)("div", { className: "mt-2 flex w-full gap-x-2 rounded border border-charcoal-800 bg-charcoal-900 p-4 pl-6", children: [
    /* @__PURE__ */ (0, import_jsx_runtime235.jsx)(import_solid94.ArrowUpIcon, { className: "h-5 w-5 animate-bounce text-green-500" }),
    /* @__PURE__ */ (0, import_jsx_runtime235.jsx)(Paragraph, { variant: "small", className: "text-green-500", children: "Your Job is ready to run! Click it to run it now." })
  ] });
}
function ExampleJobs() {
  return /* @__PURE__ */ (0, import_jsx_runtime235.jsxs)(import_jsx_runtime235.Fragment, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime235.jsx)(Header2, { spacing: !0, children: "Video walk-through" }),
    /* @__PURE__ */ (0, import_jsx_runtime235.jsx)(Paragraph, { spacing: !0, variant: "small", children: "Watch Matt, CEO of Trigger.dev create a GitHub issue reminder in Slack using Trigger.dev. (10 mins)" }),
    /* @__PURE__ */ (0, import_jsx_runtime235.jsx)(
      "iframe",
      {
        src: "https://www.youtube.com/embed/uocBQt2HeQo?&showinfo=0&rel=0&modestbranding=1",
        title: "Trigger.dev explainer video",
        width: "400",
        height: "250",
        allow: "accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share",
        allowFullScreen: !0,
        className: "mb-4 border-b border-charcoal-800"
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime235.jsx)(Header2, { spacing: !0, children: "How to create a Job" }),
    /* @__PURE__ */ (0, import_jsx_runtime235.jsxs)(Paragraph, { variant: "small", spacing: !0, children: [
      "Our docs are a great way to learn how to create Jobs with each type of Trigger, from webhooks, to delays, to triggering Jobs on a schedule.",
      " "
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime235.jsxs)(
      "a",
      {
        href: "https://trigger.dev/docs/documentation/guides/create-a-job",
        className: "mb-4 flex w-full items-center rounded border-b border-charcoal-800 py-2 transition hover:border-transparent hover:bg-charcoal-800",
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime235.jsx)(NamedIcon, { name: "external-link", className: iconStyles }),
          /* @__PURE__ */ (0, import_jsx_runtime235.jsx)(Paragraph, { variant: "small", className: "font-semibold text-text-bright", children: "How to create a Job" })
        ]
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime235.jsx)(Header2, { spacing: !0, children: "Check out some example Jobs in code" }),
    /* @__PURE__ */ (0, import_jsx_runtime235.jsxs)(Paragraph, { spacing: !0, variant: "small", children: [
      "If you're looking for inspiration for your next Job, check out our",
      " ",
      /* @__PURE__ */ (0, import_jsx_runtime235.jsx)(TextLink, { href: "https://github.com/triggerdotdev/examples", children: "examples repo" }),
      ". Or jump straight into an example repo from the list below:"
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime235.jsx)("div", { className: "flex w-full flex-col", children: examples2.map((example) => /* @__PURE__ */ (0, import_jsx_runtime235.jsxs)(
      "a",
      {
        href: example.codeLink,
        className: "flex w-full items-center rounded border-b border-grid-bright py-2 transition hover:border-transparent hover:bg-charcoal-800",
        children: [
          example.icon,
          /* @__PURE__ */ (0, import_jsx_runtime235.jsxs)(Paragraph, { variant: "small", children: [
            /* @__PURE__ */ (0, import_jsx_runtime235.jsx)("span", { className: "font-semibold text-text-bright", children: example.title }),
            " -",
            " ",
            example.description
          ] })
        ]
      },
      example.title
    )) })
  ] });
}
var iconStyles = "h-7 w-7 mr-2 pl-2 min-w-[28px]", examples2 = [
  {
    icon: /* @__PURE__ */ (0, import_jsx_runtime235.jsx)(NamedIcon, { name: "clock", className: iconStyles }),
    title: "Basic delay",
    description: "Logs a message to the console, waits 5 minutes, and then logs another message.",
    codeLink: "https://github.com/triggerdotdev/examples/blob/main/delays/src/jobs/delayJob.ts"
  },
  {
    icon: /* @__PURE__ */ (0, import_jsx_runtime235.jsx)(NamedIcon, { name: "calendar", className: iconStyles }),
    title: "Basic interval",
    description: "This Job runs every 60 seconds, starting 60 seconds after it is first indexed.",
    codeLink: "https://github.com/triggerdotdev/examples/blob/main/scheduled/src/jobs/interval.ts"
  },
  {
    icon: /* @__PURE__ */ (0, import_jsx_runtime235.jsx)(NamedIcon, { name: "calendar", className: iconStyles }),
    title: "Cron scheduled interval",
    description: "A scheduled Job which runs at 2:30pm every Monday.",
    codeLink: "https://github.com/triggerdotdev/examples/blob/main/scheduled/src/jobs/cronScheduled.ts"
  },
  {
    icon: /* @__PURE__ */ (0, import_jsx_runtime235.jsx)(NamedIcon, { name: "openai", className: iconStyles }),
    title: "OpenAI text summarizer",
    description: "Summarizes a block of text, pulling out the most unique / helpful points using OpenAI.",
    codeLink: "https://github.com/triggerdotdev/examples/blob/main/openai-text-summarizer/src/jobs/textSummarizer.ts"
  },
  {
    icon: /* @__PURE__ */ (0, import_jsx_runtime235.jsx)(NamedIcon, { name: "openai", className: iconStyles }),
    title: "Tell me a joke using OpenAI",
    description: "Generates a random joke using OpenAI GPT 3.5.",
    codeLink: "https://github.com/triggerdotdev/examples/blob/main/openai/src/jobs/tellMeAJoke.ts"
  },
  {
    icon: /* @__PURE__ */ (0, import_jsx_runtime235.jsx)(NamedIcon, { name: "openai", className: iconStyles }),
    title: "Generate a random image using OpenAI",
    description: "Generates a random image of a hedgehog using OpenAI DALL-E.",
    codeLink: "https://github.com/triggerdotdev/examples/blob/main/openai/src/jobs/generateHedgehogImages.ts"
  },
  {
    icon: /* @__PURE__ */ (0, import_jsx_runtime235.jsx)(NamedIcon, { name: "resend", className: iconStyles }),
    title: "Send an email using Resend",
    description: "Send a basic email using Resend.",
    codeLink: "https://github.com/triggerdotdev/examples/blob/main/resend/src/jobs/resendBasicEmail.ts"
  },
  {
    icon: /* @__PURE__ */ (0, import_jsx_runtime235.jsx)(NamedIcon, { name: "github", className: iconStyles }),
    title: "GitHub issue reminder",
    description: "Sends a Slack message if a GitHub issue is left for 24h.",
    codeLink: "https://github.com/triggerdotdev/examples/blob/main/github-issue-reminder/jobs/githubIssue.ts"
  },
  {
    icon: /* @__PURE__ */ (0, import_jsx_runtime235.jsx)(NamedIcon, { name: "github", className: iconStyles }),
    title: "Github new star alert in Slack",
    description: "When a repo is starred, a message is sent to a Slack.",
    codeLink: "https://github.com/triggerdotdev/examples/blob/main/github/src/jobs/newStarToSlack.ts"
  },
  {
    icon: /* @__PURE__ */ (0, import_jsx_runtime235.jsx)(NamedIcon, { name: "github", className: iconStyles }),
    title: "Add a custom label to a GitHub issue",
    description: "When a new GitHub issue is opened it adds a \u201CBug\u201D label to it.",
    codeLink: "https://github.com/triggerdotdev/examples/blob/main/github/src/jobs/onIssueOpened.ts"
  },
  {
    icon: /* @__PURE__ */ (0, import_jsx_runtime235.jsx)(NamedIcon, { name: "github", className: iconStyles }),
    title: "GitHub new star alert",
    description: "When a repo is starred a message is logged with the new Stargazers count.",
    codeLink: "https://github.com/triggerdotdev/examples/blob/main/github/src/jobs/newStarAlert.ts"
  },
  {
    icon: /* @__PURE__ */ (0, import_jsx_runtime235.jsx)(NamedIcon, { name: "slack", className: iconStyles }),
    title: "Send a Slack message",
    description: "Sends a Slack message to a specific channel when an event is received.",
    codeLink: "https://github.com/triggerdotdev/examples/blob/main/slack/src/jobs/sendSlackMessage.ts"
  }
];

// app/routes/_app.orgs.$organizationSlug.projects.$projectParam.events/route.tsx
var route_exports84 = {};
__export(route_exports84, {
  default: () => Page57
});
var import_react175 = require("@remix-run/react"), import_jsx_runtime236 = require("react/jsx-runtime");
function Page57() {
  return /* @__PURE__ */ (0, import_jsx_runtime236.jsx)(import_react175.Outlet, {});
}

// app/routes/resources.environments.$environmentId.regenerate-api-key.tsx
var resources_environments_environmentId_regenerate_api_key_exports = {};
__export(resources_environments_environmentId_regenerate_api_key_exports, {
  action: () => action23
});
var import_zod139 = require("zod");
var ParamsSchema10 = import_zod139.z.object({
  environmentId: import_zod139.z.string()
});
async function action23({ request, params }) {
  if (request.method.toUpperCase() !== "POST")
    return { status: 405, body: "Method Not Allowed" };
  let userId = await requireUserId(request), { environmentId } = ParamsSchema10.parse(params);
  try {
    let updatedEnvironment = await regenerateApiKey({ userId, environmentId });
    return jsonWithSuccessMessage(
      { ok: !0 },
      request,
      `API keys regenerated for ${environmentTitle(updatedEnvironment)} environment`
    );
  } catch (error) {
    let message = error instanceof Error ? error.message : "Unknown error";
    return jsonWithErrorMessage(
      { ok: !1 },
      request,
      `API keys could not be regenerated: ${message}`
    );
  }
}

// app/routes/resources.environments.$environmentParam.endpoint.stream.ts
var resources_environments_environmentParam_endpoint_stream_exports = {};
__export(resources_environments_environmentParam_endpoint_stream_exports, {
  loader: () => loader66
});
var import_zod140 = require("zod");
async function loader66({ request, params }) {
  await requireUserId(request);
  let { environmentParam } = import_zod140.z.object({ environmentParam: import_zod140.z.string() }).parse(params), environment = await environmentForUpdates(environmentParam);
  if (!environment)
    return new Response("Not found", { status: 404 });
  let lastSignals = calculateChangeSignals(environment);
  return sse({
    request,
    run: async (send, stop) => {
      let result = await environmentForUpdates(environmentParam);
      if (!result)
        return stop();
      let newSignals = calculateChangeSignals(result);
      lastSignals.lastUpdatedAt !== result.updatedAt.getTime() ? send({ data: result.updatedAt.toISOString() }) : lastSignals.lastTotalEndpointUpdatedTime !== newSignals.lastTotalEndpointUpdatedTime ? send({ data: (/* @__PURE__ */ new Date()).toISOString() }) : lastSignals.lastTotalIndexingUpdatedTime !== newSignals.lastTotalIndexingUpdatedTime && send({ data: (/* @__PURE__ */ new Date()).toISOString() }), lastSignals = newSignals;
    }
  });
}
function environmentForUpdates(id) {
  return prisma.runtimeEnvironment.findUnique({
    where: {
      id
    },
    select: {
      updatedAt: !0,
      endpoints: {
        select: {
          updatedAt: !0,
          indexings: {
            select: {
              updatedAt: !0
            }
          }
        }
      }
    }
  });
}
function calculateChangeSignals(environment) {
  let lastUpdatedAt = environment.updatedAt.getTime(), lastTotalEndpointUpdatedTime = environment.endpoints.reduce(
    (prev, endpoint) => prev + endpoint.updatedAt.getTime(),
    0
  ), lastTotalIndexingUpdatedTime = environment.endpoints.reduce(
    (prev, endpoint) => prev + endpoint.indexings.reduce((prev2, indexing) => prev2 + indexing.updatedAt.getTime(), 0),
    0
  );
  return {
    lastUpdatedAt,
    lastTotalEndpointUpdatedTime,
    lastTotalIndexingUpdatedTime
  };
}

// app/routes/_app.orgs.$organizationSlug.projects.$projectParam.runs/route.tsx
var route_exports85 = {};
__export(route_exports85, {
  default: () => Page58,
  loader: () => loader67
});
var import_react176 = require("@remix-run/react"), import_server_runtime24 = require("@remix-run/server-runtime"), import_react177 = require("react");
var import_solid95 = require("@heroicons/react/20/solid"), import_jsx_runtime237 = require("react/jsx-runtime"), loader67 = async ({ request, params }) => {
  let userId = await requireUserId(request), { projectParam: projectParam2, organizationSlug } = ProjectParamSchema.parse(params), url = new URL(request.url), s = Object.fromEntries(url.searchParams.entries()), searchParams = RunListSearchSchema.parse(s), list3 = new RunListPresenter().call({
    userId,
    filterEnvironment: searchParams.environment,
    filterStatus: searchParams.status,
    projectSlug: projectParam2,
    organizationSlug,
    direction: searchParams.direction,
    cursor: searchParams.cursor,
    pageSize: 25,
    from: searchParams.from,
    to: searchParams.to
  });
  return (0, import_server_runtime24.defer)({
    list: list3
  });
};
function Page58() {
  let { list: list3 } = (0, import_react176.useLoaderData)(), isLoading2 = (0, import_react176.useNavigation)().state !== "idle", organization = useOrganization(), project = useProject(), user = useUser();
  return /* @__PURE__ */ (0, import_jsx_runtime237.jsxs)(PageContainer, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime237.jsxs)(NavBar, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime237.jsx)(PageTitle, { title: `${project.name} runs` }),
      /* @__PURE__ */ (0, import_jsx_runtime237.jsx)(PageAccessories, { children: /* @__PURE__ */ (0, import_jsx_runtime237.jsx)(
        LinkButton,
        {
          variant: "minimal/small",
          LeadingIcon: import_solid95.BookOpenIcon,
          to: docsPath("documentation/concepts/runs"),
          children: "Run documentation"
        }
      ) })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime237.jsx)(PageBody, { scrollable: !1, children: /* @__PURE__ */ (0, import_jsx_runtime237.jsxs)("div", { className: "h-full overflow-y-auto p-4 scrollbar-thin scrollbar-track-transparent scrollbar-thumb-charcoal-600", children: [
      /* @__PURE__ */ (0, import_jsx_runtime237.jsxs)("div", { className: "mb-2 flex items-center justify-between gap-x-2", children: [
        /* @__PURE__ */ (0, import_jsx_runtime237.jsx)(RunsFilters, {}),
        /* @__PURE__ */ (0, import_jsx_runtime237.jsx)(import_react177.Suspense, { fallback: /* @__PURE__ */ (0, import_jsx_runtime237.jsx)(import_jsx_runtime237.Fragment, {}), children: /* @__PURE__ */ (0, import_jsx_runtime237.jsx)(import_react176.Await, { resolve: list3, children: (data2) => /* @__PURE__ */ (0, import_jsx_runtime237.jsx)(ListPagination, { list: data2 }) }) })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime237.jsx)(
        import_react177.Suspense,
        {
          fallback: /* @__PURE__ */ (0, import_jsx_runtime237.jsx)(
            RunsTable,
            {
              total: 0,
              hasFilters: !1,
              showJob: !0,
              runs: [],
              isLoading: !0,
              runsParentPath: projectPath(organization, project),
              currentUser: user
            }
          ),
          children: /* @__PURE__ */ (0, import_jsx_runtime237.jsx)(import_react176.Await, { resolve: list3, children: (data2) => {
            let runs = data2.runs.map((run) => ({
              ...run,
              startedAt: run.startedAt ? new Date(run.startedAt) : null,
              completedAt: run.completedAt ? new Date(run.completedAt) : null,
              createdAt: new Date(run.createdAt)
            }));
            return /* @__PURE__ */ (0, import_jsx_runtime237.jsxs)(import_jsx_runtime237.Fragment, { children: [
              /* @__PURE__ */ (0, import_jsx_runtime237.jsx)(
                RunsTable,
                {
                  total: data2.runs.length,
                  hasFilters: !1,
                  showJob: !0,
                  runs,
                  isLoading: isLoading2,
                  runsParentPath: projectPath(organization, project),
                  currentUser: user
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime237.jsx)(ListPagination, { list: data2, className: "mt-2 justify-end" })
            ] });
          } })
        }
      )
    ] }) })
  ] });
}

// app/routes/_app.orgs.$organizationSlug.integrations_.$clientParam/route.tsx
var route_exports86 = {};
__export(route_exports86, {
  default: () => Integrations3,
  loader: () => loader68
});
var import_react178 = require("@remix-run/react"), import_remix_typedjson64 = require("remix-typedjson");

// app/presenters/IntegrationClientPresenter.server.ts
var IntegrationClientPresenter = class {
  #prismaClient;
  constructor(prismaClient = prisma) {
    this.#prismaClient = prismaClient;
  }
  async call({
    userId,
    organizationSlug,
    clientSlug
  }) {
    let integration = await this.#prismaClient.integration.findFirst({
      select: {
        id: !0,
        title: !0,
        slug: !0,
        authMethod: {
          select: {
            key: !0,
            type: !0,
            name: !0,
            help: !0
          }
        },
        authSource: !0,
        definition: {
          select: {
            id: !0,
            name: !0,
            packageName: !0,
            icon: !0
          }
        },
        connectionType: !0,
        customClientReference: {
          select: {
            key: !0
          }
        },
        createdAt: !0,
        _count: {
          select: {
            jobIntegrations: {
              where: {
                job: {
                  organization: {
                    slug: organizationSlug
                  },
                  internal: !1,
                  deletedAt: null
                }
              }
            }
          }
        }
      },
      where: {
        organization: {
          slug: organizationSlug,
          members: {
            some: {
              userId
            }
          }
        },
        slug: clientSlug
      }
    });
    if (!integration)
      return;
    let secretStore = getSecretStore(env2.SECRET_STORE, {
      prismaClient: this.#prismaClient
    }), clientId;
    integration.customClientReference && (clientId = (await secretStore.getSecret(
      OAuthClientSchema,
      integration.customClientReference.key
    ))?.id);
    let help2 = integration.authMethod?.help ? HelpSchema.parse(integration.authMethod?.help) : void 0;
    return {
      id: integration.id,
      title: integration.title ?? integration.slug,
      slug: integration.slug,
      integrationIdentifier: integration.definition.id,
      jobCount: integration._count.jobIntegrations,
      createdAt: integration.createdAt,
      customClientId: clientId,
      type: integration.connectionType,
      integration: {
        identifier: integration.definition.id,
        name: integration.definition.name,
        packageName: integration.definition.packageName,
        icon: integration.definition.icon
      },
      authMethod: {
        type: integration.authMethod?.type ?? (integration.authSource === "RESOLVER" ? "resolver" : "local"),
        name: integration.authMethod?.name ?? (integration.authSource === "RESOLVER" ? "Auth Resolver" : "Local Auth")
      },
      help: help2
    };
  }
};

// app/routes/_app.orgs.$organizationSlug.integrations_.$clientParam/route.tsx
var import_jsx_runtime238 = require("react/jsx-runtime"), loader68 = async ({ request, params }) => {
  let userId = await requireUserId(request), { organizationSlug, clientParam: clientParam2 } = IntegrationClientParamSchema.parse(params), client3 = await new IntegrationClientPresenter().call({
    userId,
    organizationSlug,
    clientSlug: clientParam2
  });
  if (!client3)
    throw new Response("Not found", { status: 404 });
  return (0, import_remix_typedjson64.typedjson)({ client: client3 });
};
function Integrations3() {
  let { client: client3 } = (0, import_remix_typedjson64.useTypedLoaderData)(), organization = useOrganization(), tabs = [
    {
      label: "Jobs",
      to: integrationClientPath(organization, client3)
    }
  ];
  return client3.authMethod.type !== "local" && (tabs.push({
    label: "Connections",
    to: integrationClientConnectionsPath(organization, client3)
  }), tabs.push({
    label: "Scopes",
    to: integrationClientScopesPath(organization, client3)
  })), /* @__PURE__ */ (0, import_jsx_runtime238.jsxs)(PageContainer, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime238.jsx)(NavBar, { children: /* @__PURE__ */ (0, import_jsx_runtime238.jsx)(
      PageTitle,
      {
        title: client3.title,
        backButton: {
          to: organizationIntegrationsPath(organization),
          text: "Integrations"
        }
      }
    ) }),
    /* @__PURE__ */ (0, import_jsx_runtime238.jsx)(PageBody, { children: /* @__PURE__ */ (0, import_jsx_runtime238.jsxs)("div", { className: "grid grid-rows-[auto_1fr]", children: [
      /* @__PURE__ */ (0, import_jsx_runtime238.jsxs)("div", { children: [
        /* @__PURE__ */ (0, import_jsx_runtime238.jsx)(PageInfoRow, { children: /* @__PURE__ */ (0, import_jsx_runtime238.jsxs)(PageInfoGroup, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime238.jsx)(
            PageInfoProperty,
            {
              label: "ID",
              value: /* @__PURE__ */ (0, import_jsx_runtime238.jsx)(ClipboardField, { value: client3.slug, variant: "tertiary/small" })
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime238.jsx)(
            PageInfoProperty,
            {
              icon: client3.integration.icon ?? client3.integration.identifier,
              label: "API",
              value: client3.integration.name
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime238.jsx)(PageInfoProperty, { label: "Method", value: client3.authMethod.name }),
          /* @__PURE__ */ (0, import_jsx_runtime238.jsx)(PageInfoProperty, { label: "Type", value: connectionType(client3.type) }),
          /* @__PURE__ */ (0, import_jsx_runtime238.jsx)(PageInfoProperty, { icon: "job", label: "Jobs", value: client3.jobCount }),
          /* @__PURE__ */ (0, import_jsx_runtime238.jsx)(
            PageInfoProperty,
            {
              icon: "key",
              label: "Client id",
              value: client3.customClientId ? client3.customClientId : "Auto"
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime238.jsx)(
            PageInfoProperty,
            {
              icon: "calendar",
              label: "Added",
              value: /* @__PURE__ */ (0, import_jsx_runtime238.jsx)(DateTime, { date: client3.createdAt })
            }
          )
        ] }) }),
        /* @__PURE__ */ (0, import_jsx_runtime238.jsx)(PageTabs, { layoutId: "integrations", tabs })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime238.jsx)(import_react178.Outlet, {})
    ] }) })
  ] });
}

// app/routes/_app.orgs.$organizationSlug.projects.v3.$projectParam/route.tsx
var route_exports87 = {};
__export(route_exports87, {
  ErrorBoundary: () => ErrorBoundary3,
  default: () => Project,
  handle: () => handle,
  loader: () => loader69
});
var import_react179 = require("@remix-run/react"), import_remix_typedjson65 = require("remix-typedjson");
var import_jsx_runtime239 = require("react/jsx-runtime"), loader69 = async ({ params }) => {
  let { organizationSlug, projectParam: projectParam2 } = ProjectParamSchema.parse(params), project = await prisma.project.findUnique({
    select: { version: !0 },
    where: { slug: projectParam2 }
  });
  if (!project)
    throw new Response("Project not found", { status: 404, statusText: "Project not found" });
  return project.version === "V2" ? (0, import_remix_typedjson65.redirect)(projectPath({ slug: organizationSlug }, { slug: projectParam2 })) : null;
}, handle = {
  scripts: (match) => [
    {
      src: "https://cdn.jsdelivr.net/npm/canvas-confetti@1.5.1/dist/confetti.browser.min.js",
      crossOrigin: "anonymous"
    }
  ]
};
function Project() {
  return /* @__PURE__ */ (0, import_jsx_runtime239.jsx)(import_jsx_runtime239.Fragment, { children: /* @__PURE__ */ (0, import_jsx_runtime239.jsx)(import_react179.Outlet, {}) });
}
function ErrorBoundary3() {
  let org = useOrganization(), project = useProject();
  return /* @__PURE__ */ (0, import_jsx_runtime239.jsx)(RouteErrorDisplay, { button: { title: project.name, to: v3ProjectPath(org, project) } });
}

// app/routes/api.v1.$endpointSlug.schedules.$id.registrations.$key.ts
var api_v1_endpointSlug_schedules_id_registrations_key_exports = {};
__export(api_v1_endpointSlug_schedules_id_registrations_key_exports, {
  action: () => action24
});
var import_server_runtime25 = require("@remix-run/server-runtime"), import_zod141 = require("zod");

// app/services/schedules/unregisterSchedule.server.ts
var UnregisterScheduleService = class {
  #prismaClient;
  constructor(prismaClient = prisma) {
    this.#prismaClient = prismaClient;
  }
  async call({
    environment,
    endpointSlug,
    id,
    key
  }) {
    let endpoint = await this.#prismaClient.endpoint.findUniqueOrThrow({
      where: {
        environmentId_slug: {
          environmentId: environment.id,
          slug: endpointSlug
        }
      }
    }), dynamicTrigger = await this.#prismaClient.dynamicTrigger.findUniqueOrThrow({
      where: {
        endpointId_slug_type: {
          endpointId: endpoint.id,
          slug: id,
          type: "SCHEDULE"
        }
      }
    });
    await this.#prismaClient.scheduleSource.update({
      where: {
        key_environmentId: {
          key,
          environmentId: environment.id
        }
      },
      data: {
        active: !1
      }
    });
  }
};

// app/routes/api.v1.$endpointSlug.schedules.$id.registrations.$key.ts
var ParamsSchema11 = import_zod141.z.object({
  endpointSlug: import_zod141.z.string(),
  id: import_zod141.z.string(),
  key: import_zod141.z.string()
});
async function action24({ request, params }) {
  if (logger.info("Unregistering schedule", { url: request.url }), request.method.toUpperCase() !== "DELETE")
    return { status: 405, body: "Method Not Allowed" };
  let parsedParams = ParamsSchema11.safeParse(params);
  if (!parsedParams.success)
    return logger.info("Invalid params", { params }), (0, import_server_runtime25.json)({ error: "Invalid params" }, { status: 400 });
  let authenticationResult = await authenticateApiRequest(request);
  if (!authenticationResult)
    return logger.info("Invalid or missing api key", { url: request.url }), (0, import_server_runtime25.json)({ error: "Invalid or Missing API key" }, { status: 401 });
  let authenticatedEnv = authenticationResult.environment, service = new UnregisterScheduleService();
  try {
    return await service.call({
      environment: authenticatedEnv,
      endpointSlug: parsedParams.data.endpointSlug,
      id: parsedParams.data.id,
      key: parsedParams.data.key
    }), (0, import_server_runtime25.json)({ ok: !0 });
  } catch (error) {
    return error instanceof Error ? (logger.error("Error unregistering schedule", {
      url: request.url,
      error: error.message
    }), (0, import_server_runtime25.json)({ error: error.message }, { status: 400 })) : (0, import_server_runtime25.json)({ error: "Something went wrong" }, { status: 500 });
  }
}

// app/routes/api.v1.$endpointSlug.triggers.$id.registrations.$key.ts
var api_v1_endpointSlug_triggers_id_registrations_key_exports = {};
__export(api_v1_endpointSlug_triggers_id_registrations_key_exports, {
  action: () => action25
});
var import_server_runtime26 = require("@remix-run/server-runtime");
var import_zod143 = require("zod");

// app/services/triggers/registerTriggerSourceV1.server.ts
var import_zod142 = require("zod");
var RegisterTriggerSourceServiceV1 = class {
  #prismaClient;
  constructor(prismaClient = prisma) {
    this.#prismaClient = prismaClient;
  }
  async call({
    environment,
    payload,
    endpointSlug,
    id,
    key,
    accountId,
    registrationMetadata
  }) {
    let endpoint = await this.#prismaClient.endpoint.findUniqueOrThrow({
      where: {
        environmentId_slug: {
          environmentId: environment.id,
          slug: endpointSlug
        }
      }
    }), dynamicTrigger = await this.#prismaClient.dynamicTrigger.findUniqueOrThrow({
      where: {
        endpointId_slug_type: {
          endpointId: endpoint.id,
          slug: id,
          type: "EVENT"
        }
      }
    });
    return await $transaction(
      this.#prismaClient,
      async (tx) => {
        let triggerSource = await new RegisterSourceServiceV1(tx).call(
          endpoint.id,
          payload.source,
          dynamicTrigger.id,
          accountId,
          { id: key, metadata: registrationMetadata }
        );
        if (!triggerSource)
          return;
        let eventDispatcher = await tx.eventDispatcher.upsert({
          where: {
            dispatchableId_environmentId: {
              dispatchableId: triggerSource.id,
              environmentId: environment.id
            }
          },
          create: {
            dispatchableId: triggerSource.id,
            environmentId: environment.id,
            event: Array.isArray(payload.rule.event) ? payload.rule.event : [payload.rule.event],
            source: payload.rule.source,
            payloadFilter: payload.rule.payload,
            contextFilter: payload.rule.context,
            dispatchable: {
              type: "DYNAMIC_TRIGGER",
              id: dynamicTrigger.id
            }
          },
          update: {
            event: Array.isArray(payload.rule.event) ? payload.rule.event : [payload.rule.event],
            source: payload.rule.source,
            payloadFilter: payload.rule.payload,
            contextFilter: payload.rule.context,
            dispatchable: {
              type: "DYNAMIC_TRIGGER",
              id: dynamicTrigger.id
            }
          }
        }), registration = await tx.dynamicTriggerRegistration.upsert({
          where: {
            key_dynamicTriggerId: {
              key,
              dynamicTriggerId: dynamicTrigger.id
            }
          },
          create: {
            key,
            dynamicTriggerId: dynamicTrigger.id,
            sourceId: triggerSource.id,
            eventDispatcherId: eventDispatcher.id,
            metadata: registrationMetadata
          },
          update: {
            metadata: registrationMetadata
          }
        }), secretStore = getSecretStore(triggerSource.secretReference.provider, {
          prismaClient: tx
        }), { secret: secret2 } = await secretStore.getSecretOrThrow(
          import_zod142.z.object({
            secret: import_zod142.z.string()
          }),
          triggerSource.secretReference.key
        );
        return {
          id: registration.id,
          source: {
            key: triggerSource.key,
            active: triggerSource.active,
            params: triggerSource.params,
            secret: secret2,
            data: triggerSource.channelData,
            channel: {
              type: "HTTP",
              url: `${env2.APP_ORIGIN}/api/v1/sources/http/${triggerSource.id}`
            },
            clientId: triggerSource.integration.slug
          },
          events: triggerSource.options.map((e) => e.value),
          missingEvents: [],
          orphanedEvents: []
        };
      },
      { timeout: 15e3 }
    );
  }
};

// app/routes/api.v1.$endpointSlug.triggers.$id.registrations.$key.ts
var ParamsSchema12 = import_zod143.z.object({
  endpointSlug: import_zod143.z.string(),
  id: import_zod143.z.string(),
  key: import_zod143.z.string()
});
async function action25({ request, params }) {
  if (logger.info("Registering trigger", { url: request.url }), request.method.toUpperCase() !== "PUT")
    return { status: 405, body: "Method Not Allowed" };
  let parsedParams = ParamsSchema12.safeParse(params);
  if (!parsedParams.success)
    return logger.info("Invalid params", { params }), (0, import_server_runtime26.json)({ error: "Invalid params" }, { status: 400 });
  let authenticationResult = await authenticateApiRequest(request);
  if (!authenticationResult)
    return logger.info("Invalid or missing api key", { url: request.url }), (0, import_server_runtime26.json)({ error: "Invalid or Missing API key" }, { status: 401 });
  let authenticatedEnv = authenticationResult.environment, anyBody = await request.json(), body = RegisterTriggerBodySchemaV1.safeParse(anyBody);
  if (!body.success)
    return (0, import_server_runtime26.json)({ error: "Invalid request body" }, { status: 400 });
  let service = new RegisterTriggerSourceServiceV1();
  try {
    let registration = await service.call({
      environment: authenticatedEnv,
      payload: body.data,
      endpointSlug: parsedParams.data.endpointSlug,
      id: parsedParams.data.id,
      key: parsedParams.data.key
    });
    return registration ? (0, import_server_runtime26.json)(registration) : (0, import_server_runtime26.json)({ error: "Could not register trigger" }, { status: 500 });
  } catch (error) {
    return error instanceof Error ? (logger.error("Error registering trigger", {
      url: request.url,
      error: error.message
    }), (0, import_server_runtime26.json)({ error: error.message }, { status: 400 })) : (0, import_server_runtime26.json)({ error: "Something went wrong" }, { status: 500 });
  }
}

// app/routes/api.v2.$endpointSlug.triggers.$id.registrations.$key.ts
var api_v2_endpointSlug_triggers_id_registrations_key_exports = {};
__export(api_v2_endpointSlug_triggers_id_registrations_key_exports, {
  action: () => action26
});
var import_server_runtime27 = require("@remix-run/server-runtime");
var import_zod145 = require("zod");

// app/services/triggers/registerTriggerSourceV2.server.ts
var import_zod144 = require("zod");
var RegisterTriggerSourceServiceV2 = class {
  #prismaClient;
  constructor(prismaClient = prisma) {
    this.#prismaClient = prismaClient;
  }
  async call({
    environment,
    payload,
    endpointSlug,
    id,
    key,
    registrationMetadata
  }) {
    let endpoint = await this.#prismaClient.endpoint.findUniqueOrThrow({
      where: {
        environmentId_slug: {
          environmentId: environment.id,
          slug: endpointSlug
        }
      }
    }), dynamicTrigger = await this.#prismaClient.dynamicTrigger.findUniqueOrThrow({
      where: {
        endpointId_slug_type: {
          endpointId: endpoint.id,
          slug: id,
          type: "EVENT"
        }
      }
    });
    return await $transaction(
      this.#prismaClient,
      async (tx) => {
        let triggerSource = await new RegisterSourceServiceV2(tx).call(
          endpoint.id,
          payload.source,
          dynamicTrigger.id,
          payload.accountId,
          { id: key, metadata: registrationMetadata }
        );
        if (!triggerSource)
          return;
        let eventDispatcher = await tx.eventDispatcher.upsert({
          where: {
            dispatchableId_environmentId: {
              dispatchableId: triggerSource.id,
              environmentId: environment.id
            }
          },
          create: {
            dispatchableId: triggerSource.id,
            environmentId: environment.id,
            event: Array.isArray(payload.rule.event) ? payload.rule.event : [payload.rule.event],
            source: payload.rule.source,
            payloadFilter: payload.rule.payload,
            contextFilter: payload.rule.context,
            dispatchable: {
              type: "DYNAMIC_TRIGGER",
              id: dynamicTrigger.id
            }
          },
          update: {
            event: Array.isArray(payload.rule.event) ? payload.rule.event : [payload.rule.event],
            source: payload.rule.source,
            payloadFilter: payload.rule.payload,
            contextFilter: payload.rule.context,
            dispatchable: {
              type: "DYNAMIC_TRIGGER",
              id: dynamicTrigger.id
            }
          }
        }), registration = await tx.dynamicTriggerRegistration.upsert({
          where: {
            key_dynamicTriggerId: {
              key,
              dynamicTriggerId: dynamicTrigger.id
            }
          },
          create: {
            key,
            dynamicTriggerId: dynamicTrigger.id,
            sourceId: triggerSource.id,
            eventDispatcherId: eventDispatcher.id,
            metadata: registrationMetadata
          },
          update: {
            metadata: registrationMetadata
          }
        }), secretStore = getSecretStore(triggerSource.secretReference.provider, {
          prismaClient: tx
        }), { secret: secret2 } = await secretStore.getSecretOrThrow(
          import_zod144.z.object({
            secret: import_zod144.z.string()
          }),
          triggerSource.secretReference.key
        ), options2 = Object.entries(payload.source.options).flatMap(([name, values]) => ({ name, values })).reduce((acc, { name, values }) => (acc[name] = {
          desired: [...new Set(values)],
          missing: [],
          orphaned: []
        }, acc), {});
        return {
          id: registration.id,
          source: {
            key: triggerSource.key,
            active: triggerSource.active,
            params: triggerSource.params,
            secret: secret2,
            data: triggerSource.channelData,
            channel: {
              type: "HTTP",
              url: `${env2.APP_ORIGIN}/api/v1/sources/http/${triggerSource.id}`
            },
            clientId: triggerSource.integration.slug
          },
          options: options2
        };
      },
      { timeout: 15e3 }
    );
  }
};

// app/routes/api.v2.$endpointSlug.triggers.$id.registrations.$key.ts
var import_nanoid12 = require("nanoid"), ParamsSchema13 = import_zod145.z.object({
  endpointSlug: import_zod145.z.string(),
  id: import_zod145.z.string(),
  key: import_zod145.z.string()
}), HeadersSchema = import_zod145.z.object({
  "idempotency-key": import_zod145.z.string().optional()
});
async function action26({ request, params }) {
  if (logger.info("Registering trigger", { url: request.url }), request.method.toUpperCase() !== "PUT")
    return { status: 405, body: "Method Not Allowed" };
  let parsedParams = ParamsSchema13.safeParse(params);
  if (!parsedParams.success)
    return logger.info("Invalid params", { params }), (0, import_server_runtime27.json)({ error: "Invalid params" }, { status: 400 });
  let authenticationResult = await authenticateApiRequest(request);
  if (!authenticationResult)
    return logger.info("Invalid or missing api key", { url: request.url }), (0, import_server_runtime27.json)({ error: "Invalid or Missing API key" }, { status: 401 });
  let authenticatedEnv = authenticationResult.environment, anyBody = await request.json(), body = RegisterTriggerBodySchemaV2.safeParse(anyBody);
  if (!body.success)
    return (0, import_server_runtime27.json)({ error: "Invalid request body" }, { status: 400 });
  let service = new RegisterTriggerSourceServiceV2();
  try {
    let registration = await service.call({
      environment: authenticatedEnv,
      payload: body.data,
      endpointSlug: parsedParams.data.endpointSlug,
      id: parsedParams.data.id,
      key: parsedParams.data.key
    });
    if (!registration)
      return (0, import_server_runtime27.json)({ error: "Could not register trigger" }, { status: 500 });
    if (registration.source.active)
      return (0, import_server_runtime27.json)(registration);
    let payload = {
      ...registration,
      dynamicTriggerId: parsedParams.data.id
    }, headers = HeadersSchema.safeParse(Object.fromEntries(request.headers)), eventId = headers.success && headers.data["idempotency-key"] ? headers.data["idempotency-key"] : `${registration.id}:${(0, import_nanoid12.nanoid)()}`;
    return await new IngestSendEvent().call(
      authenticatedEnv,
      {
        id: eventId,
        name: REGISTER_SOURCE_EVENT_V2,
        source: "trigger.dev",
        payload
      }
      //todo accountId?
      // {accountId: body.data.accountId}
    ), (0, import_server_runtime27.json)(registration);
  } catch (error) {
    return error instanceof Error ? (logger.error("Error registering trigger", {
      url: request.url,
      error: error.message
    }), (0, import_server_runtime27.json)({ error: error.message }, { status: 400 })) : (0, import_server_runtime27.json)({ error: "Something went wrong" }, { status: 500 });
  }
}

// app/routes/projects.v3.$projectRef.deployments.$deploymentParam.ts
var projects_v3_projectRef_deployments_deploymentParam_exports = {};
__export(projects_v3_projectRef_deployments_deploymentParam_exports, {
  loader: () => loader70
});
var import_server_runtime28 = require("@remix-run/server-runtime"), import_zod146 = require("zod");
var ParamsSchema14 = import_zod146.z.object({
  projectRef: import_zod146.z.string(),
  deploymentParam: import_zod146.z.string()
});
async function loader70({ params, request }) {
  let userId = await requireUserId(request), validatedParams = ParamsSchema14.parse(params), project = await prisma.project.findFirst({
    where: {
      externalRef: validatedParams.projectRef,
      organization: {
        members: {
          some: {
            userId
          }
        }
      }
    },
    include: {
      organization: !0
    }
  });
  return project ? (0, import_server_runtime28.redirect)(
    `/orgs/${project.organization.slug}/projects/v3/${project.slug}/deployments/${validatedParams.deploymentParam}`
  ) : new Response("Not found", { status: 404 });
}

// app/routes/resources.$projectId.deployments.$deploymentId.logs.ts
var resources_projectId_deployments_deploymentId_logs_exports = {};
__export(resources_projectId_deployments_deploymentId_logs_exports, {
  loader: () => loader71
});
var import_zod147 = require("zod");
var ParamsSchema15 = import_zod147.z.object({
  projectId: import_zod147.z.string(),
  deploymentId: import_zod147.z.string()
});
async function loader71({ params, request }) {
  let userId = await requireUserId(request), { projectId, deploymentId } = ParamsSchema15.parse(params);
  await prisma.project.findFirstOrThrow({
    where: {
      id: projectId,
      organization: {
        members: {
          some: {
            userId
          }
        }
      }
    }
  });
  let deployment = await prisma.workerDeployment.findUniqueOrThrow({
    where: {
      id: deploymentId,
      projectId
    }
  }), externalBuildData = deployment.externalBuildData ? ExternalBuildData.safeParse(deployment.externalBuildData) : void 0;
  return !externalBuildData || externalBuildData.success === !1 ? redirectBackWithErrorMessage(request, "No build data found for this deployment.") : env2.DEPOT_ORG_ID ? new Response(null, {
    status: 302,
    headers: {
      Location: `https://depot.dev/orgs/${env2.DEPOT_ORG_ID}/projects/${externalBuildData.data.projectId}/builds/${externalBuildData.data.buildId}/logs`
    }
  }) : redirectBackWithErrorMessage(request, "No Depot organization ID found.");
}

// app/routes/_app.orgs.$organizationId.subscription.v3.canceled/route.tsx
var route_exports88 = {};
__export(route_exports88, {
  loader: () => loader72
});
var import_zod148 = require("zod");
var ParamsSchema16 = import_zod148.z.object({
  organizationId: import_zod148.z.string()
}), loader72 = async ({ request, params }) => {
  let { organizationId } = ParamsSchema16.parse(params), org = await prisma.organization.findUnique({
    select: {
      slug: !0
    },
    where: {
      id: organizationId
    }
  });
  if (!org)
    throw new Response(null, { status: 404 });
  return redirectWithErrorMessage(
    v3BillingPath({ slug: org.slug }),
    request,
    "You didn't complete your details on Stripe. Please try again."
  );
};

// app/routes/_app.orgs.$organizationId.subscription.v3.complete/route.tsx
var route_exports89 = {};
__export(route_exports89, {
  loader: () => loader73
});
var import_remix_typedjson66 = require("remix-typedjson"), import_zod149 = require("zod");
var ParamsSchema17 = import_zod149.z.object({
  organizationId: import_zod149.z.string()
}), loader73 = async ({ request, params }) => {
  let { organizationId } = ParamsSchema17.parse(params), org = await prisma.organization.findUnique({
    select: {
      slug: !0,
      _count: {
        select: {
          projects: !0
        }
      }
    },
    where: {
      id: organizationId
    }
  });
  if (!org)
    throw new Response(null, { status: 404 });
  return org._count.projects > 0 ? redirectWithSuccessMessage(
    v3BillingPath({ slug: org.slug }),
    request,
    "Your subscription has been successfully activated."
  ) : (0, import_remix_typedjson66.redirect)(
    newProjectPath({ slug: org.slug }, "Your subscription has been successfully activated.")
  );
};

// app/routes/_app.orgs.$organizationSlug.projects.$projectParam/route.tsx
var route_exports90 = {};
__export(route_exports90, {
  ErrorBoundary: () => ErrorBoundary4,
  default: () => Project2,
  handle: () => handle2,
  loader: () => loader74
});
var import_react180 = require("@remix-run/react"), import_remix_typedjson67 = require("remix-typedjson");
var import_jsx_runtime240 = require("react/jsx-runtime"), loader74 = async ({ params }) => {
  let { organizationSlug, projectParam: projectParam2 } = ProjectParamSchema.parse(params), project = await prisma.project.findUnique({
    select: { version: !0 },
    where: { slug: projectParam2 }
  });
  if (!project)
    throw new Response("Project not found", { status: 404, statusText: "Project not found" });
  return project.version === "V3" ? (0, import_remix_typedjson67.redirect)(v3ProjectPath({ slug: organizationSlug }, { slug: projectParam2 })) : null;
}, handle2 = {
  scripts: (match) => [
    {
      src: "https://cdn.jsdelivr.net/npm/canvas-confetti@1.5.1/dist/confetti.browser.min.js",
      crossOrigin: "anonymous"
    }
  ]
};
function Project2() {
  return /* @__PURE__ */ (0, import_jsx_runtime240.jsx)(import_jsx_runtime240.Fragment, { children: /* @__PURE__ */ (0, import_jsx_runtime240.jsx)(import_react180.Outlet, {}) });
}
function ErrorBoundary4() {
  let org = useOrganization(), project = useProject();
  return /* @__PURE__ */ (0, import_jsx_runtime240.jsx)(RouteErrorDisplay, { button: { title: project.name, to: projectPath(org, project) } });
}

// app/routes/api.v1.accounts.$accountId.connections.$clientSlug/route.ts
var route_exports91 = {};
__export(route_exports91, {
  action: () => action27
});
var import_server_runtime29 = require("@remix-run/server-runtime");
var import_zod150 = require("zod"), import_zod_error2 = require("zod-error");

// app/routes/api.v1.accounts.$accountId.connections.$clientSlug/CreateExternalConnectionService.server.ts
var CreateExternalConnectionService = class {
  #prismaClient;
  constructor(prismaClient = prisma) {
    this.#prismaClient = prismaClient;
  }
  async call(accountIdentifier, clientSlug, environment, payload) {
    let externalAccount = await this.#prismaClient.externalAccount.upsert({
      where: {
        environmentId_identifier: {
          environmentId: environment.id,
          identifier: accountIdentifier
        }
      },
      create: {
        environmentId: environment.id,
        organizationId: environment.organizationId,
        identifier: accountIdentifier
      },
      update: {}
    }), integration = await this.#prismaClient.integration.findUniqueOrThrow({
      where: {
        organizationId_slug: {
          organizationId: environment.organizationId,
          slug: clientSlug
        }
      }
    });
    return await integrationAuthRepository.createConnectionFromToken({
      externalAccount,
      integration,
      token: payload
    });
  }
};

// app/routes/api.v1.accounts.$accountId.connections.$clientSlug/route.ts
var ParamsSchema18 = import_zod150.z.object({
  accountId: import_zod150.z.string(),
  clientSlug: import_zod150.z.string()
});
async function action27({ request, params }) {
  if (request.method.toUpperCase() !== "POST")
    return { status: 405, body: "Method Not Allowed" };
  let parsedParams = ParamsSchema18.safeParse(params);
  if (!parsedParams.success)
    return (0, import_server_runtime29.json)({ message: (0, import_zod_error2.generateErrorMessage)(parsedParams.error.issues) }, { status: 422 });
  let authenticationResult = await authenticateApiRequest(request);
  if (!authenticationResult)
    return (0, import_server_runtime29.json)({ error: "Invalid or Missing API key" }, { status: 401 });
  let authenticatedEnv = authenticationResult.environment, anyBody = await request.json(), body = CreateExternalConnectionBodySchema.safeParse(anyBody);
  if (!body.success)
    return (0, import_server_runtime29.json)({ message: (0, import_zod_error2.generateErrorMessage)(body.error.issues) }, { status: 422 });
  try {
    let connection = await new CreateExternalConnectionService().call(
      parsedParams.data.accountId,
      parsedParams.data.clientSlug,
      authenticatedEnv,
      body.data
    );
    return (0, import_server_runtime29.json)(connection);
  } catch (error) {
    let parsedError = ErrorWithStackSchema.safeParse(error);
    return parsedError.success ? (0, import_server_runtime29.json)({ message: parsedError.data.message }, { status: 500 }) : (0, import_server_runtime29.json)({ message: "Unknown error" }, { status: 500 });
  }
}

// app/routes/resources.$organizationSlug.subscription.v3.portal.ts
var resources_organizationSlug_subscription_v3_portal_exports = {};
__export(resources_organizationSlug_subscription_v3_portal_exports, {
  loader: () => loader75
});
var import_remix_typedjson68 = require("remix-typedjson");
async function loader75({ request, params }) {
  let userId = await requireUserId(request), { organizationSlug } = OrganizationParamsSchema.parse(params), org = await prisma.organization.findUnique({
    select: {
      id: !0
    },
    where: {
      slug: organizationSlug,
      members: {
        some: {
          userId
        }
      }
    }
  });
  if (!org)
    return redirectWithErrorMessage(
      usagePath({ slug: organizationSlug }),
      request,
      "Something went wrong. Please try again later."
    );
  let result = await customerPortalUrl(org.id, organizationSlug);
  return !result || !result.success || !result.customerPortalUrl ? redirectWithErrorMessage(
    usagePath({ slug: organizationSlug }),
    request,
    "Something went wrong. Please try again later."
  ) : (0, import_remix_typedjson68.redirect)(result.customerPortalUrl);
}

// app/routes/_app.orgs.$organizationId.subscription.v3.failed/route.tsx
var route_exports92 = {};
__export(route_exports92, {
  loader: () => loader76
});
var import_zod151 = require("zod");
var ParamsSchema19 = import_zod151.z.object({
  organizationId: import_zod151.z.string()
}), loader76 = async ({ request, params }) => {
  let { organizationId } = ParamsSchema19.parse(params), org = await prisma.organization.findUnique({
    select: {
      slug: !0
    },
    where: {
      id: organizationId
    }
  });
  if (!org)
    throw new Response(null, { status: 404 });
  let url = new URL(request.url), reason = new URLSearchParams(url.search).get("reason"), errorMessage = reason ? decodeURIComponent(reason) : "Subscribing failed to complete";
  return redirectWithErrorMessage(v3BillingPath({ slug: org.slug }), request, errorMessage);
};

// app/routes/api.v1.$endpointSlug.schedules.$id.registrations.ts
var api_v1_endpointSlug_schedules_id_registrations_exports = {};
__export(api_v1_endpointSlug_schedules_id_registrations_exports, {
  action: () => action28
});
var import_server_runtime30 = require("@remix-run/server-runtime");
var import_zod152 = require("zod");

// app/services/schedules/registerSchedule.server.ts
var RegisterScheduleService = class {
  #prismaClient;
  constructor(prismaClient = prisma) {
    this.#prismaClient = prismaClient;
  }
  async call({
    environment,
    payload,
    endpointSlug,
    id
  }) {
    let endpoint = await this.#prismaClient.endpoint.findUniqueOrThrow({
      where: {
        environmentId_slug: {
          environmentId: environment.id,
          slug: endpointSlug
        }
      }
    }), dynamicTrigger = await this.#prismaClient.dynamicTrigger.findUniqueOrThrow({
      where: {
        endpointId_slug_type: {
          endpointId: endpoint.id,
          slug: id,
          type: "SCHEDULE"
        }
      }
    }), eventDispatcher = await this.#prismaClient.eventDispatcher.findUniqueOrThrow({
      where: {
        dispatchableId_environmentId: {
          dispatchableId: dynamicTrigger.id,
          environmentId: environment.id
        }
      }
    });
    return await $transaction(this.#prismaClient, async (tx) => await new RegisterScheduleSourceService(tx).call({
      key: payload.id,
      dispatcher: eventDispatcher,
      schedule: payload,
      accountId: payload.accountId,
      dynamicTrigger,
      organizationId: environment.organizationId
    }));
  }
};

// app/routes/api.v1.$endpointSlug.schedules.$id.registrations.ts
var ParamsSchema20 = import_zod152.z.object({
  endpointSlug: import_zod152.z.string(),
  id: import_zod152.z.string()
});
async function action28({ request, params }) {
  if (logger.info("Initializing schedule", { url: request.url }), request.method.toUpperCase() !== "POST")
    return { status: 405, body: "Method Not Allowed" };
  let parsedParams = ParamsSchema20.safeParse(params);
  if (!parsedParams.success)
    return logger.info("Invalid params", { params }), (0, import_server_runtime30.json)({ error: "Invalid params" }, { status: 400 });
  let authenticationResult = await authenticateApiRequest(request);
  if (!authenticationResult)
    return logger.info("Invalid or missing api key", { url: request.url }), (0, import_server_runtime30.json)({ error: "Invalid or Missing API key" }, { status: 401 });
  let authenticatedEnv = authenticationResult.environment, anyBody = await request.json(), body = RegisterScheduleBodySchema.safeParse(anyBody);
  if (!body.success)
    return (0, import_server_runtime30.json)({ error: "Invalid request body" }, { status: 400 });
  let service = new RegisterScheduleService();
  try {
    let registration = await service.call({
      environment: authenticatedEnv,
      payload: body.data,
      endpointSlug: parsedParams.data.endpointSlug,
      id: parsedParams.data.id
    });
    return registration ? (0, import_server_runtime30.json)(
      RegisterScheduleResponseBodySchema.parse({
        id: registration.key,
        schedule: registration.schedule,
        metadata: registration.metadata,
        active: registration.active
      })
    ) : (0, import_server_runtime30.json)({ error: "Something went wrong" }, { status: 500 });
  } catch (error) {
    return error instanceof Error ? (logger.error("Error initializing schedule", {
      url: request.url,
      error: error.message
    }), (0, import_server_runtime30.json)({ error: error.message }, { status: 400 })) : (0, import_server_runtime30.json)({ error: "Something went wrong" }, { status: 500 });
  }
}

// app/routes/api.v1.projects.$projectRef.envvars.$slug.import.ts
var api_v1_projects_projectRef_envvars_slug_import_exports = {};
__export(api_v1_projects_projectRef_envvars_slug_import_exports, {
  action: () => action29
});
var import_server_runtime31 = require("@remix-run/server-runtime");
var import_dotenv2 = require("dotenv"), import_zod153 = require("zod");
var ParamsSchema21 = import_zod153.z.object({
  projectRef: import_zod153.z.string(),
  slug: import_zod153.z.string()
});
async function action29({ params, request }) {
  let parsedParams = ParamsSchema21.safeParse(params);
  if (!parsedParams.success)
    return (0, import_server_runtime31.json)({ error: "Invalid params" }, { status: 400 });
  let authenticationResult = await authenticateProjectApiKeyOrPersonalAccessToken(request);
  if (!authenticationResult)
    return (0, import_server_runtime31.json)({ error: "Invalid or Missing API key" }, { status: 401 });
  let environment = await authenticatedEnvironmentForAuthentication(
    authenticationResult,
    parsedParams.data.projectRef,
    parsedParams.data.slug
  ), repository = new EnvironmentVariablesRepository(), body = await parseImportBody(request), result = await repository.create(environment.project.id, {
    override: typeof body.override == "boolean" ? body.override : !1,
    environmentIds: [environment.id],
    variables: Object.entries(body.variables).map(([key, value]) => ({
      key,
      value
    }))
  });
  return result.success ? (0, import_server_runtime31.json)({ success: !0 }) : (0, import_server_runtime31.json)({ error: result.error, variableErrors: result.variableErrors }, { status: 400 });
}
async function parseImportBody(request) {
  if ((request.headers.get("content-type") ?? "application/json").includes("multipart/form-data")) {
    let formData = await request.formData(), file = formData.get("variables"), override = formData.get("override") === "true";
    if (file instanceof File) {
      let buffer = await file.arrayBuffer();
      return { variables: (0, import_dotenv2.parse)(Buffer.from(buffer)), override };
    } else
      throw (0, import_server_runtime31.json)({ error: "Invalid file" }, { status: 400 });
  } else {
    let rawBody = await request.json(), body = ImportEnvironmentVariablesRequestBody.safeParse(rawBody);
    if (!body.success)
      throw (0, import_server_runtime31.json)({ error: "Invalid body" }, { status: 400 });
    return body.data;
  }
}

// app/routes/_app.orgs.$organizationId.subscription.canceled/route.tsx
var route_exports93 = {};
__export(route_exports93, {
  loader: () => loader77
});
var import_zod154 = require("zod");
var ParamsSchema22 = import_zod154.z.object({
  organizationId: import_zod154.z.string()
}), loader77 = async ({ request, params }) => {
  let { organizationId } = ParamsSchema22.parse(params), org = await prisma.organization.findUnique({
    select: {
      slug: !0
    },
    where: {
      id: organizationId
    }
  });
  if (!org)
    throw new Response(null, { status: 404 });
  return redirectWithErrorMessage(
    `${plansPath({ slug: org.slug })}`,
    request,
    "You didn't complete your details on Stripe. Please try again."
  );
};

// app/routes/_app.orgs.$organizationId.subscription.complete/route.tsx
var route_exports94 = {};
__export(route_exports94, {
  loader: () => loader78
});
var import_zod155 = require("zod");
var ParamsSchema23 = import_zod155.z.object({
  organizationId: import_zod155.z.string()
}), loader78 = async ({ request, params }) => {
  let { organizationId } = ParamsSchema23.parse(params), org = await prisma.organization.findUnique({
    select: {
      slug: !0
    },
    where: {
      id: organizationId
    }
  });
  if (!org)
    throw new Response(null, { status: 404 });
  return redirectWithSuccessMessage(
    `${subscribedPath({ slug: org.slug })}`,
    request,
    "You are now subscribed to Trigger.dev"
  );
};

// app/routes/api.v1.$endpointSlug.triggers.$id.registrations.ts
var api_v1_endpointSlug_triggers_id_registrations_exports = {};
__export(api_v1_endpointSlug_triggers_id_registrations_exports, {
  action: () => action30
});
var import_server_runtime32 = require("@remix-run/server-runtime");
var import_zod156 = require("zod");

// app/services/triggers/initializeTrigger.server.ts
var InitializeTriggerService = class {
  #prismaClient;
  #registerTriggerSource = new RegisterTriggerSourceServiceV1();
  #sendEvent = new IngestSendEvent();
  constructor(prismaClient = prisma) {
    this.#prismaClient = prismaClient;
  }
  async call({
    environment,
    payload,
    endpointSlug,
    id
  }) {
    let endpoint = await this.#prismaClient.endpoint.findUniqueOrThrow({
      where: {
        environmentId_slug: {
          environmentId: environment.id,
          slug: endpointSlug
        }
      }
    });
    if (!endpoint.url)
      throw new Error("This environment's endpoint doesn't have a URL set");
    let dynamicTrigger = await this.#prismaClient.dynamicTrigger.findUniqueOrThrow({
      where: {
        endpointId_slug_type: {
          endpointId: endpoint.id,
          slug: id,
          type: "EVENT"
        }
      }
    }), registerMetadata = await new EndpointApi(environment.apiKey, endpoint.url).initializeTrigger(dynamicTrigger.slug, payload.params);
    if (!registerMetadata)
      throw new Error("Could not initialize trigger");
    let registration = await this.#registerTriggerSource.call({
      environment,
      payload: registerMetadata,
      id: dynamicTrigger.slug,
      endpointSlug,
      key: payload.id,
      accountId: payload.accountId,
      registrationMetadata: payload.metadata
    });
    if (registration)
      return await this.#sendEvent.call(
        environment,
        {
          id: registration.id,
          name: REGISTER_SOURCE_EVENT_V1,
          source: "trigger.dev",
          payload: {
            ...registration,
            dynamicTriggerId: dynamicTrigger.slug
          }
        },
        { accountId: payload.accountId }
      ), registration;
  }
};

// app/routes/api.v1.$endpointSlug.triggers.$id.registrations.ts
var ParamsSchema24 = import_zod156.z.object({
  endpointSlug: import_zod156.z.string(),
  id: import_zod156.z.string()
});
async function action30({ request, params }) {
  if (logger.info("Initializing trigger", { url: request.url }), request.method.toUpperCase() !== "POST")
    return { status: 405, body: "Method Not Allowed" };
  let parsedParams = ParamsSchema24.safeParse(params);
  if (!parsedParams.success)
    return logger.info("Invalid params", { params }), (0, import_server_runtime32.json)({ error: "Invalid params" }, { status: 400 });
  let authenticationResult = await authenticateApiRequest(request);
  if (!authenticationResult)
    return logger.info("Invalid or missing api key", { url: request.url }), (0, import_server_runtime32.json)({ error: "Invalid or Missing API key" }, { status: 401 });
  let authenticatedEnv = authenticationResult.environment, anyBody = await request.json(), body = InitializeTriggerBodySchema.safeParse(anyBody);
  if (!body.success)
    return (0, import_server_runtime32.json)({ error: "Invalid request body" }, { status: 400 });
  let service = new InitializeTriggerService();
  try {
    let registration = await service.call({
      environment: authenticatedEnv,
      payload: body.data,
      endpointSlug: parsedParams.data.endpointSlug,
      id: parsedParams.data.id
    });
    return (0, import_server_runtime32.json)(registration);
  } catch (error) {
    return error instanceof Error ? (logger.error("Error initializing trigger", {
      url: request.url,
      error: error.message
    }), (0, import_server_runtime32.json)({ error: error.message }, { status: 400 })) : (0, import_server_runtime32.json)({ error: "Something went wrong" }, { status: 500 });
  }
}

// app/routes/api.v1.deployments.$deploymentId.start-indexing.ts
var api_v1_deployments_deploymentId_start_indexing_exports = {};
__export(api_v1_deployments_deploymentId_start_indexing_exports, {
  action: () => action31
});
var import_server_runtime33 = require("@remix-run/server-runtime");
var import_zod157 = require("zod");

// app/v3/services/startDeploymentIndexing.server.ts
var StartDeploymentIndexing = class extends BaseService {
  async call(environment, deploymentId, body) {
    let deployment = await this._prisma.workerDeployment.update({
      where: {
        friendlyId: deploymentId
      },
      data: {
        imageReference: registryProxy && body.selfHosted !== !0 ? registryProxy.rewriteImageReference(body.imageReference) : body.imageReference,
        status: "DEPLOYING"
      }
    });
    return await IndexDeploymentService.enqueue(deployment.id), deployment;
  }
};

// app/routes/api.v1.deployments.$deploymentId.start-indexing.ts
var ParamsSchema25 = import_zod157.z.object({
  deploymentId: import_zod157.z.string()
});
async function action31({ request, params }) {
  if (request.method.toUpperCase() !== "POST")
    return { status: 405, body: "Method Not Allowed" };
  let parsedParams = ParamsSchema25.safeParse(params);
  if (!parsedParams.success)
    return (0, import_server_runtime33.json)({ error: "Invalid params" }, { status: 400 });
  let authenticationResult = await authenticateApiRequest(request);
  if (!authenticationResult)
    return logger.info("Invalid or missing api key", { url: request.url }), (0, import_server_runtime33.json)({ error: "Invalid or Missing API key" }, { status: 401 });
  let authenticatedEnv = authenticationResult.environment, { deploymentId } = parsedParams.data, rawBody = await request.json(), body = StartDeploymentIndexingRequestBody.safeParse(rawBody);
  if (!body.success)
    return (0, import_server_runtime33.json)({ error: "Invalid body", issues: body.error.issues }, { status: 400 });
  let deployment = await new StartDeploymentIndexing().call(authenticatedEnv, deploymentId, body.data);
  return (0, import_server_runtime33.json)(
    {
      id: deployment.friendlyId,
      contentHash: deployment.contentHash
    },
    { status: 200 }
  );
}

// app/routes/api.v1.projects.$projectRef.envvars.$slug.$name.ts
var api_v1_projects_projectRef_envvars_slug_name_exports = {};
__export(api_v1_projects_projectRef_envvars_slug_name_exports, {
  action: () => action32,
  loader: () => loader79
});
var import_server_runtime34 = require("@remix-run/server-runtime");
var import_zod158 = require("zod");
var ParamsSchema26 = import_zod158.z.object({
  projectRef: import_zod158.z.string(),
  slug: import_zod158.z.string(),
  name: import_zod158.z.string()
});
async function action32({ params, request }) {
  let parsedParams = ParamsSchema26.safeParse(params);
  if (!parsedParams.success)
    return (0, import_server_runtime34.json)({ error: "Invalid params" }, { status: 400 });
  let authenticationResult = await authenticateProjectApiKeyOrPersonalAccessToken(request);
  if (!authenticationResult)
    return (0, import_server_runtime34.json)({ error: "Invalid or Missing API key" }, { status: 401 });
  let environment = await authenticatedEnvironmentForAuthentication(
    authenticationResult,
    parsedParams.data.projectRef,
    parsedParams.data.slug
  ), variable = await prisma.environmentVariable.findFirst({
    where: {
      key: parsedParams.data.name,
      projectId: environment.project.id
    }
  });
  if (!variable)
    return (0, import_server_runtime34.json)({ error: "Environment variable not found" }, { status: 404 });
  let repository = new EnvironmentVariablesRepository();
  switch (request.method.toUpperCase()) {
    case "DELETE": {
      let result = await repository.deleteValue(environment.project.id, {
        id: variable.id,
        environmentId: environment.id
      });
      return result.success ? (0, import_server_runtime34.json)({ success: !0 }) : (0, import_server_runtime34.json)({ error: result.error }, { status: 400 });
    }
    case "PUT":
    case "POST": {
      let jsonBody = await request.json(), body = UpdateEnvironmentVariableRequestBody.safeParse(jsonBody);
      if (!body.success)
        return (0, import_server_runtime34.json)({ error: "Invalid request body", issues: body.error.issues }, { status: 400 });
      let result = await repository.edit(environment.project.id, {
        values: [
          {
            value: body.data.value,
            environmentId: environment.id
          }
        ],
        id: variable.id,
        keepEmptyValues: !0
      });
      return result.success ? (0, import_server_runtime34.json)({ success: !0 }) : (0, import_server_runtime34.json)({ error: result.error }, { status: 400 });
    }
  }
}
async function loader79({ params, request }) {
  let parsedParams = ParamsSchema26.safeParse(params);
  if (!parsedParams.success)
    return (0, import_server_runtime34.json)({ error: "Invalid params" }, { status: 400 });
  let authenticationResult = await authenticateProjectApiKeyOrPersonalAccessToken(request);
  if (!authenticationResult)
    return (0, import_server_runtime34.json)({ error: "Invalid or Missing API key" }, { status: 401 });
  let environment = await authenticatedEnvironmentForAuthentication(
    authenticationResult,
    parsedParams.data.projectRef,
    parsedParams.data.slug
  );
  if (!await prisma.environmentVariable.findFirst({
    where: {
      key: parsedParams.data.name,
      projectId: environment.project.id
    }
  }))
    return (0, import_server_runtime34.json)({ error: "Environment variable not found" }, { status: 404 });
  let environmentVariable = (await new EnvironmentVariablesRepository().getEnvironment(environment.project.id, environment.id)).find((v) => v.key === parsedParams.data.name);
  return environmentVariable ? (0, import_server_runtime34.json)({
    value: environmentVariable.value
  }) : (0, import_server_runtime34.json)({ error: "Environment variable not found" }, { status: 404 });
}

// app/routes/resources.$organizationSlug.subscription.portal.ts
var resources_organizationSlug_subscription_portal_exports = {};
__export(resources_organizationSlug_subscription_portal_exports, {
  loader: () => loader80
});
var import_remix_typedjson69 = require("remix-typedjson");

// app/services/billing.v2.server.ts
var import_v25 = require("@trigger.dev/platform/v2");
var BillingService = class {
  #billingClient;
  #prismaClient;
  #replica;
  constructor(isManagedCloud2, prismaClient = prisma, replica = $replica) {
    this.#prismaClient = prismaClient, this.#replica = replica, isManagedCloud2 && process.env.BILLING_API_URL && process.env.BILLING_API_KEY ? (this.#billingClient = new import_v25.BillingClient({
      url: process.env.BILLING_API_URL,
      apiKey: process.env.BILLING_API_KEY
    }), console.log(`Billing client initialized: ${process.env.BILLING_API_URL}`)) : console.log("Billing client not initialized");
  }
  async currentPlan(orgId) {
    if (this.#billingClient)
      try {
        let result = await this.#billingClient.currentPlan(orgId), firstDayOfMonth = /* @__PURE__ */ new Date();
        firstDayOfMonth.setUTCDate(1), firstDayOfMonth.setUTCHours(0, 0, 0, 0);
        let firstDayOfNextMonth = /* @__PURE__ */ new Date();
        firstDayOfNextMonth.setUTCDate(1), firstDayOfNextMonth.setUTCMonth(firstDayOfNextMonth.getUTCMonth() + 1), firstDayOfNextMonth.setUTCHours(0, 0, 0, 0);
        let currentRunCount = await this.#replica.jobRun.count({
          where: {
            organizationId: orgId,
            createdAt: {
              gte: firstDayOfMonth
            }
          }
        });
        if (!result.success) {
          logger.error("Error getting current plan", { orgId, error: result.error });
          return;
        }
        let periodStart = firstDayOfMonth, periodEnd = firstDayOfNextMonth, periodRemainingDuration = periodEnd.getTime() - (/* @__PURE__ */ new Date()).getTime(), usage = {
          currentRunCount,
          runCountCap: result.subscription?.plan.runs?.freeAllowance,
          exceededRunCount: result.subscription?.plan.runs?.freeAllowance ? currentRunCount > result.subscription?.plan.runs?.freeAllowance : !1,
          periodStart,
          periodEnd,
          periodRemainingDuration
        };
        return { ...result, usage };
      } catch (e) {
        logger.error("Error getting current plan", { orgId, error: e });
        return;
      }
  }
  async customerPortalUrl(orgId, orgSlug) {
    if (this.#billingClient)
      try {
        return this.#billingClient.createPortalSession(orgId, {
          returnUrl: `${env2.APP_ORIGIN}${organizationBillingPath({ slug: orgSlug })}`
        });
      } catch (e) {
        logger.error("Error getting customer portal Url", { orgId, error: e });
        return;
      }
  }
  async getPlans() {
    if (this.#billingClient)
      try {
        let result = await this.#billingClient.plans();
        if (!result.success) {
          logger.error("Error getting plans", { error: result.error });
          return;
        }
        return result;
      } catch (e) {
        logger.error("Error getting plans", { error: e });
        return;
      }
  }
  async setPlan(orgId, plan) {
    if (this.#billingClient)
      try {
        return await this.#billingClient.setPlan(orgId, plan);
      } catch (e) {
        logger.error("Error setting plan", { orgId, error: e });
        return;
      }
  }
};

// app/routes/resources.$organizationSlug.subscription.portal.ts
async function loader80({ request, params }) {
  let userId = await requireUserId(request), { organizationSlug } = OrganizationParamsSchema.parse(params), org = await prisma.organization.findUnique({
    select: {
      id: !0
    },
    where: {
      slug: organizationSlug,
      members: {
        some: {
          userId
        }
      }
    }
  });
  if (!org)
    return redirectWithErrorMessage(
      usagePath({ slug: organizationSlug }),
      request,
      "Something went wrong. Please try again later."
    );
  let result = await new BillingService(!0).customerPortalUrl(org.id, organizationSlug);
  return !result || !result.success || !result.customerPortalUrl ? redirectWithErrorMessage(
    usagePath({ slug: organizationSlug }),
    request,
    "Something went wrong. Please try again later."
  ) : (0, import_remix_typedjson69.redirect)(result.customerPortalUrl);
}

// app/routes/api.v1.projects.$projectRef.background-workers.ts
var api_v1_projects_projectRef_background_workers_exports = {};
__export(api_v1_projects_projectRef_background_workers_exports, {
  action: () => action33
});
var import_server_runtime35 = require("@remix-run/server-runtime");
var import_zod159 = require("zod");
var ParamsSchema27 = import_zod159.z.object({
  projectRef: import_zod159.z.string()
});
async function action33({ request, params }) {
  if (request.method.toUpperCase() !== "POST")
    return { status: 405, body: "Method Not Allowed" };
  let parsedParams = ParamsSchema27.safeParse(params);
  if (!parsedParams.success)
    return (0, import_server_runtime35.json)({ error: "Invalid params" }, { status: 400 });
  let authenticationResult = await authenticateApiRequest(request);
  if (!authenticationResult)
    return logger.info("Invalid or missing api key", { url: request.url }), (0, import_server_runtime35.json)({ error: "Invalid or Missing API key" }, { status: 401 });
  let authenticatedEnv = authenticationResult.environment, { projectRef } = parsedParams.data, rawBody = await request.json(), body = CreateBackgroundWorkerRequestBody.safeParse(rawBody);
  if (!body.success)
    return (0, import_server_runtime35.json)({ error: "Invalid body", issues: body.error.issues }, { status: 400 });
  let backgroundWorker = await new CreateBackgroundWorkerService().call(projectRef, authenticatedEnv, body.data);
  return (0, import_server_runtime35.json)(
    {
      id: backgroundWorker.friendlyId,
      version: backgroundWorker.version,
      contentHash: backgroundWorker.contentHash
    },
    { status: 200 }
  );
}

// app/routes/_app.orgs.$organizationId.subscription.failed/route.tsx
var route_exports95 = {};
__export(route_exports95, {
  loader: () => loader81
});
var import_zod160 = require("zod");
var ParamsSchema28 = import_zod160.z.object({
  organizationId: import_zod160.z.string()
}), loader81 = async ({ request, params }) => {
  let { organizationId } = ParamsSchema28.parse(params), org = await prisma.organization.findUnique({
    select: {
      slug: !0
    },
    where: {
      id: organizationId
    }
  });
  if (!org)
    throw new Response(null, { status: 404 });
  let url = new URL(request.url), reason = new URLSearchParams(url.search).get("reason"), errorMessage = reason ? decodeURIComponent(reason) : "Subscribing failed to complete";
  return redirectWithErrorMessage(`${plansPath({ slug: org.slug })}`, request, errorMessage);
};

// app/routes/account.authorization-code.$authorizationCode/route.tsx
var route_exports96 = {};
__export(route_exports96, {
  default: () => Page59,
  loader: () => loader82
});
var import_solid96 = require("@heroicons/react/24/solid"), import_remix_typedjson70 = require("remix-typedjson"), import_zod161 = require("zod");
var import_jsx_runtime241 = require("react/jsx-runtime"), ParamsSchema29 = import_zod161.z.object({
  authorizationCode: import_zod161.z.string()
}), loader82 = async ({ request, params }) => {
  let userId = await requireUserId(request), parsedParams = ParamsSchema29.safeParse(params);
  if (!parsedParams.success)
    throw logger.info("Invalid params", { params }), new Response(void 0, {
      status: 400,
      statusText: "Invalid params"
    });
  try {
    let personalAccessToken = await createPersonalAccessTokenFromAuthorizationCode(
      parsedParams.data.authorizationCode,
      userId
    );
    return (0, import_remix_typedjson70.typedjson)({
      success: !0
    });
  } catch (error) {
    if (error instanceof Response)
      throw error;
    if (error instanceof Error)
      return (0, import_remix_typedjson70.typedjson)({
        success: !1,
        error: error.message
      });
    throw logger.error(JSON.stringify(error)), new Response(void 0, {
      status: 400,
      statusText: "Something went wrong, if this problem persists please contact support."
    });
  }
};
function Page59() {
  let result = (0, import_remix_typedjson70.useTypedLoaderData)();
  return /* @__PURE__ */ (0, import_jsx_runtime241.jsx)(AppContainer, { children: /* @__PURE__ */ (0, import_jsx_runtime241.jsx)(MainCenteredContainer, { className: "max-w-[22rem]", children: /* @__PURE__ */ (0, import_jsx_runtime241.jsx)("div", { className: "flex flex-col items-center space-y-4", children: result.success ? /* @__PURE__ */ (0, import_jsx_runtime241.jsxs)("div", { children: [
    /* @__PURE__ */ (0, import_jsx_runtime241.jsxs)(Header1, { className: "mb-2 flex items-center gap-1", children: [
      /* @__PURE__ */ (0, import_jsx_runtime241.jsx)(Icon, { icon: import_solid96.CheckCircleIcon, className: "h-6 w-6 text-emerald-500" }),
      " Successfully authenticated"
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime241.jsx)(Paragraph, { children: "Return to your terminal to continue." })
  ] }) : /* @__PURE__ */ (0, import_jsx_runtime241.jsxs)("div", { children: [
    /* @__PURE__ */ (0, import_jsx_runtime241.jsx)(Header1, { className: "mb-2", children: "Authentication failed" }),
    /* @__PURE__ */ (0, import_jsx_runtime241.jsx)(Callout, { variant: "error", className: "my-2", children: result.error }),
    /* @__PURE__ */ (0, import_jsx_runtime241.jsx)(Paragraph, { spacing: !0, children: "There was a problem authenticating you, please try logging in with your CLI again." })
  ] }) }) }) });
}

// app/routes/admin.api.v1.orgs.$organizationId.concurrency.ts
var admin_api_v1_orgs_organizationId_concurrency_exports = {};
__export(admin_api_v1_orgs_organizationId_concurrency_exports, {
  action: () => action34
});
var import_server_runtime36 = require("@remix-run/server-runtime"), import_zod162 = require("zod");
var ParamsSchema30 = import_zod162.z.object({
  organizationId: import_zod162.z.string()
}), RequestBodySchema = import_zod162.z.object({
  organization: import_zod162.z.number(),
  development: import_zod162.z.number().optional(),
  staging: import_zod162.z.number().optional(),
  production: import_zod162.z.number().optional()
});
async function action34({ request, params }) {
  let authenticationResult = await authenticateApiRequestWithPersonalAccessToken(request);
  if (!authenticationResult)
    return (0, import_server_runtime36.json)({ error: "Invalid or Missing API key" }, { status: 401 });
  let user = await prisma.user.findUnique({
    where: {
      id: authenticationResult.userId
    }
  });
  if (!user)
    return (0, import_server_runtime36.json)({ error: "Invalid or Missing API key" }, { status: 401 });
  if (!user.admin)
    return (0, import_server_runtime36.json)({ error: "You must be an admin to perform this action" }, { status: 403 });
  let { organizationId } = ParamsSchema30.parse(params), rawBody = await request.json(), body = RequestBodySchema.parse(rawBody);
  if (!body.development && !body.staging && !body.production)
    return (0, import_server_runtime36.json)({ error: "At least one environment limit must be provided" }, { status: 400 });
  let organization = await prisma.organization.update({
    where: {
      id: organizationId
    },
    data: {
      maximumConcurrencyLimit: body.organization
    }
  }), environments2 = await prisma.runtimeEnvironment.findMany({
    where: {
      organizationId,
      project: {
        version: "V3"
      }
    }
  });
  for (let environment of environments2) {
    let limit;
    switch (environment.type) {
      case "DEVELOPMENT": {
        limit = body.development;
        break;
      }
      case "STAGING": {
        limit = body.staging;
        break;
      }
      case "PRODUCTION": {
        limit = body.production;
        break;
      }
    }
    if (!limit)
      continue;
    let modifiedEnvironment = await prisma.runtimeEnvironment.update({
      where: {
        id: environment.id
      },
      data: {
        maximumConcurrencyLimit: limit
      },
      include: {
        project: !0
      }
    });
    await marqs?.updateEnvConcurrencyLimits({ ...modifiedEnvironment, organization });
  }
  return (0, import_server_runtime36.json)({ success: !0 });
}

// app/routes/api.v1.runs.$runId.tasks.$id.callback.$secret.ts
var api_v1_runs_runId_tasks_id_callback_secret_exports = {};
__export(api_v1_runs_runId_tasks_id_callback_secret_exports, {
  action: () => action35
});

// app/routes/api.v1.tasks.$id.callback.$secret/route.ts
var route_exports97 = {};
__export(route_exports97, {
  action: () => action35
});
var import_server_runtime37 = require("@remix-run/server-runtime"), import_zod163 = require("zod");

// app/routes/api.v1.tasks.$id.callback.$secret/CallbackRunTaskService.server.ts
var CallbackRunTaskService = class {
  #prismaClient;
  constructor(prismaClient = prisma) {
    this.#prismaClient = prismaClient;
  }
  async call(id, taskBody, callbackUrl) {
    let task = await findTask4(prisma, id);
    if (task && task.status === "WAITING") {
      if (!task.callbackUrl)
        throw new Error("Task doesn't have a callback URL");
      if (new URL(task.callbackUrl).pathname !== new URL(callbackUrl).pathname)
        throw logger.debug("Callback URLs don't match", { taskId: id, callbackUrl }), new Error("Callback URLs don't match");
      logger.debug("CallbackRunTaskService.call()", { task }), await this.#resumeTask(task, taskBody);
    }
  }
  async #resumeTask(task, output) {
    await $transaction(this.#prismaClient, async (tx) => {
      await tx.taskAttempt.updateMany({
        where: {
          taskId: task.id,
          status: "PENDING"
        },
        data: {
          status: "COMPLETED"
        }
      }), await tx.task.update({
        where: { id: task.id },
        data: {
          status: "COMPLETED",
          completedAt: /* @__PURE__ */ new Date(),
          output: output || void 0
        }
      }), await workerQueue.dequeue(`process-callback:${task.id}`, { tx }), await this.#resumeRunExecution(task, tx);
    });
  }
  async #resumeRunExecution(task, prisma5) {
    await ResumeTaskService.enqueue(task.id, void 0, prisma5);
  }
};
async function findTask4(prisma5, id) {
  return prisma5.task.findUnique({
    where: { id },
    include: {
      run: {
        include: {
          environment: !0,
          queue: !0
        }
      }
    }
  });
}

// app/routes/api.v1.tasks.$id.callback.$secret/route.ts
var ParamsSchema31 = import_zod163.z.object({
  id: import_zod163.z.string(),
  secret: import_zod163.z.string()
});
async function action35({ request, params }) {
  if (request.method.toUpperCase() !== "POST")
    return { status: 405, body: "Method Not Allowed" };
  let { id } = ParamsSchema31.parse(params), body = await request.json(), service = new CallbackRunTaskService();
  try {
    return await service.call(id, body, request.url), (0, import_server_runtime37.json)({ success: !0 });
  } catch (error) {
    return error instanceof Error ? (logger.error("Error while processing task callback:", { error }), (0, import_server_runtime37.json)({ error: `Something went wrong: ${error.message}` }, { status: 500 })) : (0, import_server_runtime37.json)({ error: "Something went wrong" }, { status: 500 });
  }
}

// app/routes/projects.v3.$projectRef.environment-variables.ts
var projects_v3_projectRef_environment_variables_exports = {};
__export(projects_v3_projectRef_environment_variables_exports, {
  loader: () => loader83
});
var import_server_runtime38 = require("@remix-run/server-runtime"), import_zod164 = require("zod");
var ParamsSchema32 = import_zod164.z.object({
  projectRef: import_zod164.z.string()
});
async function loader83({ params, request }) {
  let userId = await requireUserId(request), validatedParams = ParamsSchema32.parse(params), project = await prisma.project.findFirst({
    where: {
      externalRef: validatedParams.projectRef,
      organization: {
        members: {
          some: {
            userId
          }
        }
      }
    },
    include: {
      organization: !0
    }
  });
  return project ? (0, import_server_runtime38.redirect)(
    `/orgs/${project.organization.slug}/projects/v3/${project.slug}/environment-variables`
  ) : new Response("Not found", { status: 404 });
}

// app/routes/resources.orgs.$organizationSlug.select-plan.tsx
var resources_orgs_organizationSlug_select_plan_exports = {};
__export(resources_orgs_organizationSlug_select_plan_exports, {
  PricingPlans: () => PricingPlans,
  TierEnterprise: () => TierEnterprise,
  TierFree: () => TierFree,
  TierHobby: () => TierHobby,
  TierPro: () => TierPro,
  action: () => action36
});
var import_solid97 = require("@heroicons/react/20/solid"), import_react181 = require("@remix-run/react"), import_companyicons8 = require("@trigger.dev/companyicons"), import_zod165 = require("zod");

// app/components/DefinitionTooltip.tsx
var import_jsx_runtime242 = require("react/jsx-runtime");
function DefinitionTip({
  content,
  children,
  title: title2
}) {
  return /* @__PURE__ */ (0, import_jsx_runtime242.jsx)(TooltipProvider, { children: /* @__PURE__ */ (0, import_jsx_runtime242.jsxs)(Tooltip, { disableHoverableContent: !0, children: [
    /* @__PURE__ */ (0, import_jsx_runtime242.jsx)(TooltipTrigger, { children: /* @__PURE__ */ (0, import_jsx_runtime242.jsx)("span", { className: "cursor-default underline decoration-charcoal-500 decoration-dashed underline-offset-4 transition hover:decoration-charcoal-400", children }) }),
    /* @__PURE__ */ (0, import_jsx_runtime242.jsxs)(TooltipContent, { align: "end", side: "right", className: "w-[16rem] min-w-[16rem]", children: [
      /* @__PURE__ */ (0, import_jsx_runtime242.jsx)(Header3, { className: "mb-1", children: title2 }),
      typeof content == "string" ? /* @__PURE__ */ (0, import_jsx_runtime242.jsx)(Paragraph, { variant: "small", children: content }) : /* @__PURE__ */ (0, import_jsx_runtime242.jsx)("div", { children: content })
    ] })
  ] }) });
}

// app/routes/resources.orgs.$organizationSlug.select-plan.tsx
var import_jsx_runtime243 = require("react/jsx-runtime"), Params = import_zod165.z.object({
  organizationSlug: import_zod165.z.string()
}), schema12 = import_zod165.z.object({
  type: import_zod165.z.enum(["free", "paid"]),
  planCode: import_zod165.z.string().optional(),
  callerPath: import_zod165.z.string()
});
async function action36({ request, params }) {
  if (request.method.toLowerCase() !== "post")
    return new Response("Method not allowed", { status: 405 });
  let { organizationSlug } = Params.parse(params), userId = await requireUserId(request), formData = Object.fromEntries(await request.formData()), form = schema12.parse(formData), organization = await prisma.organization.findUnique({
    where: { slug: organizationSlug }
  });
  if (!organization)
    throw redirectWithErrorMessage(form.callerPath, request, "Organization not found");
  let payload;
  switch (form.type) {
    case "free": {
      payload = {
        type: "free",
        userId
      };
      break;
    }
    case "paid": {
      if (form.planCode === void 0)
        throw redirectWithErrorMessage(form.callerPath, request, "Not a valid plan");
      payload = {
        type: "paid",
        planCode: form.planCode,
        userId
      };
      break;
    }
  }
  return setPlan(organization, request, form.callerPath, payload);
}
var pricingDefinitions = {
  usage: {
    title: "Usage",
    content: "The compute cost when tasks are executing."
  },
  freeUsage: {
    title: "Free usage",
    content: "Requires a verified GitHub account."
  },
  concurrentRuns: {
    title: "Concurrent runs",
    content: "The number of runs that can be executed at the same time."
  },
  taskRun: {
    title: "Task runs",
    content: "A single execution of a task."
  },
  tasks: {
    title: "Tasks",
    content: "Tasks are functions that can run for a long time and provide strong resilience to failure."
  },
  environment: {
    title: "Environments",
    content: "The different environments available for running your tasks."
  },
  schedules: {
    title: "Schedules",
    content: "You can attach recurring schedules to tasks using CRON syntax."
  },
  alerts: {
    title: "Alert destination",
    content: "A single email address, Slack channel, or webhook URL that you want to send alerts to."
  }
};
function PricingPlans({
  plans,
  subscription,
  organizationSlug,
  hasPromotedPlan
}) {
  return /* @__PURE__ */ (0, import_jsx_runtime243.jsxs)("div", { className: "flex w-full flex-col", children: [
    /* @__PURE__ */ (0, import_jsx_runtime243.jsxs)("div", { className: "flex flex-col gap-3 lg:flex-row", children: [
      /* @__PURE__ */ (0, import_jsx_runtime243.jsx)(
        TierFree,
        {
          plan: plans.free,
          subscription,
          organizationSlug
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime243.jsx)(
        TierHobby,
        {
          plan: plans.hobby,
          organizationSlug,
          subscription,
          isHighlighted: hasPromotedPlan
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime243.jsx)(TierPro, { plan: plans.pro, organizationSlug, subscription })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime243.jsx)("div", { className: "mt-3", children: /* @__PURE__ */ (0, import_jsx_runtime243.jsx)(TierEnterprise, {}) })
  ] });
}
function TierFree({
  plan,
  subscription,
  organizationSlug
}) {
  let location = (0, import_react181.useLocation)(), navigation = (0, import_react181.useNavigation)(), formAction = `/resources/orgs/${organizationSlug}/select-plan`, isLoading2 = navigation.formAction === formAction, status = subscription?.freeTierStatus ?? "requires_connect";
  return /* @__PURE__ */ (0, import_jsx_runtime243.jsxs)(TierContainer, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime243.jsxs)("div", { className: "relative", children: [
      /* @__PURE__ */ (0, import_jsx_runtime243.jsx)(PricingHeader, { title: plan.title, cost: 0 }),
      status === "approved" && /* @__PURE__ */ (0, import_jsx_runtime243.jsx)(
        SimpleTooltip,
        {
          buttonClassName: "absolute right-1 top-1",
          button: /* @__PURE__ */ (0, import_jsx_runtime243.jsxs)("div", { className: "flex cursor-default items-center gap-1 rounded-sm bg-green-900 py-1 pl-1.5 pr-2.5 text-xs text-green-300", children: [
            /* @__PURE__ */ (0, import_jsx_runtime243.jsx)(import_solid97.ShieldCheckIcon, { className: "size-4" }),
            /* @__PURE__ */ (0, import_jsx_runtime243.jsx)("span", { children: "GitHub verified" })
          ] }),
          content: /* @__PURE__ */ (0, import_jsx_runtime243.jsxs)("div", { className: "flex max-w-[21rem] items-center gap-4", children: [
            /* @__PURE__ */ (0, import_jsx_runtime243.jsxs)("div", { className: "flex flex-col items-center gap-1.5", children: [
              /* @__PURE__ */ (0, import_jsx_runtime243.jsx)(import_solid97.ShieldCheckIcon, { className: "size-9 min-w-9 text-green-600" }),
              /* @__PURE__ */ (0, import_jsx_runtime243.jsx)(
                Paragraph,
                {
                  variant: "extra-extra-small",
                  className: "uppercase tracking-wider text-green-600",
                  children: "verified"
                }
              )
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime243.jsx)(Paragraph, { variant: "small", children: "You have connected a verified GitHub account. This is required for the Free plan to prevent malicious use of our platform." })
          ] })
        }
      )
    ] }),
    status === "rejected" ? /* @__PURE__ */ (0, import_jsx_runtime243.jsxs)("div", { children: [
      /* @__PURE__ */ (0, import_jsx_runtime243.jsx)("hr", { className: "my-6 border-grid-bright" }),
      /* @__PURE__ */ (0, import_jsx_runtime243.jsxs)("div", { className: "flex flex-col gap-2 rounded-sm border border-warning p-4", children: [
        /* @__PURE__ */ (0, import_jsx_runtime243.jsx)(import_solid97.ExclamationTriangleIcon, { className: "size-6 text-warning" }),
        /* @__PURE__ */ (0, import_jsx_runtime243.jsx)(Paragraph, { variant: "small/bright", children: "Your Trigger.dev account failed to be verified for the Free plan because your GitHub account is too new. We require verification to prevent malicious use of our platform." }),
        /* @__PURE__ */ (0, import_jsx_runtime243.jsxs)(Paragraph, { variant: "small/bright", children: [
          "You can still select a paid plan to continue or if you think this is a mistake,",
          " ",
          /* @__PURE__ */ (0, import_jsx_runtime243.jsx)(
            Feedback,
            {
              defaultValue: "help",
              button: /* @__PURE__ */ (0, import_jsx_runtime243.jsx)("span", { className: "cursor-pointer underline decoration-charcoal-400 underline-offset-4 transition hover:decoration-charcoal-200", children: "get in touch" })
            }
          ),
          "."
        ] })
      ] })
    ] }) : /* @__PURE__ */ (0, import_jsx_runtime243.jsxs)(import_react181.Form, { action: formAction, method: "post", id: "subscribe", children: [
      /* @__PURE__ */ (0, import_jsx_runtime243.jsx)("input", { type: "hidden", name: "type", value: "free" }),
      /* @__PURE__ */ (0, import_jsx_runtime243.jsx)("input", { type: "hidden", name: "callerPath", value: location.pathname }),
      /* @__PURE__ */ (0, import_jsx_runtime243.jsxs)(TierLimit, { href: "https://trigger.dev/pricing#computePricing", children: [
        "$",
        plan.limits.includedUsage / 100,
        " free usage"
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime243.jsx)("div", { className: "py-6", children: status === "requires_connect" ? /* @__PURE__ */ (0, import_jsx_runtime243.jsxs)(Dialog, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime243.jsx)(DialogTrigger, { asChild: !0, children: /* @__PURE__ */ (0, import_jsx_runtime243.jsx)(
          Button,
          {
            type: "button",
            variant: "tertiary/large",
            fullWidth: !0,
            className: "text-md font-medium",
            disabled: isLoading2,
            LeadingIcon: isLoading2 ? Spinner : void 0,
            children: "Unlock free plan"
          }
        ) }),
        /* @__PURE__ */ (0, import_jsx_runtime243.jsxs)(DialogContent, { className: "sm:max-w-md", children: [
          /* @__PURE__ */ (0, import_jsx_runtime243.jsx)(DialogHeader, { children: "Unlock the Free plan" }),
          /* @__PURE__ */ (0, import_jsx_runtime243.jsxs)("div", { className: "mb-3 mt-4 flex flex-col items-center gap-4 px-6", children: [
            /* @__PURE__ */ (0, import_jsx_runtime243.jsx)(import_companyicons8.GitHubLightIcon, { className: "size-16" }),
            /* @__PURE__ */ (0, import_jsx_runtime243.jsx)(Paragraph, { variant: "base/bright", className: "text-center", children: "To unlock the Free plan, we need to verify that you have an active GitHub account." }),
            /* @__PURE__ */ (0, import_jsx_runtime243.jsx)(Paragraph, { className: "text-center", children: "We do this to prevent malicious use of our platform. We only ask for the minimum permissions to verify your account." })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime243.jsx)(DialogFooter, { children: /* @__PURE__ */ (0, import_jsx_runtime243.jsx)(
            Button,
            {
              variant: "primary/large",
              fullWidth: !0,
              disabled: isLoading2,
              LeadingIcon: isLoading2 ? Spinner : void 0,
              form: "subscribe",
              children: "Connect to GitHub"
            }
          ) })
        ] })
      ] }) : /* @__PURE__ */ (0, import_jsx_runtime243.jsx)(
        Button,
        {
          variant: "tertiary/large",
          fullWidth: !0,
          className: "text-md font-medium",
          disabled: isLoading2 || subscription?.plan?.type === plan.type || subscription?.canceledAt !== void 0,
          LeadingIcon: isLoading2 && navigation.formData?.get("planCode") === null ? Spinner : void 0,
          children: subscription?.plan === void 0 ? "Select plan" : subscription.plan.type === "free" || subscription.canceledAt !== void 0 ? "Current plan" : `Downgrade to ${plan.title}`
        }
      ) }),
      /* @__PURE__ */ (0, import_jsx_runtime243.jsxs)("ul", { className: "flex flex-col gap-2.5", children: [
        /* @__PURE__ */ (0, import_jsx_runtime243.jsx)(ConcurrentRuns, { limits: plan.limits }),
        /* @__PURE__ */ (0, import_jsx_runtime243.jsxs)(FeatureItem, { checked: !0, children: [
          "Unlimited",
          " ",
          /* @__PURE__ */ (0, import_jsx_runtime243.jsx)(
            DefinitionTip,
            {
              title: pricingDefinitions.tasks.title,
              content: pricingDefinitions.tasks.content,
              children: "tasks"
            }
          )
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime243.jsx)(TeamMembers, { limits: plan.limits }),
        /* @__PURE__ */ (0, import_jsx_runtime243.jsx)(Environments, { limits: plan.limits }),
        /* @__PURE__ */ (0, import_jsx_runtime243.jsx)(Schedules, { limits: plan.limits }),
        /* @__PURE__ */ (0, import_jsx_runtime243.jsx)(LogRetention, { limits: plan.limits }),
        /* @__PURE__ */ (0, import_jsx_runtime243.jsx)(SupportLevel, { limits: plan.limits }),
        /* @__PURE__ */ (0, import_jsx_runtime243.jsx)(Alerts, { limits: plan.limits })
      ] })
    ] })
  ] });
}
function TierHobby({
  plan,
  organizationSlug,
  subscription,
  isHighlighted
}) {
  let location = (0, import_react181.useLocation)(), navigation = (0, import_react181.useNavigation)(), formAction = `/resources/orgs/${organizationSlug}/select-plan`, isLoading2 = navigation.formAction === formAction;
  return /* @__PURE__ */ (0, import_jsx_runtime243.jsxs)(TierContainer, { isHighlighted, children: [
    /* @__PURE__ */ (0, import_jsx_runtime243.jsx)(PricingHeader, { title: plan.title, isHighlighted, cost: plan.tierPrice }),
    /* @__PURE__ */ (0, import_jsx_runtime243.jsxs)(TierLimit, { href: "https://trigger.dev/pricing#computePricing", children: [
      "$",
      plan.limits.includedUsage / 100,
      " usage included"
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime243.jsx)(import_react181.Form, { action: formAction, method: "post", id: "subscribe", children: /* @__PURE__ */ (0, import_jsx_runtime243.jsxs)("div", { className: "py-6", children: [
      /* @__PURE__ */ (0, import_jsx_runtime243.jsx)("input", { type: "hidden", name: "type", value: "paid" }),
      /* @__PURE__ */ (0, import_jsx_runtime243.jsx)("input", { type: "hidden", name: "planCode", value: plan.code }),
      /* @__PURE__ */ (0, import_jsx_runtime243.jsx)("input", { type: "hidden", name: "callerPath", value: location.pathname }),
      /* @__PURE__ */ (0, import_jsx_runtime243.jsx)(
        Button,
        {
          variant: isHighlighted ? "primary/large" : "tertiary/large",
          fullWidth: !0,
          className: "text-md font-medium",
          disabled: isLoading2 || subscription?.plan?.code === plan.code && subscription.canceledAt === void 0,
          LeadingIcon: isLoading2 && navigation.formData?.get("planCode") === plan.code ? Spinner : void 0,
          children: subscription?.plan === void 0 ? "Select plan" : subscription.plan.type === "free" || subscription.canceledAt !== void 0 ? `Upgrade to ${plan.title}` : subscription.plan.code === plan.code ? "Current plan" : `Downgrade to ${plan.title}`
        }
      )
    ] }) }),
    /* @__PURE__ */ (0, import_jsx_runtime243.jsxs)("ul", { className: "flex flex-col gap-2.5", children: [
      /* @__PURE__ */ (0, import_jsx_runtime243.jsx)(ConcurrentRuns, { limits: plan.limits }),
      /* @__PURE__ */ (0, import_jsx_runtime243.jsxs)(FeatureItem, { checked: !0, children: [
        "Unlimited",
        " ",
        /* @__PURE__ */ (0, import_jsx_runtime243.jsx)(
          DefinitionTip,
          {
            title: pricingDefinitions.tasks.title,
            content: pricingDefinitions.tasks.content,
            children: "tasks"
          }
        )
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime243.jsx)(TeamMembers, { limits: plan.limits }),
      " ",
      /* @__PURE__ */ (0, import_jsx_runtime243.jsx)(Environments, { limits: plan.limits }),
      /* @__PURE__ */ (0, import_jsx_runtime243.jsx)(Schedules, { limits: plan.limits }),
      /* @__PURE__ */ (0, import_jsx_runtime243.jsx)(LogRetention, { limits: plan.limits }),
      /* @__PURE__ */ (0, import_jsx_runtime243.jsx)(SupportLevel, { limits: plan.limits }),
      /* @__PURE__ */ (0, import_jsx_runtime243.jsx)(Alerts, { limits: plan.limits })
    ] })
  ] });
}
function TierPro({
  plan,
  organizationSlug,
  subscription
}) {
  let location = (0, import_react181.useLocation)(), navigation = (0, import_react181.useNavigation)(), formAction = `/resources/orgs/${organizationSlug}/select-plan`, isLoading2 = navigation.formAction === formAction;
  return /* @__PURE__ */ (0, import_jsx_runtime243.jsxs)(TierContainer, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime243.jsx)(PricingHeader, { title: plan.title, cost: plan.tierPrice }),
    /* @__PURE__ */ (0, import_jsx_runtime243.jsxs)(TierLimit, { href: "https://trigger.dev/pricing#computePricing", children: [
      "$",
      plan.limits.includedUsage / 100,
      " usage included"
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime243.jsx)(import_react181.Form, { action: formAction, method: "post", id: "subscribe", children: /* @__PURE__ */ (0, import_jsx_runtime243.jsxs)("div", { className: "py-6", children: [
      /* @__PURE__ */ (0, import_jsx_runtime243.jsx)("input", { type: "hidden", name: "type", value: "paid" }),
      /* @__PURE__ */ (0, import_jsx_runtime243.jsx)("input", { type: "hidden", name: "planCode", value: plan.code }),
      /* @__PURE__ */ (0, import_jsx_runtime243.jsx)("input", { type: "hidden", name: "callerPath", value: location.pathname }),
      /* @__PURE__ */ (0, import_jsx_runtime243.jsx)(
        Button,
        {
          variant: "tertiary/large",
          fullWidth: !0,
          className: "text-md font-medium",
          disabled: isLoading2 || subscription?.plan?.code === plan.code && subscription.canceledAt === void 0,
          LeadingIcon: isLoading2 && navigation.formData?.get("planCode") === plan.code ? Spinner : void 0,
          children: subscription?.plan === void 0 ? "Select plan" : subscription.plan.type === "free" || subscription.canceledAt !== void 0 ? `Upgrade to ${plan.title}` : subscription.plan.code === plan.code ? "Current plan" : `Upgrade to ${plan.title}`
        }
      )
    ] }) }),
    /* @__PURE__ */ (0, import_jsx_runtime243.jsxs)("ul", { className: "flex flex-col gap-2.5", children: [
      /* @__PURE__ */ (0, import_jsx_runtime243.jsx)(ConcurrentRuns, { limits: plan.limits }),
      /* @__PURE__ */ (0, import_jsx_runtime243.jsxs)(FeatureItem, { checked: !0, children: [
        "Unlimited",
        " ",
        /* @__PURE__ */ (0, import_jsx_runtime243.jsx)(
          DefinitionTip,
          {
            title: pricingDefinitions.tasks.title,
            content: pricingDefinitions.tasks.content,
            children: "tasks"
          }
        )
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime243.jsx)(TeamMembers, { limits: plan.limits }),
      /* @__PURE__ */ (0, import_jsx_runtime243.jsx)(Environments, { limits: plan.limits }),
      /* @__PURE__ */ (0, import_jsx_runtime243.jsx)(Schedules, { limits: plan.limits }),
      /* @__PURE__ */ (0, import_jsx_runtime243.jsx)(LogRetention, { limits: plan.limits }),
      /* @__PURE__ */ (0, import_jsx_runtime243.jsx)(SupportLevel, { limits: plan.limits }),
      /* @__PURE__ */ (0, import_jsx_runtime243.jsx)(Alerts, { limits: plan.limits })
    ] })
  ] });
}
function TierEnterprise() {
  return /* @__PURE__ */ (0, import_jsx_runtime243.jsx)(TierContainer, { children: /* @__PURE__ */ (0, import_jsx_runtime243.jsxs)("div", { className: "flex w-full flex-col items-center justify-between gap-4 lg:flex-row", children: [
    /* @__PURE__ */ (0, import_jsx_runtime243.jsxs)("div", { className: "flex w-full flex-wrap items-center justify-between gap-2 lg:flex-nowrap", children: [
      /* @__PURE__ */ (0, import_jsx_runtime243.jsxs)("div", { className: "-mt-1 mb-2 flex w-full flex-col gap-2 lg:mb-0 lg:gap-0.5", children: [
        /* @__PURE__ */ (0, import_jsx_runtime243.jsx)("h2", { className: "text-xl font-medium text-text-dimmed", children: "Enterprise" }),
        /* @__PURE__ */ (0, import_jsx_runtime243.jsx)("hr", { className: "my-2 block border-grid-dimmed lg:hidden" }),
        /* @__PURE__ */ (0, import_jsx_runtime243.jsx)("p", { className: "whitespace-nowrap font-sans text-lg font-normal text-text-bright lg:text-sm", children: "Tailor a custom plan" })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime243.jsxs)("ul", { className: "flex w-full flex-col gap-y-3 lg:gap-y-1", children: [
        /* @__PURE__ */ (0, import_jsx_runtime243.jsx)(FeatureItem, { checked: !0, checkedColor: "bright", children: "All Pro plan features +" }),
        /* @__PURE__ */ (0, import_jsx_runtime243.jsx)(FeatureItem, { checked: !0, checkedColor: "bright", children: "Custom log retention" })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime243.jsxs)("ul", { className: "flex w-full flex-col gap-y-3 lg:gap-y-1", children: [
        /* @__PURE__ */ (0, import_jsx_runtime243.jsx)(FeatureItem, { checked: !0, checkedColor: "bright", children: "Priority support" }),
        /* @__PURE__ */ (0, import_jsx_runtime243.jsx)(FeatureItem, { checked: !0, checkedColor: "bright", children: "Role-based access control" })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime243.jsxs)("ul", { className: "flex w-full flex-col gap-y-3 lg:gap-y-1", children: [
        /* @__PURE__ */ (0, import_jsx_runtime243.jsx)(FeatureItem, { checked: !0, checkedColor: "bright", children: "SOC 2 report" }),
        /* @__PURE__ */ (0, import_jsx_runtime243.jsx)(FeatureItem, { checked: !0, checkedColor: "bright", children: "SSO" })
      ] })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime243.jsx)("div", { className: "w-full lg:max-w-[16rem]", children: /* @__PURE__ */ (0, import_jsx_runtime243.jsx)(
      Feedback,
      {
        defaultValue: "enterprise",
        button: /* @__PURE__ */ (0, import_jsx_runtime243.jsx)("div", { className: "flex h-10 w-full cursor-pointer items-center justify-center rounded bg-tertiary px-8 text-base font-medium transition hover:bg-charcoal-600", children: /* @__PURE__ */ (0, import_jsx_runtime243.jsx)("span", { className: "text-center text-text-bright", children: "Contact us" }) })
      }
    ) })
  ] }) });
}
function TierContainer({
  children,
  isHighlighted,
  className
}) {
  return /* @__PURE__ */ (0, import_jsx_runtime243.jsx)(
    "div",
    {
      className: cn(
        "flex w-full min-w-[16rem] flex-col p-6",
        isHighlighted ? "border border-primary" : "border border-grid-dimmed",
        className
      ),
      children
    }
  );
}
function PricingHeader({
  title: title2,
  cost: flatCost,
  isHighlighted,
  per = "/month",
  maximumFractionDigits = 0
}) {
  let dollarFormatter = new Intl.NumberFormat("en-US", {
    style: "currency",
    currency: "USD",
    maximumFractionDigits
  });
  return /* @__PURE__ */ (0, import_jsx_runtime243.jsxs)("div", { className: "flex flex-col gap-2", children: [
    /* @__PURE__ */ (0, import_jsx_runtime243.jsx)(
      "h2",
      {
        className: cn("text-xl font-medium", isHighlighted ? "text-primary" : "text-text-dimmed"),
        children: title2
      }
    ),
    flatCost === 0 || flatCost ? /* @__PURE__ */ (0, import_jsx_runtime243.jsxs)("h3", { className: "text-4xl font-medium tabular-nums text-text-bright", children: [
      dollarFormatter.format(flatCost),
      /* @__PURE__ */ (0, import_jsx_runtime243.jsx)("span", { className: "ml-1 text-sm font-normal tracking-wide text-text-dimmed", children: per })
    ] }) : /* @__PURE__ */ (0, import_jsx_runtime243.jsx)("h2", { className: "text-4xl font-medium", children: "Custom" })
  ] });
}
function TierLimit({ children, href }) {
  return /* @__PURE__ */ (0, import_jsx_runtime243.jsx)(import_jsx_runtime243.Fragment, { children: href ? /* @__PURE__ */ (0, import_jsx_runtime243.jsxs)("div", { children: [
    /* @__PURE__ */ (0, import_jsx_runtime243.jsx)("hr", { className: "my-6 border-grid-bright" }),
    /* @__PURE__ */ (0, import_jsx_runtime243.jsx)(
      "a",
      {
        href,
        className: "hover:decoration-bright font-sans text-lg font-normal text-text-bright underline decoration-charcoal-500 underline-offset-4 transition",
        children
      }
    )
  ] }) : /* @__PURE__ */ (0, import_jsx_runtime243.jsxs)("div", { children: [
    /* @__PURE__ */ (0, import_jsx_runtime243.jsx)("hr", { className: "my-6 border-grid-bright" }),
    /* @__PURE__ */ (0, import_jsx_runtime243.jsx)("div", { className: "font-sans text-lg font-normal text-text-bright", children })
  ] }) });
}
function FeatureItem({
  checked,
  checkedColor = "primary",
  children
}) {
  return /* @__PURE__ */ (0, import_jsx_runtime243.jsxs)("li", { className: "flex items-center gap-2", children: [
    checked ? /* @__PURE__ */ (0, import_jsx_runtime243.jsx)(
      import_solid97.CheckIcon,
      {
        className: cn(
          "size-4 min-w-4",
          checkedColor === "primary" ? "text-primary" : "text-text-bright"
        )
      }
    ) : /* @__PURE__ */ (0, import_jsx_runtime243.jsx)(import_solid97.XMarkIcon, { className: "size-4 min-w-4 text-charcoal-500" }),
    /* @__PURE__ */ (0, import_jsx_runtime243.jsx)(
      "div",
      {
        className: cn(
          "font-sans text-sm font-normal",
          checked ? "text-text-bright" : "text-text-dimmed"
        ),
        children
      }
    )
  ] });
}
function ConcurrentRuns({ limits }) {
  return /* @__PURE__ */ (0, import_jsx_runtime243.jsxs)(FeatureItem, { checked: !0, children: [
    limits.concurrentRuns.number,
    limits.concurrentRuns.canExceed ? "+" : "",
    " ",
    /* @__PURE__ */ (0, import_jsx_runtime243.jsx)(
      DefinitionTip,
      {
        title: pricingDefinitions.concurrentRuns.title,
        content: pricingDefinitions.concurrentRuns.content,
        children: "concurrent runs"
      }
    )
  ] });
}
function TeamMembers({ limits }) {
  return /* @__PURE__ */ (0, import_jsx_runtime243.jsxs)(FeatureItem, { checked: !0, children: [
    limits.teamMembers.number,
    limits.concurrentRuns.canExceed ? "+" : "",
    " team members"
  ] });
}
function Environments({ limits }) {
  return /* @__PURE__ */ (0, import_jsx_runtime243.jsxs)(FeatureItem, { checked: !0, children: [
    limits.hasStagingEnvironment ? "Dev, Staging and Prod" : "Dev and Prod",
    " ",
    /* @__PURE__ */ (0, import_jsx_runtime243.jsx)(
      DefinitionTip,
      {
        title: pricingDefinitions.environment.title,
        content: pricingDefinitions.environment.content,
        children: "environments"
      }
    )
  ] });
}
function Schedules({ limits }) {
  return /* @__PURE__ */ (0, import_jsx_runtime243.jsxs)(FeatureItem, { checked: !0, children: [
    limits.schedules.number,
    limits.schedules.canExceed ? "+" : "",
    " ",
    /* @__PURE__ */ (0, import_jsx_runtime243.jsx)(
      DefinitionTip,
      {
        title: pricingDefinitions.schedules.title,
        content: pricingDefinitions.schedules.content,
        children: "schedules"
      }
    )
  ] });
}
function LogRetention({ limits }) {
  return /* @__PURE__ */ (0, import_jsx_runtime243.jsxs)(FeatureItem, { checked: !0, children: [
    limits.logRetentionDays.number,
    " day log retention"
  ] });
}
function SupportLevel({ limits }) {
  return /* @__PURE__ */ (0, import_jsx_runtime243.jsx)(FeatureItem, { checked: !0, children: limits.support === "community" ? "Community support" : "Dedicated Slack support" });
}
function Alerts({ limits }) {
  return limits.alerts.number === 0 ? /* @__PURE__ */ (0, import_jsx_runtime243.jsx)(FeatureItem, { children: /* @__PURE__ */ (0, import_jsx_runtime243.jsx)(
    DefinitionTip,
    {
      title: pricingDefinitions.alerts.title,
      content: pricingDefinitions.alerts.content,
      children: "Alert destinations"
    }
  ) }) : /* @__PURE__ */ (0, import_jsx_runtime243.jsxs)(FeatureItem, { checked: !0, children: [
    limits.alerts.number,
    limits.alerts.canExceed ? "+" : "",
    " ",
    /* @__PURE__ */ (0, import_jsx_runtime243.jsx)(
      DefinitionTip,
      {
        title: pricingDefinitions.alerts.title,
        content: pricingDefinitions.alerts.content,
        children: "alert destinations"
      }
    )
  ] });
}

// app/routes/resources.connection.$organizationId.oauth2.ts
var resources_connection_organizationId_oauth2_exports = {};
__export(resources_connection_organizationId_oauth2_exports, {
  action: () => action37,
  createSchema: () => createSchema3
});
var import_react182 = require("@conform-to/react"), import_zod166 = require("@conform-to/zod"), import_server_runtime39 = require("@remix-run/server-runtime"), import_remix_typedjson71 = require("remix-typedjson"), import_zod167 = __toESM(require("zod"));
function createSchema3(constraints = {}) {
  return import_zod167.default.object({
    id: import_zod167.default.string(),
    slug: import_zod167.default.string().min(2, "The id must be at least 2 characters long").superRefine((title2, ctx) => {
      if (constraints.isSlugUnique === void 0)
        ctx.addIssue({
          code: import_zod167.default.ZodIssueCode.custom,
          message: import_react182.conform.VALIDATION_UNDEFINED
        });
      else
        return constraints.isSlugUnique(title2).then((isUnique) => {
          isUnique || ctx.addIssue({
            code: import_zod167.default.ZodIssueCode.custom,
            message: "The id must be unique in your organization"
          });
        });
    }),
    integrationIdentifier: import_zod167.default.string(),
    integrationAuthMethod: import_zod167.default.string(),
    title: import_zod167.default.string().min(2, "The title must be unique and at least 2 characters long").superRefine((title2, ctx) => {
      if (constraints.isTitleUnique === void 0)
        ctx.addIssue({
          code: import_zod167.default.ZodIssueCode.custom,
          message: import_react182.conform.VALIDATION_UNDEFINED
        });
      else
        return constraints.isTitleUnique(title2).then((isUnique) => {
          isUnique || ctx.addIssue({
            code: import_zod167.default.ZodIssueCode.custom,
            message: "The title must be unique in your organization"
          });
        });
    }),
    description: import_zod167.default.string().optional(),
    hasCustomClient: import_zod167.default.preprocess((value) => value === "on", import_zod167.default.boolean()),
    customClientId: import_zod167.default.string().optional(),
    customClientSecret: import_zod167.default.string().optional(),
    clientType: import_zod167.default.union([import_zod167.default.literal("DEVELOPER"), import_zod167.default.literal("EXTERNAL")]),
    redirectTo: import_zod167.default.string(),
    scopes: import_zod167.default.preprocess(
      (data2) => typeof data2 == "string" ? [data2] : data2,
      import_zod167.default.array(import_zod167.default.string()).default([])
    )
  }).refine(
    (value) => value.hasCustomClient ? value.customClientId !== void 0 && value.customClientId !== "" && value.customClientSecret !== void 0 && value.customClientSecret !== "" : !0,
    {
      message: "You must enter a Client ID and Client secret if you want to use your own OAuth app.",
      path: ["customClientId"]
    }
  );
}
var ParamsSchema33 = import_zod167.default.object({
  organizationId: import_zod167.default.string()
});
async function action37({ request, params }) {
  let userId = await requireUserId(request);
  if (request.method.toUpperCase() !== "POST")
    return (0, import_remix_typedjson71.typedjson)(
      {
        type: "error",
        error: "Method not allowed"
      },
      { status: 405 }
    );
  let { organizationId } = ParamsSchema33.parse(params), formData = await request.formData(), formSchema = createSchema3({
    isTitleUnique: async (title3) => !await prisma.integration.findFirst({
      where: {
        organizationId,
        title: title3
      }
    }),
    isSlugUnique: async (slug4) => !await prisma.integration.findFirst({
      where: {
        organizationId,
        slug: slug4
      }
    })
  }), submission = await (0, import_zod166.parse)(formData, { schema: formSchema, async: !0 });
  if (!submission.value || submission.intent !== "submit")
    return (0, import_server_runtime39.json)(submission);
  let {
    id,
    slug: slug3,
    hasCustomClient,
    customClientId,
    customClientSecret,
    integrationIdentifier,
    integrationAuthMethod,
    clientType,
    title: title2,
    description,
    redirectTo,
    scopes
  } = submission.value, organization = await prisma.organization.findFirstOrThrow({
    where: {
      id: organizationId,
      members: {
        some: {
          userId
        }
      }
    }
  }), url = requestUrl(request), redirectUrl = await integrationAuthRepository.createConnectionClient({
    id,
    slug: slug3,
    customClient: hasCustomClient ? { id: customClientId, secret: customClientSecret } : void 0,
    clientType,
    organizationId: organization.id,
    integrationIdentifier,
    integrationAuthMethod,
    scopes,
    title: title2,
    description,
    redirectTo,
    url
  });
  return (0, import_remix_typedjson71.redirect)(redirectUrl);
}

// app/routes/_app.orgs.$organizationSlug.billing._index/route.tsx
var route_exports98 = {};
__export(route_exports98, {
  default: () => Page60,
  loader: () => loader84
});
var import_solid98 = require("@heroicons/react/20/solid"), import_outline8 = require("@heroicons/react/24/outline"), import_react183 = require("@remix-run/react"), import_server_runtime40 = require("@remix-run/server-runtime"), import_react184 = require("react"), import_recharts4 = require("recharts");

// app/components/billing/v2/ConcurrentRunsChart.tsx
var import_recharts2 = require("recharts");
var import_jsx_runtime244 = require("react/jsx-runtime"), tooltipStyle = {
  display: "flex",
  alignItems: "center",
  gap: "0.5rem",
  borderRadius: "0.25rem",
  border: "1px solid #1A2434",
  backgroundColor: "#0B1018",
  padding: "0.3rem 0.5rem",
  fontSize: "0.75rem",
  color: "#E2E8F0"
}, dateFormatter = new Intl.DateTimeFormat("en-US", {
  month: "short",
  day: "numeric"
});
function ConcurrentRunsChart({
  concurrentRunsLimit,
  data: data2,
  hasConcurrencyData
}) {
  return /* @__PURE__ */ (0, import_jsx_runtime244.jsxs)("div", { className: "relative", children: [
    !hasConcurrencyData && /* @__PURE__ */ (0, import_jsx_runtime244.jsx)(Paragraph, { className: "absolute left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2", children: "No concurrent Runs to show" }),
    /* @__PURE__ */ (0, import_jsx_runtime244.jsx)(import_recharts2.ResponsiveContainer, { width: "100%", height: "100%", className: "relative min-h-[20rem]", children: /* @__PURE__ */ (0, import_jsx_runtime244.jsxs)(
      import_recharts2.LineChart,
      {
        data: data2,
        margin: {
          top: 20,
          right: 0,
          left: 0,
          bottom: 10
        },
        className: "-ml-8",
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime244.jsx)(
            import_recharts2.XAxis,
            {
              stroke: "#94A3B8",
              fontSize: 12,
              tickLine: !1,
              axisLine: !1,
              dataKey: (item) => {
                if (!item.date)
                  return "";
                let date = new Date(item.date);
                return date.getDate() === 1 ? dateFormatter.format(date) : `${date.getDate()}`;
              },
              className: "text-xs",
              children: /* @__PURE__ */ (0, import_jsx_runtime244.jsx)(import_recharts2.Label, { value: "Last 30 days", offset: -8, position: "insideBottom", fill: "#94A3B8" })
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime244.jsx)(
            import_recharts2.YAxis,
            {
              stroke: "#94A3B8",
              fontSize: 12,
              tickLine: !1,
              axisLine: !1,
              allowDecimals: !1
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime244.jsx)(
            import_recharts2.Tooltip,
            {
              cursor: { fill: "rgba(255,255,255,0.05)" },
              contentStyle: tooltipStyle,
              labelFormatter: (value, data3) => {
                let dateString = data3.at(0)?.payload.date;
                return dateString ? dateFormatter.format(new Date(dateString)) : "";
              }
            }
          ),
          concurrentRunsLimit && /* @__PURE__ */ (0, import_jsx_runtime244.jsx)(
            import_recharts2.ReferenceLine,
            {
              y: concurrentRunsLimit,
              stroke: "#F43F5E",
              strokeWidth: 1,
              strokeDasharray: 5,
              ifOverflow: "extendDomain",
              className: "text-xs",
              children: /* @__PURE__ */ (0, import_jsx_runtime244.jsx)(
                import_recharts2.Label,
                {
                  value: "Concurrent Runs limit",
                  offset: 8,
                  position: "insideTopLeft",
                  fill: "#F43F5E"
                }
              )
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime244.jsx)(
            import_recharts2.Line,
            {
              dataKey: "maxConcurrentRuns",
              name: "Concurrent runs",
              stroke: "#16A34A",
              strokeWidth: 2,
              dot: !1
            }
          )
        ]
      }
    ) })
  ] });
}

// app/components/billing/v2/UsageBar.tsx
var import_framer_motion12 = require("framer-motion"), import_jsx_runtime245 = require("react/jsx-runtime");
function UsageBar({
  numberOfCurrentRuns,
  billingLimit,
  tierRunLimit,
  projectedRuns,
  subscribedToPaidTier = !1
}) {
  let getLargestNumber = Math.max(
    numberOfCurrentRuns,
    tierRunLimit ?? -1 / 0,
    projectedRuns,
    billingLimit ?? -1 / 0
  ), maxRange = Math.round(getLargestNumber * 1.1), tierRunLimitPercentage = tierRunLimit ? Math.round(tierRunLimit / maxRange * 100) : 0, projectedRunsPercentage = Math.round(projectedRuns / maxRange * 100), billingLimitPercentage = billingLimit !== void 0 ? Math.round(billingLimit / maxRange * 100) : 0, usagePercentage = Math.round(numberOfCurrentRuns / maxRange * 100), usageCappedToLimitPercentage = Math.min(usagePercentage, tierRunLimitPercentage);
  return /* @__PURE__ */ (0, import_jsx_runtime245.jsx)("div", { className: "h-fit w-full py-16", children: /* @__PURE__ */ (0, import_jsx_runtime245.jsxs)("div", { className: "relative h-3 w-full rounded-sm bg-charcoal-800", children: [
    billingLimit && /* @__PURE__ */ (0, import_jsx_runtime245.jsx)(
      import_framer_motion12.motion.div,
      {
        initial: { width: 0 },
        animate: { width: billingLimitPercentage + "%" },
        transition: { duration: 1.5, type: "spring" },
        style: { width: `${billingLimitPercentage}%` },
        className: "absolute h-3 rounded-l-sm",
        children: /* @__PURE__ */ (0, import_jsx_runtime245.jsx)(
          Legend,
          {
            text: "Billing limit:",
            value: formatNumberCompact(billingLimit),
            position: "bottomRow2",
            percentage: billingLimitPercentage,
            tooltipContent: `Billing limit: ${formatNumberCompact(billingLimit)}`
          }
        )
      }
    ),
    tierRunLimit && /* @__PURE__ */ (0, import_jsx_runtime245.jsx)(
      import_framer_motion12.motion.div,
      {
        initial: { width: 0 },
        animate: { width: tierRunLimitPercentage + "%" },
        transition: { duration: 1.5, type: "spring" },
        style: { width: `${tierRunLimitPercentage}%` },
        className: "absolute h-3 rounded-l-sm bg-green-900/50",
        children: /* @__PURE__ */ (0, import_jsx_runtime245.jsx)(
          Legend,
          {
            text: `${subscribedToPaidTier ? "Included free:" : "Free tier limit:"}`,
            value: formatNumberCompact(tierRunLimit),
            position: "bottomRow1",
            percentage: tierRunLimitPercentage,
            tooltipContent: `${subscribedToPaidTier ? `Runs included free: ${formatNumberCompact(tierRunLimit)}` : `Free tier runs limit: ${formatNumberCompact(tierRunLimit)}`}`
          }
        )
      }
    ),
    projectedRuns !== 0 && /* @__PURE__ */ (0, import_jsx_runtime245.jsx)(
      import_framer_motion12.motion.div,
      {
        initial: { width: 0 },
        animate: { width: projectedRunsPercentage + "%" },
        transition: { duration: 1.5, type: "spring" },
        style: { width: `${projectedRunsPercentage}%` },
        className: "absolute h-3 rounded-l-sm",
        children: /* @__PURE__ */ (0, import_jsx_runtime245.jsx)(
          Legend,
          {
            text: "Projected:",
            value: formatNumberCompact(projectedRuns),
            position: "topRow2",
            percentage: projectedRunsPercentage,
            tooltipContent: `Projected runs: ${formatNumberCompact(projectedRuns)}`
          }
        )
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime245.jsx)(
      import_framer_motion12.motion.div,
      {
        initial: { width: 0 },
        animate: { width: usagePercentage + "%" },
        transition: { duration: 1.5, type: "spring" },
        style: { width: `${usagePercentage}%` },
        className: cn(
          "absolute h-3 rounded-l-sm",
          subscribedToPaidTier ? "bg-green-600" : "bg-rose-600"
        ),
        children: /* @__PURE__ */ (0, import_jsx_runtime245.jsx)(
          Legend,
          {
            text: "Current:",
            value: formatNumberCompact(numberOfCurrentRuns),
            position: "topRow1",
            percentage: usagePercentage,
            tooltipContent: `Current run count: ${formatNumberCompact(numberOfCurrentRuns)}`
          }
        )
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime245.jsx)(
      import_framer_motion12.motion.div,
      {
        initial: { width: 0 },
        animate: { width: usageCappedToLimitPercentage + "%" },
        transition: { duration: 1.5, type: "spring" },
        style: { width: `${usageCappedToLimitPercentage}%` },
        className: "absolute h-3 rounded-l-sm bg-green-600"
      }
    )
  ] }) });
}
var positions = {
  topRow1: "bottom-0 h-9",
  topRow2: "bottom-0 h-14",
  bottomRow1: "top-0 h-9 items-end",
  bottomRow2: "top-0 h-14 items-end"
};
function Legend({ text, value, position, percentage, tooltipContent }) {
  let flipLegendPosition = percentage > 80;
  return /* @__PURE__ */ (0, import_jsx_runtime245.jsx)(
    "div",
    {
      className: cn(
        "absolute left-full z-10 flex border-charcoal-400",
        positions[position],
        flipLegendPosition === !0 ? "-translate-x-full border-r" : "border-l"
      ),
      children: /* @__PURE__ */ (0, import_jsx_runtime245.jsx)(
        SimpleTooltip,
        {
          button: /* @__PURE__ */ (0, import_jsx_runtime245.jsxs)(Paragraph, { className: "mr-px h-fit whitespace-nowrap bg-background-dimmed px-1.5 text-xs text-text-dimmed", children: [
            text,
            /* @__PURE__ */ (0, import_jsx_runtime245.jsx)("span", { className: "ml-1 text-text-bright", children: value })
          ] }),
          variant: "dark",
          side: "top",
          content: tooltipContent,
          className: "z-50 h-fit"
        }
      )
    }
  );
}

// app/components/billing/v2/DailyRunsChat.tsx
var import_recharts3 = require("recharts");
var import_jsx_runtime246 = require("react/jsx-runtime"), tooltipStyle2 = {
  display: "flex",
  alignItems: "center",
  gap: "0.5rem",
  borderRadius: "0.25rem",
  border: "1px solid #1A2434",
  backgroundColor: "#0B1018",
  padding: "0.3rem 0.5rem",
  fontSize: "0.75rem",
  color: "#E2E8F0"
}, dateFormatter2 = new Intl.DateTimeFormat("en-US", {
  month: "short",
  day: "numeric"
});
function DailyRunsChart({
  data: data2,
  hasDailyRunsData
}) {
  return /* @__PURE__ */ (0, import_jsx_runtime246.jsxs)("div", { className: "relative", children: [
    !hasDailyRunsData && /* @__PURE__ */ (0, import_jsx_runtime246.jsx)(Paragraph, { className: "absolute left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2", children: "No daily Runs to show" }),
    /* @__PURE__ */ (0, import_jsx_runtime246.jsx)(import_recharts3.ResponsiveContainer, { width: "100%", height: "100%", className: "relative min-h-[20rem]", children: /* @__PURE__ */ (0, import_jsx_runtime246.jsxs)(
      import_recharts3.LineChart,
      {
        data: data2,
        margin: {
          top: 20,
          right: 0,
          left: 0,
          bottom: 10
        },
        className: "-ml-8",
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime246.jsx)(
            import_recharts3.XAxis,
            {
              stroke: "#94A3B8",
              fontSize: 12,
              tickLine: !1,
              axisLine: !1,
              dataKey: (item) => {
                if (!item.date)
                  return "";
                let date = new Date(item.date);
                return date.getDate() === 1 ? dateFormatter2.format(date) : `${date.getDate()}`;
              },
              className: "text-xs",
              children: /* @__PURE__ */ (0, import_jsx_runtime246.jsx)(import_recharts3.Label, { value: "Last 30 days", offset: -8, position: "insideBottom", fill: "#94A3B8" })
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime246.jsx)(
            import_recharts3.YAxis,
            {
              stroke: "#94A3B8",
              fontSize: 12,
              tickLine: !1,
              axisLine: !1,
              allowDecimals: !1
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime246.jsx)(
            import_recharts3.Tooltip,
            {
              cursor: { fill: "rgba(255,255,255,0.05)" },
              contentStyle: tooltipStyle2,
              labelFormatter: (value, data3) => {
                let dateString = data3.at(0)?.payload.date;
                return dateString ? dateFormatter2.format(new Date(dateString)) : "";
              }
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime246.jsx)(import_recharts3.Line, { dataKey: "runs", name: "Runs", stroke: "#16A34A", strokeWidth: 2, dot: !1 })
        ]
      }
    ) })
  ] });
}

// app/presenters/OrgUsagePresenter.server.ts
var import_v26 = require("@trigger.dev/platform/v2");
var OrgUsagePresenter = class extends BasePresenter {
  async call({ userId, slug: slug3, request }) {
    let organization = await this._replica.organization.findFirst({
      where: {
        slug: slug3,
        members: {
          some: {
            userId
          }
        }
      }
    });
    if (!organization)
      throw new Error("Organization not found");
    let runsCount = await this._replica.jobRun.count({
      where: {
        organizationId: organization.id,
        createdAt: {
          gte: new Date((/* @__PURE__ */ new Date()).getFullYear(), (/* @__PURE__ */ new Date()).getMonth(), 1)
        },
        internal: !1
      }
    }), monthlyRunsDataRaw = await this._replica.$queryRaw`SELECT TO_CHAR("createdAt", 'YYYY-MM') as month, COUNT(*) as count FROM ${sqlDatabaseSchema}."JobRun" WHERE "organizationId" = ${organization.id} AND "createdAt" >= NOW() - INTERVAL '6 months' AND "internal" = FALSE GROUP BY month ORDER BY month ASC`, hasMonthlyRunData = monthlyRunsDataRaw.length > 0, monthlyRunsData = monthlyRunsDataRaw.map((obj) => ({
      name: obj.month,
      total: Number(obj.count)
      // Convert BigInt to Number
    })), monthlyRunsDataDisplay = fillInMissingRunMonthlyData(monthlyRunsData, 6), concurrencyChartRawData = await this._replica.$queryRaw`
      WITH time_boundaries AS (
        SELECT generate_series(
            NOW() - interval '30 days', 
            NOW(), 
            interval '1 day'
        ) AS day_start
      ),
      events AS (
          SELECT
              day_start,
              event_time,
              event_type,
              SUM(event_type) OVER (ORDER BY event_time) AS running_total
          FROM
              time_boundaries
          JOIN
              triggerdotdev_events.run_executions
          ON
              event_time >= day_start AND event_time < day_start + interval '1 day'
          WHERE triggerdotdev_events.run_executions.organization_id = ${organization.id}
      ),
      max_concurrent_per_day AS (
          SELECT
              date_trunc('day', event_time) AS day,
              MAX(running_total) AS max_concurrent_runs
          FROM
              events
          GROUP BY day
      )
      SELECT
          day,
          max_concurrent_runs
      FROM
          max_concurrent_per_day
      ORDER BY
          day;`, ThirtyDaysAgo = /* @__PURE__ */ new Date();
    ThirtyDaysAgo.setDate(ThirtyDaysAgo.getDate() - 30), ThirtyDaysAgo.setUTCHours(0, 0, 0, 0);
    let hasConcurrencyData = concurrencyChartRawData.length > 0, concurrencyChartRawDataFilledIn = fillInMissingConcurrencyDays(
      ThirtyDaysAgo,
      31,
      concurrencyChartRawData
    ), dailyRunsRawData = await this._replica.$queryRaw`SELECT date_trunc('day', "createdAt") as day, COUNT(*) as runs FROM ${sqlDatabaseSchema}."JobRun" WHERE "organizationId" = ${organization.id} AND "createdAt" >= NOW() - INTERVAL '30 days' AND "internal" = FALSE GROUP BY day`, hasDailyRunsData = dailyRunsRawData.length > 0, dailyRunsDataFilledIn = fillInMissingDailyRuns(ThirtyDaysAgo, 31, dailyRunsRawData), endOfMonth = new Date((/* @__PURE__ */ new Date()).getFullYear(), (/* @__PURE__ */ new Date()).getMonth() + 1, 1);
    endOfMonth.setDate(endOfMonth.getDate() - 1);
    let projectedRunsCount = Math.round(
      runsCount / ((/* @__PURE__ */ new Date()).getDate() / endOfMonth.getDate())
    ), { isManagedCloud: isManagedCloud2 } = featuresForRequest(request), plans = await new BillingService(isManagedCloud2).getPlans(), runCostEstimation, projectedRunCostEstimation;
    plans && (runCostEstimation = (0, import_v26.estimate)({
      usage: { runs: runsCount },
      plans: [plans.free, plans.paid]
    })?.cost.runsCost, projectedRunCostEstimation = (0, import_v26.estimate)({
      usage: { runs: projectedRunsCount },
      plans: [plans.free, plans.paid]
    })?.cost.runsCost);
    let periodStart = /* @__PURE__ */ new Date();
    periodStart.setDate(1), periodStart.setUTCHours(0, 0, 0, 0);
    let periodEnd = /* @__PURE__ */ new Date();
    return periodEnd.setDate(1), periodEnd.setMonth(periodEnd.getMonth() + 1), periodEnd.setUTCHours(0, 0, 0, 0), {
      id: organization.id,
      runsCount,
      projectedRunsCount,
      monthlyRunsData: monthlyRunsDataDisplay,
      hasMonthlyRunData,
      concurrencyData: concurrencyChartRawDataFilledIn,
      hasConcurrencyData,
      dailyRunsData: dailyRunsDataFilledIn,
      hasDailyRunsData,
      runCostEstimation,
      projectedRunCostEstimation,
      periodStart,
      periodEnd
    };
  }
};
function fillInMissingRunMonthlyData(data2, totalNumberOfMonths) {
  let currentMonth = (/* @__PURE__ */ new Date()).toISOString().slice(0, 7), startMonth = new Date(
    new Date(currentMonth).getFullYear(),
    new Date(currentMonth).getMonth() - (totalNumberOfMonths - 2),
    1
  ).toISOString().slice(0, 7);
  return getMonthsBetween(startMonth, currentMonth).map((month) => {
    let foundData = data2.find((d) => d.name === month);
    return foundData ? { ...foundData } : { name: month, total: 0 };
  });
}
function fillInMissingConcurrencyDays(startDate, days, data2) {
  let outputData = [];
  for (let i = 0; i < days; i++) {
    let date = new Date(startDate);
    date.setDate(date.getDate() + i);
    let foundData = data2.find((d) => d.day.toISOString() === date.toISOString());
    foundData ? outputData.push({
      date,
      maxConcurrentRuns: Number(foundData.max_concurrent_runs)
    }) : outputData.push({
      date,
      maxConcurrentRuns: 0
    });
  }
  return outputData;
}
function fillInMissingDailyRuns(startDate, days, data2) {
  let outputData = [];
  for (let i = 0; i < days; i++) {
    let date = new Date(startDate);
    date.setDate(date.getDate() + i);
    let foundData = data2.find((d) => d.day.toISOString() === date.toISOString());
    foundData ? outputData.push({
      date,
      runs: Number(foundData.runs)
    }) : outputData.push({
      date,
      runs: 0
    });
  }
  return outputData;
}
function getMonthsBetween(startMonth, endMonth) {
  let result = [], [startYear, startMonthNum] = startMonth.split("-").map(Number), [endYear, endMonthNum] = endMonth.split("-").map(Number);
  for (let year = startYear; year <= endYear; year++) {
    let monthStart = year === startYear ? startMonthNum : 1, monthEnd = year === endYear ? endMonthNum : 12;
    for (let month = monthStart; month <= monthEnd; month++)
      result.push(`${year}-${String(month).padStart(2, "0")}`);
  }
  return result;
}

// app/routes/_app.orgs.$organizationSlug.billing._index/route.tsx
var import_jsx_runtime247 = require("react/jsx-runtime");
async function loader84({ request, params }) {
  let userId = await requireUserId(request), { organizationSlug } = OrganizationParamsSchema.parse(params), usageData = new OrgUsagePresenter().call({ userId, slug: organizationSlug, request });
  return (0, import_server_runtime40.defer)({ usageData });
}
var CustomTooltip2 = ({ active, payload, label }) => active && payload ? /* @__PURE__ */ (0, import_jsx_runtime247.jsxs)("div", { className: "flex gap-1 rounded border border-grid-bright bg-background-dimmed px-3 py-2 text-xs text-text-bright", children: [
  /* @__PURE__ */ (0, import_jsx_runtime247.jsxs)("p", { children: [
    label,
    ":"
  ] }),
  /* @__PURE__ */ (0, import_jsx_runtime247.jsx)("p", { children: payload[0].value })
] }) : null;
function Page60() {
  let organization = useOrganization(), { usageData } = (0, import_react183.useLoaderData)(), currentPlan = useCurrentPlan(), hitsRunLimit = currentPlan?.usage?.runCountCap ? currentPlan.usage.currentRunCount > currentPlan.usage.runCountCap : !1;
  return /* @__PURE__ */ (0, import_jsx_runtime247.jsx)("div", { className: "flex flex-col gap-4 px-4", children: /* @__PURE__ */ (0, import_jsx_runtime247.jsx)(
    import_react184.Suspense,
    {
      fallback: /* @__PURE__ */ (0, import_jsx_runtime247.jsxs)(import_jsx_runtime247.Fragment, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime247.jsx)(LoadingElement, { title: "Concurrent runs" }),
        /* @__PURE__ */ (0, import_jsx_runtime247.jsx)(LoadingElement, { title: "Runs" })
      ] }),
      children: /* @__PURE__ */ (0, import_jsx_runtime247.jsx)(
        import_react183.Await,
        {
          resolve: usageData,
          errorElement: /* @__PURE__ */ (0, import_jsx_runtime247.jsx)(Paragraph, { children: "There was a problem loading your usage data." }),
          children: (data2) => {
            let hitConcurrencyLimit = currentPlan?.subscription?.limits.concurrentRuns ? data2.concurrencyData.some(
              (c) => c.maxConcurrentRuns >= (currentPlan.subscription?.limits.concurrentRuns ?? 1 / 0)
            ) : !1;
            return /* @__PURE__ */ (0, import_jsx_runtime247.jsxs)(import_jsx_runtime247.Fragment, { children: [
              /* @__PURE__ */ (0, import_jsx_runtime247.jsxs)("div", { children: [
                /* @__PURE__ */ (0, import_jsx_runtime247.jsx)(Header2, { spacing: !0, children: "Concurrent runs" }),
                /* @__PURE__ */ (0, import_jsx_runtime247.jsxs)("div", { className: "flex w-full flex-col gap-5 rounded border border-grid-bright p-6", children: [
                  hitConcurrencyLimit && /* @__PURE__ */ (0, import_jsx_runtime247.jsx)(
                    Callout,
                    {
                      variant: "pricing",
                      cta: /* @__PURE__ */ (0, import_jsx_runtime247.jsx)(
                        LinkButton,
                        {
                          variant: "primary/small",
                          LeadingIcon: import_outline8.ArrowUpCircleIcon,
                          leadingIconClassName: "px-0",
                          to: plansPath(organization),
                          children: "Increase concurrent runs"
                        }
                      ),
                      children: `Some of your runs are being queued because the number of concurrent runs is limited to
            ${currentPlan?.subscription?.limits.concurrentRuns}.`
                    }
                  ),
                  /* @__PURE__ */ (0, import_jsx_runtime247.jsx)(
                    ConcurrentRunsChart,
                    {
                      data: data2.concurrencyData,
                      concurrentRunsLimit: currentPlan?.subscription?.limits.concurrentRuns,
                      hasConcurrencyData: data2.hasConcurrencyData
                    }
                  )
                ] })
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime247.jsxs)("div", { className: "@container", children: [
                /* @__PURE__ */ (0, import_jsx_runtime247.jsx)(Header2, { spacing: !0, children: "Runs" }),
                /* @__PURE__ */ (0, import_jsx_runtime247.jsxs)("div", { className: "flex flex-col gap-5 rounded border border-grid-bright p-6", children: [
                  hitsRunLimit && /* @__PURE__ */ (0, import_jsx_runtime247.jsx)(
                    Callout,
                    {
                      variant: "error",
                      cta: /* @__PURE__ */ (0, import_jsx_runtime247.jsx)(
                        LinkButton,
                        {
                          variant: "primary/small",
                          LeadingIcon: import_outline8.ArrowUpCircleIcon,
                          leadingIconClassName: "px-0",
                          to: plansPath(organization),
                          children: "Upgrade"
                        }
                      ),
                      children: /* @__PURE__ */ (0, import_jsx_runtime247.jsxs)(Paragraph, { variant: "small", className: "text-white", children: [
                        "You have exceeded the monthly",
                        " ",
                        formatNumberCompact(currentPlan?.subscription?.limits.runs ?? 0),
                        " runs limit. Upgrade to a paid plan before",
                        " ",
                        /* @__PURE__ */ (0, import_jsx_runtime247.jsx)(
                          DateTime,
                          {
                            date: data2.periodEnd,
                            includeSeconds: !1,
                            includeTime: !1
                          }
                        ),
                        "."
                      ] })
                    }
                  ),
                  /* @__PURE__ */ (0, import_jsx_runtime247.jsxs)("div", { className: "flex flex-col gap-x-8 @4xl:flex-row", children: [
                    /* @__PURE__ */ (0, import_jsx_runtime247.jsxs)("div", { className: "flex w-full flex-col gap-4", children: [
                      data2.runCostEstimation !== void 0 && data2.projectedRunCostEstimation !== void 0 && /* @__PURE__ */ (0, import_jsx_runtime247.jsxs)("div", { className: "flex w-full items-center gap-6", children: [
                        /* @__PURE__ */ (0, import_jsx_runtime247.jsxs)("div", { className: "flex flex-col gap-2", children: [
                          /* @__PURE__ */ (0, import_jsx_runtime247.jsx)(Header3, { className: "", children: "Month-to-date" }),
                          /* @__PURE__ */ (0, import_jsx_runtime247.jsx)("p", { className: "text-3xl font-medium text-text-bright", children: formatCurrency(data2.runCostEstimation, !1) })
                        ] }),
                        /* @__PURE__ */ (0, import_jsx_runtime247.jsx)(import_solid98.ArrowRightIcon, { className: "h-6 w-6 text-text-dimmed/50" }),
                        /* @__PURE__ */ (0, import_jsx_runtime247.jsxs)("div", { className: "flex flex-col gap-2 text-text-dimmed", children: [
                          /* @__PURE__ */ (0, import_jsx_runtime247.jsx)(Header3, { className: "text-text-dimmed", children: "Projected" }),
                          /* @__PURE__ */ (0, import_jsx_runtime247.jsx)("p", { className: "text-3xl font-medium", children: formatCurrency(data2.projectedRunCostEstimation, !1) })
                        ] })
                      ] }),
                      /* @__PURE__ */ (0, import_jsx_runtime247.jsx)(
                        UsageBar,
                        {
                          numberOfCurrentRuns: data2.runsCount,
                          tierRunLimit: currentPlan?.usage?.runCountCap,
                          projectedRuns: data2.projectedRunsCount,
                          subscribedToPaidTier: (currentPlan && currentPlan.subscription?.isPaying) ?? !1
                        }
                      )
                    ] }),
                    /* @__PURE__ */ (0, import_jsx_runtime247.jsxs)("div", { className: "relative w-full", children: [
                      /* @__PURE__ */ (0, import_jsx_runtime247.jsx)(Header3, { className: "mb-4", children: "Monthly runs" }),
                      !data2.hasMonthlyRunData && /* @__PURE__ */ (0, import_jsx_runtime247.jsx)(Paragraph, { className: "absolute left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2", children: "No runs to show" }),
                      /* @__PURE__ */ (0, import_jsx_runtime247.jsx)(import_recharts4.ResponsiveContainer, { width: "100%", height: 200, children: /* @__PURE__ */ (0, import_jsx_runtime247.jsxs)(
                        import_recharts4.BarChart,
                        {
                          data: data2.monthlyRunsData,
                          margin: {
                            top: 0,
                            right: 0,
                            left: 0,
                            bottom: 0
                          },
                          className: "-ml-7",
                          children: [
                            /* @__PURE__ */ (0, import_jsx_runtime247.jsx)(
                              import_recharts4.XAxis,
                              {
                                dataKey: "name",
                                stroke: "#94A3B8",
                                fontSize: 12,
                                tickLine: !1,
                                axisLine: !1
                              }
                            ),
                            /* @__PURE__ */ (0, import_jsx_runtime247.jsx)(
                              import_recharts4.YAxis,
                              {
                                stroke: "#94A3B8",
                                fontSize: 12,
                                tickLine: !1,
                                axisLine: !1,
                                tickFormatter: (value) => `${value}`
                              }
                            ),
                            /* @__PURE__ */ (0, import_jsx_runtime247.jsx)(
                              import_recharts4.Tooltip,
                              {
                                cursor: { fill: "rgba(255,255,255,0.05)" },
                                content: /* @__PURE__ */ (0, import_jsx_runtime247.jsx)(CustomTooltip2, {})
                              }
                            ),
                            /* @__PURE__ */ (0, import_jsx_runtime247.jsx)(import_recharts4.Bar, { dataKey: "total", fill: "#16A34A", radius: [3, 3, 0, 0] })
                          ]
                        }
                      ) })
                    ] })
                  ] }),
                  /* @__PURE__ */ (0, import_jsx_runtime247.jsxs)("div", { children: [
                    /* @__PURE__ */ (0, import_jsx_runtime247.jsx)(Header3, { className: "mb-4", children: "Daily runs" }),
                    /* @__PURE__ */ (0, import_jsx_runtime247.jsx)(
                      DailyRunsChart,
                      {
                        data: data2.dailyRunsData,
                        hasDailyRunsData: data2.hasDailyRunsData
                      }
                    )
                  ] })
                ] })
              ] })
            ] });
          }
        }
      )
    }
  ) });
}
function LoadingElement({ title: title2 }) {
  return /* @__PURE__ */ (0, import_jsx_runtime247.jsxs)("div", { children: [
    /* @__PURE__ */ (0, import_jsx_runtime247.jsx)(Header2, { spacing: !0, children: title2 }),
    /* @__PURE__ */ (0, import_jsx_runtime247.jsx)("div", { className: "flex h-96 w-full items-center justify-center gap-5 rounded border border-grid-bright p-6", children: /* @__PURE__ */ (0, import_jsx_runtime247.jsx)(Spinner, {}) })
  ] });
}

// app/routes/_app.orgs.$organizationSlug.billing.plans/route.tsx
var route_exports99 = {};
__export(route_exports99, {
  default: () => Page61,
  loader: () => loader85
});
var import_remix_typedjson72 = require("remix-typedjson");

// app/components/billing/v2/PricingCalculator.tsx
var Slider2 = __toESM(require("@radix-ui/react-slider")), import_v27 = require("@trigger.dev/platform/v2"), import_react185 = require("react");
var import_jsx_runtime248 = require("react/jsx-runtime");
function PricingCalculator({ plans }) {
  let [selectedConcurrencyIndex, setSelectedConcurrencyIndex] = (0, import_react185.useState)(0), concurrentRunTiers = [
    { code: "free", upto: plans.free.concurrentRuns?.freeAllowance },
    ...plans.paid.concurrentRuns?.pricing?.tiers ?? []
  ], [runs, setRuns] = (0, import_react185.useState)(0), runBrackets = [
    ...plans.paid.runs?.pricing?.brackets.map((b, index, arr) => ({
      unitCost: b.unitCost,
      from: index === 0 ? 0 : arr[index - 1].upto + 1,
      upto: b.upto ?? arr[index - 1].upto * 10
    })) ?? []
  ], result = (0, import_v27.estimate)({
    usage: { runs, concurrent_runs: concurrentRunTiers[selectedConcurrencyIndex].upto - 1 },
    plans: [plans.free, plans.paid]
  });
  return /* @__PURE__ */ (0, import_jsx_runtime248.jsxs)("div", { className: "flex w-full flex-col gap-4", children: [
    /* @__PURE__ */ (0, import_jsx_runtime248.jsx)(
      ConcurrentRunsSlider,
      {
        options: concurrentRunTiers,
        selectedIndex: selectedConcurrencyIndex,
        setSelectedIndex: setSelectedConcurrencyIndex,
        cost: result?.cost.concurrentRunCost ?? 0
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime248.jsx)(
      RunsSlider,
      {
        brackets: runBrackets,
        runs,
        setRuns,
        cost: result?.cost.runsCost ?? 0
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime248.jsx)(GrandTotal, { cost: result?.cost.total ?? 0 })
  ] });
}
function ConcurrentRunsSlider({
  options: options2,
  selectedIndex,
  setSelectedIndex,
  cost
}) {
  let selectedOption = options2[selectedIndex];
  return /* @__PURE__ */ (0, import_jsx_runtime248.jsxs)("div", { children: [
    /* @__PURE__ */ (0, import_jsx_runtime248.jsxs)("div", { className: "flex", children: [
      /* @__PURE__ */ (0, import_jsx_runtime248.jsxs)("div", { className: "flex w-full flex-col", children: [
        /* @__PURE__ */ (0, import_jsx_runtime248.jsxs)("div", { className: "flex items-center justify-between", children: [
          /* @__PURE__ */ (0, import_jsx_runtime248.jsx)(Header2, { children: /* @__PURE__ */ (0, import_jsx_runtime248.jsx)(
            DefinitionTip,
            {
              content: "The number of runs that can be executed at the same time. Get in touch if you need more than 100.",
              title: "Concurrent runs",
              children: "Concurrent runs"
            }
          ) }),
          /* @__PURE__ */ (0, import_jsx_runtime248.jsxs)(Header2, { children: [
            "Up to ",
            selectedOption.upto
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime248.jsxs)(
          Slider2.Root,
          {
            className: "relative mb-2 mt-4 flex h-5 w-full touch-none select-none items-center",
            value: [selectedIndex],
            onValueChange: (value) => setSelectedIndex(value[0]),
            max: options2.length - 1,
            step: 1,
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime248.jsx)(Slider2.Track, { className: "relative h-[8px] grow rounded-full bg-grid-bright", children: /* @__PURE__ */ (0, import_jsx_runtime248.jsx)(Slider2.Range, { className: "absolute h-full rounded-full bg-primary" }) }),
              /* @__PURE__ */ (0, import_jsx_runtime248.jsx)(
                Slider2.Thumb,
                {
                  className: "block h-5 w-5 rounded-full border-4 border-primary bg-charcoal-850 shadow-[0_1px_3px_4px_rgb(0_0_0_/_0.2),_0_1px_2px_-1px_rgb(0_0_0_/_0.1)] transition hover:border-primary hover:bg-charcoal-800 focus:shadow-[0_1px_3px_4px_rgb(0_0_0_/_0.2),_0_1px_2px_-1px_rgb(0_0_0_/_0.1)] focus:outline-none",
                  "aria-label": "Concurrent runs slider"
                }
              )
            ]
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime248.jsx)("div", { className: "ml-1.5 flex w-[99.85%] items-center justify-between", children: options2.map((tier, i) => /* @__PURE__ */ (0, import_jsx_runtime248.jsx)(Paragraph, { variant: "extra-small", children: tier.upto }, i)) })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime248.jsxs)("div", { className: "flex h-full items-start", children: [
        /* @__PURE__ */ (0, import_jsx_runtime248.jsx)("span", { className: "ml-6 text-text-dimmed", children: "=" }),
        /* @__PURE__ */ (0, import_jsx_runtime248.jsx)(Header2, { className: "min-w-[8ch] text-right text-text-dimmed", children: formatCurrency(cost, !0) })
      ] })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime248.jsx)("hr", { className: "mt-6 border-grid-bright" })
  ] });
}
var runIncrements = 1e4;
function RunsSlider({
  brackets,
  runs,
  setRuns,
  cost
}) {
  let [value, setValue] = (0, import_react185.useState)(0), updateRuns = (0, import_react185.useCallback)((value2) => {
    setValue(value2);
    let r = calculateRuns(value2 / runIncrements, brackets);
    setRuns(r);
  }, []);
  return /* @__PURE__ */ (0, import_jsx_runtime248.jsxs)("div", { children: [
    /* @__PURE__ */ (0, import_jsx_runtime248.jsxs)("div", { className: "flex", children: [
      /* @__PURE__ */ (0, import_jsx_runtime248.jsxs)("div", { className: "flex w-full flex-col", children: [
        /* @__PURE__ */ (0, import_jsx_runtime248.jsxs)("div", { className: "flex items-center justify-between", children: [
          /* @__PURE__ */ (0, import_jsx_runtime248.jsx)(Header2, { children: /* @__PURE__ */ (0, import_jsx_runtime248.jsx)(DefinitionTip, { content: "A single execution of a Job.", title: "Runs", children: "Runs" }) }),
          /* @__PURE__ */ (0, import_jsx_runtime248.jsx)(Header2, { children: formatNumberCompact(runs) })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime248.jsxs)(
          Slider2.Root,
          {
            className: "relative mb-2 mt-4 flex h-5 w-full touch-none select-none items-center",
            value: [value],
            onValueChange: (value2) => updateRuns(value2[0]),
            max: runIncrements,
            step: 1,
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime248.jsx)(Slider2.Track, { className: "relative h-[8px] grow rounded-full bg-grid-bright", children: /* @__PURE__ */ (0, import_jsx_runtime248.jsx)(Slider2.Range, { className: "absolute h-full rounded-full bg-primary" }) }),
              /* @__PURE__ */ (0, import_jsx_runtime248.jsx)(
                Slider2.Thumb,
                {
                  className: "block h-5 w-5 rounded-full border-4 border-primary bg-charcoal-850 shadow-[0_1px_3px_4px_rgb(0_0_0_/_0.2),_0_1px_2px_-1px_rgb(0_0_0_/_0.1)] transition hover:border-primary hover:bg-charcoal-800 focus:shadow-[0_1px_3px_4px_rgb(0_0_0_/_0.2),_0_1px_2px_-1px_rgb(0_0_0_/_0.1)] focus:outline-none",
                  "aria-label": "Concurrent runs slider"
                }
              )
            ]
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime248.jsxs)("div", { className: "relative w-full", children: [
          brackets.map((bracket, i, arr) => {
            let percentagePerBracket = 1 / arr.length;
            return /* @__PURE__ */ (0, import_jsx_runtime248.jsx)(
              SliderMarker,
              {
                percentage: i / (arr.length - 1) * percentagePerBracket * (arr.length - 1),
                alignment: i === 0 ? "left" : "center",
                text: formatNumberCompact(bracket.from)
              },
              i
            );
          }),
          /* @__PURE__ */ (0, import_jsx_runtime248.jsx)(
            SliderMarker,
            {
              percentage: 1,
              alignment: "right",
              text: formatNumberCompact(brackets[brackets.length - 1].upto)
            }
          )
        ] })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime248.jsxs)("div", { className: "flex h-full items-start", children: [
        /* @__PURE__ */ (0, import_jsx_runtime248.jsx)("span", { className: "ml-6 text-text-dimmed", children: "=" }),
        /* @__PURE__ */ (0, import_jsx_runtime248.jsx)(Header2, { className: "min-w-[8ch] text-right text-text-dimmed", children: formatCurrency(cost, !0) })
      ] })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime248.jsx)("hr", { className: "mt-6 border-grid-bright" })
  ] });
}
function calculateRuns(percentage, brackets) {
  let buckets = brackets.length, bucket = Math.min(Math.floor(percentage * buckets), brackets.length - 1), percentagePerBucket = 1 / buckets, bracket = brackets[bucket], from = bracket.from, upto = bracket.upto, percentageIntoBracket = (percentage - bucket * percentagePerBucket) / percentagePerBucket;
  return Math.floor(from + (upto - from) * percentageIntoBracket);
}
function GrandTotal({ cost }) {
  return /* @__PURE__ */ (0, import_jsx_runtime248.jsxs)("div", { className: "flex justify-between", children: [
    /* @__PURE__ */ (0, import_jsx_runtime248.jsx)(Header2, { children: "Total monthly estimate" }),
    /* @__PURE__ */ (0, import_jsx_runtime248.jsx)(Header2, { children: formatCurrency(cost, !0) })
  ] });
}
function SliderMarker({
  percentage,
  alignment,
  text
}) {
  return /* @__PURE__ */ (0, import_jsx_runtime248.jsx)(
    "div",
    {
      className: "absolute top-0 h-4",
      style: {
        left: `${percentage * 100}%`
      },
      children: /* @__PURE__ */ (0, import_jsx_runtime248.jsx)(
        "div",
        {
          className: cn(
            "absolute flex items-center",
            alignment === "left" ? "left-0 justify-start" : alignment === "center" ? "-translate-x-1/2 justify-center" : "justify-middle right-0"
          ),
          children: /* @__PURE__ */ (0, import_jsx_runtime248.jsx)(Paragraph, { variant: "extra-small", children: text })
        }
      )
    }
  );
}

// app/components/billing/v2/PricingTiers.tsx
var import_react186 = require("@conform-to/react"), import_zod168 = require("@conform-to/zod"), import_solid99 = require("@heroicons/react/24/solid"), import_react187 = require("@remix-run/react"), import_v28 = require("@trigger.dev/platform/v2"), import_react188 = require("react");

// app/components/billing/v2/RunsVolumeDiscountTable.tsx
var import_jsx_runtime249 = require("react/jsx-runtime");
function RunsVolumeDiscountTable({
  className,
  hideHeader = !1,
  brackets
}) {
  let runsVolumeDiscountRow = "flex justify-between whitespace-nowrap border-b gap-16 border-grid-bright last:pb-0 last:border-none py-2", bracketData = bracketInfo(brackets);
  return /* @__PURE__ */ (0, import_jsx_runtime249.jsxs)("div", { className, children: [
    hideHeader ? null : /* @__PURE__ */ (0, import_jsx_runtime249.jsx)(Header2, { className: "mb-2", children: "Runs volume discount" }),
    /* @__PURE__ */ (0, import_jsx_runtime249.jsx)("ul", { children: bracketData.map((bracket, index) => /* @__PURE__ */ (0, import_jsx_runtime249.jsxs)("li", { className: runsVolumeDiscountRow, children: [
      /* @__PURE__ */ (0, import_jsx_runtime249.jsx)(Paragraph, { variant: "small", children: bracket.range }),
      /* @__PURE__ */ (0, import_jsx_runtime249.jsx)(Paragraph, { variant: "small", children: bracket.costLabel })
    ] }, index)) })
  ] });
}
function bracketInfo(brackets) {
  return brackets.map((bracket, index) => {
    let { upto, unitCost } = bracket;
    if (index === 0)
      return {
        range: `First ${formatNumberCompact(upto)}/mo`,
        costLabel: "Free"
      };
    let from = brackets[index - 1].upto, fromFormatted = formatNumberCompact(from), toFormatted = upto ? formatNumberCompact(upto) : void 0, costLabel = `$${(unitCost * 1e3).toFixed(2)}/1,000`;
    return upto ? {
      range: `${fromFormatted}\u2013${toFormatted}`,
      costLabel
    } : {
      range: `${fromFormatted} +`,
      costLabel
    };
  });
}

// app/components/billing/v2/PricingTiers.tsx
var import_jsx_runtime250 = require("react/jsx-runtime"), pricingDefinitions2 = {
  concurrentRuns: {
    title: "Concurrent runs",
    content: "The number of runs that can be executed at the same time."
  },
  jobRuns: {
    title: "Job runs",
    content: "A single execution of a job."
  },
  jobs: {
    title: "Jobs",
    content: "A durable function that can be executed on a schedule or in response to an event."
  },
  tasks: {
    title: "Tasks",
    content: "The individual building blocks of a job run."
  },
  events: {
    title: "Events",
    content: "Events trigger jobs to start running."
  },
  integrations: {
    title: "Integrations",
    content: "Easily subscribe to webhooks and perform actions using APIs."
  }
};
function PricingTiers({
  organizationSlug,
  plans,
  className,
  showActionText = !0,
  freeButtonPath
}) {
  let currentPlan = useCurrentPlan(), currentSubscription = currentPlan?.subscription;
  return currentPlan?.subscription?.canceledAt && (currentSubscription = void 0), /* @__PURE__ */ (0, import_jsx_runtime250.jsxs)(
    "div",
    {
      className: cn(
        "flex min-w-full flex-col items-start justify-center gap-4 md:flex-row",
        className
      ),
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime250.jsx)(
          TierFree2,
          {
            plan: plans.free,
            currentSubscription,
            organizationSlug,
            showActionText,
            buttonPath: freeButtonPath
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime250.jsx)(
          TierPro2,
          {
            plan: plans.paid,
            currentSubscription,
            organizationSlug,
            showActionText
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime250.jsx)(TierEnterprise2, {})
      ]
    }
  );
}
function TierFree2({
  plan,
  organizationSlug,
  showActionText,
  currentSubscription,
  buttonPath
}) {
  let lastSubmission = (0, import_react187.useActionData)(), [form] = (0, import_react186.useForm)({
    id: "subscribe",
    // TODO: type this
    lastSubmission,
    onValidate({ formData }) {
      return (0, import_zod168.parse)(formData, { schema: import_v28.SetPlanBodySchema });
    }
  }), navigation = (0, import_react187.useNavigation)(), isLoading2 = (navigation.state === "submitting" || navigation.state === "loading") && navigation.formData?.get("type") === "free", isCurrentPlan = currentSubscription?.isPaying === void 0 || currentSubscription?.isPaying === !1, actionText = "Select plan";
  return showActionText && (isCurrentPlan ? actionText = "Current Plan" : actionText = "Downgrade"), /* @__PURE__ */ (0, import_jsx_runtime250.jsx)(TierContainer2, { children: /* @__PURE__ */ (0, import_jsx_runtime250.jsxs)(import_react187.Form, { action: `/resources/${organizationSlug}/subscribe`, method: "post", ...form.props, children: [
    /* @__PURE__ */ (0, import_jsx_runtime250.jsx)(Header, { title: plan.title, cost: 0 }),
    /* @__PURE__ */ (0, import_jsx_runtime250.jsxs)(TierLimit2, { children: [
      "Up to ",
      plan.concurrentRuns?.freeAllowance,
      " ",
      /* @__PURE__ */ (0, import_jsx_runtime250.jsx)(
        DefinitionTip,
        {
          title: pricingDefinitions2.concurrentRuns.title,
          content: pricingDefinitions2.concurrentRuns.content,
          children: pricingDefinitions2.concurrentRuns.title
        }
      )
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime250.jsx)("input", { type: "hidden", name: "type", value: "free" }),
    /* @__PURE__ */ (0, import_jsx_runtime250.jsx)("div", { className: "py-6", children: buttonPath ? /* @__PURE__ */ (0, import_jsx_runtime250.jsx)(
      LinkButton,
      {
        variant: "tertiary/large",
        fullWidth: !0,
        className: "text-md font-medium",
        to: buttonPath,
        children: actionText
      }
    ) : /* @__PURE__ */ (0, import_jsx_runtime250.jsx)(
      Button,
      {
        variant: "tertiary/large",
        fullWidth: !0,
        className: "text-md font-medium",
        disabled: isLoading2 || isCurrentPlan,
        children: isLoading2 ? /* @__PURE__ */ (0, import_jsx_runtime250.jsxs)("div", { className: "flex items-center gap-2", children: [
          /* @__PURE__ */ (0, import_jsx_runtime250.jsx)(Spinner, { color: "white" }),
          "Updating plan"
        ] }) : actionText
      }
    ) }),
    /* @__PURE__ */ (0, import_jsx_runtime250.jsxs)("ul", { className: "flex flex-col gap-2.5", children: [
      /* @__PURE__ */ (0, import_jsx_runtime250.jsxs)(FeatureItem2, { checked: !0, children: [
        "Up to ",
        plan.runs?.freeAllowance ? formatNumberCompact(plan.runs.freeAllowance) : "",
        " ",
        /* @__PURE__ */ (0, import_jsx_runtime250.jsx)(
          DefinitionTip,
          {
            title: pricingDefinitions2.jobRuns.title,
            content: pricingDefinitions2.jobRuns.content,
            children: pricingDefinitions2.jobRuns.title
          }
        )
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime250.jsxs)(FeatureItem2, { checked: !0, children: [
        "Unlimited",
        " ",
        /* @__PURE__ */ (0, import_jsx_runtime250.jsx)(
          DefinitionTip,
          {
            title: pricingDefinitions2.jobs.title,
            content: pricingDefinitions2.jobs.content,
            children: "jobs"
          }
        )
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime250.jsxs)(FeatureItem2, { checked: !0, children: [
        "Unlimited",
        " ",
        /* @__PURE__ */ (0, import_jsx_runtime250.jsx)(
          DefinitionTip,
          {
            title: pricingDefinitions2.tasks.title,
            content: pricingDefinitions2.tasks.content,
            children: "tasks"
          }
        )
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime250.jsxs)(FeatureItem2, { checked: !0, children: [
        "Unlimited",
        " ",
        /* @__PURE__ */ (0, import_jsx_runtime250.jsx)(
          DefinitionTip,
          {
            title: pricingDefinitions2.events.title,
            content: pricingDefinitions2.events.content,
            children: "events"
          }
        )
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime250.jsx)(FeatureItem2, { checked: !0, children: "Unlimited team members" }),
      /* @__PURE__ */ (0, import_jsx_runtime250.jsx)(FeatureItem2, { checked: !0, children: "24 hour log retention" }),
      /* @__PURE__ */ (0, import_jsx_runtime250.jsx)(FeatureItem2, { checked: !0, children: "Community support" }),
      /* @__PURE__ */ (0, import_jsx_runtime250.jsx)(FeatureItem2, { children: "Custom integrations" }),
      /* @__PURE__ */ (0, import_jsx_runtime250.jsx)(FeatureItem2, { children: "Role-based access control" }),
      /* @__PURE__ */ (0, import_jsx_runtime250.jsx)(FeatureItem2, { children: "SSO" }),
      /* @__PURE__ */ (0, import_jsx_runtime250.jsx)(FeatureItem2, { children: "On-prem option" })
    ] })
  ] }) });
}
function TierPro2({
  plan,
  organizationSlug,
  showActionText,
  currentSubscription
}) {
  let lastSubmission = (0, import_react187.useActionData)(), [form] = (0, import_react186.useForm)({
    id: "subscribe",
    // TODO: type this
    lastSubmission,
    onValidate({ formData }) {
      return (0, import_zod168.parse)(formData, { schema: import_v28.SetPlanBodySchema });
    }
  }), navigation = (0, import_react187.useNavigation)(), isLoading2 = (navigation.state === "submitting" || navigation.state === "loading") && navigation.formData?.get("planCode") === plan.code, currentConcurrencyTier = currentSubscription?.plan.concurrentRuns.pricing?.code, [concurrentBracketCode, setConcurrentBracketCode] = (0, import_react188.useState)(
    currentConcurrencyTier ?? plan.concurrentRuns?.pricing?.tiers[0].code
  ), concurrencyTiers = plan.concurrentRuns?.pricing?.tiers ?? [], selectedTier = concurrencyTiers.find((c) => c.code === concurrentBracketCode), freeRunCount = plan.runs?.pricing?.brackets[0].upto ?? 0, mostExpensiveRunCost = plan.runs?.pricing?.brackets[1]?.unitCost ?? 0, isCurrentPlan = currentConcurrencyTier === concurrentBracketCode, actionText = "Select plan";
  if (showActionText)
    if (isCurrentPlan)
      actionText = "Current Plan";
    else {
      let currentTierIndex = concurrencyTiers.findIndex((c) => c.code === currentConcurrencyTier), selectedTierIndex = concurrencyTiers.findIndex((c) => c.code === concurrentBracketCode);
      actionText = currentTierIndex < selectedTierIndex ? "Upgrade" : "Downgrade";
    }
  return /* @__PURE__ */ (0, import_jsx_runtime250.jsx)(TierContainer2, { isHighlighted: !0, children: /* @__PURE__ */ (0, import_jsx_runtime250.jsxs)(import_react187.Form, { action: `/resources/${organizationSlug}/subscribe`, method: "post", ...form.props, children: [
    /* @__PURE__ */ (0, import_jsx_runtime250.jsx)(Header, { title: plan.title, isHighlighted: !0, cost: selectedTier?.tierCost }),
    /* @__PURE__ */ (0, import_jsx_runtime250.jsx)("div", { className: "mb-2 mt-6 font-sans text-sm font-normal text-text-bright", children: /* @__PURE__ */ (0, import_jsx_runtime250.jsx)(
      DefinitionTip,
      {
        title: pricingDefinitions2.concurrentRuns.title,
        content: pricingDefinitions2.concurrentRuns.content,
        children: pricingDefinitions2.concurrentRuns.title
      }
    ) }),
    /* @__PURE__ */ (0, import_jsx_runtime250.jsx)("input", { type: "hidden", name: "type", value: "paid" }),
    /* @__PURE__ */ (0, import_jsx_runtime250.jsx)("input", { type: "hidden", name: "planCode", value: plan.code }),
    /* @__PURE__ */ (0, import_jsx_runtime250.jsx)(
      SegmentedControl,
      {
        name: "concurrentRunBracket",
        options: concurrencyTiers.map((c) => ({ label: `Up to ${c.upto}`, value: c.code })),
        fullWidth: !0,
        value: concurrentBracketCode,
        variant: "primary",
        onChange: (v) => setConcurrentBracketCode(v)
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime250.jsx)("div", { className: "py-6", children: /* @__PURE__ */ (0, import_jsx_runtime250.jsx)(
      Button,
      {
        variant: "primary/large",
        fullWidth: !0,
        className: "text-md font-medium",
        type: "submit",
        disabled: isLoading2 || isCurrentPlan,
        children: isLoading2 ? /* @__PURE__ */ (0, import_jsx_runtime250.jsxs)("div", { className: "flex items-center gap-2", children: [
          /* @__PURE__ */ (0, import_jsx_runtime250.jsx)(Spinner, { color: "white" }),
          "Updating plan"
        ] }) : actionText
      }
    ) }),
    /* @__PURE__ */ (0, import_jsx_runtime250.jsxs)("ul", { className: "flex flex-col gap-2.5", children: [
      /* @__PURE__ */ (0, import_jsx_runtime250.jsxs)(FeatureItem2, { checked: !0, children: [
        "Includes ",
        freeRunCount ? formatNumberCompact(freeRunCount) : "",
        " ",
        /* @__PURE__ */ (0, import_jsx_runtime250.jsx)(
          DefinitionTip,
          {
            title: pricingDefinitions2.jobRuns.title,
            content: pricingDefinitions2.jobRuns.content,
            children: pricingDefinitions2.jobRuns.title
          }
        ),
        ", then",
        " ",
        /* @__PURE__ */ (0, import_jsx_runtime250.jsxs)(
          DefinitionTip,
          {
            title: "Runs volume discount",
            content: /* @__PURE__ */ (0, import_jsx_runtime250.jsx)(RunsVolumeDiscountTable, { hideHeader: !0, brackets: plan.runs?.pricing?.brackets ?? [] }),
            children: [
              "<",
              " $",
              (mostExpensiveRunCost * 1e3).toFixed(2),
              "/1K runs"
            ]
          }
        )
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime250.jsxs)(FeatureItem2, { checked: !0, children: [
        "Unlimited",
        " ",
        /* @__PURE__ */ (0, import_jsx_runtime250.jsx)(
          DefinitionTip,
          {
            title: pricingDefinitions2.jobs.title,
            content: pricingDefinitions2.jobs.content,
            children: "jobs"
          }
        )
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime250.jsxs)(FeatureItem2, { checked: !0, children: [
        "Unlimited",
        " ",
        /* @__PURE__ */ (0, import_jsx_runtime250.jsx)(
          DefinitionTip,
          {
            title: pricingDefinitions2.tasks.title,
            content: pricingDefinitions2.tasks.content,
            children: "tasks"
          }
        )
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime250.jsxs)(FeatureItem2, { checked: !0, children: [
        "Unlimited",
        " ",
        /* @__PURE__ */ (0, import_jsx_runtime250.jsx)(
          DefinitionTip,
          {
            title: pricingDefinitions2.events.title,
            content: pricingDefinitions2.events.content,
            children: "events"
          }
        )
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime250.jsx)(FeatureItem2, { checked: !0, children: "Unlimited team members" }),
      /* @__PURE__ */ (0, import_jsx_runtime250.jsx)(FeatureItem2, { checked: !0, children: "7 day log retention" }),
      /* @__PURE__ */ (0, import_jsx_runtime250.jsx)(FeatureItem2, { checked: !0, children: "Dedicated Slack support" }),
      /* @__PURE__ */ (0, import_jsx_runtime250.jsx)(FeatureItem2, { children: "Custom integrations" }),
      /* @__PURE__ */ (0, import_jsx_runtime250.jsx)(FeatureItem2, { children: "Role-based access control" }),
      /* @__PURE__ */ (0, import_jsx_runtime250.jsx)(FeatureItem2, { children: "SSO" }),
      /* @__PURE__ */ (0, import_jsx_runtime250.jsx)(FeatureItem2, { children: "On-prem option" })
    ] })
  ] }) });
}
function TierEnterprise2() {
  return /* @__PURE__ */ (0, import_jsx_runtime250.jsxs)(TierContainer2, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime250.jsx)(Header, { title: "Enterprise" }),
    /* @__PURE__ */ (0, import_jsx_runtime250.jsxs)(TierLimit2, { children: [
      "Flexible",
      " ",
      /* @__PURE__ */ (0, import_jsx_runtime250.jsx)(
        DefinitionTip,
        {
          title: pricingDefinitions2.concurrentRuns.title,
          content: pricingDefinitions2.concurrentRuns.content,
          children: pricingDefinitions2.concurrentRuns.title
        }
      )
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime250.jsx)("div", { className: "py-6", children: /* @__PURE__ */ (0, import_jsx_runtime250.jsx)(
      Feedback,
      {
        button: /* @__PURE__ */ (0, import_jsx_runtime250.jsx)(Button, { variant: "secondary/large", fullWidth: !0, className: "text-md font-medium", children: "Contact us" }),
        defaultValue: "enterprise"
      }
    ) }),
    /* @__PURE__ */ (0, import_jsx_runtime250.jsxs)("ul", { className: "flex flex-col gap-2.5", children: [
      /* @__PURE__ */ (0, import_jsx_runtime250.jsxs)(FeatureItem2, { checked: !0, children: [
        "Flexible",
        " ",
        /* @__PURE__ */ (0, import_jsx_runtime250.jsx)(
          DefinitionTip,
          {
            title: pricingDefinitions2.jobRuns.title,
            content: pricingDefinitions2.jobRuns.content,
            children: pricingDefinitions2.jobRuns.title
          }
        )
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime250.jsxs)(FeatureItem2, { checked: !0, children: [
        "Unlimited",
        " ",
        /* @__PURE__ */ (0, import_jsx_runtime250.jsx)(
          DefinitionTip,
          {
            title: pricingDefinitions2.jobs.title,
            content: pricingDefinitions2.jobs.content,
            children: "jobs"
          }
        )
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime250.jsxs)(FeatureItem2, { checked: !0, children: [
        "Unlimited",
        " ",
        /* @__PURE__ */ (0, import_jsx_runtime250.jsx)(
          DefinitionTip,
          {
            title: pricingDefinitions2.tasks.title,
            content: pricingDefinitions2.tasks.content,
            children: "tasks"
          }
        )
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime250.jsxs)(FeatureItem2, { checked: !0, children: [
        "Unlimited",
        " ",
        /* @__PURE__ */ (0, import_jsx_runtime250.jsx)(
          DefinitionTip,
          {
            title: pricingDefinitions2.events.title,
            content: pricingDefinitions2.events.content,
            children: "events"
          }
        )
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime250.jsx)(FeatureItem2, { checked: !0, children: "Unlimited team members" }),
      /* @__PURE__ */ (0, import_jsx_runtime250.jsx)(FeatureItem2, { checked: !0, children: "30 day log retention" }),
      /* @__PURE__ */ (0, import_jsx_runtime250.jsx)(FeatureItem2, { checked: !0, children: "Priority support" }),
      /* @__PURE__ */ (0, import_jsx_runtime250.jsxs)(FeatureItem2, { checked: !0, children: [
        "Custom",
        " ",
        /* @__PURE__ */ (0, import_jsx_runtime250.jsx)(
          DefinitionTip,
          {
            title: pricingDefinitions2.integrations.title,
            content: pricingDefinitions2.integrations.content,
            children: pricingDefinitions2.integrations.title
          }
        )
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime250.jsx)(FeatureItem2, { checked: !0, children: "Role-based access control" }),
      /* @__PURE__ */ (0, import_jsx_runtime250.jsx)(FeatureItem2, { checked: !0, children: "SSO" }),
      /* @__PURE__ */ (0, import_jsx_runtime250.jsx)(FeatureItem2, { checked: !0, children: "On-prem option" })
    ] })
  ] });
}
function TierContainer2({
  children,
  isHighlighted
}) {
  return /* @__PURE__ */ (0, import_jsx_runtime250.jsx)(
    "div",
    {
      className: cn(
        "flex w-full min-w-[16rem] flex-col rounded-md border p-6",
        isHighlighted ? "border-primary" : "border-grid-bright"
      ),
      children
    }
  );
}
function Header({
  title: title2,
  cost: flatCost,
  isHighlighted
}) {
  return /* @__PURE__ */ (0, import_jsx_runtime250.jsxs)("div", { className: "flex flex-col gap-2", children: [
    /* @__PURE__ */ (0, import_jsx_runtime250.jsx)(
      "h2",
      {
        className: cn("text-xl font-medium", isHighlighted ? "text-primary" : "text-text-dimmed"),
        children: title2
      }
    ),
    flatCost === 0 || flatCost ? /* @__PURE__ */ (0, import_jsx_runtime250.jsxs)("h3", { className: "text-4xl font-medium text-text-bright", children: [
      "$",
      flatCost,
      /* @__PURE__ */ (0, import_jsx_runtime250.jsx)("span", { className: "text-2sm font-normal tracking-wide text-text-dimmed", children: "/month" })
    ] }) : /* @__PURE__ */ (0, import_jsx_runtime250.jsx)("h2", { className: "text-4xl font-medium", children: "Custom" })
  ] });
}
function TierLimit2({ children }) {
  return /* @__PURE__ */ (0, import_jsx_runtime250.jsxs)("div", { children: [
    /* @__PURE__ */ (0, import_jsx_runtime250.jsx)("hr", { className: "my-[1.9rem]" }),
    /* @__PURE__ */ (0, import_jsx_runtime250.jsx)("div", { className: "mb-[0.6rem] mt-6 font-sans text-sm font-normal text-text-bright", children })
  ] });
}
function FeatureItem2({ checked, children }) {
  return /* @__PURE__ */ (0, import_jsx_runtime250.jsxs)("li", { className: "flex items-center gap-2", children: [
    checked ? /* @__PURE__ */ (0, import_jsx_runtime250.jsx)(import_solid99.CheckIcon, { className: "h-4 w-4 text-primary" }) : /* @__PURE__ */ (0, import_jsx_runtime250.jsx)(import_solid99.XMarkIcon, { className: "h-4 w-4 text-charcoal-500" }),
    /* @__PURE__ */ (0, import_jsx_runtime250.jsx)(
      "div",
      {
        className: cn(
          "font-sans text-sm font-normal",
          checked ? "text-text-bright" : "text-text-dimmed"
        ),
        children
      }
    )
  ] });
}

// app/presenters/OrgBillingPlanPresenter.ts
var OrgBillingPlanPresenter = class extends BasePresenter {
  async call({ slug: slug3, isManagedCloud: isManagedCloud2 }) {
    let plans = await new BillingService(isManagedCloud2).getPlans();
    if (plans === void 0)
      return;
    let organization = await this._replica.organization.findFirst({
      where: {
        slug: slug3
      }
    });
    if (!organization)
      return;
    let maxConcurrency = await this._replica.$queryRaw`WITH events AS (
      SELECT
        re.event_time,
        re.organization_id,
        re.event_type,
        SUM(re.event_type) OVER (PARTITION BY re.organization_id ORDER BY re.event_time) AS running_total
      FROM
        triggerdotdev_events.run_executions re
      WHERE
        re.organization_id = ${organization.id}
        AND re.event_time >= DATE_TRUNC('month',
        CURRENT_DATE)
    )
    SELECT
      organization_id, MAX(running_total) AS max_concurrent_runs
    FROM
      events
    GROUP BY
      organization_id;`;
    return {
      plans,
      maxConcurrency: maxConcurrency.at(0) !== void 0 ? Number(maxConcurrency[0].max_concurrent_runs) : void 0
    };
  }
};

// app/routes/_app.orgs.$organizationSlug.billing.plans/route.tsx
var import_jsx_runtime251 = require("react/jsx-runtime");
async function loader85({ params, request }) {
  let { organizationSlug } = OrganizationParamsSchema.parse(params), { isManagedCloud: isManagedCloud2 } = featuresForRequest(request);
  if (!isManagedCloud2)
    return (0, import_remix_typedjson72.redirect)(organizationBillingPath({ slug: organizationSlug }));
  let result = await new OrgBillingPlanPresenter().call({ slug: organizationSlug, isManagedCloud: isManagedCloud2 });
  if (!result)
    throw new Response(null, { status: 404 });
  return (0, import_remix_typedjson72.typedjson)({
    plans: result.plans,
    maxConcurrency: result.maxConcurrency,
    organizationSlug
  });
}
function Page61() {
  let { plans, maxConcurrency, organizationSlug } = (0, import_remix_typedjson72.useTypedLoaderData)(), currentPlan = useCurrentPlan(), hitConcurrencyLimit = currentPlan?.subscription?.limits.concurrentRuns && maxConcurrency ? maxConcurrency >= currentPlan.subscription.limits.concurrentRuns : !1, hitRunLimit = currentPlan?.usage?.runCountCap ? currentPlan.usage.currentRunCount > currentPlan.usage.runCountCap : !1;
  return /* @__PURE__ */ (0, import_jsx_runtime251.jsxs)("div", { className: "flex flex-col gap-4 px-4", children: [
    hitConcurrencyLimit && /* @__PURE__ */ (0, import_jsx_runtime251.jsxs)(Callout, { variant: "pricing", children: [
      "Some of your runs are being queued because your run concurrency is limited to",
      " ",
      currentPlan?.subscription?.limits.concurrentRuns,
      "."
    ] }),
    hitRunLimit && /* @__PURE__ */ (0, import_jsx_runtime251.jsx)(Callout, { variant: "error", children: `You have exceeded the monthly
          ${formatNumberCompact(currentPlan.subscription.limits.runs)} runs limit. Upgrade so you
          can continue to perform runs.` }),
    /* @__PURE__ */ (0, import_jsx_runtime251.jsx)(PricingTiers, { organizationSlug, plans }),
    /* @__PURE__ */ (0, import_jsx_runtime251.jsxs)("div", { children: [
      /* @__PURE__ */ (0, import_jsx_runtime251.jsx)(Header2, { spacing: !0, children: "Estimate your usage" }),
      /* @__PURE__ */ (0, import_jsx_runtime251.jsxs)("div", { className: "flex h-full w-full rounded-md border border-grid-bright p-6", children: [
        /* @__PURE__ */ (0, import_jsx_runtime251.jsx)(PricingCalculator, { plans }),
        /* @__PURE__ */ (0, import_jsx_runtime251.jsx)("div", { className: "mx-6 min-h-full w-px bg-grid-bright" }),
        /* @__PURE__ */ (0, import_jsx_runtime251.jsx)(RunsVolumeDiscountTable, { brackets: plans.paid.runs?.pricing?.brackets ?? [] })
      ] })
    ] })
  ] });
}

// app/routes/_app.orgs.$organizationSlug_.projects.new/route.tsx
var route_exports100 = {};
__export(route_exports100, {
  action: () => action38,
  default: () => Page62,
  loader: () => loader86
});
var import_react189 = require("@conform-to/react"), import_zod169 = require("@conform-to/zod"), import_node11 = require("@remix-run/node"), import_react190 = require("@remix-run/react"), import_remix_typedjson73 = require("remix-typedjson"), import_tiny_invariant7 = __toESM(require("tiny-invariant")), import_zod170 = require("zod");

// app/components/primitives/FormTitle.tsx
var import_jsx_runtime252 = require("react/jsx-runtime");
function FormTitle({
  title: title2,
  description,
  LeadingIcon,
  divide = !0,
  className
}) {
  return /* @__PURE__ */ (0, import_jsx_runtime252.jsxs)(
    "div",
    {
      className: cn(
        "mb-4 flex flex-col gap-3 pb-4",
        divide ? "border-b border-grid-bright" : "",
        className
      ),
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime252.jsxs)("div", { className: "flex items-center gap-2", children: [
          LeadingIcon && /* @__PURE__ */ (0, import_jsx_runtime252.jsx)("div", { className: "shrink-0 justify-start", children: typeof LeadingIcon == "string" ? /* @__PURE__ */ (0, import_jsx_runtime252.jsx)(NamedIcon, { name: LeadingIcon, className: cn("h-7 w-7") }) : LeadingIcon }),
          /* @__PURE__ */ (0, import_jsx_runtime252.jsx)(Header1, { children: title2 })
        ] }),
        description && /* @__PURE__ */ (0, import_jsx_runtime252.jsx)(Paragraph, { variant: "small", children: description })
      ]
    }
  );
}

// app/routes/_app.orgs.$organizationSlug_.projects.new/route.tsx
var import_jsx_runtime253 = require("react/jsx-runtime");
async function loader86({ params, request }) {
  let userId = await requireUserId(request), { organizationSlug } = OrganizationParamsSchema.parse(params), organization = await prisma.organization.findUnique({
    where: { slug: organizationSlug, members: { some: { userId } } },
    select: {
      id: !0,
      title: !0,
      v3Enabled: !0,
      v2Enabled: !0,
      hasRequestedV3: !0,
      _count: {
        select: {
          projects: {
            where: {
              deletedAt: null
            }
          }
        }
      }
    }
  });
  if (!organization)
    throw new Response(null, { status: 404, statusText: "Organization not found" });
  let { isManagedCloud: isManagedCloud2, v3Enabled } = featuresForRequest(request);
  if (isManagedCloud2 && v3Enabled && !organization.v3Enabled)
    return (0, import_remix_typedjson73.redirect)(selectPlanPath({ slug: organizationSlug }));
  let url = new URL(request.url), message = url.searchParams.get("message");
  return (0, import_remix_typedjson73.typedjson)({
    organization: {
      id: organization.id,
      title: organization.title,
      slug: organizationSlug,
      projectsCount: organization._count.projects,
      v3Enabled: organization.v3Enabled,
      v2Enabled: organization.v2Enabled,
      hasRequestedV3: organization.hasRequestedV3
    },
    defaultVersion: url.searchParams.get("version") ?? "v2",
    message: message ? decodeURIComponent(message) : void 0
  });
}
var schema13 = import_zod170.z.object({
  projectName: import_zod170.z.string().min(3, "Project name must have at least 3 characters").max(50),
  projectVersion: import_zod170.z.enum(["v2", "v3"])
}), action38 = async ({ request, params }) => {
  let userId = await requireUserId(request), { organizationSlug } = params;
  (0, import_tiny_invariant7.default)(organizationSlug, "organizationSlug is required");
  let formData = await request.formData(), submission = (0, import_zod169.parse)(formData, { schema: schema13 });
  if (!submission.value || submission.intent !== "submit")
    return (0, import_node11.json)(submission);
  try {
    let project = await createProject({
      organizationSlug,
      name: submission.value.projectName,
      userId,
      version: submission.value.projectVersion
    });
    return redirectWithSuccessMessage(
      projectPath(project.organization, project),
      request,
      `${submission.value.projectName} created`
    );
  } catch (error) {
    return (0, import_node11.json)({ errors: { body: error.message } }, { status: 400 });
  }
};
function Page62() {
  let { organization, message } = (0, import_remix_typedjson73.useTypedLoaderData)(), lastSubmission = (0, import_react190.useActionData)(), { v3Enabled, isManagedCloud: isManagedCloud2 } = useFeatures(), canCreateV3Projects = organization.v3Enabled && v3Enabled, canCreateV2Projects = organization.v2Enabled || !isManagedCloud2, [form, { projectName, projectVersion }] = (0, import_react189.useForm)({
    id: "create-project",
    // TODO: type this
    lastSubmission,
    onValidate({ formData }) {
      return (0, import_zod169.parse)(formData, { schema: schema13 });
    }
  });
  return /* @__PURE__ */ (0, import_jsx_runtime253.jsx)(MainCenteredContainer, { children: /* @__PURE__ */ (0, import_jsx_runtime253.jsxs)("div", { children: [
    /* @__PURE__ */ (0, import_jsx_runtime253.jsx)(
      FormTitle,
      {
        LeadingIcon: "folder",
        title: "Create a new project",
        description: `This will create a new project in your "${organization.title}" organization.`
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime253.jsxs)(import_react190.Form, { method: "post", ...form.props, children: [
      message && /* @__PURE__ */ (0, import_jsx_runtime253.jsx)(Callout, { variant: "success", className: "mb-4", children: message }),
      /* @__PURE__ */ (0, import_jsx_runtime253.jsxs)(Fieldset, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime253.jsxs)(InputGroup, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime253.jsx)(Label, { htmlFor: projectName.id, children: "Project name" }),
          /* @__PURE__ */ (0, import_jsx_runtime253.jsx)(
            Input,
            {
              ...import_react189.conform.input(projectName, { type: "text" }),
              placeholder: "Your project name",
              icon: "folder",
              autoFocus: !0
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime253.jsx)(FormError, { id: projectName.errorId, children: projectName.error })
        ] }),
        canCreateV2Projects && canCreateV3Projects ? /* @__PURE__ */ (0, import_jsx_runtime253.jsxs)(InputGroup, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime253.jsx)(Label, { htmlFor: projectVersion.id, children: "Project version" }),
          /* @__PURE__ */ (0, import_jsx_runtime253.jsxs)(
            Select2,
            {
              ...import_react189.conform.select(projectVersion),
              defaultValue: void 0,
              variant: "tertiary/medium",
              placeholder: "Select version",
              dropdownIcon: !0,
              text: (value) => {
                switch (value) {
                  case "v2":
                    return "Version 2";
                  case "v3":
                    return "Version 3";
                }
              },
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime253.jsx)(SelectItem2, { value: "v2", children: "Version 2" }),
                /* @__PURE__ */ (0, import_jsx_runtime253.jsx)(SelectItem2, { value: "v3", children: "Version 3 (Developer Preview)" })
              ]
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime253.jsx)(FormError, { id: projectVersion.errorId, children: projectVersion.error })
        ] }) : canCreateV3Projects ? /* @__PURE__ */ (0, import_jsx_runtime253.jsx)("input", { ...import_react189.conform.input(projectVersion, { type: "hidden" }), value: "v3" }) : /* @__PURE__ */ (0, import_jsx_runtime253.jsx)("input", { ...import_react189.conform.input(projectVersion, { type: "hidden" }), value: "v2" }),
        /* @__PURE__ */ (0, import_jsx_runtime253.jsx)(
          FormButtons,
          {
            confirmButton: /* @__PURE__ */ (0, import_jsx_runtime253.jsx)(Button, { type: "submit", variant: "primary/small", children: "Create" }),
            cancelButton: organization.projectsCount > 0 ? /* @__PURE__ */ (0, import_jsx_runtime253.jsx)(LinkButton, { to: organizationPath(organization), variant: "tertiary/small", children: "Cancel" }) : void 0
          }
        )
      ] })
    ] })
  ] }) });
}

// app/routes/api.v1.projects.$projectRef.alertChannels.ts
var api_v1_projects_projectRef_alertChannels_exports = {};
__export(api_v1_projects_projectRef_alertChannels_exports, {
  action: () => action39
});
var import_server_runtime41 = require("@remix-run/server-runtime"), import_zod172 = require("zod");

// app/presenters/v3/ApiAlertChannelPresenter.server.ts
var import_assert_never13 = __toESM(require("assert-never")), import_zod171 = require("zod");
var ApiAlertType = import_zod171.z.enum(["attempt_failure", "deployment_failure", "deployment_success"]), ApiAlertEnvironmentType = import_zod171.z.enum(["STAGING", "PRODUCTION"]), ApiAlertChannel = import_zod171.z.enum(["email", "webhook"]), ApiAlertChannelData = import_zod171.z.object({
  email: import_zod171.z.string().optional(),
  url: import_zod171.z.string().optional(),
  secret: import_zod171.z.string().optional()
}), ApiCreateAlertChannel = import_zod171.z.object({
  alertTypes: ApiAlertType.array(),
  name: import_zod171.z.string(),
  channel: ApiAlertChannel,
  channelData: ApiAlertChannelData,
  deduplicationKey: import_zod171.z.string().optional(),
  environmentTypes: ApiAlertEnvironmentType.array().default(["STAGING", "PRODUCTION"])
}), ApiAlertChannelObject = import_zod171.z.object({
  id: import_zod171.z.string(),
  name: import_zod171.z.string(),
  alertTypes: ApiAlertType.array(),
  channel: ApiAlertChannel,
  channelData: ApiAlertChannelData,
  deduplicationKey: import_zod171.z.string().optional()
}), ApiAlertChannelPresenter = class {
  static async alertChannelToApi(alertChannel) {
    return {
      id: alertChannel.friendlyId,
      name: alertChannel.name,
      alertTypes: alertChannel.alertTypes.map((type) => this.alertTypeToApi(type)),
      channel: this.alertChannelTypeToApi(alertChannel.type),
      channelData: await channelDataFromProperties(alertChannel.type, alertChannel.properties),
      deduplicationKey: alertChannel.userProvidedDeduplicationKey ? alertChannel.deduplicationKey : void 0
    };
  }
  static alertTypeToApi(alertType) {
    switch (alertType) {
      case "TASK_RUN_ATTEMPT":
        return "attempt_failure";
      case "DEPLOYMENT_FAILURE":
        return "deployment_failure";
      case "DEPLOYMENT_SUCCESS":
        return "deployment_success";
      default:
        (0, import_assert_never13.default)(alertType);
    }
  }
  static alertTypeFromApi(alertType) {
    switch (alertType) {
      case "attempt_failure":
        return "TASK_RUN_ATTEMPT";
      case "deployment_failure":
        return "DEPLOYMENT_FAILURE";
      case "deployment_success":
        return "DEPLOYMENT_SUCCESS";
      default:
        (0, import_assert_never13.default)(alertType);
    }
  }
  static alertChannelTypeToApi(type) {
    switch (type) {
      case "EMAIL":
        return "email";
      case "WEBHOOK":
        return "webhook";
      case "SLACK":
        throw new Error("Slack channels are not supported");
      default:
        (0, import_assert_never13.default)(type);
    }
  }
};
async function channelDataFromProperties(type, properties) {
  if (!properties)
    return {};
  switch (type) {
    case "EMAIL":
      return ProjectAlertEmailProperties.parse(properties);
    case "WEBHOOK":
      let { url, secret: secret2 } = ProjectAlertWebhookProperties.parse(properties);
      return {
        url,
        secret: await decryptSecret(env2.ENCRYPTION_KEY, secret2)
      };
    case "SLACK":
      throw new Error("Slack channels are not supported");
    default:
      (0, import_assert_never13.default)(type);
  }
}

// app/routes/api.v1.projects.$projectRef.alertChannels.ts
var ParamsSchema34 = import_zod172.z.object({
  projectRef: import_zod172.z.string()
});
async function action39({ request, params }) {
  let authenticationResult = await authenticateApiRequestWithPersonalAccessToken(request);
  if (!authenticationResult)
    return (0, import_server_runtime41.json)({ error: "Invalid or Missing Access Token" }, { status: 401 });
  let parsedParams = ParamsSchema34.safeParse(params);
  if (!parsedParams.success)
    return (0, import_server_runtime41.json)({ error: "Invalid Params" }, { status: 400 });
  let { projectRef } = parsedParams.data, rawBody = await request.json(), body = ApiCreateAlertChannel.safeParse(rawBody);
  if (!body.success)
    return (0, import_server_runtime41.json)({ error: "Invalid request body", issues: body.error.issues }, { status: 400 });
  let service = new CreateAlertChannelService();
  try {
    if (body.data.channel === "email") {
      if (!body.data.channelData.email)
        return (0, import_server_runtime41.json)({ error: "Email is required" }, { status: 422 });
      let alertChannel = await service.call(projectRef, authenticationResult.userId, {
        name: body.data.name,
        alertTypes: body.data.alertTypes.map(
          (type) => ApiAlertChannelPresenter.alertTypeFromApi(type)
        ),
        channel: {
          type: "EMAIL",
          email: body.data.channelData.email
        },
        deduplicationKey: body.data.deduplicationKey,
        environmentTypes: body.data.environmentTypes
      });
      return (0, import_server_runtime41.json)(await ApiAlertChannelPresenter.alertChannelToApi(alertChannel));
    }
    if (body.data.channel === "webhook") {
      if (!body.data.channelData.url)
        return (0, import_server_runtime41.json)({ error: "webhook url is required" }, { status: 422 });
      let alertChannel = await service.call(projectRef, authenticationResult.userId, {
        name: body.data.name,
        alertTypes: body.data.alertTypes.map(
          (type) => ApiAlertChannelPresenter.alertTypeFromApi(type)
        ),
        channel: {
          type: "WEBHOOK",
          url: body.data.channelData.url,
          secret: body.data.channelData.secret
        },
        deduplicationKey: body.data.deduplicationKey,
        environmentTypes: body.data.environmentTypes
      });
      return (0, import_server_runtime41.json)(await ApiAlertChannelPresenter.alertChannelToApi(alertChannel));
    }
    return (0, import_server_runtime41.json)({ error: "Invalid channel type" }, { status: 422 });
  } catch (error) {
    return error instanceof ServiceValidationError ? (0, import_server_runtime41.json)({ error: error.message }, { status: 422 }) : (0, import_server_runtime41.json)(
      { error: error instanceof Error ? error.message : "Internal Server Error" },
      { status: 500 }
    );
  }
}

// app/routes/api.v1.projects.$projectRef.envvars.$slug.ts
var api_v1_projects_projectRef_envvars_slug_exports = {};
__export(api_v1_projects_projectRef_envvars_slug_exports, {
  action: () => action40,
  loader: () => loader87
});
var import_server_runtime42 = require("@remix-run/server-runtime");
var import_zod173 = require("zod");
var ParamsSchema35 = import_zod173.z.object({
  projectRef: import_zod173.z.string(),
  slug: import_zod173.z.string()
});
async function action40({ params, request }) {
  let parsedParams = ParamsSchema35.safeParse(params);
  if (!parsedParams.success)
    return (0, import_server_runtime42.json)({ error: "Invalid params" }, { status: 400 });
  let authenticationResult = await authenticateProjectApiKeyOrPersonalAccessToken(request);
  if (!authenticationResult)
    return (0, import_server_runtime42.json)({ error: "Invalid or Missing API key" }, { status: 401 });
  let environment = await authenticatedEnvironmentForAuthentication(
    authenticationResult,
    parsedParams.data.projectRef,
    parsedParams.data.slug
  ), jsonBody = await request.json(), body = CreateEnvironmentVariableRequestBody.safeParse(jsonBody);
  if (!body.success)
    return (0, import_server_runtime42.json)({ error: "Invalid request body", issues: body.error.issues }, { status: 400 });
  let result = await new EnvironmentVariablesRepository().create(environment.project.id, {
    override: !0,
    environmentIds: [environment.id],
    variables: [
      {
        key: body.data.name,
        value: body.data.value
      }
    ]
  });
  return result.success ? (0, import_server_runtime42.json)({ success: !0 }) : (0, import_server_runtime42.json)({ error: result.error, variableErrors: result.variableErrors }, { status: 400 });
}
async function loader87({ params, request }) {
  let parsedParams = ParamsSchema35.safeParse(params);
  if (!parsedParams.success)
    return (0, import_server_runtime42.json)({ error: "Invalid params" }, { status: 400 });
  let authenticationResult = await authenticateProjectApiKeyOrPersonalAccessToken(request);
  if (!authenticationResult)
    return (0, import_server_runtime42.json)({ error: "Invalid or Missing API key" }, { status: 401 });
  let environment = await authenticatedEnvironmentForAuthentication(
    authenticationResult,
    parsedParams.data.projectRef,
    parsedParams.data.slug
  ), variables = await new EnvironmentVariablesRepository().getEnvironment(environment.project.id, environment.id);
  return (0, import_server_runtime42.json)(variables.map((variable) => ({ name: variable.key, value: variable.value })));
}

// app/routes/resources.projects.$projectId.jobs.stream.ts
var resources_projects_projectId_jobs_stream_exports = {};
__export(resources_projects_projectId_jobs_stream_exports, {
  loader: () => loader88
});
var import_zod174 = require("zod");
async function loader88({ request, params }) {
  await requireUserId(request);
  let { projectId } = import_zod174.z.object({ projectId: import_zod174.z.string() }).parse(params), project = await projectForUpdates(projectId);
  if (!project)
    return new Response("Not found", { status: 404 });
  let lastSignals = calculateChangeSignals2(project);
  return sse({
    request,
    run: async (send, stop) => {
      let result = await projectForUpdates(projectId);
      if (!result)
        return stop();
      let newSignals = calculateChangeSignals2(result);
      lastSignals.jobCount !== newSignals.jobCount && send({ data: JSON.stringify(newSignals) }), lastSignals = newSignals;
    }
  });
}
function projectForUpdates(id) {
  return prisma.project.findUnique({
    where: {
      id
    },
    include: {
      _count: {
        select: { jobs: !0 }
      }
    }
  });
}
function calculateChangeSignals2(project) {
  return {
    jobCount: project._count?.jobs ?? 0
  };
}

// app/routes/_app.orgs.$organizationSlug.integrations/route.tsx
var route_exports101 = {};
__export(route_exports101, {
  default: () => Integrations4,
  loader: () => loader90
});
var import_solid101 = require("@heroicons/react/24/solid"), import_react203 = require("react"), import_remix_typedjson74 = require("remix-typedjson");

// app/components/integrations/ConnectToIntegrationSheet.tsx
var import_react198 = require("react");

// app/components/integrations/ApiKeyHelp.tsx
var import_jsx_runtime254 = require("react/jsx-runtime");
function ApiKeyHelp({ integration, help: help2, integrationClient }) {
  return /* @__PURE__ */ (0, import_jsx_runtime254.jsxs)("div", { className: "mt-4", children: [
    /* @__PURE__ */ (0, import_jsx_runtime254.jsxs)(Header1, { className: "mb-2", children: [
      "How to use ",
      integration.name,
      " with API keys"
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime254.jsxs)(Paragraph, { spacing: !0, children: [
      "You can use API keys to authenticate with ",
      integration.name,
      ". Your API keys won't leave your server, we'll never see them."
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime254.jsxs)(Paragraph, { spacing: !0, children: [
      "First install the ",
      /* @__PURE__ */ (0, import_jsx_runtime254.jsx)(InlineCode, { children: integration.packageName }),
      " package using your preferred package manager. For example:"
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime254.jsx)(HelpInstall, { packageName: integration.packageName }),
    help2 && /* @__PURE__ */ (0, import_jsx_runtime254.jsx)(HelpSamples, { help: help2, integration, integrationClient })
  ] });
}

// app/components/integrations/SelectOAuthMethod.tsx
var import_react197 = require("react");

// app/components/integrations/ConnectToOAuthForm.tsx
var import_react191 = require("@conform-to/react"), import_zod175 = require("@conform-to/zod"), import_react192 = require("@remix-run/react"), import_cuid = __toESM(require("cuid")), import_react193 = require("react"), import_simplur3 = __toESM(require("simplur"));
var import_jsx_runtime255 = require("react/jsx-runtime");
function ConnectToOAuthForm({
  integration,
  authMethod,
  authMethodKey,
  organizationId,
  clientType,
  callbackUrl
}) {
  let [id] = (0, import_react193.useState)((0, import_cuid.default)()), transition = (0, import_react192.useNavigation)(), fetcher = (0, import_react192.useFetcher)(), { isManagedCloud: isManagedCloud2 } = useFeatures(), [form, { title: title2, slug: slug3, scopes, hasCustomClient, customClientId, customClientSecret }] = (0, import_react191.useForm)({
    // TODO: type this
    lastSubmission: fetcher.data,
    shouldRevalidate: "onSubmit",
    onValidate({ formData }) {
      return (0, import_zod175.parse)(formData, {
        // Create the schema without any constraint defined
        schema: createSchema3()
      });
    }
  }), location = (0, import_react192.useLocation)(), [selectedScopes, setSelectedScopes] = (0, import_react193.useState)(
    new Set(authMethod.scopes.filter((s) => s.defaultChecked).map((s) => s.name))
  ), requiresCustomOAuthApp = clientType === "EXTERNAL" || !isManagedCloud2, [useMyOAuthApp, setUseMyOAuthApp] = (0, import_react193.useState)(requiresCustomOAuthApp), { filterText, setFilterText, filteredItems } = useTextFilter({
    items: authMethod.scopes,
    filter: (scope, text) => !!(scope.name.toLowerCase().includes(text.toLowerCase()) || scope.description && scope.description.toLowerCase().includes(text.toLowerCase()))
  });
  return /* @__PURE__ */ (0, import_jsx_runtime255.jsxs)(
    fetcher.Form,
    {
      method: "post",
      action: `/resources/connection/${organizationId}/oauth2`,
      ...form.props,
      className: "flex h-full max-h-full flex-grow flex-col",
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime255.jsxs)(Fieldset, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime255.jsx)("input", { type: "hidden", name: "id", value: id }),
          /* @__PURE__ */ (0, import_jsx_runtime255.jsx)("input", { type: "hidden", name: "integrationIdentifier", value: integration.identifier }),
          /* @__PURE__ */ (0, import_jsx_runtime255.jsx)("input", { type: "hidden", name: "integrationAuthMethod", value: authMethodKey }),
          /* @__PURE__ */ (0, import_jsx_runtime255.jsx)("input", { type: "hidden", name: "redirectTo", value: location.pathname }),
          /* @__PURE__ */ (0, import_jsx_runtime255.jsx)(InputGroup, { children: /* @__PURE__ */ (0, import_jsx_runtime255.jsx)(FormError, { children: form.error }) }),
          /* @__PURE__ */ (0, import_jsx_runtime255.jsxs)(InputGroup, { fullWidth: !0, children: [
            /* @__PURE__ */ (0, import_jsx_runtime255.jsx)(Label, { variant: "large", children: "ID" }),
            /* @__PURE__ */ (0, import_jsx_runtime255.jsx)(
              Input,
              {
                type: "text",
                fullWidth: !0,
                ...import_react191.conform.input(slug3),
                placeholder: `e.g. ${integration.identifier}`
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime255.jsx)(Hint, { children: "This is used in your code to reference this connection. It must be unique for this project." }),
            /* @__PURE__ */ (0, import_jsx_runtime255.jsx)(FormError, { children: slug3.error })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime255.jsxs)(InputGroup, { fullWidth: !0, children: [
            /* @__PURE__ */ (0, import_jsx_runtime255.jsx)(Label, { variant: "large", children: "Name" }),
            /* @__PURE__ */ (0, import_jsx_runtime255.jsx)(
              Input,
              {
                type: "text",
                fullWidth: !0,
                ...import_react191.conform.input(title2),
                placeholder: `e.g. Personal ${integration.name}`
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime255.jsx)(FormError, { children: title2.error })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime255.jsx)("input", { type: "hidden", name: "clientType", value: clientType }),
          /* @__PURE__ */ (0, import_jsx_runtime255.jsxs)("div", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime255.jsx)(Header2, { children: "Use my OAuth App" }),
            /* @__PURE__ */ (0, import_jsx_runtime255.jsx)(Paragraph, { variant: "small", className: "mb-2", children: "To use your own OAuth app, check the option below and insert the details." }),
            /* @__PURE__ */ (0, import_jsx_runtime255.jsx)(
              CheckboxWithLabel,
              {
                id: "hasCustomClient",
                label: "Use my OAuth App",
                variant: "simple/small",
                readOnly: requiresCustomOAuthApp,
                onChange: (checked) => setUseMyOAuthApp(checked),
                ...import_react191.conform.input(hasCustomClient, { type: "checkbox" }),
                defaultChecked: requiresCustomOAuthApp
              }
            ),
            useMyOAuthApp && /* @__PURE__ */ (0, import_jsx_runtime255.jsxs)("div", { className: "ml-6 mt-2", children: [
              /* @__PURE__ */ (0, import_jsx_runtime255.jsx)(Paragraph, { variant: "small", className: "mb-2", children: "Set the callback url to" }),
              /* @__PURE__ */ (0, import_jsx_runtime255.jsx)(CodeBlock3, { code: callbackUrl, showLineNumbers: !1 }),
              /* @__PURE__ */ (0, import_jsx_runtime255.jsxs)("div", { className: "flex flex-col gap-2", children: [
                /* @__PURE__ */ (0, import_jsx_runtime255.jsxs)("div", { className: "flex gap-2", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime255.jsxs)(InputGroup, { fullWidth: !0, children: [
                    /* @__PURE__ */ (0, import_jsx_runtime255.jsx)(Label, { variant: "small", children: "Client ID" }),
                    /* @__PURE__ */ (0, import_jsx_runtime255.jsx)(Input, { fullWidth: !0, ...import_react191.conform.input(customClientId, { type: "text" }) })
                  ] }),
                  /* @__PURE__ */ (0, import_jsx_runtime255.jsxs)(InputGroup, { fullWidth: !0, children: [
                    /* @__PURE__ */ (0, import_jsx_runtime255.jsx)(Label, { variant: "small", children: "Client secret" }),
                    /* @__PURE__ */ (0, import_jsx_runtime255.jsx)(
                      Input,
                      {
                        fullWidth: !0,
                        ...import_react191.conform.input(customClientSecret, {
                          type: "password"
                        })
                      }
                    )
                  ] })
                ] }),
                /* @__PURE__ */ (0, import_jsx_runtime255.jsx)(FormError, { children: customClientId.error })
              ] })
            ] })
          ] }),
          authMethod.scopes.length > 0 && /* @__PURE__ */ (0, import_jsx_runtime255.jsxs)("div", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime255.jsx)(Header2, { children: "Scopes" }),
            /* @__PURE__ */ (0, import_jsx_runtime255.jsxs)(Paragraph, { variant: "small", className: "mb-4", children: [
              "Select the scopes you want to grant to ",
              integration.name,
              " in order for it to access your data. Note: If you try and perform an action in a Job that requires a scope you haven\u2019t granted, that task will fail."
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime255.jsxs)("div", { className: "mb-2 mt-4 flex items-center justify-between", children: [
              /* @__PURE__ */ (0, import_jsx_runtime255.jsxs)(Header3, { children: [
                "Select ",
                integration.name,
                " scopes"
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime255.jsx)(Paragraph, { variant: "small", className: "text-charcoal-500", children: import_simplur3.default`${selectedScopes.size} scope[|s] selected` })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime255.jsx)(
              Input,
              {
                placeholder: "Search scopes",
                className: "mb-2",
                variant: "medium",
                icon: "search",
                fullWidth: !0,
                value: filterText,
                onChange: (e) => setFilterText(e.target.value)
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime255.jsxs)("div", { className: "mb-28 flex flex-col gap-y-0.5 overflow-hidden rounded-md", children: [
              filteredItems.length === 0 && /* @__PURE__ */ (0, import_jsx_runtime255.jsxs)(Paragraph, { variant: "small", className: "p-4", children: [
                "No scopes match ",
                filterText,
                ". Try a different search query."
              ] }),
              authMethod.scopes.map((s) => /* @__PURE__ */ (0, import_jsx_runtime255.jsx)(
                CheckboxWithLabel,
                {
                  id: s.name,
                  value: s.name,
                  name: "scopes",
                  label: s.name,
                  defaultChecked: s.defaultChecked ?? !1,
                  badges: s.annotations?.map((a) => a.label),
                  description: s.description,
                  variant: "description",
                  className: cn(filteredItems.find((f) => f.name === s.name) ? "" : "hidden"),
                  onChange: (isChecked) => {
                    setSelectedScopes(isChecked ? (selected) => (selected.add(s.name), new Set(selected)) : (selected) => (selected.delete(s.name), new Set(selected)));
                  }
                },
                s.name
              ))
            ] })
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime255.jsxs)("div", { className: "absolute bottom-0 left-0 flex w-full items-center justify-end gap-x-4 rounded-b-md border-t border-charcoal-800 bg-background-dimmed p-4", children: [
          /* @__PURE__ */ (0, import_jsx_runtime255.jsx)(FormError, { children: scopes.error }),
          /* @__PURE__ */ (0, import_jsx_runtime255.jsx)(
            Button,
            {
              type: "submit",
              className: "flex gap-2",
              disabled: transition.state !== "idle",
              variant: "primary/medium",
              LeadingIcon: integration.icon ?? integration.identifier,
              children: `Connect to ${integration.name}`
            }
          )
        ] })
      ]
    }
  );
}

// app/components/integrations/UpdateOAuthForm.tsx
var import_react194 = require("@conform-to/react"), import_zod176 = require("@conform-to/zod"), import_react195 = require("@remix-run/react"), import_react196 = require("react"), import_simplur4 = __toESM(require("simplur"));
var import_jsx_runtime256 = require("react/jsx-runtime");
function UpdateOAuthForm({
  existingIntegration,
  integration,
  authMethod,
  authMethodKey,
  organizationId,
  clientType,
  callbackUrl
}) {
  let transition = (0, import_react195.useNavigation)(), fetcher = (0, import_react195.useFetcher)(), { isManagedCloud: isManagedCloud2 } = useFeatures(), [form, { title: title2, scopes, hasCustomClient, customClientId, customClientSecret }] = (0, import_react194.useForm)({
    // TODO: type this
    lastSubmission: fetcher.data,
    onValidate({ formData }) {
      return (0, import_zod176.parse)(formData, {
        schema: schema11
      });
    }
  }), location = (0, import_react195.useLocation)(), [selectedScopes, setSelectedScopes] = (0, import_react196.useState)(
    new Set(authMethod.scopes.filter((s) => s.defaultChecked).map((s) => s.name))
  ), requiresCustomOAuthApp = clientType === "EXTERNAL" || !isManagedCloud2, [useMyOAuthApp, setUseMyOAuthApp] = (0, import_react196.useState)(requiresCustomOAuthApp), { filterText, setFilterText, filteredItems } = useTextFilter({
    items: authMethod.scopes,
    filter: (scope, text) => !!(scope.name.toLowerCase().includes(text.toLowerCase()) || scope.description && scope.description.toLowerCase().includes(text.toLowerCase()))
  });
  return /* @__PURE__ */ (0, import_jsx_runtime256.jsxs)(
    fetcher.Form,
    {
      method: "put",
      action: `/resources/connection/${organizationId}/oauth2/${existingIntegration.id}`,
      ...form.props,
      className: "flex h-full max-h-full flex-grow flex-col",
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime256.jsxs)(Fieldset, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime256.jsx)("input", { type: "hidden", name: "id", value: existingIntegration.id }),
          /* @__PURE__ */ (0, import_jsx_runtime256.jsx)("input", { type: "hidden", name: "integrationIdentifier", value: integration.identifier }),
          /* @__PURE__ */ (0, import_jsx_runtime256.jsx)("input", { type: "hidden", name: "integrationAuthMethod", value: authMethodKey }),
          /* @__PURE__ */ (0, import_jsx_runtime256.jsx)("input", { type: "hidden", name: "redirectTo", value: location.pathname }),
          /* @__PURE__ */ (0, import_jsx_runtime256.jsx)(InputGroup, { children: /* @__PURE__ */ (0, import_jsx_runtime256.jsx)(FormError, { children: form.error }) }),
          /* @__PURE__ */ (0, import_jsx_runtime256.jsxs)(InputGroup, { fullWidth: !0, children: [
            /* @__PURE__ */ (0, import_jsx_runtime256.jsx)(Label, { variant: "large", children: "ID" }),
            /* @__PURE__ */ (0, import_jsx_runtime256.jsx)(Paragraph, { variant: "small", className: "mb-2", children: existingIntegration.slug })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime256.jsxs)(InputGroup, { fullWidth: !0, children: [
            /* @__PURE__ */ (0, import_jsx_runtime256.jsx)(Label, { variant: "large", children: "Name" }),
            /* @__PURE__ */ (0, import_jsx_runtime256.jsx)(
              Input,
              {
                type: "text",
                fullWidth: !0,
                ...import_react194.conform.input(title2),
                defaultValue: existingIntegration.title ?? void 0,
                placeholder: `e.g. Personal ${integration.name}`
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime256.jsx)(FormError, { children: title2.error })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime256.jsx)("input", { type: "hidden", name: "clientType", value: clientType }),
          /* @__PURE__ */ (0, import_jsx_runtime256.jsxs)("div", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime256.jsx)(Header2, { children: "Use my OAuth App" }),
            /* @__PURE__ */ (0, import_jsx_runtime256.jsx)(Paragraph, { variant: "small", className: "mb-2", children: "To use your own OAuth app, check the option below and insert the details." }),
            /* @__PURE__ */ (0, import_jsx_runtime256.jsx)(
              CheckboxWithLabel,
              {
                id: "hasCustomClient",
                label: "Use my OAuth App",
                variant: "simple/small",
                readOnly: requiresCustomOAuthApp,
                onChange: (checked) => setUseMyOAuthApp(checked),
                ...import_react194.conform.input(hasCustomClient, { type: "checkbox" }),
                defaultChecked: requiresCustomOAuthApp
              }
            ),
            useMyOAuthApp && /* @__PURE__ */ (0, import_jsx_runtime256.jsxs)("div", { className: "ml-6 mt-2", children: [
              /* @__PURE__ */ (0, import_jsx_runtime256.jsxs)(Paragraph, { variant: "small", className: "mb-2", children: [
                "Set the callback url to ",
                /* @__PURE__ */ (0, import_jsx_runtime256.jsx)(CodeBlock3, { code: callbackUrl, showLineNumbers: !1 })
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime256.jsxs)("div", { className: "flex flex-col gap-2", children: [
                /* @__PURE__ */ (0, import_jsx_runtime256.jsxs)("div", { className: "flex gap-2", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime256.jsxs)(InputGroup, { fullWidth: !0, children: [
                    /* @__PURE__ */ (0, import_jsx_runtime256.jsx)(Label, { variant: "small", children: "Client ID" }),
                    /* @__PURE__ */ (0, import_jsx_runtime256.jsx)(Input, { fullWidth: !0, ...import_react194.conform.input(customClientId, { type: "text" }) })
                  ] }),
                  /* @__PURE__ */ (0, import_jsx_runtime256.jsxs)(InputGroup, { fullWidth: !0, children: [
                    /* @__PURE__ */ (0, import_jsx_runtime256.jsx)(Label, { variant: "small", children: "Client secret" }),
                    /* @__PURE__ */ (0, import_jsx_runtime256.jsx)(
                      Input,
                      {
                        fullWidth: !0,
                        ...import_react194.conform.input(customClientSecret, {
                          type: "password"
                        })
                      }
                    )
                  ] })
                ] }),
                /* @__PURE__ */ (0, import_jsx_runtime256.jsx)(FormError, { children: customClientId.error })
              ] })
            ] })
          ] }),
          authMethod.scopes.length > 0 && /* @__PURE__ */ (0, import_jsx_runtime256.jsxs)("div", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime256.jsx)(Header2, { children: "Scopes" }),
            /* @__PURE__ */ (0, import_jsx_runtime256.jsxs)(Paragraph, { variant: "small", className: "mb-4", children: [
              "Select the scopes you want to grant to ",
              integration.name,
              " in order for it to access your data. Note: If you try and perform an action in a Job that requires a scope you haven\u2019t granted, that task will fail."
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime256.jsxs)("div", { className: "mb-2 mt-4 flex items-center justify-between", children: [
              /* @__PURE__ */ (0, import_jsx_runtime256.jsxs)(Header3, { children: [
                "Select ",
                integration.name,
                " scopes"
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime256.jsx)(Paragraph, { variant: "small", className: "text-charcoal-500", children: import_simplur4.default`${selectedScopes.size} scope[|s] selected` })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime256.jsx)(
              Input,
              {
                placeholder: "Search scopes",
                className: "mb-2",
                variant: "medium",
                icon: "search",
                fullWidth: !0,
                value: filterText,
                onChange: (e) => setFilterText(e.target.value)
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime256.jsxs)("div", { className: "mb-28 flex flex-col gap-y-0.5 overflow-hidden rounded-md", children: [
              filteredItems.length === 0 && /* @__PURE__ */ (0, import_jsx_runtime256.jsxs)(Paragraph, { variant: "small", className: "p-4", children: [
                "No scopes match ",
                filterText,
                ". Try a different search query."
              ] }),
              authMethod.scopes.map((s) => /* @__PURE__ */ (0, import_jsx_runtime256.jsx)(
                CheckboxWithLabel,
                {
                  id: s.name,
                  value: s.name,
                  name: "scopes",
                  label: s.name,
                  defaultChecked: s.defaultChecked ?? !1,
                  badges: s.annotations?.map((a) => a.label),
                  description: s.description,
                  variant: "description",
                  className: cn(filteredItems.find((f) => f.name === s.name) ? "" : "hidden"),
                  onChange: (isChecked) => {
                    setSelectedScopes(isChecked ? (selected) => (selected.add(s.name), new Set(selected)) : (selected) => (selected.delete(s.name), new Set(selected)));
                  }
                },
                s.name
              ))
            ] })
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime256.jsxs)("div", { className: "absolute bottom-0 left-0 flex w-full items-center justify-end gap-x-4 rounded-b-md border-t border-charcoal-800 bg-background-dimmed p-4", children: [
          /* @__PURE__ */ (0, import_jsx_runtime256.jsx)(FormError, { children: scopes.error }),
          /* @__PURE__ */ (0, import_jsx_runtime256.jsx)(
            Button,
            {
              type: "submit",
              className: "flex gap-2",
              disabled: transition.state !== "idle",
              variant: "primary/medium",
              LeadingIcon: integration.identifier,
              children: `Connect to ${integration.name}`
            }
          )
        ] })
      ]
    }
  );
}

// app/components/integrations/SelectOAuthMethod.tsx
var import_solid100 = require("@heroicons/react/20/solid"), import_jsx_runtime257 = require("react/jsx-runtime");
function SelectOAuthMethod({
  integration,
  organizationId,
  callbackUrl,
  existingIntegration
}) {
  let oAuthMethods = Object.entries(integration.authenticationMethods).filter(
    (a) => a[1].type === "oauth2"
  ), [oAuthKey, setOAuthKey] = (0, import_react197.useState)(
    oAuthMethods.length === 1 ? oAuthMethods[0][0] : void 0
  ), [connectionType2, setConnectionType] = (0, import_react197.useState)(), selectedOAuthMethod = oAuthKey ? integration.authenticationMethods[oAuthKey] : void 0;
  return /* @__PURE__ */ (0, import_jsx_runtime257.jsxs)(import_jsx_runtime257.Fragment, { children: [
    oAuthMethods.length > 1 && /* @__PURE__ */ (0, import_jsx_runtime257.jsxs)(import_jsx_runtime257.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime257.jsx)(Header2, { className: "mb-2 mt-4", children: "Select an OAuth option" }),
      /* @__PURE__ */ (0, import_jsx_runtime257.jsx)(
        RadioGroup,
        {
          name: "oauth-method",
          className: "flex gap-2",
          value: oAuthKey,
          onValueChange: (v) => setOAuthKey(v),
          children: oAuthMethods.map(([key, auth]) => /* @__PURE__ */ (0, import_jsx_runtime257.jsx)(
            RadioGroupItem,
            {
              id: key,
              value: key,
              label: auth.name,
              description: auth.description,
              variant: "description"
            },
            key
          ))
        }
      )
    ] }),
    selectedOAuthMethod && /* @__PURE__ */ (0, import_jsx_runtime257.jsxs)(import_jsx_runtime257.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime257.jsxs)(Header2, { className: "mb-2 mt-4", children: [
        "Who is connecting to ",
        integration.name
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime257.jsxs)(
        RadioGroup,
        {
          name: "connection-type",
          className: "flex gap-2",
          value: connectionType2,
          onValueChange: (v) => setConnectionType(v),
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime257.jsx)(
              RadioGroupItem,
              {
                id: "DEVELOPER",
                value: "DEVELOPER",
                label: "Developers",
                description: `You will connect using an internal ${integration.name} account.`,
                variant: "description"
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime257.jsx)(
              RadioGroupItem,
              {
                id: "EXTERNAL",
                value: "EXTERNAL",
                label: "Your users",
                description: "Use an external authentication provider or your own user database to provide auth credentails of your users.",
                variant: "description"
              }
            )
          ]
        }
      )
    ] }),
    selectedOAuthMethod && connectionType2 && oAuthKey && (connectionType2 === "DEVELOPER" ? existingIntegration ? /* @__PURE__ */ (0, import_jsx_runtime257.jsx)(
      UpdateOAuthForm,
      {
        existingIntegration,
        integration,
        authMethod: selectedOAuthMethod,
        authMethodKey: oAuthKey,
        organizationId,
        clientType: connectionType2,
        callbackUrl
      }
    ) : /* @__PURE__ */ (0, import_jsx_runtime257.jsx)(
      ConnectToOAuthForm,
      {
        integration,
        authMethod: selectedOAuthMethod,
        authMethodKey: oAuthKey,
        organizationId,
        clientType: connectionType2,
        callbackUrl
      }
    ) : /* @__PURE__ */ (0, import_jsx_runtime257.jsxs)(import_jsx_runtime257.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime257.jsx)(Header2, { className: "mb-1 mt-4", children: "BYO Auth" }),
      /* @__PURE__ */ (0, import_jsx_runtime257.jsxs)(Paragraph, { spacing: !0, children: [
        "We support external authentication providers through Auth Resolvers. Read the docs to learn more:",
        " ",
        /* @__PURE__ */ (0, import_jsx_runtime257.jsx)(
          LinkButton,
          {
            variant: "tertiary/small",
            LeadingIcon: import_solid100.BookOpenIcon,
            TrailingIcon: "external-link",
            to: "https://trigger.dev/docs/documentation/guides/using-integrations-byo-auth",
            target: "_blank",
            children: "Bring your own Auth"
          }
        )
      ] })
    ] }))
  ] });
}

// app/components/integrations/ConnectToIntegrationSheet.tsx
var import_jsx_runtime258 = require("react/jsx-runtime");
function ConnectToIntegrationSheet({
  integration,
  organizationId,
  button,
  className,
  callbackUrl,
  icon
}) {
  let [integrationMethod, setIntegrationMethod] = (0, import_react198.useState)(
    void 0
  ), authMethods = Object.values(integration.authenticationMethods), hasApiKeyOption = authMethods.some((s) => s.type === "apikey"), hasOAuth2Option = authMethods.some((s) => s.type === "oauth2");
  return /* @__PURE__ */ (0, import_jsx_runtime258.jsxs)(Sheet, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime258.jsx)(SheetTrigger, { className, children: button }),
    /* @__PURE__ */ (0, import_jsx_runtime258.jsxs)(SheetContent, { size: "lg", className: "relative", children: [
      /* @__PURE__ */ (0, import_jsx_runtime258.jsxs)(SheetHeader, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime258.jsx)(NamedIconInBox, { name: icon ?? integration.identifier, className: "h-9 w-9" }),
        /* @__PURE__ */ (0, import_jsx_runtime258.jsxs)("div", { className: "grow", children: [
          /* @__PURE__ */ (0, import_jsx_runtime258.jsx)(Header1, { children: integration.name }),
          integration.description && /* @__PURE__ */ (0, import_jsx_runtime258.jsx)(Paragraph, { variant: "small", children: integration.description })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime258.jsx)(
          LinkButton,
          {
            to: apiReferencePath(integration.identifier),
            variant: "tertiary/small",
            TrailingIcon: "arrow-up-right",
            trailingIconClassName: "h-4 w-4 text-charcoal-400",
            target: "_blank",
            children: "View examples"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime258.jsx)(
          LinkButton,
          {
            to: docsIntegrationPath(integration.identifier),
            variant: "tertiary/small",
            LeadingIcon: "docs",
            target: "_blank",
            children: "View docs"
          }
        )
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime258.jsxs)(SheetBody, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime258.jsx)(Header2, { className: "mb-2", children: "Choose an integration method" }),
        /* @__PURE__ */ (0, import_jsx_runtime258.jsxs)(
          RadioGroup,
          {
            name: "method",
            className: "flex gap-2",
            value: integrationMethod,
            onValueChange: (v) => setIntegrationMethod(v),
            children: [
              hasOAuth2Option && /* @__PURE__ */ (0, import_jsx_runtime258.jsx)(
                RadioGroupItem,
                {
                  id: "oauth2",
                  value: "oauth2",
                  label: "OAuth",
                  description: "We handle OAuth for you or your users.",
                  variant: "description"
                }
              ),
              hasApiKeyOption && /* @__PURE__ */ (0, import_jsx_runtime258.jsx)(
                RadioGroupItem,
                {
                  id: "apikey",
                  value: "apikey",
                  label: "API Key",
                  description: "Use API keys in your code. They never leave your server.",
                  variant: "description"
                }
              )
            ]
          }
        ),
        integrationMethod && /* @__PURE__ */ (0, import_jsx_runtime258.jsx)(
          SelectedIntegrationMethod,
          {
            integration,
            organizationId,
            method: integrationMethod,
            callbackUrl
          }
        )
      ] })
    ] })
  ] });
}
function SelectedIntegrationMethod({
  integration,
  organizationId,
  method,
  callbackUrl
}) {
  let authMethods = Object.values(integration.authenticationMethods);
  switch (method) {
    case "apikey":
      let apiAuth = authMethods.find((a) => a.type === "apikey");
      return apiAuth ? /* @__PURE__ */ (0, import_jsx_runtime258.jsx)(ApiKeyHelp, { integration, help: apiAuth.help }) : null;
    case "oauth2":
      return /* @__PURE__ */ (0, import_jsx_runtime258.jsx)(
        SelectOAuthMethod,
        {
          integration,
          organizationId,
          callbackUrl
        }
      );
  }
}

// app/components/integrations/IntegrationWithMissingFieldSheet.tsx
var import_jsx_runtime259 = require("react/jsx-runtime");
function IntegrationWithMissingFieldSheet({
  integration,
  organizationId,
  button,
  callbackUrl,
  existingIntegration,
  className
}) {
  return /* @__PURE__ */ (0, import_jsx_runtime259.jsxs)(Sheet, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime259.jsx)(SheetTrigger, { className, children: button }),
    /* @__PURE__ */ (0, import_jsx_runtime259.jsxs)(SheetContent, { size: "lg", className: "relative", children: [
      /* @__PURE__ */ (0, import_jsx_runtime259.jsxs)(SheetHeader, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime259.jsx)(NamedIconInBox, { name: integration.identifier, className: "h-9 w-9" }),
        /* @__PURE__ */ (0, import_jsx_runtime259.jsxs)("div", { className: "grow", children: [
          /* @__PURE__ */ (0, import_jsx_runtime259.jsx)(Header1, { children: integration.name }),
          integration.description && /* @__PURE__ */ (0, import_jsx_runtime259.jsx)(Paragraph, { variant: "small", children: integration.description })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime259.jsx)(
          LinkButton,
          {
            to: docsIntegrationPath(integration.identifier),
            variant: "tertiary/small",
            LeadingIcon: "docs",
            target: "_blank",
            children: "View docs"
          }
        )
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime259.jsx)(SheetBody, { children: /* @__PURE__ */ (0, import_jsx_runtime259.jsx)(
        SelectOAuthMethod,
        {
          integration,
          organizationId,
          callbackUrl,
          existingIntegration
        }
      ) })
    ] })
  ] });
}

// app/components/integrations/NoIntegrationSheet.tsx
var import_react202 = require("@remix-run/react");

// app/components/integrations/CustomHelp.tsx
var import_react201 = require("react");

// app/routes/resources.codeexample.tsx
var resources_codeexample_exports = {};
__export(resources_codeexample_exports, {
  CodeExample: () => CodeExample,
  loader: () => loader89
});
var import_react199 = require("@remix-run/react"), import_server_runtime43 = require("@remix-run/server-runtime"), import_react200 = require("react"), import_tiny_invariant8 = __toESM(require("tiny-invariant"));
var import_jsx_runtime260 = require("react/jsx-runtime");
async function loader89({ request }) {
  await requireUserId(request);
  let codeUrl = new URL(request.url).searchParams.get("url");
  (0, import_tiny_invariant8.default)(typeof codeUrl == "string", "codeUrl is required");
  let decodedCodeUrl = decodeURIComponent(codeUrl), response = await fetch(decodedCodeUrl);
  if (!response.ok)
    throw new Error("Network response was not ok");
  let code = await response.text(), hideCodeRegex = /(\n)?\/\/ hide-code[\s\S]*?\/\/ end-hide-code(\n)*/gm, cleanedCode = code?.replace(hideCodeRegex, `
`);
  return (0, import_server_runtime43.json)({
    code: cleanedCode
  });
}
function CodeExample({ example }) {
  let customerFetcher = (0, import_react199.useFetcher)();
  return (0, import_react200.useEffect)(() => {
    customerFetcher.load(`/resources/codeexample?url=${encodeURIComponent(example.codeUrl)}`);
  }, [example.codeUrl]), customerFetcher.state === "loading" ? /* @__PURE__ */ (0, import_jsx_runtime260.jsxs)("div", { className: "flex h-96 w-full items-center justify-center gap-2 rounded-md border border-charcoal-800 font-mono", children: [
    /* @__PURE__ */ (0, import_jsx_runtime260.jsx)(Spinner, {}),
    /* @__PURE__ */ (0, import_jsx_runtime260.jsx)(Paragraph, { children: "Loading example code" })
  ] }) : customerFetcher.data && /* @__PURE__ */ (0, import_jsx_runtime260.jsx)(CodeBlock3, { code: customerFetcher.data.code ?? "", className: "mt-2" });
}

// app/components/integrations/CustomHelp.tsx
var import_jsx_runtime261 = require("react/jsx-runtime");
function CustomHelp({ api }) {
  let [selectedExample, setSelectedExample] = (0, import_react201.useState)(0), changeCodeExample = (index) => {
    setSelectedExample(index);
  };
  return /* @__PURE__ */ (0, import_jsx_runtime261.jsxs)("div", { className: "mt-4", children: [
    /* @__PURE__ */ (0, import_jsx_runtime261.jsxs)(Header1, { className: "mb-2", children: [
      "Using ",
      api.name,
      " with an SDK or requests"
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime261.jsxs)(Paragraph, { spacing: !0, children: [
      "You can use Trigger.dev with any existing Node SDK or even just using fetch. You can subscribe to any API with",
      " ",
      /* @__PURE__ */ (0, import_jsx_runtime261.jsx)(TextLink, { href: "https://trigger.dev/docs/documentation/concepts/http-endpoints", children: "HTTP endpoints" }),
      " ",
      "and perform actions by wrapping tasks using",
      " ",
      /* @__PURE__ */ (0, import_jsx_runtime261.jsx)(
        TextLink,
        {
          href: "https://trigger.dev/docs/documentation/guides/writing-jobs-step-by-step#create-your-own-tasks",
          className: "font-mono",
          children: "io.runTask"
        }
      ),
      ". This makes your background job resumable and appear in our dashboard."
    ] }),
    api.examples && api.examples.length > 0 ? /* @__PURE__ */ (0, import_jsx_runtime261.jsxs)(import_jsx_runtime261.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime261.jsxs)(Header2, { className: "mb-2", children: [
        "Example ",
        api.name,
        " code"
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime261.jsxs)(Paragraph, { spacing: !0, className: "mb-4", children: [
        "This is how you can use ",
        api.name,
        " with Trigger.dev. This code can be copied and modified to suit your use-case."
      ] }),
      api.examples.length > 1 && /* @__PURE__ */ (0, import_jsx_runtime261.jsx)("div", { className: " flex w-full flex-row gap-4 overflow-x-scroll	scrollbar-thin scrollbar-track-transparent scrollbar-thumb-charcoal-600", children: api.examples?.map((example, index) => /* @__PURE__ */ (0, import_jsx_runtime261.jsx)(
        "button",
        {
          onClick: () => changeCodeExample(index),
          className: cn(
            "w-64 min-w-[16rem] p-2 transition-colors duration-300 sm:w-full sm:rounded",
            "border-px focus:border-px cursor-pointer border border-charcoal-900 bg-charcoal-900 text-charcoal-300 transition duration-300  hover:bg-charcoal-800 focus:border focus:border-indigo-600"
          ),
          children: example.title
        },
        example.codeUrl
      )) }),
      /* @__PURE__ */ (0, import_jsx_runtime261.jsx)(CodeExample, { example: api.examples[selectedExample] })
    ] }) : /* @__PURE__ */ (0, import_jsx_runtime261.jsxs)(import_jsx_runtime261.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime261.jsxs)(Header2, { className: "mb-2", children: [
        "Getting started with ",
        api.name
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime261.jsxs)(Paragraph, { spacing: !0, className: "mb-4", children: [
        "We recommend searching for the official ",
        api.name,
        " Node SDK. If they have one, you can install it and then use their API documentation to get started and create tasks. If they don't, there are often third party SDKs you can use instead."
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime261.jsxs)(Paragraph, { spacing: !0, className: "mb-4", children: [
        "Please",
        " ",
        /* @__PURE__ */ (0, import_jsx_runtime261.jsx)(
          Feedback,
          {
            button: /* @__PURE__ */ (0, import_jsx_runtime261.jsx)("span", { className: "cursor-pointer text-indigo-500 transition duration-300 hover:text-indigo-400", children: "reach out to us" }),
            defaultValue: "help"
          }
        ),
        " ",
        "if you're having any issues connecting to ",
        api.name,
        ", we'll help you get set up as quickly as possible."
      ] })
    ] })
  ] });
}

// app/components/integrations/NoIntegrationSheet.tsx
var import_jsx_runtime262 = require("react/jsx-runtime");
function NoIntegrationSheet({
  api,
  requested,
  button
}) {
  let isLoading2 = (0, import_react202.useFetcher)().state !== "idle";
  return /* @__PURE__ */ (0, import_jsx_runtime262.jsxs)(Sheet, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime262.jsx)(SheetTrigger, { children: button }),
    /* @__PURE__ */ (0, import_jsx_runtime262.jsxs)(SheetContent, { size: "lg", children: [
      /* @__PURE__ */ (0, import_jsx_runtime262.jsx)(SheetHeader, { className: "justify-between", children: /* @__PURE__ */ (0, import_jsx_runtime262.jsxs)("div", { className: "flex items-center gap-4", children: [
        /* @__PURE__ */ (0, import_jsx_runtime262.jsx)(NamedIconInBox, { name: api.identifier, className: "h-9 w-9" }),
        /* @__PURE__ */ (0, import_jsx_runtime262.jsx)(Header1, { children: api.name })
      ] }) }),
      /* @__PURE__ */ (0, import_jsx_runtime262.jsx)(SheetBody, { children: /* @__PURE__ */ (0, import_jsx_runtime262.jsx)(CustomHelp, { api }) })
    ] })
  ] });
}

// app/services/externalApis/apis.server.ts
var apisList = [
  {
    identifier: "airtable",
    name: "Airtable",
    examples: [
      {
        title: "Update Airtable when a new subscription is added to Stripe.",
        slug: "stripe-sub-update-airtable",
        version: "1.0.0",
        codeUrl: "https://raw.githubusercontent.com/triggerdotdev/jobs-showcase/main/src/stripeNewSubscriptionUpdateAirtable.ts"
      },
      {
        title: "Add a new record to Airtable when a Typeform response is submitted.",
        version: "1.0.0",
        slug: "new-airtable-record-from-typeform",
        codeUrl: "https://github.com/triggerdotdev/jobs-showcase/raw/main/src/typeformNewSubmissionUpdateAirtable.ts"
      },
      {
        title: "Update Airtable database when there is a sale in Stripe.",
        version: "1.0.0",
        slug: "update-airtable-when-stripe-account-updated",
        codeUrl: "https://raw.githubusercontent.com/triggerdotdev/jobs-showcase/main/src/syncStripeWithAirtable.ts"
      }
    ]
  },
  {
    identifier: "algolia",
    name: "Algolia"
  },
  {
    identifier: "anthropic",
    name: "Anthropic"
  },
  // {
  //   identifier: "appsmith",
  //   name: "Appsmith",
  // },
  // {
  //   identifier: "appwrite",
  //   name: "Appwrite",
  // },
  {
    identifier: "asana",
    name: "Asana",
    examples: [
      {
        title: "A job that is triggered by a Asana webhook.",
        slug: "asana-http-endpoint",
        version: "1.0.0",
        codeUrl: "https://raw.githubusercontent.com/triggerdotdev/api-reference/main/src/asana-http-endpoint.ts"
      },
      {
        title: "Get user details from Asana",
        slug: "get-user-details",
        version: "1.0.0",
        codeUrl: "https://github.com/triggerdotdev/api-reference/raw/main/src/asana.ts"
      }
    ]
  },
  {
    identifier: "aws",
    name: "AWS",
    examples: [
      {
        title: "Trigger an AWS Lambda function with a defined payload and log the results.",
        slug: "get-user-details",
        version: "1.0.0",
        codeUrl: "https://github.com/triggerdotdev/api-reference/raw/main/src/aws.ts"
      },
      {
        title: "A job that is triggered by an AWS webhook.",
        slug: "aws-http-endpoint",
        version: "1.0.0",
        codeUrl: "https://raw.githubusercontent.com/triggerdotdev/api-reference/main/src/aws-http-endpoint.ts"
      }
    ]
  },
  {
    identifier: "brex",
    name: "Brex",
    examples: [
      {
        title: "A job that is triggered by a Brex webhook.",
        slug: "brex-http-endpoint",
        version: "1.0.0",
        codeUrl: "https://raw.githubusercontent.com/triggerdotdev/api-reference/main/src/brex-http-endpoint.ts"
      },
      {
        title: "Create a new title in a Brex account.",
        slug: "create-new-brex-title",
        version: "1.0.0",
        codeUrl: "https://github.com/triggerdotdev/api-reference/raw/main/src/brex.ts"
      }
    ]
  },
  {
    identifier: "caldotcom",
    name: "Cal.com",
    examples: [
      {
        title: "Send a Slack message when meetings are booked or cancelled.",
        slug: "cal-slack-meeting-alert",
        version: "1.0.0",
        codeUrl: "https://github.com/triggerdotdev/api-reference/raw/main/src/cal-http-endpoint.ts"
      },
      {
        title: "Find all Cal.com bookings for a user.",
        slug: "cal-find-bookings",
        version: "1.0.0",
        codeUrl: "https://github.com/triggerdotdev/api-reference/raw/main/src/cal.ts"
      }
    ]
  },
  {
    identifier: "clerk",
    name: "Clerk",
    examples: [
      {
        title: "A job that is triggered by a Clerk webhook.",
        slug: "clerk-http-endpoint",
        version: "1.0.0",
        codeUrl: "https://raw.githubusercontent.com/triggerdotdev/api-reference/main/src/clerk-http-endpoint.ts"
      }
    ]
  },
  {
    identifier: "clickup",
    name: "ClickUp"
  },
  {
    identifier: "coda",
    name: "Coda"
  },
  {
    identifier: "crowddotdev",
    name: "Crowd.dev"
  },
  {
    identifier: "deepl",
    name: "DeepL",
    examples: [
      {
        title: "Translate some text with DeepL.",
        slug: "translate-text-with-deepl",
        version: "1.0.0",
        codeUrl: "https://github.com/triggerdotdev/api-reference/raw/main/src/deepl.ts"
      }
    ]
  },
  {
    identifier: "digitalocean",
    name: "DigitalOcean",
    examples: [
      {
        title: "DigitalOcean create Uptime",
        slug: "digitalocean-create-uptime",
        version: "1.0.0",
        codeUrl: "https://raw.githubusercontent.com/triggerdotdev/api-reference/main/src/digitalocean.ts"
      }
    ]
  },
  {
    identifier: "discord",
    name: "Discord",
    examples: [
      {
        title: "A job that is triggered by a Discord webhook.",
        slug: "discord-http-endpoint",
        version: "1.0.0",
        codeUrl: "https://raw.githubusercontent.com/triggerdotdev/api-reference/main/src/discord-http-endpoint.ts"
      },
      {
        title: "Create a Discord bot and send a message to a channel.",
        slug: "discord-bot-send-message",
        version: "1.0.0",
        codeUrl: "https://github.com/triggerdotdev/api-reference/raw/main/src/discord.ts"
      },
      {
        title: "A job that is triggered by a Discord webhook.",
        slug: "discord-http-endpoint",
        version: "1.0.0",
        codeUrl: "https://raw.githubusercontent.com/triggerdotdev/api-reference/main/src/discord-http-endpoint.ts"
      }
    ]
  },
  // {
  //   identifier: "documenso",
  //   name: "Documenso",
  // },
  // {
  //   identifier: "dropbox",
  //   name: "Dropbox",
  // },
  // {
  //   identifier: "facebook",
  //   name: "Facebook",
  // },
  // {
  //   identifier: "fastify",
  //   name: "Fastify",
  // },
  // {
  //   identifier: "flickr",
  //   name: "Flickr",
  // },
  {
    identifier: "github",
    name: "GitHub",
    examples: [
      {
        title: "Send a message to a Slack channel when a repo is starred.",
        slug: "github-star-to-slack",
        version: "1.0.0",
        codeUrl: "https://github.com/triggerdotdev/jobs-showcase/raw/main/src/gitHubNewStarToSlack.ts"
      },
      {
        title: "Create a Linear issue when a pull request is opened on a GitHub repo.",
        slug: "linear-ticket-on-github-pr",
        version: "1.0.0",
        codeUrl: "https://github.com/triggerdotdev/jobs-showcase/raw/main/src/linearCreateIssueOnPR.ts"
      },
      {
        title: "Send a reminder message to a Slack channel if a GitHub issue is left open for 24 hours.",
        slug: "github-issue-reminder",
        version: "1.0.0",
        codeUrl: "https://github.com/triggerdotdev/jobs-showcase/raw/main/src/gitHubIssueReminder.ts"
      },
      {
        title: "Add a custom label to a GitHub issue.",
        slug: "github-custom-label",
        version: "1.0.0",
        codeUrl: "https://github.com/triggerdotdev/jobs-showcase/raw/main/src/gitHubNewIssueOpened.ts"
      }
    ]
  },
  {
    identifier: "giphy",
    name: "Giphy"
  },
  {
    identifier: "gmail",
    name: "Gmail",
    examples: [
      {
        title: "Send an email using Gmail.",
        slug: "send-email-with-gmail",
        version: "1.0.0",
        codeUrl: "https://github.com/triggerdotdev/api-reference/raw/main/src/gmail.ts"
      },
      {
        title: "A job that is triggered by a Gmail webhook.",
        slug: "gmail-http-endpoint",
        version: "1.0.0",
        codeUrl: "https://raw.githubusercontent.com/triggerdotdev/api-reference/main/src/gmail-http-endpoint.ts"
      }
    ]
  },
  {
    identifier: "googlecalendar",
    name: "Google Calendar",
    examples: [
      {
        title: "Create a new Google Calendar event",
        slug: "create-google-calendar-event",
        version: "1.0.0",
        codeUrl: "https://github.com/triggerdotdev/api-reference/raw/main/src/google-calendar.ts"
      }
    ]
  },
  {
    identifier: "googledocs",
    name: "Google Docs",
    examples: [
      {
        title: "A job that is triggered by a Google Docs webhook.",
        slug: "google-docs-http-endpoint",
        version: "1.0.0",
        codeUrl: "https://raw.githubusercontent.com/triggerdotdev/api-reference/main/src/google-docs-http-endpoint.ts"
      }
    ]
  },
  {
    identifier: "googledrive",
    name: "Google Drive",
    examples: [
      {
        title: "A job that is triggered by a Google Drive webhook.",
        slug: "google-drive-http-endpoint",
        version: "1.0.0",
        codeUrl: "https://raw.githubusercontent.com/triggerdotdev/api-reference/main/src/google-drive-http-endpoint.ts"
      },
      {
        title: "Update a filename in Google Drive.",
        slug: "update-google-drive-filename",
        version: "1.0.0",
        codeUrl: "https://github.com/triggerdotdev/api-reference/raw/main/src/google-drive.ts"
      }
    ]
  },
  {
    identifier: "googlemaps",
    name: "Google Maps",
    examples: [
      {
        title: "Make a geocode request with Google Maps.",
        slug: "google-maps-geocode",
        version: "1.0.0",
        codeUrl: "https://github.com/triggerdotdev/api-reference/raw/main/src/google-maps.ts"
      }
    ]
  },
  {
    identifier: "googlesheets",
    name: "Google Sheets",
    examples: [
      {
        title: "A job that is triggered by a Google Sheets webhook.",
        slug: "google-sheets-http-endpoint",
        version: "1.0.0",
        codeUrl: "https://raw.githubusercontent.com/triggerdotdev/api-reference/main/src/google-sheets-http-endpoint.ts"
      },
      {
        title: "Insert data into a row in Google Sheets.",
        slug: "insert-data-into-google-sheets",
        version: "1.0.0",
        codeUrl: "https://github.com/triggerdotdev/api-reference/raw/main/src/google-sheets.ts"
      }
    ]
  },
  {
    identifier: "hubspot",
    name: "HubSpot",
    examples: [
      {
        title: "A job that is triggered by a HubSpot webhook.",
        slug: "hubspot-http-endpoint",
        version: "1.0.0",
        codeUrl: "https://raw.githubusercontent.com/triggerdotdev/api-reference/main/src/hubspot-http-endpoint.ts"
      },
      {
        title: "Create a contact in HubSpot.",
        slug: "create-contact-in-hubspot",
        version: "1.0.0",
        codeUrl: "https://github.com/triggerdotdev/api-reference/raw/main/src/hubspot.ts"
      }
    ]
  },
  {
    identifier: "huggingface",
    name: "Hugging Face",
    examples: [
      {
        title: "A job that is triggered by a Hugging Face webhook.",
        slug: "hugging-face-http-endpoint",
        version: "1.0.0",
        codeUrl: "https://raw.githubusercontent.com/triggerdotdev/api-reference/main/src/hugging-face-http-endpoint.ts"
      },
      {
        title: "Text classification with Hugging Face.",
        slug: "text-classification-with-hugging-face",
        version: "1.0.0",
        codeUrl: "https://github.com/triggerdotdev/api-reference/raw/main/src/hugging-face.ts"
      }
    ]
  },
  {
    identifier: "infisical",
    name: "Infisical"
  },
  {
    identifier: "instagram",
    name: "Instagram",
    examples: [
      {
        title: "A job that is triggered by a Instagram webhook.",
        slug: "instagram-http-endpoint",
        version: "1.0.0",
        codeUrl: "https://raw.githubusercontent.com/triggerdotdev/api-reference/main/src/instagram-http-endpoint.ts"
      },
      {
        title: "Post an image to Instagram",
        slug: "post-image-to-instagram",
        version: "1.0.0",
        codeUrl: "https://github.com/triggerdotdev/api-reference/raw/main/src/instagram.ts"
      }
    ]
  },
  // {
  //   identifier: "instabug",
  //   name: "Instabug",
  // },
  // {
  //   identifier: "keep",
  //   name: "Keep",
  // },
  {
    identifier: "lemonsqueezy",
    name: "Lemon Squeezy",
    examples: [
      {
        title: "Get store information from Lemon Squeezy.",
        slug: "get-store-information",
        version: "1.0.0",
        codeUrl: "https://github.com/triggerdotdev/api-reference/raw/main/src/lemon-squeezy.ts"
      }
    ]
  },
  // {
  //   identifier: "linkedin",
  //   name: "LinkedIn",
  // },
  {
    identifier: "linear",
    name: "Linear",
    examples: [
      {
        title: "Post Linear issues to Slack every weekday at 9am using Cron.",
        slug: "daily-linear-issues-slack-alert",
        version: "1.0.0",
        codeUrl: "https://github.com/triggerdotdev/jobs-showcase/raw/main/src/linearIssuesDailySlackAlert.ts"
      },
      {
        title: "Create a Linear issue when a pull request is opened on a GitHub repo.",
        slug: "linear-ticket-on-pr",
        version: "1.0.0",
        codeUrl: "https://github.com/triggerdotdev/jobs-showcase/raw/main/src/linearCreateIssueOnPR.ts"
      },
      {
        title: "Automatically comment and like any new Linear issues.",
        slug: "automatically-comment-and-like-linear-issues",
        version: "1.0.0",
        codeUrl: "https://github.com/triggerdotdev/jobs-showcase/raw/main/src/linearNewIssueReply.ts"
      }
    ]
  },
  {
    identifier: "loops",
    name: "Loops",
    examples: [
      {
        title: "Create a new contact in Loops.",
        slug: "create-new-contact-in-loops",
        version: "1.0.0",
        codeUrl: "https://github.com/triggerdotdev/api-reference/raw/main/src/loops.ts"
      }
    ]
  },
  // {
  //   identifier: "lotus",
  //   name: "Lotus",
  // },
  {
    identifier: "mailchimp",
    name: "Mailchimp"
  },
  {
    identifier: "mailgun",
    name: "Mailgun",
    examples: [
      {
        title: "A job that is triggered by a Mailgun webhook.",
        slug: "mailgun-http-endpoint",
        version: "1.0.0",
        codeUrl: "https://raw.githubusercontent.com/triggerdotdev/api-reference/main/src/mailgun-http-endpoint.ts"
      },
      {
        title: "Send an email with Mailgun.",
        slug: "send-email-with-mailgun",
        version: "1.0.0",
        codeUrl: "https://github.com/triggerdotdev/api-reference/raw/main/src/mailgun.ts"
      }
    ]
  },
  {
    identifier: "microsoftazure",
    name: "Microsoft Azure",
    examples: [
      {
        title: "A job that is triggered by a Microsoft Azure webhook.",
        slug: "microsoft-azure-http-endpoint",
        version: "1.0.0",
        codeUrl: "https://raw.githubusercontent.com/triggerdotdev/api-reference/main/src/azure-http-endpoint.ts"
      }
    ]
  },
  {
    identifier: "monday",
    name: "Monday"
  },
  {
    identifier: "mux",
    name: "Mux"
  },
  {
    identifier: "notion",
    name: "Notion",
    examples: [
      {
        title: "Retrieve a Notion page by ID.",
        slug: "retrieve-notion-page",
        version: "1.0.0",
        codeUrl: "https://github.com/triggerdotdev/api-reference/raw/main/src/notion.ts"
      }
    ]
  },
  {
    identifier: "novu",
    name: "Novu",
    examples: [
      {
        title: "A job that is triggered by a Novu webhook.",
        slug: "novu-http-endpoint",
        version: "1.0.0",
        codeUrl: "https://raw.githubusercontent.com/triggerdotdev/api-reference/main/src/novu-http-endpoint.ts"
      },
      {
        title: "Create a new subscriber in Novu",
        slug: "create-new-subscriber-in-novu",
        version: "1.0.0",
        codeUrl: "https://github.com/triggerdotdev/api-reference/raw/main/src/novu.ts"
      }
    ]
  },
  {
    identifier: "openai",
    name: "OpenAI",
    examples: [
      {
        title: "Summarize GitHub commits using OpenAI and then post them to Slack.",
        slug: "openai-summarize-github-commits",
        version: "1.0.0",
        codeUrl: "https://raw.githubusercontent.com/triggerdotdev/jobs-showcase/main/src/summarizeGitHubCommits.ts"
      },
      {
        title: "Generate a random joke using OpenAI.",
        slug: "openai-generate-random-joke",
        version: "1.0.0",
        codeUrl: "https://github.com/triggerdotdev/jobs-showcase/raw/main/src/openAITellMeAJoke.ts"
      },
      {
        title: "Generate an image from a prompt using OpenAI.",
        slug: "openai-generate-image",
        version: "1.0.0",
        codeUrl: "https://github.com/triggerdotdev/jobs-showcase/raw/main/src/openAIGenerateImage.ts"
      }
    ]
  },
  {
    identifier: "pagerduty",
    name: "PagerDuty",
    examples: [
      {
        title: "A job that is triggered by a PagerDuty webhook.",
        slug: "pagerduty-http-endpoint",
        version: "1.0.0",
        codeUrl: "https://raw.githubusercontent.com/triggerdotdev/api-reference/main/src/pagerduty-http-endpoint.ts"
      },
      {
        title: "Install an addon in PagerDuty",
        slug: "pagerduty-install-addon",
        version: "1.0.0",
        codeUrl: "https://raw.githubusercontent.com/triggerdotdev/api-reference/main/src/pagerduty.ts"
      }
    ]
  },
  {
    identifier: "plain",
    name: "Plain",
    examples: [
      {
        title: "Update or create customer information based on an identifier.",
        slug: "plain-update-customer-information",
        version: "1.0.0",
        codeUrl: "https://github.com/triggerdotdev/jobs-showcase/raw/main/src/plainUpdateCustomer.ts"
      }
    ]
  },
  // {
  //   identifier: "posthog",
  //   name: "Posthog",
  // },
  {
    identifier: "raycast",
    name: "Raycast"
  },
  {
    identifier: "reddit",
    name: "Reddit"
  },
  {
    identifier: "replicate",
    name: "Replicate",
    examples: [
      {
        title: "Generate a cinematic image with Replicate.",
        slug: "generate-cinematic-image",
        version: "1.0.0",
        codeUrl: "https://github.com/triggerdotdev/jobs-showcase/raw/main/src/replicateCinematicPrompt.ts"
      }
    ]
  },
  {
    identifier: "resend",
    name: "Resend",
    examples: [
      {
        title: "Send a drip email campaign over 30 days, triggered by an event.",
        slug: "resend-send-drip-campaign",
        version: "1.0.0",
        codeUrl: "https://github.com/triggerdotdev/jobs-showcase/raw/main/src/resendDripCampaign.tsx"
      },
      {
        title: "Send an email built using React with Resend.",
        slug: "send-react-email",
        version: "1.0.0",
        codeUrl: "https://raw.githubusercontent.com/triggerdotdev/jobs-showcase/main/src/resendSendReactEmail.tsx"
      },
      {
        title: "Send a basic email with Resend.",
        slug: "resend-send-basic-email",
        version: "1.0.0",
        codeUrl: "https://github.com/triggerdotdev/jobs-showcase/raw/main/src/resendSendBasicEmail.ts"
      }
    ]
  },
  {
    identifier: "salesforce",
    name: "Salesforce",
    examples: [
      {
        title: "A job that is triggered by a Salesforce webhook.",
        slug: "salesforce-http-endpoint",
        version: "1.0.0",
        codeUrl: "https://raw.githubusercontent.com/triggerdotdev/api-reference/main/src/salesforce-http-endpoint.ts"
      },
      {
        title: "Create a new contact in Salesforce.",
        slug: "salesforce-create-contact",
        version: "1.0.0",
        codeUrl: "https://github.com/triggerdotdev/api-reference/raw/main/src/salesforce.ts"
      }
    ]
  },
  {
    identifier: "segment",
    name: "Segment",
    examples: [
      {
        title: "A job that is triggered by a Segment webhook.",
        slug: "segment-http-endpoint",
        version: "1.0.0",
        codeUrl: "https://raw.githubusercontent.com/triggerdotdev/api-reference/main/src/segment-http-endpoint.ts"
      },
      {
        title: "Get source information from Segment.",
        slug: "segment-get-source-information",
        version: "1.0.0",
        codeUrl: "https://github.com/triggerdotdev/api-reference/raw/main/src/segment.ts"
      }
    ]
  },
  {
    identifier: "sendgrid",
    name: "SendGrid",
    examples: [
      {
        title: "Send an activity summary email to users at 4pm every Friday.",
        slug: "sendgrid-send-activity-summary",
        version: "1.0.0",
        codeUrl: "https://github.com/triggerdotdev/jobs-showcase/raw/main/src/weeklyUserActivitySummary.ts"
      },
      {
        title: "SendGrid send basic email.",
        slug: "sendgrid-send-basic-email",
        version: "1.0.0",
        codeUrl: "https://github.com/triggerdotdev/jobs-showcase/raw/main/src/sendGridSendBasicEmail.ts"
      }
    ]
  },
  {
    identifier: "shopify",
    name: "Shopify",
    examples: [
      {
        title: "Update a product variant price in Shopify.",
        slug: "shopify-update-product-variant-price",
        version: "1.0.0",
        codeUrl: "https://github.com/triggerdotdev/api-reference/raw/main/src/shopify.ts"
      }
    ]
  },
  {
    identifier: "slack",
    name: "Slack",
    examples: [
      {
        title: "Posts Linear issues to Slack every weekday at 9am using Cron.",
        slug: "slack-daily-linear-issues",
        version: "1.0.0",
        codeUrl: "https://github.com/triggerdotdev/jobs-showcase/raw/main/src/linearIssuesDailySlackAlert.ts"
      },
      {
        title: "Summarize GitHub commits using OpenAI and then post them to Slack.",
        slug: "slack-openai-summarize-github-commits",
        version: "1.0.0",
        codeUrl: "https://raw.githubusercontent.com/triggerdotdev/jobs-showcase/main/src/summarizeGitHubCommits.ts"
      },
      {
        title: "Send an activity summary email, and post it to Slack at 4pm every Friday.",
        slug: "slack-sendgrid-send-activity-summary",
        version: "1.0.0",
        codeUrl: "https://github.com/triggerdotdev/jobs-showcase/raw/main/src/weeklyUserActivitySummary.ts"
      },
      {
        title: "Send a message to a Slack channel when a GitHub repo is starred.",
        slug: "slack-post-github",
        version: "1.0.0",
        codeUrl: "https://github.com/triggerdotdev/jobs-showcase/raw/main/src/gitHubNewStarToSlack.ts"
      },
      {
        title: "Send a reminder message to a Slack channel if a GitHub issue is left open for 24 hours.",
        slug: "slack-github-issue-reminder",
        version: "1.0.0",
        codeUrl: "https://github.com/triggerdotdev/jobs-showcase/raw/main/src/gitHubIssueReminder.ts"
      }
    ]
  },
  {
    identifier: "snyk",
    name: "Snyk",
    examples: [
      {
        title: "A job that is triggered by a Snyk webhook.",
        slug: "snyk-http-endpoint",
        version: "1.0.0",
        codeUrl: "https://raw.githubusercontent.com/triggerdotdev/api-reference/main/src/snyk-http-endpoint.ts"
      },
      {
        title: "Get user details from Snyk.",
        slug: "snyk-get-user-details",
        version: "1.0.0",
        codeUrl: "https://github.com/triggerdotdev/api-reference/raw/main/src/snyk.ts"
      }
    ]
  },
  {
    identifier: "square",
    name: "Square",
    examples: [
      {
        title: "A job that is triggered by a Square webhook.",
        slug: "square-http-endpoint",
        version: "1.0.0",
        codeUrl: "https://raw.githubusercontent.com/triggerdotdev/api-reference/main/src/square-http-endpoint.ts"
      }
    ]
  },
  {
    identifier: "spotify",
    name: "Spotify"
  },
  {
    identifier: "stabilityai",
    name: "Stability AI",
    examples: [
      {
        title: "Generate an image with Stability AI.",
        slug: "stabilityai-generate-image",
        version: "1.0.0",
        codeUrl: "https://github.com/triggerdotdev/api-reference/raw/main/src/stability.ts"
      }
    ]
  },
  {
    identifier: "stripe",
    name: "Stripe",
    examples: [
      {
        title: "Update Supabase every time a Stripe account is updated.",
        slug: "stripe-supabase-update",
        version: "1.0.0",
        codeUrl: "https://github.com/triggerdotdev/jobs-showcase/raw/main/src/supabaseStripeUpdateDatabase.ts"
      },
      {
        title: "Update Airtable when a new subscription is added to Stripe.",
        slug: "stripe-sub-update-airtable",
        version: "1.0.0",
        codeUrl: "https://raw.githubusercontent.com/triggerdotdev/jobs-showcase/main/src/stripeNewSubscriptionUpdateAirtable.ts"
      },
      {
        title: "Update Airtable database when there is a sale in Stripe.",
        version: "1.0.0",
        slug: "update-airtable-when-stripe-account-updated",
        codeUrl: "https://raw.githubusercontent.com/triggerdotdev/jobs-showcase/main/src/syncStripeWithAirtable.ts"
      }
    ]
  },
  {
    identifier: "supabase",
    name: "Supabase",
    examples: [
      {
        title: "Update Supabase every time a Stripe account is updated.",
        slug: "stripe-supabase-update",
        version: "1.0.0",
        codeUrl: "https://github.com/triggerdotdev/jobs-showcase/raw/main/src/supabaseStripeUpdateDatabase.ts"
      }
    ]
  },
  {
    identifier: "svix",
    name: "Svix",
    examples: [
      {
        title: "A job that is triggered by a Svix webhook.",
        slug: "svix-http-endpoint",
        version: "1.0.0",
        exampleType: ["http-endpoint"],
        apisUsed: ["svix"],
        tags: ["dev-ops"],
        codeUrl: "https://raw.githubusercontent.com/triggerdotdev/api-reference/main/src/svix-http-endpoint.ts"
      },
      {
        title: "Create an application in Svix",
        slug: "svix-create-application",
        version: "1.0.0",
        codeUrl: "https://github.com/triggerdotdev/api-reference/raw/main/src/svix.ts"
      }
    ]
  },
  {
    identifier: "todoist",
    name: "Todoist",
    examples: [
      {
        title: "A job that is triggered by a Todoist webhook.",
        slug: "todoist-http-endpoint",
        version: "1.0.0",
        codeUrl: "https://raw.githubusercontent.com/triggerdotdev/api-reference/main/src/todoist-http-endpoint.ts"
      },
      {
        title: "Add a new project in Todoist.",
        slug: "todoist-add-new-project",
        version: "1.0.0",
        codeUrl: "https://github.com/triggerdotdev/api-reference/raw/main/src/todoist.ts"
      }
    ]
  },
  {
    identifier: "trello",
    name: "Trello"
  },
  {
    identifier: "twilio",
    name: "Twilio",
    examples: [
      {
        title: "Send an SMS or WhatsApp message with Twilio",
        slug: "twilio-send-sms-or-whatsapp-message",
        version: "1.0.0",
        codeUrl: "https://github.com/triggerdotdev/api-reference/raw/main/src/twilio.ts"
      },
      {
        title: "A job that is triggered by a Twilio webhook.",
        slug: "twilio-http-endpoint",
        version: "1.0.0",
        codeUrl: "https://raw.githubusercontent.com/triggerdotdev/api-reference/main/src/twilio-http-endpoint.ts"
      }
    ]
  },
  {
    identifier: "typeform",
    name: "Typeform",
    examples: [
      {
        title: "Add a new record to Airtable when a Typeform response is submitted.",
        version: "1.0.0",
        slug: "new-airtable-record-from-typeform",
        codeUrl: "https://github.com/triggerdotdev/jobs-showcase/raw/main/src/typeformNewSubmissionUpdateAirtable.ts"
      }
    ]
  },
  {
    identifier: "whatsapp",
    name: "WhatsApp",
    examples: [
      {
        title: "A job that is triggered by a WhatsApp webhook.",
        slug: "whatsapp-http-endpoint",
        version: "1.0.0",
        codeUrl: "https://raw.githubusercontent.com/triggerdotdev/api-reference/main/src/whatsapp-http-endpoint.ts"
      },
      {
        title: "Send a message to a WhatsApp number",
        slug: "whatapp-send-message",
        version: "1.0.0",
        codeUrl: "https://github.com/triggerdotdev/api-reference/raw/main/src/whatsapp.ts"
      }
    ]
  },
  {
    identifier: "x",
    name: "X (Twitter)",
    examples: [
      {
        title: "Post a post to an X (Twitter) account",
        slug: "post-to-x",
        version: "1.0.0",
        codeUrl: "https://github.com/triggerdotdev/api-reference/raw/main/src/x.ts"
      }
    ]
  },
  {
    identifier: "youtube",
    name: "YouTube",
    examples: [
      {
        title: "A job that is triggered by a YouTube webhook.",
        slug: "youtube-http-endpoint",
        version: "1.0.0",
        codeUrl: "https://raw.githubusercontent.com/triggerdotdev/api-reference/main/src/youtube-http-endpoint.ts"
      },
      {
        title: "Search for a YouTube video",
        slug: "youtube-search-video",
        version: "1.0.0",
        codeUrl: "https://github.com/triggerdotdev/api-reference/raw/main/src/youtube.ts"
      }
    ]
  },
  {
    identifier: "zapier",
    name: "Zapier",
    examples: [
      {
        title: "Store name in Zapier",
        slug: "zapier-store-name",
        version: "1.0.0",
        codeUrl: "https://raw.githubusercontent.com/triggerdotdev/api-reference/main/src/zapier.ts"
      },
      {
        title: "A job that is triggered by a Zapier webhook.",
        slug: "zapier-http-endpoint",
        version: "1.0.0",
        codeUrl: "https://raw.githubusercontent.com/triggerdotdev/api-reference/main/src/zapier-http-endpoint.ts"
      }
    ]
  },
  {
    identifier: "zbd",
    name: "ZBD",
    examples: [
      {
        title: "Send Satoshis to a ZBD account.",
        slug: "zbd-send-satoshis",
        version: "1.0.0",
        codeUrl: "https://github.com/triggerdotdev/api-reference/raw/main/src/zbd.ts"
      }
    ]
  }
];

// app/presenters/IntegrationsPresenter.server.ts
var IntegrationsPresenter = class {
  #prismaClient;
  constructor(prismaClient = prisma) {
    this.#prismaClient = prismaClient;
  }
  async call({
    userId,
    organizationSlug
  }) {
    let clients = await this.#prismaClient.integration.findMany({
      select: {
        id: !0,
        title: !0,
        slug: !0,
        description: !0,
        setupStatus: !0,
        authMethod: {
          select: {
            type: !0,
            name: !0
          }
        },
        definition: {
          select: {
            id: !0,
            name: !0,
            icon: !0
          }
        },
        authSource: !0,
        connectionType: !0,
        scopes: !0,
        customClientReference: {
          select: {
            key: !0
          }
        },
        createdAt: !0,
        _count: {
          select: {
            connections: !0,
            jobIntegrations: {
              where: {
                job: {
                  organization: {
                    slug: organizationSlug
                  },
                  internal: !1,
                  deletedAt: null
                }
              }
            }
          }
        }
      },
      where: {
        organization: {
          slug: organizationSlug,
          members: {
            some: {
              userId
            }
          }
        }
      },
      orderBy: {
        title: "asc"
      }
    }), secretStore = getSecretStore(env2.SECRET_STORE, {
      prismaClient: this.#prismaClient
    }), enrichedClients = await Promise.all(
      clients.map(async (c) => {
        let clientId;
        return c.customClientReference && (clientId = (await secretStore.getSecret(
          OAuthClientSchema,
          c.customClientReference.key
        ))?.id), {
          id: c.id,
          title: c.title ?? c.slug,
          icon: c.definition.icon ?? c.definition.id,
          slug: c.slug,
          integrationIdentifier: c.definition.id,
          description: c.description,
          scopesCount: c.scopes.length,
          connectionsCount: c._count.connections,
          jobCount: c._count.jobIntegrations,
          createdAt: c.createdAt,
          customClientId: clientId,
          integration: {
            identifier: c.definition.id,
            name: c.definition.name
          },
          authMethod: {
            type: c.authMethod?.type ?? (c.authSource === "RESOLVER" ? "resolver" : "local"),
            name: c.authMethod?.name ?? (c.authSource === "RESOLVER" ? "Auth Resolver" : "Local Only")
          },
          authSource: c.authSource,
          setupStatus: c.setupStatus
        };
      })
    ), setupClients = enrichedClients.filter((c) => c.setupStatus === "COMPLETE"), clientMissingFields = enrichedClients.filter((c) => c.setupStatus === "MISSING_FIELDS"), integrations = Object.values(integrationCatalog.getIntegrations()).map((i) => ({
      type: "integration",
      ...i
    })), votes = await this.#prismaClient.apiIntegrationVote.findMany({
      select: {
        apiIdentifier: !0
      },
      where: {
        userId
      }
    }), apis = apisList.filter((a) => !integrations.some((i) => i.identifier === a.identifier)).map((a) => ({
      type: "api",
      ...a,
      voted: votes.some((v) => v.apiIdentifier === a.identifier)
    })), options2 = [...integrations, ...apis].sort((a, b) => a.name.localeCompare(b.name));
    return {
      clients: setupClients,
      clientMissingFields,
      options: options2,
      callbackUrl: `${env2.APP_ORIGIN}/oauth2/callback`
    };
  }
};

// app/routes/_app.orgs.$organizationSlug.integrations/route.tsx
var import_jsx_runtime263 = require("react/jsx-runtime"), loader90 = async ({ request, params }) => {
  let userId = await requireUserId(request), { organizationSlug } = OrganizationParamsSchema.parse(params), data2 = await new IntegrationsPresenter().call({
    userId,
    organizationSlug
  });
  return (0, import_remix_typedjson74.typedjson)(data2);
};
function Integrations4() {
  let { clients, clientMissingFields, options: options2, callbackUrl } = (0, import_remix_typedjson74.useTypedLoaderData)(), organization = useOrganization();
  return /* @__PURE__ */ (0, import_jsx_runtime263.jsxs)(PageContainer, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime263.jsxs)(NavBar, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime263.jsx)(PageTitle, { title: "Integrations & APIs" }),
      /* @__PURE__ */ (0, import_jsx_runtime263.jsx)(PageAccessories, { children: /* @__PURE__ */ (0, import_jsx_runtime263.jsx)(
        LinkButton,
        {
          to: docsPath("/integrations/introduction"),
          variant: "minimal/small",
          LeadingIcon: "docs",
          children: "Integrations documentation"
        }
      ) })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime263.jsx)(PageBody, { scrollable: !1, children: /* @__PURE__ */ (0, import_jsx_runtime263.jsxs)("div", { className: "grid h-full max-w-full grid-cols-[2fr_3fr] divide-x divide-charcoal-900 overflow-hidden", children: [
      /* @__PURE__ */ (0, import_jsx_runtime263.jsx)(
        PossibleIntegrationsList,
        {
          options: options2,
          organizationId: organization.id,
          callbackUrl
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime263.jsxs)("div", { className: "h-full overflow-y-auto p-4 scrollbar-thin scrollbar-track-transparent scrollbar-thumb-charcoal-600", children: [
        clientMissingFields.length > 0 && /* @__PURE__ */ (0, import_jsx_runtime263.jsx)(
          IntegrationsWithMissingFields,
          {
            clients: clientMissingFields,
            organizationId: organization.id,
            callbackUrl,
            options: options2
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime263.jsx)(ConnectedIntegrationsList, { clients, organization })
      ] })
    ] }) })
  ] });
}
function PossibleIntegrationsList({
  options: options2,
  organizationId,
  callbackUrl
}) {
  let [onlyShowIntegrations, setOnlyShowIntegrations] = (0, import_react203.useState)(!1), optionsToShow = onlyShowIntegrations ? options2.filter((o) => o.type === "integration") : options2, { filterText, setFilterText, filteredItems } = useTextFilter({
    items: optionsToShow,
    filter: (integration, text) => integration.name.toLowerCase().includes(text.toLowerCase())
  });
  return /* @__PURE__ */ (0, import_jsx_runtime263.jsx)("div", { className: "overflow-y-auto scrollbar-thin scrollbar-track-transparent scrollbar-thumb-charcoal-600", children: /* @__PURE__ */ (0, import_jsx_runtime263.jsxs)("div", { className: "p-4", children: [
    /* @__PURE__ */ (0, import_jsx_runtime263.jsxs)("div", { className: "flex items-center justify-between", children: [
      /* @__PURE__ */ (0, import_jsx_runtime263.jsx)(Header2, { className: "mb-2", children: "Connect an API" }),
      /* @__PURE__ */ (0, import_jsx_runtime263.jsx)(
        Switch,
        {
          checked: onlyShowIntegrations,
          onCheckedChange: setOnlyShowIntegrations,
          variant: "small",
          label: /* @__PURE__ */ (0, import_jsx_runtime263.jsxs)("span", { className: "mt-0.5 inline-flex items-center gap-1", children: [
            /* @__PURE__ */ (0, import_jsx_runtime263.jsx)(IntegrationIcon, {}),
            " Trigger.dev Integrations"
          ] })
        }
      )
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime263.jsx)(
      Input,
      {
        placeholder: "Search APIs",
        variant: "medium",
        icon: "search",
        fullWidth: !0,
        value: filterText,
        onChange: (e) => setFilterText(e.target.value)
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime263.jsx)("div", { className: "mt-2 grid grid-cols-1 gap-x-3 gap-y-1 sm:grid-cols-[repeat(auto-fill,_minmax(14rem,_auto))]", children: filteredItems.map((option) => {
      switch (option.type) {
        case "integration":
          return /* @__PURE__ */ (0, import_jsx_runtime263.jsx)(
            ConnectToIntegrationSheet,
            {
              integration: option,
              organizationId,
              callbackUrl,
              icon: option.icon,
              button: /* @__PURE__ */ (0, import_jsx_runtime263.jsx)(
                AddIntegrationConnection,
                {
                  identifier: option.identifier,
                  name: option.name,
                  icon: option.icon,
                  isIntegration: !0
                }
              )
            },
            option.identifier
          );
        case "api":
          return /* @__PURE__ */ (0, import_jsx_runtime263.jsx)(
            NoIntegrationSheet,
            {
              api: option,
              requested: option.voted,
              button: /* @__PURE__ */ (0, import_jsx_runtime263.jsx)(
                AddIntegrationConnection,
                {
                  identifier: option.identifier,
                  name: option.name,
                  isIntegration: !1
                }
              )
            },
            option.identifier
          );
      }
    }) }),
    /* @__PURE__ */ (0, import_jsx_runtime263.jsx)(Header2, { className: "mb-2 mt-6", children: "Missing an API?" }),
    /* @__PURE__ */ (0, import_jsx_runtime263.jsx)(
      Feedback,
      {
        button: /* @__PURE__ */ (0, import_jsx_runtime263.jsx)("button", { className: "w-full", children: /* @__PURE__ */ (0, import_jsx_runtime263.jsx)(
          DetailCell,
          {
            leadingIcon: "plus",
            leadingIconClassName: "text-text-dimmed",
            label: "Request an API and we'll add it to the list as an Integration",
            trailingIcon: "chevron-right",
            trailingIconClassName: "text-charcoal-700 group-hover:text-text-bright"
          }
        ) }),
        defaultValue: "feature"
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime263.jsx)(Header2, { className: "mb-2 mt-6", children: "Create an Integration" }),
    /* @__PURE__ */ (0, import_jsx_runtime263.jsx)("a", { href: "https://docs.trigger.dev/integrations/create", target: "_blank", children: /* @__PURE__ */ (0, import_jsx_runtime263.jsx)(
      DetailCell,
      {
        leadingIcon: "integration",
        leadingIconClassName: "text-text-dimmed",
        label: "Learn how to create your own API Integrations",
        trailingIcon: "external-link",
        trailingIconClassName: "text-charcoal-700 group-hover:text-text-bright"
      }
    ) })
  ] }) });
}
function ConnectedIntegrationsList({
  clients,
  organization
}) {
  let { filterText, setFilterText, filteredItems } = useTextFilter({
    items: clients,
    filter: (client3, text) => !!(client3.title.toLowerCase().includes(text.toLowerCase()) || client3.customClientId && client3.customClientId.toLowerCase().includes(text.toLowerCase()) || client3.integration.name.toLowerCase().includes(text.toLowerCase()) || client3.authMethod.name.toLowerCase().includes(text.toLowerCase()))
  });
  return /* @__PURE__ */ (0, import_jsx_runtime263.jsxs)(Help, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime263.jsx)(HelpContent, { title: "How to connect an Integration", children: /* @__PURE__ */ (0, import_jsx_runtime263.jsx)(HowToConnectAnIntegration, {}) }),
    /* @__PURE__ */ (0, import_jsx_runtime263.jsx)("div", { className: "mb-2 flex items-center justify-between", children: /* @__PURE__ */ (0, import_jsx_runtime263.jsx)(Header2, { className: "m-0", children: "Your connected Integrations" }) }),
    clients.length > 0 && /* @__PURE__ */ (0, import_jsx_runtime263.jsxs)("div", { children: [
      /* @__PURE__ */ (0, import_jsx_runtime263.jsxs)("div", { className: "mb-2 flex items-center gap-2", children: [
        /* @__PURE__ */ (0, import_jsx_runtime263.jsx)(
          Input,
          {
            placeholder: "Search connected Integrations",
            variant: "tertiary",
            icon: "search",
            fullWidth: !0,
            value: filterText,
            onChange: (e) => setFilterText(e.target.value)
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime263.jsx)(HelpTrigger, { title: "How do I connect an Integration?" })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime263.jsxs)(Table, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime263.jsx)(TableHeader, { children: /* @__PURE__ */ (0, import_jsx_runtime263.jsxs)(TableRow, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime263.jsx)(TableHeaderCell, { children: "Name" }),
          /* @__PURE__ */ (0, import_jsx_runtime263.jsx)(TableHeaderCell, { children: "API" }),
          /* @__PURE__ */ (0, import_jsx_runtime263.jsx)(TableHeaderCell, { children: "ID" }),
          /* @__PURE__ */ (0, import_jsx_runtime263.jsx)(TableHeaderCell, { children: "Type" }),
          /* @__PURE__ */ (0, import_jsx_runtime263.jsx)(TableHeaderCell, { children: "Jobs" }),
          /* @__PURE__ */ (0, import_jsx_runtime263.jsx)(TableHeaderCell, { children: "Scopes" }),
          /* @__PURE__ */ (0, import_jsx_runtime263.jsx)(TableHeaderCell, { children: "Client id" }),
          /* @__PURE__ */ (0, import_jsx_runtime263.jsx)(TableHeaderCell, { children: "Connections" }),
          /* @__PURE__ */ (0, import_jsx_runtime263.jsx)(TableHeaderCell, { children: "Added" }),
          /* @__PURE__ */ (0, import_jsx_runtime263.jsx)(TableHeaderCell, { hiddenLabel: !0, children: "Go to page" })
        ] }) }),
        /* @__PURE__ */ (0, import_jsx_runtime263.jsx)(TableBody, { children: filteredItems.length === 0 ? /* @__PURE__ */ (0, import_jsx_runtime263.jsx)(TableBlankRow, { colSpan: 8, children: /* @__PURE__ */ (0, import_jsx_runtime263.jsx)("div", { className: "flex items-center justify-center", children: /* @__PURE__ */ (0, import_jsx_runtime263.jsx)(Callout, { variant: "info", className: "w-auto", children: "No connected Integrations match your filters." }) }) }) : /* @__PURE__ */ (0, import_jsx_runtime263.jsx)(import_jsx_runtime263.Fragment, { children: filteredItems.map((client3) => {
          let path2 = integrationClientPath(organization, client3);
          return /* @__PURE__ */ (0, import_jsx_runtime263.jsxs)(TableRow, { children: [
            /* @__PURE__ */ (0, import_jsx_runtime263.jsx)(TableCell, { to: path2, children: client3.title }),
            /* @__PURE__ */ (0, import_jsx_runtime263.jsx)(TableCell, { to: path2, children: /* @__PURE__ */ (0, import_jsx_runtime263.jsxs)("span", { className: "flex items-center gap-1", children: [
              /* @__PURE__ */ (0, import_jsx_runtime263.jsx)(NamedIcon, { name: client3.icon, className: "h-5 w-5" }),
              client3.integration.name
            ] }) }),
            /* @__PURE__ */ (0, import_jsx_runtime263.jsx)(TableCell, { to: path2, children: client3.slug }),
            /* @__PURE__ */ (0, import_jsx_runtime263.jsx)(TableCell, { to: path2, children: client3.authMethod.name }),
            /* @__PURE__ */ (0, import_jsx_runtime263.jsx)(TableCell, { to: path2, children: client3.jobCount }),
            /* @__PURE__ */ (0, import_jsx_runtime263.jsx)(TableCell, { to: path2, children: client3.authSource === "LOCAL" ? "\u2013" : client3.scopesCount }),
            /* @__PURE__ */ (0, import_jsx_runtime263.jsx)(TableCell, { to: path2, children: client3.authSource === "LOCAL" ? "\u2013" : /* @__PURE__ */ (0, import_jsx_runtime263.jsx)(
              SimpleTooltip,
              {
                button: client3.customClientId ? `${client3.customClientId.substring(0, 8)}\u2026` : /* @__PURE__ */ (0, import_jsx_runtime263.jsx)("span", { className: "text-charcoal-600", children: "Auto" }),
                content: client3.customClientId ? client3.customClientId : "This uses the Trigger.dev OAuth client"
              }
            ) }),
            /* @__PURE__ */ (0, import_jsx_runtime263.jsx)(TableCell, { to: path2, children: client3.authSource === "LOCAL" ? "\u2013" : client3.connectionsCount }),
            /* @__PURE__ */ (0, import_jsx_runtime263.jsx)(TableCell, { to: path2, children: /* @__PURE__ */ (0, import_jsx_runtime263.jsx)(DateTime, { date: client3.createdAt, includeSeconds: !1 }) }),
            /* @__PURE__ */ (0, import_jsx_runtime263.jsx)(TableCellChevron, { to: path2, isSticky: !0 })
          ] }, client3.id);
        }) }) })
      ] })
    ] })
  ] });
}
function IntegrationsWithMissingFields({
  clients,
  organizationId,
  callbackUrl,
  options: options2
}) {
  let integrationsList = options2.flatMap((o) => o.type === "integration" ? [o] : []);
  return /* @__PURE__ */ (0, import_jsx_runtime263.jsxs)("div", { className: "mb-6", children: [
    /* @__PURE__ */ (0, import_jsx_runtime263.jsxs)(Header2, { className: "mb-2 flex items-center gap-1", children: [
      /* @__PURE__ */ (0, import_jsx_runtime263.jsx)(NamedIcon, { name: "error", className: "h-5 w-5" }),
      "Integrations requiring configuration"
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime263.jsxs)(Table, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime263.jsx)(TableHeader, { children: /* @__PURE__ */ (0, import_jsx_runtime263.jsxs)(TableRow, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime263.jsx)(TableHeaderCell, { children: "Name" }),
        /* @__PURE__ */ (0, import_jsx_runtime263.jsx)(TableHeaderCell, { children: "API" }),
        /* @__PURE__ */ (0, import_jsx_runtime263.jsx)(TableHeaderCell, { children: "Added" }),
        /* @__PURE__ */ (0, import_jsx_runtime263.jsx)(TableHeaderCell, { hiddenLabel: !0, children: "Go to page" })
      ] }) }),
      /* @__PURE__ */ (0, import_jsx_runtime263.jsx)(TableBody, { children: clients.map((client3) => {
        let integration = integrationsList.find(
          (i) => i.identifier === client3.integrationIdentifier
        );
        return integration ? /* @__PURE__ */ (0, import_jsx_runtime263.jsxs)(TableRow, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime263.jsx)(TableCell, { children: /* @__PURE__ */ (0, import_jsx_runtime263.jsx)(
            IntegrationWithMissingFieldSheet,
            {
              integration,
              organizationId,
              button: /* @__PURE__ */ (0, import_jsx_runtime263.jsxs)("span", { className: "inline-flex items-center gap-1", children: [
                /* @__PURE__ */ (0, import_jsx_runtime263.jsx)(NamedIcon, { name: "error", className: "h-5 w-5" }),
                " ",
                client3.title
              ] }),
              callbackUrl,
              existingIntegration: client3,
              className: "flex w-full cursor-pointer justify-start"
            }
          ) }),
          /* @__PURE__ */ (0, import_jsx_runtime263.jsx)(TableCell, { children: /* @__PURE__ */ (0, import_jsx_runtime263.jsx)(
            IntegrationWithMissingFieldSheet,
            {
              integration,
              organizationId,
              button: /* @__PURE__ */ (0, import_jsx_runtime263.jsxs)("span", { className: "flex items-center gap-1", children: [
                /* @__PURE__ */ (0, import_jsx_runtime263.jsx)(NamedIcon, { name: client3.integrationIdentifier, className: "h-5 w-5" }),
                client3.integration.name
              ] }),
              callbackUrl,
              existingIntegration: client3,
              className: "flex w-full cursor-pointer justify-start"
            }
          ) }),
          /* @__PURE__ */ (0, import_jsx_runtime263.jsx)(TableCell, { children: /* @__PURE__ */ (0, import_jsx_runtime263.jsx)(
            IntegrationWithMissingFieldSheet,
            {
              integration,
              organizationId,
              button: /* @__PURE__ */ (0, import_jsx_runtime263.jsx)(DateTime, { date: client3.createdAt }),
              callbackUrl,
              existingIntegration: client3,
              className: "flex w-full cursor-pointer justify-start"
            }
          ) }),
          /* @__PURE__ */ (0, import_jsx_runtime263.jsx)(TableCell, { alignment: "right", children: /* @__PURE__ */ (0, import_jsx_runtime263.jsx)(
            IntegrationWithMissingFieldSheet,
            {
              integration,
              organizationId,
              button: /* @__PURE__ */ (0, import_jsx_runtime263.jsx)(import_solid101.ChevronRightIcon, { className: "h-4 w-4 text-text-dimmed transition group-hover:text-text-bright" }),
              callbackUrl,
              existingIntegration: client3,
              className: "flex w-full cursor-pointer justify-end"
            }
          ) })
        ] }, client3.id) : /* @__PURE__ */ (0, import_jsx_runtime263.jsx)("div", { children: "Can't find matching integration" }, client3.id);
      }) })
    ] })
  ] });
}
function AddIntegrationConnection({
  identifier,
  name,
  isIntegration,
  icon
}) {
  return /* @__PURE__ */ (0, import_jsx_runtime263.jsx)(
    DetailCell,
    {
      className: "w-full",
      leadingIcon: icon ?? identifier,
      label: name,
      trailingIcon: "plus",
      trailingIconClassName: "text-charcoal-700 group-hover:text-text-bright"
    }
  );
}

// app/routes/_app.orgs.$organizationSlug_.select-plan/route.tsx
var route_exports102 = {};
__export(route_exports102, {
  default: () => ChoosePlanPage,
  loader: () => loader91
});
var import_remix_typedjson75 = require("remix-typedjson");
var import_jsx_runtime264 = require("react/jsx-runtime");
async function loader91({ params, request }) {
  await requireUserId(request);
  let { organizationSlug } = OrganizationParamsSchema.parse(params), { isManagedCloud: isManagedCloud2 } = featuresForRequest(request);
  if (!isManagedCloud2)
    return (0, import_remix_typedjson75.redirect)(organizationPath({ slug: organizationSlug }));
  let plans = await getPlans();
  if (!plans)
    throw new Response(null, { status: 404, statusText: "Plans not found" });
  let organization = await prisma.organization.findUnique({
    where: { slug: organizationSlug }
  });
  if (!organization)
    throw new Response(null, { status: 404, statusText: "Organization not found" });
  if (organization.v3Enabled)
    return (0, import_remix_typedjson75.redirect)(organizationPath({ slug: organizationSlug }));
  let currentPlan = await getCurrentPlan(organization.id);
  return (0, import_remix_typedjson75.typedjson)({ ...plans, ...currentPlan, organizationSlug });
}
function ChoosePlanPage() {
  let { plans, v3Subscription, organizationSlug } = (0, import_remix_typedjson75.useTypedLoaderData)();
  return /* @__PURE__ */ (0, import_jsx_runtime264.jsxs)(MainCenteredContainer, { className: "flex max-w-[80rem] flex-col items-center gap-8 p-3", children: [
    /* @__PURE__ */ (0, import_jsx_runtime264.jsx)(Header1, { className: "text-center", children: "Subscribe for full access" }),
    /* @__PURE__ */ (0, import_jsx_runtime264.jsx)(
      PricingPlans,
      {
        plans,
        subscription: v3Subscription,
        organizationSlug,
        hasPromotedPlan: !0
      }
    )
  ] });
}

// app/routes/admin.api.v1.environments.$environmentId.ts
var admin_api_v1_environments_environmentId_exports = {};
__export(admin_api_v1_environments_environmentId_exports, {
  action: () => action41
});
var import_server_runtime44 = require("@remix-run/server-runtime"), import_zod177 = require("zod");
var ParamsSchema36 = import_zod177.z.object({
  environmentId: import_zod177.z.string()
}), RequestBodySchema2 = import_zod177.z.object({
  envMaximumConcurrencyLimit: import_zod177.z.number(),
  orgMaximumConcurrencyLimit: import_zod177.z.number()
});
async function action41({ request, params }) {
  let authenticationResult = await authenticateApiRequestWithPersonalAccessToken(request);
  if (!authenticationResult)
    return (0, import_server_runtime44.json)({ error: "Invalid or Missing API key" }, { status: 401 });
  let user = await prisma.user.findUnique({
    where: {
      id: authenticationResult.userId
    }
  });
  if (!user)
    return (0, import_server_runtime44.json)({ error: "Invalid or Missing API key" }, { status: 401 });
  if (!user.admin)
    return (0, import_server_runtime44.json)({ error: "You must be an admin to perform this action" }, { status: 403 });
  let parsedParams = ParamsSchema36.parse(params), rawBody = await request.json(), body = RequestBodySchema2.parse(rawBody), environment = await prisma.runtimeEnvironment.update({
    where: {
      id: parsedParams.environmentId
    },
    data: {
      maximumConcurrencyLimit: body.envMaximumConcurrencyLimit,
      organization: {
        update: {
          data: {
            maximumConcurrencyLimit: body.orgMaximumConcurrencyLimit
          }
        }
      }
    },
    include: {
      organization: !0,
      project: !0
    }
  });
  return await marqs?.updateEnvConcurrencyLimits(environment), (0, import_server_runtime44.json)({ success: !0 });
}

// app/routes/_app.orgs.$organizationSlug_.subscribed/route.tsx
var route_exports103 = {};
__export(route_exports103, {
  default: () => Subscribed,
  handle: () => handle3,
  loader: () => loader92
});
var import_solid102 = require("@heroicons/react/24/solid"), import_remix_typedjson76 = require("remix-typedjson");

// app/hooks/useNewCustomerSubscribed.ts
var import_react204 = require("react");
function useNewCustomerSubscribed() {
  (0, import_react204.useEffect)(() => {
    if ("confetti" in window && typeof window.confetti < "u") {
      let randomInRange2 = function(min, max) {
        return Math.random() * (max - min) + min;
      };
      var randomInRange = randomInRange2;
      let animationEnd = Date.now() + 3500, defaults = {
        startVelocity: 30,
        spread: 360,
        ticks: 60,
        zIndex: 0,
        colors: [
          "#E7FF52",
          "#41FF54",
          "rgb(245 158 11)",
          "rgb(22 163 74)",
          "rgb(37 99 235)",
          "rgb(67 56 202)",
          "rgb(219 39 119)",
          "rgb(225 29 72)",
          "rgb(217 70 239)"
        ]
      }, interval = setInterval(function() {
        let timeLeft = animationEnd - Date.now();
        if (timeLeft <= 0)
          return clearInterval(interval);
        let particleCount = 60 * (timeLeft / 3500);
        window.confetti(
          Object.assign({}, defaults, {
            particleCount,
            origin: { x: randomInRange2(0.1, 0.4), y: Math.random() - 0.2 }
          })
        ), window.confetti(
          Object.assign({}, defaults, {
            particleCount,
            origin: { x: randomInRange2(0.6, 0.9), y: Math.random() - 0.2 }
          })
        );
      }, 250);
    }
  }, []);
}

// app/routes/_app.orgs.$organizationSlug_.subscribed/route.tsx
var import_jsx_runtime265 = require("react/jsx-runtime"), loader92 = async ({ request, params }) => {
  let userId = await requireUserId(request), { organizationSlug } = OrganizationParamsSchema.parse(params), orgsPresenter = new OrganizationsPresenter(), { organization } = await orgsPresenter.call({
    userId,
    request,
    organizationSlug,
    projectSlug: void 0
  }), { isManagedCloud: isManagedCloud2 } = featuresForRequest(request), billingPresenter = new BillingService(isManagedCloud2), currentPlan = await billingPresenter.currentPlan(organization.id), plans = await billingPresenter.getPlans();
  return (0, import_remix_typedjson76.typedjson)({
    currentPlan,
    plans
  });
}, handle3 = {
  scripts: () => [
    {
      src: "https://cdn.jsdelivr.net/npm/canvas-confetti@1.5.1/dist/confetti.browser.min.js",
      crossOrigin: "anonymous"
    }
  ]
};
function Subscribed() {
  let { currentPlan, plans } = (0, import_remix_typedjson76.useTypedLoaderData)();
  return useNewCustomerSubscribed(), /* @__PURE__ */ (0, import_jsx_runtime265.jsxs)(MainCenteredContainer, { className: "max-w-[22rem]", children: [
    /* @__PURE__ */ (0, import_jsx_runtime265.jsx)(
      FormTitle,
      {
        LeadingIcon: /* @__PURE__ */ (0, import_jsx_runtime265.jsx)(import_solid102.CheckBadgeIcon, { className: "h-7 w-7 text-green-600" }),
        title: "You're subscribed!",
        className: "mb-0"
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime265.jsxs)("ul", { children: [
      /* @__PURE__ */ (0, import_jsx_runtime265.jsx)(PlanItem, { item: "Your plan", value: currentPlan?.subscription?.plan.title ?? "\u2013" }),
      /* @__PURE__ */ (0, import_jsx_runtime265.jsx)(
        PlanItem,
        {
          item: "Concurrent runs/mo",
          value: `${currentPlan?.subscription?.plan.concurrentRuns.pricing?.upto}`
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime265.jsx)(PlanItem, { item: "Runs/mo", value: "Volume discounted" })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime265.jsx)(
      RunsVolumeDiscountTable,
      {
        hideHeader: !0,
        className: "mb-4 border-b border-grid-bright pb-2 pl-4",
        brackets: plans?.paid.runs?.pricing?.brackets ?? []
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime265.jsx)(
      FormButtons,
      {
        confirmButton: /* @__PURE__ */ (0, import_jsx_runtime265.jsx)(LinkButton, { to: "/", variant: "primary/small", TrailingIcon: "arrow-right", children: "Continue" })
      }
    )
  ] });
}
function PlanItem({ item, value }) {
  return /* @__PURE__ */ (0, import_jsx_runtime265.jsxs)("li", { className: "flex items-center justify-between border-b border-grid-bright py-2", children: [
    /* @__PURE__ */ (0, import_jsx_runtime265.jsx)(Paragraph, { children: item }),
    /* @__PURE__ */ (0, import_jsx_runtime265.jsx)(Paragraph, { variant: "base/bright", className: "font-medium", children: value })
  ] });
}

// app/routes/api.v1.schedules.$scheduleId.deactivate.ts
var api_v1_schedules_scheduleId_deactivate_exports = {};
__export(api_v1_schedules_scheduleId_deactivate_exports, {
  action: () => action42
});
var import_server_runtime45 = require("@remix-run/server-runtime"), import_zod178 = require("zod");
var ParamsSchema37 = import_zod178.z.object({
  scheduleId: import_zod178.z.string()
});
async function action42({ request, params }) {
  if (request.method.toUpperCase() !== "POST")
    return { status: 405, body: "Method Not Allowed" };
  let authenticationResult = await authenticateApiRequest(request);
  if (!authenticationResult)
    return (0, import_server_runtime45.json)({ error: "Invalid or Missing API Key" }, { status: 401 });
  let parsedParams = ParamsSchema37.safeParse(params);
  if (!parsedParams.success)
    return (0, import_server_runtime45.json)(
      { error: "Invalid request parameters", issues: parsedParams.error.issues },
      { status: 400 }
    );
  try {
    if (!await prisma.taskSchedule.findFirst({
      where: {
        friendlyId: parsedParams.data.scheduleId,
        projectId: authenticationResult.environment.projectId
      }
    }))
      return (0, import_server_runtime45.json)({ error: "Schedule not found" }, { status: 404 });
    await prisma.taskSchedule.update({
      where: {
        friendlyId: parsedParams.data.scheduleId,
        projectId: authenticationResult.environment.projectId
      },
      data: {
        active: !1
      }
    });
    let presenter = new ViewSchedulePresenter(), result = await presenter.call({
      projectId: authenticationResult.environment.projectId,
      friendlyId: parsedParams.data.scheduleId
    });
    return result ? (0, import_server_runtime45.json)(presenter.toJSONResponse(result), { status: 200 }) : (0, import_server_runtime45.json)({ error: "Schedule not found" }, { status: 404 });
  } catch (error) {
    return (0, import_server_runtime45.json)(
      { error: error instanceof Error ? error.message : "Internal Server Error" },
      { status: 500 }
    );
  }
}

// app/routes/_app.orgs.$organizationSlug.v3.billing/route.tsx
var route_exports104 = {};
__export(route_exports104, {
  default: () => ChoosePlanPage2,
  loader: () => loader93
});
var import_remix_typedjson77 = require("remix-typedjson");
var import_solid103 = require("@heroicons/react/20/solid");
var import_jsx_runtime266 = require("react/jsx-runtime");
async function loader93({ params, request }) {
  await requireUserId(request);
  let { organizationSlug } = OrganizationParamsSchema.parse(params), { isManagedCloud: isManagedCloud2 } = featuresForRequest(request);
  if (!isManagedCloud2)
    return (0, import_remix_typedjson77.redirect)(organizationPath({ slug: organizationSlug }));
  let plans = await getPlans();
  if (!plans)
    throw new Response(null, { status: 404, statusText: "Plans not found" });
  let organization = await prisma.organization.findUnique({
    where: { slug: organizationSlug }
  });
  if (!organization)
    throw new Response(null, { status: 404, statusText: "Organization not found" });
  let currentPlan = await getCurrentPlan(organization.id), periodStart = /* @__PURE__ */ new Date();
  periodStart.setUTCHours(0, 0, 0, 0), periodStart.setUTCDate(1);
  let periodEnd = /* @__PURE__ */ new Date();
  periodEnd.setUTCMonth(periodEnd.getMonth() + 1), periodEnd.setUTCDate(0), periodEnd.setUTCHours(0, 0, 0, 0);
  let daysRemaining = Math.ceil(
    (periodEnd.getTime() - (/* @__PURE__ */ new Date()).getTime()) / (1e3 * 60 * 60 * 24)
  );
  return (0, import_remix_typedjson77.typedjson)({
    ...plans,
    ...currentPlan,
    organizationSlug,
    periodStart,
    periodEnd,
    daysRemaining
  });
}
function ChoosePlanPage2() {
  let { plans, v3Subscription, organizationSlug, periodStart, periodEnd, daysRemaining } = (0, import_remix_typedjson77.useTypedLoaderData)();
  return /* @__PURE__ */ (0, import_jsx_runtime266.jsxs)(PageContainer, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime266.jsxs)(NavBar, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime266.jsx)(PageTitle, { title: "Billing" }),
      /* @__PURE__ */ (0, import_jsx_runtime266.jsx)(PageAccessories, { children: v3Subscription?.isPaying && /* @__PURE__ */ (0, import_jsx_runtime266.jsxs)(import_jsx_runtime266.Fragment, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime266.jsx)(
          LinkButton,
          {
            to: v3StripePortalPath({ slug: organizationSlug }),
            variant: "tertiary/small",
            children: "Invoices"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime266.jsx)(
          LinkButton,
          {
            to: v3StripePortalPath({ slug: organizationSlug }),
            variant: "tertiary/small",
            children: "Manage card details"
          }
        )
      ] }) })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime266.jsx)(PageBody, { scrollable: !0, children: /* @__PURE__ */ (0, import_jsx_runtime266.jsxs)("div", { className: "flex flex-col gap-3", children: [
      /* @__PURE__ */ (0, import_jsx_runtime266.jsxs)("div", { className: "flex flex-col gap-y-3 divide-grid-bright rounded-sm border border-grid-bright bg-background-bright py-2 pr-1 text-text-bright lg:w-fit lg:flex-row lg:items-center lg:divide-x", children: [
        /* @__PURE__ */ (0, import_jsx_runtime266.jsxs)("div", { className: "flex gap-2 px-3 lg:items-center", children: [
          /* @__PURE__ */ (0, import_jsx_runtime266.jsx)(import_solid103.StarIcon, { className: "size-5 min-w-5 lg:-mt-0.5" }),
          planLabel(v3Subscription?.plan, v3Subscription?.canceledAt !== void 0, periodEnd)
        ] }),
        v3Subscription?.isPaying ? /* @__PURE__ */ (0, import_jsx_runtime266.jsxs)("div", { className: "flex gap-2 px-3 lg:items-center", children: [
          /* @__PURE__ */ (0, import_jsx_runtime266.jsx)(import_solid103.CalendarDaysIcon, { className: "size-5 min-w-5 lg:-mt-0.5" }),
          "Billing period: ",
          /* @__PURE__ */ (0, import_jsx_runtime266.jsx)(
            DateTime,
            {
              date: periodStart,
              includeTime: !1,
              timeZone: "UTC"
            }
          ),
          " ",
          "to ",
          /* @__PURE__ */ (0, import_jsx_runtime266.jsx)(DateTime, { date: periodEnd, includeTime: !1, timeZone: "UTC" }),
          " (",
          daysRemaining,
          " ",
          "days remaining)"
        ] }) : null
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime266.jsx)("div", { children: /* @__PURE__ */ (0, import_jsx_runtime266.jsx)(
        PricingPlans,
        {
          plans,
          subscription: v3Subscription,
          organizationSlug,
          hasPromotedPlan: !1
        }
      ) })
    ] }) })
  ] });
}
function planLabel(plan, canceled, periodEnd) {
  if (!plan || plan.type === "free")
    return "You're on the Free plan";
  if (plan.type === "enterprise")
    return "You're on the Enterprise plan";
  let text = `You're on the $${plan.tierPrice}/mo ${plan.title} plan`;
  return canceled ? /* @__PURE__ */ (0, import_jsx_runtime266.jsxs)(import_jsx_runtime266.Fragment, { children: [
    text,
    ". From ",
    /* @__PURE__ */ (0, import_jsx_runtime266.jsx)(DateTime, { includeTime: !1, date: periodEnd }),
    " you're on the Free plan."
  ] }) : text;
}

// app/routes/projects.v3.$projectRef.runs.$runParam.ts
var projects_v3_projectRef_runs_runParam_exports = {};
__export(projects_v3_projectRef_runs_runParam_exports, {
  loader: () => loader94
});
var import_server_runtime46 = require("@remix-run/server-runtime"), import_zod179 = require("zod");
var ParamsSchema38 = import_zod179.z.object({
  projectRef: import_zod179.z.string(),
  runParam: import_zod179.z.string()
});
async function loader94({ params, request }) {
  let userId = await requireUserId(request), validatedParams = ParamsSchema38.parse(params), project = await prisma.project.findFirst({
    where: {
      externalRef: validatedParams.projectRef,
      organization: {
        members: {
          some: {
            userId
          }
        }
      }
    },
    include: {
      organization: !0
    }
  });
  if (!project)
    return new Response("Not found", { status: 404 });
  let run = await prisma.taskRun.findUnique({
    where: {
      friendlyId: validatedParams.runParam
    }
  });
  if (!run)
    throw new Response("Not found", { status: 404 });
  return (0, import_server_runtime46.redirect)(
    v3RunSpanPath({ slug: project.organization.slug }, { slug: project.slug }, run, {
      spanId: run.spanId
    })
  );
}

// app/routes/resources.runs.$runParam.logs.download.ts
var resources_runs_runParam_logs_download_exports = {};
__export(resources_runs_runParam_logs_download_exports, {
  loader: () => loader95
});
var import_zlib = require("zlib"), import_stream2 = require("stream");
async function loader95({ params, request }) {
  let userId = await requireUserId(request), parsedParams = v3RunParamsSchema.pick({ runParam: !0 }).parse(params), run = await prisma.taskRun.findFirst({
    where: {
      friendlyId: parsedParams.runParam,
      project: {
        organization: {
          members: {
            some: {
              userId
            }
          }
        }
      }
    }
  });
  if (!run)
    return new Response("Not found", { status: 404 });
  let runEvents = await eventRepository.getRunEvents(run.friendlyId), readable = new import_stream2.Readable({
    read() {
      runEvents.forEach((event) => {
        try {
          this.push(formatRunEvent(event) + `
`);
        } catch {
        }
      }), this.push(null);
    }
  }), gzip = (0, import_zlib.createGzip)(), compressedStream = readable.pipe(gzip);
  return new Response(compressedStream, {
    status: 200,
    headers: {
      "Content-Type": "application/octet-stream",
      "Content-Disposition": `attachment; filename="${parsedParams.runParam}.log"`,
      "Content-Encoding": "gzip"
    }
  });
}
function formatRunEvent(event) {
  let entries = [], parts = [];
  if (parts.push(getDateFromNanoseconds(event.startTime).toISOString()), event.taskSlug && parts.push(event.taskSlug), parts.push(event.level), parts.push(event.message), event.level === "TRACE" && parts.push(`(${formatDurationMilliseconds(event.duration / 1e6)})`), entries.push(parts.join(" ")), event.events) {
    for (let subEvent of event.events)
      if (subEvent.name === "exception") {
        let subEventParts = [];
        subEventParts.push(subEvent.time), event.taskSlug && subEventParts.push(event.taskSlug), subEventParts.push(subEvent.name), subEventParts.push(subEvent.properties.exception.message), subEvent.properties.exception.stack && subEventParts.push(subEvent.properties.exception.stack), entries.push(subEventParts.join(" "));
      }
  }
  return entries.join(`
`);
}

// app/routes/api.v1.runs.$runId.tasks.$id.complete/route.ts
var route_exports105 = {};
__export(route_exports105, {
  action: () => action43
});
var import_server_runtime47 = require("@remix-run/server-runtime");
var import_zod180 = require("zod");

// app/utils/parseRequestJson.server.ts
async function parseRequestJsonAsync(request, attributes) {
  return await startActiveSpan(
    "parseRequestJsonAsync()",
    async (span) => {
      span.setAttribute("content-length", parseInt(request.headers.get("content-length") ?? "0")), span.setAttribute("content-type", request.headers.get("content-type") ?? "application/json"), span.setAttribute("experiment.async", !1);
      let rawText = await startActiveSpan("request.text()", async () => await request.text());
      if (rawText.length !== 0)
        return JSON.parse(rawText);
    },
    {
      attributes
    }
  );
}

// app/routes/api.v1.runs.$runId.tasks.$id.fail/FailRunTaskService.server.ts
var FailRunTaskService = class {
  #prismaClient;
  constructor(prismaClient = prisma) {
    this.#prismaClient = prismaClient;
  }
  async call(environment, runId, id, taskBody) {
    let task = await this.#prismaClient.$transaction(async (tx) => {
      let existingTask = await tx.task.findUnique({
        where: {
          id
        },
        include: {
          run: !0,
          attempts: {
            where: {
              status: "PENDING"
            },
            orderBy: {
              number: "desc"
            },
            take: 1
          }
        }
      });
      if (existingTask && existingTask.runId === runId && existingTask.run.environmentId === environment.id)
        return existingTask.status === "COMPLETED" || existingTask.status === "ERRORED" || existingTask.status === "CANCELED" ? existingTask : (existingTask.attempts.length === 1 && await tx.taskAttempt.update({
          where: {
            id: existingTask.attempts[0].id
          },
          data: {
            status: "ERRORED",
            error: formatError(taskBody.error)
          }
        }), await tx.task.update({
          where: {
            id
          },
          data: {
            status: "ERRORED",
            output: taskBody.error ?? void 0,
            completedAt: /* @__PURE__ */ new Date()
          },
          include: {
            attempts: !0,
            run: !0
          }
        }));
    });
    return task ? taskWithAttemptsToServerTask(task) : void 0;
  }
};

// app/routes/api.v1.runs.$runId.tasks.$id.complete/route.ts
var ParamsSchema39 = import_zod180.z.object({
  runId: import_zod180.z.string(),
  id: import_zod180.z.string()
}), HeadersSchema2 = import_zod180.z.object({
  "trigger-version": import_zod180.z.string().optional().nullable()
});
async function action43({ request, params }) {
  if (request.method.toUpperCase() !== "POST")
    return { status: 405, body: "Method Not Allowed" };
  let authenticationResult = await authenticateApiRequest(request);
  if (!authenticationResult)
    return (0, import_server_runtime47.json)({ error: "Invalid or Missing API key" }, { status: 401 });
  let authenticatedEnv = authenticationResult.environment, { runId, id } = ParamsSchema39.parse(params), headers = HeadersSchema2.safeParse(Object.fromEntries(request.headers));
  if (!headers.success)
    return (0, import_server_runtime47.json)({ error: "Invalid headers" }, { status: 400 });
  let contentLength = request.headers.get("content-length");
  if (!contentLength || parseInt(contentLength) > 3 * 1024 * 1024)
    return await new FailRunTaskService().call(authenticatedEnv, runId, id, {
      error: {
        message: "Task output is too large. The limit is 3MB"
      }
    }), (0, import_server_runtime47.json)({ error: "Task output is too large. The limit is 3MB" }, { status: 413 });
  let { "trigger-version": triggerVersion } = headers.data, anyBody = await parseRequestJsonAsync(request, { runId });
  if (triggerVersion === API_VERSIONS.SERIALIZED_TASK_OUTPUT) {
    let body = await startActiveSpan("CompleteTaskBodyV2InputSchema.safeParse()", async () => CompleteTaskBodyV2InputSchema.safeParse(anyBody));
    return body.success ? await completeRunTask(authenticatedEnv, runId, id, {
      ...body.data,
      output: body.data.output ? JSON.parse(body.data.output) : void 0
    }) : (0, import_server_runtime47.json)({ error: "Invalid request body" }, { status: 400 });
  } else {
    let body = await startActiveSpan("CompleteTaskBodyInputSchema.safeParse()", async () => CompleteTaskBodyInputSchema.omit({ output: !0 }).safeParse(anyBody));
    if (!body.success)
      return (0, import_server_runtime47.json)({ error: "Invalid request body" }, { status: 400 });
    let output = anyBody.output;
    return await completeRunTask(authenticatedEnv, runId, id, { ...body.data, output });
  }
}
async function completeRunTask(environment, runId, id, taskBody) {
  let service = new CompleteRunTaskService();
  try {
    let task = await service.call(environment, runId, id, taskBody);
    return task ? (0, import_server_runtime47.json)(task) : (0, import_server_runtime47.json)({ message: "Task not found" }, { status: 404 });
  } catch (error) {
    return error instanceof Error ? (0, import_server_runtime47.json)({ error: error.message }, { status: 400 }) : (0, import_server_runtime47.json)({ error: "Something went wrong" }, { status: 500 });
  }
}

// app/routes/api.v1.schedules.$scheduleId.activate.ts
var api_v1_schedules_scheduleId_activate_exports = {};
__export(api_v1_schedules_scheduleId_activate_exports, {
  action: () => action44
});
var import_server_runtime48 = require("@remix-run/server-runtime"), import_zod181 = require("zod");
var ParamsSchema40 = import_zod181.z.object({
  scheduleId: import_zod181.z.string()
});
async function action44({ request, params }) {
  if (request.method.toUpperCase() !== "POST")
    return { status: 405, body: "Method Not Allowed" };
  let authenticationResult = await authenticateApiRequest(request);
  if (!authenticationResult)
    return (0, import_server_runtime48.json)({ error: "Invalid or Missing API Key" }, { status: 401 });
  let parsedParams = ParamsSchema40.safeParse(params);
  if (!parsedParams.success)
    return (0, import_server_runtime48.json)(
      { error: "Invalid request parameters", issues: parsedParams.error.issues },
      { status: 400 }
    );
  try {
    if (!await prisma.taskSchedule.findFirst({
      where: {
        friendlyId: parsedParams.data.scheduleId,
        projectId: authenticationResult.environment.projectId
      }
    }))
      return (0, import_server_runtime48.json)({ error: "Schedule not found" }, { status: 404 });
    await prisma.taskSchedule.update({
      where: {
        friendlyId: parsedParams.data.scheduleId,
        projectId: authenticationResult.environment.projectId
      },
      data: {
        active: !0
      }
    });
    let presenter = new ViewSchedulePresenter(), result = await presenter.call({
      projectId: authenticationResult.environment.projectId,
      friendlyId: parsedParams.data.scheduleId
    });
    return result ? (0, import_server_runtime48.json)(presenter.toJSONResponse(result), { status: 200 }) : (0, import_server_runtime48.json)({ error: "Schedule not found" }, { status: 404 });
  } catch (error) {
    return (0, import_server_runtime48.json)(
      { error: error instanceof Error ? error.message : "Internal Server Error" },
      { status: 500 }
    );
  }
}

// app/routes/internal.webhooks.slack.interactivity.ts
var internal_webhooks_slack_interactivity_exports = {};
__export(internal_webhooks_slack_interactivity_exports, {
  action: () => action45
});
function action45({ request }) {
  return new Response(null, { status: 200 });
}

// app/routes/resources.$organizationSlug.subscribe.ts
var resources_organizationSlug_subscribe_exports = {};
__export(resources_organizationSlug_subscribe_exports, {
  action: () => action46
});
var import_zod182 = require("@conform-to/zod"), import_server_runtime49 = require("@remix-run/server-runtime"), import_v29 = require("@trigger.dev/platform/v2"), import_remix_typedjson78 = require("remix-typedjson");
async function action46({ request, params }) {
  let userId = await requireUserId(request), { organizationSlug } = OrganizationParamsSchema.parse(params), formData = await request.formData(), submission = (0, import_zod182.parse)(formData, { schema: import_v29.SetPlanBodySchema });
  if (!submission.value || submission.intent !== "submit")
    return (0, import_server_runtime49.json)(submission);
  try {
    let org = await prisma.organization.findUnique({
      select: {
        id: !0
      },
      where: {
        slug: organizationSlug,
        members: {
          some: {
            userId
          }
        }
      }
    });
    if (!org)
      return submission.error.message = "Invalid organization", (0, import_server_runtime49.json)(submission);
    let result = await new BillingService(!0).setPlan(org.id, submission.value);
    if (result === void 0)
      return submission.error.message = "No billing client", (0, import_server_runtime49.json)(submission);
    if (!result.success)
      return submission.error.message = result.error, (0, import_server_runtime49.json)(submission);
    switch (result.action) {
      case "create_subscription_flow_start":
        return (0, import_remix_typedjson78.redirect)(result.checkoutUrl);
      case "canceled_subscription":
        return redirectWithSuccessMessage(
          organizationBillingPath({ slug: organizationSlug }),
          request,
          "Your subscription has been canceled."
        );
      case "updated_subscription":
        return (0, import_remix_typedjson78.redirect)(subscribedPath({ slug: organizationSlug }), request);
    }
  } catch (e) {
    return logger.error("Error setting plan", { error: e }), submission.error.message = e instanceof Error ? e.message : JSON.stringify(e), (0, import_server_runtime49.json)(submission);
  }
}

// app/routes/_app.orgs.$organizationSlug.settings/route.tsx
var route_exports106 = {};
__export(route_exports106, {
  action: () => action47,
  createSchema: () => createSchema4,
  default: () => Page63
});
var import_react205 = require("@conform-to/react"), import_zod183 = require("@conform-to/zod"), import_react206 = require("@remix-run/react"), import_server_runtime50 = require("@remix-run/server-runtime"), import_remix_typedjson79 = require("remix-typedjson"), import_zod184 = require("zod");

// app/services/deleteOrganization.server.ts
var import_date2 = require("@internationalized/date");
var DeleteOrganizationService = class {
  #prismaClient;
  constructor(prismaClient = prisma) {
    this.#prismaClient = prismaClient;
  }
  async call({
    organizationSlug,
    userId,
    request
  }) {
    let organization = await this.#prismaClient.organization.findFirst({
      include: {
        projects: !0,
        members: !0
      },
      where: {
        slug: organizationSlug,
        members: { some: { userId } }
      }
    });
    if (!organization)
      throw new Error("Organization not found");
    if (organization.deletedAt)
      throw new Error("Organization already deleted");
    let { isManagedCloud: isManagedCloud2 } = featuresForRequest(request), currentPlan = await new BillingService(isManagedCloud2).currentPlan(organization.id);
    if (currentPlan && currentPlan.subscription && currentPlan.subscription.isPaying) {
      if (currentPlan.subscription.canceledAt && new Date(currentPlan.subscription.canceledAt) > /* @__PURE__ */ new Date()) {
        let dateFormatter3 = new import_date2.DateFormatter("en-us", {
          year: "numeric",
          month: "short",
          day: "numeric"
        });
        throw new Error(
          `This Organization has a canceled subscription. You can delete it when the cancelation date (${dateFormatter3.format(
            new Date(currentPlan.subscription.canceledAt)
          )}) is in the past.`
        );
      }
      throw new Error("You can't delete an Organization that has an active subscription");
    }
    let projectDeleteService = new DeleteProjectService();
    for (let project of organization.projects)
      await projectDeleteService.call({ projectId: project.id, userId });
    await this.#prismaClient.integrationConnection.updateMany({
      where: {
        organizationId: organization.id
      },
      data: {
        enabled: !1
      }
    }), await this.#prismaClient.organization.update({
      where: {
        id: organization.id
      },
      data: {
        runsEnabled: !1,
        deletedAt: /* @__PURE__ */ new Date()
      }
    });
  }
};

// app/routes/_app.orgs.$organizationSlug.settings/route.tsx
var import_jsx_runtime267 = require("react/jsx-runtime");
function createSchema4(constraints = {}) {
  return import_zod184.z.discriminatedUnion("action", [
    import_zod184.z.object({
      action: import_zod184.z.literal("rename"),
      organizationName: import_zod184.z.string().min(3, "Organization name must have at least 3 characters").max(50)
    }),
    import_zod184.z.object({
      action: import_zod184.z.literal("delete"),
      organizationSlug: import_zod184.z.string().superRefine((slug3, ctx) => {
        if (constraints.getSlugMatch === void 0)
          ctx.addIssue({
            code: import_zod184.z.ZodIssueCode.custom,
            message: import_react205.conform.VALIDATION_UNDEFINED
          });
        else {
          let { isMatch, organizationSlug } = constraints.getSlugMatch(slug3);
          if (isMatch)
            return;
          ctx.addIssue({
            code: import_zod184.z.ZodIssueCode.custom,
            message: `The slug must match ${organizationSlug}`
          });
        }
      })
    })
  ]);
}
var action47 = async ({ request, params }) => {
  let userId = await requireUserId(request), { organizationSlug } = params;
  if (!organizationSlug)
    return (0, import_server_runtime50.json)({ errors: { body: "organizationSlug is required" } }, { status: 400 });
  let formData = await request.formData(), schema18 = createSchema4({
    getSlugMatch: (slug3) => ({ isMatch: slug3 === organizationSlug, organizationSlug })
  }), submission = (0, import_zod183.parse)(formData, { schema: schema18 });
  if (!submission.value || submission.intent !== "submit")
    return (0, import_server_runtime50.json)(submission);
  try {
    switch (submission.value.action) {
      case "rename":
        return await prisma.organization.update({
          where: {
            slug: organizationSlug,
            members: {
              some: {
                userId
              }
            }
          },
          data: {
            title: submission.value.organizationName
          }
        }), redirectWithSuccessMessage(
          organizationPath({ slug: organizationSlug }),
          request,
          `Organization renamed to ${submission.value.organizationName}`
        );
      case "delete": {
        let deleteOrganizationService = new DeleteOrganizationService();
        try {
          await deleteOrganizationService.call({ organizationSlug, userId, request });
          let removeProjectIdSession = await clearCurrentProjectId(request);
          return (0, import_remix_typedjson79.redirect)(rootPath(), {
            headers: {
              "Set-Cookie": await commitCurrentProjectSession(removeProjectIdSession)
            }
          });
        } catch (error) {
          let errorMessage = error instanceof Error ? error.message : JSON.stringify(error);
          return logger.error("Organization could not be deleted", {
            error: errorMessage
          }), redirectWithErrorMessage(
            organizationSettingsPath({ slug: organizationSlug }),
            request,
            errorMessage
          );
        }
      }
    }
  } catch (error) {
    return (0, import_server_runtime50.json)({ errors: { body: error.message } }, { status: 400 });
  }
};
function Page63() {
  let organization = useOrganization(), lastSubmission = (0, import_react206.useActionData)(), navigation = (0, import_react206.useNavigation)(), [renameForm, { organizationName }] = (0, import_react205.useForm)({
    id: "rename-organization",
    // TODO: type this
    lastSubmission,
    shouldRevalidate: "onSubmit",
    onValidate({ formData }) {
      return (0, import_zod183.parse)(formData, {
        schema: createSchema4()
      });
    }
  }), [deleteForm, { organizationSlug }] = (0, import_react205.useForm)({
    id: "delete-organization",
    // TODO: type this
    lastSubmission,
    shouldValidate: "onInput",
    shouldRevalidate: "onSubmit",
    onValidate({ formData }) {
      return (0, import_zod183.parse)(formData, {
        schema: createSchema4({
          getSlugMatch: (slug3) => ({
            isMatch: slug3 === organization.slug,
            organizationSlug: organization.slug
          })
        })
      });
    }
  }), isRenameLoading = navigation.formData?.get("action") === "rename" && (navigation.state === "submitting" || navigation.state === "loading"), isDeleteLoading = navigation.formData?.get("action") === "delete" && (navigation.state === "submitting" || navigation.state === "loading");
  return /* @__PURE__ */ (0, import_jsx_runtime267.jsxs)(PageContainer, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime267.jsx)(NavBar, { children: /* @__PURE__ */ (0, import_jsx_runtime267.jsx)(PageTitle, { title: `${organization.title} organization settings` }) }),
    /* @__PURE__ */ (0, import_jsx_runtime267.jsx)(PageBody, { children: /* @__PURE__ */ (0, import_jsx_runtime267.jsxs)("div", { className: "flex flex-col gap-4", children: [
      /* @__PURE__ */ (0, import_jsx_runtime267.jsx)("div", { children: /* @__PURE__ */ (0, import_jsx_runtime267.jsxs)(import_react206.Form, { method: "post", ...renameForm.props, className: "max-w-md", children: [
        /* @__PURE__ */ (0, import_jsx_runtime267.jsx)("input", { type: "hidden", name: "action", value: "rename" }),
        /* @__PURE__ */ (0, import_jsx_runtime267.jsxs)(Fieldset, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime267.jsxs)(InputGroup, { children: [
            /* @__PURE__ */ (0, import_jsx_runtime267.jsx)(Label, { htmlFor: organizationName.id, children: "Rename your organization" }),
            /* @__PURE__ */ (0, import_jsx_runtime267.jsx)(
              Input,
              {
                ...import_react205.conform.input(organizationName, { type: "text" }),
                defaultValue: organization.title,
                placeholder: "Your organization name",
                icon: "folder",
                autoFocus: !0
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime267.jsx)(FormError, { id: organizationName.errorId, children: organizationName.error })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime267.jsx)(
            FormButtons,
            {
              confirmButton: /* @__PURE__ */ (0, import_jsx_runtime267.jsx)(
                Button,
                {
                  type: "submit",
                  variant: "primary/small",
                  disabled: isRenameLoading,
                  LeadingIcon: isRenameLoading ? "spinner-white" : void 0,
                  children: "Rename organization"
                }
              )
            }
          )
        ] })
      ] }) }),
      /* @__PURE__ */ (0, import_jsx_runtime267.jsxs)("div", { children: [
        /* @__PURE__ */ (0, import_jsx_runtime267.jsx)(Header2, { spacing: !0, children: "Danger zone" }),
        /* @__PURE__ */ (0, import_jsx_runtime267.jsxs)(
          import_react206.Form,
          {
            method: "post",
            ...deleteForm.props,
            className: "max-w-md rounded-sm border border-rose-500/40",
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime267.jsx)("input", { type: "hidden", name: "action", value: "delete" }),
              /* @__PURE__ */ (0, import_jsx_runtime267.jsxs)(Fieldset, { className: "p-4", children: [
                /* @__PURE__ */ (0, import_jsx_runtime267.jsxs)(InputGroup, { children: [
                  /* @__PURE__ */ (0, import_jsx_runtime267.jsx)(Label, { htmlFor: organizationSlug.id, children: "Delete organization" }),
                  /* @__PURE__ */ (0, import_jsx_runtime267.jsx)(
                    Input,
                    {
                      ...import_react205.conform.input(organizationSlug, { type: "text" }),
                      placeholder: "Your organization slug",
                      icon: "warning",
                      autoFocus: !0
                    }
                  ),
                  /* @__PURE__ */ (0, import_jsx_runtime267.jsx)(FormError, { id: organizationSlug.errorId, children: organizationSlug.error }),
                  /* @__PURE__ */ (0, import_jsx_runtime267.jsx)(FormError, { children: deleteForm.error }),
                  /* @__PURE__ */ (0, import_jsx_runtime267.jsxs)(Hint, { children: [
                    "This change is irreversible, so please be certain. Type in the Organization slug",
                    " ",
                    /* @__PURE__ */ (0, import_jsx_runtime267.jsx)(InlineCode, { variant: "extra-small", children: organization.slug }),
                    " and then press Delete."
                  ] })
                ] }),
                /* @__PURE__ */ (0, import_jsx_runtime267.jsx)(
                  FormButtons,
                  {
                    confirmButton: /* @__PURE__ */ (0, import_jsx_runtime267.jsx)(
                      Button,
                      {
                        type: "submit",
                        variant: "danger/small",
                        LeadingIcon: isDeleteLoading ? "spinner-white" : "trash-can",
                        leadingIconClassName: "text-white",
                        disabled: isDeleteLoading,
                        children: "Delete organization"
                      }
                    )
                  }
                )
              ] })
            ]
          }
        )
      ] })
    ] }) })
  ] });
}

// app/routes/_app.orgs.$organizationSlug.v3.usage/route.tsx
var route_exports107 = {};
__export(route_exports107, {
  default: () => Page64,
  loader: () => loader96
});
var import_solid104 = require("@heroicons/react/24/solid"), import_react207 = require("@remix-run/react");
var import_react208 = require("react"), import_recharts5 = require("recharts"), import_remix_typedjson80 = require("remix-typedjson"), import_url = require("url");

// app/components/billing/v3/UsageBar.tsx
var import_framer_motion13 = require("framer-motion"), import_jsx_runtime268 = require("react/jsx-runtime"), startFactor = 4;
function UsageBar2({
  current,
  billingLimit,
  tierLimit,
  projectedUsage,
  isPaying
}) {
  let getLargestNumber = Math.max(
    current,
    tierLimit ?? -1 / 0,
    projectedUsage ?? -1 / 0,
    billingLimit ?? -1 / 0,
    5
  ), maxRange = Math.round(getLargestNumber * 1.1), tierRunLimitPercentage = tierLimit ? Math.round(tierLimit / maxRange * 100) : 0, projectedRunsPercentage = projectedUsage ? Math.round(projectedUsage / maxRange * 100) : 0, billingLimitPercentage = billingLimit !== void 0 ? Math.round(billingLimit / maxRange * 100) : 0, usagePercentage = Math.round(current / maxRange * 100), usageCappedToLimitPercentage = Math.min(usagePercentage, tierRunLimitPercentage);
  return /* @__PURE__ */ (0, import_jsx_runtime268.jsx)("div", { className: "h-fit w-full py-12", children: /* @__PURE__ */ (0, import_jsx_runtime268.jsxs)("div", { className: "relative h-3 w-full rounded-sm bg-background-bright", children: [
    billingLimit && /* @__PURE__ */ (0, import_jsx_runtime268.jsx)(
      import_framer_motion13.motion.div,
      {
        initial: { width: billingLimitPercentage / startFactor + "%" },
        animate: { width: billingLimitPercentage + "%" },
        transition: { duration: 1.5, type: "spring" },
        style: { width: `${billingLimitPercentage}%` },
        className: "absolute h-3 rounded-l-sm",
        children: /* @__PURE__ */ (0, import_jsx_runtime268.jsx)(
          Legend2,
          {
            text: "Billing limit:",
            value: formatCurrency(billingLimit, !1),
            position: "bottomRow2",
            percentage: billingLimitPercentage,
            tooltipContent: `Billing limit: ${formatCurrency(billingLimit, !1)}`
          }
        )
      }
    ),
    tierLimit && /* @__PURE__ */ (0, import_jsx_runtime268.jsx)(
      import_framer_motion13.motion.div,
      {
        initial: { width: tierRunLimitPercentage / startFactor + "%" },
        animate: { width: tierRunLimitPercentage + "%" },
        transition: { duration: 1.5, type: "spring" },
        style: { width: `${tierRunLimitPercentage}%` },
        className: "absolute h-3 rounded-l-sm bg-green-900/50",
        children: /* @__PURE__ */ (0, import_jsx_runtime268.jsx)(
          Legend2,
          {
            text: isPaying ? "Included usage:" : "Tier limit:",
            value: formatCurrency(tierLimit, !1),
            position: "bottomRow1",
            percentage: tierRunLimitPercentage,
            tooltipContent: `${isPaying ? "Included usage" : "Tier limit"}: ${formatCurrency(
              tierLimit,
              !1
            )}`
          }
        )
      }
    ),
    projectedUsage && projectedUsage !== 0 && /* @__PURE__ */ (0, import_jsx_runtime268.jsx)(
      import_framer_motion13.motion.div,
      {
        initial: { width: projectedRunsPercentage / startFactor + "%" },
        animate: { width: projectedRunsPercentage + "%" },
        transition: { duration: 1.5, type: "spring" },
        style: { width: `${projectedRunsPercentage}%` },
        className: "absolute h-3 rounded-l-sm",
        children: /* @__PURE__ */ (0, import_jsx_runtime268.jsx)(
          Legend2,
          {
            text: "Projected:",
            value: formatCurrency(projectedUsage, !1),
            position: "topRow2",
            percentage: projectedRunsPercentage,
            tooltipContent: `Projected runs: ${formatCurrency(projectedUsage, !1)}`
          }
        )
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime268.jsx)(
      import_framer_motion13.motion.div,
      {
        initial: { width: usagePercentage / startFactor + "%" },
        animate: { width: usagePercentage + "%" },
        transition: { duration: 1.5, type: "spring" },
        style: { width: `${usagePercentage}%` },
        className: cn(
          "absolute h-3 rounded-l-sm",
          tierLimit && current > tierLimit ? "bg-rose-600" : "bg-green-600"
        ),
        children: /* @__PURE__ */ (0, import_jsx_runtime268.jsx)(
          Legend2,
          {
            text: "Used:",
            value: formatCurrency(current, !1),
            position: "topRow1",
            percentage: usagePercentage,
            tooltipContent: `Used: ${formatCurrency(current, !1)}`
          }
        )
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime268.jsx)(
      import_framer_motion13.motion.div,
      {
        initial: { width: usageCappedToLimitPercentage / startFactor + "%" },
        animate: { width: usageCappedToLimitPercentage + "%" },
        transition: { duration: 1.5, type: "spring" },
        style: { width: `${usageCappedToLimitPercentage}%` },
        className: "absolute h-3 rounded-l-sm bg-green-600"
      }
    )
  ] }) });
}
var positions2 = {
  topRow1: "bottom-0 h-9",
  topRow2: "bottom-0 h-14",
  bottomRow1: "top-0 h-9 items-end",
  bottomRow2: "top-0 h-14 items-end"
};
function Legend2({ text, value, position, percentage, tooltipContent }) {
  let flipLegendPosition = percentage > 80;
  return /* @__PURE__ */ (0, import_jsx_runtime268.jsx)(
    "div",
    {
      className: cn(
        "absolute left-full z-10 flex border-charcoal-500",
        positions2[position],
        flipLegendPosition === !0 ? "-translate-x-full border-r" : "border-l"
      ),
      children: /* @__PURE__ */ (0, import_jsx_runtime268.jsx)(
        SimpleTooltip,
        {
          button: /* @__PURE__ */ (0, import_jsx_runtime268.jsxs)(Paragraph, { className: "mr-px h-fit whitespace-nowrap bg-background-bright px-1.5 text-xs text-text-bright", children: [
            text,
            /* @__PURE__ */ (0, import_jsx_runtime268.jsx)("span", { className: "ml-1 text-text-dimmed", children: value })
          ] }),
          side: "top",
          content: tooltipContent,
          className: "z-50 h-fit"
        }
      )
    }
  );
}

// app/components/primitives/Chart.tsx
var React18 = __toESM(require("react")), RechartsPrimitive = __toESM(require("recharts"));
var import_jsx_runtime269 = require("react/jsx-runtime"), THEMES = { light: "", dark: ".dark" }, ChartContext = React18.createContext(null);
function useChart() {
  let context7 = React18.useContext(ChartContext);
  if (!context7)
    throw new Error("useChart must be used within a <ChartContainer />");
  return context7;
}
var ChartContainer = React18.forwardRef(({ id, className, children, config, ...props }, ref) => {
  let uniqueId = React18.useId(), chartId = `chart-${id || uniqueId.replace(/:/g, "")}`;
  return /* @__PURE__ */ (0, import_jsx_runtime269.jsx)(ChartContext.Provider, { value: { config }, children: /* @__PURE__ */ (0, import_jsx_runtime269.jsxs)(
    "div",
    {
      "data-chart": chartId,
      ref,
      className: cn(
        "flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-text-dimmed/50 [&_.recharts-cartesian-grid_line]:stroke-grid-bright/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-grid-dimmed [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-grid-dimmed [&_.recharts-radial-bar-background-sector]:fill-grid-dimmed [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-grid-dimmed [&_.recharts-reference-line-line]:stroke-grid-dimmed [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none",
        className
      ),
      ...props,
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime269.jsx)(ChartStyle, { id: chartId, config }),
        /* @__PURE__ */ (0, import_jsx_runtime269.jsx)(RechartsPrimitive.ResponsiveContainer, { children })
      ]
    }
  ) });
});
ChartContainer.displayName = "Chart";
var ChartStyle = ({ id, config }) => {
  let colorConfig = Object.entries(config).filter(([_, config2]) => config2.theme || config2.color);
  return colorConfig.length ? /* @__PURE__ */ (0, import_jsx_runtime269.jsx)(
    "style",
    {
      dangerouslySetInnerHTML: {
        __html: Object.entries(THEMES).map(
          ([theme2, prefix]) => `
${prefix} [data-chart=${id}] {
${colorConfig.map(([key, itemConfig]) => {
            let color = itemConfig.theme?.[theme2] || itemConfig.color;
            return color ? `  --color-${key}: ${color};` : null;
          }).join(`
`)}
}
`
        )
      }
    }
  ) : null;
}, ChartTooltip = RechartsPrimitive.Tooltip, ChartTooltipContent = React18.forwardRef(
  ({
    active,
    payload,
    className,
    indicator = "dot",
    hideLabel = !1,
    hideIndicator = !1,
    label,
    labelFormatter,
    labelClassName,
    formatter: formatter2,
    color,
    nameKey,
    labelKey
  }, ref) => {
    let { config } = useChart(), tooltipLabel = React18.useMemo(() => {
      if (hideLabel || !payload?.length)
        return null;
      let [item] = payload, key = `${labelKey || item.dataKey || item.name || "value"}`, itemConfig = getPayloadConfigFromPayload(config, item, key), value = !labelKey && typeof label == "string" ? config[label]?.label || label : itemConfig?.label;
      return labelFormatter ? /* @__PURE__ */ (0, import_jsx_runtime269.jsx)("div", { className: cn("font-medium", labelClassName), children: labelFormatter(value, payload) }) : value ? /* @__PURE__ */ (0, import_jsx_runtime269.jsx)("div", { className: cn("font-medium", labelClassName), children: value }) : null;
    }, [label, labelFormatter, payload, hideLabel, labelClassName, config, labelKey]);
    if (!active || !payload?.length)
      return null;
    let nestLabel = payload.length === 1 && indicator !== "dot";
    return /* @__PURE__ */ (0, import_jsx_runtime269.jsxs)(
      "div",
      {
        ref,
        className: cn(
          "grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-grid-bright/50 bg-background-dimmed px-2.5 py-1.5 text-xs shadow-xl",
          className
        ),
        children: [
          nestLabel ? null : tooltipLabel,
          /* @__PURE__ */ (0, import_jsx_runtime269.jsx)("div", { className: "grid gap-1.5", children: payload.map((item, index) => {
            let key = `${nameKey || item.name || item.dataKey || "value"}`, itemConfig = getPayloadConfigFromPayload(config, item, key), indicatorColor = color || item.payload.fill || item.color;
            return /* @__PURE__ */ (0, import_jsx_runtime269.jsx)(
              "div",
              {
                className: cn(
                  "flex w-full items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-text-dimmed",
                  indicator === "dot" && "items-center"
                ),
                children: formatter2 && item.value && item.name ? formatter2(item.value, item.name, item, index, item.payload) : /* @__PURE__ */ (0, import_jsx_runtime269.jsxs)(import_jsx_runtime269.Fragment, { children: [
                  itemConfig?.icon ? /* @__PURE__ */ (0, import_jsx_runtime269.jsx)(itemConfig.icon, {}) : !hideIndicator && /* @__PURE__ */ (0, import_jsx_runtime269.jsx)(
                    "div",
                    {
                      className: cn(
                        "shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]",
                        {
                          "h-2.5 w-2.5": indicator === "dot",
                          "w-1": indicator === "line",
                          "w-0 border-[1.5px] border-dashed bg-transparent": indicator === "dashed",
                          "my-0.5": nestLabel && indicator === "dashed"
                        }
                      ),
                      style: {
                        "--color-bg": indicatorColor,
                        "--color-border": indicatorColor
                      }
                    }
                  ),
                  /* @__PURE__ */ (0, import_jsx_runtime269.jsxs)(
                    "div",
                    {
                      className: cn(
                        "flex flex-1 justify-between gap-1.5 leading-none",
                        nestLabel ? "items-end" : "items-center"
                      ),
                      children: [
                        /* @__PURE__ */ (0, import_jsx_runtime269.jsxs)("div", { className: "grid gap-1.5", children: [
                          nestLabel ? tooltipLabel : null,
                          /* @__PURE__ */ (0, import_jsx_runtime269.jsx)("span", { className: "text-text-dimmed", children: itemConfig?.label || item.name })
                        ] }),
                        item.value && /* @__PURE__ */ (0, import_jsx_runtime269.jsx)("span", { className: "font-mono font-medium tabular-nums text-text-bright", children: item.value.toLocaleString() })
                      ]
                    }
                  )
                ] })
              },
              item.dataKey
            );
          }) })
        ]
      }
    );
  }
);
ChartTooltipContent.displayName = "ChartTooltip";
var ChartLegendContent = React18.forwardRef(({ className, hideIcon = !1, payload, verticalAlign = "bottom", nameKey }, ref) => {
  let { config } = useChart();
  return payload?.length ? /* @__PURE__ */ (0, import_jsx_runtime269.jsx)(
    "div",
    {
      ref,
      className: cn(
        "flex items-center justify-center gap-4",
        verticalAlign === "top" ? "pb-3" : "pt-3",
        className
      ),
      children: payload.map((item) => {
        let key = `${nameKey || item.dataKey || "value"}`, itemConfig = getPayloadConfigFromPayload(config, item, key);
        return /* @__PURE__ */ (0, import_jsx_runtime269.jsxs)(
          "div",
          {
            className: cn(
              "flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-text-dimmed"
            ),
            children: [
              itemConfig?.icon && !hideIcon ? /* @__PURE__ */ (0, import_jsx_runtime269.jsx)(itemConfig.icon, {}) : /* @__PURE__ */ (0, import_jsx_runtime269.jsx)(
                "div",
                {
                  className: "h-2 w-2 shrink-0 rounded-[2px]",
                  style: {
                    backgroundColor: item.color
                  }
                }
              ),
              itemConfig?.label
            ]
          },
          item.value
        );
      })
    }
  ) : null;
});
ChartLegendContent.displayName = "ChartLegend";
function getPayloadConfigFromPayload(config, payload, key) {
  if (typeof payload != "object" || payload === null)
    return;
  let payloadPayload = "payload" in payload && typeof payload.payload == "object" && payload.payload !== null ? payload.payload : void 0, configLabelKey = key;
  return key in payload && typeof payload[key] == "string" ? configLabelKey = payload[key] : payloadPayload && key in payloadPayload && typeof payloadPayload[key] == "string" && (configLabelKey = payloadPayload[key]), configLabelKey in config ? config[configLabelKey] : config[key];
}

// app/utils/graphs.ts
function createTimeSeriesData({ startDate, endDate, window: window2 = "DAY", data: data2 }) {
  let outputData = [], periodLength = periodLengthMs(window2), periodCount = Math.floor((endDate.getTime() - startDate.getTime()) / periodLength);
  for (let i = 0; i < periodCount; i++) {
    let periodStart = new Date(startDate);
    periodStart.setTime(periodStart.getTime() + i * periodLength);
    let periodEnd = new Date(startDate);
    periodEnd.setTime(periodEnd.getTime() + (i + 1) * periodLength);
    let foundData = data2.find((d) => {
      let time = d.date.getTime();
      return time >= periodStart.getTime() && time < periodEnd.getTime();
    });
    foundData ? outputData.push({
      date: periodStart,
      value: foundData.value
    }) : outputData.push({
      date: periodStart
    });
  }
  return outputData;
}
function periodLengthMs(window2) {
  switch (window2) {
    case "MINUTE":
      return 6e4;
    case "HOUR":
      return 36e5;
    case "DAY":
      return 864e5;
  }
}

// app/presenters/v3/UsagePresenter.server.ts
var UsagePresenter = class extends BasePresenter {
  async call({ organizationId, startDate }) {
    let startOfMonth = new Date(startDate);
    startOfMonth.setUTCDate(1), startOfMonth.setUTCHours(0, 0, 0, 0);
    let endOfMonth = new Date(
      startOfMonth.getFullYear(),
      startOfMonth.getMonth() + 1,
      0,
      23,
      59,
      59,
      999
    ), past30Days = getUsageSeries(organizationId, {
      from: startOfMonth,
      to: endOfMonth,
      window: "DAY"
    }).then((data2) => createTimeSeriesData({
      startDate: startOfMonth,
      endDate: endOfMonth,
      window: "DAY",
      data: data2 ? data2.data.map((period) => ({
        date: new Date(period.windowStart),
        value: period.value
      })) : []
    }).map((period) => ({
      date: period.date.toISOString(),
      dollars: (period.value ?? 0) / 100
    }))), tasks = this._replica.$queryRaw`
    SELECT
      tr."taskIdentifier",
      COUNT(*) AS "runCount",
      AVG(tr."usageDurationMs") AS "averageDuration",
      SUM(tr."usageDurationMs") AS "totalDuration",
      AVG(tr."costInCents") / 100.0 AS "averageCost",
      SUM(tr."costInCents") / 100.0 AS "totalCost",
      SUM(tr."baseCostInCents") / 100.0 AS "totalBaseCost"
  FROM
      ${sqlDatabaseSchema}."TaskRun" tr
      JOIN ${sqlDatabaseSchema}."Project" pr ON pr.id = tr."projectId"
      JOIN ${sqlDatabaseSchema}."Organization" org ON org.id = pr."organizationId"
  WHERE
      tr."createdAt" > ${startOfMonth}
      AND tr."createdAt" < ${endOfMonth}
      AND org.id = ${organizationId}
  GROUP BY
      tr."taskIdentifier";
  `.then((data2) => data2.map((item) => ({
      taskIdentifier: item.taskIdentifier,
      runCount: Number(item.runCount),
      averageDuration: Number(item.averageDuration),
      averageCost: Number(item.averageCost) + env2.CENTS_PER_RUN / 100,
      totalDuration: Number(item.totalDuration),
      totalCost: Number(item.totalCost + item.totalBaseCost)
    })).sort((a, b) => b.totalCost - a.totalCost)), usage = getUsage(organizationId, { from: startOfMonth, to: endOfMonth }).then((data2) => {
      let current = (data2?.cents ?? 0) / 100, percentageThroughMonth = (/* @__PURE__ */ new Date()).getDate() / endOfMonth.getDate();
      return {
        current,
        projected: current / percentageThroughMonth
      };
    });
    return {
      usageOverTime: past30Days,
      usage,
      tasks
    };
  }
};

// app/routes/_app.orgs.$organizationSlug.v3.usage/route.tsx
var import_jsx_runtime270 = require("react/jsx-runtime");
async function loader96({ params, request }) {
  await requireUserId(request);
  let { organizationSlug } = OrganizationParamsSchema.parse(params), { isManagedCloud: isManagedCloud2 } = featuresForRequest(request);
  if (!isManagedCloud2)
    return (0, import_remix_typedjson80.redirect)(organizationPath({ slug: organizationSlug }));
  let organization = await prisma.organization.findUnique({
    where: { slug: organizationSlug }
  });
  if (!organization)
    throw new Response(null, { status: 404, statusText: "Organization not found" });
  let months = Array.from({ length: 6 }, (_, i) => {
    let date = /* @__PURE__ */ new Date();
    return date.setUTCDate(1), date.setUTCMonth(date.getUTCMonth() - i), date.setUTCHours(0, 0, 0, 0), date;
  }), searchMonth = new import_url.URL(request.url).searchParams.get("month"), startDate = searchMonth ? new Date(searchMonth) : months[0];
  startDate.setUTCDate(1), startDate.setUTCHours(0, 0, 0, 0);
  let presenter = new UsagePresenter(), { usageOverTime, usage, tasks } = await presenter.call({
    organizationId: organization.id,
    startDate
  });
  return (0, import_remix_typedjson80.typeddefer)({
    usageOverTime,
    usage,
    tasks,
    months,
    isCurrentMonth: startDate.toISOString() === months[0].toISOString()
  });
}
var monthDateFormatter = new Intl.DateTimeFormat("en-US", {
  month: "long",
  year: "numeric"
});
function Page64() {
  let { usage, usageOverTime, tasks, months, isCurrentMonth } = (0, import_remix_typedjson80.useTypedLoaderData)(), currentPlan = useCurrentPlan(), { value, replace } = useSearchParams(), month = value("month") ?? months[0].toISOString();
  return /* @__PURE__ */ (0, import_jsx_runtime270.jsxs)(PageContainer, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime270.jsx)(NavBar, { children: /* @__PURE__ */ (0, import_jsx_runtime270.jsx)(PageTitle, { title: "Usage" }) }),
    /* @__PURE__ */ (0, import_jsx_runtime270.jsx)(PageBody, { scrollable: !0, children: /* @__PURE__ */ (0, import_jsx_runtime270.jsxs)("div", { className: "flex flex-col gap-6", children: [
      /* @__PURE__ */ (0, import_jsx_runtime270.jsxs)("div", { children: [
        /* @__PURE__ */ (0, import_jsx_runtime270.jsx)(
          Select2,
          {
            name: "month",
            placeholder: "Select a month",
            className: "mb-3",
            defaultValue: month,
            items: months.map((date) => ({
              label: monthDateFormatter.format(date),
              value: date.toISOString()
            })),
            text: (value2) => monthDateFormatter.format(new Date(value2)),
            setValue: (value2) => {
              replace({ month: value2 });
            },
            dropdownIcon: !0,
            variant: "tertiary/medium",
            children: (matches) => matches.map((month2) => /* @__PURE__ */ (0, import_jsx_runtime270.jsx)(SelectItem2, { value: month2.value, children: month2.label }, month2.value))
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime270.jsx)("div", { className: "flex w-full flex-col gap-2 rounded-sm border border-grid-dimmed p-4", children: /* @__PURE__ */ (0, import_jsx_runtime270.jsx)(import_react208.Suspense, { fallback: /* @__PURE__ */ (0, import_jsx_runtime270.jsx)(Spinner, {}), children: /* @__PURE__ */ (0, import_jsx_runtime270.jsx)(
          import_react207.Await,
          {
            resolve: usage,
            errorElement: /* @__PURE__ */ (0, import_jsx_runtime270.jsx)("div", { className: "flex min-h-40 items-center justify-center", children: /* @__PURE__ */ (0, import_jsx_runtime270.jsx)(Paragraph, { variant: "small", children: "Failed to load graph." }) }),
            children: (usage2) => /* @__PURE__ */ (0, import_jsx_runtime270.jsxs)(import_jsx_runtime270.Fragment, { children: [
              /* @__PURE__ */ (0, import_jsx_runtime270.jsxs)("div", { className: "flex w-full items-center gap-6", children: [
                /* @__PURE__ */ (0, import_jsx_runtime270.jsxs)("div", { className: "flex flex-col gap-2", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime270.jsx)(Header3, { className: "", children: isCurrentMonth ? "Month-to-date" : "Usage" }),
                  /* @__PURE__ */ (0, import_jsx_runtime270.jsx)("p", { className: "text-3xl font-medium text-text-bright", children: formatCurrency(usage2.current, !1) })
                ] }),
                isCurrentMonth ? /* @__PURE__ */ (0, import_jsx_runtime270.jsxs)(import_jsx_runtime270.Fragment, { children: [
                  /* @__PURE__ */ (0, import_jsx_runtime270.jsx)(import_solid104.ArrowRightIcon, { className: "h-6 w-6 text-text-dimmed/50" }),
                  /* @__PURE__ */ (0, import_jsx_runtime270.jsxs)("div", { className: "flex flex-col gap-2 text-text-dimmed", children: [
                    /* @__PURE__ */ (0, import_jsx_runtime270.jsx)(Header3, { className: "text-text-dimmed", children: "Projected" }),
                    /* @__PURE__ */ (0, import_jsx_runtime270.jsx)("p", { className: "text-3xl font-medium", children: formatCurrency(usage2.projected, !1) })
                  ] })
                ] }) : null
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime270.jsx)(
                UsageBar2,
                {
                  current: usage2.current,
                  projectedUsage: isCurrentMonth ? usage2.projected : void 0,
                  isPaying: currentPlan?.v3Subscription?.isPaying ?? !1,
                  tierLimit: isCurrentMonth ? (currentPlan?.v3Subscription?.plan?.limits.includedUsage ?? 0) / 100 : void 0
                }
              )
            ] })
          }
        ) }) })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime270.jsxs)("div", { children: [
        /* @__PURE__ */ (0, import_jsx_runtime270.jsx)(Header2, { spacing: !0, children: "Usage by day" }),
        /* @__PURE__ */ (0, import_jsx_runtime270.jsx)("div", { className: "rounded-sm border border-grid-dimmed p-4", children: /* @__PURE__ */ (0, import_jsx_runtime270.jsx)(
          import_react208.Suspense,
          {
            fallback: /* @__PURE__ */ (0, import_jsx_runtime270.jsx)("div", { className: "flex min-h-40 items-center justify-center", children: /* @__PURE__ */ (0, import_jsx_runtime270.jsx)(Spinner, {}) }),
            children: /* @__PURE__ */ (0, import_jsx_runtime270.jsx)(
              import_react207.Await,
              {
                resolve: usageOverTime,
                errorElement: /* @__PURE__ */ (0, import_jsx_runtime270.jsx)("div", { className: "flex min-h-40 items-center justify-center", children: /* @__PURE__ */ (0, import_jsx_runtime270.jsx)(Paragraph, { variant: "small", children: "Failed to load graph." }) }),
                children: (past30Days) => /* @__PURE__ */ (0, import_jsx_runtime270.jsx)(UsageChart, { data: past30Days })
              }
            )
          }
        ) })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime270.jsxs)("div", { children: [
        /* @__PURE__ */ (0, import_jsx_runtime270.jsx)(Header2, { spacing: !0, children: "Tasks" }),
        /* @__PURE__ */ (0, import_jsx_runtime270.jsx)(import_react208.Suspense, { fallback: /* @__PURE__ */ (0, import_jsx_runtime270.jsx)(Spinner, {}), children: /* @__PURE__ */ (0, import_jsx_runtime270.jsx)(
          import_react207.Await,
          {
            resolve: tasks,
            errorElement: /* @__PURE__ */ (0, import_jsx_runtime270.jsx)("div", { className: "flex min-h-40 items-center justify-center", children: /* @__PURE__ */ (0, import_jsx_runtime270.jsx)(Paragraph, { variant: "small", children: "Failed to load." }) }),
            children: (tasks2) => /* @__PURE__ */ (0, import_jsx_runtime270.jsxs)(Table, { children: [
              /* @__PURE__ */ (0, import_jsx_runtime270.jsx)(TableHeader, { children: /* @__PURE__ */ (0, import_jsx_runtime270.jsxs)(TableRow, { children: [
                /* @__PURE__ */ (0, import_jsx_runtime270.jsx)(TableHeaderCell, { children: "Task" }),
                /* @__PURE__ */ (0, import_jsx_runtime270.jsx)(TableHeaderCell, { alignment: "right", children: "Runs" }),
                /* @__PURE__ */ (0, import_jsx_runtime270.jsx)(TableHeaderCell, { alignment: "right", children: "Average duration" }),
                /* @__PURE__ */ (0, import_jsx_runtime270.jsx)(TableHeaderCell, { alignment: "right", children: "Average cost" }),
                /* @__PURE__ */ (0, import_jsx_runtime270.jsx)(TableHeaderCell, { alignment: "right", children: "Total duration" }),
                /* @__PURE__ */ (0, import_jsx_runtime270.jsx)(TableHeaderCell, { alignment: "right", children: "Total cost" })
              ] }) }),
              /* @__PURE__ */ (0, import_jsx_runtime270.jsx)(TableBody, { children: tasks2.length === 0 ? /* @__PURE__ */ (0, import_jsx_runtime270.jsx)(TableRow, { children: /* @__PURE__ */ (0, import_jsx_runtime270.jsx)(TableCell, { colSpan: 6, children: /* @__PURE__ */ (0, import_jsx_runtime270.jsx)(Paragraph, { variant: "small", children: "No runs." }) }) }) : tasks2.map((task) => /* @__PURE__ */ (0, import_jsx_runtime270.jsxs)(TableRow, { children: [
                /* @__PURE__ */ (0, import_jsx_runtime270.jsx)(TableCell, { children: task.taskIdentifier }),
                /* @__PURE__ */ (0, import_jsx_runtime270.jsx)(TableCell, { alignment: "right", className: "tabular-nums", children: formatNumber(task.runCount) }),
                /* @__PURE__ */ (0, import_jsx_runtime270.jsx)(TableCell, { alignment: "right", children: formatDurationMilliseconds(task.averageDuration, {
                  style: "short"
                }) }),
                /* @__PURE__ */ (0, import_jsx_runtime270.jsx)(TableCell, { alignment: "right", className: "tabular-nums", children: formatCurrencyAccurate(task.averageCost) }),
                /* @__PURE__ */ (0, import_jsx_runtime270.jsx)(TableCell, { alignment: "right", className: "tabular-nums", children: formatDurationMilliseconds(task.totalDuration, {
                  style: "short"
                }) }),
                /* @__PURE__ */ (0, import_jsx_runtime270.jsx)(TableCell, { alignment: "right", className: "tabular-nums", children: formatCurrencyAccurate(task.totalCost) })
              ] }, task.taskIdentifier)) })
            ] })
          }
        ) })
      ] })
    ] }) })
  ] });
}
var chartConfig = {
  dollars: {
    label: "Usage ($)",
    color: "#7655fd"
  }
}, tooltipDateFormatter = new Intl.DateTimeFormat("en-US", {
  month: "short",
  day: "numeric"
});
function UsageChart({ data: data2 }) {
  let decimalPlaces = Math.max(...data2.map((d) => d.dollars)) < 1 ? 4 : 2;
  return /* @__PURE__ */ (0, import_jsx_runtime270.jsx)(ChartContainer, { config: chartConfig, className: "max-h-96 min-h-40 w-full", children: /* @__PURE__ */ (0, import_jsx_runtime270.jsxs)(import_recharts5.BarChart, { accessibilityLayer: !0, data: data2, children: [
    /* @__PURE__ */ (0, import_jsx_runtime270.jsx)(import_recharts5.CartesianGrid, { vertical: !1 }),
    /* @__PURE__ */ (0, import_jsx_runtime270.jsx)(
      import_recharts5.XAxis,
      {
        fontSize: 12,
        tickLine: !1,
        tickMargin: 10,
        axisLine: !1,
        dataKey: "date",
        tickFormatter: (value) => value ? `${new Date(value).getDate()}` : "",
        className: "text-xs"
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime270.jsx)(
      import_recharts5.YAxis,
      {
        fontSize: 12,
        tickLine: !1,
        tickMargin: 10,
        axisLine: !1,
        allowDecimals: !0,
        tickFormatter: (value) => `$${value.toFixed(decimalPlaces)}`
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime270.jsx)(
      ChartTooltip,
      {
        content: /* @__PURE__ */ (0, import_jsx_runtime270.jsx)(ChartTooltipContent, {}),
        labelFormatter: (value, data3) => {
          let dateString = data3.at(0)?.payload.date;
          return dateString ? tooltipDateFormatter.format(new Date(dateString)) : "";
        }
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime270.jsx)(import_recharts5.Bar, { dataKey: "dollars", fill: "var(--color-dollars)", radius: [4, 4, 0, 0] })
  ] }) });
}

// app/routes/api.v1.endpoints.$endpointSlug.index.ts
var api_v1_endpoints_endpointSlug_index_exports = {};
__export(api_v1_endpoints_endpointSlug_index_exports, {
  action: () => action48
});
var import_server_runtime51 = require("@remix-run/server-runtime"), import_zod185 = require("zod");
var ParamsSchema41 = import_zod185.z.object({
  endpointSlug: import_zod185.z.string()
}), BodySchema2 = import_zod185.z.object({
  reason: import_zod185.z.string().optional(),
  data: import_zod185.z.any().optional()
});
async function action48({ request, params }) {
  if (request.method.toUpperCase() !== "POST")
    return { status: 405, body: "Method Not Allowed" };
  let parsedParams = ParamsSchema41.safeParse(params);
  if (!parsedParams.success)
    return (0, import_server_runtime51.json)({ error: "Invalid params" }, { status: 400 });
  let authenticationResult = await authenticateApiRequest(request);
  if (!authenticationResult)
    return logger.info("Invalid or missing api key", { url: request.url }), (0, import_server_runtime51.json)({ error: "Invalid or Missing API key" }, { status: 401 });
  let authenticatedEnv = authenticationResult.environment, { endpointSlug } = parsedParams.data, endpoint = await prisma.endpoint.findUnique({
    where: {
      environmentId_slug: {
        environmentId: authenticatedEnv.id,
        slug: endpointSlug
      }
    }
  });
  if (!endpoint)
    return logger.info("Endpoint not found", { url: request.url }), (0, import_server_runtime51.json)({ error: "Endpoint not found" }, { status: 404 });
  let body = await request.json(), parsedBody = BodySchema2.safeParse(body);
  if (!parsedBody.success)
    return (0, import_server_runtime51.json)({ error: "Invalid body" }, { status: 400 });
  let service = new IndexEndpointService();
  try {
    let indexing = await service.call(
      endpoint.id,
      "API",
      parsedBody.data.reason,
      parsedBody.data.data
    );
    if (!indexing)
      return (0, import_server_runtime51.json)({ error: "Something went wrong" }, { status: 500 });
    let { data: data2, ...index } = indexing;
    return (0, import_server_runtime51.json)(index);
  } catch (error) {
    return error instanceof Error ? (logger.error("Error indexing endpoint", {
      url: request.url,
      error: {
        name: error.name,
        message: error.message,
        stack: error.stack
      }
    }), (0, import_server_runtime51.json)({ error: error.message }, { status: 400 })) : (0, import_server_runtime51.json)({ error: "Something went wrong" }, { status: 500 });
  }
}

// app/routes/_app.orgs.$organizationSlug.billing/route.tsx
var route_exports108 = {};
__export(route_exports108, {
  default: () => Page65
});
var import_solid105 = require("@heroicons/react/20/solid"), import_outline9 = require("@heroicons/react/24/outline"), import_react209 = require("@remix-run/react");
var import_jsx_runtime271 = require("react/jsx-runtime");
function planLabel2(subscription, periodEnd) {
  if (!subscription)
    return "You're currently on the Free plan";
  if (!subscription.isPaying)
    return `You're currently on the ${subscription.plan.title} plan`;
  let costDescription = subscription.plan.concurrentRuns.pricing ? `$${subscription.plan.concurrentRuns.pricing.tierCost}/mo` : "";
  return subscription.canceledAt ? /* @__PURE__ */ (0, import_jsx_runtime271.jsxs)(import_jsx_runtime271.Fragment, { children: [
    "You're on the ",
    costDescription,
    " ",
    subscription.plan.title,
    " plan until",
    " ",
    /* @__PURE__ */ (0, import_jsx_runtime271.jsx)(DateTime, { includeTime: !1, date: periodEnd }),
    " when you'll be on the Free plan"
  ] }) : `You're currently on the ${costDescription} ${subscription.plan.title} plan`;
}
function Page65() {
  let organization = useOrganization(), { isManagedCloud: isManagedCloud2 } = useFeatures(), currentPlan = useCurrentPlan(), hasV3Project = organization.projects.some((p) => p.version === "V3"), hasV2Project = organization.projects.some((p) => p.version === "V2"), allV3Projects = organization.projects.every((p) => p.version === "V3");
  return /* @__PURE__ */ (0, import_jsx_runtime271.jsxs)(PageContainer, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime271.jsxs)(NavBar, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime271.jsx)(PageTitle, { title: isManagedCloud2 ? "Usage & Billing (v2)" : "Usage (v2)" }),
      /* @__PURE__ */ (0, import_jsx_runtime271.jsx)(PageAccessories, { children: isManagedCloud2 && /* @__PURE__ */ (0, import_jsx_runtime271.jsxs)(import_jsx_runtime271.Fragment, { children: [
        currentPlan?.subscription?.isPaying && /* @__PURE__ */ (0, import_jsx_runtime271.jsxs)(import_jsx_runtime271.Fragment, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime271.jsx)(LinkButton, { to: stripePortalPath(organization), variant: "secondary/small", children: "Invoices" }),
          /* @__PURE__ */ (0, import_jsx_runtime271.jsx)(LinkButton, { to: stripePortalPath(organization), variant: "secondary/small", children: "Manage card details" })
        ] }),
        hasV2Project && /* @__PURE__ */ (0, import_jsx_runtime271.jsx)(
          LinkButton,
          {
            to: plansPath(organization),
            variant: "primary/small",
            LeadingIcon: import_outline9.ArrowUpCircleIcon,
            leadingIconClassName: "px-0",
            children: "Upgrade"
          }
        )
      ] }) })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime271.jsx)(PageBody, { scrollable: !1, children: /* @__PURE__ */ (0, import_jsx_runtime271.jsxs)("div", { className: "grid h-full grid-rows-[auto_1fr] overflow-hidden", children: [
      /* @__PURE__ */ (0, import_jsx_runtime271.jsxs)("div", { className: "px-4 pt-4", children: [
        hasV3Project ? /* @__PURE__ */ (0, import_jsx_runtime271.jsx)(Callout, { variant: "warning", className: "mb-3", children: "This organization has a mix of v2 and v3 projects. They have separate subscriptions, this is the usage and billing for v2." }) : null,
        hasV2Project && /* @__PURE__ */ (0, import_jsx_runtime271.jsx)(PageInfoRow, { children: /* @__PURE__ */ (0, import_jsx_runtime271.jsxs)(PageInfoGroup, { children: [
          currentPlan?.subscription && currentPlan.usage && /* @__PURE__ */ (0, import_jsx_runtime271.jsx)(
            PageInfoProperty,
            {
              icon: /* @__PURE__ */ (0, import_jsx_runtime271.jsx)(import_solid105.ReceiptRefundIcon, { className: "h-4 w-4 text-green-600" }),
              value: planLabel2(currentPlan.subscription, currentPlan.usage.periodEnd)
            }
          ),
          currentPlan?.subscription?.isPaying && currentPlan.usage && /* @__PURE__ */ (0, import_jsx_runtime271.jsx)(
            PageInfoProperty,
            {
              icon: /* @__PURE__ */ (0, import_jsx_runtime271.jsx)(import_solid105.CalendarDaysIcon, { className: "h-4 w-4 text-green-600" }),
              label: "Billing period",
              value: /* @__PURE__ */ (0, import_jsx_runtime271.jsxs)(import_jsx_runtime271.Fragment, { children: [
                /* @__PURE__ */ (0, import_jsx_runtime271.jsx)(DateTime, { date: currentPlan.usage.periodStart, includeTime: !1 }),
                " to",
                " ",
                /* @__PURE__ */ (0, import_jsx_runtime271.jsx)(DateTime, { date: currentPlan.usage.periodEnd, includeTime: !1 }),
                " (",
                formatDurationInDays(currentPlan.usage.periodRemainingDuration),
                " ",
                "remaining)"
              ] })
            }
          )
        ] }) }),
        hasV2Project && isManagedCloud2 && /* @__PURE__ */ (0, import_jsx_runtime271.jsx)(
          PageTabs,
          {
            tabs: [
              {
                label: "Usage",
                to: usagePath(organization)
              },
              {
                label: "Plans",
                to: plansPath(organization)
              }
            ],
            layoutId: "usage-and-billing"
          }
        )
      ] }),
      hasV2Project && /* @__PURE__ */ (0, import_jsx_runtime271.jsx)("div", { className: "overflow-y-auto pb-4 scrollbar-thin scrollbar-track-transparent scrollbar-thumb-charcoal-600", children: /* @__PURE__ */ (0, import_jsx_runtime271.jsx)(import_react209.Outlet, {}) })
    ] }) })
  ] });
}

// app/routes/api.v1.projects.$projectRef.envvars.ts
var api_v1_projects_projectRef_envvars_exports = {};
__export(api_v1_projects_projectRef_envvars_exports, {
  loader: () => loader97
});
var import_server_runtime52 = require("@remix-run/server-runtime"), import_zod186 = require("zod");
var ParamsSchema42 = import_zod186.z.object({
  projectRef: import_zod186.z.string()
});
async function loader97({ request, params }) {
  let parsedParams = ParamsSchema42.safeParse(params);
  if (!parsedParams.success)
    return (0, import_server_runtime52.json)({ error: "Invalid params" }, { status: 400 });
  let authenticationResult = await authenticateApiRequest(request);
  if (!authenticationResult)
    return (0, import_server_runtime52.json)({ error: "Invalid or Missing API key" }, { status: 401 });
  let authenticatedEnv = authenticationResult.environment, { projectRef } = parsedParams.data;
  if (!await prisma.project.findUnique({
    where: {
      externalRef: projectRef,
      environments: {
        some: {
          id: authenticatedEnv.id
        }
      }
    }
  }))
    return (0, import_server_runtime52.json)({ error: "Project not found" }, { status: 404 });
  let variables = await resolveVariablesForEnvironment(authenticatedEnv);
  return (0, import_server_runtime52.json)({
    variables: variables.reduce((acc, variable) => (acc[variable.key] = variable.value, acc), {})
  });
}

// app/routes/resources.taskruns.$runParam.cancel.ts
var resources_taskruns_runParam_cancel_exports = {};
__export(resources_taskruns_runParam_cancel_exports, {
  action: () => action49,
  cancelSchema: () => cancelSchema2
});
var import_zod187 = require("@conform-to/zod"), import_node12 = require("@remix-run/node"), import_zod188 = require("zod");
var cancelSchema2 = import_zod188.z.object({
  redirectUrl: import_zod188.z.string()
}), ParamSchema4 = import_zod188.z.object({
  runParam: import_zod188.z.string()
}), action49 = async ({ request, params }) => {
  let { runParam: runParam2 } = ParamSchema4.parse(params), formData = await request.formData(), submission = (0, import_zod187.parse)(formData, { schema: cancelSchema2 });
  if (!submission.value)
    return (0, import_node12.json)(submission);
  try {
    let taskRun = await prisma.taskRun.findUnique({
      where: {
        friendlyId: runParam2
      }
    });
    return taskRun ? (await new CancelTaskRunService().call(taskRun), redirectWithSuccessMessage(submission.value.redirectUrl, request, "Canceled run")) : (submission.error = { runParam: "Run not found" }, (0, import_node12.json)(submission));
  } catch (error) {
    return error instanceof Error ? (logger.error("Failed to cancel run", {
      error: {
        name: error.name,
        message: error.message,
        stack: error.stack
      }
    }), submission.error = { runParam: error.message }, (0, import_node12.json)(submission)) : (logger.error("Failed to cancel run", { error }), submission.error = { runParam: JSON.stringify(error) }, (0, import_node12.json)(submission));
  }
};

// app/routes/resources.taskruns.$runParam.replay.ts
var resources_taskruns_runParam_replay_exports = {};
__export(resources_taskruns_runParam_replay_exports, {
  action: () => action50
});
var import_zod189 = require("@conform-to/zod"), import_node13 = require("@remix-run/node"), import_zod190 = require("zod");
var FormSchema2 = import_zod190.z.object({
  failedRedirect: import_zod190.z.string()
}), ParamSchema5 = import_zod190.z.object({
  runParam: import_zod190.z.string()
}), action50 = async ({ request, params }) => {
  let { runParam: runParam2 } = ParamSchema5.parse(params), formData = await request.formData(), submission = (0, import_zod189.parse)(formData, { schema: FormSchema2 });
  if (!submission.value)
    return (0, import_node13.json)(submission);
  try {
    let taskRun = await prisma.taskRun.findUnique({
      where: {
        friendlyId: runParam2
      },
      include: {
        project: {
          include: {
            organization: !0
          }
        }
      }
    });
    if (!taskRun)
      return redirectWithErrorMessage(submission.value.failedRedirect, request, "Run not found");
    let newRun = await new ReplayTaskRunService().call(taskRun);
    if (!newRun)
      return redirectWithErrorMessage(
        submission.value.failedRedirect,
        request,
        "Failed to replay run"
      );
    let runPath3 = v3RunSpanPath(
      {
        slug: taskRun.project.organization.slug
      },
      { slug: taskRun.project.slug },
      { friendlyId: newRun.friendlyId },
      { spanId: newRun.spanId }
    );
    return logger.debug("Replayed run", {
      taskRunId: taskRun.id,
      taskRunFriendlyId: taskRun.friendlyId,
      newRunId: newRun.id,
      newRunFriendlyId: newRun.friendlyId,
      runPath: runPath3
    }), redirectWithSuccessMessage(runPath3, request, "Replaying run");
  } catch (error) {
    return error instanceof Error ? (logger.error("Failed to replay run", {
      error: {
        name: error.name,
        message: error.message,
        stack: error.stack
      }
    }), redirectWithErrorMessage(submission.value.failedRedirect, request, error.message)) : (logger.error("Failed to replay run", { error }), redirectWithErrorMessage(
      submission.value.failedRedirect,
      request,
      JSON.stringify(error)
    ));
  }
};

// app/routes/_app.orgs.$organizationSlug._index/route.tsx
var route_exports109 = {};
__export(route_exports109, {
  default: () => Page66
});
var import_react210 = require("@remix-run/react"), import_simplur5 = __toESM(require("simplur"));
var import_jsx_runtime272 = require("react/jsx-runtime");
function Page66() {
  let organization = useOrganization();
  return /* @__PURE__ */ (0, import_jsx_runtime272.jsxs)(PageContainer, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime272.jsxs)(NavBar, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime272.jsx)(PageTitle, { title: `${organization.title} projects` }),
      /* @__PURE__ */ (0, import_jsx_runtime272.jsxs)(PageAccessories, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime272.jsxs)(Paragraph, { variant: "extra-small", className: "text-charcoal-500", children: [
          "Org UID: ",
          organization.id
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime272.jsx)(
          LinkButton,
          {
            to: newProjectPath(organization),
            variant: "primary/small",
            shortcut: { key: "n" },
            children: "Create a new project"
          }
        )
      ] })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime272.jsx)(PageBody, { children: /* @__PURE__ */ (0, import_jsx_runtime272.jsx)("ul", { className: "grid grid-cols-1 gap-4 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4", children: organization.projects.length > 0 ? organization.projects.map((project) => /* @__PURE__ */ (0, import_jsx_runtime272.jsx)("li", { children: /* @__PURE__ */ (0, import_jsx_runtime272.jsxs)(
      import_react210.Link,
      {
        className: "border-grid-bright-dimmed flex gap-4 rounded-md border p-4 transition hover:bg-charcoal-900 ",
        to: projectPath(organization, project),
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime272.jsx)(NamedIcon, { name: "folder", className: "h-10 w-10 flex-none" }),
          /* @__PURE__ */ (0, import_jsx_runtime272.jsxs)("div", { className: "flex flex-col", children: [
            /* @__PURE__ */ (0, import_jsx_runtime272.jsx)(Header3, { children: project.name }),
            project.version === "V2" ? /* @__PURE__ */ (0, import_jsx_runtime272.jsx)(Paragraph, { variant: "small", children: import_simplur5.default`${project.jobCount} Job[|s]` }) : /* @__PURE__ */ (0, import_jsx_runtime272.jsx)(Badge, { className: "max-w-max", variant: "v3", children: "v3" })
          ] })
        ]
      }
    ) }, project.id)) : /* @__PURE__ */ (0, import_jsx_runtime272.jsx)("li", { children: /* @__PURE__ */ (0, import_jsx_runtime272.jsx)(LinkButton, { to: newProjectPath(organization), variant: "primary/small", children: "Create a Project" }) }) }) })
  ] });
}

// app/routes/_app.orgs.$organizationSlug.invite/route.tsx
var route_exports110 = {};
__export(route_exports110, {
  action: () => action51,
  default: () => Page67,
  loader: () => loader98
});
var import_react211 = require("@conform-to/react"), import_zod191 = require("@conform-to/zod"), import_solid106 = require("@heroicons/react/20/solid"), import_node14 = require("@remix-run/node"), import_react212 = require("@remix-run/react"), import_react213 = require("react"), import_remix_typedjson81 = require("remix-typedjson"), import_simplur6 = __toESM(require("simplur")), import_tiny_invariant9 = __toESM(require("tiny-invariant")), import_zod192 = require("zod");

// app/models/member.server.ts
async function getTeamMembersAndInvites({
  userId,
  organizationId
}) {
  let org = await prisma.organization.findFirst({
    where: { id: organizationId, members: { some: { userId } } },
    select: {
      members: {
        select: {
          id: !0,
          role: !0,
          user: {
            select: {
              id: !0,
              name: !0,
              email: !0,
              avatarUrl: !0
            }
          }
        }
      },
      invites: {
        select: {
          id: !0,
          email: !0,
          updatedAt: !0,
          inviter: {
            select: {
              id: !0,
              name: !0,
              email: !0,
              avatarUrl: !0
            }
          }
        }
      }
    }
  });
  return org ? { members: org.members, invites: org.invites } : null;
}
async function removeTeamMember({
  userId,
  slug: slug3,
  memberId
}) {
  if (!await prisma.organization.findFirst({
    where: { slug: slug3, members: { some: { userId } } }
  }))
    throw new Error("User does not have access to this organization");
  return prisma.orgMember.delete({
    where: {
      id: memberId
    },
    include: {
      organization: !0,
      user: !0
    }
  });
}
async function inviteMembers({
  slug: slug3,
  emails,
  userId
}) {
  let org = await prisma.organization.findFirst({
    where: { slug: slug3, members: { some: { userId } } }
  });
  if (!org)
    throw new Error("User does not have access to this organization");
  let created = await prisma.orgMemberInvite.createMany({
    data: emails.map((email) => ({
      email,
      organizationId: org.id,
      inviterId: userId,
      role: "MEMBER"
    })),
    skipDuplicates: !0
  });
  return await prisma.orgMemberInvite.findMany({
    where: {
      organizationId: org.id,
      inviterId: userId,
      email: {
        in: emails
      }
    },
    include: {
      organization: !0,
      inviter: !0
    }
  });
}
async function getInviteFromToken({ token }) {
  return await prisma.orgMemberInvite.findFirst({
    where: {
      token
    },
    include: {
      organization: !0,
      inviter: !0
    }
  });
}
async function getUsersInvites({ email }) {
  return await prisma.orgMemberInvite.findMany({
    where: {
      email,
      organization: {
        deletedAt: null
      }
    },
    include: {
      organization: !0,
      inviter: !0
    }
  });
}
async function acceptInvite({ userId, inviteId }) {
  return await prisma.$transaction(async (tx) => {
    let invite = await tx.orgMemberInvite.delete({
      where: {
        id: inviteId
      },
      include: {
        organization: {
          include: {
            projects: !0
          }
        }
      }
    }), member = await tx.orgMember.create({
      data: {
        organizationId: invite.organizationId,
        userId,
        role: invite.role
      }
    });
    for (let project of invite.organization.projects)
      await createEnvironment(invite.organization, project, "DEVELOPMENT", member, tx);
    return { remainingInvites: await tx.orgMemberInvite.findMany({
      where: {
        email: invite.email
      }
    }), organization: invite.organization };
  });
}
async function declineInvite({ userId, inviteId }) {
  return await prisma.$transaction(async (tx) => {
    let declinedInvite = await prisma.orgMemberInvite.delete({
      where: {
        id: inviteId
      },
      include: {
        organization: !0
      }
    }), user = await prisma.user.findUnique({
      where: { id: userId },
      select: { email: !0 }
    });
    return { remainingInvites: await prisma.orgMemberInvite.findMany({
      where: {
        email: user.email
      }
    }), organization: declinedInvite.organization };
  });
}
async function resendInvite({ inviteId }) {
  return await prisma.orgMemberInvite.update({
    where: {
      id: inviteId
    },
    data: {
      updatedAt: /* @__PURE__ */ new Date()
    },
    include: {
      inviter: !0,
      organization: !0
    }
  });
}
async function revokeInvite({
  userId,
  slug: slug3,
  inviteId
}) {
  let org = await prisma.organization.findFirst({
    where: { slug: slug3, members: { some: { userId } } }
  });
  if (!org)
    throw new Error("User does not have access to this organization");
  let invite = await prisma.orgMemberInvite.delete({
    where: {
      id: inviteId,
      organizationId: org.id
    },
    select: {
      email: !0,
      organization: !0
    }
  });
  if (!invite)
    throw new Error("Invite not found");
  return { email: invite.email, organization: invite.organization };
}

// app/presenters/TeamPresenter.server.ts
var TeamPresenter = class extends BasePresenter {
  async call({ userId, organizationId }) {
    let result = await getTeamMembersAndInvites({
      userId,
      organizationId
    });
    if (!result)
      return;
    let limit = await getLimit(organizationId, "teamMembers", 25);
    return {
      ...result,
      limits: {
        used: result.members.length + result.invites.length,
        limit
      }
    };
  }
};

// app/routes/_app.orgs.$organizationSlug.invite/route.tsx
var import_jsx_runtime273 = require("react/jsx-runtime"), Params2 = import_zod192.z.object({
  organizationSlug: import_zod192.z.string()
}), loader98 = async ({ request, params }) => {
  let userId = await requireUserId(request), { organizationSlug } = Params2.parse(params), organization = await $replica.organization.findFirst({
    where: { slug: organizationSlug },
    select: { id: !0 }
  });
  if (!organization)
    throw new Response("Not Found", { status: 404 });
  let result = await new TeamPresenter().call({
    userId,
    organizationId: organization.id
  });
  if (!result)
    throw new Response("Not Found", { status: 404 });
  return (0, import_remix_typedjson81.typedjson)(result);
}, schema14 = import_zod192.z.object({
  emails: import_zod192.z.preprocess((i) => {
    if (typeof i == "string")
      return [i];
    if (Array.isArray(i)) {
      let emails = i.filter((v) => typeof v == "string" && v !== "");
      return emails.length === 0 ? [""] : emails;
    }
    return [""];
  }, import_zod192.z.string().email().array().nonempty("At least one email is required"))
}), action51 = async ({ request, params }) => {
  let userId = await requireUserId(request), { organizationSlug } = params;
  (0, import_tiny_invariant9.default)(organizationSlug, "organizationSlug is required");
  let formData = await request.formData(), submission = (0, import_zod191.parse)(formData, { schema: schema14 });
  if (!submission.value || submission.intent !== "submit")
    return (0, import_node14.json)(submission);
  try {
    let invites = await inviteMembers({
      slug: organizationSlug,
      emails: submission.value.emails,
      userId
    });
    for (let invite of invites)
      try {
        await scheduleEmail({
          email: "invite",
          to: invite.email,
          orgName: invite.organization.title,
          inviterName: invite.inviter.name ?? void 0,
          inviterEmail: invite.inviter.email,
          inviteLink: `${env2.LOGIN_ORIGIN}${acceptInvitePath(invite.token)}`
        });
      } catch (error) {
        console.error("Failed to send invite email"), console.error(error);
      }
    return redirectWithSuccessMessage(
      organizationTeamPath(invites[0].organization),
      request,
      import_simplur6.default`${submission.value.emails.length} member[|s] invited`
    );
  } catch (error) {
    return (0, import_node14.json)({ errors: { body: error.message } }, { status: 400 });
  }
};
function Page67() {
  let { limits } = (0, import_remix_typedjson81.useTypedLoaderData)(), [total, setTotal] = (0, import_react213.useState)(limits.used), organization = useOrganization(), lastSubmission = (0, import_react212.useActionData)(), [form, { emails }] = (0, import_react211.useForm)({
    id: "invite-members",
    // TODO: type this
    lastSubmission,
    onValidate({ formData }) {
      return (0, import_zod191.parse)(formData, { schema: schema14 });
    }
  }), fieldValues = (0, import_react213.useRef)([""]), emailFields = (0, import_react211.useFieldList)(form.ref, emails);
  return /* @__PURE__ */ (0, import_jsx_runtime273.jsx)(MainCenteredContainer, { children: /* @__PURE__ */ (0, import_jsx_runtime273.jsxs)("div", { children: [
    /* @__PURE__ */ (0, import_jsx_runtime273.jsx)(
      FormTitle,
      {
        LeadingIcon: "invite-member",
        title: "Invite team members",
        description: `Invite new team members to ${organization.title}.`
      }
    ),
    total > limits.limit && /* @__PURE__ */ (0, import_jsx_runtime273.jsx)(
      InfoPanel,
      {
        variant: "upgrade",
        icon: import_solid106.LockOpenIcon,
        iconClassName: "text-indigo-500",
        title: "Unlock more team members",
        to: v3BillingPath(organization),
        buttonLabel: "Upgrade",
        panelClassName: "mb-4",
        children: /* @__PURE__ */ (0, import_jsx_runtime273.jsxs)(Paragraph, { variant: "small", children: [
          "You've used all ",
          limits.limit,
          " of your available team members. Upgrade your plan to add more."
        ] })
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime273.jsx)(import_react212.Form, { method: "post", ...form.props, children: /* @__PURE__ */ (0, import_jsx_runtime273.jsxs)(Fieldset, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime273.jsxs)(InputGroup, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime273.jsx)(Label, { htmlFor: emails.id, children: "Email addresses" }),
        emailFields.map((email, index) => /* @__PURE__ */ (0, import_jsx_runtime273.jsxs)(import_react213.Fragment, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime273.jsx)(
            Input,
            {
              ...import_react211.conform.input(email, { type: "email" }),
              placeholder: index === 0 ? "Enter an email address" : "Add another email",
              icon: "envelope",
              autoFocus: index === 0,
              onChange: (e) => {
                fieldValues.current[index] = e.target.value;
                let filledFields = fieldValues.current.filter((v) => v !== "");
                setTotal(limits.used + filledFields.length), emailFields.length === fieldValues.current.length && fieldValues.current.every((v) => v !== "") && (0, import_react211.requestIntent)(form.ref.current ?? void 0, import_react211.list.append(emails.name));
              }
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime273.jsx)(FormError, { id: email.errorId, children: email.error })
        ] }, email.key))
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime273.jsx)(
        FormButtons,
        {
          confirmButton: /* @__PURE__ */ (0, import_jsx_runtime273.jsx)(Button, { type: "submit", variant: "primary/small", disabled: total > limits.limit, children: "Send invitations" }),
          cancelButton: /* @__PURE__ */ (0, import_jsx_runtime273.jsx)(LinkButton, { to: organizationTeamPath(organization), variant: "tertiary/small", children: "Cancel" })
        }
      )
    ] }) })
  ] }) });
}

// app/routes/api.v1.batches.$batchParam.results.ts
var api_v1_batches_batchParam_results_exports = {};
__export(api_v1_batches_batchParam_results_exports, {
  loader: () => loader99
});
var import_server_runtime53 = require("@remix-run/server-runtime"), import_zod193 = require("zod");

// app/models/taskRun.server.ts
var import_assert_never14 = require("assert-never");
var SUCCESSFUL_STATUSES = [TaskRunStatus.COMPLETED_SUCCESSFULLY], FAILURE_STATUSES = [
  TaskRunStatus.CANCELED,
  TaskRunStatus.INTERRUPTED,
  TaskRunStatus.COMPLETED_WITH_ERRORS,
  TaskRunStatus.SYSTEM_FAILURE,
  TaskRunStatus.CRASHED
];
function executionResultForTaskRun(taskRun) {
  if (SUCCESSFUL_STATUSES.includes(taskRun.status)) {
    let attempt = taskRun.attempts.find((a) => a.status === TaskRunAttemptStatus.COMPLETED);
    if (!attempt) {
      logger.error("Task run is successful but no successful attempt found", {
        taskRunId: taskRun.id,
        taskRunStatus: taskRun.status,
        taskRunAttempts: taskRun.attempts.map((a) => a.status)
      });
      return;
    }
    return {
      ok: !0,
      id: taskRun.friendlyId,
      output: attempt.output ?? void 0,
      outputType: attempt.outputType
    };
  }
  if (FAILURE_STATUSES.includes(taskRun.status)) {
    if (taskRun.status === TaskRunStatus.CANCELED)
      return {
        ok: !1,
        id: taskRun.friendlyId,
        error: {
          type: "INTERNAL_ERROR",
          code: "TASK_RUN_CANCELLED"
        }
      };
    let attempt = taskRun.attempts.find((a) => a.status === TaskRunAttemptStatus.FAILED);
    if (!attempt) {
      logger.error("Task run is failed but no failed attempt found", {
        taskRunId: taskRun.id,
        taskRunStatus: taskRun.status,
        taskRunAttempts: taskRun.attempts.map((a) => a.status)
      });
      return;
    }
    let error = TaskRunError.safeParse(attempt.error);
    return error.success ? {
      ok: !1,
      id: taskRun.friendlyId,
      error: error.data
    } : (logger.error("Failed to parse error from failed task run attempt", {
      taskRunId: taskRun.id,
      taskRunStatus: taskRun.status,
      taskRunAttempts: taskRun.attempts.map((a) => a.status),
      error: attempt.error
    }), {
      ok: !1,
      id: taskRun.friendlyId,
      error: {
        type: "INTERNAL_ERROR",
        code: "CONFIGURED_INCORRECTLY"
      }
    });
  }
}
function batchTaskRunItemStatusForRunStatus(status) {
  switch (status) {
    case TaskRunStatus.COMPLETED_SUCCESSFULLY:
      return BatchTaskRunItemStatus.COMPLETED;
    case TaskRunStatus.CANCELED:
    case TaskRunStatus.INTERRUPTED:
    case TaskRunStatus.COMPLETED_WITH_ERRORS:
    case TaskRunStatus.SYSTEM_FAILURE:
    case TaskRunStatus.CRASHED:
    case TaskRunStatus.EXPIRED:
      return BatchTaskRunItemStatus.FAILED;
    case TaskRunStatus.PENDING:
    case TaskRunStatus.WAITING_FOR_DEPLOY:
    case TaskRunStatus.WAITING_TO_RESUME:
    case TaskRunStatus.RETRYING_AFTER_FAILURE:
    case TaskRunStatus.EXECUTING:
    case TaskRunStatus.PAUSED:
    case TaskRunStatus.DELAYED:
      return BatchTaskRunItemStatus.PENDING;
    default:
      (0, import_assert_never14.assertNever)(status);
  }
}

// app/presenters/v3/ApiBatchResultsPresenter.server.ts
var ApiBatchResultsPresenter = class extends BasePresenter {
  async call(friendlyId, env6) {
    return this.traceWithEnv("call", env6, async (span) => {
      let batchRun = await this._prisma.batchTaskRun.findUnique({
        where: {
          friendlyId,
          runtimeEnvironmentId: env6.id
        },
        include: {
          items: {
            include: {
              taskRun: {
                include: {
                  attempts: {
                    orderBy: {
                      createdAt: "desc"
                    }
                  }
                }
              }
            }
          }
        }
      });
      if (batchRun)
        return {
          id: batchRun.friendlyId,
          items: batchRun.items.map((item) => executionResultForTaskRun(item.taskRun)).filter(Boolean)
        };
    });
  }
};

// app/routes/api.v1.batches.$batchParam.results.ts
var ParamsSchema43 = import_zod193.z.object({
  /* This is the batch friendly ID */
  batchParam: import_zod193.z.string()
});
async function loader99({ request, params }) {
  let authenticationResult = await authenticateApiRequest(request);
  if (!authenticationResult)
    return (0, import_server_runtime53.json)({ error: "Invalid or Missing API Key" }, { status: 401 });
  let parsed = ParamsSchema43.safeParse(params);
  if (!parsed.success)
    return (0, import_server_runtime53.json)({ error: "Invalid or missing run ID" }, { status: 400 });
  let { batchParam } = parsed.data;
  try {
    let result = await new ApiBatchResultsPresenter().call(batchParam, authenticationResult.environment);
    return result ? (0, import_server_runtime53.json)(result) : (0, import_server_runtime53.json)({ error: "Batch not found" }, { status: 404 });
  } catch (error) {
    return error instanceof Error ? (0, import_server_runtime53.json)({ error: error.message }, { status: 500 }) : (0, import_server_runtime53.json)({ error: JSON.stringify(error) }, { status: 500 });
  }
}

// app/routes/api.v1.event-dispatchers.ephemeral.ts
var api_v1_event_dispatchers_ephemeral_exports = {};
__export(api_v1_event_dispatchers_ephemeral_exports, {
  action: () => action52
});
var import_server_runtime54 = require("@remix-run/server-runtime");

// app/services/dispatchers/createEphemeralEventDispatcher.server.ts
var CreateEphemeralEventDispatcherService = class {
  #prismaClient;
  constructor(prismaClient = prisma) {
    this.#prismaClient = prismaClient;
  }
  async call(environment, data2) {
    return await $transaction(this.#prismaClient, async (tx) => {
      let existingDispatcher = await tx.eventDispatcher.findUnique({
        where: {
          dispatchableId_environmentId: {
            dispatchableId: data2.url,
            environmentId: environment.id
          }
        }
      });
      if (existingDispatcher)
        return existingDispatcher;
      let externalAccount = data2.accountId ? await this.#prismaClient.externalAccount.upsert({
        where: {
          environmentId_identifier: {
            environmentId: environment.id,
            identifier: data2.accountId
          }
        },
        create: {
          environmentId: environment.id,
          organizationId: environment.organizationId,
          identifier: data2.accountId
        },
        update: {}
      }) : void 0, dispatcher = await tx.eventDispatcher.create({
        data: {
          dispatchableId: data2.url,
          environmentId: environment.id,
          source: data2.source ?? "trigger.dev",
          payloadFilter: data2.filter,
          contextFilter: data2.contextFilter,
          dispatchable: { url: data2.url, type: "EPHEMERAL" },
          enabled: !0,
          event: typeof data2.name == "string" ? [data2.name] : data2.name,
          manual: !1,
          externalAccountId: externalAccount?.id
        }
      });
      return await ExpireDispatcherService.enqueue(dispatcher.id, data2.timeoutInSeconds, tx), dispatcher;
    });
  }
};

// app/routes/api.v1.event-dispatchers.ephemeral.ts
async function action52({ request, params }) {
  if (request.method.toUpperCase() !== "POST")
    return { status: 405, body: "Method Not Allowed" };
  let authenticationResult = await authenticateApiRequest(request);
  if (!authenticationResult)
    return (0, import_server_runtime54.json)({ error: "Invalid or Missing API Key" }, { status: 401 });
  let anyBody = await request.json();
  logger.debug("CreateEphemeralEventDispatcherService.call() request body", {
    body: anyBody
  });
  let body = EphemeralEventDispatcherRequestBodySchema.safeParse(anyBody);
  if (!body.success)
    return (0, import_server_runtime54.json)({ error: "Invalid request body" }, { status: 400 });
  let service = new CreateEphemeralEventDispatcherService();
  try {
    let dispatcher = await service.call(authenticationResult.environment, body.data);
    return dispatcher ? (0, import_server_runtime54.json)({ id: dispatcher.id }) : (0, import_server_runtime54.json)({ error: "Could not create Event Dispatcher" }, { status: 500 });
  } catch (error) {
    let prismaError = PrismaErrorSchema.safeParse(error);
    return prismaError.success && prismaError.data.code === "P2005" ? (0, import_server_runtime54.json)({ error: "Dispatcher not found" }, { status: 404 }) : (0, import_server_runtime54.json)({ error: "Internal Server Error" }, { status: 500 });
  }
}

// app/routes/api.v1.events.$eventId.cancel-runs.ts
var api_v1_events_eventId_cancel_runs_exports = {};
__export(api_v1_events_eventId_cancel_runs_exports, {
  action: () => action53
});
var import_server_runtime55 = require("@remix-run/server-runtime"), import_zod194 = require("zod");

// app/services/events/cancelRunsForEvent.server.ts
var CANCELLABLE_JOB_RUN_STATUS = [
  JobRunStatus.PENDING,
  JobRunStatus.QUEUED,
  JobRunStatus.WAITING_ON_CONNECTIONS,
  JobRunStatus.PREPROCESSING,
  JobRunStatus.STARTED
], CancelRunsForEventService = class {
  #prismaClient;
  constructor(prismaClient = prisma) {
    this.#prismaClient = prismaClient;
  }
  async call(environment, eventId) {
    return await $transaction(this.#prismaClient, async (tx) => {
      let event = await tx.eventRecord.findUnique({
        where: {
          eventId_environmentId: {
            eventId,
            environmentId: environment.id
          }
        }
      });
      if (!event)
        return;
      let jobRuns = await tx.jobRun.findMany({
        where: {
          eventId: event.id,
          status: {
            in: CANCELLABLE_JOB_RUN_STATUS
          }
        },
        select: {
          id: !0
        }
      }), cancelRunService = new CancelRunService(this.#prismaClient), cancelledRunIds = [], failedToCancelRunIds = [];
      for (let jobRun of jobRuns)
        try {
          await cancelRunService.call({ runId: jobRun.id }), cancelledRunIds.push(jobRun.id);
        } catch {
          logger.debug(`failed to cancel job run with id ${jobRun.id} for event id ${eventId}`), failedToCancelRunIds.push(jobRun.id);
        }
      return {
        cancelledRunIds,
        failedToCancelRunIds
      };
    });
  }
};

// app/routes/api.v1.events.$eventId.cancel-runs.ts
var ParamsSchema44 = import_zod194.z.object({
  eventId: import_zod194.z.string()
});
async function action53({ request, params }) {
  if (request.method.toUpperCase() !== "POST")
    return { status: 405, body: "Method Not Allowed" };
  let authenticationResult = await authenticateApiRequest(request);
  if (!authenticationResult)
    return (0, import_server_runtime55.json)({ error: "Invalid or Missing API key" }, { status: 401 });
  let authenticatedEnv = authenticationResult.environment, parsed = ParamsSchema44.safeParse(params);
  if (!parsed.success)
    return (0, import_server_runtime55.json)({ error: "Invalid or Missing eventId" }, { status: 400 });
  let { eventId } = parsed.data, service = new CancelRunsForEventService();
  try {
    let res = await service.call(authenticatedEnv, eventId);
    return res ? (0, import_server_runtime55.json)(res) : (0, import_server_runtime55.json)({ error: "Event not found" }, { status: 404 });
  } catch (err) {
    return logger.error("CancelRunsForEventService.call() error", { error: err }), (0, import_server_runtime55.json)({ error: "Internal Server Error" }, { status: 500 });
  }
}

// app/routes/integrations.$serviceName.callback.ts
var integrations_serviceName_callback_exports = {};
__export(integrations_serviceName_callback_exports, {
  loader: () => loader100
});
var import_zod195 = __toESM(require("zod"));

// app/v3/services/createOrgIntegration.server.ts
var CreateOrgIntegrationService = class extends BaseService {
  async call(userId, orgId, serviceName, code) {
    let org = await this._prisma.organization.findUnique({
      where: {
        id: orgId,
        members: {
          some: {
            userId
          }
        }
      }
    });
    if (!org)
      throw new Error("Organization not found");
    return OrgIntegrationRepository.createOrgIntegration(serviceName, code, org);
  }
};

// app/routes/integrations.$serviceName.callback.ts
var URLSearchSchema = import_zod195.default.object({
  code: import_zod195.default.string().optional(),
  state: import_zod195.default.string().optional(),
  error: import_zod195.default.string().optional()
}).passthrough(), ParamsSchema45 = import_zod195.default.object({
  serviceName: import_zod195.default.string()
});
async function loader100({ request, params }) {
  if (request.method.toUpperCase() !== "GET")
    return { status: 405, body: "Method Not Allowed" };
  let userId = await requireUserId(request), url = requestUrl(request), parsedSearchParams = URLSearchSchema.safeParse(Object.fromEntries(url.searchParams));
  if (!parsedSearchParams.success)
    throw new Response("Invalid params", { status: 400 });
  if (parsedSearchParams.data.error)
    throw new Response(parsedSearchParams.data.error, { status: 400 });
  if (!parsedSearchParams.data.code || !parsedSearchParams.data.state)
    throw new Response("Invalid params", { status: 400 });
  let parsedParams = ParamsSchema45.safeParse(params);
  if (!parsedParams.success)
    throw new Response("Invalid params", { status: 400 });
  return await new CreateOrgIntegrationService().call(
    userId,
    parsedSearchParams.data.state,
    parsedParams.data.serviceName,
    parsedSearchParams.data.code
  ) ? await OrgIntegrationRepository.redirectAfterAuth(request) : redirectBackWithErrorMessage(request, "Failed to connect to the service");
}

// app/routes/resources.packets.$environmentId.$.ts
var resources_packets_environmentId_exports = {};
__export(resources_packets_environmentId_exports, {
  loader: () => loader101
});
var import_node_path = require("node:path"), import_zod196 = require("zod");
var ParamSchema6 = import_zod196.z.object({
  environmentId: import_zod196.z.string(),
  "*": import_zod196.z.string()
});
async function loader101({ request, params }) {
  let userId = await requireUserId(request), { environmentId, "*": filename } = ParamSchema6.parse(params), environment = await prisma.runtimeEnvironment.findFirst({
    where: {
      id: environmentId,
      organization: {
        members: {
          some: {
            userId
          }
        }
      }
    },
    include: {
      project: !0
    }
  });
  if (!environment)
    return new Response("Not found", { status: 404 });
  let signed = await generatePresignedRequest(
    environment.project.externalRef,
    environment.slug,
    filename,
    "GET"
  );
  if (!signed)
    return new Response("Failed to generate presigned URL", { status: 500 });
  let response = await fetch(signed.url, {
    headers: signed.headers
  });
  return new Response(response.body, {
    status: 200,
    headers: {
      "Content-Type": "application/octet-stream",
      "Content-Disposition": `attachment; filename="${(0, import_node_path.basename)(filename)}"`
    }
  });
}

// app/routes/api.v1.runs.$runId.tasks.$id.fail/route.ts
var route_exports111 = {};
__export(route_exports111, {
  action: () => action54
});
var import_server_runtime56 = require("@remix-run/server-runtime");
var import_zod197 = require("zod");
var ParamsSchema46 = import_zod197.z.object({
  runId: import_zod197.z.string(),
  id: import_zod197.z.string()
});
async function action54({ request, params }) {
  if (request.method.toUpperCase() !== "POST")
    return { status: 405, body: "Method Not Allowed" };
  let authenticationResult = await authenticateApiRequest(request);
  if (!authenticationResult)
    return (0, import_server_runtime56.json)({ error: "Invalid or Missing API key" }, { status: 401 });
  let authenticatedEnv = authenticationResult.environment, { runId, id } = ParamsSchema46.parse(params), anyBody = await request.json();
  logger.debug("FailRunTaskService.call() request body", {
    body: anyBody,
    runId,
    id
  });
  let body = FailTaskBodyInputSchema.safeParse(anyBody);
  if (!body.success)
    return (0, import_server_runtime56.json)({ error: "Invalid request body" }, { status: 400 });
  let service = new FailRunTaskService();
  try {
    let task = await service.call(authenticatedEnv, runId, id, body.data);
    return logger.debug("FailRunTaskService.call() response body", {
      runId,
      id,
      task
    }), task ? (0, import_server_runtime56.json)(task) : (0, import_server_runtime56.json)({ message: "Task not found" }, { status: 404 });
  } catch (error) {
    return error instanceof Error ? (0, import_server_runtime56.json)({ error: error.message }, { status: 400 }) : (0, import_server_runtime56.json)({ error: "Something went wrong" }, { status: 500 });
  }
}

// app/routes/_app.orgs.$organizationSlug.team/route.tsx
var route_exports112 = {};
__export(route_exports112, {
  action: () => action55,
  default: () => Page68,
  loader: () => loader102
});
var import_react214 = require("@conform-to/react"), import_zod198 = require("@conform-to/zod"), import_solid107 = require("@heroicons/react/20/solid"), import_react215 = require("@remix-run/react"), import_server_runtime57 = require("@remix-run/server-runtime"), import_react216 = require("react"), import_remix_typedjson82 = require("remix-typedjson"), import_tiny_invariant10 = __toESM(require("tiny-invariant")), import_zod199 = require("zod");

// app/components/primitives/Alert.tsx
var React19 = __toESM(require("react")), AlertDialogPrimitive = __toESM(require("@radix-ui/react-alert-dialog"));
var import_jsx_runtime274 = require("react/jsx-runtime"), Alert = AlertDialogPrimitive.Root, AlertTrigger = AlertDialogPrimitive.Trigger, AlertPortal = ({
  className,
  children,
  ...props
}) => /* @__PURE__ */ (0, import_jsx_runtime274.jsx)(AlertDialogPrimitive.Portal, { className: cn(className), ...props, children: /* @__PURE__ */ (0, import_jsx_runtime274.jsx)("div", { className: "fixed inset-0 z-50 flex items-end justify-center sm:items-center", children }) });
AlertPortal.displayName = AlertDialogPrimitive.Portal.displayName;
var AlertOverlay = React19.forwardRef(({ className, children, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime274.jsx)(
  AlertDialogPrimitive.Overlay,
  {
    className: cn(
      "fixed inset-0 z-50 bg-background-dimmed/80 backdrop-blur-sm transition-opacity animate-in fade-in",
      className
    ),
    ...props,
    ref
  }
));
AlertOverlay.displayName = AlertDialogPrimitive.Overlay.displayName;
var AlertContent = React19.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime274.jsxs)(AlertPortal, { children: [
  /* @__PURE__ */ (0, import_jsx_runtime274.jsx)(AlertOverlay, {}),
  /* @__PURE__ */ (0, import_jsx_runtime274.jsx)(
    AlertDialogPrimitive.Content,
    {
      ref,
      className: cn(
        "fixed z-50 grid w-full max-w-lg scale-100 gap-4 border bg-background-dimmed p-6 opacity-100 shadow-lg animate-in fade-in-90 slide-in-from-bottom-10 sm:rounded-lg sm:zoom-in-90 sm:slide-in-from-bottom-0 md:w-full",
        className
      ),
      ...props
    }
  )
] }));
AlertContent.displayName = AlertDialogPrimitive.Content.displayName;
var AlertHeader = ({ className, ...props }) => /* @__PURE__ */ (0, import_jsx_runtime274.jsx)("div", { className: cn("flex flex-col space-y-2 text-center sm:text-left", className), ...props });
AlertHeader.displayName = "AlertDialogHeader";
var AlertFooter = ({ className, ...props }) => /* @__PURE__ */ (0, import_jsx_runtime274.jsx)(
  "div",
  {
    className: cn("flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2", className),
    ...props
  }
);
AlertFooter.displayName = "AlertDialogFooter";
var AlertTitle = React19.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime274.jsx)(
  AlertDialogPrimitive.Title,
  {
    ref,
    className: cn("text-lg font-semibold", className),
    ...props
  }
));
AlertTitle.displayName = AlertDialogPrimitive.Title.displayName;
var AlertDescription = React19.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime274.jsx)(
  AlertDialogPrimitive.Description,
  {
    ref,
    className: cn("text-muted-foreground text-sm", className),
    ...props
  }
));
AlertDescription.displayName = AlertDialogPrimitive.Description.displayName;
var AlertAction = React19.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime274.jsx)(AlertDialogPrimitive.Action, { ref, className: cn(className), ...props }));
AlertAction.displayName = AlertDialogPrimitive.Action.displayName;
var AlertCancel = React19.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime274.jsx)(AlertDialogPrimitive.Cancel, { ref, className: cn("mt-2 sm:mt-0", className), ...props }));
AlertCancel.displayName = AlertDialogPrimitive.Cancel.displayName;

// app/routes/_app.orgs.$organizationSlug.team/route.tsx
var import_jsx_runtime275 = require("react/jsx-runtime"), Params3 = import_zod199.z.object({
  organizationSlug: import_zod199.z.string()
}), loader102 = async ({ request, params }) => {
  let userId = await requireUserId(request), { organizationSlug } = Params3.parse(params), organization = await $replica.organization.findFirst({
    where: { slug: organizationSlug },
    select: { id: !0 }
  });
  if (!organization)
    throw new Response("Not Found", { status: 404 });
  let result = await new TeamPresenter().call({
    userId,
    organizationId: organization.id
  });
  if (!result)
    throw new Response("Not Found", { status: 404 });
  return (0, import_remix_typedjson82.typedjson)(result);
}, schema15 = import_zod199.z.object({
  memberId: import_zod199.z.string()
}), action55 = async ({ request, params }) => {
  let userId = await requireUserId(request), { organizationSlug } = params;
  (0, import_tiny_invariant10.default)(organizationSlug, "organizationSlug not found");
  let formData = await request.formData(), submission = (0, import_zod198.parse)(formData, { schema: schema15 });
  if (!submission.value || submission.intent !== "submit")
    return (0, import_server_runtime57.json)(submission);
  try {
    let deletedMember = await removeTeamMember({
      userId,
      memberId: submission.value.memberId,
      slug: organizationSlug
    });
    return deletedMember.userId === userId ? redirectWithSuccessMessage("/", request, "You left the organization") : redirectWithSuccessMessage(
      organizationTeamPath(deletedMember.organization),
      request,
      `Removed ${deletedMember.user.name ?? "member"} from team`
    );
  } catch (error) {
    return (0, import_server_runtime57.json)({ errors: { body: error.message } }, { status: 400 });
  }
};
function Page68() {
  let { members, invites, limits } = (0, import_remix_typedjson82.useTypedLoaderData)(), user = useUser(), organization = useOrganization(), requiresUpgrade = limits.used >= limits.limit;
  return /* @__PURE__ */ (0, import_jsx_runtime275.jsxs)(PageContainer, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime275.jsxs)(NavBar, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime275.jsx)(PageTitle, { title: "Team" }),
      /* @__PURE__ */ (0, import_jsx_runtime275.jsx)(PageAccessories, { children: /* @__PURE__ */ (0, import_jsx_runtime275.jsx)(AdminDebugTooltip, { children: /* @__PURE__ */ (0, import_jsx_runtime275.jsxs)(PropertyTable, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime275.jsx)(Property, { label: "Org ID", children: /* @__PURE__ */ (0, import_jsx_runtime275.jsx)("div", { className: "flex items-center gap-2", children: /* @__PURE__ */ (0, import_jsx_runtime275.jsx)(Paragraph, { variant: "extra-small/bright/mono", children: organization.id }) }) }),
        members.map((member) => /* @__PURE__ */ (0, import_jsx_runtime275.jsx)(Property, { label: member.user.name, children: /* @__PURE__ */ (0, import_jsx_runtime275.jsx)("div", { className: "flex items-center gap-2", children: /* @__PURE__ */ (0, import_jsx_runtime275.jsxs)(Paragraph, { variant: "extra-small/bright/mono", children: [
          member.user.email,
          " - ",
          member.user.id
        ] }) }) }, member.id))
      ] }) }) })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime275.jsxs)(PageBody, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime275.jsxs)(Header2, { children: [
        "Members (",
        limits.used,
        "/",
        limits.limit,
        ")"
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime275.jsx)("ul", { className: "divide-ui-border flex w-full max-w-md flex-col divide-y border-b border-grid-bright", children: members.map((member) => /* @__PURE__ */ (0, import_jsx_runtime275.jsxs)("li", { className: "flex items-center gap-x-4 py-4", children: [
        /* @__PURE__ */ (0, import_jsx_runtime275.jsx)(
          UserAvatar,
          {
            avatarUrl: member.user.avatarUrl,
            name: member.user.name,
            className: "h-10 w-10"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime275.jsxs)("div", { className: "flex flex-col gap-0.5", children: [
          /* @__PURE__ */ (0, import_jsx_runtime275.jsxs)(Header3, { children: [
            member.user.name,
            " ",
            member.user.id === user.id && /* @__PURE__ */ (0, import_jsx_runtime275.jsx)("span", { className: "text-text-dimmed", children: "(You)" })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime275.jsx)(Paragraph, { variant: "small", children: member.user.email })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime275.jsx)("div", { className: "flex grow items-center justify-end gap-4", children: /* @__PURE__ */ (0, import_jsx_runtime275.jsx)(LeaveRemoveButton, { userId: user.id, member, memberCount: members.length }) })
      ] }, member.user.id)) }),
      invites.length > 0 && /* @__PURE__ */ (0, import_jsx_runtime275.jsxs)(import_jsx_runtime275.Fragment, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime275.jsx)(Header2, { className: "mt-4", children: "Pending invites" }),
        /* @__PURE__ */ (0, import_jsx_runtime275.jsx)("ul", { className: "flex w-full max-w-md flex-col divide-y divide-charcoal-800 border-b border-charcoal-800", children: invites.map((invite) => /* @__PURE__ */ (0, import_jsx_runtime275.jsxs)("li", { className: "flex items-center gap-4 py-4", children: [
          /* @__PURE__ */ (0, import_jsx_runtime275.jsx)("div", { className: "rounded-md border border-charcoal-750 bg-charcoal-800 p-1.5", children: /* @__PURE__ */ (0, import_jsx_runtime275.jsx)(NamedIcon, { name: "envelope", className: "h-7 w-7" }) }),
          /* @__PURE__ */ (0, import_jsx_runtime275.jsxs)("div", { className: "flex flex-col gap-0.5", children: [
            /* @__PURE__ */ (0, import_jsx_runtime275.jsx)(Header3, { children: invite.email }),
            /* @__PURE__ */ (0, import_jsx_runtime275.jsxs)(Paragraph, { variant: "small", children: [
              "Invite sent ",
              /* @__PURE__ */ (0, import_jsx_runtime275.jsx)(DateTime, { date: invite.updatedAt })
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime275.jsxs)("div", { className: "flex grow items-center justify-end gap-x-2", children: [
            /* @__PURE__ */ (0, import_jsx_runtime275.jsx)(ResendButton, { invite }),
            /* @__PURE__ */ (0, import_jsx_runtime275.jsx)(RevokeButton, { invite })
          ] })
        ] }, invite.id)) })
      ] }),
      requiresUpgrade ? /* @__PURE__ */ (0, import_jsx_runtime275.jsx)(
        InfoPanel,
        {
          variant: "upgrade",
          icon: import_solid107.LockOpenIcon,
          iconClassName: "text-indigo-500",
          title: "Unlock more team members",
          to: v3BillingPath(organization),
          buttonLabel: "Upgrade",
          children: /* @__PURE__ */ (0, import_jsx_runtime275.jsxs)(Paragraph, { variant: "small", children: [
            "You've used all ",
            limits.limit,
            " of your available team members. Upgrade your plan to enable more."
          ] })
        }
      ) : /* @__PURE__ */ (0, import_jsx_runtime275.jsx)("div", { className: "mt-4 flex max-w-md justify-end", children: /* @__PURE__ */ (0, import_jsx_runtime275.jsx)(
        LinkButton,
        {
          to: inviteTeamMemberPath(organization),
          variant: "primary/small",
          LeadingIcon: import_solid107.UserPlusIcon,
          children: "Invite a team member"
        }
      ) })
    ] })
  ] });
}
function LeaveRemoveButton({
  userId,
  member,
  memberCount
}) {
  let organization = useOrganization();
  return userId === member.user.id ? memberCount === 1 ? /* @__PURE__ */ (0, import_jsx_runtime275.jsx)(
    SimpleTooltip,
    {
      button: /* @__PURE__ */ (0, import_jsx_runtime275.jsx)(ButtonContent, { variant: "minimal/small", className: "cursor-not-allowed", children: "Leave team" }),
      content: "An organization requires at least 1 team member"
    }
  ) : /* @__PURE__ */ (0, import_jsx_runtime275.jsx)(
    LeaveTeamModal,
    {
      member,
      buttonText: "Leave team",
      title: "Are you sure you want to leave the team?",
      description: `You will no longer have access to ${organization.title}. To regain access, you will need to be invited again.`,
      actionText: "Leave team"
    }
  ) : /* @__PURE__ */ (0, import_jsx_runtime275.jsx)(
    LeaveTeamModal,
    {
      member,
      buttonText: "Remove from team",
      title: `Are you sure you want to remove ${member.user.name ?? "them"} from the team?`,
      description: `They will no longer have access to ${organization.title}. To regain access, you will need to invite them again.`,
      actionText: "Remove from team"
    }
  );
}
function LeaveTeamModal({
  member,
  buttonText: buttonText2,
  title: title2,
  description,
  actionText
}) {
  let [open, setOpen] = (0, import_react216.useState)(!1), lastSubmission = (0, import_react215.useActionData)(), [form, { memberId }] = (0, import_react214.useForm)({
    id: "remove-member",
    // TODO: type this
    lastSubmission,
    onValidate({ formData }) {
      return (0, import_zod198.parse)(formData, { schema: schema15 });
    }
  });
  return /* @__PURE__ */ (0, import_jsx_runtime275.jsxs)(Alert, { open, onOpenChange: (o) => setOpen(o), children: [
    /* @__PURE__ */ (0, import_jsx_runtime275.jsx)(AlertTrigger, { asChild: !0, children: /* @__PURE__ */ (0, import_jsx_runtime275.jsx)(Button, { variant: "tertiary/small", children: buttonText2 }) }),
    /* @__PURE__ */ (0, import_jsx_runtime275.jsxs)(AlertContent, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime275.jsxs)(AlertHeader, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime275.jsx)(AlertTitle, { children: title2 }),
        /* @__PURE__ */ (0, import_jsx_runtime275.jsx)(AlertDescription, { children: description })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime275.jsxs)(AlertFooter, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime275.jsx)(AlertCancel, { asChild: !0, children: /* @__PURE__ */ (0, import_jsx_runtime275.jsx)(Button, { variant: "tertiary/small", children: "Cancel" }) }),
        /* @__PURE__ */ (0, import_jsx_runtime275.jsxs)(import_react215.Form, { method: "post", ...form.props, onSubmit: () => setOpen(!1), children: [
          /* @__PURE__ */ (0, import_jsx_runtime275.jsx)("input", { type: "hidden", value: member.id, name: "memberId" }),
          /* @__PURE__ */ (0, import_jsx_runtime275.jsx)(Button, { type: "submit", variant: "danger/small", form: form.props.id, children: actionText })
        ] })
      ] })
    ] })
  ] });
}
function ResendButton({ invite }) {
  return /* @__PURE__ */ (0, import_jsx_runtime275.jsxs)(import_react215.Form, { method: "post", action: resendInvitePath(), className: "flex", children: [
    /* @__PURE__ */ (0, import_jsx_runtime275.jsx)("input", { type: "hidden", value: invite.id, name: "inviteId" }),
    /* @__PURE__ */ (0, import_jsx_runtime275.jsx)(Button, { type: "submit", variant: "tertiary/small", children: "Resend invite" })
  ] });
}
function RevokeButton({ invite }) {
  let organization = useOrganization();
  return /* @__PURE__ */ (0, import_jsx_runtime275.jsxs)(import_react215.Form, { method: "post", action: revokeInvitePath(), className: "flex", children: [
    /* @__PURE__ */ (0, import_jsx_runtime275.jsx)("input", { type: "hidden", value: invite.id, name: "inviteId" }),
    /* @__PURE__ */ (0, import_jsx_runtime275.jsx)("input", { type: "hidden", value: organization.slug, name: "slug" }),
    /* @__PURE__ */ (0, import_jsx_runtime275.jsx)(
      Button,
      {
        type: "submit",
        variant: "danger/small",
        LeadingIcon: "trash-can",
        leadingIconClassName: "text-white"
      }
    )
  ] });
}

// app/routes/api.v1.$endpointSlug.sources.$id.ts
var api_v1_endpointSlug_sources_id_exports = {};
__export(api_v1_endpointSlug_sources_id_exports, {
  action: () => action56
});
var import_server_runtime58 = require("@remix-run/server-runtime");
var import_zod200 = require("zod");

// app/services/sources/updateSourceV1.server.ts
var UpdateSourceServiceV1 = class {
  #prismaClient;
  constructor(prismaClient = prisma) {
    this.#prismaClient = prismaClient;
  }
  async call({
    environment,
    payload,
    id,
    endpointSlug
  }) {
    let endpoint = await this.#prismaClient.endpoint.findUniqueOrThrow({
      where: {
        environmentId_slug: {
          environmentId: environment.id,
          slug: endpointSlug
        }
      }
    }), triggerSource = await this.#prismaClient.triggerSource.findUniqueOrThrow({
      where: {
        key_environmentId: {
          environmentId: environment.id,
          key: id
        }
      },
      include: {
        secretReference: !0
      }
    });
    await this.#prismaClient.triggerSource.update({
      where: {
        id: triggerSource.id
      },
      data: {
        active: !0,
        channelData: payload.data,
        endpointId: endpoint.id
      }
    });
    for (let event of payload.registeredEvents)
      await this.#prismaClient.triggerSourceOption.update({
        where: {
          name_value_sourceId: {
            name: "event",
            value: event,
            sourceId: triggerSource.id
          }
        },
        data: {
          registered: !0
        }
      });
    return payload.secret && await getSecretStore(triggerSource.secretReference.provider).setSecret(triggerSource.secretReference.key, {
      secret: payload.secret
    }), {
      id: triggerSource.id,
      key: triggerSource.key
    };
  }
};

// app/routes/api.v1.$endpointSlug.sources.$id.ts
var ParamsSchema47 = import_zod200.z.object({
  endpointSlug: import_zod200.z.string(),
  id: import_zod200.z.string()
});
async function action56({ request, params }) {
  if (logger.info("Updating source", { url: request.url }), request.method.toUpperCase() !== "PUT")
    return { status: 405, body: "Method Not Allowed" };
  let parsedParams = ParamsSchema47.safeParse(params);
  if (!parsedParams.success)
    return logger.info("Invalid params", { params }), (0, import_server_runtime58.json)({ error: "Invalid params" }, { status: 400 });
  let authenticationResult = await authenticateApiRequest(request);
  if (!authenticationResult)
    return logger.info("Invalid or missing api key", { url: request.url }), (0, import_server_runtime58.json)({ error: "Invalid or Missing API key" }, { status: 401 });
  let authenticatedEnv = authenticationResult.environment, anyBody = await request.json(), body = UpdateTriggerSourceBodyV1Schema.safeParse(anyBody);
  if (!body.success)
    return (0, import_server_runtime58.json)({ error: "Invalid request body" }, { status: 400 });
  let service = new UpdateSourceServiceV1();
  try {
    let source = await service.call({
      environment: authenticatedEnv,
      payload: body.data,
      endpointSlug: parsedParams.data.endpointSlug,
      id: parsedParams.data.id
    });
    return (0, import_server_runtime58.json)(source);
  } catch (error) {
    return error instanceof Error ? (logger.error("Error activating http source", {
      url: request.url,
      error: error.message
    }), (0, import_server_runtime58.json)({ error: error.message }, { status: 400 })) : (0, import_server_runtime58.json)({ error: "Something went wrong" }, { status: 500 });
  }
}

// app/routes/api.v1.deployments.$deploymentId.ts
var api_v1_deployments_deploymentId_exports = {};
__export(api_v1_deployments_deploymentId_exports, {
  loader: () => loader103
});
var import_server_runtime59 = require("@remix-run/server-runtime"), import_zod201 = require("zod");
var ParamsSchema48 = import_zod201.z.object({
  deploymentId: import_zod201.z.string()
});
async function loader103({ request, params }) {
  let parsedParams = ParamsSchema48.safeParse(params);
  if (!parsedParams.success)
    return (0, import_server_runtime59.json)({ error: "Invalid params" }, { status: 400 });
  let authenticationResult = await authenticateApiRequest(request);
  if (!authenticationResult)
    return logger.info("Invalid or missing api key", { url: request.url }), (0, import_server_runtime59.json)({ error: "Invalid or Missing API key" }, { status: 401 });
  let authenticatedEnv = authenticationResult.environment, { deploymentId } = parsedParams.data, deployment = await prisma.workerDeployment.findUnique({
    where: {
      friendlyId: deploymentId,
      environmentId: authenticatedEnv.id
    },
    include: {
      worker: {
        include: {
          tasks: !0
        }
      }
    }
  });
  return deployment ? (0, import_server_runtime59.json)({
    id: deployment.friendlyId,
    status: deployment.status,
    contentHash: deployment.contentHash,
    shortCode: deployment.shortCode,
    version: deployment.version,
    imageReference: deployment.imageReference,
    errorData: deployment.errorData,
    worker: deployment.worker ? {
      id: deployment.worker.friendlyId,
      version: deployment.worker.version,
      tasks: deployment.worker.tasks.map((task) => ({
        id: task.friendlyId,
        slug: task.slug,
        filePath: task.filePath,
        exportName: task.exportName
      }))
    } : void 0
  }) : (0, import_server_runtime59.json)({ error: "Deployment not found" }, { status: 404 });
}

// app/routes/api.v1.jobs.$jobSlug.cancel-runs.ts
var api_v1_jobs_jobSlug_cancel_runs_exports = {};
__export(api_v1_jobs_jobSlug_cancel_runs_exports, {
  action: () => action57
});
var import_server_runtime60 = require("@remix-run/server-runtime"), import_zod202 = require("zod");

// app/services/jobs/cancelRunsForJob.server.ts
var CANCELLABLE_JOB_RUN_STATUS2 = [
  JobRunStatus.PENDING,
  JobRunStatus.QUEUED,
  JobRunStatus.WAITING_ON_CONNECTIONS,
  JobRunStatus.PREPROCESSING,
  JobRunStatus.STARTED,
  JobRunStatus.EXECUTING,
  JobRunStatus.WAITING_TO_CONTINUE,
  JobRunStatus.WAITING_TO_EXECUTE
], CancelRunsForJobService = class {
  #prismaClient;
  constructor(prismaClient = prisma) {
    this.#prismaClient = prismaClient;
  }
  async call(environment, jobSlug) {
    return await $transaction(this.#prismaClient, async (tx) => {
      let job = await tx.job.findUnique({
        where: {
          projectId_slug: {
            projectId: environment.projectId,
            slug: jobSlug
          }
        }
      });
      if (!job)
        return;
      let jobRuns = await tx.jobRun.findMany({
        where: {
          jobId: job.id,
          status: {
            in: CANCELLABLE_JOB_RUN_STATUS2
          }
        },
        select: {
          id: !0
        }
      }), cancelRunService = new CancelRunService(this.#prismaClient), cancelledRunIds = [], failedToCancelRunIds = [];
      for (let jobRun of jobRuns)
        try {
          await cancelRunService.call({ runId: jobRun.id }), cancelledRunIds.push(jobRun.id);
        } catch {
          logger.debug(`failed to cancel job run with id ${jobRun.id} for job ${jobSlug}`), failedToCancelRunIds.push(jobRun.id);
        }
      return {
        cancelledRunIds,
        failedToCancelRunIds
      };
    });
  }
};

// app/routes/api.v1.jobs.$jobSlug.cancel-runs.ts
var ParamsSchema49 = import_zod202.z.object({
  jobSlug: import_zod202.z.string()
});
async function action57({ request, params }) {
  if (request.method.toUpperCase() !== "POST")
    return { status: 405, body: "Method Not Allowed" };
  let authenticationResult = await authenticateApiRequest(request);
  if (!authenticationResult)
    return (0, import_server_runtime60.json)({ error: "Invalid or Missing API key" }, { status: 401 });
  let authenticatedEnv = authenticationResult.environment, parsed = ParamsSchema49.safeParse(params);
  if (!parsed.success)
    return (0, import_server_runtime60.json)({ error: "Invalid or Missing jobSlug" }, { status: 400 });
  let { jobSlug } = parsed.data, service = new CancelRunsForJobService();
  try {
    let res = await service.call(authenticatedEnv, jobSlug);
    return res ? (0, import_server_runtime60.json)(res) : (0, import_server_runtime60.json)({ error: "Job not found" }, { status: 404 });
  } catch (err) {
    return logger.error("CancelRunsForJobService.call() error", { error: err }), (0, import_server_runtime60.json)({ error: "Internal Server Error" }, { status: 500 });
  }
}

// app/routes/api.v1.projects.$projectRef.$env.ts
var api_v1_projects_projectRef_env_exports = {};
__export(api_v1_projects_projectRef_env_exports, {
  loader: () => loader104
});
var import_server_runtime61 = require("@remix-run/server-runtime"), import_zod203 = require("zod");
var ParamsSchema50 = import_zod203.z.object({
  projectRef: import_zod203.z.string(),
  env: import_zod203.z.enum(["dev", "staging", "prod"])
});
async function loader104({ request, params }) {
  logger.info("projects get env", { url: request.url });
  let authenticationResult = await authenticateApiRequestWithPersonalAccessToken(request);
  if (!authenticationResult)
    return (0, import_server_runtime61.json)({ error: "Invalid or Missing Access Token" }, { status: 401 });
  let parsedParams = ParamsSchema50.safeParse(params);
  if (!parsedParams.success)
    return (0, import_server_runtime61.json)({ error: "Invalid Params" }, { status: 400 });
  let { projectRef, env: env6 } = parsedParams.data, project = env6 === "dev" ? await prisma.project.findUnique({
    where: {
      externalRef: projectRef,
      organization: {
        members: {
          some: {
            userId: authenticationResult.userId
          }
        }
      }
    },
    include: {
      environments: {
        where: {
          orgMember: {
            userId: authenticationResult.userId
          }
        }
      }
    }
  }) : await prisma.project.findUnique({
    where: {
      externalRef: projectRef,
      organization: {
        members: {
          some: {
            userId: authenticationResult.userId
          }
        }
      }
    },
    include: {
      environments: {
        where: {
          slug: env6 === "prod" ? "prod" : "stg"
        }
      }
    }
  });
  if (!project)
    return (0, import_server_runtime61.json)({ error: "Project not found" }, { status: 404 });
  if (!project.environments.length)
    return (0, import_server_runtime61.json)(
      { error: `Environment "${env6}" not found or is unsupported for this project.` },
      { status: 404 }
    );
  let result = {
    apiKey: project.environments[0].apiKey,
    name: project.name,
    apiUrl: env2.APP_ORIGIN
  };
  return (0, import_server_runtime61.json)(result);
}

// app/routes/api.v1.projects.$projectRef.runs.ts
var api_v1_projects_projectRef_runs_exports = {};
__export(api_v1_projects_projectRef_runs_exports, {
  loader: () => loader105
});
var import_server_runtime62 = require("@remix-run/server-runtime"), import_zod205 = require("zod"), import_zod_validation_error9 = require("zod-validation-error");

// app/presenters/v3/ApiRunListPresenter.server.ts
var import_assert_never16 = __toESM(require("assert-never")), import_zod204 = require("zod"), import_zod_validation_error8 = require("zod-validation-error");

// app/presenters/v3/ApiRetrieveRunPresenter.server.ts
var import_assert_never15 = __toESM(require("assert-never"));
var ApiRetrieveRunPresenter = class extends BasePresenter {
  async call(friendlyId, env6, showSecretDetails) {
    return this.traceWithEnv("call", env6, async (span) => {
      let taskRun = await this._prisma.taskRun.findUnique({
        where: {
          friendlyId,
          runtimeEnvironmentId: env6.id
        },
        include: {
          attempts: {
            orderBy: {
              createdAt: "desc"
            }
          },
          lockedToVersion: !0,
          schedule: !0
        }
      });
      if (!taskRun) {
        logger2.debug("Task run not found", { friendlyId, envId: env6.id });
        return;
      }
      let $payload, $payloadPresignedUrl, $output, $outputPresignedUrl;
      if (showSecretDetails) {
        let payloadPacket = await conditionallyImportPacket({
          data: taskRun.payload,
          dataType: taskRun.payloadType
        });
        if (payloadPacket.dataType === "application/store" && typeof payloadPacket.data == "string" ? $payloadPresignedUrl = await generatePresignedUrl(
          env6.project.externalRef,
          env6.slug,
          payloadPacket.data,
          "GET"
        ) : $payload = await parsePacket(payloadPacket), taskRun.status === "COMPLETED_SUCCESSFULLY") {
          let completedAttempt = taskRun.attempts.find(
            (a) => a.status === "COMPLETED" && typeof a.output !== null
          );
          if (completedAttempt && completedAttempt.output) {
            let outputPacket = await conditionallyImportPacket({
              data: completedAttempt.output,
              dataType: completedAttempt.outputType
            });
            outputPacket.dataType === "application/store" && typeof outputPacket.data == "string" ? $outputPresignedUrl = await generatePresignedUrl(
              env6.project.externalRef,
              env6.slug,
              outputPacket.data,
              "GET"
            ) : $output = await parsePacket(outputPacket);
          }
        }
      }
      let apiStatus = ApiRetrieveRunPresenter.apiStatusFromRunStatus(taskRun.status);
      return {
        id: taskRun.friendlyId,
        status: apiStatus,
        taskIdentifier: taskRun.taskIdentifier,
        idempotencyKey: taskRun.idempotencyKey ?? void 0,
        version: taskRun.lockedToVersion ? taskRun.lockedToVersion.version : void 0,
        createdAt: taskRun.createdAt ?? void 0,
        updatedAt: taskRun.updatedAt ?? void 0,
        startedAt: taskRun.startedAt ?? taskRun.lockedAt ?? void 0,
        finishedAt: ApiRetrieveRunPresenter.isStatusFinished(apiStatus) ? taskRun.updatedAt : void 0,
        delayedUntil: taskRun.delayUntil ?? void 0,
        payload: $payload,
        payloadPresignedUrl: $payloadPresignedUrl,
        output: $output,
        outputPresignedUrl: $outputPresignedUrl,
        isTest: taskRun.isTest,
        ttl: taskRun.ttl ?? void 0,
        expiredAt: taskRun.expiredAt ?? void 0,
        schedule: taskRun.schedule ? {
          id: taskRun.schedule.friendlyId,
          externalId: taskRun.schedule.externalId ?? void 0,
          deduplicationKey: taskRun.schedule.userProvidedDeduplicationKey ? taskRun.schedule.deduplicationKey : void 0,
          generator: {
            type: "CRON",
            expression: taskRun.schedule.generatorExpression,
            description: taskRun.schedule.generatorDescription
          }
        } : void 0,
        ...ApiRetrieveRunPresenter.apiBooleanHelpersFromRunStatus(apiStatus),
        attempts: showSecretDetails ? taskRun.attempts.map((a) => ({
          id: a.friendlyId,
          status: ApiRetrieveRunPresenter.apiStatusFromAttemptStatus(a.status),
          createdAt: a.createdAt ?? void 0,
          updatedAt: a.updatedAt ?? void 0,
          startedAt: a.startedAt ?? void 0,
          completedAt: a.completedAt ?? void 0,
          error: ApiRetrieveRunPresenter.apiErrorFromError(a.error)
        })) : []
      };
    });
  }
  static apiErrorFromError(error) {
    if (!error)
      return;
    let errorData = TaskRunError.safeParse(error);
    if (errorData.success)
      return createJsonErrorObject(errorData.data);
  }
  static isStatusFinished(status) {
    return status === "COMPLETED" || status === "FAILED" || status === "CANCELED" || status === "INTERRUPTED" || status === "CRASHED" || status === "SYSTEM_FAILURE";
  }
  static apiStatusFromRunStatus(status) {
    switch (status) {
      case "DELAYED":
        return "DELAYED";
      case "WAITING_FOR_DEPLOY":
        return "WAITING_FOR_DEPLOY";
      case "PENDING":
        return "QUEUED";
      case "PAUSED":
      case "WAITING_TO_RESUME":
        return "FROZEN";
      case "RETRYING_AFTER_FAILURE":
        return "REATTEMPTING";
      case "EXECUTING":
        return "EXECUTING";
      case "CANCELED":
        return "CANCELED";
      case "COMPLETED_SUCCESSFULLY":
        return "COMPLETED";
      case "SYSTEM_FAILURE":
        return "SYSTEM_FAILURE";
      case "INTERRUPTED":
        return "INTERRUPTED";
      case "CRASHED":
        return "CRASHED";
      case "COMPLETED_WITH_ERRORS":
        return "FAILED";
      case "EXPIRED":
        return "EXPIRED";
      default:
        (0, import_assert_never15.default)(status);
    }
  }
  static apiBooleanHelpersFromRunStatus(status) {
    let isQueued = status === "QUEUED" || status === "WAITING_FOR_DEPLOY" || status === "DELAYED", isExecuting = status === "EXECUTING" || status === "REATTEMPTING" || status === "FROZEN", isCompleted = status === "COMPLETED" || status === "CANCELED" || status === "FAILED" || status === "CRASHED" || status === "INTERRUPTED" || status === "SYSTEM_FAILURE";
    return {
      isQueued,
      isExecuting,
      isCompleted,
      isFailed: isCompleted && status !== "COMPLETED",
      isSuccess: isCompleted && status === "COMPLETED",
      isCancelled: status === "CANCELED"
    };
  }
  static apiStatusFromAttemptStatus(status) {
    switch (status) {
      case "PENDING":
        return "PENDING";
      case "PAUSED":
        return "PAUSED";
      case "EXECUTING":
        return "EXECUTING";
      case "COMPLETED":
        return "COMPLETED";
      case "FAILED":
        return "FAILED";
      case "CANCELED":
        return "CANCELED";
      default:
        (0, import_assert_never15.default)(status);
    }
  }
};

// app/presenters/v3/ApiRunListPresenter.server.ts
var SearchParamsSchema = import_zod204.z.object({
  "page[size]": import_zod204.z.coerce.number().int().positive().min(1).max(100).optional(),
  "page[after]": import_zod204.z.string().optional(),
  "page[before]": import_zod204.z.string().optional(),
  "filter[status]": import_zod204.z.string().optional().transform((value, ctx) => {
    if (!value)
      return;
    let statuses4 = value.split(","), parsedStatuses = statuses4.map((status) => RunStatus.safeParse(status));
    if (parsedStatuses.some((result) => !result.success)) {
      let invalidStatuses = [];
      for (let [index, result] of parsedStatuses.entries())
        result.success || invalidStatuses.push(statuses4[index]);
      return ctx.addIssue({
        code: import_zod204.z.ZodIssueCode.custom,
        message: `Invalid status values: ${invalidStatuses.join(", ")}`
      }), import_zod204.z.NEVER;
    }
    let $statuses = parsedStatuses.map((result) => result.success ? result.data : void 0).filter(Boolean);
    return Array.from(new Set($statuses));
  }),
  "filter[env]": import_zod204.z.string().optional().transform((value) => value ? value.split(",") : void 0),
  "filter[taskIdentifier]": import_zod204.z.string().optional().transform((value) => value ? value.split(",") : void 0),
  "filter[version]": import_zod204.z.string().optional().transform((value) => value ? value.split(",") : void 0),
  "filter[bulkAction]": import_zod204.z.string().optional(),
  "filter[schedule]": import_zod204.z.string().optional(),
  "filter[isTest]": import_zod204.z.string().optional().transform((value, ctx) => {
    if (value)
      return value === "true" ? !0 : value === "false" ? !1 : (ctx.addIssue({
        code: import_zod204.z.ZodIssueCode.custom,
        message: `Invalid value for isTest: ${value}`
      }), import_zod204.z.NEVER);
  }),
  "filter[createdAt][from]": import_zod204.z.coerce.date().optional(),
  "filter[createdAt][to]": import_zod204.z.coerce.date().optional(),
  "filter[createdAt][period]": import_zod204.z.string().optional()
}), ApiRunListPresenter = class extends BasePresenter {
  async call(project, searchParams, environment) {
    return this.trace("call", async (span) => {
      let rawSearchParams = Object.fromEntries(searchParams.entries()), $searchParams = SearchParamsSchema.safeParse(rawSearchParams);
      if (!$searchParams.success)
        throw logger.error("Invalid search params", {
          searchParams: rawSearchParams,
          errors: $searchParams.error.errors
        }), (0, import_zod_validation_error8.fromZodError)($searchParams.error);
      logger.debug("Valid search params", { searchParams: $searchParams.data });
      let options2 = {
        projectId: project.id
      };
      if ($searchParams.data["page[size]"] && (options2.pageSize = $searchParams.data["page[size]"]), $searchParams.data["page[after]"] && (options2.cursor = $searchParams.data["page[after]"], options2.direction = "forward"), $searchParams.data["page[before]"] && (options2.cursor = $searchParams.data["page[before]"], options2.direction = "backward"), environment)
        options2.environments = [environment.id];
      else if ($searchParams.data["filter[env]"]) {
        let environments2 = await this._prisma.runtimeEnvironment.findMany({
          where: {
            projectId: project.id,
            slug: {
              in: $searchParams.data["filter[env]"]
            }
          }
        });
        options2.environments = environments2.map((env6) => env6.id);
      }
      $searchParams.data["filter[status]"] && (options2.statuses = $searchParams.data["filter[status]"].flatMap(
        (status) => ApiRunListPresenter.apiStatusToRunStatuses(status)
      )), $searchParams.data["filter[taskIdentifier]"] && (options2.tasks = $searchParams.data["filter[taskIdentifier]"]), $searchParams.data["filter[version]"] && (options2.versions = $searchParams.data["filter[version]"]), $searchParams.data["filter[bulkAction]"] && (options2.bulkId = $searchParams.data["filter[bulkAction]"]), $searchParams.data["filter[schedule]"] && (options2.scheduleId = $searchParams.data["filter[schedule]"]), $searchParams.data["filter[createdAt][from]"] && (options2.from = $searchParams.data["filter[createdAt][from]"].getTime()), $searchParams.data["filter[createdAt][to]"] && (options2.to = $searchParams.data["filter[createdAt][to]"].getTime()), $searchParams.data["filter[createdAt][period]"] && (options2.period = $searchParams.data["filter[createdAt][period]"]), typeof $searchParams.data["filter[isTest]"] == "boolean" && (options2.isTest = $searchParams.data["filter[isTest]"]);
      let presenter = new RunListPresenter2();
      logger.debug("Calling RunListPresenter", { options: options2 });
      let results = await presenter.call(options2);
      return {
        data: results.runs.map((run) => ({
          id: run.friendlyId,
          status: ApiRetrieveRunPresenter.apiStatusFromRunStatus(run.status),
          taskIdentifier: run.taskIdentifier,
          idempotencyKey: run.idempotencyKey,
          version: run.version ?? void 0,
          createdAt: new Date(run.createdAt),
          updatedAt: new Date(run.updatedAt),
          startedAt: run.startedAt ? new Date(run.startedAt) : void 0,
          finishedAt: run.finishedAt ? new Date(run.finishedAt) : void 0,
          delayedUntil: run.delayUntil ? new Date(run.delayUntil) : void 0,
          isTest: run.isTest,
          ttl: run.ttl ?? void 0,
          expiredAt: run.expiredAt ? new Date(run.expiredAt) : void 0,
          env: {
            id: run.environment.id,
            name: run.environment.slug,
            user: run.environment.userName
          },
          ...ApiRetrieveRunPresenter.apiBooleanHelpersFromRunStatus(
            ApiRetrieveRunPresenter.apiStatusFromRunStatus(run.status)
          )
        })),
        pagination: {
          next: results.pagination.next,
          previous: results.pagination.previous
        }
      };
    });
  }
  static apiStatusToRunStatuses(status) {
    switch (status) {
      case "DELAYED":
        return "DELAYED";
      case "WAITING_FOR_DEPLOY":
        return "WAITING_FOR_DEPLOY";
      case "QUEUED":
        return "PENDING";
      case "EXECUTING":
        return "EXECUTING";
      case "REATTEMPTING":
        return "RETRYING_AFTER_FAILURE";
      case "FROZEN":
        return ["PAUSED", "WAITING_TO_RESUME"];
      case "CANCELED":
        return "CANCELED";
      case "COMPLETED":
        return "COMPLETED_SUCCESSFULLY";
      case "SYSTEM_FAILURE":
        return "SYSTEM_FAILURE";
      case "INTERRUPTED":
        return "INTERRUPTED";
      case "CRASHED":
        return "CRASHED";
      case "FAILED":
        return "COMPLETED_WITH_ERRORS";
      case "EXPIRED":
        return "EXPIRED";
      default:
        (0, import_assert_never16.default)(status);
    }
  }
};

// app/routes/api.v1.projects.$projectRef.runs.ts
var ParamsSchema51 = import_zod205.z.object({
  projectRef: import_zod205.z.string()
});
async function loader105({ request, params }) {
  if (request.method.toUpperCase() === "OPTIONS")
    return apiCors(request, (0, import_server_runtime62.json)({}));
  let authenticationResult = await authenticateApiRequestWithPersonalAccessToken(request);
  if (!authenticationResult)
    return apiCors(request, (0, import_server_runtime62.json)({ error: "Invalid or Missing API key" }, { status: 401 }));
  let $params = ParamsSchema51.safeParse(params);
  if (!$params.success)
    return (0, import_server_runtime62.json)({ error: "Invalid params" }, { status: 400 });
  let project = await findProjectByRef($params.data.projectRef, authenticationResult.userId);
  if (!project)
    return (0, import_server_runtime62.json)({ error: "Project not found" }, { status: 404 });
  let url = new URL(request.url), presenter = new ApiRunListPresenter();
  try {
    let result = await presenter.call(project, url.searchParams);
    return result ? apiCors(request, (0, import_server_runtime62.json)(result)) : apiCors(request, (0, import_server_runtime62.json)({ data: [] }));
  } catch (error) {
    return error instanceof import_zod_validation_error9.ValidationError ? apiCors(
      request,
      (0, import_server_runtime62.json)({ error: "Query Error", details: error.details }, { status: 400 })
    ) : apiCors(
      request,
      (0, import_server_runtime62.json)({ error: error instanceof Error ? error.message : String(error) }, { status: 400 })
    );
  }
}

// app/routes/api.v1.runs.$runParam.reschedule.ts
var api_v1_runs_runParam_reschedule_exports = {};
__export(api_v1_runs_runParam_reschedule_exports, {
  action: () => action58
});
var import_server_runtime63 = require("@remix-run/server-runtime");
var import_zod206 = require("zod");

// app/v3/services/rescheduleTaskRun.server.ts
var RescheduleTaskRunService = class extends BaseService {
  async call(taskRun, body) {
    if (taskRun.status !== "DELAYED")
      throw new ServiceValidationError("Cannot reschedule a run that is not delayed");
    let delay = await parseDelay(body.delay);
    if (!delay)
      throw new ServiceValidationError(`Invalid delay: ${body.delay}`);
    return await $transaction(this._prisma, async (tx) => {
      let updatedRun = await tx.taskRun.update({
        where: {
          id: taskRun.id
        },
        data: {
          delayUntil: delay
        }
      });
      return await workerQueue.enqueue(
        "v3.enqueueDelayedRun",
        { runId: taskRun.id },
        { tx, runAt: delay, jobKey: `v3.enqueueDelayedRun.${taskRun.id}` }
      ), updatedRun;
    });
  }
};

// app/routes/api.v1.runs.$runParam.reschedule.ts
var ParamsSchema52 = import_zod206.z.object({
  runParam: import_zod206.z.string()
});
async function action58({ request, params }) {
  if (request.method.toUpperCase() !== "POST")
    return { status: 405, body: "Method Not Allowed" };
  let authenticationResult = await authenticateApiRequest(request);
  if (!authenticationResult)
    return (0, import_server_runtime63.json)({ error: "Invalid or missing API Key" }, { status: 401 });
  let parsed = ParamsSchema52.safeParse(params);
  if (!parsed.success)
    return (0, import_server_runtime63.json)({ error: "Invalid or missing run ID" }, { status: 400 });
  let { runParam: runParam2 } = parsed.data, taskRun = await prisma.taskRun.findUnique({
    where: {
      friendlyId: runParam2,
      runtimeEnvironmentId: authenticationResult.environment.id
    }
  });
  if (!taskRun)
    return (0, import_server_runtime63.json)({ error: "Run not found" }, { status: 404 });
  let anyBody = await request.json(), body = RescheduleRunRequestBody.safeParse(anyBody);
  if (!body.success)
    return (0, import_server_runtime63.json)({ error: "Invalid request body" }, { status: 400 });
  let service = new RescheduleTaskRunService();
  try {
    let updatedRun = await service.call(taskRun, body.data);
    if (!updatedRun)
      return (0, import_server_runtime63.json)({ error: "An unknown error occurred" }, { status: 500 });
    let result = await new ApiRetrieveRunPresenter().call(
      updatedRun.friendlyId,
      authenticationResult.environment,
      !0
    );
    return result ? (0, import_server_runtime63.json)(result) : (0, import_server_runtime63.json)({ error: "Run not found" }, { status: 404 });
  } catch (error) {
    return error instanceof ServiceValidationError ? (0, import_server_runtime63.json)({ error: error.message }, { status: 400 }) : error instanceof Error ? (0, import_server_runtime63.json)({ error: error.message }, { status: 500 }) : (0, import_server_runtime63.json)({ error: "An unknown error occurred" }, { status: 500 });
  }
}

// app/routes/api.v2.$endpointSlug.sources.$id.ts
var api_v2_endpointSlug_sources_id_exports = {};
__export(api_v2_endpointSlug_sources_id_exports, {
  action: () => action59
});
var import_server_runtime64 = require("@remix-run/server-runtime");
var import_zod207 = require("zod");

// app/services/sources/updateSourceV2.server.ts
var UpdateSourceServiceV2 = class {
  #prismaClient;
  constructor(prismaClient = prisma) {
    this.#prismaClient = prismaClient;
  }
  async call({
    environment,
    payload,
    id,
    endpointSlug
  }) {
    let endpoint = await this.#prismaClient.endpoint.findUniqueOrThrow({
      where: {
        environmentId_slug: {
          environmentId: environment.id,
          slug: endpointSlug
        }
      }
    }), triggerSource = await this.#prismaClient.triggerSource.findUniqueOrThrow({
      where: {
        key_environmentId: {
          environmentId: environment.id,
          key: id
        }
      },
      include: {
        secretReference: !0
      }
    });
    await this.#prismaClient.triggerSource.update({
      where: {
        id: triggerSource.id
      },
      data: {
        active: !0,
        channelData: payload.data,
        endpointId: endpoint.id
      }
    });
    let flatOptions = Object.entries(payload.options).flatMap(
      ([name, value]) => value.map((v) => ({
        name,
        value: v
      }))
    );
    for (let { name, value } of flatOptions)
      await this.#prismaClient.triggerSourceOption.update({
        where: {
          name_value_sourceId: {
            name,
            value,
            sourceId: triggerSource.id
          }
        },
        data: {
          registered: !0
        }
      });
    return payload.secret && await getSecretStore(triggerSource.secretReference.provider).setSecret(triggerSource.secretReference.key, {
      secret: payload.secret
    }), {
      id: triggerSource.id,
      key: triggerSource.key
    };
  }
};

// app/routes/api.v2.$endpointSlug.sources.$id.ts
var ParamsSchema53 = import_zod207.z.object({
  endpointSlug: import_zod207.z.string(),
  id: import_zod207.z.string()
});
async function action59({ request, params }) {
  if (logger.info("Updating source", { url: request.url }), request.method.toUpperCase() !== "PUT")
    return { status: 405, body: "Method Not Allowed" };
  let parsedParams = ParamsSchema53.safeParse(params);
  if (!parsedParams.success)
    return logger.info("Invalid params", { params }), (0, import_server_runtime64.json)({ error: "Invalid params" }, { status: 400 });
  let authenticationResult = await authenticateApiRequest(request);
  if (!authenticationResult)
    return logger.info("Invalid or missing api key", { url: request.url }), (0, import_server_runtime64.json)({ error: "Invalid or Missing API key" }, { status: 401 });
  let authenticatedEnv = authenticationResult.environment, anyBody = await request.json(), body = UpdateTriggerSourceBodyV2Schema.safeParse(anyBody);
  if (!body.success)
    return (0, import_server_runtime64.json)({ error: "Invalid request body" }, { status: 400 });
  let service = new UpdateSourceServiceV2();
  try {
    let source = await service.call({
      environment: authenticatedEnv,
      payload: body.data,
      endpointSlug: parsedParams.data.endpointSlug,
      id: parsedParams.data.id
    });
    return (0, import_server_runtime64.json)(source);
  } catch (error) {
    return error instanceof Error ? (logger.error("Error activating http source", {
      url: request.url,
      error: error.message
    }), (0, import_server_runtime64.json)({ error: error.message }, { status: 400 })) : (0, import_server_runtime64.json)({ error: "Something went wrong" }, { status: 500 });
  }
}

// app/routes/api.v1.runs.$runId.statuses.$id/route.ts
var route_exports113 = {};
__export(route_exports113, {
  action: () => action60
});
var import_server_runtime65 = require("@remix-run/server-runtime");
var import_zod208 = require("zod");

// app/routes/api.v1.runs.$runId.statuses.$id/SetStatusService.server.ts
var SetStatusService = class {
  #prismaClient;
  constructor(prismaClient = prisma) {
    this.#prismaClient = prismaClient;
  }
  async call(runId, id, status) {
    return await $transaction(this.#prismaClient, async (tx) => {
      let existingStatus = await tx.jobRunStatusRecord.findUnique({
        where: {
          runId_key: {
            runId,
            key: id
          }
        }
      }), history2 = [], historyResult = StatusHistorySchema.safeParse(existingStatus?.history);
      return historyResult.success && history2.push(...historyResult.data), existingStatus && history2.push({
        label: existingStatus.label,
        state: existingStatus.state ?? void 0,
        data: existingStatus.data ?? void 0
      }), await tx.jobRunStatusRecord.upsert({
        where: {
          runId_key: {
            runId,
            key: id
          }
        },
        create: {
          key: id,
          runId,
          //this shouldn't ever use the id in reality, as the SDK makess it compulsory on the first call
          label: status.label ?? id,
          state: status.state,
          data: status.data,
          history: []
        },
        update: {
          label: status.label,
          state: status.state,
          data: status.data,
          history: history2
        }
      });
    });
  }
};

// app/routes/api.v1.runs.$runId.statuses.$id/route.ts
var ParamsSchema54 = import_zod208.z.object({
  runId: import_zod208.z.string(),
  id: import_zod208.z.string()
});
async function action60({ request, params }) {
  if (request.method.toUpperCase() !== "PUT")
    return { status: 405, body: "Method Not Allowed" };
  if (!await authenticateApiRequest(request))
    return (0, import_server_runtime65.json)({ error: "Invalid or Missing API key" }, { status: 401 });
  let { runId, id } = ParamsSchema54.parse(params), anyBody = await request.json();
  logger.debug("SetStatusService.call() request body", {
    body: anyBody,
    runId,
    id
  });
  let body = StatusUpdateSchema.safeParse(anyBody);
  if (!body.success)
    return (0, import_server_runtime65.json)({ error: "Invalid request body" }, { status: 400 });
  let service = new SetStatusService();
  try {
    let statusRecord = await service.call(runId, id, body.data);
    if (logger.debug("SetStatusService.call() response body", {
      runId,
      id,
      statusRecord
    }), !statusRecord)
      return (0, import_server_runtime65.json)({ error: "Something went wrong" }, { status: 500 });
    let status = JobRunStatusRecordSchema.parse({
      ...statusRecord,
      state: statusRecord.state ?? void 0,
      history: statusRecord.history ?? void 0,
      data: statusRecord.data ?? void 0
    });
    return (0, import_server_runtime65.json)(status);
  } catch (error) {
    return error instanceof Error ? (0, import_server_runtime65.json)({ error: error.message }, { status: 400 }) : (0, import_server_runtime65.json)({ error: "Something went wrong" }, { status: 500 });
  }
}

// app/routes/projects.v3.$projectRef.metrics/route.ts
var route_exports114 = {};
__export(route_exports114, {
  loader: () => loader106
});
var import_server_runtime66 = require("@remix-run/server-runtime"), import_prom_client7 = require("prom-client"), import_zod209 = require("zod");

// app/routes/projects.v3.$projectRef.metrics/registerProjectMetrics.server.ts
var import_prom_client6 = require("prom-client");
async function registerProjectMetrics(registry, projectId, userId) {
  let allEnvironments = await prisma.runtimeEnvironment.findMany({
    where: {
      projectId
    },
    include: {
      taskQueues: !0,
      project: !0,
      organization: !0,
      orgMember: !0
    }
  }), firstEnv = allEnvironments[0];
  firstEnv && (new import_prom_client6.Gauge({
    name: sanitizeMetricName("trigger_org_queue_concurrency"),
    help: "The number of tasks currently being executed in the org environment queue",
    registers: [registry],
    async collect() {
      let length = await marqs?.currentConcurrencyOfOrg(firstEnv);
      length && this.set(length);
    }
  }), new import_prom_client6.Gauge({
    name: sanitizeMetricName("trigger_org_queue_concurrency_limit"),
    help: "The concurrency limit for the org queue",
    registers: [registry],
    async collect() {
      let length = await marqs?.getOrgConcurrencyLimit(firstEnv);
      length && this.set(length);
    }
  }), new import_prom_client6.Gauge({
    name: sanitizeMetricName("trigger_org_queue_capacity"),
    help: "The capacity of the org queue",
    registers: [registry],
    async collect() {
      let concurrencyLimit = await marqs?.getOrgConcurrencyLimit(firstEnv), currentConcurrency = await marqs?.currentConcurrencyOfOrg(firstEnv);
      typeof concurrencyLimit == "number" && typeof currentConcurrency == "number" && this.set(concurrencyLimit - currentConcurrency);
    }
  }));
  for (let env6 of allEnvironments)
    env6.type === "DEVELOPMENT" && env6.orgMember?.userId === userId ? await registerEnvironmentMetrics(env6, registry) : env6.type !== "DEVELOPMENT" && await registerEnvironmentMetrics(env6, registry);
}
async function registerEnvironmentMetrics(env6, registry) {
  new import_prom_client6.Gauge({
    name: sanitizeMetricName(`trigger_env_queue_${env6.slug}_concurrency`),
    help: "The number of tasks currently being executed in the dev environment queue",
    registers: [registry],
    async collect() {
      let length = await marqs?.currentConcurrencyOfEnvironment(env6);
      length && this.set(length);
    }
  }), new import_prom_client6.Gauge({
    name: sanitizeMetricName(`trigger_env_queue_${env6.slug}_concurrency_limit`),
    help: "The concurrency limit for the dev environment queue",
    registers: [registry],
    async collect() {
      let length = await marqs?.getEnvConcurrencyLimit(env6);
      length && this.set(length);
    }
  }), new import_prom_client6.Gauge({
    name: sanitizeMetricName(`trigger_env_queue_${env6.slug}_capacity`),
    help: "The capacity of the dev environment queue",
    registers: [registry],
    async collect() {
      let concurrencyLimit = await marqs?.getEnvConcurrencyLimit(env6), currentConcurrency = await marqs?.currentConcurrencyOfEnvironment(env6);
      typeof concurrencyLimit == "number" && typeof currentConcurrency == "number" && this.set(concurrencyLimit - currentConcurrency);
    }
  });
  for (let queue of env6.taskQueues)
    registerTaskQueueMetrics(registry, queue, env6);
}
function registerTaskQueueMetrics(registry, queue, env6) {
  new import_prom_client6.Gauge({
    name: sanitizeMetricName(`trigger_${env6.slug}_task_queue_${queue.name}_length`),
    help: `The number of tasks in the ${queue.name} queue`,
    registers: [registry],
    async collect() {
      let length = await marqs?.lengthOfQueue(env6, queue.name);
      length && this.set(length);
    }
  }), new import_prom_client6.Gauge({
    name: sanitizeMetricName(`trigger_${env6.slug}_task_queue_${queue.name}_concurrency`),
    help: `The number of tasks currently being executed in the ${queue.name} queue`,
    registers: [registry],
    async collect() {
      let length = await marqs?.currentConcurrencyOfQueue(env6, queue.name);
      length && this.set(length);
    }
  }), new import_prom_client6.Gauge({
    name: sanitizeMetricName(`trigger_${env6.slug}_task_queue_${queue.name}_concurrency_limit`),
    help: `The concurrency limit for the ${queue.name} queue`,
    registers: [registry],
    async collect() {
      let length = await marqs?.getQueueConcurrencyLimit(env6, queue.name);
      length && this.set(length);
    }
  }), new import_prom_client6.Gauge({
    name: sanitizeMetricName(`trigger_${env6.slug}_task_queue_${queue.name}_capacity`),
    help: `The capacity of the ${queue.name} queue`,
    registers: [registry],
    async collect() {
      let concurrencyLimit = await marqs?.getQueueConcurrencyLimit(env6, queue.name), currentConcurrency = await marqs?.currentConcurrencyOfQueue(env6, queue.name);
      typeof concurrencyLimit == "number" && typeof currentConcurrency == "number" && this.set(concurrencyLimit - currentConcurrency);
    }
  }), new import_prom_client6.Gauge({
    name: sanitizeMetricName(`trigger_${env6.slug}_task_queue_${queue.name}_oldest_message_age`),
    help: `The age of the oldest message in the ${queue.name} queue`,
    registers: [registry],
    async collect() {
      let oldestMessage = await marqs?.oldestMessageInQueue(env6, queue.name);
      oldestMessage && this.set(oldestMessage);
    }
  });
}
function sanitizeMetricName(name) {
  return name.replace(/[^a-zA-Z0-9_]/g, "_");
}

// app/routes/projects.v3.$projectRef.metrics/route.ts
var ParamsSchema55 = import_zod209.z.object({
  projectRef: import_zod209.z.string()
});
async function loader106({ params, request }) {
  let authenticationResult = await authenticateApiRequestWithPersonalAccessToken(request);
  if (!authenticationResult)
    return (0, import_server_runtime66.json)({ error: "Invalid or Missing Access Token" }, { status: 401 });
  let validatedParams = ParamsSchema55.parse(params), project = await prisma.project.findFirst({
    where: {
      externalRef: validatedParams.projectRef,
      organization: {
        members: {
          some: {
            userId: authenticationResult.userId
          }
        }
      }
    },
    include: {
      organization: !0
    }
  });
  if (!project)
    return new Response("Not found", { status: 404 });
  let registry = new import_prom_client7.Registry();
  return await registerProjectMetrics(registry, project.id, authenticationResult.userId), new Response(await registry.metrics(), {
    headers: {
      "Content-Type": registry.contentType
    }
  });
}

// app/routes/api.v1.runs.$runParam.attempts.ts
var api_v1_runs_runParam_attempts_exports = {};
__export(api_v1_runs_runParam_attempts_exports, {
  action: () => action61
});
var import_server_runtime67 = require("@remix-run/server-runtime"), import_zod210 = require("zod");
var ParamsSchema56 = import_zod210.z.object({
  /* This is the run friendly ID */
  runParam: import_zod210.z.string()
});
async function action61({ request, params }) {
  let authenticationResult = await authenticateApiRequest(request);
  if (!authenticationResult)
    return (0, import_server_runtime67.json)({ error: "Invalid or Missing API Key" }, { status: 401 });
  let parsed = ParamsSchema56.safeParse(params);
  if (!parsed.success)
    return (0, import_server_runtime67.json)({ error: "Invalid or missing run ID" }, { status: 400 });
  let { runParam: runParam2 } = parsed.data, service = new CreateTaskRunAttemptService();
  try {
    let { execution } = await service.call(runParam2, authenticationResult.environment);
    return (0, import_server_runtime67.json)(execution, { status: 200 });
  } catch (error) {
    return error instanceof ServiceValidationError ? (0, import_server_runtime67.json)({ error: error.message }, { status: error.status ?? 422 }) : (0, import_server_runtime67.json)(
      { error: error instanceof Error ? error.message : "Internal Server Error" },
      { status: 500 }
    );
  }
}

// app/routes/resources.taskruns.bulk.cancel.ts
var resources_taskruns_bulk_cancel_exports = {};
__export(resources_taskruns_bulk_cancel_exports, {
  action: () => action62
});
var import_zod211 = require("@conform-to/zod"), import_zod212 = require("zod");

// app/v3/services/bulk/createBulkAction.server.ts
var CreateBulkActionService = class extends BaseService {
  async call({ projectId, action: action106, runIds }) {
    let group = await this._prisma.bulkActionGroup.create({
      data: {
        friendlyId: generateFriendlyId("bulk"),
        projectId,
        type: action106
      }
    }), passedTooManyRuns = runIds.length > BULK_ACTION_RUN_LIMIT;
    runIds = runIds.slice(0, BULK_ACTION_RUN_LIMIT);
    let items = await this._prisma.bulkActionItem.createMany({
      data: runIds.map((runId) => ({
        friendlyId: generateFriendlyId("bulkitem"),
        type: action106,
        groupId: group.id,
        sourceRunId: runId
      }))
    });
    logger.debug("Created bulk action group", {
      groupId: group.id,
      action: action106,
      runIds
    }), await PerformBulkActionService.enqueue(group.id, this._prisma);
    let message = bulkActionVerb(action106);
    return passedTooManyRuns ? message += ` the first ${BULK_ACTION_RUN_LIMIT} runs` : message += ` ${runIds.length} runs`, {
      id: group.id,
      friendlyId: group.friendlyId,
      runCount: runIds.length,
      message
    };
  }
};

// app/routes/resources.taskruns.bulk.cancel.ts
var FormSchema3 = import_zod212.z.object({
  organizationSlug: import_zod212.z.string(),
  projectSlug: import_zod212.z.string(),
  failedRedirect: import_zod212.z.string(),
  runIds: import_zod212.z.array(import_zod212.z.string()).or(import_zod212.z.string())
});
async function action62({ request }) {
  let userId = await requireUserId(request);
  if (request.method.toLowerCase() !== "post")
    return redirectWithErrorMessage("/", request, "Invalid method");
  let formData = await request.formData(), submission = (0, import_zod211.parse)(formData, { schema: FormSchema3 });
  if (!submission.value)
    return logger.error("Failed to parse resources/taskruns/bulk/cancel form data", { submission }), redirectWithErrorMessage("/", request, "Failed to parse form data");
  try {
    let project = await prisma.project.findUnique({
      where: {
        slug: submission.value.projectSlug,
        organization: {
          members: {
            some: {
              userId
            }
          }
        }
      }
    });
    if (!project)
      return redirectWithErrorMessage(
        submission.value.failedRedirect,
        request,
        "Project not found"
      );
    let result = await new CreateBulkActionService().call({
      projectId: project.id,
      action: "CANCEL",
      runIds: typeof submission.value.runIds == "string" ? [submission.value.runIds] : submission.value.runIds
    }), path2 = v3RunsPath(
      { slug: submission.value.organizationSlug },
      { slug: project.slug },
      {
        bulkId: result.friendlyId
      }
    );
    return redirectWithSuccessMessage(path2, request, result.message);
  } catch (error) {
    return error instanceof Error ? (logger.error("Failed to cancel runs", {
      error: {
        name: error.name,
        message: error.message,
        stack: error.stack
      }
    }), redirectWithErrorMessage(submission.value.failedRedirect, request, error.message)) : (logger.error("Failed to cancel runs", { error }), redirectWithErrorMessage(
      submission.value.failedRedirect,
      request,
      JSON.stringify(error)
    ));
  }
}

// app/routes/resources.taskruns.bulk.replay.ts
var resources_taskruns_bulk_replay_exports = {};
__export(resources_taskruns_bulk_replay_exports, {
  action: () => action63
});
var import_zod213 = require("@conform-to/zod"), import_zod214 = require("zod");
var FormSchema4 = import_zod214.z.object({
  organizationSlug: import_zod214.z.string(),
  projectSlug: import_zod214.z.string(),
  failedRedirect: import_zod214.z.string(),
  runIds: import_zod214.z.array(import_zod214.z.string()).or(import_zod214.z.string())
});
async function action63({ request }) {
  let userId = await requireUserId(request);
  if (request.method.toLowerCase() !== "post")
    return redirectWithErrorMessage("/", request, "Invalid method");
  let formData = await request.formData(), submission = (0, import_zod213.parse)(formData, { schema: FormSchema4 });
  if (!submission.value)
    return logger.error("Failed to parse resources/taskruns/bulk/replay form data", { submission }), redirectWithErrorMessage("/", request, "Failed to parse form data");
  try {
    let project = await prisma.project.findUnique({
      where: {
        slug: submission.value.projectSlug,
        organization: {
          members: {
            some: {
              userId
            }
          }
        }
      }
    });
    if (!project)
      return redirectWithErrorMessage(
        submission.value.failedRedirect,
        request,
        "Project not found"
      );
    let result = await new CreateBulkActionService().call({
      projectId: project.id,
      action: "REPLAY",
      runIds: typeof submission.value.runIds == "string" ? [submission.value.runIds] : submission.value.runIds
    }), path2 = v3RunsPath(
      { slug: submission.value.organizationSlug },
      { slug: project.slug },
      {
        bulkId: result.friendlyId
      }
    );
    return redirectWithSuccessMessage(path2, request, result.message);
  } catch (error) {
    return error instanceof Error ? (logger.error("Failed to replay run", {
      error: {
        name: error.name,
        message: error.message,
        stack: error.stack
      }
    }), redirectWithErrorMessage(submission.value.failedRedirect, request, error.message)) : (logger.error("Failed to replay run", { error }), redirectWithErrorMessage(
      submission.value.failedRedirect,
      request,
      JSON.stringify(error)
    ));
  }
}

// app/routes/api.v1.$endpointSlug.auth.$id.ts
var api_v1_endpointSlug_auth_id_exports = {};
__export(api_v1_endpointSlug_auth_id_exports, {
  loader: () => loader107
});
var import_server_runtime68 = require("@remix-run/server-runtime"), import_zod215 = require("zod");
var ParamsSchema57 = import_zod215.z.object({
  endpointSlug: import_zod215.z.string(),
  id: import_zod215.z.string()
});
async function loader107({ request, params }) {
  logger.info("Fetching auth", { url: request.url });
  let parsedParams = ParamsSchema57.safeParse(params);
  if (!parsedParams.success)
    return logger.info("Invalid params", { params }), (0, import_server_runtime68.json)({ error: "Invalid params" }, { status: 400 });
  let authenticationResult = await authenticateApiRequest(request);
  if (!authenticationResult)
    return logger.info("Invalid or missing api key", { url: request.url }), (0, import_server_runtime68.json)({ error: "Invalid or Missing API key" }, { status: 401 });
  let authenticatedEnv = authenticationResult.environment, integration = await prisma.integration.findUnique({
    where: {
      organizationId_slug: {
        organizationId: authenticatedEnv.organizationId,
        slug: parsedParams.data.id
      }
    }
  });
  if (!integration)
    return (0, import_server_runtime68.json)({ error: "Integration not found" }, { status: 404 });
  let connection = await prisma.integrationConnection.findFirst({
    where: {
      integrationId: integration.id,
      connectionType: "DEVELOPER"
    },
    include: {
      dataReference: !0
    }
  });
  if (!connection)
    return (0, import_server_runtime68.json)({ error: "Connection not found" }, { status: 404 });
  let connectionAuth = await resolveApiConnection(connection);
  return connectionAuth ? (0, import_server_runtime68.json)(connectionAuth) : (0, import_server_runtime68.json)({ error: "Access token not found" }, { status: 404 });
}

// app/routes/api.v1.endpointindex.$indexId.ts
var api_v1_endpointindex_indexId_exports = {};
__export(api_v1_endpointindex_indexId_exports, {
  loader: () => loader108
});
var import_server_runtime69 = require("@remix-run/server-runtime"), import_zod216 = require("zod");
var ParamsSchema58 = import_zod216.z.object({
  indexId: import_zod216.z.string()
});
async function loader108({ request, params }) {
  if (request.method.toUpperCase() !== "GET")
    return { status: 405, body: "Method Not Allowed" };
  let parsedParams = ParamsSchema58.safeParse(params);
  if (!parsedParams.success)
    return (0, import_server_runtime69.json)({ error: "Invalid params" }, { status: 400 });
  let authenticationResult = await authenticateApiRequest(request);
  if (!authenticationResult)
    return logger.info("Invalid or missing api key", { url: request.url }), (0, import_server_runtime69.json)({ error: "Invalid or Missing API key" }, { status: 401 });
  let authenticatedEnv = authenticationResult.environment, { indexId } = parsedParams.data, endpointIndex = await prisma.endpointIndex.findUnique({
    where: {
      id: indexId,
      endpoint: {
        environmentId: authenticatedEnv.id
      }
    }
  });
  if (!endpointIndex)
    return logger.info("EndpointIndex not found", { url: request.url }), (0, import_server_runtime69.json)({ error: "EndpointIndex not found" }, { status: 404 });
  let parsed = GetEndpointIndexResponseSchema.safeParse(endpointIndex);
  return parsed.success ? (0, import_server_runtime69.json)(parsed.data) : (logger.info("EndpointIndex failed parsing", { errors: parsed.error.issues, endpointIndex }), (0, import_server_runtime69.json)({
    status: "FAILURE",
    error: {
      message: "Invalid endpoint index"
    },
    updatedAt: /* @__PURE__ */ new Date()
  }, { status: 500 }));
}

// app/routes/api.v1.events.$eventId.cancel.ts
var api_v1_events_eventId_cancel_exports = {};
__export(api_v1_events_eventId_cancel_exports, {
  action: () => action64
});
var import_server_runtime70 = require("@remix-run/server-runtime"), import_zod217 = require("zod");

// app/services/events/cancelEvent.server.ts
var CancelEventService = class {
  #prismaClient;
  constructor(prismaClient = prisma) {
    this.#prismaClient = prismaClient;
  }
  async call(environment, eventId) {
    return await $transaction(this.#prismaClient, async (tx) => {
      let event = await tx.eventRecord.findUnique({
        where: {
          eventId_environmentId: {
            eventId,
            environmentId: environment.id
          }
        }
      });
      if (!event)
        return;
      if (event.cancelledAt)
        return event;
      let updatedEvent = await tx.eventRecord.update({
        where: { id: event.id },
        data: { cancelledAt: /* @__PURE__ */ new Date() }
      });
      return await workerQueue.dequeue(`event:${event.id}`, { tx }), updatedEvent;
    });
  }
};

// app/routes/api.v1.events.$eventId.cancel.ts
var ParamsSchema59 = import_zod217.z.object({
  eventId: import_zod217.z.string()
});
async function action64({ request, params }) {
  if (request.method.toUpperCase() !== "POST")
    return { status: 405, body: "Method Not Allowed" };
  let authenticationResult = await authenticateApiRequest(request);
  if (!authenticationResult)
    return (0, import_server_runtime70.json)({ error: "Invalid or Missing API key" }, { status: 401 });
  let authenticatedEnv = authenticationResult.environment, parsed = ParamsSchema59.safeParse(params);
  if (!parsed.success)
    return (0, import_server_runtime70.json)({ error: "Invalid or Missing eventId" }, { status: 400 });
  let { eventId } = parsed.data, service = new CancelEventService();
  try {
    let updatedEvent = await service.call(authenticatedEnv, eventId);
    return updatedEvent ? (0, import_server_runtime70.json)(eventRecordToApiJson(updatedEvent)) : (0, import_server_runtime70.json)({ error: "Event not found" }, { status: 404 });
  } catch (err) {
    return logger.error("CancelEventService.call() error", {
      error: err
    }), (0, import_server_runtime70.json)({ error: "Internal Server Error" }, { status: 500 });
  }
}

// app/routes/resources.apivote.$identifier.ts
var resources_apivote_identifier_exports = {};
__export(resources_apivote_identifier_exports, {
  action: () => action65
});
var import_server_runtime71 = require("@remix-run/server-runtime"), import_zod218 = require("zod");

// app/services/apiVote.server.ts
var ApiVoteService = class {
  #prismaClient;
  constructor(prismaClient = prisma) {
    this.#prismaClient = prismaClient;
  }
  async call({ userId, identifier }) {
    return this.#prismaClient.apiIntegrationVote.create({
      data: {
        user: {
          connect: {
            id: userId
          }
        },
        apiIdentifier: identifier
      }
    });
  }
};

// app/routes/resources.apivote.$identifier.ts
var ParamsSchema60 = import_zod218.z.object({
  identifier: import_zod218.z.string()
});
async function action65({ request, params }) {
  let userId = await requireUserId(request), { identifier } = ParamsSchema60.parse(params), service = new ApiVoteService();
  try {
    let result = await service.call({ userId, identifier });
    return (0, import_server_runtime71.json)(result);
  } catch (e) {
    return (0, import_server_runtime71.json)(e, { status: 400 });
  }
}

// app/routes/storybook.loading-bar-divider/route.tsx
var route_exports115 = {};
__export(route_exports115, {
  default: () => Story
});
var import_jsx_runtime276 = require("react/jsx-runtime"), isLoading = !0;
function Story() {
  return /* @__PURE__ */ (0, import_jsx_runtime276.jsx)("div", { className: "grid h-full w-full max-w-3xl place-items-center px-20", children: /* @__PURE__ */ (0, import_jsx_runtime276.jsx)(LoadingBarDivider, { isLoading }) });
}

// app/routes/api.internal.stripe_webhooks.ts
var api_internal_stripe_webhooks_exports = {};
__export(api_internal_stripe_webhooks_exports, {
  action: () => action66
});
async function action66({ request }) {
  let body = await request.json(), json118 = await (await fetch("https://jsonhero.io/api/create.json", {
    method: "POST",
    headers: {
      "Content-Type": "application/json"
    },
    body: JSON.stringify({
      title: body.type,
      content: {
        ...body,
        example: { id: body.type, name: body.type, icon: "stripe", payload: body.data.object }
      },
      readOnly: !0
    })
  })).json();
  return console.log({ [body.type]: json118.location }), json118;
}

// app/routes/api.v1.runs.$runParam.replay.ts
var api_v1_runs_runParam_replay_exports = {};
__export(api_v1_runs_runParam_replay_exports, {
  action: () => action67
});
var import_server_runtime72 = require("@remix-run/server-runtime"), import_zod219 = require("zod");
var ParamsSchema61 = import_zod219.z.object({
  /* This is the run friendly ID */
  runParam: import_zod219.z.string()
});
async function action67({ request, params }) {
  if (request.method.toUpperCase() !== "POST")
    return { status: 405, body: "Method Not Allowed" };
  if (!await authenticateApiRequest(request))
    return (0, import_server_runtime72.json)({ error: "Invalid or Missing API Key" }, { status: 401 });
  let parsed = ParamsSchema61.safeParse(params);
  if (!parsed.success)
    return (0, import_server_runtime72.json)({ error: "Invalid or missing run ID" }, { status: 400 });
  let { runParam: runParam2 } = parsed.data;
  try {
    let taskRun = await prisma.taskRun.findUnique({
      where: {
        friendlyId: runParam2
      }
    });
    if (!taskRun)
      return (0, import_server_runtime72.json)({ error: "Run not found" }, { status: 404 });
    let newRun = await new ReplayTaskRunService().call(taskRun);
    return newRun ? (0, import_server_runtime72.json)({
      id: newRun?.friendlyId
    }) : (0, import_server_runtime72.json)({ error: "Failed to create new run" }, { status: 400 });
  } catch (error) {
    return error instanceof Error ? (logger.error("Failed to replay run", {
      error: {
        name: error.name,
        message: error.message,
        stack: error.stack
      },
      run: runParam2
    }), (0, import_server_runtime72.json)({ error: error.message }, { status: 400 })) : (logger.error("Failed to replay run", { error: JSON.stringify(error), run: runParam2 }), (0, import_server_runtime72.json)({ error: JSON.stringify(error) }, { status: 400 }));
  }
}

// app/routes/api.v1.runs.$runParam.result.ts
var api_v1_runs_runParam_result_exports = {};
__export(api_v1_runs_runParam_result_exports, {
  loader: () => loader109
});
var import_server_runtime73 = require("@remix-run/server-runtime"), import_zod220 = require("zod");

// app/presenters/v3/ApiRunResultPresenter.server.ts
var ApiRunResultPresenter = class extends BasePresenter {
  async call(friendlyId, env6) {
    return this.traceWithEnv("call", env6, async (span) => {
      let taskRun = await this._prisma.taskRun.findUnique({
        where: {
          friendlyId,
          runtimeEnvironmentId: env6.id
        },
        include: {
          attempts: {
            orderBy: {
              createdAt: "desc"
            }
          }
        }
      });
      if (taskRun)
        return executionResultForTaskRun(taskRun);
    });
  }
};

// app/routes/api.v1.runs.$runParam.result.ts
var ParamsSchema62 = import_zod220.z.object({
  /* This is the run friendly ID */
  runParam: import_zod220.z.string()
});
async function loader109({ request, params }) {
  let authenticationResult = await authenticateApiRequest(request);
  if (!authenticationResult)
    return (0, import_server_runtime73.json)({ error: "Invalid or Missing API Key" }, { status: 401 });
  let parsed = ParamsSchema62.safeParse(params);
  if (!parsed.success)
    return (0, import_server_runtime73.json)({ error: "Invalid or missing run ID" }, { status: 400 });
  let { runParam: runParam2 } = parsed.data;
  try {
    let result = await new ApiRunResultPresenter().call(runParam2, authenticationResult.environment);
    return result ? (0, import_server_runtime73.json)(result) : (0, import_server_runtime73.json)({ error: "Run either doesn't exist or is not finished" }, { status: 404 });
  } catch (error) {
    return error instanceof Error ? (0, import_server_runtime73.json)({ error: error.message }, { status: 500 }) : (0, import_server_runtime73.json)({ error: JSON.stringify(error) }, { status: 500 });
  }
}

// app/routes/api.v1.schedules.$scheduleId.ts
var api_v1_schedules_scheduleId_exports = {};
__export(api_v1_schedules_scheduleId_exports, {
  action: () => action68,
  loader: () => loader110
});
var import_server_runtime74 = require("@remix-run/server-runtime");
var import_zod221 = require("zod");
var ParamsSchema63 = import_zod221.z.object({
  scheduleId: import_zod221.z.string()
});
async function action68({ request, params }) {
  let authenticationResult = await authenticateApiRequest(request);
  if (!authenticationResult)
    return (0, import_server_runtime74.json)({ error: "Invalid or Missing API Key" }, { status: 401 });
  let parsedParams = ParamsSchema63.safeParse(params);
  if (!parsedParams.success)
    return (0, import_server_runtime74.json)(
      { error: "Invalid request parameters", issues: parsedParams.error.issues },
      { status: 400 }
    );
  switch (request.method.toUpperCase()) {
    case "DELETE":
      try {
        let deletedSchedule = await prisma.taskSchedule.delete({
          where: {
            friendlyId: parsedParams.data.scheduleId,
            projectId: authenticationResult.environment.projectId
          }
        });
        return (0, import_server_runtime74.json)(
          {
            id: deletedSchedule.friendlyId
          },
          { status: 200 }
        );
      } catch (error) {
        return error instanceof src_exports.Prisma.PrismaClientKnownRequestError ? (0, import_server_runtime74.json)(
          { error: error.code === "P2025" ? "Schedule not found" : error.message },
          { status: error.code === "P2025" ? 404 : 422 }
        ) : (0, import_server_runtime74.json)(
          { error: error instanceof Error ? error.message : "Internal Server Error" },
          { status: 500 }
        );
      }
    case "PUT": {
      let rawBody = await request.json(), body = UpdateScheduleOptions.safeParse(rawBody);
      if (!body.success)
        return (0, import_server_runtime74.json)({ error: "Invalid request body", issues: body.error.issues }, { status: 400 });
      let service = new UpsertTaskScheduleService();
      try {
        let options2 = {
          friendlyId: parsedParams.data.scheduleId,
          taskIdentifier: body.data.task,
          cron: body.data.cron,
          timezone: body.data.timezone,
          environments: [authenticationResult.environment.id],
          externalId: body.data.externalId
        }, schedule = await service.call(authenticationResult.environment.projectId, options2), responseObject = {
          id: schedule.id,
          task: schedule.task,
          active: schedule.active,
          generator: {
            type: "CRON",
            expression: schedule.cron,
            description: schedule.cronDescription
          },
          timezone: schedule.timezone,
          externalId: schedule.externalId ?? void 0,
          deduplicationKey: schedule.deduplicationKey,
          environments: schedule.environments,
          nextRun: schedule.nextRun
        };
        return (0, import_server_runtime74.json)(responseObject, { status: 200 });
      } catch (error) {
        return error instanceof ServiceValidationError ? (0, import_server_runtime74.json)({ error: error.message }, { status: 422 }) : (0, import_server_runtime74.json)(
          { error: error instanceof Error ? error.message : "Internal Server Error" },
          { status: 500 }
        );
      }
    }
  }
}
async function loader110({ request, params }) {
  let authenticationResult = await authenticateApiRequest(request);
  if (!authenticationResult)
    return (0, import_server_runtime74.json)({ error: "Invalid or Missing API Key" }, { status: 401 });
  let parsedParams = ParamsSchema63.safeParse(params);
  if (!parsedParams.success)
    return (0, import_server_runtime74.json)(
      { error: "Invalid request parameters", issues: parsedParams.error.issues },
      { status: 400 }
    );
  let presenter = new ViewSchedulePresenter(), result = await presenter.call({
    projectId: authenticationResult.environment.projectId,
    friendlyId: parsedParams.data.scheduleId
  });
  return result ? (0, import_server_runtime74.json)(presenter.toJSONResponse(result), { status: 200 }) : (0, import_server_runtime74.json)({ error: "Schedule not found" }, { status: 404 });
}

// app/routes/api.v1.tasks.$taskId.trigger.ts
var api_v1_tasks_taskId_trigger_exports = {};
__export(api_v1_tasks_taskId_trigger_exports, {
  HeadersSchema: () => HeadersSchema3,
  action: () => action69
});
var import_server_runtime75 = require("@remix-run/server-runtime");
var import_zod222 = require("zod");
var ParamsSchema64 = import_zod222.z.object({
  taskId: import_zod222.z.string()
}), HeadersSchema3 = import_zod222.z.object({
  "idempotency-key": import_zod222.z.string().nullish(),
  "trigger-version": import_zod222.z.string().nullish(),
  "x-trigger-span-parent-as-link": import_zod222.z.coerce.number().nullish(),
  "x-trigger-worker": import_zod222.z.string().nullish(),
  traceparent: import_zod222.z.string().optional(),
  tracestate: import_zod222.z.string().optional()
});
async function action69({ request, params }) {
  if (request.method.toUpperCase() !== "POST")
    return { status: 405, body: "Method Not Allowed" };
  let authenticationResult = await authenticateApiRequest(request);
  if (!authenticationResult)
    return (0, import_server_runtime75.json)({ error: "Invalid or Missing API key" }, { status: 401 });
  let contentLength = request.headers.get("content-length");
  if (!contentLength || parseInt(contentLength) > env2.TASK_PAYLOAD_MAXIMUM_SIZE)
    return (0, import_server_runtime75.json)({ error: "Request body too large" }, { status: 413 });
  let rawHeaders = Object.fromEntries(request.headers), headers = HeadersSchema3.safeParse(rawHeaders);
  if (!headers.success)
    return (0, import_server_runtime75.json)({ error: "Invalid headers" }, { status: 400 });
  let {
    "idempotency-key": idempotencyKey,
    "trigger-version": triggerVersion,
    "x-trigger-span-parent-as-link": spanParentAsLink,
    traceparent,
    tracestate,
    "x-trigger-worker": isFromWorker
  } = headers.data, { taskId } = ParamsSchema64.parse(params), anyBody = await parseRequestJsonAsync(request, { taskId }), body = await startActiveSpan("TriggerTaskRequestBody.safeParse()", async (span) => TriggerTaskRequestBody.safeParse(anyBody));
  if (!body.success)
    return (0, import_server_runtime75.json)({ error: "Invalid request body" }, { status: 400 });
  let service = new TriggerTaskService();
  try {
    let traceContext = traceparent ? triggerVersion ? isFromWorker ? { traceparent, tracestate } : void 0 : { traceparent, tracestate } : void 0;
    logger.debug("Triggering task", {
      taskId,
      idempotencyKey,
      triggerVersion,
      headers: Object.fromEntries(request.headers),
      options: body.data.options,
      isFromWorker,
      traceContext
    });
    let run = await service.call(taskId, authenticationResult.environment, body.data, {
      idempotencyKey: idempotencyKey ?? void 0,
      triggerVersion: triggerVersion ?? void 0,
      traceContext,
      spanParentAsLink: spanParentAsLink === 1
    });
    return run ? (0, import_server_runtime75.json)({
      id: run.friendlyId
    }) : (0, import_server_runtime75.json)({ error: "Task not found" }, { status: 404 });
  } catch (error) {
    return error instanceof ServiceValidationError ? (0, import_server_runtime75.json)({ error: error.message }, { status: 422 }) : error instanceof OutOfEntitlementError ? (0, import_server_runtime75.json)({ error: error.message }, { status: 422 }) : error instanceof Error ? (0, import_server_runtime75.json)({ error: error.message }, { status: 400 }) : (0, import_server_runtime75.json)({ error: "Something went wrong" }, { status: 500 });
  }
}

// app/routes/api.v2.runs.$runParam.cancel.ts
var api_v2_runs_runParam_cancel_exports = {};
__export(api_v2_runs_runParam_cancel_exports, {
  action: () => action70
});
var import_server_runtime76 = require("@remix-run/server-runtime"), import_zod223 = require("zod");
var ParamsSchema65 = import_zod223.z.object({
  runParam: import_zod223.z.string()
});
async function action70({ request, params }) {
  if (request.method.toUpperCase() !== "POST")
    return { status: 405, body: "Method Not Allowed" };
  let authenticationResult = await authenticateApiRequest(request);
  if (!authenticationResult)
    return (0, import_server_runtime76.json)({ error: "Invalid or Missing API Key" }, { status: 401 });
  let parsed = ParamsSchema65.safeParse(params);
  if (!parsed.success)
    return (0, import_server_runtime76.json)({ error: "Invalid or Missing run id" }, { status: 400 });
  let { runParam: runParam2 } = parsed.data, taskRun = await prisma.taskRun.findUnique({
    where: {
      friendlyId: runParam2,
      runtimeEnvironmentId: authenticationResult.environment.id
    }
  });
  if (!taskRun)
    return (0, import_server_runtime76.json)({ error: "Run not found" }, { status: 404 });
  let service = new CancelTaskRunService();
  try {
    await service.call(taskRun);
  } catch {
    return (0, import_server_runtime76.json)({ error: "Internal Server Error" }, { status: 500 });
  }
  return (0, import_server_runtime76.json)({ id: runParam2 }, { status: 200 });
}

// app/routes/projects.v3.$projectRef.runs.ts
var projects_v3_projectRef_runs_exports = {};
__export(projects_v3_projectRef_runs_exports, {
  loader: () => loader111
});
var import_server_runtime77 = require("@remix-run/server-runtime"), import_zod224 = require("zod");
var ParamsSchema66 = import_zod224.z.object({
  projectRef: import_zod224.z.string()
});
async function loader111({ params, request }) {
  let userId = await requireUserId(request), { projectRef } = ParamsSchema66.parse(params), project = await prisma.project.findFirst({
    where: {
      externalRef: projectRef,
      organization: {
        members: {
          some: {
            userId
          }
        }
      }
    },
    include: {
      organization: !0
    }
  });
  if (!project)
    return new Response("Project not found", { status: 404 });
  let url = new URL(request.url), envSlug2 = url.searchParams.get("envSlug");
  if (envSlug2 && isEnvSlug(envSlug2)) {
    let env6 = await getEnvFromSlug(project.id, userId, envSlug2);
    env6 && url.searchParams.set("environments", env6.id), url.searchParams.delete("envSlug");
  }
  return (0, import_server_runtime77.redirect)(
    `/orgs/${project.organization.slug}/projects/v3/${project.slug}/runs${url.search}`
  );
}
async function getEnvFromSlug(projectId, userId, envSlug2) {
  return envSlug2 === "dev" ? await prisma.runtimeEnvironment.findFirst({
    where: {
      projectId,
      slug: envSlug2,
      orgMember: {
        userId
      }
    }
  }) : await prisma.runtimeEnvironment.findFirst({
    where: {
      projectId,
      slug: envSlug2
    }
  });
}

// app/routes/projects.v3.$projectRef.test.ts
var projects_v3_projectRef_test_exports = {};
__export(projects_v3_projectRef_test_exports, {
  loader: () => loader112
});
var import_server_runtime78 = require("@remix-run/server-runtime"), import_zod225 = require("zod");
var ParamsSchema67 = import_zod225.z.object({
  projectRef: import_zod225.z.string()
});
async function loader112({ params, request }) {
  let userId = await requireUserId(request), validatedParams = ParamsSchema67.parse(params), project = await prisma.project.findFirst({
    where: {
      externalRef: validatedParams.projectRef,
      organization: {
        members: {
          some: {
            userId
          }
        }
      }
    },
    include: {
      organization: !0
    }
  });
  if (!project)
    return new Response("Not found", { status: 404 });
  let url = new URL(request.url);
  return (0, import_server_runtime78.redirect)(
    `/orgs/${project.organization.slug}/projects/v3/${project.slug}/test${url.search}`
  );
}

// app/routes/api.v1.jobs.$jobSlug.invoke.ts
var api_v1_jobs_jobSlug_invoke_exports = {};
__export(api_v1_jobs_jobSlug_invoke_exports, {
  action: () => action71
});
var import_server_runtime79 = require("@remix-run/server-runtime");
var import_zod226 = require("zod");

// app/services/jobs/invokeJob.server.ts
var InvokeJobService = class {
  #prismaClient;
  constructor(prismaClient = prisma) {
    this.#prismaClient = prismaClient;
  }
  async call(environment, jobSlug, data2, idempotencyKey) {
    return await $transaction(this.#prismaClient, async (tx) => {
      if (idempotencyKey) {
        let existingEvent = await tx.eventRecord.findUnique({
          where: {
            eventId_environmentId: {
              eventId: idempotencyKey,
              environmentId: environment.id
            }
          },
          include: {
            runs: !0
          }
        });
        if (existingEvent)
          return existingEvent.runs[0];
      }
      let job = await tx.job.findUniqueOrThrow({
        where: {
          projectId_slug: {
            projectId: environment.projectId,
            slug: jobSlug
          }
        },
        include: {
          aliases: {
            where: {
              environmentId: environment.id,
              name: "latest"
            },
            include: {
              version: !0
            },
            take: 1
          }
        }
      }), alias = job.aliases[0];
      if (!alias)
        throw new Error(`No version found for job ${jobSlug} in environment ${environment.slug}`);
      let version3 = alias.version;
      if (!version3)
        throw new Error(`No version found for job ${jobSlug} in environment ${environment.slug}`);
      let options2 = data2.options ?? {}, externalAccount = options2.accountId ? await tx.externalAccount.upsert({
        where: {
          environmentId_identifier: {
            environmentId: environment.id,
            identifier: options2.accountId
          }
        },
        create: {
          environmentId: environment.id,
          organizationId: environment.organizationId,
          identifier: options2.accountId
        },
        update: {}
      }) : void 0, eventLog = await tx.eventRecord.create({
        data: {
          organization: {
            connect: {
              id: environment.organizationId
            }
          },
          project: {
            connect: {
              id: environment.projectId
            }
          },
          environment: {
            connect: {
              id: environment.id
            }
          },
          externalAccount: externalAccount ? {
            connect: {
              id: externalAccount.id
            }
          } : void 0,
          eventId: idempotencyKey ?? ulid2(),
          name: "invoke",
          timestamp: /* @__PURE__ */ new Date(),
          payload: data2.payload ?? {},
          context: data2.context ?? {},
          source: "trigger.dev",
          internal: !0
        }
      });
      return await new CreateRunService(tx).call(
        {
          environment,
          eventId: eventLog.id,
          job,
          version: version3
        },
        {
          callbackUrl: options2.callbackUrl
        }
      );
    });
  }
};

// app/routes/api.v1.jobs.$jobSlug.invoke.ts
var ParamsSchema68 = import_zod226.z.object({
  jobSlug: import_zod226.z.string()
}), HeadersSchema4 = import_zod226.z.object({
  "idempotency-key": import_zod226.z.string().optional().nullable(),
  "trigger-version": import_zod226.z.string().optional().nullable()
});
async function action71({ request, params }) {
  if (request.method.toUpperCase() !== "POST")
    return { status: 405, body: "Method Not Allowed" };
  let authenticationResult = await authenticateApiRequest(request);
  if (!authenticationResult)
    return (0, import_server_runtime79.json)({ error: "Invalid or Missing API Key" }, { status: 401 });
  let parsed = ParamsSchema68.safeParse(params);
  if (!parsed.success)
    return (0, import_server_runtime79.json)({ error: "Invalid or Missing jobSlug" }, { status: 400 });
  let { jobSlug } = parsed.data, headers = HeadersSchema4.safeParse(Object.fromEntries(request.headers));
  if (!headers.success)
    return (0, import_server_runtime79.json)({ error: "Invalid headers" }, { status: 400 });
  let { "idempotency-key": idempotencyKey, "trigger-version": triggerVersion } = headers.data, anyBody = await request.json();
  logger.debug("InvokeJobService.call() request body", {
    body: anyBody,
    jobSlug,
    idempotencyKey,
    triggerVersion
  });
  let body = InvokeJobRequestBodySchema.safeParse(anyBody);
  if (!body.success)
    return (0, import_server_runtime79.json)({ error: "Invalid request body" }, { status: 400 });
  let service = new InvokeJobService();
  try {
    let run = await service.call(
      authenticationResult.environment,
      jobSlug,
      body.data,
      idempotencyKey ?? void 0
    );
    return run ? (0, import_server_runtime79.json)({ id: run.id }) : (0, import_server_runtime79.json)({ error: "Job could not be invoked" }, { status: 500 });
  } catch (error) {
    let prismaError = PrismaErrorSchema.safeParse(error);
    return prismaError.success && prismaError.data.code === "P2005" ? (0, import_server_runtime79.json)({ error: "Job not found" }, { status: 404 }) : (0, import_server_runtime79.json)({ error: "Internal Server Error" }, { status: 500 });
  }
}

// app/routes/api.v1.projects.$projectRef.ts
var api_v1_projects_projectRef_exports = {};
__export(api_v1_projects_projectRef_exports, {
  loader: () => loader113
});
var import_server_runtime80 = require("@remix-run/server-runtime"), import_zod227 = require("zod");
var ParamsSchema69 = import_zod227.z.object({
  projectRef: import_zod227.z.string()
});
async function loader113({ request, params }) {
  logger.info("get project", { url: request.url });
  let authenticationResult = await authenticateApiRequestWithPersonalAccessToken(request);
  if (!authenticationResult)
    return (0, import_server_runtime80.json)({ error: "Invalid or Missing Access Token" }, { status: 401 });
  let parsedParams = ParamsSchema69.safeParse(params);
  if (!parsedParams.success)
    return (0, import_server_runtime80.json)({ error: "Invalid Params" }, { status: 400 });
  let { projectRef } = parsedParams.data, project = await prisma.project.findUnique({
    where: {
      externalRef: projectRef,
      organization: {
        deletedAt: null,
        members: {
          some: {
            userId: authenticationResult.userId
          }
        }
      },
      deletedAt: null
    },
    include: {
      organization: !0
    }
  });
  if (!project)
    return (0, import_server_runtime80.json)({ error: "Project not found" }, { status: 404 });
  if (project.version !== "V3")
    return (0, import_server_runtime80.json)({ error: "Project found but was not a v3 project" }, { status: 404 });
  let result = {
    id: project.id,
    externalRef: project.externalRef,
    name: project.name,
    slug: project.slug,
    createdAt: project.createdAt,
    organization: {
      id: project.organization.id,
      title: project.organization.title,
      slug: project.organization.slug,
      createdAt: project.organization.createdAt
    }
  };
  return (0, import_server_runtime80.json)(result);
}

// app/routes/api.v1.runs.$runId.statuses.ts
var api_v1_runs_runId_statuses_exports = {};
__export(api_v1_runs_runId_statuses_exports, {
  loader: () => loader114
});
var import_server_runtime81 = require("@remix-run/server-runtime");
var import_zod228 = require("zod");
var ParamsSchema70 = import_zod228.z.object({
  runId: import_zod228.z.string()
}), RecordsSchema = import_zod228.z.array(JobRunStatusRecordSchema);
async function loader114({ request, params }) {
  if (request.method.toUpperCase() === "OPTIONS")
    return apiCors(request, (0, import_server_runtime81.json)({}));
  if (!await authenticateApiRequest(request, { allowPublicKey: !0 }))
    return apiCors(request, (0, import_server_runtime81.json)({ error: "Invalid or Missing API key" }, { status: 401 }));
  let { runId } = ParamsSchema70.parse(params);
  logger.debug("Get run statuses", {
    runId
  });
  try {
    let run = await prisma.jobRun.findUnique({
      where: {
        id: runId
      },
      select: {
        id: !0,
        status: !0,
        output: !0,
        statuses: {
          orderBy: {
            createdAt: "asc"
          }
        }
      }
    });
    if (!run)
      return apiCors(request, (0, import_server_runtime81.json)({ error: `No run found for id ${runId}` }, { status: 404 }));
    let parsedStatuses = RecordsSchema.parse(
      run.statuses.map((s) => ({
        ...s,
        state: s.state ?? void 0,
        data: s.data ?? void 0,
        history: s.history ?? void 0
      }))
    );
    return apiCors(
      request,
      (0, import_server_runtime81.json)({
        run: {
          id: run.id,
          status: runOriginalStatus(run.status),
          output: run.output
        },
        statuses: parsedStatuses
      })
    );
  } catch (error) {
    return error instanceof Error ? apiCors(request, (0, import_server_runtime81.json)({ error: error.message }, { status: 400 })) : apiCors(request, (0, import_server_runtime81.json)({ error: "Something went wrong" }, { status: 500 }));
  }
}

// app/routes/api.v2.runs.$runId.statuses.ts
var api_v2_runs_runId_statuses_exports = {};
__export(api_v2_runs_runId_statuses_exports, {
  loader: () => loader115
});
var import_server_runtime82 = require("@remix-run/server-runtime");
var import_zod229 = require("zod");
var ParamsSchema71 = import_zod229.z.object({
  runId: import_zod229.z.string()
}), RecordsSchema2 = import_zod229.z.array(JobRunStatusRecordSchema);
async function loader115({ request, params }) {
  if (request.method.toUpperCase() === "OPTIONS")
    return apiCors(request, (0, import_server_runtime82.json)({}));
  if (!await authenticateApiRequest(request, { allowPublicKey: !0 }))
    return apiCors(request, (0, import_server_runtime82.json)({ error: "Invalid or Missing API key" }, { status: 401 }));
  let { runId } = ParamsSchema71.parse(params);
  logger.debug("Get run statuses", {
    runId
  });
  try {
    let run = await prisma.jobRun.findUnique({
      where: {
        id: runId
      },
      select: {
        id: !0,
        status: !0,
        output: !0,
        statuses: {
          orderBy: {
            createdAt: "asc"
          }
        }
      }
    });
    if (!run)
      return apiCors(request, (0, import_server_runtime82.json)({ error: `No run found for id ${runId}` }, { status: 404 }));
    let parsedStatuses = RecordsSchema2.parse(
      run.statuses.map((s) => ({
        ...s,
        state: s.state ?? void 0,
        data: s.data ?? void 0,
        history: s.history ?? void 0
      }))
    );
    return apiCors(
      request,
      (0, import_server_runtime82.json)({
        run: {
          id: run.id,
          status: run.status,
          output: run.output
        },
        statuses: parsedStatuses
      })
    );
  } catch (error) {
    return error instanceof Error ? apiCors(request, (0, import_server_runtime82.json)({ error: error.message }, { status: 400 })) : apiCors(request, (0, import_server_runtime82.json)({ error: "Something went wrong" }, { status: 500 }));
  }
}

// app/routes/storybook.environment-label/route.tsx
var route_exports116 = {};
__export(route_exports116, {
  default: () => Story2
});
var import_jsx_runtime277 = require("react/jsx-runtime");
function Story2() {
  return /* @__PURE__ */ (0, import_jsx_runtime277.jsxs)("div", { className: "space-y-8 divide-y p-8", children: [
    /* @__PURE__ */ (0, import_jsx_runtime277.jsxs)("div", { className: "flex flex-col items-start gap-y-8", children: [
      /* @__PURE__ */ (0, import_jsx_runtime277.jsx)(Header2, { children: "Small (default)" }),
      /* @__PURE__ */ (0, import_jsx_runtime277.jsx)(EnvironmentLabel, { environment: { type: "PRODUCTION" } }),
      /* @__PURE__ */ (0, import_jsx_runtime277.jsx)(EnvironmentLabel, { environment: { type: "STAGING" } }),
      /* @__PURE__ */ (0, import_jsx_runtime277.jsx)(EnvironmentLabel, { environment: { type: "DEVELOPMENT" } }),
      /* @__PURE__ */ (0, import_jsx_runtime277.jsx)(EnvironmentLabel, { environment: { type: "PREVIEW" } })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime277.jsxs)("div", { className: "flex flex-col items-start gap-y-8 pt-8", children: [
      /* @__PURE__ */ (0, import_jsx_runtime277.jsx)(Header2, { children: "Large" }),
      /* @__PURE__ */ (0, import_jsx_runtime277.jsx)(EnvironmentLabel, { environment: { type: "PRODUCTION" }, size: "large" }),
      /* @__PURE__ */ (0, import_jsx_runtime277.jsx)(EnvironmentLabel, { environment: { type: "STAGING" }, size: "large" }),
      /* @__PURE__ */ (0, import_jsx_runtime277.jsx)(EnvironmentLabel, { environment: { type: "DEVELOPMENT" }, size: "large" }),
      /* @__PURE__ */ (0, import_jsx_runtime277.jsx)(EnvironmentLabel, { environment: { type: "PREVIEW" }, size: "large" })
    ] })
  ] });
}

// app/routes/storybook.segmented-control/route.tsx
var route_exports117 = {};
__export(route_exports117, {
  default: () => Story3
});
var import_jsx_runtime278 = require("react/jsx-runtime"), options = [
  { label: "Label 1", value: "developer" },
  { label: "Label 2", value: "Users" }
];
function Story3() {
  return /* @__PURE__ */ (0, import_jsx_runtime278.jsxs)(MainCenteredContainer, { className: "flex flex-col gap-8", children: [
    /* @__PURE__ */ (0, import_jsx_runtime278.jsxs)("div", { className: "flex flex-col gap-2", children: [
      /* @__PURE__ */ (0, import_jsx_runtime278.jsx)(Paragraph, { children: "Primary" }),
      /* @__PURE__ */ (0, import_jsx_runtime278.jsx)(SegmentedControl, { name: "name", options, variant: "primary" })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime278.jsxs)("div", { className: "flex flex-col gap-2", children: [
      /* @__PURE__ */ (0, import_jsx_runtime278.jsx)(Paragraph, { children: "Secondary" }),
      /* @__PURE__ */ (0, import_jsx_runtime278.jsx)(SegmentedControl, { name: "name", options, variant: "secondary" })
    ] })
  ] });
}

// app/routes/api.v1.tasks.$taskId.batch.ts
var api_v1_tasks_taskId_batch_exports = {};
__export(api_v1_tasks_taskId_batch_exports, {
  action: () => action72
});
var import_server_runtime83 = require("@remix-run/server-runtime");
var import_zod230 = require("zod");

// app/v3/services/batchTriggerTask.server.ts
var BatchTriggerTaskService = class extends BaseService {
  async call(taskId, environment, body, options2 = {}) {
    return await this.traceWithEnv("call()", environment, async (span) => {
      span.setAttribute("taskId", taskId);
      let existingBatch = options2.idempotencyKey ? await this._prisma.batchTaskRun.findUnique({
        where: {
          runtimeEnvironmentId_taskIdentifier_idempotencyKey: {
            runtimeEnvironmentId: environment.id,
            idempotencyKey: options2.idempotencyKey,
            taskIdentifier: taskId
          }
        },
        include: {
          items: {
            include: {
              taskRun: {
                select: {
                  friendlyId: !0
                }
              }
            }
          }
        }
      }) : void 0;
      if (existingBatch)
        return span.setAttribute("batchId", existingBatch.friendlyId), {
          batch: existingBatch,
          runs: existingBatch.items.map((item) => item.taskRun.friendlyId)
        };
      let dependentAttempt = body?.dependentAttempt ? await this._prisma.taskRunAttempt.findUnique({
        where: { friendlyId: body.dependentAttempt },
        include: {
          taskRun: {
            select: {
              id: !0,
              status: !0
            }
          }
        }
      }) : void 0;
      if (dependentAttempt && (isFinalAttemptStatus(dependentAttempt.status) || isFinalRunStatus(dependentAttempt.taskRun.status)))
        throw logger2.debug("Dependent attempt or run is in a terminal state", {
          dependentAttempt
        }), isFinalAttemptStatus(dependentAttempt.status) ? new ServiceValidationError(
          `Cannot batch trigger ${taskId} as the parent attempt has a status of ${dependentAttempt.status}`
        ) : new ServiceValidationError(
          `Cannot batch trigger ${taskId} as the parent run has a status of ${dependentAttempt.taskRun.status}`
        );
      let batch = await this._prisma.batchTaskRun.create({
        data: {
          friendlyId: generateFriendlyId("batch"),
          runtimeEnvironmentId: environment.id,
          idempotencyKey: options2.idempotencyKey,
          taskIdentifier: taskId,
          dependentTaskAttemptId: dependentAttempt?.id
        }
      }), triggerTaskService = new TriggerTaskService(), runs = [], index = 0;
      for (let item of body.items)
        try {
          let run = await triggerTaskService.call(
            taskId,
            environment,
            {
              ...item,
              options: {
                ...item.options,
                dependentBatch: dependentAttempt?.id ? batch.friendlyId : void 0
                // Only set dependentBatch if dependentAttempt is set which means batchTriggerAndWait was called
              }
            },
            {
              triggerVersion: options2.triggerVersion,
              traceContext: options2.traceContext,
              spanParentAsLink: options2.spanParentAsLink,
              batchId: batch.friendlyId
            }
          );
          run && (await this._prisma.batchTaskRunItem.create({
            data: {
              batchTaskRunId: batch.id,
              taskRunId: run.id,
              status: batchTaskRunItemStatusForRunStatus(run.status)
            }
          }), runs.push(run.friendlyId)), index++;
        } catch (error) {
          logger2.error("[BatchTriggerTaskService] Error triggering task", {
            taskId,
            error
          });
        }
      return span.setAttribute("batchId", batch.friendlyId), { batch, runs };
    });
  }
};

// app/routes/api.v1.tasks.$taskId.batch.ts
var ParamsSchema72 = import_zod230.z.object({
  taskId: import_zod230.z.string()
});
async function action72({ request, params }) {
  if (request.method.toUpperCase() !== "POST")
    return { status: 405, body: "Method Not Allowed" };
  let authenticationResult = await authenticateApiRequest(request);
  if (!authenticationResult)
    return (0, import_server_runtime83.json)({ error: "Invalid or Missing API key" }, { status: 401 });
  let rawHeaders = Object.fromEntries(request.headers), headers = HeadersSchema3.safeParse(rawHeaders);
  if (!headers.success)
    return (0, import_server_runtime83.json)({ error: "Invalid headers" }, { status: 400 });
  let {
    "idempotency-key": idempotencyKey,
    "trigger-version": triggerVersion,
    "x-trigger-span-parent-as-link": spanParentAsLink,
    traceparent,
    tracestate
  } = headers.data, { taskId } = ParamsSchema72.parse(params), contentLength = request.headers.get("content-length");
  if (!contentLength || parseInt(contentLength) > env2.TASK_PAYLOAD_MAXIMUM_SIZE)
    return (0, import_server_runtime83.json)({ error: "Request body too large" }, { status: 413 });
  let anyBody = await request.json(), body = BatchTriggerTaskRequestBody.safeParse(anyBody);
  if (!body.success)
    return (0, import_server_runtime83.json)({ error: "Invalid request body" }, { status: 400 });
  if (logger.debug("Triggering batch", {
    taskId,
    idempotencyKey,
    triggerVersion,
    body: body.data
  }), !body.data.items.length)
    return (0, import_server_runtime83.json)({ error: "No items to trigger" }, { status: 400 });
  if (body.data.items.length > MAX_BATCH_TRIGGER_ITEMS)
    return (0, import_server_runtime83.json)(
      {
        error: `Too many items. Maximum allowed batch size is ${MAX_BATCH_TRIGGER_ITEMS}.`
      },
      { status: 400 }
    );
  let service = new BatchTriggerTaskService();
  try {
    let result = await service.call(taskId, authenticationResult.environment, body.data, {
      idempotencyKey: idempotencyKey ?? void 0,
      triggerVersion: triggerVersion ?? void 0,
      traceContext: traceparent ? { traceparent, tracestate } : void 0,
      spanParentAsLink: spanParentAsLink === 1
    });
    return result ? (0, import_server_runtime83.json)({
      batchId: result.batch.friendlyId,
      runs: result.runs
    }) : (0, import_server_runtime83.json)({ error: "Task not found" }, { status: 404 });
  } catch (error) {
    return error instanceof Error ? (0, import_server_runtime83.json)({ error: error.message }, { status: 400 }) : (0, import_server_runtime83.json)({ error: "Something went wrong" }, { status: 500 });
  }
}

// app/routes/unsubscribe.$userId.$token.tsx
var unsubscribe_userId_token_exports = {};
__export(unsubscribe_userId_token_exports, {
  ParamsSchema: () => ParamsSchema73,
  default: () => Page69,
  loader: () => loader116
});
var import_zod231 = require("zod");
var import_node_crypto11 = __toESM(require("node:crypto")), import_remix_typedjson83 = require("remix-typedjson");
var import_jsx_runtime279 = require("react/jsx-runtime"), ParamsSchema73 = import_zod231.z.object({
  userId: import_zod231.z.string(),
  token: import_zod231.z.string()
}), loader116 = async ({ request, params }) => {
  let { userId, token } = ParamsSchema73.parse(params);
  try {
    let user = await prisma.user.findUnique({
      where: { id: userId }
    });
    return user ? import_node_crypto11.default.createHash("sha256").update(`${userId}-${env2.MAGIC_LINK_SECRET}`).digest("hex") !== token ? (0, import_remix_typedjson83.typedjson)({
      success: !1,
      message: "This unsubscribe link was invalid so we can't unsubscribe you."
    }) : (await prisma.user.update({
      where: { id: userId },
      data: { marketingEmails: !1 }
    }), (0, import_remix_typedjson83.typedjson)({ success: !0, email: user.email })) : (0, import_remix_typedjson83.typedjson)({
      success: !1,
      message: "User not found"
    });
  } catch (e) {
    let errorMessage = e instanceof Error ? e.message : JSON.stringify(e);
    return (0, import_remix_typedjson83.typedjson)({ success: !1, message: errorMessage });
  }
};
function Page69() {
  let result = (0, import_remix_typedjson83.useTypedLoaderData)();
  return /* @__PURE__ */ (0, import_jsx_runtime279.jsx)(AppContainer, { children: /* @__PURE__ */ (0, import_jsx_runtime279.jsx)(MainCenteredContainer, { className: "max-w-[22rem]", children: result.success ? /* @__PURE__ */ (0, import_jsx_runtime279.jsxs)("div", { children: [
    /* @__PURE__ */ (0, import_jsx_runtime279.jsx)(FormTitle, { LeadingIcon: "envelope", title: "Unsubscribed" }),
    /* @__PURE__ */ (0, import_jsx_runtime279.jsxs)(Paragraph, { spacing: !0, children: [
      "You have unsubscribed from onboarding emails, ",
      result.email,
      "."
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime279.jsx)(LinkButton, { variant: "primary/medium", to: rootPath(), children: "Dashboard" })
  ] }) : /* @__PURE__ */ (0, import_jsx_runtime279.jsxs)("div", { children: [
    /* @__PURE__ */ (0, import_jsx_runtime279.jsx)(FormTitle, { LeadingIcon: "envelope", title: "Unsubscribe failed" }),
    /* @__PURE__ */ (0, import_jsx_runtime279.jsx)(Paragraph, { spacing: !0, children: result.message }),
    /* @__PURE__ */ (0, import_jsx_runtime279.jsxs)(Paragraph, { spacing: !0, children: [
      "If you believe this is a bug, please",
      " ",
      /* @__PURE__ */ (0, import_jsx_runtime279.jsx)(TextLink, { href: "https://trigger.dev/contact", children: "contact support" }),
      "."
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime279.jsx)(LinkButton, { variant: "primary/medium", to: rootPath(), children: "Dashboard" })
  ] }) }) });
}

// app/routes/api.v1.authorization-code.ts
var api_v1_authorization_code_exports = {};
__export(api_v1_authorization_code_exports, {
  action: () => action73
});
var import_server_runtime84 = require("@remix-run/server-runtime");
async function action73({ request }) {
  if (logger.info("Creating AuthorizationCode", { url: request.url }), request.method.toUpperCase() !== "POST")
    return { status: 405, body: "Method Not Allowed" };
  try {
    let authorizationCode = await createAuthorizationCode(), responseJson = {
      authorizationCode: authorizationCode.code,
      url: `${env2.APP_ORIGIN}/account/authorization-code/${authorizationCode.code}`
    };
    return (0, import_server_runtime84.json)(responseJson);
  } catch (error) {
    return error instanceof Error ? (logger.error("Error creating AuthorizationCode", {
      url: request.url,
      error: error.message
    }), (0, import_server_runtime84.json)({ error: error.message }, { status: 400 })) : (0, import_server_runtime84.json)({ error: "Something went wrong" }, { status: 500 });
  }
}

// app/routes/api.v1.jobs.$jobSlug.runs.ts
var api_v1_jobs_jobSlug_runs_exports = {};
__export(api_v1_jobs_jobSlug_runs_exports, {
  loader: () => loader117
});
var import_server_runtime85 = require("@remix-run/server-runtime"), import_zod232 = require("zod");
var ParamsSchema74 = import_zod232.z.object({
  jobSlug: import_zod232.z.string()
}), SearchQuerySchema = import_zod232.z.object({
  cursor: import_zod232.z.string().optional(),
  take: import_zod232.z.coerce.number().default(20)
});
async function loader117({ request, params }) {
  if (request.method.toUpperCase() === "OPTIONS")
    return apiCors(request, (0, import_server_runtime85.json)({}));
  let authenticationResult = await authenticateApiRequest(request);
  if (!authenticationResult)
    return apiCors(request, (0, import_server_runtime85.json)({ error: "Invalid or Missing API key" }, { status: 401 }));
  let authenticatedEnv = authenticationResult.environment, parsedParams = ParamsSchema74.safeParse(params);
  if (!parsedParams.success)
    return apiCors(request, (0, import_server_runtime85.json)({ error: "Missing the job id" }, { status: 400 }));
  let { jobSlug } = parsedParams.data, url = new URL(request.url), parsedQuery = SearchQuerySchema.safeParse(Object.fromEntries(url.searchParams));
  if (!parsedQuery.success)
    return apiCors(
      request,
      (0, import_server_runtime85.json)({ error: "Invalid or missing query parameters" }, { status: 400 })
    );
  let query = parsedQuery.data, take = Math.min(query.take, 50), runs = await prisma.jobRun.findMany({
    where: {
      job: {
        slug: jobSlug
      },
      environmentId: authenticatedEnv.id,
      projectId: authenticatedEnv.projectId
    },
    select: {
      id: !0,
      status: !0,
      startedAt: !0,
      updatedAt: !0,
      completedAt: !0
    },
    orderBy: {
      id: "desc"
    },
    take: take + 1,
    cursor: query.cursor ? {
      id: query.cursor
    } : void 0
  }), selectedRuns = runs.slice(0, take), nextRun = runs[take];
  return apiCors(
    request,
    (0, import_server_runtime85.json)({
      runs: selectedRuns,
      nextCursor: nextRun ? nextRun.id : void 0
    })
  );
}

// app/routes/api.v1.runs.$runId.cancel.ts
var api_v1_runs_runId_cancel_exports = {};
__export(api_v1_runs_runId_cancel_exports, {
  action: () => action74
});
var import_server_runtime86 = require("@remix-run/server-runtime");
var import_zod233 = require("zod");

// app/presenters/ApiRunPresenter.server.ts
var ApiRunPresenter = class {
  #prismaClient;
  constructor(prismaClient = prisma) {
    this.#prismaClient = prismaClient;
  }
  async call({
    runId,
    maxTasks = 20,
    taskDetails = !1,
    subTasks = !1,
    cursor
  }) {
    let take = Math.min(maxTasks, 50);
    return await prisma.jobRun.findUnique({
      where: {
        id: runId
      },
      select: {
        id: !0,
        status: !0,
        startedAt: !0,
        updatedAt: !0,
        completedAt: !0,
        environmentId: !0,
        output: !0,
        tasks: {
          select: {
            id: !0,
            parentId: !0,
            displayKey: !0,
            status: !0,
            name: !0,
            icon: !0,
            startedAt: !0,
            completedAt: !0,
            params: taskDetails,
            output: taskDetails
          },
          where: {
            parentId: subTasks ? void 0 : null
          },
          orderBy: {
            id: "asc"
          },
          take: take + 1,
          cursor: cursor ? {
            id: cursor
          } : void 0
        },
        statuses: {
          select: { key: !0, label: !0, state: !0, data: !0, history: !0 }
        }
      }
    });
  }
};

// app/routes/api.v1.runs.$runId.cancel.ts
var ParamsSchema75 = import_zod233.z.object({
  runId: import_zod233.z.string()
});
async function action74({ request, params }) {
  if (request.method.toUpperCase() !== "POST")
    return { status: 405, body: "Method Not Allowed" };
  if (!await authenticateApiRequest(request))
    return (0, import_server_runtime86.json)({ error: "Invalid or Missing API Key" }, { status: 401 });
  let parsed = ParamsSchema75.safeParse(params);
  if (!parsed.success)
    return (0, import_server_runtime86.json)({ error: "Invalid or Missing runId" }, { status: 400 });
  let { runId } = parsed.data, service = new CancelRunService();
  try {
    await service.call({ runId });
  } catch (error) {
    let prismaError = PrismaErrorSchema.safeParse(error);
    return prismaError.success && prismaError.data.code === "P2005" ? (0, import_server_runtime86.json)({ error: "Run not found" }, { status: 404 }) : (0, import_server_runtime86.json)({ error: "Internal Server Error" }, { status: 500 });
  }
  let jobRun = await new ApiRunPresenter().call({
    runId
  });
  return jobRun ? (0, import_server_runtime86.json)({
    id: jobRun.id,
    status: jobRun.status,
    startedAt: jobRun.startedAt,
    updatedAt: jobRun.updatedAt,
    completedAt: jobRun.completedAt,
    output: jobRun.output,
    tasks: jobRun.tasks,
    statuses: jobRun.statuses.map((s) => ({
      ...s,
      state: s.state ?? void 0,
      data: s.data ?? void 0,
      history: s.history ?? void 0
    }))
  }) : (0, import_server_runtime86.json)({ message: "Run not found" }, { status: 404 });
}

// app/routes/storybook.clipboard-field/route.tsx
var route_exports118 = {};
__export(route_exports118, {
  default: () => Story4
});
var import_jsx_runtime280 = require("react/jsx-runtime");
function Story4() {
  return /* @__PURE__ */ (0, import_jsx_runtime280.jsxs)("div", { className: "flex gap-x-8 p-8", children: [
    /* @__PURE__ */ (0, import_jsx_runtime280.jsxs)("div", { className: "flex flex-col items-start whitespace-nowrap", children: [
      /* @__PURE__ */ (0, import_jsx_runtime280.jsx)(Header2, { className: "mb-[2.2rem]", children: "Variants" }),
      /* @__PURE__ */ (0, import_jsx_runtime280.jsxs)("div", { className: "mb-10 space-y-[2.33rem]", children: [
        /* @__PURE__ */ (0, import_jsx_runtime280.jsx)(Paragraph, { variant: "small/bright", children: "primary/small" }),
        /* @__PURE__ */ (0, import_jsx_runtime280.jsx)(Paragraph, { variant: "small/bright", children: "secondary/small" }),
        /* @__PURE__ */ (0, import_jsx_runtime280.jsx)(Paragraph, { variant: "small/bright", children: "tertiary/small" }),
        /* @__PURE__ */ (0, import_jsx_runtime280.jsx)(Paragraph, { variant: "small/bright", children: "tertiary/small + LeadingIcon" }),
        /* @__PURE__ */ (0, import_jsx_runtime280.jsx)(Paragraph, { variant: "small/bright", children: "tertiary/small + LeadingIcon" }),
        /* @__PURE__ */ (0, import_jsx_runtime280.jsx)(Paragraph, { variant: "small/bright", children: "primary/small + iconButton" }),
        /* @__PURE__ */ (0, import_jsx_runtime280.jsx)(Paragraph, { variant: "small/bright", children: "secondary/small + iconButton" }),
        /* @__PURE__ */ (0, import_jsx_runtime280.jsx)(Paragraph, { variant: "small/bright", children: "tertiary/small + iconButton" })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime280.jsxs)("div", { className: "space-y-[2.9rem]", children: [
        /* @__PURE__ */ (0, import_jsx_runtime280.jsx)(Paragraph, { variant: "small/bright", children: "primary/medium" }),
        /* @__PURE__ */ (0, import_jsx_runtime280.jsx)(Paragraph, { variant: "small/bright", children: "secondary/medium" }),
        /* @__PURE__ */ (0, import_jsx_runtime280.jsx)(Paragraph, { variant: "small/bright", children: "tertiary/medium" }),
        /* @__PURE__ */ (0, import_jsx_runtime280.jsx)(Paragraph, { variant: "small/bright", children: "tertiary/medium + LeadingIcon" }),
        /* @__PURE__ */ (0, import_jsx_runtime280.jsx)(Paragraph, { variant: "small/bright", children: "tertiary/medium + LeadingIcon" }),
        /* @__PURE__ */ (0, import_jsx_runtime280.jsx)(Paragraph, { variant: "small/bright", children: "primary/medium + iconButton" }),
        /* @__PURE__ */ (0, import_jsx_runtime280.jsx)(Paragraph, { variant: "small/bright", children: "secondary/medium + iconButton" }),
        /* @__PURE__ */ (0, import_jsx_runtime280.jsx)(Paragraph, { variant: "small/bright", children: "tertiary/medium + iconButton" })
      ] })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime280.jsxs)("div", { className: "flex flex-col items-start gap-y-8", children: [
      /* @__PURE__ */ (0, import_jsx_runtime280.jsx)(Header2, { children: "Default" }),
      /* @__PURE__ */ (0, import_jsx_runtime280.jsx)(ClipboardField, { value: "copy paste me", variant: "primary/small" }),
      /* @__PURE__ */ (0, import_jsx_runtime280.jsx)(ClipboardField, { value: "copy paste me", variant: "secondary/small" }),
      /* @__PURE__ */ (0, import_jsx_runtime280.jsx)(ClipboardField, { value: "copy paste me", variant: "tertiary/small" }),
      /* @__PURE__ */ (0, import_jsx_runtime280.jsx)(
        ClipboardField,
        {
          value: "with leadingIcon",
          variant: "tertiary/small",
          icon: /* @__PURE__ */ (0, import_jsx_runtime280.jsx)(EnvironmentLabel, { environment: { type: "DEVELOPMENT" } })
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime280.jsx)(ClipboardField, { value: "with leadingIcon", variant: "tertiary/small", icon: "search" }),
      /* @__PURE__ */ (0, import_jsx_runtime280.jsx)(ClipboardField, { value: "with iconButton", variant: "primary/small", iconButton: !0 }),
      /* @__PURE__ */ (0, import_jsx_runtime280.jsx)(ClipboardField, { value: "with iconButton", variant: "secondary/small", iconButton: !0 }),
      /* @__PURE__ */ (0, import_jsx_runtime280.jsx)(ClipboardField, { value: "with iconButton", variant: "tertiary/small", iconButton: !0 }),
      /* @__PURE__ */ (0, import_jsx_runtime280.jsx)(ClipboardField, { value: "copy paste me", variant: "primary/medium" }),
      /* @__PURE__ */ (0, import_jsx_runtime280.jsx)(ClipboardField, { value: "copy paste me", variant: "secondary/medium" }),
      /* @__PURE__ */ (0, import_jsx_runtime280.jsx)(ClipboardField, { value: "copy paste me", variant: "tertiary/medium" }),
      /* @__PURE__ */ (0, import_jsx_runtime280.jsx)(
        ClipboardField,
        {
          value: "with leadingIcon",
          variant: "tertiary/medium",
          icon: /* @__PURE__ */ (0, import_jsx_runtime280.jsx)(EnvironmentLabel, { environment: { type: "DEVELOPMENT" } })
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime280.jsx)(ClipboardField, { value: "with leadingIcon", variant: "tertiary/medium", icon: "search" }),
      /* @__PURE__ */ (0, import_jsx_runtime280.jsx)(ClipboardField, { value: "with iconButton", variant: "primary/medium", iconButton: !0 }),
      /* @__PURE__ */ (0, import_jsx_runtime280.jsx)(ClipboardField, { value: "with iconButton", variant: "secondary/medium", iconButton: !0 }),
      /* @__PURE__ */ (0, import_jsx_runtime280.jsx)(ClipboardField, { value: "with iconButton", variant: "tertiary/medium", iconButton: !0 })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime280.jsxs)("div", { className: "flex flex-col items-start gap-y-8", children: [
      /* @__PURE__ */ (0, import_jsx_runtime280.jsx)(Header2, { children: "Secure value" }),
      /* @__PURE__ */ (0, import_jsx_runtime280.jsx)(ClipboardField, { value: "copy paste me", variant: "primary/small", secure: !0 }),
      /* @__PURE__ */ (0, import_jsx_runtime280.jsx)(ClipboardField, { value: "copy paste me", variant: "secondary/small", secure: !0 }),
      /* @__PURE__ */ (0, import_jsx_runtime280.jsx)(ClipboardField, { value: "copy paste me", variant: "tertiary/small", secure: !0 }),
      /* @__PURE__ */ (0, import_jsx_runtime280.jsx)(
        ClipboardField,
        {
          value: "with leadingIcon",
          variant: "tertiary/small",
          secure: !0,
          icon: /* @__PURE__ */ (0, import_jsx_runtime280.jsx)(EnvironmentLabel, { environment: { type: "STAGING" } })
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime280.jsx)(
        ClipboardField,
        {
          value: "with leadingIcon",
          variant: "tertiary/small",
          icon: "search",
          secure: !0
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime280.jsx)(ClipboardField, { value: "with iconButton", variant: "primary/small", iconButton: !0, secure: !0 }),
      /* @__PURE__ */ (0, import_jsx_runtime280.jsx)(
        ClipboardField,
        {
          value: "with iconButton",
          variant: "secondary/small",
          iconButton: !0,
          secure: !0
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime280.jsx)(ClipboardField, { value: "with iconButton", variant: "tertiary/small", iconButton: !0, secure: !0 }),
      /* @__PURE__ */ (0, import_jsx_runtime280.jsx)(ClipboardField, { value: "copy paste me", variant: "primary/medium", secure: !0 }),
      /* @__PURE__ */ (0, import_jsx_runtime280.jsx)(ClipboardField, { value: "copy paste me", variant: "secondary/medium", secure: !0 }),
      /* @__PURE__ */ (0, import_jsx_runtime280.jsx)(ClipboardField, { value: "copy paste me", variant: "tertiary/medium", secure: !0 }),
      /* @__PURE__ */ (0, import_jsx_runtime280.jsx)(
        ClipboardField,
        {
          value: "with leadingIcon",
          variant: "tertiary/medium",
          icon: /* @__PURE__ */ (0, import_jsx_runtime280.jsx)(EnvironmentLabel, { environment: { type: "STAGING" } }),
          secure: !0
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime280.jsx)(
        ClipboardField,
        {
          value: "with leadingIcon",
          variant: "tertiary/medium",
          icon: "search",
          secure: !0
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime280.jsx)(ClipboardField, { value: "with iconButton", variant: "primary/medium", iconButton: !0, secure: !0 }),
      /* @__PURE__ */ (0, import_jsx_runtime280.jsx)(
        ClipboardField,
        {
          value: "with iconButton",
          variant: "secondary/medium",
          iconButton: !0,
          secure: !0
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime280.jsx)(
        ClipboardField,
        {
          value: "with iconButton",
          variant: "tertiary/medium",
          iconButton: !0,
          secure: !0
        }
      )
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime280.jsxs)("div", { className: "flex flex-col items-start gap-y-8", children: [
      /* @__PURE__ */ (0, import_jsx_runtime280.jsx)(Header2, { children: "Custom secure value" }),
      /* @__PURE__ */ (0, import_jsx_runtime280.jsx)(ClipboardField, { value: "npx abcdefghi", variant: "primary/small", secure: "npx \u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022" }),
      /* @__PURE__ */ (0, import_jsx_runtime280.jsx)(ClipboardField, { value: "npx abcdefghi", variant: "secondary/small", secure: "npx \u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022" }),
      /* @__PURE__ */ (0, import_jsx_runtime280.jsx)(ClipboardField, { value: "npx abcdefghi", variant: "tertiary/small", secure: "npx \u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022" }),
      /* @__PURE__ */ (0, import_jsx_runtime280.jsx)(
        ClipboardField,
        {
          value: "npx abcdefghi",
          variant: "tertiary/small",
          icon: /* @__PURE__ */ (0, import_jsx_runtime280.jsx)(EnvironmentLabel, { environment: { type: "PRODUCTION" } }),
          secure: "npx \u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022"
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime280.jsx)(
        ClipboardField,
        {
          value: "npx abcdefghi",
          variant: "tertiary/small",
          icon: "search",
          secure: "npx \u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022"
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime280.jsx)(
        ClipboardField,
        {
          value: "npx abcdefghi",
          variant: "primary/small",
          iconButton: !0,
          secure: "npx \u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022"
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime280.jsx)(
        ClipboardField,
        {
          value: "npx abcdefghi",
          variant: "secondary/small",
          iconButton: !0,
          secure: "npx \u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022"
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime280.jsx)(
        ClipboardField,
        {
          value: "npx abcdefghi",
          variant: "tertiary/small",
          iconButton: !0,
          secure: "npx \u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022"
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime280.jsx)(ClipboardField, { value: "npx abcdefghi", variant: "primary/medium", secure: "npx \u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022" }),
      /* @__PURE__ */ (0, import_jsx_runtime280.jsx)(ClipboardField, { value: "npx abcdefghi", variant: "secondary/medium", secure: "npx \u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022" }),
      /* @__PURE__ */ (0, import_jsx_runtime280.jsx)(ClipboardField, { value: "npx abcdefghi", variant: "tertiary/medium", secure: "npx \u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022" }),
      /* @__PURE__ */ (0, import_jsx_runtime280.jsx)(
        ClipboardField,
        {
          value: "npx abcdefghi",
          variant: "tertiary/medium",
          icon: /* @__PURE__ */ (0, import_jsx_runtime280.jsx)(EnvironmentLabel, { environment: { type: "PRODUCTION" } }),
          secure: "npx \u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022"
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime280.jsx)(
        ClipboardField,
        {
          value: "npx abcdefghi",
          variant: "tertiary/medium",
          icon: "search",
          secure: "npx \u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022"
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime280.jsx)(
        ClipboardField,
        {
          value: "npx abcdefghi",
          variant: "primary/medium",
          iconButton: !0,
          secure: "npx \u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022"
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime280.jsx)(
        ClipboardField,
        {
          value: "npx abcdefghi",
          variant: "secondary/medium",
          iconButton: !0,
          secure: "npx \u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022"
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime280.jsx)(
        ClipboardField,
        {
          value: "npx abcdefghi",
          variant: "tertiary/medium",
          iconButton: !0,
          secure: "npx \u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022"
        }
      )
    ] })
  ] });
}

// app/routes/storybook.free-plan-usage/route.tsx
var route_exports119 = {};
__export(route_exports119, {
  default: () => Story5
});
var import_jsx_runtime281 = require("react/jsx-runtime");
function Story5() {
  return /* @__PURE__ */ (0, import_jsx_runtime281.jsxs)("div", { className: "flex h-screen flex-col items-center justify-center gap-4 p-12", children: [
    /* @__PURE__ */ (0, import_jsx_runtime281.jsx)("div", { className: "w-fit", children: /* @__PURE__ */ (0, import_jsx_runtime281.jsx)(FreePlanUsage, { to: "", percentage: 0.1 }) }),
    /* @__PURE__ */ (0, import_jsx_runtime281.jsx)("div", { className: "w-fit", children: /* @__PURE__ */ (0, import_jsx_runtime281.jsx)(FreePlanUsage, { to: "", percentage: 0.5 }) }),
    /* @__PURE__ */ (0, import_jsx_runtime281.jsx)("div", { className: "w-fit", children: /* @__PURE__ */ (0, import_jsx_runtime281.jsx)(FreePlanUsage, { to: "", percentage: 0.75 }) }),
    /* @__PURE__ */ (0, import_jsx_runtime281.jsx)("div", { className: "w-fit", children: /* @__PURE__ */ (0, import_jsx_runtime281.jsx)(FreePlanUsage, { to: "", percentage: 1 }) })
  ] });
}

// app/routes/storybook.pricing-callout/route.tsx
var route_exports120 = {};
__export(route_exports120, {
  default: () => Story6
});
var import_outline10 = require("@heroicons/react/24/outline");
var import_jsx_runtime282 = require("react/jsx-runtime");
function Story6() {
  return /* @__PURE__ */ (0, import_jsx_runtime282.jsx)("div", { className: "mx-4 flex h-screen flex-col items-center justify-center gap-4", children: /* @__PURE__ */ (0, import_jsx_runtime282.jsx)(
    Callout,
    {
      variant: "pricing",
      cta: /* @__PURE__ */ (0, import_jsx_runtime282.jsx)(
        LinkButton,
        {
          variant: "primary/small",
          LeadingIcon: import_outline10.ArrowUpCircleIcon,
          leadingIconClassName: "pr-0 pl-0.5",
          to: "#",
          children: "Upgrade"
        }
      ),
      children: "Some of your runs are being queued because your run concurrency is limited to 50."
    }
  ) });
}

// app/routes/storybook.tabs.$tabNumber/route.tsx
var route_exports121 = {};
__export(route_exports121, {
  default: () => Story7
});
var import_react217 = require("@remix-run/react"), import_jsx_runtime283 = require("react/jsx-runtime");
function Story7() {
  let { tabNumber } = (0, import_react217.useParams)();
  return /* @__PURE__ */ (0, import_jsx_runtime283.jsx)("div", { className: "flex items-center justify-center py-8", children: /* @__PURE__ */ (0, import_jsx_runtime283.jsx)("h1", { className: "text-5xl", children: tabNumber }) });
}

// app/routes/api.v1.runs.$runId.tasks/route.ts
var route_exports122 = {};
__export(route_exports122, {
  action: () => action75
});
var import_server_runtime87 = require("@remix-run/server-runtime");
var import_zod234 = require("zod");

// app/services/tasks/runTask.server.ts
var RunTaskService = class {
  #prismaClient;
  constructor(prismaClient = prisma) {
    this.#prismaClient = prismaClient;
  }
  async call(runId, idempotencyKey, taskBody) {
    return startActiveSpan("RunTaskService.call", async (span) => {
      span.setAttribute("runId", runId);
      let delayUntilInFuture = taskBody.delayUntil ? taskBody.delayUntil.getTime() > Date.now() : !1, callbackEnabled = taskBody.callback?.enabled ?? !1, existingTask = await this.#handleExistingTask(
        runId,
        idempotencyKey,
        taskBody,
        delayUntilInFuture,
        callbackEnabled
      );
      if (existingTask)
        return span.setAttribute("taskId", existingTask.id), taskWithAttemptsToServerTask(existingTask);
      let run = await this.#prismaClient.jobRun.findUnique({
        where: {
          id: runId
        },
        select: {
          status: !0,
          forceYieldImmediately: !0
        }
      });
      if (!run)
        throw new Error("Run not found");
      let runConnection = taskBody.connectionKey ? await this.#prismaClient.runConnection.findUnique({
        where: {
          runId_key: {
            runId,
            key: taskBody.connectionKey
          }
        },
        select: {
          id: !0
        }
      }) : void 0, results = await $transaction(
        this.#prismaClient,
        async (tx) => {
          let status;
          run.status === "CANCELED" ? status = "CANCELED" : status = delayUntilInFuture || callbackEnabled ? "WAITING" : taskBody.noop ? "COMPLETED" : "RUNNING";
          let taskId = ulid2(), callbackUrl = callbackEnabled ? `${env2.APP_ORIGIN}/api/v1/tasks/${taskId}/callback/${generateSecret(12)}` : void 0, task2 = await tx.task.create({
            data: {
              id: taskId,
              idempotencyKey,
              displayKey: taskBody.displayKey,
              runConnectionId: runConnection ? runConnection.id : void 0,
              icon: taskBody.icon,
              runId,
              parentId: taskBody.parentId,
              name: taskBody.name ?? "Task",
              description: taskBody.description,
              status,
              startedAt: /* @__PURE__ */ new Date(),
              completedAt: status === "COMPLETED" || status === "CANCELED" ? /* @__PURE__ */ new Date() : void 0,
              noop: taskBody.noop,
              delayUntil: taskBody.delayUntil,
              params: taskBody.params ?? void 0,
              properties: this.#filterProperties(taskBody.properties) ?? void 0,
              redact: taskBody.redact ?? void 0,
              operation: taskBody.operation,
              callbackUrl,
              style: taskBody.style ?? { style: "normal" },
              childExecutionMode: taskBody.parallel ? "PARALLEL" : "SEQUENTIAL"
            }
          });
          span.setAttribute("taskId", task2.id);
          let taskAttempt2 = await tx.taskAttempt.create({
            data: {
              number: 1,
              taskId: task2.id,
              status: "PENDING"
            }
          });
          return task2.status === "RUNNING" && typeof taskBody.operation == "string" ? await taskOperationWorker.enqueue(
            "performTaskOperation",
            {
              id: task2.id
            },
            { tx, runAt: task2.delayUntil ?? void 0, jobKey: `operation:${task2.id}` }
          ) : task2.status === "WAITING" && callbackUrl && taskBody.callback && taskBody.callback.timeoutInSeconds > 0 && await workerQueue.enqueue(
            "processCallbackTimeout",
            {
              id: task2.id
            },
            {
              tx,
              runAt: new Date(Date.now() + taskBody.callback.timeoutInSeconds * 1e3),
              jobKey: `process-callback:${task2.id}`
            }
          ), { task: task2, taskAttempt: taskAttempt2 };
        },
        { timeout: 1e4 }
      );
      if (!results)
        return;
      let { task, taskAttempt } = results;
      return task ? taskWithAttemptsToServerTask({ ...task, attempts: [taskAttempt], run }) : void 0;
    });
  }
  async #handleExistingTask(runId, idempotencyKey, taskBody, delayUntilInFuture, callbackEnabled) {
    let existingTask = await this.#prismaClient.task.findUnique({
      where: {
        runId_idempotencyKey: {
          runId,
          idempotencyKey
        }
      },
      include: {
        attempts: !0,
        run: !0
      }
    });
    if (existingTask) {
      if (existingTask.status === "CANCELED") {
        let existingTaskStatus = delayUntilInFuture || callbackEnabled ? "WAITING" : taskBody.noop ? "COMPLETED" : "RUNNING";
        return await this.#prismaClient.task.update({
          where: {
            id: existingTask.id
          },
          data: {
            status: existingTaskStatus,
            startedAt: /* @__PURE__ */ new Date(),
            completedAt: existingTaskStatus === "COMPLETED" ? /* @__PURE__ */ new Date() : void 0
          },
          include: {
            run: !0,
            attempts: !0
          }
        });
      }
      return existingTask;
    }
  }
  #filterProperties(properties) {
    if (properties)
      return properties.filter((property) => property ? typeof property.label == "string" && typeof property.text == "string" : !1);
  }
};

// app/routes/api.v1.runs.$runId.tasks/ChangeRequestLazyLoadedCachedTasks.server.ts
var ChangeRequestLazyLoadedCachedTasks = class {
  #prismaClient;
  constructor(prismaClient = prisma) {
    this.#prismaClient = prismaClient;
  }
  async call(runId, task, cursor) {
    if (!cursor)
      return {
        task
      };
    let TOTAL_CACHED_TASK_BYTE_LIMIT2 = 2e6, nextTasks = await this.#prismaClient.task.findMany({
      where: {
        runId,
        status: "COMPLETED",
        noop: !1
      },
      take: 250,
      cursor: {
        id: cursor
      },
      orderBy: {
        id: "asc"
      }
    }), preparedTasks = prepareTasksForCaching(nextTasks, TOTAL_CACHED_TASK_BYTE_LIMIT2);
    return {
      task,
      cachedTasks: preparedTasks
    };
  }
};

// app/routes/api.v1.runs.$runId.tasks/route.ts
var ParamsSchema76 = import_zod234.z.object({
  runId: import_zod234.z.string()
}), HeadersSchema5 = import_zod234.z.object({
  "idempotency-key": import_zod234.z.string(),
  "trigger-version": import_zod234.z.string().optional().nullable(),
  "x-cached-tasks-cursor": import_zod234.z.string().optional().nullable()
}), BodySchema3 = RunTaskBodyOutputSchema.omit({ params: !0 });
async function action75({ request, params }) {
  if (request.method.toUpperCase() !== "POST")
    return { status: 405, body: "Method Not Allowed" };
  if (!await authenticateApiRequest(request))
    return (0, import_server_runtime87.json)({ error: "Invalid or Missing API key" }, { status: 401 });
  let headers = HeadersSchema5.safeParse(Object.fromEntries(request.headers));
  if (!headers.success)
    return (0, import_server_runtime87.json)({ error: "Invalid or Missing idempotency key" }, { status: 400 });
  let {
    "idempotency-key": idempotencyKey,
    "trigger-version": triggerVersion,
    "x-cached-tasks-cursor": cachedTasksCursor
  } = headers.data, { runId } = ParamsSchema76.parse(params), contentLength = request.headers.get("content-length");
  if (!contentLength || parseInt(contentLength) > 3 * 1024 * 1024)
    return (0, import_server_runtime87.json)({ error: "Request body too large" }, { status: 413 });
  let anyBody = await parseRequestJsonAsync(request, { runId }), body = await startActiveSpan(
    "BodySchema.safeParse",
    async () => BodySchema3.safeParse(anyBody),
    {
      attributes: {
        runId
      }
    }
  );
  if (!body.success)
    return (0, import_server_runtime87.json)({ error: "Invalid request body" }, { status: 400 });
  let service = new RunTaskService();
  try {
    let task = await service.call(runId, idempotencyKey, {
      ...body.data,
      params: anyBody.params
    });
    if (!task)
      return (0, import_server_runtime87.json)({ error: "Something went wrong" }, { status: 500 });
    if (triggerVersion === API_VERSIONS.LAZY_LOADED_CACHED_TASKS) {
      let responseBody = await new ChangeRequestLazyLoadedCachedTasks().call(runId, task, cachedTasksCursor);
      return logger.debug(
        "RunTaskService.call() response migrating with ChangeRequestLazyLoadedCachedTasks",
        {
          cachedTasksCursor
        }
      ), (0, import_server_runtime87.json)(responseBody, {
        headers: {
          "trigger-version": API_VERSIONS.LAZY_LOADED_CACHED_TASKS
        }
      });
    }
    return (0, import_server_runtime87.json)(task);
  } catch (error) {
    return error instanceof Error ? (0, import_server_runtime87.json)({ error: error.message }, { status: 400 }) : (0, import_server_runtime87.json)({ error: "Something went wrong" }, { status: 500 });
  }
}

// app/routes/api.v1.runs.$runId.logs/route.ts
var route_exports123 = {};
__export(route_exports123, {
  action: () => action76
});
var import_server_runtime88 = require("@remix-run/server-runtime");
var import_zod235 = require("zod");

// app/routes/api.v1.runs.$runId.logs/CreateRunLogService.server.ts
var CreateRunLogService = class {
  #prismaClient;
  constructor(prismaClient = prisma) {
    this.#prismaClient = prismaClient;
  }
  async call(environment, runId, logMessage) {
    return logger.debug(logMessage.message, logMessage.data ?? {}), logMessage;
  }
};

// app/routes/api.v1.runs.$runId.logs/route.ts
var ParamsSchema77 = import_zod235.z.object({
  runId: import_zod235.z.string()
});
async function action76({ request, params }) {
  if (request.method.toUpperCase() !== "POST")
    return { status: 405, body: "Method Not Allowed" };
  let authenticationResult = await authenticateApiRequest(request);
  if (!authenticationResult)
    return (0, import_server_runtime88.json)({ error: "Invalid or Missing API key" }, { status: 401 });
  let authenticatedEnv = authenticationResult.environment, { runId } = ParamsSchema77.parse(params), anyBody = await request.json(), body = LogMessageSchema.safeParse(anyBody);
  if (!body.success)
    return (0, import_server_runtime88.json)({ error: "Invalid request body" }, { status: 400 });
  let service = new CreateRunLogService();
  try {
    let log = await service.call(authenticatedEnv, runId, body.data);
    return (0, import_server_runtime88.json)(log);
  } catch (error) {
    return error instanceof Error ? (0, import_server_runtime88.json)({ error: error.message }, { status: 400 }) : (0, import_server_runtime88.json)({ error: "Something went wrong" }, { status: 500 });
  }
}

// app/routes/api.v1.sources.http.$id.ts
var api_v1_sources_http_id_exports = {};
__export(api_v1_sources_http_id_exports, {
  action: () => action77,
  loader: () => loader118
});
var import_zod236 = require("zod");

// app/services/sources/handleHttpSource.server.ts
var HandleHttpSourceService = class {
  #prismaClient;
  constructor(prismaClient = prisma) {
    this.#prismaClient = prismaClient;
  }
  async call(id, request) {
    let triggerSource = await this.#prismaClient.triggerSource.findUnique({
      where: { id },
      include: {
        endpoint: !0,
        environment: !0,
        secretReference: !0,
        organization: !0
      }
    });
    if (!triggerSource)
      return { status: 404 };
    if (!triggerSource.active)
      return { status: 200 };
    if (!triggerSource.endpoint.url)
      return { status: 404 };
    if (!triggerSource.organization.runsEnabled)
      return { status: 404 };
    if (!triggerSource.interactive) {
      let sourceRequest = await createHttpSourceRequest(request);
      return await this.#prismaClient.$transaction(async (tx) => {
        let delivery = await tx.httpSourceRequestDelivery.create({
          data: {
            sourceId: triggerSource.id,
            endpointId: triggerSource.endpointId,
            environmentId: triggerSource.environmentId,
            url: sourceRequest.url,
            method: sourceRequest.method,
            headers: sourceRequest.headers,
            body: sourceRequest.rawBody
          }
        });
        await workerQueue.enqueue(
          "deliverHttpSourceRequest",
          {
            id: delivery.id
          },
          {
            tx,
            maxAttempts: triggerSource.environment.type === RuntimeEnvironmentType3.DEVELOPMENT ? 1 : void 0
          }
        );
      }), { status: 200 };
    }
    return { status: 200 };
  }
};

// app/routes/api.v1.sources.http.$id.ts
async function action77({ request, params }) {
  logger.info("Handling http source", { url: request.url });
  try {
    let { id } = import_zod236.z.object({ id: import_zod236.z.string() }).parse(params), result = await new HandleHttpSourceService().call(id, request);
    return new Response(void 0, {
      status: result.status
    });
  } catch (e) {
    return e instanceof Error ? logger.error("Error handling http source", { error: e.message }) : logger.error("Error handling http source", { error: JSON.stringify(e) }), new Response(void 0, {
      status: 500
    });
  }
}
async function loader118({ request, params }) {
  logger.info("Handling http source", { url: request.url });
  let { id } = import_zod236.z.object({ id: import_zod236.z.string() }).parse(params);
  return await new HandleHttpSourceService().call(id, request);
}

// app/routes/projects.v3.$projectRef.ts
var projects_v3_projectRef_exports = {};
__export(projects_v3_projectRef_exports, {
  loader: () => loader119
});
var import_server_runtime89 = require("@remix-run/server-runtime"), import_zod237 = require("zod");
var ParamsSchema78 = import_zod237.z.object({
  projectRef: import_zod237.z.string()
});
async function loader119({ params, request }) {
  let userId = await requireUserId(request), validatedParams = ParamsSchema78.parse(params), project = await prisma.project.findFirst({
    where: {
      externalRef: validatedParams.projectRef,
      organization: {
        members: {
          some: {
            userId
          }
        }
      }
    },
    include: {
      organization: !0
    }
  });
  return project ? (0, import_server_runtime89.redirect)(`/orgs/${project.organization.slug}/projects/v3/${project.slug}`) : new Response("Not found", { status: 404 });
}

// app/routes/resources.impersonation.ts
var resources_impersonation_exports = {};
__export(resources_impersonation_exports, {
  action: () => action78
});
var import_remix_typedjson84 = require("remix-typedjson");
async function action78({ request }) {
  let session = await clearImpersonationId(request);
  return (0, import_remix_typedjson84.redirect)("/admin", {
    headers: {
      "Set-Cookie": await commitImpersonationSession(session)
    }
  });
}

// app/routes/storybook.search-fields/route.tsx
var route_exports124 = {};
__export(route_exports124, {
  default: () => Story8
});
var import_react218 = require("@remix-run/react");
var import_jsx_runtime284 = require("react/jsx-runtime");
function Story8() {
  return /* @__PURE__ */ (0, import_jsx_runtime284.jsx)(MainCenteredContainer, { children: /* @__PURE__ */ (0, import_jsx_runtime284.jsx)("div", { children: /* @__PURE__ */ (0, import_jsx_runtime284.jsx)(import_react218.Form, { children: /* @__PURE__ */ (0, import_jsx_runtime284.jsxs)(Fieldset, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime284.jsxs)(InputGroup, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime284.jsx)(Label, { children: "Medium search input" }),
      /* @__PURE__ */ (0, import_jsx_runtime284.jsx)(Input, { placeholder: "Search", required: !0, icon: "search", shortcut: "\u2318K" })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime284.jsxs)(InputGroup, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime284.jsx)(Label, { children: "Small search input" }),
      /* @__PURE__ */ (0, import_jsx_runtime284.jsx)(
        Input,
        {
          placeholder: "Search",
          required: !0,
          variant: "small",
          icon: "search",
          shortcut: "\u2318K",
          fullWidth: !1
        }
      )
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime284.jsxs)(InputGroup, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime284.jsx)(Label, { children: "Tertiary search input" }),
      /* @__PURE__ */ (0, import_jsx_runtime284.jsx)(
        Input,
        {
          placeholder: "Search",
          required: !0,
          variant: "tertiary",
          icon: "search",
          fullWidth: !1
        }
      )
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime284.jsxs)(InputGroup, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime284.jsx)(Label, { variant: "small", children: "This is a small label" }),
      /* @__PURE__ */ (0, import_jsx_runtime284.jsx)(Input, { placeholder: "Search", required: !0, icon: "search", shortcut: "\u2318K" })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime284.jsxs)(InputGroup, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime284.jsx)(Label, { variant: "medium", children: "This is a medium label" }),
      /* @__PURE__ */ (0, import_jsx_runtime284.jsx)(Input, { placeholder: "Search", required: !0, icon: "search", shortcut: "\u2318K" })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime284.jsxs)(InputGroup, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime284.jsx)(Label, { variant: "large", children: "This is a large label" }),
      /* @__PURE__ */ (0, import_jsx_runtime284.jsx)(Input, { placeholder: "Search", required: !0, icon: "search", shortcut: "\u2318K" })
    ] })
  ] }) }) }) });
}

// app/routes/api.v1.events.$eventId.ts
var api_v1_events_eventId_exports = {};
__export(api_v1_events_eventId_exports, {
  loader: () => loader120
});
var import_server_runtime90 = require("@remix-run/server-runtime"), import_zod238 = require("zod");
var ParamsSchema79 = import_zod238.z.object({
  eventId: import_zod238.z.string()
});
async function loader120({ request, params }) {
  if (request.method.toUpperCase() === "OPTIONS")
    return apiCors(request, (0, import_server_runtime90.json)({}));
  let authenticationResult = await authenticateApiRequest(request, {
    allowPublicKey: !0
  });
  if (!authenticationResult)
    return apiCors(request, (0, import_server_runtime90.json)({ error: "Invalid or Missing API key" }, { status: 401 }));
  let authenticatedEnv = authenticationResult.environment, parsed = ParamsSchema79.safeParse(params);
  if (!parsed.success)
    return apiCors(request, (0, import_server_runtime90.json)({ error: "Invalid or Missing eventId" }, { status: 400 }));
  let { eventId } = parsed.data, event = await findEventRecord(eventId, authenticatedEnv.id);
  return event ? apiCors(request, (0, import_server_runtime90.json)(toJSON(event))) : apiCors(request, (0, import_server_runtime90.json)({ error: "Event not found" }, { status: 404 }));
}
function toJSON(eventRecord) {
  return {
    id: eventRecord.eventId,
    name: eventRecord.name,
    createdAt: eventRecord.createdAt,
    updatedAt: eventRecord.updatedAt,
    runs: eventRecord.runs.map((run) => ({
      id: run.id,
      status: runOriginalStatus(run.status),
      startedAt: run.startedAt,
      completedAt: run.completedAt
    }))
  };
}
async function findEventRecord(eventId, environmentId) {
  return await prisma.eventRecord.findUnique({
    select: {
      eventId: !0,
      name: !0,
      createdAt: !0,
      updatedAt: !0,
      runs: {
        select: {
          id: !0,
          status: !0,
          startedAt: !0,
          completedAt: !0
        }
      }
    },
    where: {
      eventId_environmentId: {
        eventId,
        environmentId
      }
    }
  });
}

// app/routes/api.v2.events.$eventId.ts
var api_v2_events_eventId_exports = {};
__export(api_v2_events_eventId_exports, {
  loader: () => loader121
});
var import_server_runtime91 = require("@remix-run/server-runtime"), import_zod239 = require("zod");
var ParamsSchema80 = import_zod239.z.object({
  eventId: import_zod239.z.string()
});
async function loader121({ request, params }) {
  if (request.method.toUpperCase() === "OPTIONS")
    return apiCors(request, (0, import_server_runtime91.json)({}));
  let authenticationResult = await authenticateApiRequest(request, {
    allowPublicKey: !0
  });
  if (!authenticationResult)
    return apiCors(request, (0, import_server_runtime91.json)({ error: "Invalid or Missing API key" }, { status: 401 }));
  let authenticatedEnv = authenticationResult.environment, parsed = ParamsSchema80.safeParse(params);
  if (!parsed.success)
    return apiCors(request, (0, import_server_runtime91.json)({ error: "Invalid or Missing eventId" }, { status: 400 }));
  let { eventId } = parsed.data, event = await findEventRecord2(eventId, authenticatedEnv.id);
  return event ? apiCors(request, (0, import_server_runtime91.json)(toJSON2(event))) : apiCors(request, (0, import_server_runtime91.json)({ error: "Event not found" }, { status: 404 }));
}
function toJSON2(eventRecord) {
  return {
    id: eventRecord.eventId,
    name: eventRecord.name,
    createdAt: eventRecord.createdAt,
    updatedAt: eventRecord.updatedAt,
    runs: eventRecord.runs.map((run) => ({
      id: run.id,
      status: run.status,
      startedAt: run.startedAt,
      completedAt: run.completedAt
    }))
  };
}
async function findEventRecord2(eventId, environmentId) {
  return await $replica.eventRecord.findUnique({
    select: {
      eventId: !0,
      name: !0,
      createdAt: !0,
      updatedAt: !0,
      runs: {
        select: {
          id: !0,
          status: !0,
          startedAt: !0,
          completedAt: !0
        }
      }
    },
    where: {
      eventId_environmentId: {
        eventId,
        environmentId
      }
    }
  });
}

// app/routes/storybook.input-fields/route.tsx
var route_exports125 = {};
__export(route_exports125, {
  default: () => Story9
});
var import_jsx_runtime285 = require("react/jsx-runtime");
function Story9() {
  return /* @__PURE__ */ (0, import_jsx_runtime285.jsxs)("div", { className: "flex gap-16", children: [
    /* @__PURE__ */ (0, import_jsx_runtime285.jsx)(InputFieldSet, {}),
    /* @__PURE__ */ (0, import_jsx_runtime285.jsx)(InputFieldSet, { disabled: !0 })
  ] });
}
function InputFieldSet({ disabled }) {
  return /* @__PURE__ */ (0, import_jsx_runtime285.jsxs)("div", { children: [
    /* @__PURE__ */ (0, import_jsx_runtime285.jsxs)("div", { className: "m-8 flex w-64 flex-col gap-4", children: [
      /* @__PURE__ */ (0, import_jsx_runtime285.jsx)(Input, { disabled, variant: "large", placeholder: "Name", autoFocus: !0, type: "text" }),
      /* @__PURE__ */ (0, import_jsx_runtime285.jsx)(Input, { disabled, variant: "medium", placeholder: "Name", type: "text" }),
      /* @__PURE__ */ (0, import_jsx_runtime285.jsx)(Input, { disabled, variant: "small", placeholder: "Name", type: "text" }),
      /* @__PURE__ */ (0, import_jsx_runtime285.jsx)(Input, { disabled, variant: "tertiary", placeholder: "Name", type: "text" })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime285.jsxs)("div", { className: "m-8 flex w-64 flex-col gap-4", children: [
      /* @__PURE__ */ (0, import_jsx_runtime285.jsx)(
        Input,
        {
          disabled,
          variant: "large",
          placeholder: "Search",
          icon: "search",
          shortcut: "\u2318K"
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime285.jsx)(
        Input,
        {
          disabled,
          variant: "medium",
          placeholder: "Search",
          icon: "search",
          shortcut: "\u2318K"
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime285.jsx)(
        Input,
        {
          disabled,
          variant: "small",
          placeholder: "Search",
          icon: "search",
          shortcut: "\u2318K"
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime285.jsx)(
        Input,
        {
          disabled,
          variant: "tertiary",
          placeholder: "Search",
          icon: "search",
          shortcut: "\u2318K"
        }
      )
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime285.jsxs)("div", { className: "m-8 flex w-64 flex-col gap-4", children: [
      /* @__PURE__ */ (0, import_jsx_runtime285.jsx)(
        Input,
        {
          disabled,
          variant: "large",
          placeholder: "Search",
          icon: /* @__PURE__ */ (0, import_jsx_runtime285.jsx)(EnvironmentLabel, { environment: { type: "DEVELOPMENT" }, size: "large" }),
          shortcut: "\u2318K"
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime285.jsx)(
        Input,
        {
          disabled,
          variant: "medium",
          placeholder: "Search",
          icon: /* @__PURE__ */ (0, import_jsx_runtime285.jsx)(EnvironmentLabel, { environment: { type: "DEVELOPMENT" }, size: "large" }),
          shortcut: "\u2318K"
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime285.jsx)(
        Input,
        {
          disabled,
          variant: "small",
          placeholder: "Search",
          icon: /* @__PURE__ */ (0, import_jsx_runtime285.jsx)(EnvironmentLabel, { environment: { type: "DEVELOPMENT" } }),
          shortcut: "\u2318K"
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime285.jsx)(
        Input,
        {
          disabled,
          variant: "tertiary",
          placeholder: "Search",
          icon: /* @__PURE__ */ (0, import_jsx_runtime285.jsx)(EnvironmentLabel, { environment: { type: "DEVELOPMENT" } }),
          shortcut: "\u2318K"
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime285.jsx)(
        Input,
        {
          disabled,
          variant: "tertiary",
          placeholder: "Search",
          icon: /* @__PURE__ */ (0, import_jsx_runtime285.jsx)(EnvironmentLabel, { environment: { type: "STAGING" } }),
          shortcut: "\u2318K"
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime285.jsx)(
        Input,
        {
          disabled,
          variant: "tertiary",
          placeholder: "Search",
          icon: /* @__PURE__ */ (0, import_jsx_runtime285.jsx)(EnvironmentLabel, { environment: { type: "PRODUCTION" } }),
          shortcut: "\u2318K"
        }
      )
    ] })
  ] });
}

// app/routes/admin.api.v1.simulate.ts
var admin_api_v1_simulate_exports = {};
__export(admin_api_v1_simulate_exports, {
  action: () => action79
});
var import_server_runtime92 = require("@remix-run/server-runtime");
async function action79({ request }) {
  let authenticationResult = await authenticateApiRequest(request);
  if (!authenticationResult)
    return (0, import_server_runtime92.json)({ error: "Invalid or Missing API key" }, { status: 401 });
  if (!(await prisma.orgMember.findMany({
    where: {
      organizationId: authenticationResult.environment.organizationId,
      user: {
        admin: !0
      }
    }
  })).length)
    return (0, import_server_runtime92.json)({ error: "You must be an admin to perform this action" }, { status: 403 });
  let body = await request.json();
  return await workerQueue.enqueue("simulate", {
    seconds: body.seconds
  }), (0, import_server_runtime92.json)({ success: !0 });
}

// app/routes/admin.api.v1.snapshot.ts
var admin_api_v1_snapshot_exports = {};
__export(admin_api_v1_snapshot_exports, {
  loader: () => loader122
});
var import_fs2 = __toESM(require("fs")), import_os = __toESM(require("os")), import_path = __toESM(require("path")), import_stream3 = require("stream"), import_v8 = __toESM(require("v8"));
function formatDate(date) {
  let year = date.getFullYear(), month = date.getMonth() + 1, day = date.getDate(), hours = date.getHours(), minutes = date.getMinutes(), seconds = date.getSeconds(), milliseconds = date.getMilliseconds();
  return `${year}-${month.toString().padStart(2, "0")}-${day.toString().padStart(2, "0")} ${hours.toString().padStart(2, "0")}_${minutes.toString().padStart(2, "0")}_${seconds.toString().padStart(2, "0")}_${milliseconds.toString().padStart(3, "0")}`;
}
async function loader122({ request }) {
  if (!(await requireUser(request)).admin)
    throw new Response("You must be an admin to perform this action", { status: 403 });
  let tempDir = import_os.default.tmpdir(), filepath = import_path.default.join(
    tempDir,
    `${getTaskIdentifier()}-${formatDate(/* @__PURE__ */ new Date())}.heapsnapshot`
  ), snapshotPath = import_v8.default.writeHeapSnapshot(filepath);
  if (!snapshotPath)
    throw new Response("No snapshot saved", { status: 500 });
  let body = new import_stream3.PassThrough(), stream = import_fs2.default.createReadStream(snapshotPath);
  return stream.on("open", () => stream.pipe(body)), stream.on("error", (err) => body.end(err)), stream.on("end", () => body.end()), new Response(body, {
    status: 200,
    headers: {
      "Content-Type": "application/octet-stream",
      "Content-Disposition": `attachment; filename="${import_path.default.basename(snapshotPath)}"`,
      "Content-Length": (await import_fs2.default.promises.stat(snapshotPath)).size.toString()
    }
  });
}
function getTaskIdentifier() {
  return process.env.ECS_CONTAINER_METADATA_URI ? new URL(process.env.ECS_CONTAINER_METADATA_URI).pathname.split("/")[2].split("-")[0] : "local";
}

// app/routes/confirm-basic-details.tsx
var confirm_basic_details_exports = {};
__export(confirm_basic_details_exports, {
  action: () => action80,
  default: () => Page70
});
var import_react219 = require("@conform-to/react"), import_zod240 = require("@conform-to/zod"), import_solid108 = require("@heroicons/react/20/solid"), import_solid109 = require("@heroicons/react/24/solid"), import_node15 = require("@remix-run/node"), import_react220 = require("@remix-run/react"), import_framer_motion14 = require("framer-motion"), import_react221 = require("react"), import_zod241 = require("zod");
var import_jsx_runtime286 = require("react/jsx-runtime");
function createSchema5(constraints = {}) {
  return import_zod241.z.object({
    name: import_zod241.z.string().min(3, "Your name must be at least 3 characters").max(50),
    email: import_zod241.z.string().email().superRefine((email, ctx) => {
      if (constraints.isEmailUnique === void 0)
        ctx.addIssue({
          code: import_zod241.z.ZodIssueCode.custom,
          message: import_react219.conform.VALIDATION_UNDEFINED
        });
      else
        return constraints.isEmailUnique(email).then((isUnique) => {
          isUnique || ctx.addIssue({
            code: import_zod241.z.ZodIssueCode.custom,
            message: "Email is already being used by a different account"
          });
        });
    }),
    confirmEmail: import_zod241.z.string(),
    referralSource: import_zod241.z.string().optional()
  }).refine((value) => value.email === value.confirmEmail, {
    message: "Emails must match",
    path: ["confirmEmail"]
  });
}
var action80 = async ({ request }) => {
  let userId = await requireUserId(request), formData = await request.formData(), formSchema = createSchema5({
    isEmailUnique: async (email) => {
      let existingUser = await prisma.user.findFirst({
        where: {
          email
        }
      });
      return !existingUser || existingUser.id === userId;
    }
  }), submission = await (0, import_zod240.parse)(formData, { schema: formSchema, async: !0 });
  if (!submission.value)
    return (0, import_node15.json)(submission);
  try {
    let updatedUser = await updateUser({
      id: userId,
      name: submission.value.name,
      email: submission.value.email,
      referralSource: submission.value.referralSource
    });
    return redirectWithSuccessMessage(rootPath(), request, "Your details have been updated.");
  } catch (error) {
    return (0, import_node15.json)({ errors: { body: error.message } }, { status: 400 });
  }
}, HandIcon = (0, import_react221.forwardRef)(({}, ref) => /* @__PURE__ */ (0, import_jsx_runtime286.jsx)("div", { ref, children: /* @__PURE__ */ (0, import_jsx_runtime286.jsx)(import_solid109.HandRaisedIcon, { className: "h-7 w-7 text-amber-300" }) })), MotionHand = (0, import_framer_motion14.motion)(HandIcon);
function Page70() {
  let user = useUser(), lastSubmission = (0, import_react220.useActionData)(), [enteredEmail, setEnteredEmail] = (0, import_react221.useState)(user.email ?? ""), { isManagedCloud: isManagedCloud2 } = useFeatures(), [form, { name, email, confirmEmail, referralSource }] = (0, import_react219.useForm)({
    id: "confirm-basic-details",
    // TODO: type this
    lastSubmission,
    onValidate({ formData }) {
      return (0, import_zod240.parse)(formData, { schema: createSchema5() });
    },
    shouldRevalidate: "onSubmit"
  }), shouldShowConfirm = user.email !== enteredEmail || user.email === "";
  return /* @__PURE__ */ (0, import_jsx_runtime286.jsx)(AppContainer, { children: /* @__PURE__ */ (0, import_jsx_runtime286.jsx)(MainCenteredContainer, { className: "max-w-[22rem]", children: /* @__PURE__ */ (0, import_jsx_runtime286.jsxs)(import_react220.Form, { method: "post", ...form.props, children: [
    /* @__PURE__ */ (0, import_jsx_runtime286.jsx)(
      FormTitle,
      {
        title: "Welcome to Trigger.dev",
        LeadingIcon: /* @__PURE__ */ (0, import_jsx_runtime286.jsx)(
          MotionHand,
          {
            style: {
              originY: 0.75
            },
            initial: {
              rotate: 0
            },
            animate: {
              rotate: [0, -20, 0, 20, 0, -20, 0, 20, 0]
            },
            transition: {
              delay: 1,
              duration: 1,
              repeatDelay: 5,
              repeat: 1 / 0,
              ease: "linear"
            }
          }
        ),
        description: "We just need you to confirm a couple of details, it'll only take a minute."
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime286.jsxs)(Fieldset, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime286.jsxs)(InputGroup, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime286.jsx)(Label, { htmlFor: name.id, children: "Full name" }),
        /* @__PURE__ */ (0, import_jsx_runtime286.jsx)(
          Input,
          {
            ...import_react219.conform.input(name, { type: "text" }),
            defaultValue: user.name ?? "",
            placeholder: "Your full name",
            icon: "user",
            autoFocus: !0
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime286.jsx)(Hint, { children: "Your team will see this name and we'll use it if we need to contact you." }),
        /* @__PURE__ */ (0, import_jsx_runtime286.jsx)(FormError, { id: name.errorId, children: name.error })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime286.jsxs)(InputGroup, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime286.jsx)(Label, { htmlFor: email.id, children: "Email" }),
        /* @__PURE__ */ (0, import_jsx_runtime286.jsx)(
          Input,
          {
            ...import_react219.conform.input(email, { type: "email" }),
            defaultValue: enteredEmail,
            onChange: (e) => {
              setEnteredEmail(e.target.value);
            },
            placeholder: "Your email address",
            icon: "envelope",
            spellCheck: !1
          }
        ),
        !shouldShowConfirm && /* @__PURE__ */ (0, import_jsx_runtime286.jsx)(Hint, { children: "Check this is the email you'd like associated with your Trigger.dev account." }),
        /* @__PURE__ */ (0, import_jsx_runtime286.jsx)(FormError, { id: email.errorId, children: email.error })
      ] }),
      shouldShowConfirm ? /* @__PURE__ */ (0, import_jsx_runtime286.jsxs)(InputGroup, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime286.jsx)(Label, { htmlFor: confirmEmail.id, children: "Confirm email" }),
        /* @__PURE__ */ (0, import_jsx_runtime286.jsx)(
          Input,
          {
            ...import_react219.conform.input(confirmEmail, { type: "email" }),
            placeholder: "Your email, again",
            icon: "envelope",
            spellCheck: !1
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime286.jsx)(Hint, { children: "Check this is the email you'd like associated with your Trigger.dev account." }),
        /* @__PURE__ */ (0, import_jsx_runtime286.jsx)(FormError, { id: confirmEmail.errorId, children: confirmEmail.error })
      ] }) : /* @__PURE__ */ (0, import_jsx_runtime286.jsx)(import_jsx_runtime286.Fragment, { children: /* @__PURE__ */ (0, import_jsx_runtime286.jsx)("input", { ...import_react219.conform.input(confirmEmail, { type: "hidden" }), value: user.email }) }),
      isManagedCloud2 && /* @__PURE__ */ (0, import_jsx_runtime286.jsxs)(InputGroup, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime286.jsx)(Label, { htmlFor: confirmEmail.id, children: "How did you hear about us?" }),
        /* @__PURE__ */ (0, import_jsx_runtime286.jsx)(
          Input,
          {
            ...import_react219.conform.input(referralSource, { type: "text" }),
            placeholder: "Google, Twitter\u2026?",
            icon: "heart",
            spellCheck: !1
          }
        )
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime286.jsx)(
        FormButtons,
        {
          confirmButton: /* @__PURE__ */ (0, import_jsx_runtime286.jsx)(Button, { type: "submit", variant: "primary/small", TrailingIcon: import_solid108.ArrowRightIcon, children: "Continue" })
        }
      )
    ] })
  ] }) }) });
}

// app/routes/resources.jobs.$jobId.ts
var resources_jobs_jobId_exports = {};
__export(resources_jobs_jobId_exports, {
  action: () => action81,
  loader: () => loader123
});
var import_remix_typedjson85 = require("remix-typedjson"), import_zod242 = require("zod");

// app/services/jobs/deleteJob.server.ts
var DeleteJobService = class {
  #prismaClient;
  constructor(prismaClient = prisma) {
    this.#prismaClient = prismaClient;
  }
  async call(job) {
    if (!(await this.#prismaClient.jobAlias.findMany({
      where: {
        jobId: job.id,
        name: "latest"
      },
      include: {
        version: !0
      }
    })).every((alias) => alias.version.status === "DISABLED"))
      throw logger.info("Not all latest versions are disabled, cannot delete job", { jobId: job.id }), new Error("All latest versions must be disabled before deleting a job");
    await this.#prismaClient.job.update({
      where: {
        id: job.id
      },
      data: {
        deletedAt: /* @__PURE__ */ new Date()
      }
    }), telemetry.project.deletedJob({
      job
    });
  }
};

// app/routes/resources.jobs.$jobId.ts
var ParamSchema7 = import_zod242.z.object({
  jobId: import_zod242.z.string()
});
async function loader123({ request, params }) {
  let userId = await requireUserId(request), { jobId } = ParamSchema7.parse(params), job = await prisma.job.findFirst({
    select: {
      id: !0,
      slug: !0,
      title: !0,
      aliases: {
        select: {
          version: {
            select: {
              version: !0,
              status: !0,
              concurrencyLimit: !0,
              concurrencyLimitGroup: {
                select: {
                  name: !0,
                  concurrencyLimit: !0
                }
              },
              runs: {
                select: {
                  createdAt: !0,
                  status: !0
                },
                take: 1,
                orderBy: [{ createdAt: "desc" }]
              }
            }
          },
          environment: {
            select: {
              type: !0,
              orgMember: {
                select: {
                  userId: !0
                }
              }
            }
          }
        },
        where: {
          name: "latest"
        }
      }
    },
    where: {
      id: jobId,
      deletedAt: null,
      organization: {
        members: {
          some: {
            userId
          }
        }
      }
    }
  });
  if (!job)
    throw new Response("Not Found", { status: 404 });
  let environments2 = job.aliases.map((alias) => ({
    type: alias.environment.type,
    enabled: alias.version.status === "ACTIVE",
    lastRun: alias.version.runs.at(0)?.createdAt,
    version: alias.version.version,
    concurrencyLimit: alias.version.concurrencyLimit,
    concurrencyLimitGroup: alias.version.concurrencyLimitGroup
  }));
  return (0, import_remix_typedjson85.typedjson)({
    environments: environments2
  });
}
var action81 = async ({ request, params }) => {
  if (request.method.toUpperCase() !== "DELETE")
    return { status: 405, body: "Method Not Allowed" };
  let { jobId } = ParamSchema7.parse(params), userId = await requireUserId(request), job = await prisma.job.findFirst({
    where: {
      id: jobId,
      organization: {
        members: {
          some: {
            userId
          }
        }
      }
    }
  });
  if (!job)
    return jsonWithErrorMessage({ ok: !1 }, request, "Job could not be scheduled for deletion.");
  try {
    await new DeleteJobService().call(job);
    let url = new URL(request.url), redirectTo = url.searchParams.get("redirectTo");
    return logger.debug("Job scheduled for deletion", {
      url,
      redirectTo,
      job
    }), typeof redirectTo == "string" && redirectTo.length > 0 ? redirectWithSuccessMessage(
      redirectTo,
      request,
      `Job ${job.slug} has been scheduled for deletion.`
    ) : jsonWithSuccessMessage(
      { ok: !0 },
      request,
      `Job ${job.slug} has been scheduled for deletion.`
    );
  } catch (error) {
    let message = error instanceof Error ? error.message : "Unknown error";
    return jsonWithErrorMessage(
      { ok: !1 },
      request,
      `Job could not be scheduled for deletion: ${message}`
    );
  }
};

// app/routes/storybook.date-fields/route.tsx
var route_exports126 = {};
__export(route_exports126, {
  default: () => Story10
});
var import_jsx_runtime287 = require("react/jsx-runtime");
function Story10() {
  return /* @__PURE__ */ (0, import_jsx_runtime287.jsxs)("div", { className: "m-8 space-y-8", children: [
    /* @__PURE__ */ (0, import_jsx_runtime287.jsxs)("div", { className: "flex flex-col gap-4", children: [
      /* @__PURE__ */ (0, import_jsx_runtime287.jsx)(Header2, { children: "Size = small" }),
      /* @__PURE__ */ (0, import_jsx_runtime287.jsx)(DateField, { label: "From (UTC)", granularity: "second", showNowButton: !0, showClearButton: !0 }),
      /* @__PURE__ */ (0, import_jsx_runtime287.jsx)(
        DateField,
        {
          label: "From (UTC)",
          defaultValue: /* @__PURE__ */ new Date(),
          granularity: "second",
          showNowButton: !0,
          showClearButton: !0
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime287.jsx)(AbsoluteTimeFrame, { onValueChange: () => {
      } }),
      /* @__PURE__ */ (0, import_jsx_runtime287.jsx)(
        AbsoluteTimeFrame,
        {
          from: new Date(Date.now() - 1e3 * 60 * 60),
          to: /* @__PURE__ */ new Date(),
          onValueChange: () => {
          }
        }
      )
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime287.jsxs)("div", { className: "flex flex-col gap-4", children: [
      /* @__PURE__ */ (0, import_jsx_runtime287.jsx)(Header2, { children: "Size = medium" }),
      /* @__PURE__ */ (0, import_jsx_runtime287.jsx)(
        DateField,
        {
          label: "From (UTC)",
          granularity: "second",
          showNowButton: !0,
          showClearButton: !0,
          variant: "medium"
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime287.jsx)(
        DateField,
        {
          label: "From (UTC)",
          defaultValue: /* @__PURE__ */ new Date(),
          granularity: "second",
          showNowButton: !0,
          showClearButton: !0,
          variant: "medium"
        }
      )
    ] })
  ] });
}

// app/routes/storybook.detail-cell/route.tsx
var route_exports127 = {};
__export(route_exports127, {
  default: () => Story11
});
var import_solid110 = require("@heroicons/react/20/solid");
var import_jsx_runtime288 = require("react/jsx-runtime");
function Story11() {
  return /* @__PURE__ */ (0, import_jsx_runtime288.jsxs)("div", { className: "flex max-w-xl flex-col items-start gap-y-8 p-8", children: [
    /* @__PURE__ */ (0, import_jsx_runtime288.jsx)(
      DetailCell,
      {
        leadingIcon: "integration",
        leadingIconClassName: "text-text-dimmed",
        label: "Learn how to create your own API Integrations",
        variant: "base",
        trailingIcon: "external-link",
        trailingIconClassName: "text-charcoal-700 group-hover:text-text-bright"
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime288.jsx)(
      DetailCell,
      {
        leadingIcon: import_solid110.CodeBracketIcon,
        leadingIconClassName: "text-blue-500",
        label: "Issue comment created",
        trailingIcon: "check",
        trailingIconClassName: "text-green-500 group-hover:text-green-400"
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime288.jsx)(
      DetailCell,
      {
        leadingIcon: import_solid110.ClockIcon,
        leadingIconClassName: "text-charcoal-400",
        label: /* @__PURE__ */ (0, import_jsx_runtime288.jsx)(DateTime, { date: /* @__PURE__ */ new Date() }),
        description: "Run #42 complete",
        trailingIcon: "plus",
        trailingIconClassName: "text-charcoal-500 group-hover:text-text-bright"
      }
    )
  ] });
}

// app/routes/storybook.inline-code/route.tsx
var route_exports128 = {};
__export(route_exports128, {
  default: () => Story12
});
var import_jsx_runtime289 = require("react/jsx-runtime");
function Story12() {
  return /* @__PURE__ */ (0, import_jsx_runtime289.jsx)("div", { className: "grid h-full place-content-center", children: /* @__PURE__ */ (0, import_jsx_runtime289.jsxs)(Paragraph, { children: [
    "You should use ",
    /* @__PURE__ */ (0, import_jsx_runtime289.jsx)(InlineCode, { children: "id: my-first-job" }),
    " when you want to achieve this."
  ] }) });
}

// app/routes/storybook.page-header/route.tsx
var route_exports129 = {};
__export(route_exports129, {
  default: () => Story13
});
var import_jsx_runtime290 = require("react/jsx-runtime");
function Story13() {
  return /* @__PURE__ */ (0, import_jsx_runtime290.jsxs)("div", { className: "flex flex-col gap-4 bg-charcoal-800 p-4", children: [
    /* @__PURE__ */ (0, import_jsx_runtime290.jsx)("div", { className: "bg-background-bright", children: /* @__PURE__ */ (0, import_jsx_runtime290.jsxs)(NavBar, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime290.jsx)(PageTitle, { title: "Organizations" }),
      /* @__PURE__ */ (0, import_jsx_runtime290.jsx)(PageAccessories, { children: /* @__PURE__ */ (0, import_jsx_runtime290.jsx)(LinkButton, { to: "", variant: "primary/small", shortcut: { key: "n" }, children: "Create a new Organization" }) })
    ] }) }),
    /* @__PURE__ */ (0, import_jsx_runtime290.jsx)("div", { className: "bg-background-bright", children: /* @__PURE__ */ (0, import_jsx_runtime290.jsxs)(NavBar, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime290.jsx)(PageTitle, { title: "Your Organizations", backButton: { to: "#", text: "Orgs" } }),
      /* @__PURE__ */ (0, import_jsx_runtime290.jsx)(PageAccessories, { children: /* @__PURE__ */ (0, import_jsx_runtime290.jsx)(LinkButton, { to: "", variant: "primary/small", shortcut: { key: "n" }, children: "Create a new Organization" }) })
    ] }) })
  ] });
}

// app/routes/storybook.radio-group/route.tsx
var route_exports130 = {};
__export(route_exports130, {
  default: () => Story14
});
var import_react222 = require("react");
var import_jsx_runtime291 = require("react/jsx-runtime");
function Story14() {
  let [isDisabled, setIsDisabled] = (0, import_react222.useState)(!1);
  return /* @__PURE__ */ (0, import_jsx_runtime291.jsxs)("div", { className: "flex flex-col items-start gap-y-8 p-8", children: [
    /* @__PURE__ */ (0, import_jsx_runtime291.jsx)(
      Button,
      {
        onClick: () => setIsDisabled((d) => !d),
        variant: "primary/medium",
        className: "max-w-fit",
        children: isDisabled ? "Enable" : "Disable"
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime291.jsx)("form", { children: /* @__PURE__ */ (0, import_jsx_runtime291.jsxs)(RadioGroup, { name: "simple", disabled: isDisabled, className: "grid gap-2", children: [
      /* @__PURE__ */ (0, import_jsx_runtime291.jsx)(RadioGroupItem, { id: "r2", label: "Simple small", value: "1", variant: "simple/small" }),
      /* @__PURE__ */ (0, import_jsx_runtime291.jsx)(RadioGroupItem, { id: "r3", label: "Simple", value: "2", variant: "simple" }),
      /* @__PURE__ */ (0, import_jsx_runtime291.jsx)(RadioGroupItem, { id: "r4", label: "Button small", value: "3", variant: "button/small" }),
      /* @__PURE__ */ (0, import_jsx_runtime291.jsx)(RadioGroupItem, { id: "r5", label: "Button", value: "4", variant: "button" }),
      /* @__PURE__ */ (0, import_jsx_runtime291.jsx)(
        RadioGroupItem,
        {
          id: "r6",
          label: "This is a label",
          description: "This is a description",
          value: "5",
          variant: "description"
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime291.jsx)(
        RadioGroupItem,
        {
          id: "r7",
          label: "This is an icon label",
          description: "This is a description",
          value: "6",
          variant: "icon",
          icon: /* @__PURE__ */ (0, import_jsx_runtime291.jsx)(NamedIcon, { name: "tree", className: "h-8 w-8" })
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime291.jsx)(
        RadioGroupItem,
        {
          id: "r8",
          label: /* @__PURE__ */ (0, import_jsx_runtime291.jsxs)("div", { className: "flex items-center gap-2", children: [
            /* @__PURE__ */ (0, import_jsx_runtime291.jsx)("span", { children: "This is a" }),
            " ",
            /* @__PURE__ */ (0, import_jsx_runtime291.jsx)("span", { className: "text-red-500", children: "React node" })
          ] }),
          value: "8",
          variant: "simple/small"
        }
      )
    ] }) })
  ] });
}

// app/routes/storybook.simple-form/route.tsx
var route_exports131 = {};
__export(route_exports131, {
  default: () => Story15
});
var import_react223 = require("@remix-run/react");
var import_jsx_runtime292 = require("react/jsx-runtime");
function Story15() {
  return /* @__PURE__ */ (0, import_jsx_runtime292.jsx)(MainCenteredContainer, { children: /* @__PURE__ */ (0, import_jsx_runtime292.jsxs)("div", { children: [
    /* @__PURE__ */ (0, import_jsx_runtime292.jsx)(
      FormTitle,
      {
        LeadingIcon: "organization",
        title: "Create a new Organization",
        description: "Organizations are a great way to group your Projects."
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime292.jsx)(import_react223.Form, { children: /* @__PURE__ */ (0, import_jsx_runtime292.jsxs)(Fieldset, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime292.jsxs)(InputGroup, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime292.jsx)(Label, { children: "Organization name" }),
        /* @__PURE__ */ (0, import_jsx_runtime292.jsx)(
          Input,
          {
            placeholder: "Your org name",
            required: !0,
            defaultValue: "Acme Inc.",
            icon: "organization"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime292.jsx)(Hint, { children: "E.g. your company name or your workspace name." })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime292.jsxs)(InputGroup, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime292.jsx)(Label, { children: "Project name" }),
        /* @__PURE__ */ (0, import_jsx_runtime292.jsx)(Input, { placeholder: "Your Project name", required: !0, icon: "folder" }),
        /* @__PURE__ */ (0, import_jsx_runtime292.jsx)(FormError, { children: "You must enter a project name" }),
        /* @__PURE__ */ (0, import_jsx_runtime292.jsx)(Hint, { children: "Your Jobs will live inside this Project." })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime292.jsx)(
        FormButtons,
        {
          confirmButton: /* @__PURE__ */ (0, import_jsx_runtime292.jsx)(Button, { type: "submit", variant: "primary/small", TrailingIcon: "arrow-right", children: "Create" }),
          cancelButton: /* @__PURE__ */ (0, import_jsx_runtime292.jsx)(Button, { variant: "secondary/small", children: "Cancel" })
        }
      )
    ] }) })
  ] }) });
}

// app/routes/api.v1.webhooks.$key.ts
var api_v1_webhooks_key_exports = {};
__export(api_v1_webhooks_key_exports, {
  action: () => action82
});
var import_server_runtime93 = require("@remix-run/server-runtime");
var import_zod243 = require("zod");

// app/services/sources/updateWebhook.server.ts
var UpdateWebhookService = class {
  #prismaClient;
  constructor(prismaClient = prisma) {
    this.#prismaClient = prismaClient;
  }
  async call({
    environment,
    payload,
    key
  }) {
    let webhook = await this.#prismaClient.webhook.findUniqueOrThrow({
      where: {
        key_projectId: {
          key,
          projectId: environment.projectId
        }
      }
    });
    return await this.#prismaClient.webhook.update({
      where: {
        key_projectId: {
          key,
          projectId: environment.projectId
        }
      },
      data: {
        active: payload.active,
        webhookEnvironments: {
          update: {
            where: {
              environmentId_webhookId: {
                environmentId: environment.id,
                webhookId: webhook.id
              }
            },
            data: {
              active: payload.active,
              config: payload.active ? payload.config : void 0
            }
          }
        }
      }
    }), {
      id: webhook.id,
      key: webhook.key
    };
  }
};

// app/routes/api.v1.webhooks.$key.ts
var ParamsSchema81 = import_zod243.z.object({
  key: import_zod243.z.string()
});
async function action82({ request, params }) {
  if (logger.info("Updating webhook", { url: request.url }), request.method.toUpperCase() !== "PUT")
    return { status: 405, body: "Method Not Allowed" };
  let parsedParams = ParamsSchema81.safeParse(params);
  if (!parsedParams.success)
    return logger.info("Invalid params", { params }), (0, import_server_runtime93.json)({ error: "Invalid params" }, { status: 400 });
  let authenticationResult = await authenticateApiRequest(request);
  if (!authenticationResult)
    return logger.info("Invalid or missing api key", { url: request.url }), (0, import_server_runtime93.json)({ error: "Invalid or Missing API key" }, { status: 401 });
  let authenticatedEnv = authenticationResult.environment, anyBody = await request.json(), body = UpdateWebhookBodySchema.safeParse(anyBody);
  if (!body.success)
    return (0, import_server_runtime93.json)({ error: "Invalid request body" }, { status: 400 });
  let service = new UpdateWebhookService();
  try {
    let source = await service.call({
      environment: authenticatedEnv,
      payload: body.data,
      key: parsedParams.data.key
    });
    return (0, import_server_runtime93.json)(source);
  } catch (error) {
    return error instanceof Error ? (logger.error("Error updating webhook", {
      url: request.url,
      error: error.message
    }), (0, import_server_runtime93.json)({ error: error.message }, { status: 400 })) : (0, import_server_runtime93.json)({ error: "Something went wrong" }, { status: 500 });
  }
}

// app/routes/auth.github.callback.tsx
var auth_github_callback_exports = {};
__export(auth_github_callback_exports, {
  loader: () => loader125
});

// app/routes/auth.github.ts
var auth_github_exports = {};
__export(auth_github_exports, {
  action: () => action83,
  loader: () => loader124,
  redirectCookie: () => redirectCookie
});
var import_node16 = require("@remix-run/node"), import_node17 = require("@remix-run/node");
var loader124 = () => (0, import_node17.redirect)("/login"), action83 = async ({ request }) => {
  let redirectTo = new URL(request.url).searchParams.get("redirectTo");
  try {
    return await authenticator.authenticate("github", request, {
      successRedirect: redirectTo ?? "/",
      failureRedirect: "/login"
    });
  } catch (error) {
    throw error instanceof Response && error.headers.append("Set-Cookie", await redirectCookie.serialize(redirectTo)), error;
  }
}, redirectCookie = (0, import_node16.createCookie)("redirect-to", {
  maxAge: 60 * 60,
  // 1 hour
  httpOnly: !0
});

// app/routes/auth.github.callback.tsx
var loader125 = async ({ request }) => {
  let cookie = request.headers.get("Cookie"), redirectTo = await redirectCookie.parse(cookie) ?? "/";
  logger.debug("auth.github.callback loader", {
    redirectTo
  });
  let authuser = await authenticator.authenticate("github", request, {
    successRedirect: redirectTo,
    failureRedirect: "/login"
  });
  return logger.debug("auth.github.callback authuser", {
    authuser
  }), authuser;
};

// app/routes/storybook.checkboxes/route.tsx
var route_exports132 = {};
__export(route_exports132, {
  default: () => Story16
});
var import_react224 = require("react");
var import_jsx_runtime293 = require("react/jsx-runtime");
function Story16() {
  let [isDisabled, setIsDisabled] = (0, import_react224.useState)(!1);
  return /* @__PURE__ */ (0, import_jsx_runtime293.jsxs)("div", { className: "flex flex-col items-start gap-y-8 p-8", children: [
    /* @__PURE__ */ (0, import_jsx_runtime293.jsx)(
      Button,
      {
        onClick: () => setIsDisabled((d) => !d),
        variant: "primary/medium",
        className: "max-w-fit",
        children: isDisabled ? "Enable checkboxes" : "Disable checkboxes"
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime293.jsx)(
      CheckboxWithLabel,
      {
        name: "Simple checkbox",
        id: "check1",
        variant: "simple/small",
        label: "This is a simple small checkbox",
        disabled: isDisabled
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime293.jsx)(
      CheckboxWithLabel,
      {
        name: "Simple checkbox",
        id: "check1",
        variant: "simple",
        label: "This is a simple checkbox",
        disabled: isDisabled
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime293.jsx)(
      CheckboxWithLabel,
      {
        name: "Button checkbox",
        id: "check2",
        variant: "button",
        label: "This is a button checkbox",
        disabled: isDisabled
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime293.jsx)(
      CheckboxWithLabel,
      {
        name: "Button checkbox",
        id: "check2",
        variant: "button",
        label: "This is a button checkbox with a badge",
        badges: ["This is a badge"],
        disabled: isDisabled
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime293.jsx)(
      CheckboxWithLabel,
      {
        name: "Button checkbox",
        id: "check2",
        variant: "button",
        defaultChecked: !0,
        label: "This is a button checkbox that's default checked",
        disabled: isDisabled
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime293.jsxs)("div", { className: "flex flex-col gap-y-0.5 overflow-hidden rounded-md", children: [
      /* @__PURE__ */ (0, import_jsx_runtime293.jsx)(
        CheckboxWithLabel,
        {
          name: "Description checkbox",
          id: "check3",
          variant: "description",
          badges: ["This is a badge"],
          label: "This is a checkbox with a description and badge",
          description: "This is a long checkbox description that goes full width. Grants full access to public and private repositories including read and write access to code, commit statuses, repository invitations, collaborators, deployment statuses, and repository webhooks. Note: In addition to repository related resources, the repo scope also grants access to manage organization-owned resources including projects, invitations, team memberships and webhooks. This scope also grants the ability to manage projects owned by users.",
          disabled: isDisabled
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime293.jsx)(
        CheckboxWithLabel,
        {
          name: "Description checkbox",
          id: "check4",
          variant: "description",
          label: "This is a checkbox with a description",
          description: "This is a long checkbox description that goes full width. Grants full access to public and private repositories including read and write access to code, commit statuses, repository invitations, collaborators, deployment statuses, and repository webhooks. Note: In addition to repository related resources, the repo scope also grants access to manage organization-owned resources including projects, invitations, team memberships and webhooks. This scope also grants the ability to manage projects owned by users.",
          disabled: isDisabled
        }
      )
    ] })
  ] });
}

// app/routes/storybook.code-block/route.tsx
var route_exports133 = {};
__export(route_exports133, {
  default: () => Story17
});
var import_jsx_runtime294 = require("react/jsx-runtime");
function Story17() {
  return /* @__PURE__ */ (0, import_jsx_runtime294.jsxs)("div", { className: "flex flex-col items-start gap-y-8 p-8", children: [
    /* @__PURE__ */ (0, import_jsx_runtime294.jsxs)("div", { children: [
      /* @__PURE__ */ (0, import_jsx_runtime294.jsx)(Header2, { children: "Inline field" }),
      /* @__PURE__ */ (0, import_jsx_runtime294.jsx)(CodeBlock3, { code: '{ id: "my-first-job" }' })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime294.jsxs)("div", { children: [
      /* @__PURE__ */ (0, import_jsx_runtime294.jsx)(Header2, { className: "mb-2", children: "With title row" }),
      /* @__PURE__ */ (0, import_jsx_runtime294.jsx)(
        CodeBlock3,
        {
          rowTitle: "Trigger client",
          code: `export const client = new TriggerClient("smoke-test", {
  apiUrl: "http://localhost:3000",
  endpoint: "http://localhost:3007/__trigger/entry",
  logLevel: "debug",
  longLine: "This is a long line that will scroll off the edge of the screen and cause a horizontal scrollbar",
});`
        }
      )
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime294.jsxs)("div", { children: [
      /* @__PURE__ */ (0, import_jsx_runtime294.jsx)(Header2, { className: "mb-2", children: "showChrome" }),
      /* @__PURE__ */ (0, import_jsx_runtime294.jsx)(
        CodeBlock3,
        {
          showChrome: !0,
          fileName: "trigger-client.ts",
          code: `export const client = new TriggerClient("smoke-test", {
  apiUrl: "http://localhost:3000",
  endpoint: "http://localhost:3007/__trigger/entry",
  logLevel: "debug",
  longLine: "This is a long line that will scroll off the edge of the screen and cause a horizontal scrollbar",
  onLog: (log) => {
    console.log(log);
  },
  onLogError: (log) => {
    console.error(log);
  },
  onLogWarning: (log) => {
    console.warn(log);
  },
  onLogInfo: (log) => {
    console.info(log);
  },
});`
        }
      )
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime294.jsxs)("div", { children: [
      /* @__PURE__ */ (0, import_jsx_runtime294.jsx)(Header2, { className: "mb-2", children: "Inline copy button" }),
      /* @__PURE__ */ (0, import_jsx_runtime294.jsx)(
        CodeBlock3,
        {
          code: `export const client = new TriggerClient("smoke-test", {
  apiUrl: "http://localhost:3000",
  endpoint: "http://localhost:3007/__trigger/entry",
  logLevel: "debug",
  longLine: "This is a long line that will scroll off the edge of the screen and cause a horizontal scrollbar",
  onLog: (log) => {
    console.log(log);
  },
  onLogError: (log) => {
    console.error(log);
  },
  onLogWarning: (log) => {
    console.warn(log);
  },
  onLogInfo: (log) => {
    console.info(log);
  },
});`
        }
      )
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime294.jsxs)("div", { children: [
      /* @__PURE__ */ (0, import_jsx_runtime294.jsx)(Header2, { className: "mb-2", children: "Highlighted range" }),
      /* @__PURE__ */ (0, import_jsx_runtime294.jsx)(
        CodeBlock3,
        {
          code: `export const client = new TriggerClient("smoke-test", {
  apiUrl: "http://localhost:3000",
  endpoint: "http://localhost:3007/__trigger/entry",
  logLevel: "debug",
  longLine: "This is a long line that will scroll off the edge of the screen and cause a horizontal scrollbar",
  onLog: (log) => {
    console.log(log);
  },
  onLogError: (log) => {
    console.error(log);
  },
  onLogWarning: (log) => {
    console.warn(log);
  },
  onLogInfo: (log) => {
    console.info(log);
  },
});`,
          highlightedRanges: [
            [6, 8],
            [12, 14]
          ]
        }
      )
    ] })
  ] });
}

// app/routes/storybook.named-icon/route.tsx
var route_exports134 = {};
__export(route_exports134, {
  default: () => Story18
});
var import_jsx_runtime295 = require("react/jsx-runtime");
function Story18() {
  return /* @__PURE__ */ (0, import_jsx_runtime295.jsxs)("div", { className: "flex flex-col gap-4 p-12", children: [
    /* @__PURE__ */ (0, import_jsx_runtime295.jsxs)("div", { children: [
      /* @__PURE__ */ (0, import_jsx_runtime295.jsx)(Header1, { spacing: !0, children: "Internal" }),
      /* @__PURE__ */ (0, import_jsx_runtime295.jsx)("div", { className: "grid grid-cols-8 gap-4", children: iconNames.sort((a, b) => a.localeCompare(b)).map((iconName) => /* @__PURE__ */ (0, import_jsx_runtime295.jsxs)("div", { className: "flex items-center gap-2", children: [
        /* @__PURE__ */ (0, import_jsx_runtime295.jsx)("div", { children: /* @__PURE__ */ (0, import_jsx_runtime295.jsx)(NamedIcon, { name: iconName, className: "h-6 w-6" }) }),
        /* @__PURE__ */ (0, import_jsx_runtime295.jsx)("span", { className: "text-xs text-text-dimmed", children: iconName })
      ] }, iconName)) })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime295.jsxs)("div", { children: [
      /* @__PURE__ */ (0, import_jsx_runtime295.jsx)(Header1, { spacing: !0, children: "Tabler" }),
      /* @__PURE__ */ (0, import_jsx_runtime295.jsx)("div", { className: "grid grid-cols-8 gap-4", children: Array.from(tablerIcons).map((iconName) => /* @__PURE__ */ (0, import_jsx_runtime295.jsxs)("div", { className: "flex items-center gap-2", children: [
        /* @__PURE__ */ (0, import_jsx_runtime295.jsx)("div", { children: /* @__PURE__ */ (0, import_jsx_runtime295.jsx)(NamedIcon, { name: iconName, className: "h-6 w-6 text-indigo-500" }) }),
        /* @__PURE__ */ (0, import_jsx_runtime295.jsx)("span", { className: "text-xs text-text-dimmed", children: iconName })
      ] }, iconName)) })
    ] })
  ] });
}

// app/routes/storybook.typography/route.tsx
var route_exports135 = {};
__export(route_exports135, {
  default: () => Story19
});
var import_jsx_runtime296 = require("react/jsx-runtime");
function Story19({
  header1 = "This is a Header 1",
  header2 = "This is a Header 2",
  header3 = "This is a Header 3",
  paragraph = "This is paragraph text"
}) {
  return /* @__PURE__ */ (0, import_jsx_runtime296.jsxs)("div", { className: "flex flex-col gap-8", children: [
    /* @__PURE__ */ (0, import_jsx_runtime296.jsxs)("div", { className: "flex flex-col gap-2", children: [
      /* @__PURE__ */ (0, import_jsx_runtime296.jsx)(Header1, { children: header1 }),
      /* @__PURE__ */ (0, import_jsx_runtime296.jsx)(Header1, { textColor: "dimmed", children: header1 }),
      /* @__PURE__ */ (0, import_jsx_runtime296.jsx)(Header2, { children: header2 }),
      /* @__PURE__ */ (0, import_jsx_runtime296.jsx)(Header3, { children: header3 }),
      /* @__PURE__ */ (0, import_jsx_runtime296.jsx)(Paragraph, { children: paragraph }),
      /* @__PURE__ */ (0, import_jsx_runtime296.jsx)(Paragraph, { variant: "base/bright", children: paragraph }),
      /* @__PURE__ */ (0, import_jsx_runtime296.jsx)(Paragraph, { variant: "small", children: paragraph }),
      /* @__PURE__ */ (0, import_jsx_runtime296.jsx)(Paragraph, { variant: "small/bright", children: paragraph }),
      /* @__PURE__ */ (0, import_jsx_runtime296.jsx)(Paragraph, { variant: "extra-small", children: paragraph }),
      /* @__PURE__ */ (0, import_jsx_runtime296.jsx)(Paragraph, { variant: "extra-small/bright", children: paragraph }),
      /* @__PURE__ */ (0, import_jsx_runtime296.jsx)(Paragraph, { variant: "extra-small/mono", children: paragraph }),
      /* @__PURE__ */ (0, import_jsx_runtime296.jsx)(Paragraph, { variant: "extra-small/bright/mono", children: paragraph }),
      /* @__PURE__ */ (0, import_jsx_runtime296.jsx)(Paragraph, { variant: "extra-small/caps", children: paragraph }),
      /* @__PURE__ */ (0, import_jsx_runtime296.jsx)(Paragraph, { variant: "extra-small/bright/caps", children: paragraph }),
      /* @__PURE__ */ (0, import_jsx_runtime296.jsx)(Paragraph, { variant: "extra-extra-small", children: paragraph }),
      /* @__PURE__ */ (0, import_jsx_runtime296.jsx)(Paragraph, { variant: "extra-extra-small/bright", children: paragraph }),
      /* @__PURE__ */ (0, import_jsx_runtime296.jsx)(Paragraph, { variant: "extra-extra-small/caps", children: paragraph }),
      /* @__PURE__ */ (0, import_jsx_runtime296.jsx)(Paragraph, { variant: "extra-extra-small/bright/caps", children: paragraph })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime296.jsxs)("div", { children: [
      /* @__PURE__ */ (0, import_jsx_runtime296.jsx)(Header2, { children: "Text Link" }),
      /* @__PURE__ */ (0, import_jsx_runtime296.jsxs)(Paragraph, { children: [
        "This is an ",
        /* @__PURE__ */ (0, import_jsx_runtime296.jsx)(TextLink, { href: "#", children: "anchor tag component" }),
        " called TextLink. It takes an href and children."
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime296.jsxs)(Paragraph, { children: [
        "Learn how to get",
        " ",
        /* @__PURE__ */ (0, import_jsx_runtime296.jsx)(TextLink, { href: "#", trailingIcon: "external-link", children: "started quickly" }),
        " ",
        "using the included some example Jobs which are great as a quick start project. You can check them out in your project here in triggerdotdev/jobs/examples. You can also see the examples in more detail in the docs."
      ] })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime296.jsxs)("div", { children: [
      /* @__PURE__ */ (0, import_jsx_runtime296.jsx)(Header2, { children: "Custom event JSON payload" }),
      /* @__PURE__ */ (0, import_jsx_runtime296.jsx)(Paragraph, { children: "Write your Job code. Jobs can be triggered on a schedule, via a webhook, custom event and have delays of up to 1 year. Learn how to create your first Job in code using the docs here." }),
      /* @__PURE__ */ (0, import_jsx_runtime296.jsx)(Paragraph, { children: "Learn how to get started quickly using the included some example Jobs which are great as a quick start project. You can check them out in your project here in triggerdotdev/jobs/examples. You can also see the examples in more detail in the docs." })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime296.jsxs)("div", { children: [
      /* @__PURE__ */ (0, import_jsx_runtime296.jsx)(Header2, { children: "Scopes" }),
      /* @__PURE__ */ (0, import_jsx_runtime296.jsx)(Paragraph, { variant: "small", children: "Select the scopes you want to grant to Slack in order for it to access your data. If you try and perform an action in a Job that requires a scope you haven\u2019t granted, that task will fail." }),
      /* @__PURE__ */ (0, import_jsx_runtime296.jsx)(Paragraph, { variant: "small", children: "Select the scopes you want to grant to Slack in order for it to access your data. If you try and perform an action in a Job that requires a scope you haven\u2019t granted, that task will fail." })
    ] })
  ] });
}

// app/routes/api.v1.usage.ingest.ts
var api_v1_usage_ingest_exports = {};
__export(api_v1_usage_ingest_exports, {
  action: () => action84
});
async function action84({ request }) {
  if (request.method.toUpperCase() !== "POST")
    return { status: 405, body: "Method Not Allowed" };
  try {
    return await reportComputeUsage(request);
  } catch (e) {
    return logger.error("Error reporting compute usage", { error: e }), new Response(null, { status: 500 });
  }
}

// app/routes/storybook.shortcuts/route.tsx
var route_exports136 = {};
__export(route_exports136, {
  default: () => Story20
});
var import_jsx_runtime297 = require("react/jsx-runtime"), shortcuts = [
  { key: "esc" },
  { key: "f" },
  { key: "f", modifiers: ["meta"] },
  { key: "k", modifiers: ["meta"] },
  { key: "del", modifiers: ["ctrl", "alt"] },
  { key: "enter", modifiers: ["meta"] },
  { key: "enter", modifiers: ["mod"] }
];
function Story20() {
  return /* @__PURE__ */ (0, import_jsx_runtime297.jsxs)("div", { className: "flex flex-col items-start gap-y-4 p-12", children: [
    /* @__PURE__ */ (0, import_jsx_runtime297.jsx)(Collection, { platform: "mac" }),
    /* @__PURE__ */ (0, import_jsx_runtime297.jsx)(Collection, { platform: "windows" })
  ] });
}
function Collection({ platform }) {
  return /* @__PURE__ */ (0, import_jsx_runtime297.jsxs)(OperatingSystemContextProvider, { platform, children: [
    /* @__PURE__ */ (0, import_jsx_runtime297.jsx)(Header1, { children: platform }),
    shortcuts.map((shortcut2, index) => /* @__PURE__ */ (0, import_jsx_runtime297.jsxs)("div", { className: "flex items-center gap-x-2", children: [
      /* @__PURE__ */ (0, import_jsx_runtime297.jsx)(ShortcutKey, { shortcut: shortcut2, variant: "small" }),
      /* @__PURE__ */ (0, import_jsx_runtime297.jsx)(ShortcutKey, { shortcut: shortcut2, variant: "medium" }),
      /* @__PURE__ */ (0, import_jsx_runtime297.jsx)(Button, { variant: "primary/small", shortcut: shortcut2, children: "Primary small" }),
      /* @__PURE__ */ (0, import_jsx_runtime297.jsx)(Button, { variant: "secondary/small", shortcut: shortcut2, children: "Secondary small" }),
      /* @__PURE__ */ (0, import_jsx_runtime297.jsx)(Button, { variant: "tertiary/small", shortcut: shortcut2, children: "Tertiary small" }),
      /* @__PURE__ */ (0, import_jsx_runtime297.jsx)(Button, { variant: "danger/small", shortcut: shortcut2, children: "Danger small" }),
      /* @__PURE__ */ (0, import_jsx_runtime297.jsx)(Button, { variant: "primary/medium", shortcut: shortcut2, children: "Primary medium" }),
      /* @__PURE__ */ (0, import_jsx_runtime297.jsx)(Button, { variant: "secondary/medium", shortcut: shortcut2, children: "Secondary medium" }),
      /* @__PURE__ */ (0, import_jsx_runtime297.jsx)(Button, { variant: "tertiary/medium", shortcut: shortcut2, children: "Tertiary medium" }),
      /* @__PURE__ */ (0, import_jsx_runtime297.jsx)(Button, { variant: "danger/medium", shortcut: shortcut2, children: "Danger medium" }),
      /* @__PURE__ */ (0, import_jsx_runtime297.jsx)(Button, { variant: "danger/medium", shortcut: shortcut2, children: "Danger medium" })
    ] }, index))
  ] });
}

// app/routes/storybook.tree-view/route.tsx
var route_exports137 = {};
__export(route_exports137, {
  default: () => Story21
});
var import_solid111 = require("@heroicons/react/20/solid"), import_react225 = require("react");
var import_jsx_runtime298 = require("react/jsx-runtime"), words = [
  "lorem",
  "ipsum",
  "dolor",
  "sit",
  "amet",
  "consectetur",
  "adipisicing",
  "elit",
  "sed",
  "do",
  "eiusmod",
  "tempor",
  "incididunt",
  "ut",
  "labore",
  "et",
  "dolore",
  "magna",
  "aliqua",
  "enim",
  "ad",
  "minim",
  "veniam",
  "quis",
  "nostrud",
  "exercitation",
  "ullamco",
  "laboris",
  "nisi",
  "aliquip",
  "ex",
  "ea",
  "commodo",
  "consequat",
  "duis",
  "aute",
  "irure",
  "reprehenderit",
  "voluptate",
  "velit",
  "esse",
  "cillum",
  "eu",
  "fugiat",
  "nulla",
  "pariatur",
  "excepteur",
  "sint",
  "occaecat",
  "cupidatat",
  "non",
  "proident",
  "sunt",
  "culpa",
  "qui",
  "officia",
  "deserunt",
  "mollit",
  "anim",
  "id",
  "est",
  "laborum"
];
function generateTree() {
  let number = words.length, rawRows = new Array(number).fill("").map((elem, idx) => ({
    id: words[idx],
    data: { title: `${idx + 1}. ${words[idx]}` }
  })), rows = [];
  for (let i = 0; i < rawRows.length - 2; i += 3) {
    let row = rawRows[i];
    rows.push({
      ...row,
      children: [rawRows[i + 1], rawRows[i + 2]]
    });
  }
  return {
    id: "root",
    data: { title: "root" },
    children: rows
  };
}
var data = generateTree(), tree = flattenTree(data);
function Story21() {
  let [selectedId, setSelectedId] = (0, import_react225.useState)(""), [collapsedIds, setCollapsedIds] = (0, import_react225.useState)([]);
  return /* @__PURE__ */ (0, import_jsx_runtime298.jsx)("div", { className: "flex gap-12", children: /* @__PURE__ */ (0, import_jsx_runtime298.jsxs)("div", { className: "flex flex-col items-start justify-start gap-4", children: [
    /* @__PURE__ */ (0, import_jsx_runtime298.jsxs)("div", { className: "flex items-center gap-2 p-2", children: [
      /* @__PURE__ */ (0, import_jsx_runtime298.jsx)(
        Input,
        {
          placeholder: "Selected",
          value: selectedId,
          onChange: (v) => setSelectedId(v.target.value)
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime298.jsx)(
        Input,
        {
          placeholder: "Collapsed",
          value: collapsedIds.join(","),
          onChange: (e) => {
            let ids = e.target.value.split(",").map((v) => v.trim());
            setCollapsedIds(ids);
          }
        }
      )
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime298.jsx)(TreeViewParent, { selectedId, collapsedIds })
  ] }) });
}
function TreeViewParent({
  selectedId,
  collapsedIds
}) {
  let [filterText, setFilterText] = (0, import_react225.useState)(""), parentRef = (0, import_react225.useRef)(null), {
    nodes,
    selected,
    getTreeProps,
    getNodeProps,
    toggleNodeSelection,
    toggleExpandNode,
    selectNode,
    selectFirstVisibleNode,
    selectLastVisibleNode,
    scrollToNode,
    virtualizer
  } = useTree({
    tree,
    selectedId,
    collapsedIds,
    onSelectedIdChanged: (id) => {
      console.log("onSelectedIdChanged", id);
    },
    estimatedRowHeight: () => 32,
    parentRef,
    filter: {
      value: filterText,
      fn: (text, node) => !!(text === "" || node.data.title.toLowerCase().includes(text.toLowerCase()))
    }
  });
  return /* @__PURE__ */ (0, import_jsx_runtime298.jsxs)("div", { className: "flex w-72 flex-col items-start gap-y-4 p-4", children: [
    /* @__PURE__ */ (0, import_jsx_runtime298.jsxs)("div", { className: "flex items-center gap-2", children: [
      /* @__PURE__ */ (0, import_jsx_runtime298.jsx)(Button, { variant: "secondary/small", onClick: () => selectFirstVisibleNode(), children: "Select first" }),
      /* @__PURE__ */ (0, import_jsx_runtime298.jsx)(Button, { variant: "secondary/small", onClick: () => selectLastVisibleNode(), children: "Select last" })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime298.jsx)("div", { className: "flex items-center gap-2", children: /* @__PURE__ */ (0, import_jsx_runtime298.jsx)(
      Input,
      {
        placeholder: "Search log",
        variant: "tertiary",
        icon: "search",
        fullWidth: !0,
        value: filterText,
        onChange: (e) => setFilterText(e.target.value)
      }
    ) }),
    /* @__PURE__ */ (0, import_jsx_runtime298.jsx)(
      TreeView,
      {
        parentRef,
        virtualizer,
        autoFocus: !0,
        tree,
        nodes,
        getNodeProps,
        getTreeProps,
        parentClassName: "h-96 bg-charcoal-900",
        renderNode: ({ node, state, index, virtualizer: virtualizer2, virtualItem }) => /* @__PURE__ */ (0, import_jsx_runtime298.jsxs)(
          "div",
          {
            style: {
              paddingLeft: `${node.level * 1}rem`
            },
            className: cn(
              "flex cursor-pointer items-center gap-2 py-1 hover:bg-blue-500/10",
              state.selected && "bg-blue-500/20 hover:bg-blue-500/30"
            ),
            onClick: () => {
              toggleNodeSelection(node.id);
            },
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime298.jsx)(
                "div",
                {
                  className: "h-4 w-4",
                  onClick: (e) => {
                    e.stopPropagation(), toggleExpandNode(node.id), selectNode(node.id, !0);
                  },
                  onKeyDown: (e) => {
                    console.log(e.key);
                  },
                  children: node.hasChildren ? state.expanded ? /* @__PURE__ */ (0, import_jsx_runtime298.jsx)(import_solid111.FolderOpenIcon, { className: "h-4 w-4 text-blue-500" }) : /* @__PURE__ */ (0, import_jsx_runtime298.jsx)(import_solid111.FolderIcon, { className: "h-4 w-4 text-blue-500/50" }) : /* @__PURE__ */ (0, import_jsx_runtime298.jsx)(import_solid111.DocumentIcon, { className: "h-4 w-4" })
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime298.jsx)("div", { children: node.data.title })
            ]
          }
        )
      }
    )
  ] });
}

// app/routes/admin.api.v1.marqs.ts
var admin_api_v1_marqs_exports = {};
__export(admin_api_v1_marqs_exports, {
  loader: () => loader126
});
var import_server_runtime94 = require("@remix-run/server-runtime");
async function loader126({ request, params }) {
  let authenticationResult = await authenticateApiRequestWithPersonalAccessToken(request);
  if (!authenticationResult)
    return (0, import_server_runtime94.json)({ error: "Invalid or Missing API key" }, { status: 401 });
  let user = await prisma.user.findUnique({
    where: {
      id: authenticationResult.userId
    }
  });
  if (!user)
    return (0, import_server_runtime94.json)({ error: "Invalid or Missing API key" }, { status: 401 });
  if (!user.admin)
    return (0, import_server_runtime94.json)({ error: "You must be an admin to perform this action" }, { status: 403 });
  let details = await marqs?.getSharedQueueDetails();
  return (0, import_server_runtime94.json)(details);
}

// app/routes/api.v1.deployments.ts
var api_v1_deployments_exports = {};
__export(api_v1_deployments_exports, {
  action: () => action85
});
var import_server_runtime95 = require("@remix-run/server-runtime");

// app/v3/services/initializeDeployment.server.ts
var import_nanoid13 = require("nanoid");

// app/v3/remoteImageBuilder.server.ts
var import_sdk_node = require("@depot/sdk-node");
async function createRemoteImageBuild() {
  if (!env2.DEPOT_TOKEN || !env2.DEPOT_PROJECT_ID)
    return;
  let result = await import_sdk_node.depot.build.v1.BuildService.createBuild(
    { projectId: env2.DEPOT_PROJECT_ID },
    {
      headers: {
        Authorization: `Bearer ${env2.DEPOT_TOKEN}`
      }
    }
  );
  return {
    projectId: env2.DEPOT_PROJECT_ID,
    buildToken: result.buildToken,
    buildId: result.buildId
  };
}

// app/v3/services/initializeDeployment.server.ts
var nanoid9 = (0, import_nanoid13.customAlphabet)("1234567890abcdefghijklmnopqrstuvwxyz", 8), InitializeDeploymentService = class extends BaseService {
  async call(environment, payload) {
    return this.traceWithEnv("call", environment, async (span) => {
      let latestDeployment = await this._prisma.workerDeployment.findFirst({
        where: {
          environmentId: environment.id
        },
        orderBy: {
          createdAt: "desc"
        },
        take: 1
      }), nextVersion = calculateNextBuildVersion(latestDeployment?.version), externalBuildData = await createRemoteImageBuild(), triggeredBy = payload.userId ? await this._prisma.user.findUnique({
        where: {
          id: payload.userId,
          orgMemberships: {
            some: {
              organizationId: environment.project.organizationId
            }
          }
        }
      }) : void 0, deployment = await this._prisma.workerDeployment.create({
        data: {
          friendlyId: generateFriendlyId("deployment"),
          contentHash: payload.contentHash,
          shortCode: nanoid9(8),
          version: nextVersion,
          status: "BUILDING",
          environmentId: environment.id,
          projectId: environment.projectId,
          externalBuildData,
          triggeredById: triggeredBy?.id
        }
      });
      await TimeoutDeploymentService.enqueue(
        deployment.id,
        "BUILDING",
        "Building timed out",
        new Date(Date.now() + 18e4)
        // 3 minutes
      );
      let imageTag = `${env2.DEPLOY_REGISTRY_NAMESPACE}/${environment.project.externalRef}:${deployment.version}.${environment.slug}`;
      return { deployment, imageTag };
    });
  }
};

// app/routes/api.v1.deployments.ts
async function action85({ request, params }) {
  if (request.method.toUpperCase() !== "POST")
    return { status: 405, body: "Method Not Allowed" };
  let authenticationResult = await authenticateApiRequest(request);
  if (!authenticationResult)
    return logger.info("Invalid or missing api key", { url: request.url }), (0, import_server_runtime95.json)({ error: "Invalid or Missing API key" }, { status: 401 });
  let rawBody = await request.json(), body = InitializeDeploymentRequestBody.safeParse(rawBody);
  if (!body.success)
    return (0, import_server_runtime95.json)({ error: "Invalid body", issues: body.error.issues }, { status: 400 });
  let authenticatedEnv = authenticationResult.environment, service = new InitializeDeploymentService(), { deployment, imageTag } = await service.call(authenticatedEnv, body.data), responseBody = {
    id: deployment.friendlyId,
    contentHash: deployment.contentHash,
    shortCode: deployment.shortCode,
    version: deployment.version,
    externalBuildData: deployment.externalBuildData,
    imageTag,
    registryHost: env2.DEPLOY_REGISTRY_HOST
  };
  return (0, import_server_runtime95.json)(responseBody, { status: 200 });
}

// app/routes/api.v1.events.bulk.ts
var api_v1_events_bulk_exports = {};
__export(api_v1_events_bulk_exports, {
  action: () => action86
});
var import_server_runtime96 = require("@remix-run/server-runtime");
var import_zod_error3 = require("zod-error");
async function action86({ request }) {
  if (request.method.toUpperCase() !== "POST")
    return { status: 405, body: "Method Not Allowed" };
  let authenticationResult = await authenticateApiRequest(request);
  if (!authenticationResult)
    return (0, import_server_runtime96.json)({ error: "Invalid or Missing API key" }, { status: 401 });
  let authenticatedEnv = authenticationResult.environment, anyBody = await request.json(), body = SendBulkEventsBodySchema.safeParse(anyBody);
  if (!body.success)
    return (0, import_server_runtime96.json)({ message: (0, import_zod_error3.generateErrorMessage)(body.error.issues) }, { status: 422 });
  let service = new IngestSendEvent(), events = [];
  for (let event of body.data.events) {
    let eventRecord = await service.call(authenticatedEnv, event, body.data.options);
    if (!eventRecord)
      return (0, import_server_runtime96.json)({ error: "Failed to create event during bulk ingest" }, { status: 500 });
    events.push(eventRecord);
  }
  return (0, import_server_runtime96.json)(events.map(eventRecordToApiJson));
}

// app/routes/api.v1.runs.$runId.ts
var api_v1_runs_runId_exports = {};
__export(api_v1_runs_runId_exports, {
  loader: () => loader127
});
var import_server_runtime97 = require("@remix-run/server-runtime"), import_zod244 = require("zod");
var ParamsSchema82 = import_zod244.z.object({
  runId: import_zod244.z.string()
}), SearchQuerySchema2 = import_zod244.z.object({
  cursor: import_zod244.z.string().optional(),
  take: import_zod244.z.coerce.number().default(20),
  subtasks: import_zod244.z.coerce.boolean().default(!1),
  taskdetails: import_zod244.z.coerce.boolean().default(!1)
});
async function loader127({ request, params }) {
  if (request.method.toUpperCase() === "OPTIONS")
    return apiCors(request, (0, import_server_runtime97.json)({}));
  let authenticationResult = await authenticateApiRequest(request, {
    allowPublicKey: !0
  });
  if (!authenticationResult)
    return apiCors(request, (0, import_server_runtime97.json)({ error: "Invalid or Missing API key" }, { status: 401 }));
  let authenticatedEnv = authenticationResult.environment, parsed = ParamsSchema82.safeParse(params);
  if (!parsed.success)
    return apiCors(request, (0, import_server_runtime97.json)({ error: "Invalid or missing runId" }, { status: 400 }));
  let { runId } = parsed.data, url = new URL(request.url), parsedQuery = SearchQuerySchema2.safeParse(Object.fromEntries(url.searchParams));
  if (!parsedQuery.success)
    return apiCors(
      request,
      (0, import_server_runtime97.json)({ error: "Invalid or missing query parameters" }, { status: 400 })
    );
  let query = parsedQuery.data, showTaskDetails = query.taskdetails && authenticationResult.type === "PRIVATE", take = Math.min(query.take, 50), jobRun = await new ApiRunPresenter().call({
    runId,
    maxTasks: take,
    taskDetails: showTaskDetails,
    subTasks: query.subtasks,
    cursor: query.cursor
  });
  if (!jobRun)
    return apiCors(request, (0, import_server_runtime97.json)({ message: "Run not found" }, { status: 404 }));
  if (jobRun.environmentId !== authenticatedEnv.id)
    return apiCors(request, (0, import_server_runtime97.json)({ message: "Run not found" }, { status: 404 }));
  let selectedTasks = jobRun.tasks.slice(0, take), tasks = taskListToTree(selectedTasks, query.subtasks), nextTask = jobRun.tasks[take];
  return apiCors(
    request,
    (0, import_server_runtime97.json)({
      id: jobRun.id,
      status: runOriginalStatus(jobRun.status),
      startedAt: jobRun.startedAt,
      updatedAt: jobRun.updatedAt,
      completedAt: jobRun.completedAt,
      output: jobRun.output,
      tasks: tasks.map((task) => {
        let { parentId, ...rest } = task;
        return { ...rest };
      }),
      statuses: jobRun.statuses.map((s) => ({
        ...s,
        state: s.state ?? void 0,
        data: s.data ?? void 0,
        history: s.history ?? void 0
      })),
      nextCursor: nextTask ? nextTask.id : void 0
    })
  );
}

// app/routes/api.v2.runs.$runId.ts
var api_v2_runs_runId_exports = {};
__export(api_v2_runs_runId_exports, {
  loader: () => loader128
});
var import_server_runtime98 = require("@remix-run/server-runtime"), import_zod245 = require("zod");
var ParamsSchema83 = import_zod245.z.object({
  runId: import_zod245.z.string()
}), SearchQuerySchema3 = import_zod245.z.object({
  cursor: import_zod245.z.string().optional(),
  take: import_zod245.z.coerce.number().default(20),
  subtasks: import_zod245.z.coerce.boolean().default(!1),
  taskdetails: import_zod245.z.coerce.boolean().default(!1)
});
async function loader128({ request, params }) {
  if (request.method.toUpperCase() === "OPTIONS")
    return apiCors(request, (0, import_server_runtime98.json)({}));
  let authenticationResult = await authenticateApiRequest(request, {
    allowPublicKey: !0
  });
  if (!authenticationResult)
    return apiCors(request, (0, import_server_runtime98.json)({ error: "Invalid or Missing API key" }, { status: 401 }));
  let authenticatedEnv = authenticationResult.environment, parsed = ParamsSchema83.safeParse(params);
  if (!parsed.success)
    return apiCors(request, (0, import_server_runtime98.json)({ error: "Invalid or missing runId" }, { status: 400 }));
  let { runId } = parsed.data, url = new URL(request.url), parsedQuery = SearchQuerySchema3.safeParse(Object.fromEntries(url.searchParams));
  if (!parsedQuery.success)
    return apiCors(
      request,
      (0, import_server_runtime98.json)({ error: "Invalid or missing query parameters" }, { status: 400 })
    );
  let query = parsedQuery.data, showTaskDetails = query.taskdetails && authenticationResult.type === "PRIVATE", take = Math.min(query.take, 50), jobRun = await new ApiRunPresenter().call({
    runId,
    maxTasks: take,
    taskDetails: showTaskDetails,
    subTasks: query.subtasks,
    cursor: query.cursor
  });
  if (!jobRun)
    return apiCors(request, (0, import_server_runtime98.json)({ message: "Run not found" }, { status: 404 }));
  if (jobRun.environmentId !== authenticatedEnv.id)
    return apiCors(request, (0, import_server_runtime98.json)({ message: "Run not found" }, { status: 404 }));
  let selectedTasks = jobRun.tasks.slice(0, take), tasks = taskListToTree(selectedTasks, query.subtasks), nextTask = jobRun.tasks[take];
  return apiCors(
    request,
    (0, import_server_runtime98.json)({
      id: jobRun.id,
      status: jobRun.status,
      startedAt: jobRun.startedAt,
      updatedAt: jobRun.updatedAt,
      completedAt: jobRun.completedAt,
      output: jobRun.output,
      tasks: tasks.map((task) => {
        let { parentId, ...rest } = task;
        return { ...rest };
      }),
      statuses: jobRun.statuses.map((s) => ({
        ...s,
        state: s.state ?? void 0,
        data: s.data ?? void 0,
        history: s.history ?? void 0
      })),
      nextCursor: nextTask ? nextTask.id : void 0
    })
  );
}

// app/routes/api.v3.runs.$runId.ts
var api_v3_runs_runId_exports = {};
__export(api_v3_runs_runId_exports, {
  loader: () => loader129
});
var import_server_runtime99 = require("@remix-run/server-runtime"), import_zod246 = require("zod");
var ParamsSchema84 = import_zod246.z.object({
  runId: import_zod246.z.string()
});
async function loader129({ request, params }) {
  if (request.method.toUpperCase() === "OPTIONS")
    return apiCors(request, (0, import_server_runtime99.json)({}));
  let authenticationResult = await authenticateApiRequest(request, {
    allowPublicKey: !0
  });
  if (!authenticationResult)
    return apiCors(request, (0, import_server_runtime99.json)({ error: "Invalid or Missing API key" }, { status: 401 }));
  let authenticatedEnv = authenticationResult.environment, parsed = ParamsSchema84.safeParse(params);
  if (!parsed.success)
    return apiCors(request, (0, import_server_runtime99.json)({ error: "Invalid or missing runId" }, { status: 400 }));
  let { runId } = parsed.data, showSecretDetails = authenticationResult.type === "PRIVATE", result = await new ApiRetrieveRunPresenter().call(runId, authenticatedEnv, showSecretDetails);
  return result ? apiCors(request, (0, import_server_runtime99.json)(result)) : apiCors(request, (0, import_server_runtime99.json)({ error: "Run not found" }, { status: 404 }));
}

// app/routes/storybook.timeline/route.tsx
var route_exports138 = {};
__export(route_exports138, {
  default: () => Story22
});
var Slider3 = __toESM(require("@radix-ui/react-slider"));
var import_react226 = require("react");
var import_jsx_runtime299 = require("react/jsx-runtime"), maxDuration = 1e4, elements = [
  {
    span: {
      startMs: 0,
      durationMs: 1121
    }
  },
  {
    span: {
      startMs: 19,
      durationMs: 1121 - 19
    }
  },
  {
    span: {
      startMs: 19 + 22,
      durationMs: 412
    }
  },
  {
    span: {
      startMs: 19 + 22 + 3,
      durationMs: 412 - 3
    },
    points: [
      {
        ms: 19 + 22 + 3 + 412 - 3
      }
    ]
  },
  {
    points: [
      {
        ms: 19 + 22 + 3 + 94
      }
    ]
  },
  {
    span: {
      startMs: 19 + 22 + 3 + 94 + 3,
      durationMs: 3
    }
  },
  {
    span: {
      startMs: 19 + 22 + 3 + 94 + 3 + 3,
      durationMs: 39
    }
  },
  {
    span: {
      startMs: 19 + 22 + 3 + 94 + 3 + 3 + 40,
      durationMs: 192
    }
  }
];
function Story22() {
  let [scale, setScale] = (0, import_react226.useState)(0.25), [durationScale, setDurationScale] = (0, import_react226.useState)(0.12), [tickCount2, setTickCount] = (0, import_react226.useState)(5), [showDuration, setShowDurations] = (0, import_react226.useState)(!0), durationMs = maxDuration * durationScale;
  return /* @__PURE__ */ (0, import_jsx_runtime299.jsxs)("div", { className: "m-4 grid h-full grid-rows-[auto_1fr] overflow-hidden", children: [
    /* @__PURE__ */ (0, import_jsx_runtime299.jsxs)("div", { className: "flex flex-col gap-2 pb-4", children: [
      /* @__PURE__ */ (0, import_jsx_runtime299.jsxs)("div", { className: "flex flex-col gap-0.5", children: [
        /* @__PURE__ */ (0, import_jsx_runtime299.jsx)(Paragraph, { variant: "extra-small", children: "Scale" }),
        /* @__PURE__ */ (0, import_jsx_runtime299.jsxs)(
          Slider3.Root,
          {
            className: "relative flex h-2 w-72 touch-none select-none items-center",
            value: [scale],
            onValueChange: (value) => setScale(value[0]),
            min: 0,
            max: 1,
            step: 0.01,
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime299.jsx)(Slider3.Track, { className: "relative h-[3px] grow rounded-full bg-grid-bright", children: /* @__PURE__ */ (0, import_jsx_runtime299.jsx)(Slider3.Range, { className: "absolute h-full rounded-full bg-secondary" }) }),
              /* @__PURE__ */ (0, import_jsx_runtime299.jsx)(
                Slider3.Thumb,
                {
                  className: "block h-2 w-2 rounded-full border-4 border-secondary bg-charcoal-850 shadow-[0_1px_3px_4px_rgb(0_0_0_/_0.2),_0_1px_2px_-1px_rgb(0_0_0_/_0.1)] transition hover:border-secondary hover:bg-charcoal-800 focus:shadow-[0_1px_3px_4px_rgb(0_0_0_/_0.2),_0_1px_2px_-1px_rgb(0_0_0_/_0.1)] focus:outline-none",
                  "aria-label": "Concurrent runs slider"
                }
              )
            ]
          }
        )
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime299.jsxs)("div", { className: "flex flex-col gap-0.5", children: [
        /* @__PURE__ */ (0, import_jsx_runtime299.jsxs)(Paragraph, { variant: "extra-small", children: [
          "Ticks ",
          tickCount2
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime299.jsxs)(
          Slider3.Root,
          {
            className: "relative flex h-2 w-72 touch-none select-none items-center",
            value: [tickCount2],
            onValueChange: (value) => setTickCount(value[0]),
            min: 2,
            max: 10,
            step: 1,
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime299.jsx)(Slider3.Track, { className: "relative h-[3px] grow rounded-full bg-grid-bright", children: /* @__PURE__ */ (0, import_jsx_runtime299.jsx)(Slider3.Range, { className: "absolute h-full rounded-full bg-secondary" }) }),
              /* @__PURE__ */ (0, import_jsx_runtime299.jsx)(
                Slider3.Thumb,
                {
                  className: "block h-2 w-2 rounded-full border-4 border-secondary bg-charcoal-850 shadow-[0_1px_3px_4px_rgb(0_0_0_/_0.2),_0_1px_2px_-1px_rgb(0_0_0_/_0.1)] transition hover:border-secondary hover:bg-charcoal-800 focus:shadow-[0_1px_3px_4px_rgb(0_0_0_/_0.2),_0_1px_2px_-1px_rgb(0_0_0_/_0.1)] focus:outline-none",
                  "aria-label": "Concurrent runs slider"
                }
              )
            ]
          }
        )
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime299.jsxs)("div", { className: "flex flex-col gap-0.5", children: [
        /* @__PURE__ */ (0, import_jsx_runtime299.jsxs)(Paragraph, { variant: "extra-small", children: [
          "Duration ",
          formatDurationMilliseconds(durationMs, { style: "short" })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime299.jsxs)(
          Slider3.Root,
          {
            className: "relative flex h-2 w-72 touch-none select-none items-center",
            value: [durationScale],
            onValueChange: (value) => setDurationScale(value[0]),
            min: 0,
            max: 1,
            step: 0.01,
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime299.jsx)(Slider3.Track, { className: "relative h-[3px] grow rounded-full bg-grid-bright", children: /* @__PURE__ */ (0, import_jsx_runtime299.jsx)(Slider3.Range, { className: "absolute h-full rounded-full bg-secondary" }) }),
              /* @__PURE__ */ (0, import_jsx_runtime299.jsx)(
                Slider3.Thumb,
                {
                  className: "block h-2 w-2 rounded-full border-4 border-secondary bg-charcoal-850 shadow-[0_1px_3px_4px_rgb(0_0_0_/_0.2),_0_1px_2px_-1px_rgb(0_0_0_/_0.1)] transition hover:border-secondary hover:bg-charcoal-800 focus:shadow-[0_1px_3px_4px_rgb(0_0_0_/_0.2),_0_1px_2px_-1px_rgb(0_0_0_/_0.1)] focus:outline-none",
                  "aria-label": "Concurrent runs slider"
                }
              )
            ]
          }
        )
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime299.jsx)(
        Switch,
        {
          checked: showDuration,
          onCheckedChange: setShowDurations,
          variant: "small",
          label: "Show durations"
        }
      )
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime299.jsxs)("div", { className: "grid grid-cols-[100px_1fr]", children: [
      /* @__PURE__ */ (0, import_jsx_runtime299.jsx)("div", {}),
      /* @__PURE__ */ (0, import_jsx_runtime299.jsx)("div", { className: "overflow-x-auto border-l border-grid-dimmed bg-background-bright", children: /* @__PURE__ */ (0, import_jsx_runtime299.jsx)("div", { className: "pr-6", children: /* @__PURE__ */ (0, import_jsx_runtime299.jsxs)(
        Root10,
        {
          durationMs,
          scale,
          className: "h-full",
          minWidth: 300,
          maxWidth: 2e3,
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime299.jsx)(FollowCursor, { children: (ms) => /* @__PURE__ */ (0, import_jsx_runtime299.jsxs)("div", { className: "relative z-50 flex h-full flex-col", children: [
              /* @__PURE__ */ (0, import_jsx_runtime299.jsx)("div", { className: "relative flex h-9 items-end", children: /* @__PURE__ */ (0, import_jsx_runtime299.jsx)("div", { className: "absolute left-1/2 w-fit -translate-x-1/2 rounded-sm border border-charcoal-600 bg-charcoal-750 px-0.5 py-0.5 text-xxs tabular-nums text-text-bright", children: formatDurationMilliseconds(ms, {
                style: "short",
                maxDecimalPoints: ms < 1e3 ? 0 : 1
              }) }) }),
              /* @__PURE__ */ (0, import_jsx_runtime299.jsx)("div", { className: "w-px grow border-r border-grid-bright" })
            ] }) }),
            /* @__PURE__ */ (0, import_jsx_runtime299.jsx)(Row, { className: "flex h-9 items-end border-b", children: /* @__PURE__ */ (0, import_jsx_runtime299.jsx)(EquallyDistribute, { count: tickCount2, children: (ms, index) => /* @__PURE__ */ (0, import_jsx_runtime299.jsx)(
              Point,
              {
                ms,
                className: "relative bottom-0 text-xxs text-text-dimmed",
                children: (ms2) => /* @__PURE__ */ (0, import_jsx_runtime299.jsx)(
                  "div",
                  {
                    className: index === 0 ? "left-0.5" : index === tickCount2 - 1 ? "-right-0 -translate-x-full" : "left-1/2 -translate-x-1/2",
                    children: formatDurationMilliseconds(ms2, {
                      style: "short",
                      maxDecimalPoints: ms2 < 1e3 ? 0 : 1
                    })
                  }
                )
              }
            ) }) }),
            /* @__PURE__ */ (0, import_jsx_runtime299.jsxs)(Row, { className: "h-full", children: [
              /* @__PURE__ */ (0, import_jsx_runtime299.jsx)(EquallyDistribute, { count: tickCount2, children: (ms, index) => index === 0 ? null : /* @__PURE__ */ (0, import_jsx_runtime299.jsx)(Point, { ms, className: "h-full border-r border-grid-dimmed" }) }),
              /* @__PURE__ */ (0, import_jsx_runtime299.jsx)(import_jsx_runtime299.Fragment, { children: elements.map((element, index) => /* @__PURE__ */ (0, import_jsx_runtime299.jsxs)(
                Row,
                {
                  className: "group flex h-9 items-center border-b border-b-white/10 hover:bg-grid-dimmed",
                  onMouseOver: () => console.log(`hover ${index}`),
                  children: [
                    element.span && /* @__PURE__ */ (0, import_jsx_runtime299.jsx)(SpanWithDuration2, { showDuration, ...element.span }),
                    element.points?.map((point, pointIndex) => /* @__PURE__ */ (0, import_jsx_runtime299.jsx)(
                      Point,
                      {
                        ms: point.ms,
                        className: "-ml-1.5 h-3 w-3 rounded-full border-2 border-background-bright bg-text-dimmed"
                      },
                      pointIndex
                    ))
                  ]
                },
                index
              )) })
            ] })
          ]
        }
      ) }) })
    ] })
  ] });
}
function SpanWithDuration2({ showDuration, ...props }) {
  return /* @__PURE__ */ (0, import_jsx_runtime299.jsx)(Span8, { ...props, children: /* @__PURE__ */ (0, import_jsx_runtime299.jsx)("div", { className: "relative flex h-5 w-full items-center rounded-sm bg-blue-500", children: /* @__PURE__ */ (0, import_jsx_runtime299.jsx)(
    "div",
    {
      className: cn(
        "sticky left-0 z-10 transition group-hover:opacity-100",
        !showDuration && "opacity-0"
      ),
      children: /* @__PURE__ */ (0, import_jsx_runtime299.jsx)("div", { className: "rounded-sm px-1 py-0.5 text-xxs text-text-bright text-shadow-custom", children: formatDurationMilliseconds(props.durationMs, {
        style: "short",
        maxDecimalPoints: props.durationMs < 1e3 ? 0 : 1
      }) })
    }
  ) }) });
}

// app/routes/api.v1.store.$key.ts
var api_v1_store_key_exports = {};
__export(api_v1_store_key_exports, {
  action: () => action87,
  loader: () => loader130
});
var import_server_runtime100 = require("@remix-run/server-runtime");
var import_zod247 = require("zod");

// app/services/store/keyValueStore.server.ts
var KeyValueStore2 = class {
  constructor(environment, prismaClient = prisma) {
    this.environment = environment;
    this.#prismaClient = prismaClient;
  }
  #prismaClient;
  async delete(key) {
    try {
      return await this.#prismaClient.keyValueItem.delete({
        select: {
          id: !0
        },
        where: {
          environmentId_key: {
            key,
            environmentId: this.environment.id
          }
        }
      }), !0;
    } catch {
      return !1;
    }
  }
  async get(key) {
    let keyValueItem = await this.#prismaClient.keyValueItem.findUnique({
      select: {
        value: !0
      },
      where: {
        environmentId_key: {
          key,
          environmentId: this.environment.id
        }
      }
    });
    if (!keyValueItem) {
      logger.debug("KeyValueStore.get() key not found", { key, environment: this.environment.id });
      return;
    }
    return keyValueItem.value.toString();
  }
  async has(key) {
    return !!await this.#prismaClient.keyValueItem.findUnique({
      select: {
        id: !0
      },
      where: {
        environmentId_key: {
          key,
          environmentId: this.environment.id
        }
      }
    });
  }
  async set(key, value) {
    let valueBuffer = Buffer.from(value);
    return await this.#prismaClient.keyValueItem.upsert({
      select: {
        value: !0
      },
      where: {
        environmentId_key: {
          key,
          environmentId: this.environment.id
        }
      },
      create: {
        key,
        environmentId: this.environment.id,
        value: valueBuffer
      },
      update: {
        value: valueBuffer
      }
    }), value;
  }
};

// app/routes/api.v1.store.$key.ts
var ParamsSchema85 = import_zod247.z.object({
  key: import_zod247.z.string()
}), MAX_BODY_BYTE_LENGTH = 256 * 1024;
async function action87({ request, params }) {
  logger.info("Key-value store action", { url: request.url });
  let parsedMethod = import_zod247.z.enum(["DELETE", "PUT"]).safeParse(request.method.toUpperCase());
  if (!parsedMethod.success)
    return (0, import_server_runtime100.json)({ error: "Method Not Allowed" }, { status: 405 });
  let parsedParams = ParamsSchema85.safeParse(params);
  if (!parsedParams.success)
    return logger.info("Invalid params", { params }), (0, import_server_runtime100.json)({ error: "Invalid params" }, { status: 400 });
  let authenticationResult = await authenticateApiRequest(request);
  if (!authenticationResult)
    return logger.info("Invalid or missing api key", { url: request.url }), (0, import_server_runtime100.json)({ error: "Invalid or Missing API key" }, { status: 401 });
  let authenticatedEnv = authenticationResult.environment, store = new KeyValueStore2(authenticatedEnv), decodedKey = decodeURIComponent(parsedParams.data.key);
  try {
    switch (parsedMethod.data) {
      case "DELETE": {
        let deleted = await store.delete(decodedKey);
        return (0, import_server_runtime100.json)({ action: "DELETE", key: decodedKey, deleted });
      }
      case "PUT": {
        let value = await request.text(), serializedValueBytes = value.length;
        if (serializedValueBytes > MAX_BODY_BYTE_LENGTH)
          return logger.info("Max request body size exceeded", { serializedValueBytes }), (0, import_server_runtime100.json)(
            { error: `Max request body size exceeded: ${MAX_BODY_BYTE_LENGTH} bytes` },
            { status: 413 }
          );
        let setValue = await store.set(decodedKey, value);
        return (0, import_server_runtime100.json)({ action: "SET", key: decodedKey, value: setValue });
      }
      default:
        assertExhaustive(parsedMethod.data);
    }
  } catch (error) {
    return error instanceof Error ? (logger.error("Error peforming key-value store action", {
      method: parsedMethod.data,
      url: request.url,
      error: error.message
    }), (0, import_server_runtime100.json)({ error: error.message }, { status: 400 })) : (0, import_server_runtime100.json)({ error: "Something went wrong" }, { status: 500 });
  }
}
async function loader130({ request, params }) {
  logger.info("Key-value store loader", { url: request.url });
  let parsedParams = ParamsSchema85.safeParse(params);
  if (!parsedParams.success)
    return logger.info("Invalid params", { params }), (0, import_server_runtime100.json)({ error: "Invalid params" }, { status: 400 });
  let parsedMethod = import_zod247.z.enum(["GET", "HEAD"]).safeParse(request.method.toUpperCase());
  if (!parsedMethod.success)
    return (0, import_server_runtime100.json)({ error: "Method Not Allowed" }, { status: 405 });
  let authenticationResult = await authenticateApiRequest(request);
  if (!authenticationResult)
    return logger.info("Invalid or missing api key", { url: request.url }), (0, import_server_runtime100.json)({ error: "Invalid or Missing API key" }, { status: 401 });
  let authenticatedEnv = authenticationResult.environment, store = new KeyValueStore2(authenticatedEnv), { key } = parsedParams.data;
  try {
    switch (parsedMethod.data) {
      case "GET": {
        let value = await store.get(key);
        return (0, import_server_runtime100.json)({ action: "GET", key, value });
      }
      case "HEAD":
        return await store.has(key) ? new Response("Key found", { status: 200 }) : new Response("Key not found", { status: 404 });
      default:
        assertExhaustive(parsedMethod.data);
    }
  } catch (error) {
    return error instanceof Error ? (logger.error("Error peforming key-value store action", {
      method: parsedMethod.data,
      url: request.url,
      error: error.message
    }), (0, import_server_runtime100.json)({ error: error.message }, { status: 400 })) : (0, import_server_runtime100.json)({ error: "Something went wrong" }, { status: 500 });
  }
}

// app/routes/storybook.buttons/route.tsx
var route_exports139 = {};
__export(route_exports139, {
  default: () => Story23
});
var import_solid112 = require("@heroicons/react/20/solid"), import_solid113 = require("@heroicons/react/24/solid"), import_companyicons9 = require("@trigger.dev/companyicons");
var import_jsx_runtime300 = require("react/jsx-runtime");
function Story23() {
  return /* @__PURE__ */ (0, import_jsx_runtime300.jsxs)("div", { className: "bg-background-dimmed p-12", children: [
    /* @__PURE__ */ (0, import_jsx_runtime300.jsx)(Header1, { className: "mb-2", children: "Small buttons" }),
    /* @__PURE__ */ (0, import_jsx_runtime300.jsxs)("div", { className: "grid grid-cols-4 gap-8 border-b border-charcoal-700 pb-8", children: [
      /* @__PURE__ */ (0, import_jsx_runtime300.jsxs)("div", { className: "flex flex-col items-start gap-2", children: [
        /* @__PURE__ */ (0, import_jsx_runtime300.jsx)(Header3, { className: "mb-1 uppercase", children: "Basic" }),
        /* @__PURE__ */ (0, import_jsx_runtime300.jsx)(Button, { variant: "primary/small", children: "Primary button" }),
        /* @__PURE__ */ (0, import_jsx_runtime300.jsx)(Button, { variant: "secondary/small", children: "Secondary button" }),
        /* @__PURE__ */ (0, import_jsx_runtime300.jsx)(Button, { variant: "tertiary/small", children: "Tertiary button" }),
        /* @__PURE__ */ (0, import_jsx_runtime300.jsx)(Button, { variant: "minimal/small", children: "Minimal button" }),
        /* @__PURE__ */ (0, import_jsx_runtime300.jsx)(Button, { variant: "danger/small", children: "Danger button" })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime300.jsxs)("div", { className: "flex flex-col items-start gap-2", children: [
        /* @__PURE__ */ (0, import_jsx_runtime300.jsx)(Header3, { className: "mb-1 uppercase", children: "Icon left" }),
        /* @__PURE__ */ (0, import_jsx_runtime300.jsx)(Button, { variant: "primary/small", LeadingIcon: import_solid112.ArrowLeftIcon, children: "Primary button" }),
        /* @__PURE__ */ (0, import_jsx_runtime300.jsx)(Button, { variant: "secondary/small", LeadingIcon: import_solid112.ArrowLeftIcon, children: "Secondary button" }),
        /* @__PURE__ */ (0, import_jsx_runtime300.jsx)(Button, { variant: "tertiary/small", LeadingIcon: import_solid112.ArrowLeftIcon, children: "Tertiary button" }),
        /* @__PURE__ */ (0, import_jsx_runtime300.jsx)(Button, { variant: "minimal/small", LeadingIcon: import_solid112.ArrowLeftIcon, children: "Minimal button" }),
        /* @__PURE__ */ (0, import_jsx_runtime300.jsx)(Button, { variant: "danger/small", LeadingIcon: import_solid112.ArrowLeftIcon, children: "Danger button" })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime300.jsxs)("div", { className: "flex flex-col items-start gap-2", children: [
        /* @__PURE__ */ (0, import_jsx_runtime300.jsx)(Header3, { className: "mb-1 uppercase", children: "Icon right" }),
        /* @__PURE__ */ (0, import_jsx_runtime300.jsx)(Button, { variant: "primary/small", TrailingIcon: import_solid112.ArrowRightIcon, children: "Primary button" }),
        /* @__PURE__ */ (0, import_jsx_runtime300.jsx)(Button, { variant: "secondary/small", TrailingIcon: import_solid112.ArrowRightIcon, children: "Secondary button" }),
        /* @__PURE__ */ (0, import_jsx_runtime300.jsx)(Button, { variant: "tertiary/small", TrailingIcon: import_solid112.ArrowRightIcon, children: "Tertiary button" }),
        /* @__PURE__ */ (0, import_jsx_runtime300.jsx)(Button, { variant: "minimal/small", TrailingIcon: import_solid112.ArrowRightIcon, children: "Minimal button" }),
        /* @__PURE__ */ (0, import_jsx_runtime300.jsx)(Button, { variant: "danger/small", TrailingIcon: import_solid112.ArrowRightIcon, children: "Danger button" })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime300.jsxs)("div", { className: "flex flex-col items-start gap-2", children: [
        /* @__PURE__ */ (0, import_jsx_runtime300.jsx)(Header3, { className: "mb-1 uppercase", children: "Shortcut" }),
        /* @__PURE__ */ (0, import_jsx_runtime300.jsx)(Button, { variant: "primary/small", shortcut: { key: "s", modifiers: ["meta"] }, children: "Primary button" }),
        /* @__PURE__ */ (0, import_jsx_runtime300.jsx)(Button, { variant: "secondary/small", shortcut: { key: "f" }, children: "Secondary button" }),
        /* @__PURE__ */ (0, import_jsx_runtime300.jsx)(Button, { variant: "tertiary/small", shortcut: { key: "i" }, children: "Tertiary button" }),
        /* @__PURE__ */ (0, import_jsx_runtime300.jsx)(Button, { variant: "minimal/small", shortcut: { key: "i" }, children: "Minimal button" }),
        /* @__PURE__ */ (0, import_jsx_runtime300.jsx)(Button, { variant: "danger/small", shortcut: { key: "s", modifiers: ["meta"] }, children: "Danger button" })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime300.jsxs)("div", { className: "flex flex-col items-start gap-2", children: [
        /* @__PURE__ */ (0, import_jsx_runtime300.jsx)(Header3, { className: "mb-1 uppercase", children: "Named icon" }),
        /* @__PURE__ */ (0, import_jsx_runtime300.jsx)(Button, { LeadingIcon: import_companyicons9.AirtableIcon, variant: "primary/small", children: "Connect to Airtable" }),
        /* @__PURE__ */ (0, import_jsx_runtime300.jsx)(Button, { LeadingIcon: import_companyicons9.GitHubDarkIcon, variant: "primary/small", children: "Connect to GitHub" }),
        /* @__PURE__ */ (0, import_jsx_runtime300.jsx)(Button, { TrailingIcon: import_companyicons9.SlackIcon, variant: "secondary/small", children: "Connect to Slack" }),
        /* @__PURE__ */ (0, import_jsx_runtime300.jsx)(Button, { TrailingIcon: "warning", variant: "secondary/small", children: "Trailing icon" })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime300.jsxs)("div", { className: "flex flex-col items-start gap-2", children: [
        /* @__PURE__ */ (0, import_jsx_runtime300.jsx)(Header3, { className: "mb-1 uppercase", children: "Loading" }),
        /* @__PURE__ */ (0, import_jsx_runtime300.jsx)(Button, { variant: "primary/small", LeadingIcon: "spinner", children: "Loading Primary\u2026" }),
        /* @__PURE__ */ (0, import_jsx_runtime300.jsx)(Button, { variant: "secondary/small", LeadingIcon: "spinner", children: "Loading Secondary\u2026" }),
        /* @__PURE__ */ (0, import_jsx_runtime300.jsx)(Button, { variant: "tertiary/small", LeadingIcon: "spinner", children: "Loading Tertiary\u2026" }),
        /* @__PURE__ */ (0, import_jsx_runtime300.jsx)(Button, { variant: "minimal/small", LeadingIcon: "spinner", children: "Loading Minimal\u2026" }),
        /* @__PURE__ */ (0, import_jsx_runtime300.jsx)(Button, { variant: "danger/small", LeadingIcon: "spinner-white", children: "Loading Danger\u2026" })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime300.jsxs)("div", { className: "flex flex-col items-start gap-2", children: [
        /* @__PURE__ */ (0, import_jsx_runtime300.jsx)(Header3, { className: "mb-1 uppercase", children: "Disabled" }),
        /* @__PURE__ */ (0, import_jsx_runtime300.jsx)(Button, { variant: "primary/small", disabled: !0, children: "Primary button" }),
        /* @__PURE__ */ (0, import_jsx_runtime300.jsx)(Button, { variant: "secondary/small", disabled: !0, children: "Secondary button" }),
        /* @__PURE__ */ (0, import_jsx_runtime300.jsx)(Button, { variant: "tertiary/small", disabled: !0, children: "Tertiary button" }),
        /* @__PURE__ */ (0, import_jsx_runtime300.jsx)(Button, { variant: "minimal/small", disabled: !0, children: "Minimal button" }),
        /* @__PURE__ */ (0, import_jsx_runtime300.jsx)(Button, { variant: "danger/small", disabled: !0, children: "Danger button" })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime300.jsxs)("div", { className: "flex flex-col items-start gap-2", children: [
        /* @__PURE__ */ (0, import_jsx_runtime300.jsx)(Header3, { className: "mb-1 uppercase", children: "Icon only" }),
        /* @__PURE__ */ (0, import_jsx_runtime300.jsx)(Button, { variant: "primary/small", LeadingIcon: import_solid112.ArrowRightIcon }),
        /* @__PURE__ */ (0, import_jsx_runtime300.jsx)(Button, { variant: "secondary/small", LeadingIcon: import_solid112.LightBulbIcon }),
        /* @__PURE__ */ (0, import_jsx_runtime300.jsx)(Button, { variant: "tertiary/small", LeadingIcon: "warning" }),
        /* @__PURE__ */ (0, import_jsx_runtime300.jsx)(Button, { variant: "minimal/small", LeadingIcon: "warning" }),
        /* @__PURE__ */ (0, import_jsx_runtime300.jsx)(Button, { variant: "danger/small", LeadingIcon: import_solid112.ExclamationTriangleIcon })
      ] })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime300.jsx)(Header1, { className: "mb-2 mt-8", children: "Medium buttons" }),
    /* @__PURE__ */ (0, import_jsx_runtime300.jsxs)("div", { className: "grid grid-cols-4 gap-8 border-b border-charcoal-700 pb-8", children: [
      /* @__PURE__ */ (0, import_jsx_runtime300.jsxs)("div", { className: "flex flex-col items-start gap-2", children: [
        /* @__PURE__ */ (0, import_jsx_runtime300.jsx)(Header3, { className: "mb-1 uppercase", children: "Basic" }),
        /* @__PURE__ */ (0, import_jsx_runtime300.jsx)(Button, { variant: "primary/medium", children: "Primary button" }),
        /* @__PURE__ */ (0, import_jsx_runtime300.jsx)(Button, { variant: "secondary/medium", children: "Secondary button" }),
        /* @__PURE__ */ (0, import_jsx_runtime300.jsx)(Button, { variant: "tertiary/medium", children: "Tertiary button" }),
        /* @__PURE__ */ (0, import_jsx_runtime300.jsx)(Button, { variant: "danger/medium", children: "Danger button" })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime300.jsxs)("div", { className: "flex flex-col items-start gap-2", children: [
        /* @__PURE__ */ (0, import_jsx_runtime300.jsx)(Header3, { className: "mb-1 uppercase", children: "Icon left" }),
        /* @__PURE__ */ (0, import_jsx_runtime300.jsx)(Button, { variant: "primary/medium", LeadingIcon: import_solid112.ArrowLeftIcon, children: "Primary button" }),
        /* @__PURE__ */ (0, import_jsx_runtime300.jsx)(Button, { variant: "secondary/medium", LeadingIcon: import_solid112.ArrowLeftIcon, children: "Secondary button" }),
        /* @__PURE__ */ (0, import_jsx_runtime300.jsx)(Button, { variant: "tertiary/medium", LeadingIcon: import_solid112.ArrowLeftIcon, children: "Tertiary button" }),
        /* @__PURE__ */ (0, import_jsx_runtime300.jsx)(Button, { variant: "minimal/medium", LeadingIcon: import_solid112.ArrowLeftIcon, children: "Minimal button" }),
        /* @__PURE__ */ (0, import_jsx_runtime300.jsx)(Button, { variant: "danger/medium", LeadingIcon: import_solid112.ArrowLeftIcon, children: "Danger button" })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime300.jsxs)("div", { className: "flex flex-col items-start gap-2", children: [
        /* @__PURE__ */ (0, import_jsx_runtime300.jsx)(Header3, { className: "mb-1 uppercase", children: "Icon right" }),
        /* @__PURE__ */ (0, import_jsx_runtime300.jsx)(Button, { variant: "primary/medium", TrailingIcon: import_solid112.ArrowRightIcon, children: "Primary button" }),
        /* @__PURE__ */ (0, import_jsx_runtime300.jsx)(Button, { variant: "secondary/medium", TrailingIcon: import_solid112.ArrowRightIcon, children: "Secondary button" }),
        /* @__PURE__ */ (0, import_jsx_runtime300.jsx)(Button, { variant: "tertiary/medium", TrailingIcon: import_solid112.ArrowRightIcon, children: "Tertiary button" }),
        /* @__PURE__ */ (0, import_jsx_runtime300.jsx)(Button, { variant: "minimal/medium", TrailingIcon: import_solid112.ArrowRightIcon, children: "Minimal button" }),
        /* @__PURE__ */ (0, import_jsx_runtime300.jsx)(Button, { variant: "danger/medium", TrailingIcon: import_solid112.ArrowRightIcon, children: "Danger button" })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime300.jsxs)("div", { className: "flex flex-col items-start gap-2", children: [
        /* @__PURE__ */ (0, import_jsx_runtime300.jsx)(Header3, { className: "mb-1 uppercase", children: "Shortcut" }),
        /* @__PURE__ */ (0, import_jsx_runtime300.jsx)(Button, { variant: "primary/medium", shortcut: { key: "s", modifiers: ["meta"] }, children: "Primary button" }),
        /* @__PURE__ */ (0, import_jsx_runtime300.jsx)(Button, { variant: "secondary/medium", shortcut: { key: "s", modifiers: ["meta"] }, children: "Secondary button" }),
        /* @__PURE__ */ (0, import_jsx_runtime300.jsx)(Button, { variant: "tertiary/medium", shortcut: { key: "s", modifiers: ["meta"] }, children: "Tertiary button" }),
        /* @__PURE__ */ (0, import_jsx_runtime300.jsx)(Button, { variant: "minimal/medium", shortcut: { key: "s", modifiers: ["meta"] }, children: "Minimal button" }),
        /* @__PURE__ */ (0, import_jsx_runtime300.jsx)(Button, { variant: "danger/medium", shortcut: { key: "s", modifiers: ["meta"] }, children: "Danger button" })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime300.jsxs)("div", { className: "flex flex-col items-start gap-2", children: [
        /* @__PURE__ */ (0, import_jsx_runtime300.jsx)(Header3, { className: "mb-1 uppercase", children: "Named icon" }),
        /* @__PURE__ */ (0, import_jsx_runtime300.jsx)(Button, { LeadingIcon: import_companyicons9.AirtableIcon, variant: "primary/medium", children: "Connect to Airtable" }),
        /* @__PURE__ */ (0, import_jsx_runtime300.jsx)(Button, { LeadingIcon: import_companyicons9.GitHubDarkIcon, variant: "primary/medium", children: "Connect to GitHub" }),
        /* @__PURE__ */ (0, import_jsx_runtime300.jsx)(Button, { TrailingIcon: import_companyicons9.SlackIcon, variant: "secondary/medium", children: "Connect to Slack" }),
        /* @__PURE__ */ (0, import_jsx_runtime300.jsx)(Button, { TrailingIcon: "warning", variant: "secondary/medium", children: "Connect to Slack" })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime300.jsxs)("div", { className: "flex flex-col items-start gap-2", children: [
        /* @__PURE__ */ (0, import_jsx_runtime300.jsx)(Header3, { className: "mb-1 uppercase", children: "Loading" }),
        /* @__PURE__ */ (0, import_jsx_runtime300.jsx)(Button, { variant: "primary/medium", LeadingIcon: "spinner", children: "Loading Primary\u2026" }),
        /* @__PURE__ */ (0, import_jsx_runtime300.jsx)(Button, { variant: "secondary/medium", LeadingIcon: "spinner", children: "Loading Secondary\u2026" }),
        /* @__PURE__ */ (0, import_jsx_runtime300.jsx)(Button, { variant: "tertiary/medium", LeadingIcon: "spinner", children: "Loading Tertiary\u2026" }),
        /* @__PURE__ */ (0, import_jsx_runtime300.jsx)(Button, { variant: "minimal/medium", LeadingIcon: "spinner", children: "Loading Minimal\u2026" }),
        /* @__PURE__ */ (0, import_jsx_runtime300.jsx)(Button, { variant: "danger/medium", LeadingIcon: "spinner-white", children: "Loading Danger\u2026" })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime300.jsxs)("div", { className: "flex flex-col items-start gap-2", children: [
        /* @__PURE__ */ (0, import_jsx_runtime300.jsx)(Header3, { className: "mb-1 uppercase", children: "Disabled" }),
        /* @__PURE__ */ (0, import_jsx_runtime300.jsx)(Button, { variant: "primary/medium", disabled: !0, children: "Primary button" }),
        /* @__PURE__ */ (0, import_jsx_runtime300.jsx)(Button, { variant: "secondary/medium", disabled: !0, children: "Secondary button" }),
        /* @__PURE__ */ (0, import_jsx_runtime300.jsx)(Button, { variant: "tertiary/medium", disabled: !0, children: "Tertiary button" }),
        /* @__PURE__ */ (0, import_jsx_runtime300.jsx)(Button, { variant: "tertiary/medium", disabled: !0, children: "Minimal button" }),
        /* @__PURE__ */ (0, import_jsx_runtime300.jsx)(Button, { variant: "danger/medium", disabled: !0, children: "Danger button" })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime300.jsxs)("div", { className: "flex flex-col items-start gap-2", children: [
        /* @__PURE__ */ (0, import_jsx_runtime300.jsx)(Header3, { className: "mb-1 uppercase", children: "Icon only" }),
        /* @__PURE__ */ (0, import_jsx_runtime300.jsx)(Button, { variant: "primary/medium", LeadingIcon: import_solid112.ArrowRightIcon }),
        /* @__PURE__ */ (0, import_jsx_runtime300.jsx)(Button, { variant: "secondary/medium", LeadingIcon: import_solid112.LightBulbIcon }),
        /* @__PURE__ */ (0, import_jsx_runtime300.jsx)(Button, { variant: "tertiary/medium", LeadingIcon: "warning" }),
        /* @__PURE__ */ (0, import_jsx_runtime300.jsx)(Button, { variant: "minimal/medium", LeadingIcon: "warning" }),
        /* @__PURE__ */ (0, import_jsx_runtime300.jsx)(Button, { variant: "danger/medium", LeadingIcon: import_solid112.ExclamationTriangleIcon })
      ] })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime300.jsx)(Header1, { className: "mb-2 mt-8", children: "Large buttons" }),
    /* @__PURE__ */ (0, import_jsx_runtime300.jsx)("div", { className: "grid grid-cols-1 gap-8 pb-8", children: /* @__PURE__ */ (0, import_jsx_runtime300.jsx)("div", { className: "flex flex-col gap-2", children: /* @__PURE__ */ (0, import_jsx_runtime300.jsxs)("div", { className: "flex flex-col items-start gap-2", children: [
      /* @__PURE__ */ (0, import_jsx_runtime300.jsxs)(Button, { variant: "primary/large", fullWidth: !0, children: [
        /* @__PURE__ */ (0, import_jsx_runtime300.jsx)(import_companyicons9.GitHubDarkIcon, { className: "mr-1.5 size-[1.2rem]" }),
        /* @__PURE__ */ (0, import_jsx_runtime300.jsx)("span", { className: "text-charcoal-900", children: "Continue with GitHub" })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime300.jsxs)(Button, { variant: "secondary/large", fullWidth: !0, children: [
        /* @__PURE__ */ (0, import_jsx_runtime300.jsx)(import_solid113.EnvelopeIcon, { className: "mr-1.5 h-5 w-5 text-secondary transition" }),
        /* @__PURE__ */ (0, import_jsx_runtime300.jsx)("span", { className: "text-secondary", children: "Continue with Email" })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime300.jsxs)(Button, { variant: "tertiary/large", fullWidth: !0, children: [
        /* @__PURE__ */ (0, import_jsx_runtime300.jsx)(import_companyicons9.GitHubLightIcon, { className: "mr-1.5 size-[1.2rem]" }),
        /* @__PURE__ */ (0, import_jsx_runtime300.jsx)("span", { className: "text-text-bright", children: "Continue with GitHub" })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime300.jsxs)(Button, { variant: "danger/large", fullWidth: !0, children: [
        /* @__PURE__ */ (0, import_jsx_runtime300.jsx)(
          NamedIcon,
          {
            name: "trash-can",
            className: "mr-1.5 h-4 w-4 text-text-bright transition group-hover:text-text-bright"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime300.jsx)("span", { className: "text-text-bright", children: "This is a delete button" })
      ] })
    ] }) }) }),
    /* @__PURE__ */ (0, import_jsx_runtime300.jsx)(Header1, { className: "mb-2 mt-8", children: "Extra Large buttons" }),
    /* @__PURE__ */ (0, import_jsx_runtime300.jsx)("div", { className: "grid grid-cols-1 gap-8 pb-8", children: /* @__PURE__ */ (0, import_jsx_runtime300.jsx)("div", { className: "flex flex-col gap-2", children: /* @__PURE__ */ (0, import_jsx_runtime300.jsxs)("div", { className: "flex flex-col items-start gap-2", children: [
      /* @__PURE__ */ (0, import_jsx_runtime300.jsxs)(Button, { variant: "primary/extra-large", fullWidth: !0, children: [
        /* @__PURE__ */ (0, import_jsx_runtime300.jsx)(import_companyicons9.GitHubDarkIcon, { className: "mr-1.5 h-5 w-5" }),
        /* @__PURE__ */ (0, import_jsx_runtime300.jsx)("span", { className: "text-charcoal-900", children: "Continue with GitHub" })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime300.jsxs)(Button, { variant: "secondary/extra-large", fullWidth: !0, children: [
        /* @__PURE__ */ (0, import_jsx_runtime300.jsx)(import_solid113.EnvelopeIcon, { className: "mr-1.5 h-5 w-5 text-secondary transition" }),
        /* @__PURE__ */ (0, import_jsx_runtime300.jsx)("span", { className: "text-secondary", children: "Continue with Email" })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime300.jsxs)(Button, { variant: "tertiary/extra-large", fullWidth: !0, children: [
        /* @__PURE__ */ (0, import_jsx_runtime300.jsx)(import_companyicons9.GitHubLightIcon, { className: "mr-1.5 h-5 w-5" }),
        /* @__PURE__ */ (0, import_jsx_runtime300.jsx)("span", { className: "text-text-bright", children: "Continue with GitHub" })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime300.jsxs)(Button, { variant: "danger/extra-large", fullWidth: !0, children: [
        /* @__PURE__ */ (0, import_jsx_runtime300.jsx)(
          NamedIcon,
          {
            name: "trash-can",
            className: "mr-1.5 h-5 w-5 text-text-bright transition group-hover:text-text-bright"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime300.jsx)("span", { className: "text-text-bright", children: "This is a delete button" })
      ] })
    ] }) }) }),
    /* @__PURE__ */ (0, import_jsx_runtime300.jsx)(Header1, { className: "mb-2 mt-8", children: "Menu items" }),
    /* @__PURE__ */ (0, import_jsx_runtime300.jsx)("div", { className: "grid grid-cols-1", children: /* @__PURE__ */ (0, import_jsx_runtime300.jsxs)("div", { className: "flex flex-col items-start gap-1 rounded border border-charcoal-800 bg-charcoal-850 p-1", children: [
      /* @__PURE__ */ (0, import_jsx_runtime300.jsx)(Button, { variant: "menu-item", fullWidth: !0, textAlignLeft: !0, LeadingIcon: "folder", children: "Acme Inc." }),
      /* @__PURE__ */ (0, import_jsx_runtime300.jsx)(Button, { variant: "menu-item", fullWidth: !0, textAlignLeft: !0, LeadingIcon: "plus", children: "New Project" }),
      /* @__PURE__ */ (0, import_jsx_runtime300.jsx)(
        Button,
        {
          variant: "menu-item",
          fullWidth: !0,
          textAlignLeft: !0,
          LeadingIcon: "globe",
          TrailingIcon: "check",
          className: "bg-charcoal-750 group-hover:bg-charcoal-750",
          children: "Item enabled"
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime300.jsx)(Button, { variant: "menu-item", fullWidth: !0, textAlignLeft: !0, LeadingIcon: "slack", children: "When a Stripe payment fails re-engage the customer" }),
      /* @__PURE__ */ (0, import_jsx_runtime300.jsx)(Button, { variant: "menu-item", fullWidth: !0, textAlignLeft: !0, LeadingIcon: "spinner", children: "In Progress" }),
      /* @__PURE__ */ (0, import_jsx_runtime300.jsx)(
        Button,
        {
          variant: "menu-item",
          fullWidth: !0,
          textAlignLeft: !0,
          LeadingIcon: import_solid112.ArrowUturnLeftIcon,
          leadingIconClassName: "text-text-dimmed",
          children: "Latest run payload"
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime300.jsx)(
        Button,
        {
          variant: "menu-item",
          fullWidth: !0,
          textAlignLeft: !0,
          LeadingIcon: import_solid112.NoSymbolIcon,
          leadingIconClassName: "text-text-dimmed",
          disabled: !0,
          className: "group-hover:bg-transparent",
          children: "Disabled menu item"
        }
      )
    ] }) })
  ] });
}

// app/routes/storybook.callout/route.tsx
var route_exports140 = {};
__export(route_exports140, {
  default: () => Story24
});
var import_solid114 = require("@heroicons/react/20/solid");
var import_jsx_runtime301 = require("react/jsx-runtime");
function Story24() {
  return /* @__PURE__ */ (0, import_jsx_runtime301.jsxs)("div", { className: "grid grid-cols-2", children: [
    /* @__PURE__ */ (0, import_jsx_runtime301.jsxs)("div", { className: "flex flex-col items-start gap-y-4 p-4", children: [
      /* @__PURE__ */ (0, import_jsx_runtime301.jsx)(Header2, { children: "Callouts" }),
      /* @__PURE__ */ (0, import_jsx_runtime301.jsx)(Callout, { variant: "info", children: "This is an info callout" }),
      /* @__PURE__ */ (0, import_jsx_runtime301.jsx)(Callout, { variant: "warning", children: "This is a warning callout" }),
      /* @__PURE__ */ (0, import_jsx_runtime301.jsx)(Callout, { variant: "error", children: "This is an error callout" }),
      /* @__PURE__ */ (0, import_jsx_runtime301.jsx)(Callout, { variant: "idea", children: "This is an idea callout" }),
      /* @__PURE__ */ (0, import_jsx_runtime301.jsx)(Callout, { variant: "success", children: "This is a success callout" }),
      /* @__PURE__ */ (0, import_jsx_runtime301.jsx)(Callout, { variant: "docs", children: "This is a docs callout" }),
      /* @__PURE__ */ (0, import_jsx_runtime301.jsx)(Callout, { variant: "success", icon: /* @__PURE__ */ (0, import_jsx_runtime301.jsx)(import_solid114.EnvelopeIcon, { className: "h-5 w-5 text-green-400" }), children: "This callout has a custom icon" }),
      /* @__PURE__ */ (0, import_jsx_runtime301.jsx)(Callout, { variant: "pending", children: "This is a pending callout" }),
      /* @__PURE__ */ (0, import_jsx_runtime301.jsx)(Callout, { variant: "pricing", children: "This is a pricing callout" }),
      /* @__PURE__ */ (0, import_jsx_runtime301.jsx)(Callout, { variant: "error", children: "This is an error message which runs over multiple lines. This is an error message which runs over multiple lines. This is an error message which runs over multiple lines." })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime301.jsxs)("div", { className: "flex flex-col items-start gap-y-4 p-4", children: [
      /* @__PURE__ */ (0, import_jsx_runtime301.jsx)(Header2, { children: "Callouts with a link" }),
      /* @__PURE__ */ (0, import_jsx_runtime301.jsx)(Callout, { to: "#", variant: "info", children: "This is an info callout" }),
      /* @__PURE__ */ (0, import_jsx_runtime301.jsx)(Callout, { to: "#", variant: "warning", children: "This is a warning callout" }),
      /* @__PURE__ */ (0, import_jsx_runtime301.jsx)(Callout, { to: "#", variant: "error", children: "This is an error callout" }),
      /* @__PURE__ */ (0, import_jsx_runtime301.jsx)(Callout, { to: "#", variant: "idea", children: "This is an idea callout" }),
      /* @__PURE__ */ (0, import_jsx_runtime301.jsx)(Callout, { to: "#", variant: "docs", children: "This is a docs callout" }),
      /* @__PURE__ */ (0, import_jsx_runtime301.jsx)(Callout, { to: "#", variant: "idea", icon: /* @__PURE__ */ (0, import_jsx_runtime301.jsx)(import_solid114.EnvelopeIcon, { className: "h-5 w-5 text-green-400" }), children: "This callout has a custom icon" }),
      /* @__PURE__ */ (0, import_jsx_runtime301.jsx)(Callout, { to: "#", variant: "pending", children: "This is a pending callout" }),
      /* @__PURE__ */ (0, import_jsx_runtime301.jsx)(Callout, { to: "#", variant: "pricing", children: "This is a pricing callout" }),
      /* @__PURE__ */ (0, import_jsx_runtime301.jsx)(Callout, { variant: "info", to: "https://google.com", children: "This uses an http link" }),
      /* @__PURE__ */ (0, import_jsx_runtime301.jsx)(Callout, { to: "#", variant: "error", children: "This is an error message which runs over multiple lines. This is an error message which runs over multiple lines. This is an error message which runs over multiple lines." })
    ] })
  ] });
}

// app/routes/storybook.popover/route.tsx
var route_exports141 = {};
__export(route_exports141, {
  default: () => Story25
});
var import_react227 = require("react");
var import_jsx_runtime302 = require("react/jsx-runtime");
function Story25() {
  let [isOpen, setIsOpen] = (0, import_react227.useState)(!1);
  return /* @__PURE__ */ (0, import_jsx_runtime302.jsx)("div", { className: "p-20", children: /* @__PURE__ */ (0, import_jsx_runtime302.jsxs)(Popover, { onOpenChange: (open) => setIsOpen(open), children: [
    /* @__PURE__ */ (0, import_jsx_runtime302.jsx)(PopoverArrowTrigger, { isOpen, children: "My Blog" }),
    /* @__PURE__ */ (0, import_jsx_runtime302.jsxs)(
      PopoverContent,
      {
        className: "min-w-[20rem] overflow-y-auto p-0 scrollbar-thin scrollbar-track-transparent scrollbar-thumb-charcoal-600",
        align: "start",
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime302.jsxs)(import_react227.Fragment, { children: [
            /* @__PURE__ */ (0, import_jsx_runtime302.jsx)(PopoverSectionHeader, { title: "Acme Ltd." }),
            /* @__PURE__ */ (0, import_jsx_runtime302.jsxs)("div", { className: "flex flex-col gap-1 p-1", children: [
              /* @__PURE__ */ (0, import_jsx_runtime302.jsx)(PopoverMenuItem, { to: "#", title: "My Blog", icon: "folder" }),
              /* @__PURE__ */ (0, import_jsx_runtime302.jsx)(PopoverMenuItem, { to: "#", title: "New Project", isSelected: !1, icon: "plus" })
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime302.jsx)("div", { className: "border-t border-charcoal-800 p-1", children: /* @__PURE__ */ (0, import_jsx_runtime302.jsx)(PopoverMenuItem, { to: "#", title: "New Organization", isSelected: !1, icon: "plus" }) })
        ]
      }
    )
  ] }) });
}

// app/routes/storybook.tooltip/route.tsx
var route_exports142 = {};
__export(route_exports142, {
  default: () => Story26
});
var import_solid115 = require("@heroicons/react/20/solid"), import_lucide_react14 = require("lucide-react");
var import_jsx_runtime303 = require("react/jsx-runtime");
function Story26() {
  return /* @__PURE__ */ (0, import_jsx_runtime303.jsxs)(MainCenteredContainer, { className: "flex flex-col gap-4", children: [
    /* @__PURE__ */ (0, import_jsx_runtime303.jsxs)("div", { className: "flex gap-4", children: [
      /* @__PURE__ */ (0, import_jsx_runtime303.jsx)(Header2, { children: "Rich Tooltip:" }),
      /* @__PURE__ */ (0, import_jsx_runtime303.jsx)(TooltipProvider, { children: /* @__PURE__ */ (0, import_jsx_runtime303.jsxs)(Tooltip, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime303.jsx)(TooltipTrigger, { children: /* @__PURE__ */ (0, import_jsx_runtime303.jsx)(import_lucide_react14.ClipboardIcon, { className: "h-5 w-5" }) }),
        /* @__PURE__ */ (0, import_jsx_runtime303.jsxs)(TooltipContent, { className: "flex items-center gap-1", children: [
          /* @__PURE__ */ (0, import_jsx_runtime303.jsx)(import_solid115.LightBulbIcon, { className: "h-4 w-4 text-yellow-400" }),
          "Copy"
        ] })
      ] }) })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime303.jsxs)("div", { className: "flex gap-4", children: [
      /* @__PURE__ */ (0, import_jsx_runtime303.jsx)(Header2, { children: "Simple Tooltip:" }),
      /* @__PURE__ */ (0, import_jsx_runtime303.jsx)(SimpleTooltip, { button: /* @__PURE__ */ (0, import_jsx_runtime303.jsx)(import_lucide_react14.ClipboardIcon, { className: "h-5 w-5" }), content: "Copy" })
    ] })
  ] });
}

// app/routes/api.v1.endpoints.ts
var api_v1_endpoints_exports = {};
__export(api_v1_endpoints_exports, {
  action: () => action88
});
var import_server_runtime101 = require("@remix-run/server-runtime"), import_zod248 = require("zod"), import_zod_error4 = require("zod-error");
var BodySchema4 = import_zod248.z.object({
  url: import_zod248.z.string().url({ message: "Invalid url" }),
  id: import_zod248.z.string()
});
async function action88({ request }) {
  if (logger.info("action", { url: request.url }), request.method.toUpperCase() !== "POST")
    return { status: 405, body: "Method Not Allowed" };
  let authenticationResult = await authenticateApiRequest(request);
  if (!authenticationResult)
    return logger.info("Invalid or missing api key", { url: request.url }), (0, import_server_runtime101.json)({ error: "Invalid or Missing API key" }, { status: 401 });
  let authenticatedEnv = authenticationResult.environment, anyBody = await request.json(), body = BodySchema4.safeParse(anyBody);
  if (!body.success)
    return (0, import_server_runtime101.json)(
      {
        error: `Invalid request body: ${(0, import_zod_error4.generateErrorMessage)(body.error.issues)}`
      },
      { status: 400 }
    );
  logger.info("Creating endpoint", {
    url: request.url,
    endpoint: body.data
  });
  let service = new CreateEndpointService();
  try {
    let endpoint = await service.call({
      environment: authenticatedEnv,
      url: body.data.url,
      id: body.data.id
    });
    return (0, import_server_runtime101.json)(endpoint);
  } catch (error) {
    return error instanceof Error ? (logger.debug("Error creating endpoint", {
      url: request.url,
      error: error.message
    }), (0, import_server_runtime101.json)({ error: error.message }, { status: 400 })) : (0, import_server_runtime101.json)({ error: "Something went wrong" }, { status: 500 });
  }
}

// app/routes/api.v1.packets.$.ts
var api_v1_packets_exports = {};
__export(api_v1_packets_exports, {
  action: () => action89,
  loader: () => loader131
});
var import_server_runtime102 = require("@remix-run/server-runtime"), import_zod249 = require("zod");
var ParamsSchema86 = import_zod249.z.object({
  "*": import_zod249.z.string()
});
async function action89({ request, params }) {
  if (request.method.toUpperCase() !== "PUT")
    return { status: 405, body: "Method Not Allowed" };
  let authenticationResult = await authenticateApiRequest(request);
  if (!authenticationResult)
    return (0, import_server_runtime102.json)({ error: "Invalid or Missing API key" }, { status: 401 });
  let filename = ParamsSchema86.parse(params)["*"], presignedUrl = await generatePresignedUrl(
    authenticationResult.environment.project.externalRef,
    authenticationResult.environment.slug,
    filename,
    "PUT"
  );
  return presignedUrl ? (0, import_server_runtime102.json)({ presignedUrl }) : (0, import_server_runtime102.json)({ error: "Failed to generate presigned URL" }, { status: 500 });
}
async function loader131({ request, params }) {
  let authenticationResult = await authenticateApiRequest(request);
  if (!authenticationResult)
    return (0, import_server_runtime102.json)({ error: "Invalid or Missing API key" }, { status: 401 });
  let filename = ParamsSchema86.parse(params)["*"], presignedUrl = await generatePresignedUrl(
    authenticationResult.environment.project.externalRef,
    authenticationResult.environment.slug,
    filename,
    "GET"
  );
  return presignedUrl ? (0, import_server_runtime102.json)({ presignedUrl }) : (0, import_server_runtime102.json)({ error: "Failed to generate presigned URL" }, { status: 500 });
}

// app/routes/api.v1.schedules.ts
var api_v1_schedules_exports = {};
__export(api_v1_schedules_exports, {
  action: () => action90,
  loader: () => loader132
});
var import_server_runtime103 = require("@remix-run/server-runtime");
var import_zod250 = require("zod");
var SearchParamsSchema2 = import_zod250.z.object({
  page: import_zod250.z.coerce.number().int().positive().optional(),
  perPage: import_zod250.z.coerce.number().int().positive().optional()
});
async function action90({ request }) {
  if (request.method.toUpperCase() !== "POST")
    return { status: 405, body: "Method Not Allowed" };
  let authenticationResult = await authenticateApiRequest(request);
  if (!authenticationResult)
    return (0, import_server_runtime103.json)({ error: "Invalid or Missing API Key" }, { status: 401 });
  let rawBody = await request.json(), body = CreateScheduleOptions.safeParse(rawBody);
  if (!body.success)
    return (0, import_server_runtime103.json)({ error: "Invalid request body", issues: body.error.issues }, { status: 400 });
  let service = new UpsertTaskScheduleService();
  try {
    let options2 = {
      taskIdentifier: body.data.task,
      cron: body.data.cron,
      environments: [authenticationResult.environment.id],
      externalId: body.data.externalId,
      deduplicationKey: body.data.deduplicationKey,
      timezone: body.data.timezone
    }, schedule = await service.call(authenticationResult.environment.projectId, options2), responseObject = {
      id: schedule.id,
      task: schedule.task,
      active: schedule.active,
      generator: {
        type: "CRON",
        expression: schedule.cron,
        description: schedule.cronDescription
      },
      timezone: schedule.timezone,
      externalId: schedule.externalId ?? void 0,
      deduplicationKey: schedule.deduplicationKey,
      environments: schedule.environments,
      nextRun: schedule.nextRun
    };
    return (0, import_server_runtime103.json)(responseObject, { status: 200 });
  } catch (error) {
    return error instanceof ServiceValidationError ? (0, import_server_runtime103.json)({ error: error.message }, { status: 422 }) : (0, import_server_runtime103.json)(
      { error: error instanceof Error ? error.message : "Internal Server Error" },
      { status: 500 }
    );
  }
}
async function loader132({ request }) {
  let authenticationResult = await authenticateApiRequest(request);
  if (!authenticationResult)
    return (0, import_server_runtime103.json)({ error: "Invalid or Missing API Key" }, { status: 401 });
  let rawSearchParams = new URL(request.url).searchParams, params = SearchParamsSchema2.safeParse(Object.fromEntries(rawSearchParams.entries()));
  if (!params.success)
    return (0, import_server_runtime103.json)(
      { error: "Invalid request parameters", issues: params.error.issues },
      { status: 400 }
    );
  let result = await new ScheduleListPresenter().call({
    projectId: authenticationResult.environment.projectId,
    page: params.data.page ?? 1,
    pageSize: params.data.perPage,
    environments: [authenticationResult.environment.id]
  });
  return {
    data: result.schedules.map((schedule) => ({
      id: schedule.friendlyId,
      task: schedule.taskIdentifier,
      generator: {
        type: "CRON",
        expression: schedule.cron,
        description: schedule.cronDescription
      },
      timezone: schedule.timezone,
      deduplicationKey: schedule.userProvidedDeduplicationKey ? schedule.deduplicationKey : void 0,
      externalId: schedule.externalId,
      active: schedule.active,
      nextRun: schedule.nextRun,
      environments: schedule.environments
    })),
    pagination: {
      currentPage: result.currentPage,
      totalPages: result.totalPages,
      count: result.totalCount
    }
  };
}

// app/routes/api.v1.timezones.ts
var api_v1_timezones_exports = {};
__export(api_v1_timezones_exports, {
  loader: () => loader133
});
var import_server_runtime104 = require("@remix-run/server-runtime"), import_zod251 = require("zod");
var SearchParamsSchema3 = import_zod251.z.object({
  excludeUtc: import_zod251.z.preprocess((value) => value === "true", import_zod251.z.boolean()).default(!1)
});
async function loader133({ request }) {
  if (request.method.toUpperCase() === "OPTIONS")
    return apiCors(request, (0, import_server_runtime104.json)({}));
  let rawSearchParams = new URL(request.url).searchParams, params = SearchParamsSchema3.safeParse(Object.fromEntries(rawSearchParams.entries()));
  if (!params.success)
    return apiCors(
      request,
      (0, import_server_runtime104.json)({ error: "Invalid request parameters", issues: params.error.issues }, { status: 400 })
    );
  let timezones = getTimezones(!params.data.excludeUtc);
  return apiCors(request, (0, import_server_runtime104.json)({ timezones }));
}

// app/routes/storybook.badges/route.tsx
var route_exports143 = {};
__export(route_exports143, {
  default: () => Story27
});
var import_jsx_runtime304 = require("react/jsx-runtime");
function Story27() {
  return /* @__PURE__ */ (0, import_jsx_runtime304.jsxs)("div", { className: "flex flex-col items-start gap-y-8 p-8", children: [
    /* @__PURE__ */ (0, import_jsx_runtime304.jsx)(Badge, { children: "Default" }),
    /* @__PURE__ */ (0, import_jsx_runtime304.jsx)("div", { className: "bg-charcoal-1000 p-4", children: /* @__PURE__ */ (0, import_jsx_runtime304.jsx)(Badge, { variant: "small", children: "Small" }) }),
    /* @__PURE__ */ (0, import_jsx_runtime304.jsx)(Badge, { variant: "outline", children: "Outline" }),
    /* @__PURE__ */ (0, import_jsx_runtime304.jsx)(Badge, { variant: "v3", children: "v3" }),
    /* @__PURE__ */ (0, import_jsx_runtime304.jsx)(Badge, { variant: "outline-rounded", children: "Outline rounded" })
  ] });
}

// app/routes/storybook.dialog/route.tsx
var route_exports144 = {};
__export(route_exports144, {
  default: () => Story28
});
var import_jsx_runtime305 = require("react/jsx-runtime");
function Story28() {
  return /* @__PURE__ */ (0, import_jsx_runtime305.jsx)("div", { className: "grid h-full place-items-center p-20", children: /* @__PURE__ */ (0, import_jsx_runtime305.jsxs)(Dialog, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime305.jsx)(DialogTrigger, { children: "Open" }),
    /* @__PURE__ */ (0, import_jsx_runtime305.jsxs)(DialogContent, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime305.jsx)(DialogHeader, { children: /* @__PURE__ */ (0, import_jsx_runtime305.jsx)(DialogTitle, { children: "Are you sure absolutely sure?" }) }),
      /* @__PURE__ */ (0, import_jsx_runtime305.jsx)(DialogDescription, { children: "This action cannot be undone. This will permanently delete your account and remove your data from our servers." })
    ] })
  ] }) });
}

// app/routes/storybook.filter/route.tsx
var route_exports145 = {};
__export(route_exports145, {
  default: () => Story29
});
var import_solid116 = require("@heroicons/react/20/solid"), import_outline11 = require("@heroicons/react/24/outline"), import_react228 = require("@remix-run/react"), import_react229 = require("react");
var import_jsx_runtime306 = require("react/jsx-runtime");
function Story29() {
  return /* @__PURE__ */ (0, import_jsx_runtime306.jsx)("div", { className: "flex h-full max-w-full flex-wrap items-start justify-start gap-2 px-8 py-16", children: /* @__PURE__ */ (0, import_jsx_runtime306.jsx)(import_react228.Form, { className: "space-y-4", children: /* @__PURE__ */ (0, import_jsx_runtime306.jsx)("div", { className: "flex gap-16", children: /* @__PURE__ */ (0, import_jsx_runtime306.jsx)(Filter, {}) }) }) });
}
var filterTypes2 = [
  {
    name: "status",
    title: "Status",
    icon: /* @__PURE__ */ (0, import_jsx_runtime306.jsx)(import_outline11.CircleStackIcon, { className: "h-4 w-4" })
  },
  { name: "environment", title: "Environment", icon: /* @__PURE__ */ (0, import_jsx_runtime306.jsx)(import_solid116.CpuChipIcon, { className: "h-4 w-4" }) }
];
function Filter() {
  let [filterType, setFilterType] = (0, import_react229.useState)(), [searchValue, setSearchValue] = (0, import_react229.useState)(""), shortcut2 = { key: "f" }, clearSearchValue = (0, import_react229.useCallback)(() => {
    setSearchValue("");
  }, [setSearchValue]);
  return /* @__PURE__ */ (0, import_jsx_runtime306.jsx)(
    ComboboxProvider2,
    {
      resetValueOnHide: !0,
      setValue: (value) => {
        (0, import_react229.startTransition)(() => {
          setSearchValue(value);
        });
      },
      setOpen: (open) => {
        open || setFilterType(void 0);
      },
      children: /* @__PURE__ */ (0, import_jsx_runtime306.jsx)(
        Menu2,
        {
          searchValue,
          clearSearchValue,
          shortcut: shortcut2,
          trigger: /* @__PURE__ */ (0, import_jsx_runtime306.jsx)(SelectTrigger, { variant: "tertiary/small", shortcut: shortcut2, tooltipTitle: "Filter runs", children: "Filter" }),
          filterType,
          setFilterType
        }
      )
    }
  );
}
function Menu2(props) {
  switch (props.filterType) {
    case void 0:
      return /* @__PURE__ */ (0, import_jsx_runtime306.jsx)(MainMenu2, { ...props });
    case "status":
      return /* @__PURE__ */ (0, import_jsx_runtime306.jsx)(Statuses, { ...props });
    case "environment":
      return /* @__PURE__ */ (0, import_jsx_runtime306.jsx)(Environments2, { ...props });
  }
  return /* @__PURE__ */ (0, import_jsx_runtime306.jsx)(import_jsx_runtime306.Fragment, {});
}
function MainMenu2({ searchValue, clearSearchValue, setFilterType, trigger, shortcut: shortcut2 }) {
  let filtered = (0, import_react229.useMemo)(() => filterTypes2.filter(
    (item) => item.title.toLowerCase().includes(searchValue.toLowerCase())
  ), [searchValue]);
  return /* @__PURE__ */ (0, import_jsx_runtime306.jsxs)(SelectProvider2, { virtualFocus: !0, children: [
    trigger,
    /* @__PURE__ */ (0, import_jsx_runtime306.jsxs)(SelectPopover2, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime306.jsx)(ComboBox, { placeholder: "Filter...", shortcut: shortcut2, value: searchValue }),
      /* @__PURE__ */ (0, import_jsx_runtime306.jsx)(SelectList2, { children: filtered.map((type, index) => /* @__PURE__ */ (0, import_jsx_runtime306.jsx)(
        SelectButtonItem,
        {
          onClick: () => {
            clearSearchValue(), setFilterType(type.name);
          },
          icon: type.icon,
          shortcut: shortcutFromIndex(index, { shortcutsEnabled: !0 }),
          children: type.title
        },
        type.name
      )) })
    ] })
  ] });
}
var statuses2 = allTaskRunStatuses.map((status) => ({
  title: runStatusTitle2(status),
  value: status
}));
function Statuses({ trigger, clearSearchValue, shortcut: shortcut2, searchValue, setFilterType }) {
  let { values, replace } = useSearchParams(), handleChange = (0, import_react229.useCallback)((values2) => {
    clearSearchValue(), replace({ status: values2 });
  }, []), filtered = (0, import_react229.useMemo)(() => statuses2.filter((item) => item.title.toLowerCase().includes(searchValue.toLowerCase())), [searchValue]);
  return /* @__PURE__ */ (0, import_jsx_runtime306.jsxs)(SelectProvider2, { value: values("status"), setValue: handleChange, virtualFocus: !0, children: [
    trigger,
    /* @__PURE__ */ (0, import_jsx_runtime306.jsxs)(
      SelectPopover2,
      {
        hideOnEscape: () => (setFilterType(void 0), !1),
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime306.jsx)(ComboBox, { placeholder: "Filter by status...", shortcut: shortcut2, value: searchValue }),
          /* @__PURE__ */ (0, import_jsx_runtime306.jsx)(SelectList2, { children: filtered.map((item, index) => /* @__PURE__ */ (0, import_jsx_runtime306.jsx)(
            SelectItem2,
            {
              value: item.value,
              shortcut: shortcutFromIndex(index, { shortcutsEnabled: !0 }),
              children: /* @__PURE__ */ (0, import_jsx_runtime306.jsx)(TaskRunStatusCombo, { status: item.value, iconClassName: "animate-none" })
            },
            item.value
          )) })
        ]
      }
    )
  ] });
}
var environments = [
  {
    type: "DEVELOPMENT"
  },
  {
    type: "STAGING"
  },
  {
    type: "PRODUCTION"
  }
];
function Environments2({
  trigger,
  clearSearchValue,
  shortcut: shortcut2,
  searchValue,
  setFilterType
}) {
  let { values, replace } = useSearchParams(), handleChange = (0, import_react229.useCallback)((values2) => {
    clearSearchValue(), replace({ environment: values2 });
  }, []), filtered = (0, import_react229.useMemo)(() => environments.filter(
    (item) => item.type.toLowerCase().includes(searchValue.toLowerCase())
  ), [searchValue]);
  return /* @__PURE__ */ (0, import_jsx_runtime306.jsxs)(SelectProvider2, { value: values("environment"), setValue: handleChange, virtualFocus: !0, children: [
    trigger,
    /* @__PURE__ */ (0, import_jsx_runtime306.jsxs)(
      SelectPopover2,
      {
        hideOnEscape: () => (setFilterType(void 0), !1),
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime306.jsx)(
            ComboBox,
            {
              placeholder: "Filter by environment...",
              shortcut: shortcut2,
              value: searchValue
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime306.jsx)(SelectList2, { children: filtered.map((item, index) => /* @__PURE__ */ (0, import_jsx_runtime306.jsx)(
            SelectItem2,
            {
              value: item.type,
              shortcut: shortcutFromIndex(index, { shortcutsEnabled: !0 }),
              children: /* @__PURE__ */ (0, import_jsx_runtime306.jsx)(EnvironmentLabel, { environment: item })
            },
            item.type
          )) })
        ]
      }
    )
  ] });
}

// app/routes/storybook.select/route.tsx
var route_exports146 = {};
__export(route_exports146, {
  default: () => Story30,
  projects: () => projects
});
var import_solid117 = require("@heroicons/react/20/solid"), import_react230 = require("@remix-run/react"), import_react231 = require("react");
var import_jsx_runtime307 = require("react/jsx-runtime"), branches = [
  "main",
  "0.10-stable",
  "0.11-stable",
  "0.12-stable",
  "0.13-stable",
  "0.14-stable",
  "15-stable",
  "15.6-dev",
  "16.3-dev",
  "16.4.2-dev",
  "16.8.3",
  "16.8.4",
  "16.8.5",
  "16.8.6",
  "17.0.0-dev",
  "builds/facebook-www",
  "devtools-v4-merge",
  "fabric-cleanup",
  "fabric-focus-blur",
  "gh-pages",
  "leg",
  "nativefb-enable-cache",
  "nov-main-trigger",
  "rsckeys"
];
function Story30() {
  return /* @__PURE__ */ (0, import_jsx_runtime307.jsx)("div", { className: "flex h-full max-w-full flex-wrap items-start justify-start gap-2 px-4 py-16", children: /* @__PURE__ */ (0, import_jsx_runtime307.jsx)(import_react230.Form, { className: "space-y-4", children: /* @__PURE__ */ (0, import_jsx_runtime307.jsxs)("div", { className: "flex gap-16", children: [
    /* @__PURE__ */ (0, import_jsx_runtime307.jsx)(ProjectSelector2, {}),
    /* @__PURE__ */ (0, import_jsx_runtime307.jsx)(Statuses2, {}),
    /* @__PURE__ */ (0, import_jsx_runtime307.jsxs)(Select2, { name: "static", text: "Static", defaultValue: [], shortcut: { key: "e" }, children: [
      /* @__PURE__ */ (0, import_jsx_runtime307.jsx)(SelectItem2, { value: "value", shortcut: { key: "1" }, children: "Item 1" }),
      /* @__PURE__ */ (0, import_jsx_runtime307.jsx)(SelectItem2, { value: "value2", shortcut: { key: "2" }, children: "Item 2" })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime307.jsxs)(
      Select2,
      {
        variant: "tertiary/medium",
        text: "Tertiary medium",
        defaultValue: [],
        shortcut: { key: "e" },
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime307.jsx)(SelectItem2, { value: "value", shortcut: { key: "1" }, children: "Item 1" }),
          /* @__PURE__ */ (0, import_jsx_runtime307.jsx)(SelectItem2, { value: "value2", shortcut: { key: "2" }, children: "Item 2" })
        ]
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime307.jsxs)(Select2, { variant: "minimal/small", text: "Minimal", defaultValue: [], shortcut: { key: "e" }, children: [
      /* @__PURE__ */ (0, import_jsx_runtime307.jsx)(SelectItem2, { value: "value", shortcut: { key: "1" }, children: "Item 1" }),
      /* @__PURE__ */ (0, import_jsx_runtime307.jsx)(SelectItem2, { value: "value2", shortcut: { key: "2" }, children: "Item 2" })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime307.jsxs)(
      Select2,
      {
        variant: "minimal/medium",
        text: "Tertiary medium",
        defaultValue: [],
        shortcut: { key: "e" },
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime307.jsx)(SelectItem2, { value: "value", shortcut: { key: "1" }, children: "Item 1" }),
          /* @__PURE__ */ (0, import_jsx_runtime307.jsx)(SelectItem2, { value: "value2", shortcut: { key: "2" }, children: "Item 2" })
        ]
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime307.jsxs)(
      Select2,
      {
        name: "static",
        text: "Heading",
        defaultValue: [],
        showHeading: !0,
        heading: "A heading",
        shortcut: { key: "h" },
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime307.jsx)(SelectItem2, { value: "value", shortcut: { key: "1" }, children: "Item 1" }),
          /* @__PURE__ */ (0, import_jsx_runtime307.jsx)(SelectItem2, { value: "value2", shortcut: { key: "2" }, children: "Item 2" })
        ]
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime307.jsx)(
      Select2,
      {
        name: "branch2",
        heading: "Filter by status...",
        defaultValue: "main",
        items: branches,
        children: (matches) => matches?.map((value) => /* @__PURE__ */ (0, import_jsx_runtime307.jsx)(SelectItem2, { value }, value))
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime307.jsx)(Button, { variant: "tertiary/small", children: "Submit" })
  ] }) }) });
}
var statuses3 = allTaskRunStatuses.map((status) => ({
  title: runStatusTitle2(status),
  value: status
}));
function Statuses2() {
  let navigate = (0, import_react230.useNavigate)(), location = useOptimisticLocation(), search = new URLSearchParams(location.search), handleChange = (0, import_react231.useCallback)((values) => {
    search.delete("status");
    for (let value of values)
      search.append("status", value);
    navigate(`${location.pathname}?${search.toString()}`, { replace: !0 });
  }, []);
  return /* @__PURE__ */ (0, import_jsx_runtime307.jsx)(
    Select2,
    {
      name: "status",
      text: "Status",
      value: search.getAll("status"),
      setValue: handleChange,
      heading: "Filter by status...",
      items: statuses3,
      filter: (item, search2) => item.title.toLowerCase().includes(search2.toLowerCase()),
      shortcut: { key: "s" },
      children: (matches, { shortcutsEnabled }) => /* @__PURE__ */ (0, import_jsx_runtime307.jsx)(import_jsx_runtime307.Fragment, { children: matches?.map((item, index) => /* @__PURE__ */ (0, import_jsx_runtime307.jsx)(
        SelectItem2,
        {
          value: item.value,
          shortcut: shortcutFromIndex(index, { shortcutsEnabled }),
          children: /* @__PURE__ */ (0, import_jsx_runtime307.jsx)(TaskRunStatusCombo, { status: item.value, iconClassName: "animate-none" })
        },
        item.value
      )) })
    }
  );
}
var projects = [
  {
    type: "section",
    title: "Apple",
    items: [
      {
        title: "iTunes",
        value: "itunes"
      },
      {
        title: "App Store",
        value: "appstore"
      }
    ]
  },
  {
    type: "section",
    title: "Google",
    items: [
      {
        title: "Maps",
        value: "maps"
      },
      {
        title: "Gmail",
        value: "gmail"
      },
      {
        title: "Waymo",
        value: "waymo"
      },
      {
        title: "Android",
        value: "android"
      }
    ]
  },
  {
    type: "section",
    title: "Uber",
    items: [
      {
        title: "Planner",
        value: "planner"
      }
    ]
  }
];
function ProjectSelector2() {
  let location = useOptimisticLocation(), search = new URLSearchParams(location.search), selected = projects.find((p) => p.items.some((i) => i.value === search.get("project")))?.items.find((i) => i.value === search.get("project")), searchParams = new URLSearchParams(location.search);
  return searchParams.delete("project"), /* @__PURE__ */ (0, import_jsx_runtime307.jsx)(
    Select2,
    {
      name: "project",
      defaultValue: selected?.value,
      text: selected?.title,
      heading: "Find project...",
      icon: /* @__PURE__ */ (0, import_jsx_runtime307.jsx)(LogoIcon, { className: "h-3 w-3" }),
      items: projects,
      shortcut: { key: "p", modifiers: ["alt"] },
      filter: (item, search2, sectionTitle) => sectionTitle?.toLowerCase().includes(search2.toLowerCase()) || item.title.toLowerCase().includes(search2.toLowerCase()),
      children: (matches, { shortcutsEnabled, section }) => /* @__PURE__ */ (0, import_jsx_runtime307.jsxs)(SelectGroup2, { children: [
        section && /* @__PURE__ */ (0, import_jsx_runtime307.jsx)(SelectGroupLabel2, { children: section.title }),
        matches?.map((match, index) => /* @__PURE__ */ (0, import_jsx_runtime307.jsx)(
          SelectLinkItem,
          {
            icon: /* @__PURE__ */ (0, import_jsx_runtime307.jsx)(import_solid117.CircleStackIcon, { className: "size-3" }),
            value: match.value,
            to: `?${searchParams.toString()}&project=${match.value}`,
            shortcut: shortcutFromIndex(index, { shortcutsEnabled, section }),
            children: match.title
          },
          match.value
        ))
      ] })
    }
  );
}

// app/routes/storybook.switch/route.tsx
var route_exports147 = {};
__export(route_exports147, {
  default: () => Story31
});
var import_jsx_runtime308 = require("react/jsx-runtime");
function Story31() {
  return /* @__PURE__ */ (0, import_jsx_runtime308.jsxs)("div", { className: "flex flex-col items-start gap-y-4 p-4", children: [
    /* @__PURE__ */ (0, import_jsx_runtime308.jsx)(Switch, { variant: "large" }),
    /* @__PURE__ */ (0, import_jsx_runtime308.jsx)(Switch, { variant: "large", disabled: !0 }),
    /* @__PURE__ */ (0, import_jsx_runtime308.jsx)(Switch, { variant: "large", label: "Toggle me" }),
    /* @__PURE__ */ (0, import_jsx_runtime308.jsx)(Switch, { variant: "large", label: "Toggle me", disabled: !0 }),
    /* @__PURE__ */ (0, import_jsx_runtime308.jsx)(Switch, { variant: "small" }),
    /* @__PURE__ */ (0, import_jsx_runtime308.jsx)(Switch, { variant: "small", disabled: !0 }),
    /* @__PURE__ */ (0, import_jsx_runtime308.jsx)(Switch, { variant: "small", label: "Toggle me" }),
    /* @__PURE__ */ (0, import_jsx_runtime308.jsx)(Switch, { variant: "small", label: "Toggle me", disabled: !0 })
  ] });
}

// app/routes/tests.sse.stream.ts
var tests_sse_stream_exports = {};
__export(tests_sse_stream_exports, {
  loader: () => loader134
});
var import_zod252 = require("zod");
async function loader134({ request }) {
  let url = new URL(request.url), searchParams = Object.fromEntries(url.searchParams.entries()), options2 = import_zod252.z.object({
    minDelay: import_zod252.z.coerce.number().int(),
    maxDelay: import_zod252.z.coerce.number().int(),
    undefinedProbability: import_zod252.z.coerce.number().min(0).max(1).default(0.1)
  }).parse(searchParams);
  logger.debug("Test SSE stream", { options: options2 });
  let lastSignals = calculateChangeSignals3(Date.now());
  return sse({
    request,
    run: async (send, stop) => {
      let result = await dateForUpdates(options2);
      if (!result)
        return stop();
      let newSignals = calculateChangeSignals3(result);
      lastSignals.ts !== newSignals.ts && send({ data: JSON.stringify(newSignals) }), lastSignals = newSignals;
    }
  });
}
async function dateForUpdates(opts) {
  if (await new Promise((resolve) => {
    setTimeout(resolve, Math.random() * (opts.maxDelay - opts.minDelay) + opts.minDelay);
  }), Math.random() < opts.undefinedProbability) {
    logger.debug("Test SSE dataForUpdates returning undefined");
    return;
  }
  return Date.now();
}
function calculateChangeSignals3(ts) {
  return {
    ts
  };
}

// app/routes/admin.api.v1.gc.ts
var admin_api_v1_gc_exports = {};
__export(admin_api_v1_gc_exports, {
  loader: () => loader135
});
var import_node_perf_hooks2 = require("node:perf_hooks"), import_node_vm = require("node:vm"), import_v82 = __toESM(require("v8"));
async function waitTillGcFinishes() {
  let resolver, rejector, promise = new Promise((resolve, reject) => {
    resolver = resolve, rejector = reject;
  });
  return new import_node_perf_hooks2.PerformanceObserver((list3) => {
    let entry2 = list3.getEntries()[0];
    entry2.name === "gc" && resolver(entry2);
  }).observe({ entryTypes: ["gc"] }), import_v82.default.setFlagsFromString("--expose-gc"), (global.gc ?? (0, import_node_vm.runInNewContext)("gc"))(), import_v82.default.setFlagsFromString("--noexpose-gc"), promise;
}
async function loader135({ request }) {
  if (!(await requireUser(request)).admin)
    throw new Response("You must be an admin to perform this action", { status: 403 });
  let entry2 = await waitTillGcFinishes();
  return new Response(JSON.stringify(entry2), {
    status: 200,
    headers: {
      "Content-Type": "application/json"
    }
  });
}

// app/routes/api.v1.projects.ts
var api_v1_projects_exports = {};
__export(api_v1_projects_exports, {
  loader: () => loader136
});
var import_server_runtime105 = require("@remix-run/server-runtime");
async function loader136({ request }) {
  logger.info("get projects", { url: request.url });
  let authenticationResult = await authenticateApiRequestWithPersonalAccessToken(request);
  if (!authenticationResult)
    return (0, import_server_runtime105.json)({ error: "Invalid or Missing Access Token" }, { status: 401 });
  let projects2 = await prisma.project.findMany({
    where: {
      organization: {
        deletedAt: null,
        members: {
          some: {
            userId: authenticationResult.userId
          }
        }
      },
      version: "V3",
      deletedAt: null
    },
    include: {
      organization: !0
    }
  });
  if (!projects2)
    return (0, import_server_runtime105.json)({ error: "Projects not found" }, { status: 404 });
  let result = projects2.map((project) => ({
    id: project.id,
    externalRef: project.externalRef,
    name: project.name,
    slug: project.slug,
    createdAt: project.createdAt,
    organization: {
      id: project.organization.id,
      title: project.organization.title,
      slug: project.organization.slug,
      createdAt: project.organization.createdAt
    }
  }));
  return (0, import_server_runtime105.json)(result);
}

// app/routes/oauth2.callback.ts
var oauth2_callback_exports = {};
__export(oauth2_callback_exports, {
  loader: () => loader137
});
var import_server_runtime106 = require("@remix-run/server-runtime"), import_zod253 = __toESM(require("zod"));
var ParamsSchema87 = import_zod253.default.object({
  code: import_zod253.default.string().optional(),
  state: import_zod253.default.string().optional(),
  error: import_zod253.default.string().optional()
}).passthrough();
async function loader137({ request }) {
  if (request.method.toUpperCase() !== "GET")
    return { status: 405, body: "Method Not Allowed" };
  let url = requestUrl(request), parsedParams = ParamsSchema87.safeParse(Object.fromEntries(url.searchParams));
  if (!parsedParams.success)
    throw new Response("Invalid params", { status: 400 });
  if (parsedParams.data.error)
    throw new Response(parsedParams.data.error, { status: 400 });
  if (!parsedParams.data.code || !parsedParams.data.state)
    throw new Response("Invalid params", { status: 400 });
  let attempt = await prisma.connectionAttempt.findUnique({
    where: {
      id: parsedParams.data.state
    },
    include: {
      integration: {
        include: {
          customClientReference: !0
        }
      }
    }
  });
  if (!attempt)
    throw new Response("Invalid attempt", { status: 400 });
  let customOAuthClient;
  attempt.integration.customClientReference && (customOAuthClient = await getSecretStore(env2.SECRET_STORE).getSecret(
    OAuthClientSchema,
    attempt.integration.customClientReference.key
  ));
  try {
    return await integrationAuthRepository.createConnectionFromAttempt({
      attempt,
      code: parsedParams.data.code,
      url,
      customOAuthClient
    }), (0, import_server_runtime106.redirect)(attempt.redirectTo);
  } catch (error) {
    throw console.error(error), new Response("Error", { status: 500 });
  }
}

// app/routes/storybook.toast/route.tsx
var route_exports148 = {};
__export(route_exports148, {
  default: () => Story32
});
var import_sonner2 = require("sonner");
var import_jsx_runtime309 = require("react/jsx-runtime");
function Story32() {
  return /* @__PURE__ */ (0, import_jsx_runtime309.jsxs)("div", { className: "flex flex-col items-start gap-y-4 p-4", children: [
    /* @__PURE__ */ (0, import_jsx_runtime309.jsx)(ToastUI, { variant: "success", message: "Success UI", t: "-" }),
    /* @__PURE__ */ (0, import_jsx_runtime309.jsx)(ToastUI, { variant: "error", message: "Error UI", t: "-" }),
    /* @__PURE__ */ (0, import_jsx_runtime309.jsx)(
      ToastUI,
      {
        variant: "success",
        message: "This is a long error message that wraps over multiple lines so we can test the UI.",
        t: "-"
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime309.jsx)("br", {}),
    /* @__PURE__ */ (0, import_jsx_runtime309.jsx)(
      Button,
      {
        variant: "primary/large",
        onClick: () => import_sonner2.toast.custom((t) => /* @__PURE__ */ (0, import_jsx_runtime309.jsx)(ToastUI, { variant: "success", message: "Success", t }), {
          duration: 1 / 0
          // Prevents auto-dismissal for demo purposes
        }),
        children: "Trigger success toast"
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime309.jsx)(
      Button,
      {
        variant: "danger/large",
        onClick: () => import_sonner2.toast.custom((t) => /* @__PURE__ */ (0, import_jsx_runtime309.jsx)(ToastUI, { variant: "error", message: "Error", t }), {
          duration: 1 / 0
        }),
        children: "Trigger error toast"
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime309.jsx)(import_sonner2.Toaster, {})
  ] });
}

// app/routes/storybook.usage/route.tsx
var route_exports149 = {};
__export(route_exports149, {
  default: () => Story33
});
var import_jsx_runtime310 = require("react/jsx-runtime");
function Story33() {
  return /* @__PURE__ */ (0, import_jsx_runtime310.jsxs)("div", { className: "flex flex-col justify-center gap-4 p-12", children: [
    /* @__PURE__ */ (0, import_jsx_runtime310.jsx)(UsageBarWrapper, { title: "Usage within the free tier limit", children: /* @__PURE__ */ (0, import_jsx_runtime310.jsx)(UsageBar, { numberOfCurrentRuns: 3e4, tierRunLimit: 5e4, projectedRuns: 12e4 }) }),
    /* @__PURE__ */ (0, import_jsx_runtime310.jsx)(UsageBarWrapper, { title: "Usage over the free tier limit", children: /* @__PURE__ */ (0, import_jsx_runtime310.jsx)(UsageBar, { numberOfCurrentRuns: 9e4, tierRunLimit: 5e4, projectedRuns: 12e4 }) }),
    /* @__PURE__ */ (0, import_jsx_runtime310.jsx)(UsageBarWrapper, { title: "Billing limit set", children: /* @__PURE__ */ (0, import_jsx_runtime310.jsx)(
      UsageBar,
      {
        numberOfCurrentRuns: 35674,
        tierRunLimit: 5e4,
        projectedRuns: 12e4,
        billingLimit: 18e4
      }
    ) }),
    /* @__PURE__ */ (0, import_jsx_runtime310.jsx)(UsageBarWrapper, { title: "Paid subscriber under the free included Runs", children: /* @__PURE__ */ (0, import_jsx_runtime310.jsx)(
      UsageBar,
      {
        numberOfCurrentRuns: 1e4,
        tierRunLimit: 5e4,
        billingLimit: 18e4,
        projectedRuns: 12e4,
        subscribedToPaidTier: !0
      }
    ) }),
    /* @__PURE__ */ (0, import_jsx_runtime310.jsx)(UsageBarWrapper, { title: "Paid subscriber over the free included Runs", children: /* @__PURE__ */ (0, import_jsx_runtime310.jsx)(
      UsageBar,
      {
        numberOfCurrentRuns: 9e4,
        tierRunLimit: 5e4,
        billingLimit: 18e4,
        projectedRuns: 12e4,
        subscribedToPaidTier: !0
      }
    ) }),
    /* @__PURE__ */ (0, import_jsx_runtime310.jsx)(UsageBarWrapper, { title: "Brand new user usage", children: /* @__PURE__ */ (0, import_jsx_runtime310.jsx)(UsageBar, { numberOfCurrentRuns: 0, tierRunLimit: 5e4, projectedRuns: 0 }) }),
    /* @__PURE__ */ (0, import_jsx_runtime310.jsx)(UsageBarWrapper, { title: "Overlapping UI example", children: /* @__PURE__ */ (0, import_jsx_runtime310.jsx)(
      UsageBar,
      {
        numberOfCurrentRuns: 95e3,
        tierRunLimit: 5e4,
        billingLimit: 55e3,
        projectedRuns: 93132,
        subscribedToPaidTier: !0
      }
    ) })
  ] });
}
function UsageBarWrapper({ title: title2, children }) {
  return /* @__PURE__ */ (0, import_jsx_runtime310.jsxs)("div", { className: "rounded-md border border-grid-bright p-6", children: [
    /* @__PURE__ */ (0, import_jsx_runtime310.jsx)(Paragraph, { children: title2 }),
    children
  ] });
}

// app/routes/_app.timezones/route.tsx
var route_exports150 = {};
__export(route_exports150, {
  default: () => Page71,
  loader: () => loader138
});
var import_react232 = require("@remix-run/react"), import_remix_typedjson86 = require("remix-typedjson");
var import_jsx_runtime311 = require("react/jsx-runtime"), loader138 = async ({ request }) => (0, import_remix_typedjson86.typedjson)({
  timezones: getTimezones()
});
function Page71() {
  let { timezones } = (0, import_remix_typedjson86.useTypedLoaderData)();
  return /* @__PURE__ */ (0, import_jsx_runtime311.jsxs)("div", { className: "grid grid-rows-[2.5rem,1fr]", children: [
    /* @__PURE__ */ (0, import_jsx_runtime311.jsx)("div", { className: "flex items-center border-b border-b-grid-dimmed px-3", children: /* @__PURE__ */ (0, import_jsx_runtime311.jsx)(import_react232.Link, { to: "/", children: /* @__PURE__ */ (0, import_jsx_runtime311.jsx)(LogoIcon, { className: "relative -top-px mr-2 h-4 w-4 min-w-[1rem]" }) }) }),
    /* @__PURE__ */ (0, import_jsx_runtime311.jsxs)("div", { className: "overflow-y-auto p-8 scrollbar-thin scrollbar-track-transparent scrollbar-thumb-charcoal-600", children: [
      /* @__PURE__ */ (0, import_jsx_runtime311.jsx)(Header1, { spacing: !0, children: "Supported timezones" }),
      /* @__PURE__ */ (0, import_jsx_runtime311.jsx)(Paragraph, { spacing: !0, children: "We support these timezones when creating a schedule." }),
      /* @__PURE__ */ (0, import_jsx_runtime311.jsx)("ul", { className: "", children: timezones.map((timezone) => /* @__PURE__ */ (0, import_jsx_runtime311.jsx)("li", { children: timezone }, timezone)) })
    ] })
  ] });
}

// app/routes/account._index/route.tsx
var route_exports151 = {};
__export(route_exports151, {
  action: () => action91,
  default: () => Page72
});
var import_react233 = require("@conform-to/react"), import_zod254 = require("@conform-to/zod"), import_react234 = require("@remix-run/react"), import_server_runtime107 = require("@remix-run/server-runtime"), import_zod255 = require("zod");
var import_jsx_runtime312 = require("react/jsx-runtime");
function createSchema6(constraints = {}) {
  return import_zod255.z.object({
    name: import_zod255.z.string({ required_error: "You must enter a name" }).min(2, "Your name must be at least 2 characters long").max(50),
    email: import_zod255.z.string().email().superRefine((email, ctx) => {
      if (constraints.isEmailUnique === void 0)
        ctx.addIssue({
          code: import_zod255.z.ZodIssueCode.custom,
          message: import_react233.conform.VALIDATION_UNDEFINED
        });
      else
        return constraints.isEmailUnique(email).then((isUnique) => {
          isUnique || ctx.addIssue({
            code: import_zod255.z.ZodIssueCode.custom,
            message: "Email is already being used by a different account"
          });
        });
    }),
    marketingEmails: import_zod255.z.preprocess((value) => value === "on", import_zod255.z.boolean())
  });
}
var action91 = async ({ request }) => {
  let userId = await requireUserId(request), formData = await request.formData(), formSchema = createSchema6({
    isEmailUnique: async (email) => {
      let existingUser = await prisma.user.findFirst({
        where: {
          email
        }
      });
      return !existingUser || existingUser.id === userId;
    }
  }), submission = await (0, import_zod254.parse)(formData, { schema: formSchema, async: !0 });
  if (!submission.value || submission.intent !== "submit")
    return (0, import_server_runtime107.json)(submission);
  try {
    let user = await updateUser({
      id: userId,
      name: submission.value.name,
      email: submission.value.email,
      marketingEmails: submission.value.marketingEmails
    });
    return redirectWithSuccessMessage(
      accountPath(),
      request,
      "Your account profile has been updated."
    );
  } catch (error) {
    return (0, import_server_runtime107.json)({ errors: { body: error.message } }, { status: 400 });
  }
};
function Page72() {
  let user = useUser(), lastSubmission = (0, import_react234.useActionData)(), [form, { name, email, marketingEmails }] = (0, import_react233.useForm)({
    id: "account",
    // TODO: type this
    lastSubmission,
    onValidate({ formData }) {
      return (0, import_zod254.parse)(formData, { schema: createSchema6() });
    }
  });
  return /* @__PURE__ */ (0, import_jsx_runtime312.jsxs)(PageContainer, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime312.jsx)(NavBar, { children: /* @__PURE__ */ (0, import_jsx_runtime312.jsx)(PageTitle, { title: "Your profile" }) }),
    /* @__PURE__ */ (0, import_jsx_runtime312.jsx)(PageBody, { children: /* @__PURE__ */ (0, import_jsx_runtime312.jsxs)(import_react234.Form, { method: "post", ...form.props, className: "max-w-md", children: [
      /* @__PURE__ */ (0, import_jsx_runtime312.jsxs)(InputGroup, { className: "mb-4", children: [
        /* @__PURE__ */ (0, import_jsx_runtime312.jsx)(Label, { htmlFor: name.id, children: "Profile picture" }),
        /* @__PURE__ */ (0, import_jsx_runtime312.jsx)(UserProfilePhoto, { className: "h-24 w-24" })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime312.jsxs)(Fieldset, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime312.jsxs)(InputGroup, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime312.jsx)(Label, { htmlFor: name.id, children: "Full name" }),
          /* @__PURE__ */ (0, import_jsx_runtime312.jsx)(
            Input,
            {
              ...import_react233.conform.input(name, { type: "text" }),
              placeholder: "Your full name",
              defaultValue: user?.name ?? "",
              icon: "account"
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime312.jsx)(Hint, { children: "Your teammates will see this" }),
          /* @__PURE__ */ (0, import_jsx_runtime312.jsx)(FormError, { id: name.errorId, children: name.error })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime312.jsxs)(InputGroup, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime312.jsx)(Label, { htmlFor: email.id, children: "Email address" }),
          /* @__PURE__ */ (0, import_jsx_runtime312.jsx)(
            Input,
            {
              ...import_react233.conform.input(email, { type: "text" }),
              placeholder: "Your email",
              defaultValue: user?.email ?? "",
              icon: "envelope"
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime312.jsx)(FormError, { id: email.errorId, children: email.error })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime312.jsxs)(InputGroup, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime312.jsx)(Label, { children: "Notifications" }),
          /* @__PURE__ */ (0, import_jsx_runtime312.jsx)(
            CheckboxWithLabel,
            {
              id: "marketingEmails",
              ...import_react233.conform.input(marketingEmails, { type: "checkbox" }),
              label: "Receive onboarding emails",
              variant: "simple/small",
              defaultChecked: user.marketingEmails
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime312.jsx)(FormError, { id: marketingEmails.errorId, children: marketingEmails.error })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime312.jsx)(
          FormButtons,
          {
            confirmButton: /* @__PURE__ */ (0, import_jsx_runtime312.jsx)(Button, { type: "submit", variant: "primary/small", children: "Update" })
          }
        )
      ] })
    ] }) })
  ] });
}

// app/routes/account.tokens/route.tsx
var route_exports152 = {};
__export(route_exports152, {
  action: () => action92,
  default: () => Page73,
  loader: () => loader139
});
var import_react235 = require("@conform-to/react"), import_zod256 = require("@conform-to/zod"), import_solid118 = require("@heroicons/react/20/solid"), import_solid119 = require("@heroicons/react/24/solid"), import_react236 = require("@remix-run/react"), import_server_runtime108 = require("@remix-run/server-runtime"), import_remix_typedjson87 = require("remix-typedjson"), import_zod257 = require("zod");
var import_jsx_runtime313 = require("react/jsx-runtime"), loader139 = async ({ request, params }) => {
  let userId = await requireUserId(request);
  try {
    let personalAccessTokens = await getValidPersonalAccessTokens(userId);
    return (0, import_remix_typedjson87.typedjson)({
      personalAccessTokens
    });
  } catch (error) {
    throw error instanceof Response ? error : (console.error(error), new Response(void 0, {
      status: 400,
      statusText: "Something went wrong, if this problem persists please contact support."
    }));
  }
}, CreateTokenSchema = import_zod257.z.discriminatedUnion("action", [
  import_zod257.z.object({
    action: import_zod257.z.literal("create"),
    tokenName: import_zod257.z.string({ required_error: "You must enter a name" }).min(2, "Your name must be at least 2 characters long").max(50)
  }),
  import_zod257.z.object({
    action: import_zod257.z.literal("revoke"),
    tokenId: import_zod257.z.string()
  })
]), action92 = async ({ request }) => {
  let userId = await requireUserId(request), formData = await request.formData(), submission = (0, import_zod256.parse)(formData, { schema: CreateTokenSchema });
  if (!submission.value)
    return (0, import_server_runtime108.json)(submission);
  switch (submission.value.action) {
    case "create":
      try {
        let tokenResult = await createPersonalAccessToken({
          name: submission.value.tokenName,
          userId
        });
        return (0, import_server_runtime108.json)({ ...submission, payload: { token: tokenResult } });
      } catch (error) {
        return (0, import_server_runtime108.json)({ errors: { body: error.message } }, { status: 400 });
      }
    case "revoke":
      try {
        return await revokePersonalAccessToken(submission.value.tokenId), redirectWithSuccessMessage(
          personalAccessTokensPath(),
          request,
          "Personal Access Token revoked"
        );
      } catch (error) {
        return (0, import_server_runtime108.json)({ errors: { body: error.message } }, { status: 400 });
      }
    default:
      return (0, import_server_runtime108.json)({ errors: { body: "Invalid action" } }, { status: 400 });
  }
};
function Page73() {
  let { personalAccessTokens } = (0, import_remix_typedjson87.useTypedLoaderData)();
  return /* @__PURE__ */ (0, import_jsx_runtime313.jsxs)(PageContainer, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime313.jsxs)(NavBar, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime313.jsx)(PageTitle, { title: "Personal Access Tokens" }),
      /* @__PURE__ */ (0, import_jsx_runtime313.jsx)(PageAccessories, { children: /* @__PURE__ */ (0, import_jsx_runtime313.jsxs)(Dialog, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime313.jsx)(DialogTrigger, { asChild: !0, children: /* @__PURE__ */ (0, import_jsx_runtime313.jsx)(Button, { variant: "primary/small", children: "Create new token" }) }),
        /* @__PURE__ */ (0, import_jsx_runtime313.jsxs)(DialogContent, { className: "max-w-md", children: [
          /* @__PURE__ */ (0, import_jsx_runtime313.jsx)(DialogHeader, { children: "Create a Personal Access Token" }),
          /* @__PURE__ */ (0, import_jsx_runtime313.jsx)(CreatePersonalAccessToken, {})
        ] })
      ] }) })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime313.jsx)(PageBody, { children: /* @__PURE__ */ (0, import_jsx_runtime313.jsx)("div", { className: "flex flex-col gap-3", children: /* @__PURE__ */ (0, import_jsx_runtime313.jsxs)(Table, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime313.jsx)(TableHeader, { children: /* @__PURE__ */ (0, import_jsx_runtime313.jsxs)(TableRow, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime313.jsx)(TableHeaderCell, { children: "Name" }),
        /* @__PURE__ */ (0, import_jsx_runtime313.jsx)(TableHeaderCell, { children: "Token" }),
        /* @__PURE__ */ (0, import_jsx_runtime313.jsx)(TableHeaderCell, { children: "Created" }),
        /* @__PURE__ */ (0, import_jsx_runtime313.jsx)(TableHeaderCell, { children: "Last accessed" }),
        /* @__PURE__ */ (0, import_jsx_runtime313.jsx)(TableHeaderCell, { hiddenLabel: !0, children: "Delete" })
      ] }) }),
      /* @__PURE__ */ (0, import_jsx_runtime313.jsx)(TableBody, { children: personalAccessTokens.length > 0 ? personalAccessTokens.map((personalAccessToken) => /* @__PURE__ */ (0, import_jsx_runtime313.jsxs)(TableRow, { className: "group", children: [
        /* @__PURE__ */ (0, import_jsx_runtime313.jsx)(TableCell, { children: personalAccessToken.name }),
        /* @__PURE__ */ (0, import_jsx_runtime313.jsx)(TableCell, { children: personalAccessToken.obfuscatedToken }),
        /* @__PURE__ */ (0, import_jsx_runtime313.jsx)(TableCell, { children: /* @__PURE__ */ (0, import_jsx_runtime313.jsx)(DateTime, { date: personalAccessToken.createdAt }) }),
        /* @__PURE__ */ (0, import_jsx_runtime313.jsx)(TableCell, { children: personalAccessToken.lastAccessedAt ? /* @__PURE__ */ (0, import_jsx_runtime313.jsx)(DateTime, { date: personalAccessToken.lastAccessedAt }) : "Never" }),
        /* @__PURE__ */ (0, import_jsx_runtime313.jsx)(TableCell, { alignment: "right", children: /* @__PURE__ */ (0, import_jsx_runtime313.jsx)(RevokePersonalAccessToken, { token: personalAccessToken }) })
      ] }, personalAccessToken.id)) : /* @__PURE__ */ (0, import_jsx_runtime313.jsx)(TableBlankRow, { colSpan: 5, children: /* @__PURE__ */ (0, import_jsx_runtime313.jsx)(Paragraph, { variant: "small", className: "flex items-center justify-center", children: "You have no Personal Access Tokens (that haven't been revoked)." }) }) })
    ] }) }) })
  ] });
}
function CreatePersonalAccessToken() {
  let fetcher = (0, import_react236.useFetcher)(), lastSubmission = fetcher.data, [form, { tokenName }] = (0, import_react235.useForm)({
    id: "create-personal-access-token",
    // TODO: type this
    lastSubmission,
    onValidate({ formData }) {
      return (0, import_zod256.parse)(formData, { schema: CreateTokenSchema });
    }
  }), token = lastSubmission?.payload?.token ? lastSubmission?.payload?.token : void 0;
  return /* @__PURE__ */ (0, import_jsx_runtime313.jsx)("div", { className: "max-w-full overflow-x-hidden", children: token ? /* @__PURE__ */ (0, import_jsx_runtime313.jsxs)("div", { className: "flex flex-col gap-2 p-2", children: [
    /* @__PURE__ */ (0, import_jsx_runtime313.jsx)(Header2, { children: "Successfully generated a new token" }),
    /* @__PURE__ */ (0, import_jsx_runtime313.jsx)(Callout, { variant: "success", children: "Copy this access token and store it in a secure place - you will not be able to see it again." }),
    /* @__PURE__ */ (0, import_jsx_runtime313.jsx)(
      ClipboardField,
      {
        secure: !0,
        value: token.token,
        variant: "secondary/medium",
        icon: /* @__PURE__ */ (0, import_jsx_runtime313.jsx)(import_solid119.ShieldExclamationIcon, { className: "h-5 w-5 text-emerald-500" })
      }
    )
  ] }) : /* @__PURE__ */ (0, import_jsx_runtime313.jsxs)(fetcher.Form, { method: "post", ...form.props, children: [
    /* @__PURE__ */ (0, import_jsx_runtime313.jsx)("input", { type: "hidden", name: "action", value: "create" }),
    /* @__PURE__ */ (0, import_jsx_runtime313.jsxs)(Fieldset, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime313.jsxs)(InputGroup, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime313.jsx)(Label, { htmlFor: tokenName.id, children: "Name" }),
        /* @__PURE__ */ (0, import_jsx_runtime313.jsx)(
          Input,
          {
            ...import_react235.conform.input(tokenName, { type: "text" }),
            placeholder: "The name of your Personal Access Token",
            defaultValue: "",
            icon: import_solid118.ShieldCheckIcon,
            autoComplete: "off",
            "data-1p-ignore": !0
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime313.jsx)(Hint, { children: 'This will help you to identify your token. Tokens called "cli" are automatically generated when you login with our CLI.' }),
        /* @__PURE__ */ (0, import_jsx_runtime313.jsx)(FormError, { id: tokenName.errorId, children: tokenName.error })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime313.jsx)(
        FormButtons,
        {
          confirmButton: /* @__PURE__ */ (0, import_jsx_runtime313.jsx)(Button, { type: "submit", variant: "primary/small", children: "Update" })
        }
      )
    ] })
  ] }) });
}
function RevokePersonalAccessToken({ token }) {
  let lastSubmission = (0, import_react236.useActionData)(), [form, { tokenId }] = (0, import_react235.useForm)({
    id: "revoke-personal-access-token",
    // TODO: type this
    lastSubmission,
    onValidate({ formData }) {
      return (0, import_zod256.parse)(formData, { schema: CreateTokenSchema });
    }
  });
  return /* @__PURE__ */ (0, import_jsx_runtime313.jsxs)(Dialog, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime313.jsx)(DialogTrigger, { asChild: !0, children: /* @__PURE__ */ (0, import_jsx_runtime313.jsx)(Button, { variant: "small-menu-item", LeadingIcon: "trash-can", className: "text-xs" }) }),
    /* @__PURE__ */ (0, import_jsx_runtime313.jsxs)(DialogContent, { className: "max-w-md", children: [
      /* @__PURE__ */ (0, import_jsx_runtime313.jsx)(DialogHeader, { children: "Revoke Personal Access Token" }),
      /* @__PURE__ */ (0, import_jsx_runtime313.jsxs)("div", { className: "flex flex-col gap-3 pt-3", children: [
        /* @__PURE__ */ (0, import_jsx_runtime313.jsxs)(Paragraph, { children: [
          'Are you sure you want to revoke "',
          token.name,
          `"? This can't be reversed.`
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime313.jsxs)(import_react236.Form, { method: "post", ...form.props, children: [
          /* @__PURE__ */ (0, import_jsx_runtime313.jsx)("input", { type: "hidden", name: "action", value: "revoke" }),
          /* @__PURE__ */ (0, import_jsx_runtime313.jsx)("input", { type: "hidden", name: "tokenId", value: token.id }),
          /* @__PURE__ */ (0, import_jsx_runtime313.jsx)(Button, { type: "submit", variant: "danger/medium", fullWidth: !0, children: "Revoke token" })
        ] })
      ] })
    ] })
  ] });
}

// app/routes/api.v1.tunnels.ts
var api_v1_tunnels_exports = {};
__export(api_v1_tunnels_exports, {
  action: () => action93,
  loader: () => loader140
});
var import_server_runtime109 = require("@remix-run/server-runtime");

// ../../packages/yalt/src/index.ts
var import_zod258 = require("zod"), import_partysocket = require("partysocket"), import_node_fetch = __toESM(require("node-fetch")), import_proxy_agent = require("proxy-agent"), import_https = __toESM(require("https")), RequestMesssage = import_zod258.z.object({
  type: import_zod258.z.literal("request"),
  id: import_zod258.z.string(),
  headers: import_zod258.z.record(import_zod258.z.string()),
  method: import_zod258.z.string(),
  url: import_zod258.z.string(),
  body: import_zod258.z.string(),
  https: import_zod258.z.boolean().default(!1).optional()
}), ResponseMessage = import_zod258.z.object({
  type: import_zod258.z.literal("response"),
  id: import_zod258.z.string(),
  status: import_zod258.z.number(),
  headers: import_zod258.z.record(import_zod258.z.string()),
  body: import_zod258.z.string()
}), ClientMessages = import_zod258.z.discriminatedUnion("type", [ResponseMessage]), ServerMessages = import_zod258.z.discriminatedUnion("type", [RequestMesssage]);
var YaltApiClient = class {
  constructor(host, apiKey) {
    this.host = host;
    this.apiKey = apiKey;
  }
  async createTunnel() {
    let response = await fetch3(`https://admin.${this.host}/api/tunnels`, {
      method: "POST",
      headers: {
        accept: "application/json",
        authorization: `Bearer ${this.apiKey}`
      }
    });
    if (!response.ok)
      throw new Error(`Could not create tunnel: ${response.status}`);
    return (await response.json()).id;
  }
  connectUrl(id) {
    return `${id}.${this.host}`;
  }
};
function fetch3(url, init3) {
  let fetchInit = { ...init3 };
  return fetchInit.agent || (fetchInit.agent = new import_proxy_agent.ProxyAgent()), (0, import_node_fetch.default)(url, fetchInit);
}

// app/routes/api.v1.tunnels.ts
async function loader140({ request }) {
  return await authenticateApiRequest(request) ? !env2.TUNNEL_HOST || !env2.TUNNEL_SECRET_KEY ? (0, import_server_runtime109.json)({ error: "Tunneling is not supported" }, { status: 501 }) : (0, import_server_runtime109.json)({ ok: !0 }) : (0, import_server_runtime109.json)({ error: "Invalid or Missing API key" }, { status: 401 });
}
async function action93({ request }) {
  let authenticationResult = await authenticateApiRequest(request);
  if (!authenticationResult)
    return (0, import_server_runtime109.json)({ error: "Invalid or Missing API key" }, { status: 401 });
  if (authenticationResult.environment.type !== "DEVELOPMENT")
    return (0, import_server_runtime109.json)({ error: "Tunneling is only supported in development" }, { status: 501 });
  if (!env2.TUNNEL_HOST || !env2.TUNNEL_SECRET_KEY)
    return (0, import_server_runtime109.json)({ error: "Tunneling is not supported" }, { status: 501 });
  let yaltClient = new YaltApiClient(env2.TUNNEL_HOST, env2.TUNNEL_SECRET_KEY), tunnelId = authenticationResult.environment.tunnelId;
  if (!tunnelId)
    try {
      tunnelId = await yaltClient.createTunnel(), await prisma.runtimeEnvironment.update({
        where: {
          id: authenticationResult.environment.id
        },
        data: {
          tunnelId
        }
      });
    } catch (error) {
      return logger.error("Failed to create tunnel", { error }), (0, import_server_runtime109.json)({ error: "Failed to create tunnel" }, { status: 500 });
    }
  return tunnelId ? (0, import_server_runtime109.json)({ url: yaltClient.connectUrl(tunnelId) }) : (0, import_server_runtime109.json)({ error: "Failed to create tunnel" }, { status: 500 });
}

// app/routes/otel.v1.traces.ts
var otel_v1_traces_exports = {};
__export(otel_v1_traces_exports, {
  action: () => action94
});
var import_server_runtime110 = require("@remix-run/server-runtime");

// ../../packages/otlp-importer/src/generated/opentelemetry/proto/collector/trace/v1/trace_service.ts
var import_long3 = __toESM(require("long")), import_minimal4 = __toESM(require("protobufjs/minimal"));

// ../../packages/otlp-importer/src/generated/opentelemetry/proto/trace/v1/trace.ts
var import_long2 = __toESM(require("long")), import_minimal3 = __toESM(require("protobufjs/minimal"));

// ../../packages/otlp-importer/src/generated/opentelemetry/proto/common/v1/common.ts
var import_long = __toESM(require("long")), import_minimal = __toESM(require("protobufjs/minimal"));
function createBaseAnyValue() {
  return {
    stringValue: void 0,
    boolValue: void 0,
    intValue: void 0,
    doubleValue: void 0,
    arrayValue: void 0,
    kvlistValue: void 0,
    bytesValue: void 0
  };
}
var AnyValue = {
  encode(message, writer = import_minimal.default.Writer.create()) {
    if (message.stringValue !== void 0 && writer.uint32(10).string(message.stringValue), message.boolValue !== void 0 && writer.uint32(16).bool(message.boolValue), message.intValue !== void 0) {
      if (BigInt.asIntN(64, message.intValue) !== message.intValue)
        throw new globalThis.Error("value provided for field message.intValue of type int64 too large");
      writer.uint32(24).int64(message.intValue.toString());
    }
    return message.doubleValue !== void 0 && writer.uint32(33).double(message.doubleValue), message.arrayValue !== void 0 && ArrayValue.encode(message.arrayValue, writer.uint32(42).fork()).ldelim(), message.kvlistValue !== void 0 && KeyValueList.encode(message.kvlistValue, writer.uint32(50).fork()).ldelim(), message.bytesValue !== void 0 && writer.uint32(58).bytes(message.bytesValue), writer;
  },
  decode(input, length) {
    let reader = input instanceof import_minimal.default.Reader ? input : import_minimal.default.Reader.create(input), end = length === void 0 ? reader.len : reader.pos + length, message = createBaseAnyValue();
    for (; reader.pos < end; ) {
      let tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10)
            break;
          message.stringValue = reader.string();
          continue;
        case 2:
          if (tag !== 16)
            break;
          message.boolValue = reader.bool();
          continue;
        case 3:
          if (tag !== 24)
            break;
          message.intValue = longToBigint(reader.int64());
          continue;
        case 4:
          if (tag !== 33)
            break;
          message.doubleValue = reader.double();
          continue;
        case 5:
          if (tag !== 42)
            break;
          message.arrayValue = ArrayValue.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50)
            break;
          message.kvlistValue = KeyValueList.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 58)
            break;
          message.bytesValue = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0)
        break;
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      stringValue: isSet2(object.stringValue) ? globalThis.String(object.stringValue) : void 0,
      boolValue: isSet2(object.boolValue) ? globalThis.Boolean(object.boolValue) : void 0,
      intValue: isSet2(object.intValue) ? BigInt(object.intValue) : void 0,
      doubleValue: isSet2(object.doubleValue) ? globalThis.Number(object.doubleValue) : void 0,
      arrayValue: isSet2(object.arrayValue) ? ArrayValue.fromJSON(object.arrayValue) : void 0,
      kvlistValue: isSet2(object.kvlistValue) ? KeyValueList.fromJSON(object.kvlistValue) : void 0,
      bytesValue: isSet2(object.bytesValue) ? Buffer.from(bytesFromBase64(object.bytesValue)) : void 0
    };
  },
  toJSON(message) {
    let obj = {};
    return message.stringValue !== void 0 && (obj.stringValue = message.stringValue), message.boolValue !== void 0 && (obj.boolValue = message.boolValue), message.intValue !== void 0 && (obj.intValue = message.intValue.toString()), message.doubleValue !== void 0 && (obj.doubleValue = message.doubleValue), message.arrayValue !== void 0 && (obj.arrayValue = ArrayValue.toJSON(message.arrayValue)), message.kvlistValue !== void 0 && (obj.kvlistValue = KeyValueList.toJSON(message.kvlistValue)), message.bytesValue !== void 0 && (obj.bytesValue = base64FromBytes(message.bytesValue)), obj;
  },
  create(base) {
    return AnyValue.fromPartial(base ?? {});
  },
  fromPartial(object) {
    let message = createBaseAnyValue();
    return message.stringValue = object.stringValue ?? void 0, message.boolValue = object.boolValue ?? void 0, message.intValue = object.intValue ?? void 0, message.doubleValue = object.doubleValue ?? void 0, message.arrayValue = object.arrayValue !== void 0 && object.arrayValue !== null ? ArrayValue.fromPartial(object.arrayValue) : void 0, message.kvlistValue = object.kvlistValue !== void 0 && object.kvlistValue !== null ? KeyValueList.fromPartial(object.kvlistValue) : void 0, message.bytesValue = object.bytesValue ?? void 0, message;
  }
};
function createBaseArrayValue() {
  return { values: [] };
}
var ArrayValue = {
  encode(message, writer = import_minimal.default.Writer.create()) {
    for (let v of message.values)
      AnyValue.encode(v, writer.uint32(10).fork()).ldelim();
    return writer;
  },
  decode(input, length) {
    let reader = input instanceof import_minimal.default.Reader ? input : import_minimal.default.Reader.create(input), end = length === void 0 ? reader.len : reader.pos + length, message = createBaseArrayValue();
    for (; reader.pos < end; ) {
      let tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10)
            break;
          message.values.push(AnyValue.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0)
        break;
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      values: globalThis.Array.isArray(object?.values) ? object.values.map((e) => AnyValue.fromJSON(e)) : []
    };
  },
  toJSON(message) {
    let obj = {};
    return message.values?.length && (obj.values = message.values.map((e) => AnyValue.toJSON(e))), obj;
  },
  create(base) {
    return ArrayValue.fromPartial(base ?? {});
  },
  fromPartial(object) {
    let message = createBaseArrayValue();
    return message.values = object.values?.map((e) => AnyValue.fromPartial(e)) || [], message;
  }
};
function createBaseKeyValueList() {
  return { values: [] };
}
var KeyValueList = {
  encode(message, writer = import_minimal.default.Writer.create()) {
    for (let v of message.values)
      KeyValue.encode(v, writer.uint32(10).fork()).ldelim();
    return writer;
  },
  decode(input, length) {
    let reader = input instanceof import_minimal.default.Reader ? input : import_minimal.default.Reader.create(input), end = length === void 0 ? reader.len : reader.pos + length, message = createBaseKeyValueList();
    for (; reader.pos < end; ) {
      let tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10)
            break;
          message.values.push(KeyValue.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0)
        break;
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      values: globalThis.Array.isArray(object?.values) ? object.values.map((e) => KeyValue.fromJSON(e)) : []
    };
  },
  toJSON(message) {
    let obj = {};
    return message.values?.length && (obj.values = message.values.map((e) => KeyValue.toJSON(e))), obj;
  },
  create(base) {
    return KeyValueList.fromPartial(base ?? {});
  },
  fromPartial(object) {
    let message = createBaseKeyValueList();
    return message.values = object.values?.map((e) => KeyValue.fromPartial(e)) || [], message;
  }
};
function createBaseKeyValue() {
  return { key: "", value: void 0 };
}
var KeyValue = {
  encode(message, writer = import_minimal.default.Writer.create()) {
    return message.key !== "" && writer.uint32(10).string(message.key), message.value !== void 0 && AnyValue.encode(message.value, writer.uint32(18).fork()).ldelim(), writer;
  },
  decode(input, length) {
    let reader = input instanceof import_minimal.default.Reader ? input : import_minimal.default.Reader.create(input), end = length === void 0 ? reader.len : reader.pos + length, message = createBaseKeyValue();
    for (; reader.pos < end; ) {
      let tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10)
            break;
          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18)
            break;
          message.value = AnyValue.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0)
        break;
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      key: isSet2(object.key) ? globalThis.String(object.key) : "",
      value: isSet2(object.value) ? AnyValue.fromJSON(object.value) : void 0
    };
  },
  toJSON(message) {
    let obj = {};
    return message.key !== "" && (obj.key = message.key), message.value !== void 0 && (obj.value = AnyValue.toJSON(message.value)), obj;
  },
  create(base) {
    return KeyValue.fromPartial(base ?? {});
  },
  fromPartial(object) {
    let message = createBaseKeyValue();
    return message.key = object.key ?? "", message.value = object.value !== void 0 && object.value !== null ? AnyValue.fromPartial(object.value) : void 0, message;
  }
};
function createBaseInstrumentationScope() {
  return { name: "", version: "", attributes: [], droppedAttributesCount: 0 };
}
var InstrumentationScope = {
  encode(message, writer = import_minimal.default.Writer.create()) {
    message.name !== "" && writer.uint32(10).string(message.name), message.version !== "" && writer.uint32(18).string(message.version);
    for (let v of message.attributes)
      KeyValue.encode(v, writer.uint32(26).fork()).ldelim();
    return message.droppedAttributesCount !== 0 && writer.uint32(32).uint32(message.droppedAttributesCount), writer;
  },
  decode(input, length) {
    let reader = input instanceof import_minimal.default.Reader ? input : import_minimal.default.Reader.create(input), end = length === void 0 ? reader.len : reader.pos + length, message = createBaseInstrumentationScope();
    for (; reader.pos < end; ) {
      let tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10)
            break;
          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18)
            break;
          message.version = reader.string();
          continue;
        case 3:
          if (tag !== 26)
            break;
          message.attributes.push(KeyValue.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 32)
            break;
          message.droppedAttributesCount = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0)
        break;
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      name: isSet2(object.name) ? globalThis.String(object.name) : "",
      version: isSet2(object.version) ? globalThis.String(object.version) : "",
      attributes: globalThis.Array.isArray(object?.attributes) ? object.attributes.map((e) => KeyValue.fromJSON(e)) : [],
      droppedAttributesCount: isSet2(object.droppedAttributesCount) ? globalThis.Number(object.droppedAttributesCount) : 0
    };
  },
  toJSON(message) {
    let obj = {};
    return message.name !== "" && (obj.name = message.name), message.version !== "" && (obj.version = message.version), message.attributes?.length && (obj.attributes = message.attributes.map((e) => KeyValue.toJSON(e))), message.droppedAttributesCount !== 0 && (obj.droppedAttributesCount = Math.round(message.droppedAttributesCount)), obj;
  },
  create(base) {
    return InstrumentationScope.fromPartial(base ?? {});
  },
  fromPartial(object) {
    let message = createBaseInstrumentationScope();
    return message.name = object.name ?? "", message.version = object.version ?? "", message.attributes = object.attributes?.map((e) => KeyValue.fromPartial(e)) || [], message.droppedAttributesCount = object.droppedAttributesCount ?? 0, message;
  }
};
function bytesFromBase64(b64) {
  if (globalThis.Buffer)
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  {
    let bin = globalThis.atob(b64), arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i)
      arr[i] = bin.charCodeAt(i);
    return arr;
  }
}
function base64FromBytes(arr) {
  if (globalThis.Buffer)
    return globalThis.Buffer.from(arr).toString("base64");
  {
    let bin = [];
    return arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    }), globalThis.btoa(bin.join(""));
  }
}
function longToBigint(long) {
  return BigInt(long.toString());
}
import_minimal.default.util.Long !== import_long.default && (import_minimal.default.util.Long = import_long.default, import_minimal.default.configure());
function isSet2(value) {
  return value != null;
}

// ../../packages/otlp-importer/src/generated/opentelemetry/proto/resource/v1/resource.ts
var import_minimal2 = __toESM(require("protobufjs/minimal"));
function createBaseResource() {
  return { attributes: [], droppedAttributesCount: 0 };
}
var Resource2 = {
  encode(message, writer = import_minimal2.default.Writer.create()) {
    for (let v of message.attributes)
      KeyValue.encode(v, writer.uint32(10).fork()).ldelim();
    return message.droppedAttributesCount !== 0 && writer.uint32(16).uint32(message.droppedAttributesCount), writer;
  },
  decode(input, length) {
    let reader = input instanceof import_minimal2.default.Reader ? input : import_minimal2.default.Reader.create(input), end = length === void 0 ? reader.len : reader.pos + length, message = createBaseResource();
    for (; reader.pos < end; ) {
      let tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10)
            break;
          message.attributes.push(KeyValue.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 16)
            break;
          message.droppedAttributesCount = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0)
        break;
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      attributes: globalThis.Array.isArray(object?.attributes) ? object.attributes.map((e) => KeyValue.fromJSON(e)) : [],
      droppedAttributesCount: isSet3(object.droppedAttributesCount) ? globalThis.Number(object.droppedAttributesCount) : 0
    };
  },
  toJSON(message) {
    let obj = {};
    return message.attributes?.length && (obj.attributes = message.attributes.map((e) => KeyValue.toJSON(e))), message.droppedAttributesCount !== 0 && (obj.droppedAttributesCount = Math.round(message.droppedAttributesCount)), obj;
  },
  create(base) {
    return Resource2.fromPartial(base ?? {});
  },
  fromPartial(object) {
    let message = createBaseResource();
    return message.attributes = object.attributes?.map((e) => KeyValue.fromPartial(e)) || [], message.droppedAttributesCount = object.droppedAttributesCount ?? 0, message;
  }
};
function isSet3(value) {
  return value != null;
}

// ../../packages/otlp-importer/src/generated/opentelemetry/proto/trace/v1/trace.ts
function span_SpanKindFromJSON(object) {
  switch (object) {
    case 0:
    case "SPAN_KIND_UNSPECIFIED":
      return 0 /* UNSPECIFIED */;
    case 1:
    case "SPAN_KIND_INTERNAL":
      return 1 /* INTERNAL */;
    case 2:
    case "SPAN_KIND_SERVER":
      return 2 /* SERVER */;
    case 3:
    case "SPAN_KIND_CLIENT":
      return 3 /* CLIENT */;
    case 4:
    case "SPAN_KIND_PRODUCER":
      return 4 /* PRODUCER */;
    case 5:
    case "SPAN_KIND_CONSUMER":
      return 5 /* CONSUMER */;
    case -1:
    case "UNRECOGNIZED":
    default:
      return -1 /* UNRECOGNIZED */;
  }
}
function span_SpanKindToJSON(object) {
  switch (object) {
    case 0 /* UNSPECIFIED */:
      return "SPAN_KIND_UNSPECIFIED";
    case 1 /* INTERNAL */:
      return "SPAN_KIND_INTERNAL";
    case 2 /* SERVER */:
      return "SPAN_KIND_SERVER";
    case 3 /* CLIENT */:
      return "SPAN_KIND_CLIENT";
    case 4 /* PRODUCER */:
      return "SPAN_KIND_PRODUCER";
    case 5 /* CONSUMER */:
      return "SPAN_KIND_CONSUMER";
    case -1 /* UNRECOGNIZED */:
    default:
      return "UNRECOGNIZED";
  }
}
function status_StatusCodeFromJSON(object) {
  switch (object) {
    case 0:
    case "STATUS_CODE_UNSET":
      return 0 /* UNSET */;
    case 1:
    case "STATUS_CODE_OK":
      return 1 /* OK */;
    case 2:
    case "STATUS_CODE_ERROR":
      return 2 /* ERROR */;
    case -1:
    case "UNRECOGNIZED":
    default:
      return -1 /* UNRECOGNIZED */;
  }
}
function status_StatusCodeToJSON(object) {
  switch (object) {
    case 0 /* UNSET */:
      return "STATUS_CODE_UNSET";
    case 1 /* OK */:
      return "STATUS_CODE_OK";
    case 2 /* ERROR */:
      return "STATUS_CODE_ERROR";
    case -1 /* UNRECOGNIZED */:
    default:
      return "UNRECOGNIZED";
  }
}
function createBaseResourceSpans() {
  return { resource: void 0, scopeSpans: [], schemaUrl: "" };
}
var ResourceSpans = {
  encode(message, writer = import_minimal3.default.Writer.create()) {
    message.resource !== void 0 && Resource2.encode(message.resource, writer.uint32(10).fork()).ldelim();
    for (let v of message.scopeSpans)
      ScopeSpans.encode(v, writer.uint32(18).fork()).ldelim();
    return message.schemaUrl !== "" && writer.uint32(26).string(message.schemaUrl), writer;
  },
  decode(input, length) {
    let reader = input instanceof import_minimal3.default.Reader ? input : import_minimal3.default.Reader.create(input), end = length === void 0 ? reader.len : reader.pos + length, message = createBaseResourceSpans();
    for (; reader.pos < end; ) {
      let tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10)
            break;
          message.resource = Resource2.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18)
            break;
          message.scopeSpans.push(ScopeSpans.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26)
            break;
          message.schemaUrl = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0)
        break;
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      resource: isSet4(object.resource) ? Resource2.fromJSON(object.resource) : void 0,
      scopeSpans: globalThis.Array.isArray(object?.scopeSpans) ? object.scopeSpans.map((e) => ScopeSpans.fromJSON(e)) : [],
      schemaUrl: isSet4(object.schemaUrl) ? globalThis.String(object.schemaUrl) : ""
    };
  },
  toJSON(message) {
    let obj = {};
    return message.resource !== void 0 && (obj.resource = Resource2.toJSON(message.resource)), message.scopeSpans?.length && (obj.scopeSpans = message.scopeSpans.map((e) => ScopeSpans.toJSON(e))), message.schemaUrl !== "" && (obj.schemaUrl = message.schemaUrl), obj;
  },
  create(base) {
    return ResourceSpans.fromPartial(base ?? {});
  },
  fromPartial(object) {
    let message = createBaseResourceSpans();
    return message.resource = object.resource !== void 0 && object.resource !== null ? Resource2.fromPartial(object.resource) : void 0, message.scopeSpans = object.scopeSpans?.map((e) => ScopeSpans.fromPartial(e)) || [], message.schemaUrl = object.schemaUrl ?? "", message;
  }
};
function createBaseScopeSpans() {
  return { scope: void 0, spans: [], schemaUrl: "" };
}
var ScopeSpans = {
  encode(message, writer = import_minimal3.default.Writer.create()) {
    message.scope !== void 0 && InstrumentationScope.encode(message.scope, writer.uint32(10).fork()).ldelim();
    for (let v of message.spans)
      Span9.encode(v, writer.uint32(18).fork()).ldelim();
    return message.schemaUrl !== "" && writer.uint32(26).string(message.schemaUrl), writer;
  },
  decode(input, length) {
    let reader = input instanceof import_minimal3.default.Reader ? input : import_minimal3.default.Reader.create(input), end = length === void 0 ? reader.len : reader.pos + length, message = createBaseScopeSpans();
    for (; reader.pos < end; ) {
      let tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10)
            break;
          message.scope = InstrumentationScope.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18)
            break;
          message.spans.push(Span9.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26)
            break;
          message.schemaUrl = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0)
        break;
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      scope: isSet4(object.scope) ? InstrumentationScope.fromJSON(object.scope) : void 0,
      spans: globalThis.Array.isArray(object?.spans) ? object.spans.map((e) => Span9.fromJSON(e)) : [],
      schemaUrl: isSet4(object.schemaUrl) ? globalThis.String(object.schemaUrl) : ""
    };
  },
  toJSON(message) {
    let obj = {};
    return message.scope !== void 0 && (obj.scope = InstrumentationScope.toJSON(message.scope)), message.spans?.length && (obj.spans = message.spans.map((e) => Span9.toJSON(e))), message.schemaUrl !== "" && (obj.schemaUrl = message.schemaUrl), obj;
  },
  create(base) {
    return ScopeSpans.fromPartial(base ?? {});
  },
  fromPartial(object) {
    let message = createBaseScopeSpans();
    return message.scope = object.scope !== void 0 && object.scope !== null ? InstrumentationScope.fromPartial(object.scope) : void 0, message.spans = object.spans?.map((e) => Span9.fromPartial(e)) || [], message.schemaUrl = object.schemaUrl ?? "", message;
  }
};
function createBaseSpan() {
  return {
    traceId: Buffer.alloc(0),
    spanId: Buffer.alloc(0),
    traceState: "",
    parentSpanId: Buffer.alloc(0),
    flags: 0,
    name: "",
    kind: 0,
    startTimeUnixNano: BigInt("0"),
    endTimeUnixNano: BigInt("0"),
    attributes: [],
    droppedAttributesCount: 0,
    events: [],
    droppedEventsCount: 0,
    links: [],
    droppedLinksCount: 0,
    status: void 0
  };
}
var Span9 = {
  encode(message, writer = import_minimal3.default.Writer.create()) {
    if (message.traceId.length !== 0 && writer.uint32(10).bytes(message.traceId), message.spanId.length !== 0 && writer.uint32(18).bytes(message.spanId), message.traceState !== "" && writer.uint32(26).string(message.traceState), message.parentSpanId.length !== 0 && writer.uint32(34).bytes(message.parentSpanId), message.flags !== 0 && writer.uint32(133).fixed32(message.flags), message.name !== "" && writer.uint32(42).string(message.name), message.kind !== 0 && writer.uint32(48).int32(message.kind), message.startTimeUnixNano !== BigInt("0")) {
      if (BigInt.asUintN(64, message.startTimeUnixNano) !== message.startTimeUnixNano)
        throw new globalThis.Error("value provided for field message.startTimeUnixNano of type fixed64 too large");
      writer.uint32(57).fixed64(message.startTimeUnixNano.toString());
    }
    if (message.endTimeUnixNano !== BigInt("0")) {
      if (BigInt.asUintN(64, message.endTimeUnixNano) !== message.endTimeUnixNano)
        throw new globalThis.Error("value provided for field message.endTimeUnixNano of type fixed64 too large");
      writer.uint32(65).fixed64(message.endTimeUnixNano.toString());
    }
    for (let v of message.attributes)
      KeyValue.encode(v, writer.uint32(74).fork()).ldelim();
    message.droppedAttributesCount !== 0 && writer.uint32(80).uint32(message.droppedAttributesCount);
    for (let v of message.events)
      Span_Event.encode(v, writer.uint32(90).fork()).ldelim();
    message.droppedEventsCount !== 0 && writer.uint32(96).uint32(message.droppedEventsCount);
    for (let v of message.links)
      Span_Link.encode(v, writer.uint32(106).fork()).ldelim();
    return message.droppedLinksCount !== 0 && writer.uint32(112).uint32(message.droppedLinksCount), message.status !== void 0 && Status.encode(message.status, writer.uint32(122).fork()).ldelim(), writer;
  },
  decode(input, length) {
    let reader = input instanceof import_minimal3.default.Reader ? input : import_minimal3.default.Reader.create(input), end = length === void 0 ? reader.len : reader.pos + length, message = createBaseSpan();
    for (; reader.pos < end; ) {
      let tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10)
            break;
          message.traceId = reader.bytes();
          continue;
        case 2:
          if (tag !== 18)
            break;
          message.spanId = reader.bytes();
          continue;
        case 3:
          if (tag !== 26)
            break;
          message.traceState = reader.string();
          continue;
        case 4:
          if (tag !== 34)
            break;
          message.parentSpanId = reader.bytes();
          continue;
        case 16:
          if (tag !== 133)
            break;
          message.flags = reader.fixed32();
          continue;
        case 5:
          if (tag !== 42)
            break;
          message.name = reader.string();
          continue;
        case 6:
          if (tag !== 48)
            break;
          message.kind = reader.int32();
          continue;
        case 7:
          if (tag !== 57)
            break;
          message.startTimeUnixNano = longToBigint2(reader.fixed64());
          continue;
        case 8:
          if (tag !== 65)
            break;
          message.endTimeUnixNano = longToBigint2(reader.fixed64());
          continue;
        case 9:
          if (tag !== 74)
            break;
          message.attributes.push(KeyValue.decode(reader, reader.uint32()));
          continue;
        case 10:
          if (tag !== 80)
            break;
          message.droppedAttributesCount = reader.uint32();
          continue;
        case 11:
          if (tag !== 90)
            break;
          message.events.push(Span_Event.decode(reader, reader.uint32()));
          continue;
        case 12:
          if (tag !== 96)
            break;
          message.droppedEventsCount = reader.uint32();
          continue;
        case 13:
          if (tag !== 106)
            break;
          message.links.push(Span_Link.decode(reader, reader.uint32()));
          continue;
        case 14:
          if (tag !== 112)
            break;
          message.droppedLinksCount = reader.uint32();
          continue;
        case 15:
          if (tag !== 122)
            break;
          message.status = Status.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0)
        break;
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      traceId: isSet4(object.traceId) ? Buffer.from(bytesFromBase642(object.traceId)) : Buffer.alloc(0),
      spanId: isSet4(object.spanId) ? Buffer.from(bytesFromBase642(object.spanId)) : Buffer.alloc(0),
      traceState: isSet4(object.traceState) ? globalThis.String(object.traceState) : "",
      parentSpanId: isSet4(object.parentSpanId) ? Buffer.from(bytesFromBase642(object.parentSpanId)) : Buffer.alloc(0),
      flags: isSet4(object.flags) ? globalThis.Number(object.flags) : 0,
      name: isSet4(object.name) ? globalThis.String(object.name) : "",
      kind: isSet4(object.kind) ? span_SpanKindFromJSON(object.kind) : 0,
      startTimeUnixNano: isSet4(object.startTimeUnixNano) ? BigInt(object.startTimeUnixNano) : BigInt("0"),
      endTimeUnixNano: isSet4(object.endTimeUnixNano) ? BigInt(object.endTimeUnixNano) : BigInt("0"),
      attributes: globalThis.Array.isArray(object?.attributes) ? object.attributes.map((e) => KeyValue.fromJSON(e)) : [],
      droppedAttributesCount: isSet4(object.droppedAttributesCount) ? globalThis.Number(object.droppedAttributesCount) : 0,
      events: globalThis.Array.isArray(object?.events) ? object.events.map((e) => Span_Event.fromJSON(e)) : [],
      droppedEventsCount: isSet4(object.droppedEventsCount) ? globalThis.Number(object.droppedEventsCount) : 0,
      links: globalThis.Array.isArray(object?.links) ? object.links.map((e) => Span_Link.fromJSON(e)) : [],
      droppedLinksCount: isSet4(object.droppedLinksCount) ? globalThis.Number(object.droppedLinksCount) : 0,
      status: isSet4(object.status) ? Status.fromJSON(object.status) : void 0
    };
  },
  toJSON(message) {
    let obj = {};
    return message.traceId.length !== 0 && (obj.traceId = base64FromBytes2(message.traceId)), message.spanId.length !== 0 && (obj.spanId = base64FromBytes2(message.spanId)), message.traceState !== "" && (obj.traceState = message.traceState), message.parentSpanId.length !== 0 && (obj.parentSpanId = base64FromBytes2(message.parentSpanId)), message.flags !== 0 && (obj.flags = Math.round(message.flags)), message.name !== "" && (obj.name = message.name), message.kind !== 0 && (obj.kind = span_SpanKindToJSON(message.kind)), message.startTimeUnixNano !== BigInt("0") && (obj.startTimeUnixNano = message.startTimeUnixNano.toString()), message.endTimeUnixNano !== BigInt("0") && (obj.endTimeUnixNano = message.endTimeUnixNano.toString()), message.attributes?.length && (obj.attributes = message.attributes.map((e) => KeyValue.toJSON(e))), message.droppedAttributesCount !== 0 && (obj.droppedAttributesCount = Math.round(message.droppedAttributesCount)), message.events?.length && (obj.events = message.events.map((e) => Span_Event.toJSON(e))), message.droppedEventsCount !== 0 && (obj.droppedEventsCount = Math.round(message.droppedEventsCount)), message.links?.length && (obj.links = message.links.map((e) => Span_Link.toJSON(e))), message.droppedLinksCount !== 0 && (obj.droppedLinksCount = Math.round(message.droppedLinksCount)), message.status !== void 0 && (obj.status = Status.toJSON(message.status)), obj;
  },
  create(base) {
    return Span9.fromPartial(base ?? {});
  },
  fromPartial(object) {
    let message = createBaseSpan();
    return message.traceId = object.traceId ?? Buffer.alloc(0), message.spanId = object.spanId ?? Buffer.alloc(0), message.traceState = object.traceState ?? "", message.parentSpanId = object.parentSpanId ?? Buffer.alloc(0), message.flags = object.flags ?? 0, message.name = object.name ?? "", message.kind = object.kind ?? 0, message.startTimeUnixNano = object.startTimeUnixNano ?? BigInt("0"), message.endTimeUnixNano = object.endTimeUnixNano ?? BigInt("0"), message.attributes = object.attributes?.map((e) => KeyValue.fromPartial(e)) || [], message.droppedAttributesCount = object.droppedAttributesCount ?? 0, message.events = object.events?.map((e) => Span_Event.fromPartial(e)) || [], message.droppedEventsCount = object.droppedEventsCount ?? 0, message.links = object.links?.map((e) => Span_Link.fromPartial(e)) || [], message.droppedLinksCount = object.droppedLinksCount ?? 0, message.status = object.status !== void 0 && object.status !== null ? Status.fromPartial(object.status) : void 0, message;
  }
};
function createBaseSpan_Event() {
  return { timeUnixNano: BigInt("0"), name: "", attributes: [], droppedAttributesCount: 0 };
}
var Span_Event = {
  encode(message, writer = import_minimal3.default.Writer.create()) {
    if (message.timeUnixNano !== BigInt("0")) {
      if (BigInt.asUintN(64, message.timeUnixNano) !== message.timeUnixNano)
        throw new globalThis.Error("value provided for field message.timeUnixNano of type fixed64 too large");
      writer.uint32(9).fixed64(message.timeUnixNano.toString());
    }
    message.name !== "" && writer.uint32(18).string(message.name);
    for (let v of message.attributes)
      KeyValue.encode(v, writer.uint32(26).fork()).ldelim();
    return message.droppedAttributesCount !== 0 && writer.uint32(32).uint32(message.droppedAttributesCount), writer;
  },
  decode(input, length) {
    let reader = input instanceof import_minimal3.default.Reader ? input : import_minimal3.default.Reader.create(input), end = length === void 0 ? reader.len : reader.pos + length, message = createBaseSpan_Event();
    for (; reader.pos < end; ) {
      let tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 9)
            break;
          message.timeUnixNano = longToBigint2(reader.fixed64());
          continue;
        case 2:
          if (tag !== 18)
            break;
          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26)
            break;
          message.attributes.push(KeyValue.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 32)
            break;
          message.droppedAttributesCount = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0)
        break;
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      timeUnixNano: isSet4(object.timeUnixNano) ? BigInt(object.timeUnixNano) : BigInt("0"),
      name: isSet4(object.name) ? globalThis.String(object.name) : "",
      attributes: globalThis.Array.isArray(object?.attributes) ? object.attributes.map((e) => KeyValue.fromJSON(e)) : [],
      droppedAttributesCount: isSet4(object.droppedAttributesCount) ? globalThis.Number(object.droppedAttributesCount) : 0
    };
  },
  toJSON(message) {
    let obj = {};
    return message.timeUnixNano !== BigInt("0") && (obj.timeUnixNano = message.timeUnixNano.toString()), message.name !== "" && (obj.name = message.name), message.attributes?.length && (obj.attributes = message.attributes.map((e) => KeyValue.toJSON(e))), message.droppedAttributesCount !== 0 && (obj.droppedAttributesCount = Math.round(message.droppedAttributesCount)), obj;
  },
  create(base) {
    return Span_Event.fromPartial(base ?? {});
  },
  fromPartial(object) {
    let message = createBaseSpan_Event();
    return message.timeUnixNano = object.timeUnixNano ?? BigInt("0"), message.name = object.name ?? "", message.attributes = object.attributes?.map((e) => KeyValue.fromPartial(e)) || [], message.droppedAttributesCount = object.droppedAttributesCount ?? 0, message;
  }
};
function createBaseSpan_Link() {
  return {
    traceId: Buffer.alloc(0),
    spanId: Buffer.alloc(0),
    traceState: "",
    attributes: [],
    droppedAttributesCount: 0,
    flags: 0
  };
}
var Span_Link = {
  encode(message, writer = import_minimal3.default.Writer.create()) {
    message.traceId.length !== 0 && writer.uint32(10).bytes(message.traceId), message.spanId.length !== 0 && writer.uint32(18).bytes(message.spanId), message.traceState !== "" && writer.uint32(26).string(message.traceState);
    for (let v of message.attributes)
      KeyValue.encode(v, writer.uint32(34).fork()).ldelim();
    return message.droppedAttributesCount !== 0 && writer.uint32(40).uint32(message.droppedAttributesCount), message.flags !== 0 && writer.uint32(53).fixed32(message.flags), writer;
  },
  decode(input, length) {
    let reader = input instanceof import_minimal3.default.Reader ? input : import_minimal3.default.Reader.create(input), end = length === void 0 ? reader.len : reader.pos + length, message = createBaseSpan_Link();
    for (; reader.pos < end; ) {
      let tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10)
            break;
          message.traceId = reader.bytes();
          continue;
        case 2:
          if (tag !== 18)
            break;
          message.spanId = reader.bytes();
          continue;
        case 3:
          if (tag !== 26)
            break;
          message.traceState = reader.string();
          continue;
        case 4:
          if (tag !== 34)
            break;
          message.attributes.push(KeyValue.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 40)
            break;
          message.droppedAttributesCount = reader.uint32();
          continue;
        case 6:
          if (tag !== 53)
            break;
          message.flags = reader.fixed32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0)
        break;
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      traceId: isSet4(object.traceId) ? Buffer.from(bytesFromBase642(object.traceId)) : Buffer.alloc(0),
      spanId: isSet4(object.spanId) ? Buffer.from(bytesFromBase642(object.spanId)) : Buffer.alloc(0),
      traceState: isSet4(object.traceState) ? globalThis.String(object.traceState) : "",
      attributes: globalThis.Array.isArray(object?.attributes) ? object.attributes.map((e) => KeyValue.fromJSON(e)) : [],
      droppedAttributesCount: isSet4(object.droppedAttributesCount) ? globalThis.Number(object.droppedAttributesCount) : 0,
      flags: isSet4(object.flags) ? globalThis.Number(object.flags) : 0
    };
  },
  toJSON(message) {
    let obj = {};
    return message.traceId.length !== 0 && (obj.traceId = base64FromBytes2(message.traceId)), message.spanId.length !== 0 && (obj.spanId = base64FromBytes2(message.spanId)), message.traceState !== "" && (obj.traceState = message.traceState), message.attributes?.length && (obj.attributes = message.attributes.map((e) => KeyValue.toJSON(e))), message.droppedAttributesCount !== 0 && (obj.droppedAttributesCount = Math.round(message.droppedAttributesCount)), message.flags !== 0 && (obj.flags = Math.round(message.flags)), obj;
  },
  create(base) {
    return Span_Link.fromPartial(base ?? {});
  },
  fromPartial(object) {
    let message = createBaseSpan_Link();
    return message.traceId = object.traceId ?? Buffer.alloc(0), message.spanId = object.spanId ?? Buffer.alloc(0), message.traceState = object.traceState ?? "", message.attributes = object.attributes?.map((e) => KeyValue.fromPartial(e)) || [], message.droppedAttributesCount = object.droppedAttributesCount ?? 0, message.flags = object.flags ?? 0, message;
  }
};
function createBaseStatus() {
  return { message: "", code: 0 };
}
var Status = {
  encode(message, writer = import_minimal3.default.Writer.create()) {
    return message.message !== "" && writer.uint32(18).string(message.message), message.code !== 0 && writer.uint32(24).int32(message.code), writer;
  },
  decode(input, length) {
    let reader = input instanceof import_minimal3.default.Reader ? input : import_minimal3.default.Reader.create(input), end = length === void 0 ? reader.len : reader.pos + length, message = createBaseStatus();
    for (; reader.pos < end; ) {
      let tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18)
            break;
          message.message = reader.string();
          continue;
        case 3:
          if (tag !== 24)
            break;
          message.code = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0)
        break;
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      message: isSet4(object.message) ? globalThis.String(object.message) : "",
      code: isSet4(object.code) ? status_StatusCodeFromJSON(object.code) : 0
    };
  },
  toJSON(message) {
    let obj = {};
    return message.message !== "" && (obj.message = message.message), message.code !== 0 && (obj.code = status_StatusCodeToJSON(message.code)), obj;
  },
  create(base) {
    return Status.fromPartial(base ?? {});
  },
  fromPartial(object) {
    let message = createBaseStatus();
    return message.message = object.message ?? "", message.code = object.code ?? 0, message;
  }
};
function bytesFromBase642(b64) {
  if (globalThis.Buffer)
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  {
    let bin = globalThis.atob(b64), arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i)
      arr[i] = bin.charCodeAt(i);
    return arr;
  }
}
function base64FromBytes2(arr) {
  if (globalThis.Buffer)
    return globalThis.Buffer.from(arr).toString("base64");
  {
    let bin = [];
    return arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    }), globalThis.btoa(bin.join(""));
  }
}
function longToBigint2(long) {
  return BigInt(long.toString());
}
import_minimal3.default.util.Long !== import_long2.default && (import_minimal3.default.util.Long = import_long2.default, import_minimal3.default.configure());
function isSet4(value) {
  return value != null;
}

// ../../packages/otlp-importer/src/generated/opentelemetry/proto/collector/trace/v1/trace_service.ts
function createBaseExportTraceServiceRequest() {
  return { resourceSpans: [] };
}
var ExportTraceServiceRequest = {
  encode(message, writer = import_minimal4.default.Writer.create()) {
    for (let v of message.resourceSpans)
      ResourceSpans.encode(v, writer.uint32(10).fork()).ldelim();
    return writer;
  },
  decode(input, length) {
    let reader = input instanceof import_minimal4.default.Reader ? input : import_minimal4.default.Reader.create(input), end = length === void 0 ? reader.len : reader.pos + length, message = createBaseExportTraceServiceRequest();
    for (; reader.pos < end; ) {
      let tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10)
            break;
          message.resourceSpans.push(ResourceSpans.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0)
        break;
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      resourceSpans: globalThis.Array.isArray(object?.resourceSpans) ? object.resourceSpans.map((e) => ResourceSpans.fromJSON(e)) : []
    };
  },
  toJSON(message) {
    let obj = {};
    return message.resourceSpans?.length && (obj.resourceSpans = message.resourceSpans.map((e) => ResourceSpans.toJSON(e))), obj;
  },
  create(base) {
    return ExportTraceServiceRequest.fromPartial(base ?? {});
  },
  fromPartial(object) {
    let message = createBaseExportTraceServiceRequest();
    return message.resourceSpans = object.resourceSpans?.map((e) => ResourceSpans.fromPartial(e)) || [], message;
  }
};
function createBaseExportTraceServiceResponse() {
  return { partialSuccess: void 0 };
}
var ExportTraceServiceResponse = {
  encode(message, writer = import_minimal4.default.Writer.create()) {
    return message.partialSuccess !== void 0 && ExportTracePartialSuccess.encode(message.partialSuccess, writer.uint32(10).fork()).ldelim(), writer;
  },
  decode(input, length) {
    let reader = input instanceof import_minimal4.default.Reader ? input : import_minimal4.default.Reader.create(input), end = length === void 0 ? reader.len : reader.pos + length, message = createBaseExportTraceServiceResponse();
    for (; reader.pos < end; ) {
      let tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10)
            break;
          message.partialSuccess = ExportTracePartialSuccess.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0)
        break;
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      partialSuccess: isSet5(object.partialSuccess) ? ExportTracePartialSuccess.fromJSON(object.partialSuccess) : void 0
    };
  },
  toJSON(message) {
    let obj = {};
    return message.partialSuccess !== void 0 && (obj.partialSuccess = ExportTracePartialSuccess.toJSON(message.partialSuccess)), obj;
  },
  create(base) {
    return ExportTraceServiceResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    let message = createBaseExportTraceServiceResponse();
    return message.partialSuccess = object.partialSuccess !== void 0 && object.partialSuccess !== null ? ExportTracePartialSuccess.fromPartial(object.partialSuccess) : void 0, message;
  }
};
function createBaseExportTracePartialSuccess() {
  return { rejectedSpans: BigInt("0"), errorMessage: "" };
}
var ExportTracePartialSuccess = {
  encode(message, writer = import_minimal4.default.Writer.create()) {
    if (message.rejectedSpans !== BigInt("0")) {
      if (BigInt.asIntN(64, message.rejectedSpans) !== message.rejectedSpans)
        throw new globalThis.Error("value provided for field message.rejectedSpans of type int64 too large");
      writer.uint32(8).int64(message.rejectedSpans.toString());
    }
    return message.errorMessage !== "" && writer.uint32(18).string(message.errorMessage), writer;
  },
  decode(input, length) {
    let reader = input instanceof import_minimal4.default.Reader ? input : import_minimal4.default.Reader.create(input), end = length === void 0 ? reader.len : reader.pos + length, message = createBaseExportTracePartialSuccess();
    for (; reader.pos < end; ) {
      let tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8)
            break;
          message.rejectedSpans = longToBigint3(reader.int64());
          continue;
        case 2:
          if (tag !== 18)
            break;
          message.errorMessage = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0)
        break;
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      rejectedSpans: isSet5(object.rejectedSpans) ? BigInt(object.rejectedSpans) : BigInt("0"),
      errorMessage: isSet5(object.errorMessage) ? globalThis.String(object.errorMessage) : ""
    };
  },
  toJSON(message) {
    let obj = {};
    return message.rejectedSpans !== BigInt("0") && (obj.rejectedSpans = message.rejectedSpans.toString()), message.errorMessage !== "" && (obj.errorMessage = message.errorMessage), obj;
  },
  create(base) {
    return ExportTracePartialSuccess.fromPartial(base ?? {});
  },
  fromPartial(object) {
    let message = createBaseExportTracePartialSuccess();
    return message.rejectedSpans = object.rejectedSpans ?? BigInt("0"), message.errorMessage = object.errorMessage ?? "", message;
  }
};
function longToBigint3(long) {
  return BigInt(long.toString());
}
import_minimal4.default.util.Long !== import_long3.default && (import_minimal4.default.util.Long = import_long3.default, import_minimal4.default.configure());
function isSet5(value) {
  return value != null;
}

// ../../packages/otlp-importer/src/generated/opentelemetry/proto/collector/logs/v1/logs_service.ts
var import_long5 = __toESM(require("long")), import_minimal6 = __toESM(require("protobufjs/minimal"));

// ../../packages/otlp-importer/src/generated/opentelemetry/proto/logs/v1/logs.ts
var import_long4 = __toESM(require("long")), import_minimal5 = __toESM(require("protobufjs/minimal"));
function severityNumberFromJSON(object) {
  switch (object) {
    case 0:
    case "SEVERITY_NUMBER_UNSPECIFIED":
      return 0 /* UNSPECIFIED */;
    case 1:
    case "SEVERITY_NUMBER_TRACE":
      return 1 /* TRACE */;
    case 2:
    case "SEVERITY_NUMBER_TRACE2":
      return 2 /* TRACE2 */;
    case 3:
    case "SEVERITY_NUMBER_TRACE3":
      return 3 /* TRACE3 */;
    case 4:
    case "SEVERITY_NUMBER_TRACE4":
      return 4 /* TRACE4 */;
    case 5:
    case "SEVERITY_NUMBER_DEBUG":
      return 5 /* DEBUG */;
    case 6:
    case "SEVERITY_NUMBER_DEBUG2":
      return 6 /* DEBUG2 */;
    case 7:
    case "SEVERITY_NUMBER_DEBUG3":
      return 7 /* DEBUG3 */;
    case 8:
    case "SEVERITY_NUMBER_DEBUG4":
      return 8 /* DEBUG4 */;
    case 9:
    case "SEVERITY_NUMBER_INFO":
      return 9 /* INFO */;
    case 10:
    case "SEVERITY_NUMBER_INFO2":
      return 10 /* INFO2 */;
    case 11:
    case "SEVERITY_NUMBER_INFO3":
      return 11 /* INFO3 */;
    case 12:
    case "SEVERITY_NUMBER_INFO4":
      return 12 /* INFO4 */;
    case 13:
    case "SEVERITY_NUMBER_WARN":
      return 13 /* WARN */;
    case 14:
    case "SEVERITY_NUMBER_WARN2":
      return 14 /* WARN2 */;
    case 15:
    case "SEVERITY_NUMBER_WARN3":
      return 15 /* WARN3 */;
    case 16:
    case "SEVERITY_NUMBER_WARN4":
      return 16 /* WARN4 */;
    case 17:
    case "SEVERITY_NUMBER_ERROR":
      return 17 /* ERROR */;
    case 18:
    case "SEVERITY_NUMBER_ERROR2":
      return 18 /* ERROR2 */;
    case 19:
    case "SEVERITY_NUMBER_ERROR3":
      return 19 /* ERROR3 */;
    case 20:
    case "SEVERITY_NUMBER_ERROR4":
      return 20 /* ERROR4 */;
    case 21:
    case "SEVERITY_NUMBER_FATAL":
      return 21 /* FATAL */;
    case 22:
    case "SEVERITY_NUMBER_FATAL2":
      return 22 /* FATAL2 */;
    case 23:
    case "SEVERITY_NUMBER_FATAL3":
      return 23 /* FATAL3 */;
    case 24:
    case "SEVERITY_NUMBER_FATAL4":
      return 24 /* FATAL4 */;
    case -1:
    case "UNRECOGNIZED":
    default:
      return -1 /* UNRECOGNIZED */;
  }
}
function severityNumberToJSON(object) {
  switch (object) {
    case 0 /* UNSPECIFIED */:
      return "SEVERITY_NUMBER_UNSPECIFIED";
    case 1 /* TRACE */:
      return "SEVERITY_NUMBER_TRACE";
    case 2 /* TRACE2 */:
      return "SEVERITY_NUMBER_TRACE2";
    case 3 /* TRACE3 */:
      return "SEVERITY_NUMBER_TRACE3";
    case 4 /* TRACE4 */:
      return "SEVERITY_NUMBER_TRACE4";
    case 5 /* DEBUG */:
      return "SEVERITY_NUMBER_DEBUG";
    case 6 /* DEBUG2 */:
      return "SEVERITY_NUMBER_DEBUG2";
    case 7 /* DEBUG3 */:
      return "SEVERITY_NUMBER_DEBUG3";
    case 8 /* DEBUG4 */:
      return "SEVERITY_NUMBER_DEBUG4";
    case 9 /* INFO */:
      return "SEVERITY_NUMBER_INFO";
    case 10 /* INFO2 */:
      return "SEVERITY_NUMBER_INFO2";
    case 11 /* INFO3 */:
      return "SEVERITY_NUMBER_INFO3";
    case 12 /* INFO4 */:
      return "SEVERITY_NUMBER_INFO4";
    case 13 /* WARN */:
      return "SEVERITY_NUMBER_WARN";
    case 14 /* WARN2 */:
      return "SEVERITY_NUMBER_WARN2";
    case 15 /* WARN3 */:
      return "SEVERITY_NUMBER_WARN3";
    case 16 /* WARN4 */:
      return "SEVERITY_NUMBER_WARN4";
    case 17 /* ERROR */:
      return "SEVERITY_NUMBER_ERROR";
    case 18 /* ERROR2 */:
      return "SEVERITY_NUMBER_ERROR2";
    case 19 /* ERROR3 */:
      return "SEVERITY_NUMBER_ERROR3";
    case 20 /* ERROR4 */:
      return "SEVERITY_NUMBER_ERROR4";
    case 21 /* FATAL */:
      return "SEVERITY_NUMBER_FATAL";
    case 22 /* FATAL2 */:
      return "SEVERITY_NUMBER_FATAL2";
    case 23 /* FATAL3 */:
      return "SEVERITY_NUMBER_FATAL3";
    case 24 /* FATAL4 */:
      return "SEVERITY_NUMBER_FATAL4";
    case -1 /* UNRECOGNIZED */:
    default:
      return "UNRECOGNIZED";
  }
}
function createBaseResourceLogs() {
  return { resource: void 0, scopeLogs: [], schemaUrl: "" };
}
var ResourceLogs = {
  encode(message, writer = import_minimal5.default.Writer.create()) {
    message.resource !== void 0 && Resource2.encode(message.resource, writer.uint32(10).fork()).ldelim();
    for (let v of message.scopeLogs)
      ScopeLogs.encode(v, writer.uint32(18).fork()).ldelim();
    return message.schemaUrl !== "" && writer.uint32(26).string(message.schemaUrl), writer;
  },
  decode(input, length) {
    let reader = input instanceof import_minimal5.default.Reader ? input : import_minimal5.default.Reader.create(input), end = length === void 0 ? reader.len : reader.pos + length, message = createBaseResourceLogs();
    for (; reader.pos < end; ) {
      let tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10)
            break;
          message.resource = Resource2.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18)
            break;
          message.scopeLogs.push(ScopeLogs.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26)
            break;
          message.schemaUrl = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0)
        break;
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      resource: isSet6(object.resource) ? Resource2.fromJSON(object.resource) : void 0,
      scopeLogs: globalThis.Array.isArray(object?.scopeLogs) ? object.scopeLogs.map((e) => ScopeLogs.fromJSON(e)) : [],
      schemaUrl: isSet6(object.schemaUrl) ? globalThis.String(object.schemaUrl) : ""
    };
  },
  toJSON(message) {
    let obj = {};
    return message.resource !== void 0 && (obj.resource = Resource2.toJSON(message.resource)), message.scopeLogs?.length && (obj.scopeLogs = message.scopeLogs.map((e) => ScopeLogs.toJSON(e))), message.schemaUrl !== "" && (obj.schemaUrl = message.schemaUrl), obj;
  },
  create(base) {
    return ResourceLogs.fromPartial(base ?? {});
  },
  fromPartial(object) {
    let message = createBaseResourceLogs();
    return message.resource = object.resource !== void 0 && object.resource !== null ? Resource2.fromPartial(object.resource) : void 0, message.scopeLogs = object.scopeLogs?.map((e) => ScopeLogs.fromPartial(e)) || [], message.schemaUrl = object.schemaUrl ?? "", message;
  }
};
function createBaseScopeLogs() {
  return { scope: void 0, logRecords: [], schemaUrl: "" };
}
var ScopeLogs = {
  encode(message, writer = import_minimal5.default.Writer.create()) {
    message.scope !== void 0 && InstrumentationScope.encode(message.scope, writer.uint32(10).fork()).ldelim();
    for (let v of message.logRecords)
      LogRecord.encode(v, writer.uint32(18).fork()).ldelim();
    return message.schemaUrl !== "" && writer.uint32(26).string(message.schemaUrl), writer;
  },
  decode(input, length) {
    let reader = input instanceof import_minimal5.default.Reader ? input : import_minimal5.default.Reader.create(input), end = length === void 0 ? reader.len : reader.pos + length, message = createBaseScopeLogs();
    for (; reader.pos < end; ) {
      let tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10)
            break;
          message.scope = InstrumentationScope.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18)
            break;
          message.logRecords.push(LogRecord.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26)
            break;
          message.schemaUrl = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0)
        break;
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      scope: isSet6(object.scope) ? InstrumentationScope.fromJSON(object.scope) : void 0,
      logRecords: globalThis.Array.isArray(object?.logRecords) ? object.logRecords.map((e) => LogRecord.fromJSON(e)) : [],
      schemaUrl: isSet6(object.schemaUrl) ? globalThis.String(object.schemaUrl) : ""
    };
  },
  toJSON(message) {
    let obj = {};
    return message.scope !== void 0 && (obj.scope = InstrumentationScope.toJSON(message.scope)), message.logRecords?.length && (obj.logRecords = message.logRecords.map((e) => LogRecord.toJSON(e))), message.schemaUrl !== "" && (obj.schemaUrl = message.schemaUrl), obj;
  },
  create(base) {
    return ScopeLogs.fromPartial(base ?? {});
  },
  fromPartial(object) {
    let message = createBaseScopeLogs();
    return message.scope = object.scope !== void 0 && object.scope !== null ? InstrumentationScope.fromPartial(object.scope) : void 0, message.logRecords = object.logRecords?.map((e) => LogRecord.fromPartial(e)) || [], message.schemaUrl = object.schemaUrl ?? "", message;
  }
};
function createBaseLogRecord() {
  return {
    timeUnixNano: BigInt("0"),
    observedTimeUnixNano: BigInt("0"),
    severityNumber: 0,
    severityText: "",
    body: void 0,
    attributes: [],
    droppedAttributesCount: 0,
    flags: 0,
    traceId: Buffer.alloc(0),
    spanId: Buffer.alloc(0)
  };
}
var LogRecord = {
  encode(message, writer = import_minimal5.default.Writer.create()) {
    if (message.timeUnixNano !== BigInt("0")) {
      if (BigInt.asUintN(64, message.timeUnixNano) !== message.timeUnixNano)
        throw new globalThis.Error("value provided for field message.timeUnixNano of type fixed64 too large");
      writer.uint32(9).fixed64(message.timeUnixNano.toString());
    }
    if (message.observedTimeUnixNano !== BigInt("0")) {
      if (BigInt.asUintN(64, message.observedTimeUnixNano) !== message.observedTimeUnixNano)
        throw new globalThis.Error("value provided for field message.observedTimeUnixNano of type fixed64 too large");
      writer.uint32(89).fixed64(message.observedTimeUnixNano.toString());
    }
    message.severityNumber !== 0 && writer.uint32(16).int32(message.severityNumber), message.severityText !== "" && writer.uint32(26).string(message.severityText), message.body !== void 0 && AnyValue.encode(message.body, writer.uint32(42).fork()).ldelim();
    for (let v of message.attributes)
      KeyValue.encode(v, writer.uint32(50).fork()).ldelim();
    return message.droppedAttributesCount !== 0 && writer.uint32(56).uint32(message.droppedAttributesCount), message.flags !== 0 && writer.uint32(69).fixed32(message.flags), message.traceId.length !== 0 && writer.uint32(74).bytes(message.traceId), message.spanId.length !== 0 && writer.uint32(82).bytes(message.spanId), writer;
  },
  decode(input, length) {
    let reader = input instanceof import_minimal5.default.Reader ? input : import_minimal5.default.Reader.create(input), end = length === void 0 ? reader.len : reader.pos + length, message = createBaseLogRecord();
    for (; reader.pos < end; ) {
      let tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 9)
            break;
          message.timeUnixNano = longToBigint4(reader.fixed64());
          continue;
        case 11:
          if (tag !== 89)
            break;
          message.observedTimeUnixNano = longToBigint4(reader.fixed64());
          continue;
        case 2:
          if (tag !== 16)
            break;
          message.severityNumber = reader.int32();
          continue;
        case 3:
          if (tag !== 26)
            break;
          message.severityText = reader.string();
          continue;
        case 5:
          if (tag !== 42)
            break;
          message.body = AnyValue.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50)
            break;
          message.attributes.push(KeyValue.decode(reader, reader.uint32()));
          continue;
        case 7:
          if (tag !== 56)
            break;
          message.droppedAttributesCount = reader.uint32();
          continue;
        case 8:
          if (tag !== 69)
            break;
          message.flags = reader.fixed32();
          continue;
        case 9:
          if (tag !== 74)
            break;
          message.traceId = reader.bytes();
          continue;
        case 10:
          if (tag !== 82)
            break;
          message.spanId = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0)
        break;
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      timeUnixNano: isSet6(object.timeUnixNano) ? BigInt(object.timeUnixNano) : BigInt("0"),
      observedTimeUnixNano: isSet6(object.observedTimeUnixNano) ? BigInt(object.observedTimeUnixNano) : BigInt("0"),
      severityNumber: isSet6(object.severityNumber) ? severityNumberFromJSON(object.severityNumber) : 0,
      severityText: isSet6(object.severityText) ? globalThis.String(object.severityText) : "",
      body: isSet6(object.body) ? AnyValue.fromJSON(object.body) : void 0,
      attributes: globalThis.Array.isArray(object?.attributes) ? object.attributes.map((e) => KeyValue.fromJSON(e)) : [],
      droppedAttributesCount: isSet6(object.droppedAttributesCount) ? globalThis.Number(object.droppedAttributesCount) : 0,
      flags: isSet6(object.flags) ? globalThis.Number(object.flags) : 0,
      traceId: isSet6(object.traceId) ? Buffer.from(bytesFromBase643(object.traceId)) : Buffer.alloc(0),
      spanId: isSet6(object.spanId) ? Buffer.from(bytesFromBase643(object.spanId)) : Buffer.alloc(0)
    };
  },
  toJSON(message) {
    let obj = {};
    return message.timeUnixNano !== BigInt("0") && (obj.timeUnixNano = message.timeUnixNano.toString()), message.observedTimeUnixNano !== BigInt("0") && (obj.observedTimeUnixNano = message.observedTimeUnixNano.toString()), message.severityNumber !== 0 && (obj.severityNumber = severityNumberToJSON(message.severityNumber)), message.severityText !== "" && (obj.severityText = message.severityText), message.body !== void 0 && (obj.body = AnyValue.toJSON(message.body)), message.attributes?.length && (obj.attributes = message.attributes.map((e) => KeyValue.toJSON(e))), message.droppedAttributesCount !== 0 && (obj.droppedAttributesCount = Math.round(message.droppedAttributesCount)), message.flags !== 0 && (obj.flags = Math.round(message.flags)), message.traceId.length !== 0 && (obj.traceId = base64FromBytes3(message.traceId)), message.spanId.length !== 0 && (obj.spanId = base64FromBytes3(message.spanId)), obj;
  },
  create(base) {
    return LogRecord.fromPartial(base ?? {});
  },
  fromPartial(object) {
    let message = createBaseLogRecord();
    return message.timeUnixNano = object.timeUnixNano ?? BigInt("0"), message.observedTimeUnixNano = object.observedTimeUnixNano ?? BigInt("0"), message.severityNumber = object.severityNumber ?? 0, message.severityText = object.severityText ?? "", message.body = object.body !== void 0 && object.body !== null ? AnyValue.fromPartial(object.body) : void 0, message.attributes = object.attributes?.map((e) => KeyValue.fromPartial(e)) || [], message.droppedAttributesCount = object.droppedAttributesCount ?? 0, message.flags = object.flags ?? 0, message.traceId = object.traceId ?? Buffer.alloc(0), message.spanId = object.spanId ?? Buffer.alloc(0), message;
  }
};
function bytesFromBase643(b64) {
  if (globalThis.Buffer)
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  {
    let bin = globalThis.atob(b64), arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i)
      arr[i] = bin.charCodeAt(i);
    return arr;
  }
}
function base64FromBytes3(arr) {
  if (globalThis.Buffer)
    return globalThis.Buffer.from(arr).toString("base64");
  {
    let bin = [];
    return arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    }), globalThis.btoa(bin.join(""));
  }
}
function longToBigint4(long) {
  return BigInt(long.toString());
}
import_minimal5.default.util.Long !== import_long4.default && (import_minimal5.default.util.Long = import_long4.default, import_minimal5.default.configure());
function isSet6(value) {
  return value != null;
}

// ../../packages/otlp-importer/src/generated/opentelemetry/proto/collector/logs/v1/logs_service.ts
function createBaseExportLogsServiceRequest() {
  return { resourceLogs: [] };
}
var ExportLogsServiceRequest = {
  encode(message, writer = import_minimal6.default.Writer.create()) {
    for (let v of message.resourceLogs)
      ResourceLogs.encode(v, writer.uint32(10).fork()).ldelim();
    return writer;
  },
  decode(input, length) {
    let reader = input instanceof import_minimal6.default.Reader ? input : import_minimal6.default.Reader.create(input), end = length === void 0 ? reader.len : reader.pos + length, message = createBaseExportLogsServiceRequest();
    for (; reader.pos < end; ) {
      let tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10)
            break;
          message.resourceLogs.push(ResourceLogs.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0)
        break;
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      resourceLogs: globalThis.Array.isArray(object?.resourceLogs) ? object.resourceLogs.map((e) => ResourceLogs.fromJSON(e)) : []
    };
  },
  toJSON(message) {
    let obj = {};
    return message.resourceLogs?.length && (obj.resourceLogs = message.resourceLogs.map((e) => ResourceLogs.toJSON(e))), obj;
  },
  create(base) {
    return ExportLogsServiceRequest.fromPartial(base ?? {});
  },
  fromPartial(object) {
    let message = createBaseExportLogsServiceRequest();
    return message.resourceLogs = object.resourceLogs?.map((e) => ResourceLogs.fromPartial(e)) || [], message;
  }
};
function createBaseExportLogsServiceResponse() {
  return { partialSuccess: void 0 };
}
var ExportLogsServiceResponse = {
  encode(message, writer = import_minimal6.default.Writer.create()) {
    return message.partialSuccess !== void 0 && ExportLogsPartialSuccess.encode(message.partialSuccess, writer.uint32(10).fork()).ldelim(), writer;
  },
  decode(input, length) {
    let reader = input instanceof import_minimal6.default.Reader ? input : import_minimal6.default.Reader.create(input), end = length === void 0 ? reader.len : reader.pos + length, message = createBaseExportLogsServiceResponse();
    for (; reader.pos < end; ) {
      let tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10)
            break;
          message.partialSuccess = ExportLogsPartialSuccess.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0)
        break;
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      partialSuccess: isSet7(object.partialSuccess) ? ExportLogsPartialSuccess.fromJSON(object.partialSuccess) : void 0
    };
  },
  toJSON(message) {
    let obj = {};
    return message.partialSuccess !== void 0 && (obj.partialSuccess = ExportLogsPartialSuccess.toJSON(message.partialSuccess)), obj;
  },
  create(base) {
    return ExportLogsServiceResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    let message = createBaseExportLogsServiceResponse();
    return message.partialSuccess = object.partialSuccess !== void 0 && object.partialSuccess !== null ? ExportLogsPartialSuccess.fromPartial(object.partialSuccess) : void 0, message;
  }
};
function createBaseExportLogsPartialSuccess() {
  return { rejectedLogRecords: BigInt("0"), errorMessage: "" };
}
var ExportLogsPartialSuccess = {
  encode(message, writer = import_minimal6.default.Writer.create()) {
    if (message.rejectedLogRecords !== BigInt("0")) {
      if (BigInt.asIntN(64, message.rejectedLogRecords) !== message.rejectedLogRecords)
        throw new globalThis.Error("value provided for field message.rejectedLogRecords of type int64 too large");
      writer.uint32(8).int64(message.rejectedLogRecords.toString());
    }
    return message.errorMessage !== "" && writer.uint32(18).string(message.errorMessage), writer;
  },
  decode(input, length) {
    let reader = input instanceof import_minimal6.default.Reader ? input : import_minimal6.default.Reader.create(input), end = length === void 0 ? reader.len : reader.pos + length, message = createBaseExportLogsPartialSuccess();
    for (; reader.pos < end; ) {
      let tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8)
            break;
          message.rejectedLogRecords = longToBigint5(reader.int64());
          continue;
        case 2:
          if (tag !== 18)
            break;
          message.errorMessage = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0)
        break;
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      rejectedLogRecords: isSet7(object.rejectedLogRecords) ? BigInt(object.rejectedLogRecords) : BigInt("0"),
      errorMessage: isSet7(object.errorMessage) ? globalThis.String(object.errorMessage) : ""
    };
  },
  toJSON(message) {
    let obj = {};
    return message.rejectedLogRecords !== BigInt("0") && (obj.rejectedLogRecords = message.rejectedLogRecords.toString()), message.errorMessage !== "" && (obj.errorMessage = message.errorMessage), obj;
  },
  create(base) {
    return ExportLogsPartialSuccess.fromPartial(base ?? {});
  },
  fromPartial(object) {
    let message = createBaseExportLogsPartialSuccess();
    return message.rejectedLogRecords = object.rejectedLogRecords ?? BigInt("0"), message.errorMessage = object.errorMessage ?? "", message;
  }
};
function longToBigint5(long) {
  return BigInt(long.toString());
}
import_minimal6.default.util.Long !== import_long5.default && (import_minimal6.default.util.Long = import_long5.default, import_minimal6.default.configure());
function isSet7(value) {
  return value != null;
}

// app/v3/otlpExporter.server.ts
var import_semantic_conventions4 = require("@opentelemetry/semantic-conventions");
var OTLPExporter = class {
  constructor(_eventRepository, _verbose) {
    this._eventRepository = _eventRepository;
    this._verbose = _verbose;
  }
  async exportTraces(request, immediate = !1) {
    this.#logExportTracesVerbose(request);
    let events = this.#filterResourceSpans(request.resourceSpans).flatMap((resourceSpan) => convertSpansToCreateableEvents(resourceSpan));
    return this.#logEventsVerbose(events), immediate ? await this._eventRepository.insertManyImmediate(events) : await this._eventRepository.insertMany(events), ExportTraceServiceResponse.create();
  }
  async exportLogs(request, immediate = !1) {
    this.#logExportLogsVerbose(request);
    let events = this.#filterResourceLogs(request.resourceLogs).flatMap((resourceLog) => convertLogsToCreateableEvents(resourceLog));
    return this.#logEventsVerbose(events), immediate ? await this._eventRepository.insertManyImmediate(events) : await this._eventRepository.insertMany(events), ExportLogsServiceResponse.create();
  }
  #logEventsVerbose(events) {
    this._verbose && events.forEach((event) => {
      logger.debug("Exporting event", { event });
    });
  }
  #logExportTracesVerbose(request) {
    this._verbose && logger.debug("Exporting traces", {
      resourceSpans: request.resourceSpans.length,
      totalSpans: request.resourceSpans.reduce(
        (acc, resourceSpan) => acc + resourceSpan.scopeSpans.length,
        0
      )
    });
  }
  #logExportLogsVerbose(request) {
    this._verbose && logger.debug("Exporting logs", {
      resourceLogs: request.resourceLogs.length,
      totalLogs: request.resourceLogs.reduce(
        (acc, resourceLog) => acc + resourceLog.scopeLogs.reduce((acc2, scopeLog) => acc2 + scopeLog.logRecords.length, 0),
        0
      )
    });
  }
  #filterResourceSpans(resourceSpans) {
    return resourceSpans.filter((resourceSpan) => {
      let triggerAttribute = resourceSpan.resource?.attributes.find(
        (attribute) => attribute.key === SemanticInternalAttributes.TRIGGER
      );
      if (!triggerAttribute) {
        logger.debug("Skipping resource span without trigger attribute", {
          attributes: resourceSpan.resource?.attributes,
          spans: resourceSpan.scopeSpans.flatMap((scopeSpan) => scopeSpan.spans)
        });
        return;
      }
      return isBoolValue(triggerAttribute.value) ? triggerAttribute.value.boolValue : !1;
    });
  }
  #filterResourceLogs(resourceLogs) {
    return resourceLogs.filter((resourceLog) => {
      let attribute = resourceLog.resource?.attributes.find(
        (attribute2) => attribute2.key === SemanticInternalAttributes.TRIGGER
      );
      return attribute && isBoolValue(attribute.value) ? attribute.value.boolValue : !1;
    });
  }
};
function convertLogsToCreateableEvents(resourceLog) {
  let resourceAttributes = resourceLog.resource?.attributes ?? [], resourceProperties = extractResourceProperties(resourceAttributes);
  return resourceLog.scopeLogs.flatMap((scopeLog) => scopeLog.logRecords.map((log) => {
    let logLevel = logLevelToEventLevel(log.severityNumber);
    if (!(!log.traceId || !log.spanId))
      return {
        traceId: binaryToHex(log.traceId),
        spanId: eventRepository.generateSpanId(),
        parentId: binaryToHex(log.spanId),
        message: isStringValue(log.body) ? log.body.stringValue : `${log.severityText} log`,
        isPartial: !1,
        kind: "INTERNAL",
        level: logLevelToEventLevel(log.severityNumber),
        isError: logLevel === "ERROR",
        status: logLevelToEventStatus(log.severityNumber),
        startTime: log.timeUnixNano,
        properties: {
          ...convertKeyValueItemsToMap(log.attributes ?? [], [
            SemanticInternalAttributes.SPAN_ID,
            SemanticInternalAttributes.SPAN_PARTIAL
          ]),
          ...convertKeyValueItemsToMap(
            resourceAttributes,
            [SemanticInternalAttributes.TRIGGER],
            SemanticInternalAttributes.METADATA
          )
        },
        style: convertKeyValueItemsToMap(
          pickAttributes(log.attributes ?? [], SemanticInternalAttributes.STYLE),
          []
        ),
        output: detectPrimitiveValue(
          convertKeyValueItemsToMap(
            pickAttributes(log.attributes ?? [], SemanticInternalAttributes.OUTPUT),
            []
          ),
          SemanticInternalAttributes.OUTPUT
        ),
        payload: detectPrimitiveValue(
          convertKeyValueItemsToMap(
            pickAttributes(log.attributes ?? [], SemanticInternalAttributes.PAYLOAD),
            []
          ),
          SemanticInternalAttributes.PAYLOAD
        ),
        ...resourceProperties,
        attemptId: extractStringAttribute(
          log.attributes ?? [],
          [SemanticInternalAttributes.METADATA, SemanticInternalAttributes.ATTEMPT_ID].join(".")
        ) ?? resourceProperties.attemptId,
        attemptNumber: extractNumberAttribute(
          log.attributes ?? [],
          [SemanticInternalAttributes.METADATA, SemanticInternalAttributes.ATTEMPT_NUMBER].join(
            "."
          )
        ) ?? resourceProperties.attemptNumber
      };
  }).filter(Boolean));
}
function convertSpansToCreateableEvents(resourceSpan) {
  let resourceAttributes = resourceSpan.resource?.attributes ?? [], resourceProperties = extractResourceProperties(resourceAttributes);
  return resourceSpan.scopeSpans.flatMap((scopeSpan) => scopeSpan.spans.map((span) => {
    let isPartial = isPartialSpan(span);
    if (!(!span.traceId || !span.spanId))
      return {
        traceId: binaryToHex(span.traceId),
        spanId: isPartial ? extractStringAttribute(
          span?.attributes ?? [],
          SemanticInternalAttributes.SPAN_ID,
          binaryToHex(span.spanId)
        ) : binaryToHex(span.spanId),
        parentId: binaryToHex(span.parentSpanId),
        message: span.name,
        isPartial,
        isError: span.status?.code === 2 /* ERROR */,
        kind: spanKindToEventKind(span.kind),
        level: "TRACE",
        status: spanStatusToEventStatus(span.status),
        startTime: span.startTimeUnixNano,
        links: spanLinksToEventLinks(span.links ?? []),
        events: spanEventsToEventEvents(span.events ?? []),
        duration: span.endTimeUnixNano - span.startTimeUnixNano,
        properties: {
          ...convertKeyValueItemsToMap(span.attributes ?? [], [
            SemanticInternalAttributes.SPAN_ID,
            SemanticInternalAttributes.SPAN_PARTIAL
          ]),
          ...convertKeyValueItemsToMap(
            resourceAttributes,
            [SemanticInternalAttributes.TRIGGER],
            SemanticInternalAttributes.METADATA
          )
        },
        style: convertKeyValueItemsToMap(
          pickAttributes(span.attributes ?? [], SemanticInternalAttributes.STYLE),
          []
        ),
        output: detectPrimitiveValue(
          convertKeyValueItemsToMap(
            pickAttributes(span.attributes ?? [], SemanticInternalAttributes.OUTPUT),
            []
          ),
          SemanticInternalAttributes.OUTPUT
        ),
        outputType: pickAttributeStringValue(
          span.attributes ?? [],
          SemanticInternalAttributes.OUTPUT_TYPE
        ),
        payload: detectPrimitiveValue(
          convertKeyValueItemsToMap(
            pickAttributes(span.attributes ?? [], SemanticInternalAttributes.PAYLOAD),
            []
          ),
          SemanticInternalAttributes.PAYLOAD
        ),
        payloadType: pickAttributeStringValue(
          span.attributes ?? [],
          SemanticInternalAttributes.PAYLOAD_TYPE
        ) ?? "application/json",
        ...resourceProperties,
        attemptId: extractStringAttribute(
          span.attributes ?? [],
          [SemanticInternalAttributes.METADATA, SemanticInternalAttributes.ATTEMPT_ID].join(".")
        ) ?? resourceProperties.attemptId,
        attemptNumber: extractNumberAttribute(
          span.attributes ?? [],
          [SemanticInternalAttributes.METADATA, SemanticInternalAttributes.ATTEMPT_NUMBER].join(
            "."
          )
        ) ?? resourceProperties.attemptNumber,
        usageDurationMs: extractDoubleAttribute(
          span.attributes ?? [],
          SemanticInternalAttributes.USAGE_DURATION_MS
        ) ?? extractNumberAttribute(
          span.attributes ?? [],
          SemanticInternalAttributes.USAGE_DURATION_MS
        ),
        usageCostInCents: extractDoubleAttribute(
          span.attributes ?? [],
          SemanticInternalAttributes.USAGE_COST_IN_CENTS
        )
      };
  }).filter(Boolean));
}
function extractResourceProperties(attributes) {
  return {
    metadata: convertKeyValueItemsToMap(attributes, [SemanticInternalAttributes.TRIGGER]),
    serviceName: extractStringAttribute(
      attributes,
      import_semantic_conventions4.SemanticResourceAttributes.SERVICE_NAME,
      "unknown"
    ),
    serviceNamespace: extractStringAttribute(
      attributes,
      import_semantic_conventions4.SemanticResourceAttributes.SERVICE_NAMESPACE,
      "unknown"
    ),
    environmentId: extractStringAttribute(
      attributes,
      SemanticInternalAttributes.ENVIRONMENT_ID,
      "unknown"
    ),
    environmentType: extractStringAttribute(
      attributes,
      SemanticInternalAttributes.ENVIRONMENT_TYPE,
      "unknown"
    ),
    organizationId: extractStringAttribute(
      attributes,
      SemanticInternalAttributes.ORGANIZATION_ID,
      "unknown"
    ),
    projectId: extractStringAttribute(attributes, SemanticInternalAttributes.PROJECT_ID, "unknown"),
    projectRef: extractStringAttribute(
      attributes,
      SemanticInternalAttributes.PROJECT_REF,
      "unknown"
    ),
    runId: extractStringAttribute(attributes, SemanticInternalAttributes.RUN_ID, "unknown"),
    runIsTest: extractBooleanAttribute(attributes, SemanticInternalAttributes.RUN_IS_TEST, !1),
    attemptId: extractStringAttribute(attributes, SemanticInternalAttributes.ATTEMPT_ID),
    attemptNumber: extractNumberAttribute(attributes, SemanticInternalAttributes.ATTEMPT_NUMBER),
    taskSlug: extractStringAttribute(attributes, SemanticInternalAttributes.TASK_SLUG, "unknown"),
    taskPath: extractStringAttribute(attributes, SemanticInternalAttributes.TASK_PATH),
    taskExportName: extractStringAttribute(attributes, SemanticInternalAttributes.TASK_EXPORT_NAME),
    workerId: extractStringAttribute(attributes, SemanticInternalAttributes.WORKER_ID),
    workerVersion: extractStringAttribute(attributes, SemanticInternalAttributes.WORKER_VERSION),
    queueId: extractStringAttribute(attributes, SemanticInternalAttributes.QUEUE_ID),
    queueName: extractStringAttribute(attributes, SemanticInternalAttributes.QUEUE_NAME),
    batchId: extractStringAttribute(attributes, SemanticInternalAttributes.BATCH_ID),
    idempotencyKey: extractStringAttribute(attributes, SemanticInternalAttributes.IDEMPOTENCY_KEY),
    machinePreset: extractStringAttribute(
      attributes,
      SemanticInternalAttributes.MACHINE_PRESET_NAME
    ),
    machinePresetCpu: extractDoubleAttribute(attributes, SemanticInternalAttributes.MACHINE_PRESET_CPU) ?? extractNumberAttribute(attributes, SemanticInternalAttributes.MACHINE_PRESET_CPU),
    machinePresetMemory: extractDoubleAttribute(attributes, SemanticInternalAttributes.MACHINE_PRESET_MEMORY) ?? extractNumberAttribute(attributes, SemanticInternalAttributes.MACHINE_PRESET_MEMORY),
    machinePresetCentsPerMs: extractDoubleAttribute(
      attributes,
      SemanticInternalAttributes.MACHINE_PRESET_CENTS_PER_MS
    )
  };
}
function pickAttributes(attributes, prefix) {
  return attributes.filter((attribute) => attribute.key.startsWith(prefix)).map((attribute) => ({
    key: attribute.key.replace(`${prefix}.`, ""),
    value: attribute.value
  }));
}
function pickAttributeStringValue(attributes, key) {
  let attribute = attributes.find((attribute2) => attribute2.key === key);
  if (attribute)
    return isStringValue(attribute.value) ? attribute.value.stringValue : void 0;
}
function convertKeyValueItemsToMap(attributes, filteredKeys = [], prefix) {
  if (!attributes || !attributes.length)
    return;
  let filteredAttributes = attributes.filter(
    (attribute) => !filteredKeys.includes(attribute.key)
  );
  return filteredAttributes.length ? filteredAttributes.reduce(
    (map, attribute) => (map[`${prefix ? `${prefix}.` : ""}${attribute.key}`] = isStringValue(attribute.value) ? attribute.value.stringValue : isIntValue(attribute.value) ? Number(attribute.value.intValue) : isDoubleValue(attribute.value) ? attribute.value.doubleValue : isBoolValue(attribute.value) ? attribute.value.boolValue : isBytesValue(attribute.value) ? binaryToHex(attribute.value.bytesValue) : void 0, map),
    {}
  ) : void 0;
}
function detectPrimitiveValue(attributes, sentinel) {
  if (attributes)
    return typeof attributes[sentinel] < "u" ? attributes[sentinel] : attributes;
}
function spanLinksToEventLinks(links2) {
  return links2.map((link) => ({
    traceId: binaryToHex(link.traceId),
    spanId: binaryToHex(link.spanId),
    tracestate: link.traceState,
    properties: convertKeyValueItemsToMap(link.attributes ?? [])
  }));
}
function spanEventsToEventEvents(events) {
  return events.map((event) => ({
    name: event.name,
    time: convertUnixNanoToDate(event.timeUnixNano),
    properties: convertKeyValueItemsToMap(event.attributes ?? [])
  }));
}
function spanStatusToEventStatus(status) {
  if (!status)
    return "UNSET";
  switch (status.code) {
    case 1 /* OK */:
      return "OK";
    case 2 /* ERROR */:
      return "ERROR";
    case 0 /* UNSET */:
      return "UNSET";
    default:
      return "UNSET";
  }
}
function spanKindToEventKind(kind) {
  switch (kind) {
    case 3 /* CLIENT */:
      return "CLIENT";
    case 2 /* SERVER */:
      return "SERVER";
    case 5 /* CONSUMER */:
      return "CONSUMER";
    case 4 /* PRODUCER */:
      return "PRODUCER";
    default:
      return "INTERNAL";
  }
}
function logLevelToEventLevel(level) {
  switch (level) {
    case 1 /* TRACE */:
    case 2 /* TRACE2 */:
    case 3 /* TRACE3 */:
    case 4 /* TRACE4 */:
      return "TRACE";
    case 5 /* DEBUG */:
    case 6 /* DEBUG2 */:
    case 7 /* DEBUG3 */:
    case 8 /* DEBUG4 */:
      return "DEBUG";
    case 9 /* INFO */:
    case 10 /* INFO2 */:
    case 11 /* INFO3 */:
    case 12 /* INFO4 */:
      return "INFO";
    case 13 /* WARN */:
    case 14 /* WARN2 */:
    case 15 /* WARN3 */:
    case 16 /* WARN4 */:
      return "WARN";
    case 17 /* ERROR */:
    case 18 /* ERROR2 */:
    case 19 /* ERROR3 */:
    case 20 /* ERROR4 */:
      return "ERROR";
    case 21 /* FATAL */:
    case 22 /* FATAL2 */:
    case 23 /* FATAL3 */:
    case 24 /* FATAL4 */:
      return "ERROR";
    default:
      return "INFO";
  }
}
function logLevelToEventStatus(level) {
  switch (level) {
    case 1 /* TRACE */:
    case 2 /* TRACE2 */:
    case 3 /* TRACE3 */:
    case 4 /* TRACE4 */:
      return "OK";
    case 5 /* DEBUG */:
    case 6 /* DEBUG2 */:
    case 7 /* DEBUG3 */:
    case 8 /* DEBUG4 */:
      return "OK";
    case 9 /* INFO */:
    case 10 /* INFO2 */:
    case 11 /* INFO3 */:
    case 12 /* INFO4 */:
      return "OK";
    case 13 /* WARN */:
    case 14 /* WARN2 */:
    case 15 /* WARN3 */:
    case 16 /* WARN4 */:
      return "OK";
    case 17 /* ERROR */:
    case 18 /* ERROR2 */:
    case 19 /* ERROR3 */:
    case 20 /* ERROR4 */:
      return "ERROR";
    case 21 /* FATAL */:
    case 22 /* FATAL2 */:
    case 23 /* FATAL3 */:
    case 24 /* FATAL4 */:
      return "ERROR";
    default:
      return "OK";
  }
}
function convertUnixNanoToDate(unixNano) {
  return new Date(Number(BigInt(unixNano) / BigInt(1e6)));
}
function extractStringAttribute(attributes, name, fallback) {
  let attribute = attributes.find((attribute2) => attribute2.key === name);
  return attribute && isStringValue(attribute?.value) ? attribute.value.stringValue : fallback;
}
function extractNumberAttribute(attributes, name, fallback) {
  let attribute = attributes.find((attribute2) => attribute2.key === name);
  return attribute && isIntValue(attribute?.value) ? Number(attribute.value.intValue) : fallback;
}
function extractDoubleAttribute(attributes, name, fallback) {
  let attribute = attributes.find((attribute2) => attribute2.key === name);
  return attribute && isDoubleValue(attribute?.value) ? Number(attribute.value.doubleValue) : fallback;
}
function extractBooleanAttribute(attributes, name, fallback) {
  let attribute = attributes.find((attribute2) => attribute2.key === name);
  return attribute && isBoolValue(attribute?.value) ? attribute.value.boolValue : fallback;
}
function isPartialSpan(span) {
  if (!span.attributes)
    return !1;
  let attribute = span.attributes.find(
    (attribute2) => attribute2.key === SemanticInternalAttributes.SPAN_PARTIAL
  );
  return attribute && isBoolValue(attribute.value) ? attribute.value.boolValue : !1;
}
function isBoolValue(value) {
  return value ? typeof value.boolValue == "boolean" : !1;
}
function isStringValue(value) {
  return value ? typeof value.stringValue == "string" : !1;
}
function isIntValue(value) {
  return value ? typeof value.intValue == "number" : !1;
}
function isDoubleValue(value) {
  return value ? typeof value.doubleValue == "number" : !1;
}
function isBytesValue(value) {
  return value ? Buffer.isBuffer(value.bytesValue) : !1;
}
function binaryToHex(buffer) {
  if (buffer)
    return typeof buffer == "string" ? buffer : Buffer.from(Array.from(buffer)).toString("hex");
}
var otlpExporter = new OTLPExporter(
  eventRepository,
  process.env.OTLP_EXPORTER_VERBOSE === "1"
);

// app/routes/otel.v1.traces.ts
async function action94({ request }) {
  try {
    let contentType = request.headers.get("content-type");
    if (contentType === "application/json") {
      let body = await request.json(), exportResponse = await otlpExporter.exportTraces(
        body,
        !1
      );
      return (0, import_server_runtime110.json)(exportResponse, { status: 200 });
    } else if (contentType === "application/x-protobuf") {
      let buffer = await request.arrayBuffer(), exportRequest = ExportTraceServiceRequest.decode(new Uint8Array(buffer)), exportResponse = await otlpExporter.exportTraces(exportRequest);
      return new Response(ExportTraceServiceResponse.encode(exportResponse).finish(), {
        status: 200
      });
    } else
      return new Response(
        "Unsupported content type. Must be either application/x-protobuf or application/json",
        { status: 400 }
      );
  } catch (error) {
    return console.error(error), new Response("Internal Server Error", { status: 500 });
  }
}

// app/routes/storybook.tabs/route.tsx
var route_exports153 = {};
__export(route_exports153, {
  default: () => Story34
});
var import_react237 = require("@remix-run/react");
var import_jsx_runtime314 = require("react/jsx-runtime");
function Story34() {
  return /* @__PURE__ */ (0, import_jsx_runtime314.jsxs)("div", { className: "w-96 p-8", children: [
    /* @__PURE__ */ (0, import_jsx_runtime314.jsx)(
      Tabs,
      {
        tabs: [
          { label: "My first tab", to: "1" },
          { label: "Second tab", to: "2" },
          { label: "Third tab", to: "3" }
        ],
        layoutId: "my-tabs"
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime314.jsx)(import_react237.Outlet, {})
  ] });
}

// app/routes/_app.orgs.new/route.tsx
var route_exports154 = {};
__export(route_exports154, {
  action: () => action95,
  default: () => NewOrganizationPage,
  loader: () => loader141
});
var import_react238 = require("@conform-to/react"), import_zod259 = require("@conform-to/zod"), import_react_radio_group = require("@radix-ui/react-radio-group"), import_node18 = require("@remix-run/node"), import_react239 = require("@remix-run/react"), import_remix_typedjson88 = require("remix-typedjson"), import_zod260 = require("zod");

// app/presenters/NewOrganizationPresenter.server.ts
var NewOrganizationPresenter = class {
  #prismaClient;
  constructor(prismaClient = prisma) {
    this.#prismaClient = prismaClient;
  }
  async call({ userId }) {
    return {
      hasOrganizations: (await this.#prismaClient.organization.findMany({
        select: {
          projects: {
            where: { deletedAt: null }
          }
        },
        where: { members: { some: { userId } } }
      })).filter((o) => o.projects.length > 0).length > 0
    };
  }
};

// app/routes/_app.orgs.new/route.tsx
var import_jsx_runtime315 = require("react/jsx-runtime"), schema16 = import_zod260.z.object({
  orgName: import_zod260.z.string().min(3).max(50),
  companySize: import_zod260.z.string().optional()
}), loader141 = async ({ request }) => {
  let userId = await requireUserId(request), presenter = new NewOrganizationPresenter(), { hasOrganizations } = await presenter.call({ userId });
  return (0, import_remix_typedjson88.typedjson)({
    hasOrganizations
  });
}, action95 = async ({ request }) => {
  let userId = await requireUserId(request), formData = await request.formData(), submission = (0, import_zod259.parse)(formData, { schema: schema16 });
  if (!submission.value || submission.intent !== "submit")
    return (0, import_node18.json)(submission);
  try {
    let organization = await createOrganization({
      title: submission.value.orgName,
      userId,
      companySize: submission.value.companySize ?? null
    });
    return (0, import_node18.redirect)(organizationPath(organization));
  } catch (error) {
    return (0, import_node18.json)({ errors: { body: error.message } }, { status: 400 });
  }
};
function NewOrganizationPage() {
  let { hasOrganizations } = (0, import_remix_typedjson88.useTypedLoaderData)(), lastSubmission = (0, import_react239.useActionData)(), { isManagedCloud: isManagedCloud2 } = useFeatures(), navigation = (0, import_react239.useNavigation)(), [form, { orgName }] = (0, import_react238.useForm)({
    id: "create-organization",
    // TODO: type this
    lastSubmission,
    onValidate({ formData }) {
      return (0, import_zod259.parse)(formData, { schema: schema16 });
    },
    shouldRevalidate: "onSubmit",
    shouldValidate: "onSubmit"
  }), isLoading2 = navigation.state === "submitting" || navigation.state === "loading";
  return /* @__PURE__ */ (0, import_jsx_runtime315.jsxs)(MainCenteredContainer, { className: "max-w-[22rem]", children: [
    /* @__PURE__ */ (0, import_jsx_runtime315.jsx)(FormTitle, { LeadingIcon: "organization", title: "Create an Organization" }),
    /* @__PURE__ */ (0, import_jsx_runtime315.jsx)(import_react239.Form, { method: "post", ...form.props, children: /* @__PURE__ */ (0, import_jsx_runtime315.jsxs)(Fieldset, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime315.jsxs)(InputGroup, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime315.jsx)(Label, { htmlFor: orgName.id, children: "Organization name" }),
        /* @__PURE__ */ (0, import_jsx_runtime315.jsx)(
          Input,
          {
            ...import_react238.conform.input(orgName, { type: "text" }),
            placeholder: "Your Organization name",
            icon: "organization",
            autoFocus: !0
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime315.jsx)(Hint, { children: "E.g. your company name or your workspace name." }),
        /* @__PURE__ */ (0, import_jsx_runtime315.jsx)(FormError, { id: orgName.errorId, children: orgName.error })
      ] }),
      isManagedCloud2 && /* @__PURE__ */ (0, import_jsx_runtime315.jsxs)(InputGroup, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime315.jsx)(Label, { htmlFor: "companySize", children: "Number of employees" }),
        /* @__PURE__ */ (0, import_jsx_runtime315.jsxs)(import_react_radio_group.RadioGroup, { name: "companySize", className: "flex items-center justify-between gap-2", children: [
          /* @__PURE__ */ (0, import_jsx_runtime315.jsx)(
            RadioGroupItem,
            {
              id: "employees-1-5",
              label: "1-5",
              value: "1-5",
              variant: "button/small",
              className: "grow"
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime315.jsx)(
            RadioGroupItem,
            {
              id: "employees-6-49",
              label: "6-49",
              value: "6-49",
              variant: "button/small",
              className: "grow"
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime315.jsx)(
            RadioGroupItem,
            {
              id: "employees-50-99",
              label: "50-99",
              value: "50-99",
              variant: "button/small",
              className: "grow"
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime315.jsx)(
            RadioGroupItem,
            {
              id: "employees-100+",
              label: "100+",
              value: "100+",
              variant: "button/small",
              className: "grow"
            }
          )
        ] })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime315.jsx)(
        FormButtons,
        {
          confirmButton: /* @__PURE__ */ (0, import_jsx_runtime315.jsx)(Button, { type: "submit", variant: "primary/small", disabled: isLoading2, children: "Create" }),
          cancelButton: hasOrganizations ? /* @__PURE__ */ (0, import_jsx_runtime315.jsx)(LinkButton, { to: rootPath(), variant: "tertiary/small", children: "Cancel" }) : null
        }
      )
    ] }) })
  ] });
}

// app/routes/api.v1.events.ts
var api_v1_events_exports = {};
__export(api_v1_events_exports, {
  action: () => action96
});
var import_server_runtime111 = require("@remix-run/server-runtime");
var import_zod_error5 = require("zod-error");
async function action96({ request }) {
  if (request.method.toUpperCase() !== "POST")
    return { status: 405, body: "Method Not Allowed" };
  let authenticationResult = await authenticateApiRequest(request);
  if (!authenticationResult)
    return (0, import_server_runtime111.json)({ error: "Invalid or Missing API key" }, { status: 401 });
  let authenticatedEnv = authenticationResult.environment, anyBody = await request.json(), body = SendEventBodySchema.safeParse(anyBody);
  if (!body.success)
    return (0, import_server_runtime111.json)({ message: (0, import_zod_error5.generateErrorMessage)(body.error.issues) }, { status: 422 });
  let event = await new IngestSendEvent().call(authenticatedEnv, body.data.event, body.data.options);
  return event ? (0, import_server_runtime111.json)(eventRecordToApiJson(event)) : (0, import_server_runtime111.json)({ error: "Failed to create event" }, { status: 500 });
}

// app/routes/api.v1.whoami.ts
var api_v1_whoami_exports = {};
__export(api_v1_whoami_exports, {
  loader: () => loader142
});
var import_server_runtime112 = require("@remix-run/server-runtime");
async function loader142({ request }) {
  let authenticationResult = await authenticateApiRequest(request);
  if (!authenticationResult)
    return (0, import_server_runtime112.json)({ error: "Invalid or Missing API key" }, { status: 401 });
  let environmentWithUser = await prisma.runtimeEnvironment.findUnique({
    select: {
      orgMember: {
        select: {
          userId: !0
        }
      }
    },
    where: {
      id: authenticationResult.environment.id
    }
  }), result = {
    ...authenticationResult.environment,
    userId: environmentWithUser?.orgMember?.userId
  };
  return (0, import_server_runtime112.json)(result);
}

// app/routes/api.v2.whoami.ts
var api_v2_whoami_exports = {};
__export(api_v2_whoami_exports, {
  loader: () => loader143
});
var import_server_runtime113 = require("@remix-run/server-runtime");
async function loader143({ request }) {
  logger.info("whoami v2", { url: request.url });
  try {
    let authenticationResult = await authenticateApiRequestWithPersonalAccessToken(request);
    if (!authenticationResult)
      return (0, import_server_runtime113.json)({ error: "Invalid or Missing Access Token" }, { status: 401 });
    let user = await prisma.user.findUnique({
      select: {
        email: !0
      },
      where: {
        id: authenticationResult.userId
      }
    });
    if (!user)
      return (0, import_server_runtime113.json)({ error: "User not found" }, { status: 404 });
    let result = {
      userId: authenticationResult.userId,
      email: user.email,
      dashboardUrl: env2.APP_ORIGIN
    };
    return (0, import_server_runtime113.json)(result);
  } catch (error) {
    let errorMessage = error instanceof Error ? error.message : "Something went wrong";
    return logger.error("Error in whoami v2", { error: errorMessage }), (0, import_server_runtime113.json)({ error: errorMessage }, { status: 400 });
  }
}

// app/routes/invite-accept.tsx
var invite_accept_exports = {};
__export(invite_accept_exports, {
  loader: () => loader144
});
async function loader144({ request }) {
  let user = await getUser(request), token = new URL(request.url).searchParams.get("token");
  if (!token)
    return redirectWithErrorMessage(
      "/",
      request,
      "Invalid invite URL. Please ask the person who invited you to send another invite.",
      { ephemeral: !1 }
    );
  let invite = await getInviteFromToken({ token });
  return invite ? user ? invite.email !== user.email ? redirectWithErrorMessage(
    "/",
    request,
    `This invite is for ${invite.email}, but you are logged in as ${user.email}.`,
    { ephemeral: !1 }
  ) : redirectWithSuccessMessage("/", request, "Invite retrieved") : redirectWithSuccessMessage("/", request, "Please log in to accept the invite.", {
    ephemeral: !1
  }) : redirectWithErrorMessage(
    "/",
    request,
    "Invite not found. Please ask the person who invited you to send another invite.",
    { ephemeral: !1 }
  );
}

// app/routes/invite-resend.tsx
var invite_resend_exports = {};
__export(invite_resend_exports, {
  action: () => action97,
  resendSchema: () => resendSchema
});
var import_zod261 = require("@conform-to/zod"), import_server_runtime114 = require("@remix-run/server-runtime"), import_process = require("process"), import_zod262 = require("zod");
var resendSchema = import_zod262.z.object({
  inviteId: import_zod262.z.string()
}), action97 = async ({ request }) => {
  let userId = await requireUserId(request), formData = await request.formData(), submission = (0, import_zod261.parse)(formData, { schema: resendSchema });
  if (!submission.value || submission.intent !== "submit")
    return (0, import_server_runtime114.json)(submission);
  try {
    let invite = await resendInvite({
      inviteId: submission.value.inviteId
    });
    try {
      await scheduleEmail({
        email: "invite",
        to: invite.email,
        orgName: invite.organization.title,
        inviterName: invite.inviter.name ?? void 0,
        inviterEmail: invite.inviter.email,
        inviteLink: `${import_process.env.LOGIN_ORIGIN}${acceptInvitePath(invite.token)}`
      });
    } catch (error) {
      throw console.error("Failed to send invite email"), console.error(error), new Error("Failed to send invite email");
    }
    return redirectWithSuccessMessage(
      organizationTeamPath(invite.organization),
      request,
      `Invite resent to ${invite.email}`
    );
  } catch (error) {
    return (0, import_server_runtime114.json)({ errors: { body: error.message } }, { status: 400 });
  }
};

// app/routes/invite-revoke.tsx
var invite_revoke_exports = {};
__export(invite_revoke_exports, {
  action: () => action98,
  revokeSchema: () => revokeSchema
});
var import_zod263 = require("@conform-to/zod"), import_server_runtime115 = require("@remix-run/server-runtime"), import_zod264 = require("zod");
var revokeSchema = import_zod264.z.object({
  inviteId: import_zod264.z.string(),
  slug: import_zod264.z.string()
}), action98 = async ({ request }) => {
  let userId = await requireUserId(request), formData = await request.formData(), submission = (0, import_zod263.parse)(formData, { schema: revokeSchema });
  if (!submission.value || submission.intent !== "submit")
    return (0, import_server_runtime115.json)(submission);
  try {
    let { email, organization } = await revokeInvite({
      userId,
      slug: submission.value.slug,
      inviteId: submission.value.inviteId
    });
    return redirectWithSuccessMessage(
      organizationTeamPath(organization),
      request,
      `Invite revoked for ${email}`
    );
  } catch (error) {
    return (0, import_server_runtime115.json)({ errors: { body: error.message } }, { status: 400 });
  }
};

// app/routes/admin._index.tsx
var admin_index_exports = {};
__export(admin_index_exports, {
  SearchParams: () => SearchParams3,
  action: () => action99,
  default: () => AdminDashboardRoute,
  loader: () => loader145
});
var import_solid120 = require("@heroicons/react/20/solid"), import_react240 = require("@remix-run/react"), import_server_runtime116 = require("@remix-run/server-runtime"), import_remix_typedjson89 = require("remix-typedjson"), import_zod265 = require("zod");

// app/models/admin.server.ts
var pageSize2 = 20;
async function adminGetUsers(userId, { page, search }) {
  if (page = page || 1, search = search ? decodeURIComponent(search) : void 0, (await prisma.user.findUnique({
    where: {
      id: userId
    }
  }))?.admin !== !0)
    throw new Error("Unauthorized");
  let users = await prisma.user.findMany({
    select: {
      id: !0,
      name: !0,
      email: !0,
      admin: !0,
      createdAt: !0,
      displayName: !0,
      orgMemberships: {
        select: {
          organization: {
            select: {
              title: !0,
              slug: !0
            }
          }
        }
      }
    },
    where: search ? {
      OR: [
        {
          name: {
            contains: search,
            mode: "insensitive"
          }
        },
        {
          email: {
            contains: search,
            mode: "insensitive"
          }
        },
        {
          orgMemberships: {
            some: {
              organization: {
                title: {
                  contains: search,
                  mode: "insensitive"
                }
              }
            }
          }
        },
        {
          orgMemberships: {
            some: {
              organization: {
                slug: {
                  contains: search,
                  mode: "insensitive"
                }
              }
            }
          }
        }
      ]
    } : void 0,
    orderBy: {
      createdAt: "desc"
    },
    take: pageSize2,
    skip: (page - 1) * pageSize2
  }), totalUsers = await prisma.user.count();
  return {
    users,
    page,
    pageCount: Math.ceil(totalUsers / pageSize2),
    filters: {
      search
    }
  };
}
async function adminGetOrganizations(userId, { page, search }) {
  if (page = page || 1, search = search ? decodeURIComponent(search) : void 0, (await prisma.user.findUnique({
    where: {
      id: userId
    }
  }))?.admin !== !0)
    throw new Error("Unauthorized");
  let organizations = await prisma.organization.findMany({
    select: {
      id: !0,
      slug: !0,
      title: !0,
      v3Enabled: !0,
      members: {
        select: {
          user: {
            select: {
              email: !0
            }
          }
        }
      }
    },
    where: search ? {
      OR: [
        {
          members: {
            some: {
              user: {
                name: {
                  contains: search,
                  mode: "insensitive"
                }
              }
            }
          }
        },
        {
          members: {
            some: {
              user: {
                email: {
                  contains: search,
                  mode: "insensitive"
                }
              }
            }
          }
        },
        {
          slug: {
            contains: search,
            mode: "insensitive"
          }
        },
        {
          title: {
            contains: search,
            mode: "insensitive"
          }
        },
        {
          id: {
            contains: search,
            mode: "insensitive"
          }
        }
      ]
    } : void 0,
    orderBy: {
      createdAt: "desc"
    },
    take: pageSize2,
    skip: (page - 1) * pageSize2
  }), totalOrgs = await prisma.organization.count();
  return {
    organizations,
    page,
    pageCount: Math.ceil(totalOrgs / pageSize2),
    filters: {
      search
    }
  };
}
async function setV3Enabled(userId, id, v3Enabled) {
  if ((await prisma.user.findUnique({
    where: {
      id: userId
    }
  }))?.admin !== !0)
    throw new Error("Unauthorized");
  return prisma.organization.update({
    where: {
      id
    },
    data: {
      v3Enabled
    }
  });
}

// app/routes/admin._index.tsx
var import_jsx_runtime316 = require("react/jsx-runtime"), SearchParams3 = import_zod265.z.object({
  page: import_zod265.z.coerce.number().optional(),
  search: import_zod265.z.string().optional()
}), loader145 = async ({ request, params }) => {
  let userId = await requireUserId(request), searchParams = createSearchParams(request.url, SearchParams3);
  if (!searchParams.success)
    throw new Error(searchParams.error);
  let result = await adminGetUsers(userId, searchParams.params.getAll());
  return (0, import_remix_typedjson89.typedjson)(result);
}, FormSchema5 = import_zod265.z.object({ id: import_zod265.z.string() });
async function action99({ request }) {
  if (request.method.toLowerCase() !== "post")
    return new Response("Method not allowed", { status: 405 });
  let payload = Object.fromEntries(await request.formData()), { id } = FormSchema5.parse(payload), session = await setImpersonationId(id, request);
  return (0, import_server_runtime116.redirect)("/", {
    headers: { "Set-Cookie": await commitImpersonationSession(session) }
  });
}
function AdminDashboardRoute() {
  let user = useUser(), { users, filters, page, pageCount } = (0, import_remix_typedjson89.useTypedLoaderData)();
  return /* @__PURE__ */ (0, import_jsx_runtime316.jsx)(
    "main",
    {
      "aria-labelledby": "primary-heading",
      className: "flex h-full min-w-0 flex-1 flex-col overflow-y-auto px-4 pb-4 lg:order-last",
      children: /* @__PURE__ */ (0, import_jsx_runtime316.jsxs)("div", { className: " space-y-4", children: [
        /* @__PURE__ */ (0, import_jsx_runtime316.jsxs)(import_react240.Form, { className: "flex items-center gap-2", children: [
          /* @__PURE__ */ (0, import_jsx_runtime316.jsx)(
            Input,
            {
              placeholder: "Search users or orgs",
              variant: "small",
              icon: import_solid120.MagnifyingGlassIcon,
              fullWidth: !0,
              name: "search",
              defaultValue: filters.search
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime316.jsx)(Button, { type: "submit", variant: "tertiary/small", children: "Search" })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime316.jsxs)(Table, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime316.jsx)(TableHeader, { children: /* @__PURE__ */ (0, import_jsx_runtime316.jsxs)(TableRow, { children: [
            /* @__PURE__ */ (0, import_jsx_runtime316.jsx)(TableHeaderCell, { children: "Email" }),
            /* @__PURE__ */ (0, import_jsx_runtime316.jsx)(TableHeaderCell, { children: "Orgs" }),
            /* @__PURE__ */ (0, import_jsx_runtime316.jsx)(TableHeaderCell, { children: "GitHub" }),
            /* @__PURE__ */ (0, import_jsx_runtime316.jsx)(TableHeaderCell, { children: "id" }),
            /* @__PURE__ */ (0, import_jsx_runtime316.jsx)(TableHeaderCell, { children: "Created" }),
            /* @__PURE__ */ (0, import_jsx_runtime316.jsx)(TableHeaderCell, { children: "Admin?" }),
            /* @__PURE__ */ (0, import_jsx_runtime316.jsx)(TableHeaderCell, { children: "Actions" })
          ] }) }),
          /* @__PURE__ */ (0, import_jsx_runtime316.jsx)(TableBody, { children: users.length === 0 ? /* @__PURE__ */ (0, import_jsx_runtime316.jsx)(TableBlankRow, { colSpan: 9, children: /* @__PURE__ */ (0, import_jsx_runtime316.jsx)(Paragraph, { children: "No users found for search" }) }) : users.map((user2) => /* @__PURE__ */ (0, import_jsx_runtime316.jsxs)(TableRow, { children: [
            /* @__PURE__ */ (0, import_jsx_runtime316.jsx)(TableCell, { children: user2.email }),
            /* @__PURE__ */ (0, import_jsx_runtime316.jsx)(TableCell, { children: user2.orgMemberships.map((org) => /* @__PURE__ */ (0, import_jsx_runtime316.jsxs)(
              LinkButton,
              {
                variant: "minimal/small",
                to: `/admin/orgs?search=${encodeURIComponent(org.organization.slug)}`,
                children: [
                  org.organization.title,
                  " (",
                  org.organization.slug,
                  ")"
                ]
              },
              org.organization.slug
            )) }),
            /* @__PURE__ */ (0, import_jsx_runtime316.jsx)(TableCell, { children: /* @__PURE__ */ (0, import_jsx_runtime316.jsx)(
              "a",
              {
                href: `https://github.com/${user2.displayName}`,
                target: "_blank",
                className: "text-indigo-500 underline",
                rel: "noreferrer",
                children: user2.displayName
              }
            ) }),
            /* @__PURE__ */ (0, import_jsx_runtime316.jsx)(TableCell, { children: user2.id }),
            /* @__PURE__ */ (0, import_jsx_runtime316.jsx)(TableCell, { children: user2.createdAt.toISOString() }),
            /* @__PURE__ */ (0, import_jsx_runtime316.jsx)(TableCell, { children: user2.admin ? "\u2705" : "" }),
            /* @__PURE__ */ (0, import_jsx_runtime316.jsx)(TableCell, { isSticky: !0, children: /* @__PURE__ */ (0, import_jsx_runtime316.jsxs)(import_react240.Form, { method: "post", reloadDocument: !0, children: [
              /* @__PURE__ */ (0, import_jsx_runtime316.jsx)("input", { type: "hidden", name: "id", value: user2.id }),
              /* @__PURE__ */ (0, import_jsx_runtime316.jsx)(
                Button,
                {
                  type: "submit",
                  name: "action",
                  value: "impersonate",
                  className: "mr-2",
                  variant: "tertiary/small",
                  children: "Impersonate"
                }
              )
            ] }) })
          ] }, user2.id)) })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime316.jsx)(PaginationControls, { currentPage: page, totalPages: pageCount })
      ] })
    }
  );
}

// app/routes/api.v1.token.ts
var api_v1_token_exports = {};
__export(api_v1_token_exports, {
  action: () => action100
});
var import_server_runtime117 = require("@remix-run/server-runtime");
var import_zod_error6 = require("zod-error");
async function action100({ request }) {
  if (logger.info("Getting PersonalAccessToken from AuthorizationCode", { url: request.url }), request.method.toUpperCase() !== "POST")
    return { status: 405, body: "Method Not Allowed" };
  let anyBody = await request.json(), body = GetPersonalAccessTokenRequestSchema.safeParse(anyBody);
  if (!body.success)
    return (0, import_server_runtime117.json)({ error: (0, import_zod_error6.generateErrorMessage)(body.error.issues) }, { status: 422 });
  try {
    let responseJson = {
      token: (await getPersonalAccessTokenFromAuthorizationCode(
        body.data.authorizationCode
      )).token
    };
    return (0, import_server_runtime117.json)(responseJson);
  } catch (error) {
    return error instanceof Error ? (logger.error("Error getting PersonalAccessToken from AuthorizationCode", {
      url: request.url,
      error: error.message
    }), (0, import_server_runtime117.json)({ error: error.message }, { status: 400 })) : (0, import_server_runtime117.json)({ error: "Something went wrong" }, { status: 400 });
  }
}

// app/routes/login._index/route.tsx
var route_exports155 = {};
__export(route_exports155, {
  default: () => LoginPage,
  loader: () => loader146,
  meta: () => meta2
});
var import_react242 = require("@remix-run/react"), import_companyicons10 = require("@trigger.dev/companyicons"), import_remix_typedjson90 = require("remix-typedjson");

// app/components/LoginPageLayout.tsx
var import_react241 = require("react");

// app/assets/logos/ATAndTLogo.tsx
var import_jsx_runtime317 = require("react/jsx-runtime");
function ATAndTLogo({ className }) {
  return /* @__PURE__ */ (0, import_jsx_runtime317.jsxs)(
    "svg",
    {
      className,
      width: "66",
      height: "33",
      viewBox: "0 0 66 33",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime317.jsx)(
          "path",
          {
            d: "M57.0405 21.156C57.0064 21.1581 56.9723 21.1529 56.9403 21.1408C56.9084 21.1287 56.8794 21.1099 56.8552 21.0858C56.8311 21.0616 56.8123 21.0326 56.8002 21.0007C56.7881 20.9687 56.7829 20.9346 56.785 20.9005V13.4102H54.2407C54.2068 13.4114 54.173 13.4056 54.1415 13.3932C54.1099 13.3808 54.0813 13.362 54.0573 13.338C54.0333 13.3141 54.0145 13.2854 54.0021 13.2538C53.9897 13.2223 53.984 13.1885 53.9852 13.1546V12.1226C53.9839 12.0887 53.9896 12.0549 54.002 12.0233C54.0143 11.9916 54.0331 11.9629 54.0571 11.9389C54.0811 11.9148 54.1098 11.896 54.1414 11.8836C54.173 11.8711 54.2068 11.8653 54.2407 11.8666H61.0127C61.0468 11.8646 61.0809 11.8698 61.1129 11.882C61.1448 11.8942 61.1738 11.913 61.1979 11.9372C61.222 11.9614 61.2407 11.9904 61.2527 12.0224C61.2647 12.0544 61.2698 12.0886 61.2677 12.1226V13.1557C61.2689 13.1896 61.2632 13.2233 61.2508 13.2548C61.2384 13.2863 61.2197 13.315 61.1958 13.3389C61.1718 13.3629 61.1432 13.3817 61.1118 13.3941C61.0803 13.4066 61.0465 13.4124 61.0127 13.4112H58.4684V20.9005C58.4696 20.9344 58.4639 20.9681 58.4515 20.9997C58.4391 21.0313 58.4203 21.0599 58.3963 21.0839C58.3723 21.1079 58.3437 21.1266 58.3121 21.1391C58.2805 21.1515 58.2468 21.1572 58.2129 21.156H57.0394M37.5459 17.4163L36.2102 13.5845L34.8629 17.4163H37.5459ZM40.5081 20.8528C40.5662 21.0041 40.4735 21.1555 40.3107 21.1555H39.1087C39.0327 21.1609 38.9572 21.1394 38.8955 21.0947C38.8338 21.0499 38.7899 20.9848 38.7715 20.9109L38.0861 18.9369H34.3343L33.6489 20.9109C33.6305 20.9847 33.5867 21.0498 33.5251 21.0945C33.4635 21.1392 33.3881 21.1608 33.3122 21.1555H32.1744C32.0231 21.1555 31.9183 21.0041 31.977 20.8528L35.1245 12.0985C35.1826 11.9357 35.2873 11.866 35.4612 11.866H37.0184C37.1928 11.866 37.3091 11.9351 37.3672 12.0985L40.5147 20.8528M49.5381 19.9014C50.2811 19.9014 50.7812 19.5422 51.1875 18.9265L49.3067 16.9058C48.5862 17.3127 48.1212 17.7185 48.1212 18.5316C48.1212 19.3322 48.7716 19.9025 49.5387 19.9025M50.0613 13.1031C49.4581 13.1031 49.1088 13.4869 49.1088 13.9969C49.1088 14.3917 49.3172 14.7399 49.7942 15.2509C50.6189 14.7739 50.9677 14.4843 50.9677 13.9733C50.9677 13.4962 50.6661 13.096 50.0618 13.096M55.2025 20.8303C55.3533 20.9931 55.2606 21.1555 55.0742 21.1555H53.5937C53.511 21.1627 53.4278 21.1483 53.3524 21.1136C53.277 21.0788 53.212 21.025 53.1638 20.9575L52.2864 19.9826C51.6942 20.7722 50.869 21.3644 49.4981 21.3644C47.8021 21.3644 46.4658 20.3428 46.4658 18.5898C46.4658 17.2425 47.1863 16.5225 48.2786 15.9194C47.744 15.3041 47.5 14.6538 47.5 14.0852C47.5 12.6447 48.5106 11.6582 50.0316 11.6582C51.5889 11.6582 52.5408 12.5761 52.5408 13.9338C52.5408 15.0952 51.7046 15.7444 50.8218 16.2325L52.123 17.6379L52.8545 16.3602C52.9477 16.2094 53.0519 16.1519 53.2383 16.1519H54.3646C54.5511 16.1519 54.6553 16.2802 54.5401 16.477L53.2449 18.706L55.208 20.8314M43.6161 21.1566C43.65 21.1579 43.6838 21.1521 43.7155 21.1398C43.7471 21.1274 43.7758 21.1086 43.7998 21.0846C43.8239 21.0607 43.8427 21.032 43.8552 21.0004C43.8676 20.9688 43.8734 20.935 43.8721 20.901V13.4107H46.4164C46.4503 13.4119 46.4841 13.4062 46.5157 13.3938C46.5472 13.3813 46.5759 13.3626 46.5999 13.3386C46.6238 13.3146 46.6426 13.2859 46.655 13.2544C46.6674 13.2228 46.6732 13.1891 46.672 13.1552V12.1226C46.6733 12.0887 46.6676 12.0549 46.6552 12.0233C46.6428 11.9916 46.624 11.9629 46.6001 11.9389C46.5761 11.9148 46.5474 11.896 46.5158 11.8836C46.4842 11.8711 46.4504 11.8653 46.4164 11.8666H39.6406C39.6067 11.8653 39.5728 11.8711 39.5412 11.8836C39.5097 11.896 39.481 11.9148 39.457 11.9389C39.433 11.9629 39.4142 11.9916 39.4019 12.0233C39.3895 12.0549 39.3838 12.0887 39.3851 12.1226V13.1557C39.3838 13.1896 39.3896 13.2234 39.402 13.2549C39.4144 13.2865 39.4332 13.3152 39.4572 13.3391C39.4812 13.3631 39.5098 13.3819 39.5414 13.3943C39.5729 13.4067 39.6067 13.4125 39.6406 13.4112H42.1849V20.9005C42.1837 20.9344 42.1894 20.9681 42.2018 20.9997C42.2143 21.0313 42.233 21.0599 42.257 21.0839C42.281 21.1079 42.3096 21.1266 42.3412 21.1391C42.3728 21.1515 42.4065 21.1572 42.4404 21.156L43.6161 21.1566Z",
            fill: "currentColor"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime317.jsx)(
          "path",
          {
            d: "M9.2351 25.6737C11.2728 27.2567 13.7799 28.1157 16.3602 28.1149C19.296 28.1149 21.9725 27.0248 24.0151 25.2361C24.0397 25.2142 24.0277 25.1999 24.003 25.2142C23.0862 25.8261 20.4739 27.1624 16.3602 27.1624C12.7851 27.1624 10.5259 26.3646 9.2499 25.6529C9.22523 25.6408 9.217 25.6583 9.23455 25.6748M17.1487 26.2686C20.0083 26.2686 23.1503 25.4889 25.0295 23.9464C25.5438 23.5258 26.033 22.9665 26.4716 22.2148C26.74 21.7483 26.9742 21.263 27.1724 20.7628C27.1812 20.7381 27.1669 20.726 27.1477 20.754C25.4002 23.3306 20.339 24.9296 15.1188 24.9296C11.4252 24.9296 7.45135 23.7485 5.89571 21.4931C5.88035 21.4723 5.865 21.4811 5.87377 21.5052C7.3181 24.5863 11.7152 26.2686 17.1476 26.2686M14.0232 21.1581C8.07591 21.1581 5.2717 18.389 4.76338 16.4983C4.7579 16.4709 4.73926 16.4764 4.73926 16.5016C4.73926 17.1377 4.80287 17.9591 4.91253 18.5041C4.96463 18.7695 5.1867 19.1857 5.49706 19.5186C6.9392 21.0166 10.5286 23.1212 16.7468 23.1212C25.2187 23.1212 27.1554 20.2994 27.5508 19.3705C27.8337 18.7125 27.9801 17.5073 27.9801 16.5C27.9803 16.29 27.9751 16.0801 27.9648 15.8705C27.9648 15.8392 27.9467 15.8376 27.9406 15.8672C27.5173 18.1373 20.2792 21.157 14.0249 21.157M5.85458 11.5172C5.49236 12.2876 5.21385 13.0946 5.02385 13.9244C4.96901 14.1766 4.99533 14.2989 5.07868 14.4876C5.79152 15.9999 9.39686 18.4192 17.8068 18.4192C22.9376 18.4192 26.9235 17.158 27.5689 14.8582C27.6878 14.4349 27.6939 13.9875 27.5414 13.3854C27.3769 12.712 27.0512 11.9268 26.7803 11.3757C26.7716 11.3576 26.7557 11.3604 26.7584 11.3812C26.8588 14.3982 18.4456 16.3426 14.2003 16.3426C9.60194 16.3426 5.76685 14.5111 5.76685 12.1971C5.76685 11.9751 5.81291 11.7585 5.87652 11.521C5.882 11.4991 5.86445 11.4964 5.85458 11.5156M24.0348 7.81261C24.0859 7.89265 24.1114 7.9864 24.1077 8.0813C24.1077 9.37209 20.158 11.6548 13.8702 11.6548C9.25045 11.6548 8.38572 9.94127 8.38572 8.85117C8.38572 8.46733 8.53487 8.0632 8.86442 7.65798C8.88252 7.63385 8.86716 7.62508 8.84633 7.64262C8.24498 8.15186 7.6971 8.72105 7.21118 9.34138C6.97978 9.63365 6.83666 9.89246 6.83666 10.0476C6.83666 12.3068 12.4999 13.9441 17.7958 13.9441C23.4437 13.9441 25.9562 12.1017 25.9562 10.4896C25.9562 9.91111 25.7369 9.57388 25.1556 8.91861C24.7816 8.49255 24.428 8.15094 24.0589 7.80438C24.0408 7.78958 24.0282 7.80164 24.0408 7.81974M22.3108 6.52949C20.5693 5.48545 18.547 4.8916 16.3668 4.8916C14.1713 4.8916 12.0887 5.50574 10.3351 6.57775C9.81086 6.90017 9.51585 7.15899 9.51585 7.49128C9.51585 8.47117 11.8057 9.52453 15.8673 9.52453C19.8866 9.52453 23.005 8.37082 23.005 7.25988C23.005 6.99503 22.7731 6.80915 22.3042 6.52949",
            fill: "currentColor"
          }
        )
      ]
    }
  );
}

// app/assets/logos/AppsmithLogo.tsx
var import_jsx_runtime318 = require("react/jsx-runtime");
function AppsmithLogo({ className }) {
  return /* @__PURE__ */ (0, import_jsx_runtime318.jsxs)(
    "svg",
    {
      className,
      width: "97",
      height: "17",
      viewBox: "0 0 97 17",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime318.jsxs)("g", { clipPath: "url(#clip0_9632_116882)", children: [
          /* @__PURE__ */ (0, import_jsx_runtime318.jsx)(
            "path",
            {
              d: "M62.9711 2.65504C62.7384 2.43634 62.6094 2.12979 62.616 1.81016C62.6113 1.48865 62.7394 1.17929 62.9711 0.956854C63.1973 0.726004 63.5076 0.597963 63.831 0.60357C64.1674 0.60357 64.4516 0.721331 64.6815 0.956854C64.9086 1.1821 65.0348 1.49052 65.0292 1.81016C65.0292 2.14381 64.9105 2.42419 64.674 2.65504C64.4506 2.87842 64.1469 3.00272 63.831 2.99898C63.5095 3.00459 63.1992 2.88122 62.9711 2.65504ZM7.39816 12.9676C7.29349 12.7834 7.21124 12.4217 7.15516 11.8825C6.55234 12.7442 5.59062 13.175 4.27095 13.175C3.28681 13.175 2.50173 12.9395 1.91666 12.4675C1.3316 11.9956 1.03906 11.3413 1.03906 10.5011C1.03906 8.87956 2.1849 7.9543 4.47844 7.72532L5.83362 7.60382C6.28597 7.54681 6.60935 7.44119 6.80562 7.28605C7.00282 7.12997 7.10189 6.89725 7.10189 6.58789C7.10189 6.20751 6.97759 5.92899 6.72805 5.75141C6.47944 5.5729 6.0598 5.48318 5.46819 5.48318C4.83079 5.48318 4.37469 5.58973 4.09618 5.80282C3.8186 6.01498 3.65691 6.38041 3.61018 6.89631H1.45496C1.58301 4.87475 2.92698 3.8635 5.48688 3.8635C7.97669 3.8635 9.22159 4.75419 9.22159 6.53649V11.2796C9.22159 12.061 9.34309 12.6246 9.58609 12.9685H7.3991L7.39816 12.9676ZM6.45888 11.0609C6.88787 10.6871 7.10189 10.1497 7.10189 9.44874V8.63843C6.89254 8.82162 6.55141 8.94405 6.07662 9.00013L4.89527 9.13845C4.31581 9.20761 3.90178 9.3422 3.65317 9.54407C3.40457 9.74501 3.27933 10.0357 3.27933 10.4151C3.27933 10.7946 3.40924 11.0899 3.67 11.303C3.93169 11.517 4.30366 11.6227 4.79153 11.6227C5.47567 11.6227 6.03083 11.4357 6.45888 11.0619V11.0609ZM20.0809 5.12055C20.7986 5.97105 21.1575 7.10473 21.1575 8.51787C21.1575 9.92165 20.7986 11.0479 20.0809 11.8993C19.3519 12.7498 18.3724 13.175 17.1452 13.175C15.9284 13.175 15.0022 12.7208 14.3657 11.8133V16.349H12.175V4.06818H14.2778V5.34486C14.9255 4.35604 15.8816 3.8607 17.1434 3.8607C18.3724 3.8607 19.3509 4.28127 20.0809 5.12055ZM16.6228 11.3806C17.3406 11.3806 17.9088 11.1217 18.3256 10.6049C18.7313 10.0983 18.9331 9.38052 18.9331 8.44871C18.9331 7.53933 18.7331 6.84771 18.3341 6.37013C17.934 5.89347 17.3639 5.65422 16.6237 5.65422C15.8929 5.65422 15.3246 5.90189 14.9209 6.39536C14.5152 6.89071 14.3124 7.59727 14.3124 8.51693C14.3124 9.44874 14.5208 10.1553 14.9377 10.6385C15.3312 11.1338 15.8929 11.3806 16.6228 11.3806ZM31.3355 5.12055C32.0523 5.97105 32.4121 7.10473 32.4121 8.51787C32.4121 9.92165 32.0523 11.0479 31.3355 11.8993C30.6055 12.7498 29.627 13.175 28.3989 13.175C27.183 13.175 26.2558 12.7208 25.6203 11.8133V16.349H23.4305V4.06818H25.5334V5.34486C26.1811 4.35604 27.1362 3.8607 28.3998 3.8607C29.627 3.8607 30.6055 4.28127 31.3345 5.12055H31.3355ZM27.8774 11.3806C28.5952 11.3806 29.1634 11.1217 29.5793 10.6049C29.9849 10.0983 30.1877 9.38052 30.1877 8.44871C30.1877 7.53933 29.9877 6.84771 29.5877 6.37013C29.1886 5.89347 28.6176 5.65422 27.8774 5.65422C27.1484 5.65422 26.5792 5.90189 26.1745 6.39536C25.7698 6.89071 25.567 7.59727 25.567 8.51693C25.567 9.44874 25.7754 10.1553 26.1923 10.6385C26.5848 11.1338 27.1475 11.3806 27.8774 11.3806ZM34.3926 10.1385H36.5291C36.588 10.6918 36.7693 11.0824 37.0768 11.3124C37.3843 11.5423 37.8675 11.6572 38.5282 11.6572C39.7096 11.6572 40.3003 11.3002 40.3003 10.588C40.3003 10.2656 40.1731 10.0189 39.918 9.84595C39.6628 9.67398 39.2058 9.53099 38.546 9.4151L37.5217 9.24219C35.5636 8.92068 34.5851 8.02439 34.5851 6.55238C34.5851 5.71403 34.9094 5.05419 35.558 4.57848C36.2066 4.10182 37.1216 3.86256 38.303 3.86256C40.8629 3.86256 42.1835 4.86914 42.2657 6.88043H40.1974C40.1741 6.35144 40.0068 5.97479 39.6928 5.75141C39.3806 5.52711 38.917 5.41496 38.303 5.41496C37.2618 5.41496 36.7394 5.75983 36.7394 6.45051C36.7394 6.74958 36.8543 6.98136 37.0871 7.14773C37.3188 7.31409 37.7002 7.444 38.2329 7.53559L39.3619 7.70849C40.4507 7.90383 41.2414 8.21412 41.733 8.6403C42.2256 9.06555 42.4714 9.65716 42.4714 10.4161C42.4714 11.3133 42.1246 12.003 41.4283 12.4862C40.7339 12.9694 39.7554 13.2106 38.4927 13.2106C35.8758 13.2096 34.5075 12.1862 34.3926 10.1394V10.1385ZM57.456 4.72428C58.0065 5.29906 58.2822 6.08601 58.2822 7.08604V12.9666H56.0924V7.43091C56.0924 6.30377 55.5765 5.74113 54.5456 5.74113C53.9895 5.74113 53.5418 5.94021 53.1998 6.33648C52.8577 6.73369 52.6867 7.31035 52.6867 8.07019V12.9676H50.5146V7.43091C50.5146 6.30377 49.9941 5.74113 48.951 5.74113C48.4071 5.74113 47.9641 5.94021 47.6211 6.33648C47.279 6.73369 47.1089 7.31035 47.1089 8.07019V12.9676H44.92V4.06818H47.0397V5.34486C47.6528 4.35604 48.5052 3.8607 49.5931 3.8607C50.9604 3.8607 51.8866 4.41305 52.3736 5.51683C53.0456 4.41399 53.9718 3.8607 55.1531 3.8607C56.1391 3.8607 56.9064 4.14949 57.456 4.72428ZM75.0538 5.72431H72.2528V10.5357C72.2528 10.8236 72.3304 11.0254 72.4864 11.1395C72.6434 11.2544 72.907 11.3124 73.278 11.3124H74.8762V12.9676C74.4024 13.0143 73.1668 13.0367 72.878 13.0367C71.906 13.0367 71.1957 12.8563 70.7499 12.4937C70.3041 12.1301 70.0807 11.5535 70.0807 10.76V5.72431H68.0508V4.06818H70.0826V1.09891H72.2546V4.07005H75.0566V5.72431H75.0538ZM84.8457 4.69717C85.4084 5.25607 85.6888 6.04488 85.6888 7.06922V12.9676H83.499V7.43091C83.499 6.30377 82.9373 5.74113 81.8139 5.74113C81.2578 5.74113 80.7858 5.93927 80.3979 6.33648C80.011 6.73369 79.8166 7.28137 79.8166 7.98327V12.9666H77.6277V1.09705H79.8166V5.25794C80.5007 4.32613 81.4101 3.86163 82.5438 3.86163C83.5158 3.86163 84.284 4.14108 84.8457 4.69717Z",
              fill: "currentColor"
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime318.jsx)(
            "path",
            {
              d: "M64.9418 11.3125V4.06921H60.3379V5.72441H62.7529V11.3125H60.3379V12.9677H67.3568V11.3125H64.9418Z",
              fill: "currentColor"
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime318.jsx)("path", { d: "M96.0026 14.2434H87.4546V15.8995H96.0026V14.2434Z", fill: "currentColor" })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime318.jsx)("defs", { children: /* @__PURE__ */ (0, import_jsx_runtime318.jsx)("clipPath", { id: "clip0_9632_116882", children: /* @__PURE__ */ (0, import_jsx_runtime318.jsx)(
          "rect",
          {
            width: "95.5377",
            height: "15.923",
            fill: "currentColor",
            transform: "translate(0.694824 0.538574)"
          }
        ) }) })
      ]
    }
  );
}

// app/assets/logos/CalComLogo.tsx
var import_jsx_runtime319 = require("react/jsx-runtime");
function CalComLogo({ className }) {
  return /* @__PURE__ */ (0, import_jsx_runtime319.jsxs)(
    "svg",
    {
      className,
      width: "64",
      height: "15",
      viewBox: "0 0 64 15",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime319.jsxs)("g", { clipPath: "url(#clip0_9632_116886)", children: [
          /* @__PURE__ */ (0, import_jsx_runtime319.jsx)(
            "path",
            {
              d: "M6.38629 13.7111C2.75645 13.7111 0.0224609 10.8382 0.0224609 7.29138C0.0224609 3.73276 2.61685 0.836182 6.38629 0.836182C8.38733 0.836182 9.77174 1.45096 10.8537 2.85787L9.1086 4.31207C8.37568 3.53177 7.49149 3.14162 6.38629 3.14162C3.93149 3.14162 2.58194 5.02143 2.58194 7.29138C2.58194 9.56139 4.05946 11.4057 6.38629 11.4057C7.47984 11.4057 8.41061 11.0156 9.14353 10.2353L10.8654 11.7486C9.82995 13.0963 8.41061 13.7111 6.38629 13.7111Z",
              fill: "currentColor"
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime319.jsx)(
            "path",
            {
              d: "M18.3806 4.26438H20.7307V13.4861H18.3806V12.1383C17.892 13.096 17.0776 13.7344 15.5187 13.7344C13.029 13.7344 11.0396 11.5709 11.0396 8.91074C11.0396 6.2506 13.029 4.08704 15.5187 4.08704C17.066 4.08704 17.892 4.72547 18.3806 5.68311V4.26438ZM18.4504 8.91074C18.4504 7.46837 17.4615 6.27425 15.9026 6.27425C14.4018 6.27425 13.4245 7.48014 13.4245 8.91074C13.4245 10.3058 14.4018 11.5472 15.9026 11.5472C17.4499 11.5472 18.4504 10.3413 18.4504 8.91074Z",
              fill: "currentColor"
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime319.jsx)("path", { d: "M22.395 0.540283H24.7451V13.4744H22.395V0.540283Z", fill: "currentColor" }),
          /* @__PURE__ */ (0, import_jsx_runtime319.jsx)(
            "path",
            {
              d: "M25.791 12.2569C25.791 11.5003 26.396 10.8618 27.222 10.8618C28.048 10.8618 28.6298 11.5003 28.6298 12.2569C28.6298 13.0372 28.0364 13.6756 27.222 13.6756C26.4076 13.6756 25.791 13.0372 25.791 12.2569Z",
              fill: "currentColor"
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime319.jsx)(
            "path",
            {
              d: "M37.6222 11.9965C36.7496 13.0605 35.4234 13.7344 33.8527 13.7344C31.0489 13.7344 28.9897 11.5709 28.9897 8.91074C28.9897 6.2506 31.0489 4.08704 33.8527 4.08704C35.3651 4.08704 36.6798 4.72547 37.5524 5.7304L35.7375 7.25553C35.2837 6.68804 34.6904 6.26242 33.8527 6.26242C32.352 6.26242 31.3747 7.46837 31.3747 8.8989C31.3747 10.3294 32.352 11.5354 33.8527 11.5354C34.7602 11.5354 35.3884 11.0625 35.8538 10.424L37.6222 11.9965Z",
              fill: "currentColor"
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime319.jsx)(
            "path",
            {
              d: "M37.8208 8.91074C37.8208 6.2506 39.88 4.08704 42.6838 4.08704C45.4876 4.08704 47.5468 6.2506 47.5468 8.91074C47.5468 11.5709 45.4876 13.7344 42.6838 13.7344C39.88 13.7225 37.8208 11.5709 37.8208 8.91074ZM45.1618 8.91074C45.1618 7.46837 44.1846 6.27425 42.6838 6.27425C41.183 6.26242 40.2058 7.46837 40.2058 8.91074C40.2058 10.3413 41.183 11.5472 42.6838 11.5472C44.1846 11.5472 45.1618 10.3413 45.1618 8.91074Z",
              fill: "currentColor"
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime319.jsx)(
            "path",
            {
              d: "M63.4389 7.84684V13.4745H61.089V8.42614C61.089 6.83009 60.3444 6.14437 59.2276 6.14437C58.1805 6.14437 57.4359 6.66457 57.4359 8.42614V13.4745H55.0859V8.42614C55.0859 6.83009 54.3296 6.14437 53.2244 6.14437C52.1774 6.14437 51.2582 6.66457 51.2582 8.42614V13.4745H48.9082V4.25273H51.2582V5.52958C51.7469 4.53647 52.6311 4.03992 53.9923 4.03992C55.2837 4.03992 56.3656 4.67834 56.9589 5.75421C57.5523 4.6547 58.4248 4.03992 60.007 4.03992C61.9383 4.05174 63.4389 5.51776 63.4389 7.84684Z",
              fill: "currentColor"
            }
          )
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime319.jsx)("defs", { children: /* @__PURE__ */ (0, import_jsx_runtime319.jsx)("clipPath", { id: "clip0_9632_116886", children: /* @__PURE__ */ (0, import_jsx_runtime319.jsx)(
          "rect",
          {
            width: "63.9027",
            height: "13.9194",
            fill: "currentColor",
            transform: "translate(0.0224609 0.540283)"
          }
        ) }) })
      ]
    }
  );
}

// app/assets/logos/OktaLogo.tsx
var import_jsx_runtime320 = require("react/jsx-runtime");
function OktaLogo({ className }) {
  return /* @__PURE__ */ (0, import_jsx_runtime320.jsxs)(
    "svg",
    {
      className,
      width: "66",
      height: "23",
      viewBox: "0 0 66 23",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime320.jsxs)("g", { clipPath: "url(#clip0_9632_116875)", children: [
          /* @__PURE__ */ (0, import_jsx_runtime320.jsx)(
            "path",
            {
              d: "M59.194 14.888C57.3715 14.888 56.0867 13.4659 56.0867 11.5956C56.0867 9.72523 57.3715 8.30307 59.194 8.30307C61.0165 8.30307 62.2654 9.72523 62.2654 11.5956C62.2654 13.4659 60.9986 14.888 59.194 14.888ZM58.9012 16.848C60.3712 16.848 61.62 16.2744 62.4088 15.0733C62.5582 16.2385 63.4007 16.6628 64.4644 16.6628H65.3129V14.8163H64.9484C64.3448 14.8163 64.1955 14.5235 64.1955 13.8364V6.53433H62.2475V8.03417C61.5842 6.98249 60.3353 6.34909 58.9012 6.34909C56.3437 6.34909 53.9953 8.49428 53.9953 11.5956C53.9953 14.6968 56.3497 16.842 58.9012 16.842V16.848ZM48.8684 14.3144C48.8684 15.9756 49.8961 16.6628 51.1271 16.6628H53.4994V14.8163H51.7724C51.0554 14.8163 50.906 14.5415 50.906 13.8364V8.38075H53.4994V6.53433H50.906V3.13428H48.8684V14.3144ZM39.5884 16.6628H41.6261V12.3186H42.3073L45.779 16.6628H48.3545L43.9266 11.1534L47.3267 6.53433H45.0321L42.2535 10.4363H41.6261V3.13428H39.5884V16.6628ZM32.9736 6.34909C30.1233 6.34909 27.7749 8.49428 27.7749 11.5956C27.7749 14.6968 30.1292 16.842 32.9736 16.842C35.8179 16.842 38.1722 14.6968 38.1722 11.5956C38.1722 8.49428 35.8179 6.34909 32.9736 6.34909ZM32.9736 14.888C31.151 14.888 29.8663 13.4659 29.8663 11.5956C29.8663 9.72523 31.151 8.30307 32.9736 8.30307C34.7961 8.30307 36.0808 9.72523 36.0808 11.5956C36.0808 13.4659 34.7961 14.888 32.9736 14.888Z",
              fill: "currentColor"
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime320.jsx)(
            "path",
            {
              fillRule: "evenodd",
              clipRule: "evenodd",
              d: "M11.8862 0.899753L11.444 6.34939C11.2349 6.32549 11.0257 6.31354 10.8106 6.31354C10.5417 6.31354 10.2788 6.33147 10.0219 6.37329L9.7709 3.73213C9.76492 3.64847 9.83065 3.57677 9.91431 3.57677H10.3625L10.1474 0.905729C10.1414 0.822072 10.2071 0.750366 10.2848 0.750366H11.7488C11.8324 0.750366 11.8982 0.822072 11.8862 0.905729V0.899753ZM8.19337 1.16865C8.16947 1.09097 8.08581 1.04316 8.00813 1.07304L6.63377 1.57498C6.55609 1.60486 6.52023 1.69449 6.55609 1.7662L7.6735 4.20419L7.24924 4.35956C7.17156 4.38943 7.13571 4.47907 7.17156 4.55077L8.31288 6.94694C8.72519 6.71987 9.17335 6.54658 9.64541 6.43902L8.19934 1.16865H8.19337ZM4.8232 2.68642L7.98423 7.14413C7.58387 7.40705 7.21937 7.71778 6.90864 8.07631L5.01441 6.21196C4.95466 6.1522 4.96063 6.05659 5.02039 6.00281L5.36697 5.71599L3.48469 3.80981C3.42494 3.75006 3.43091 3.65445 3.49664 3.60067L4.61406 2.66252C4.67979 2.60874 4.76942 2.62069 4.81722 2.68642H4.8232ZM2.17008 5.26783C2.10435 5.22003 2.00875 5.24393 1.96692 5.31563L1.23791 6.58244C1.19608 6.65414 1.22596 6.74377 1.29766 6.77963L3.72371 7.92692L3.49664 8.31532C3.45481 8.38703 3.48469 8.48264 3.56237 8.51252L5.97647 9.61798C6.14975 9.16982 6.3828 8.75154 6.66962 8.37508L2.17008 5.26783ZM0.383416 8.70971C0.395367 8.62605 0.479023 8.57825 0.556705 8.59617L5.845 9.97651C5.70757 10.4247 5.62989 10.8967 5.61794 11.3867L2.9708 11.1716C2.88714 11.1656 2.82739 11.0879 2.84531 11.0043L2.923 10.5621L0.251955 10.3111C0.168298 10.3052 0.114519 10.2275 0.12647 10.1438L0.37744 8.70373L0.383416 8.70971ZM0.186225 12.283C0.102568 12.289 0.0487887 12.3667 0.0607397 12.4504L0.317685 13.8904C0.329636 13.9741 0.413293 14.0219 0.490974 14.004L3.08433 13.3288L3.16201 13.7709C3.17396 13.8546 3.25762 13.9024 3.3353 13.8845L5.89281 13.1794C5.74342 12.7372 5.64781 12.2651 5.62391 11.7811L0.180249 12.283H0.186225ZM1.03474 16.0715C0.992915 15.9998 1.02279 15.9102 1.0945 15.8743L6.03024 13.5319C6.21548 13.9741 6.46645 14.3864 6.76523 14.7569L4.60211 16.2986C4.53637 16.3464 4.44077 16.3284 4.39894 16.2567L4.17187 15.8624L1.96692 17.3861C1.90119 17.4339 1.80558 17.41 1.76375 17.3383L1.02877 16.0715H1.03474ZM7.0162 15.0437L3.17396 18.9338C3.11421 18.9935 3.12019 19.0891 3.18592 19.1429L4.30931 20.081C4.37504 20.1348 4.46467 20.1229 4.51247 20.0571L6.0661 17.8701L6.41268 18.1629C6.47841 18.2167 6.57401 18.2047 6.62182 18.133L8.12764 15.946C7.72131 15.695 7.34485 15.3903 7.02217 15.0437H7.0162ZM6.25731 21.2881C6.17963 21.2582 6.14378 21.1686 6.17963 21.0969L8.45629 16.1253C8.87457 16.3404 9.32871 16.5017 9.80077 16.5914L9.13152 19.1608C9.11359 19.2385 9.02396 19.2863 8.94628 19.2564L8.52202 19.1011L7.81094 21.6885C7.78704 21.7661 7.70338 21.8139 7.6257 21.7841L6.25134 21.2821L6.25731 21.2881ZM10.1772 16.6571L9.73504 22.1067C9.72907 22.1904 9.7948 22.2621 9.87248 22.2621H11.3365C11.4201 22.2621 11.4859 22.1904 11.4739 22.1067L11.2588 19.4357H11.707C11.7906 19.4357 11.8563 19.364 11.8504 19.2803L11.5994 16.6392C11.3424 16.681 11.0795 16.6989 10.8106 16.6989C10.5955 16.6989 10.3864 16.687 10.1772 16.6571ZM15.4476 1.90363C15.4835 1.82595 15.4476 1.7423 15.3699 1.71242L13.9956 1.21048C13.9179 1.1806 13.8342 1.2284 13.8103 1.30609L13.0992 3.89347L12.675 3.73811C12.5973 3.70823 12.5136 3.75603 12.4897 3.83371L11.8205 6.40317C12.2985 6.49878 12.7467 6.66012 13.165 6.86926L15.4476 1.90363ZM18.4473 4.07273L14.6051 7.96277C14.2824 7.61619 13.9119 7.31144 13.4996 7.06047L15.0054 4.87345C15.0532 4.80772 15.1488 4.78979 15.2146 4.84357L15.5611 5.13637L17.1148 2.94934C17.1626 2.88361 17.2582 2.87166 17.3179 2.92544L18.4413 3.86359C18.507 3.91737 18.507 4.01298 18.4533 4.07273H18.4473ZM20.5268 7.13218C20.6044 7.09633 20.6283 7.00669 20.5865 6.93499L19.8515 5.66819C19.8097 5.59648 19.7141 5.57855 19.6484 5.62038L17.4434 7.14413L17.2163 6.75572C17.1745 6.68402 17.0789 6.66012 17.0132 6.7139L14.8501 8.25557C15.1488 8.62605 15.3938 9.03836 15.585 9.48054L20.5208 7.13815L20.5268 7.13218ZM21.3036 9.11604L21.5545 10.5561C21.5665 10.6398 21.5127 10.7115 21.4291 10.7234L15.9854 11.2314C15.9615 10.7414 15.8659 10.2753 15.7165 9.8331L18.274 9.12799C18.3517 9.10409 18.4353 9.15787 18.4473 9.24152L18.525 9.68371L21.1183 9.00848C21.196 8.99055 21.2797 9.03836 21.2916 9.12201L21.3036 9.11604ZM21.0586 14.4043C21.1363 14.4223 21.2199 14.3745 21.2319 14.2908L21.4828 12.8507C21.4948 12.7671 21.441 12.6954 21.3574 12.6834L18.6863 12.4324L18.764 11.9902C18.7759 11.9066 18.7222 11.8349 18.6385 11.8229L15.9914 11.6078C15.9794 12.0978 15.9017 12.5699 15.7643 13.018L21.0526 14.3984L21.0586 14.4043ZM19.6484 17.6909C19.6065 17.7626 19.5109 17.7805 19.4452 17.7387L14.9457 14.6314C15.2325 14.255 15.4655 13.8367 15.6388 13.3885L18.0529 14.494C18.1306 14.5298 18.1605 14.6195 18.1186 14.6912L17.8916 15.0796L20.3176 16.2269C20.3893 16.2627 20.4192 16.3523 20.3774 16.4241L19.6484 17.6909ZM13.6311 15.8564L16.7921 20.3141C16.8399 20.3798 16.9355 20.3918 16.9953 20.338L18.1127 19.3998C18.1784 19.3461 18.1784 19.2505 18.1246 19.1907L16.2423 17.2845L16.5889 16.9977C16.6546 16.9439 16.6546 16.8483 16.5949 16.7886L14.7007 14.9242C14.384 15.2827 14.0254 15.5994 13.6251 15.8564H13.6311ZM13.6012 21.9275C13.5235 21.9573 13.4398 21.9095 13.4159 21.8319L11.9699 16.5615C12.4419 16.4539 12.8901 16.2806 13.3024 16.0536L14.4437 18.4497C14.4796 18.5274 14.4437 18.6171 14.366 18.641L13.9418 18.7963L15.0592 21.2343C15.095 21.312 15.0592 21.3957 14.9815 21.4255L13.6072 21.9275H13.6012Z",
              fill: "currentColor"
            }
          )
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime320.jsx)("defs", { children: /* @__PURE__ */ (0, import_jsx_runtime320.jsx)("clipPath", { id: "clip0_9632_116875", children: /* @__PURE__ */ (0, import_jsx_runtime320.jsx)(
          "rect",
          {
            width: "65.2582",
            height: "21.5117",
            fill: "currentColor",
            transform: "translate(0.0551758 0.744141)"
          }
        ) }) })
      ]
    }
  );
}

// app/assets/logos/ShopifyLogo.tsx
var import_jsx_runtime321 = require("react/jsx-runtime");
function ShopifyLogo({ className }) {
  return /* @__PURE__ */ (0, import_jsx_runtime321.jsxs)(
    "svg",
    {
      className,
      width: "85",
      height: "25",
      viewBox: "0 0 85 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime321.jsxs)("g", { clipPath: "url(#clip0_9632_116870)", children: [
          /* @__PURE__ */ (0, import_jsx_runtime321.jsx)(
            "path",
            {
              fillRule: "evenodd",
              clipRule: "evenodd",
              d: "M10.6613 1.00225C10.5632 0.945637 10.4859 0.900988 10.3639 0.900988C8.19769 0.900988 7.03127 3.73373 6.44806 5.40004L8.28101 4.90015C8.7809 2.5673 9.78069 1.4842 10.7805 1.06762C10.7358 1.0453 10.6972 1.02297 10.6613 1.00225ZM11.6136 3.73373C11.6136 2.81725 11.447 2.23404 11.2804 1.73415C10.5305 2.06741 9.69738 2.81725 9.19748 4.56688L11.6136 3.90036V3.73373ZM12.3635 3.56709L13.4466 3.23383C13.1966 2.40067 12.6967 1.65083 12.1135 1.4842C12.2802 1.98409 12.3635 2.5673 12.3635 3.31715V3.56709ZM18.6955 4.40025C18.7788 4.40025 18.8621 4.48357 18.8621 4.56688C18.8621 4.73352 21.3616 21.7299 21.3616 21.7299L14.1964 23.3129L0.949219 20.8135C0.949219 20.8135 2.61553 7.64957 2.69885 7.23299C2.70036 7.22241 2.70184 7.212 2.7033 7.20175C2.78239 6.64673 2.79425 6.56344 3.44869 6.39983C3.64023 6.33599 3.82633 6.27214 4.00838 6.20968C4.53904 6.02763 5.03532 5.85737 5.53159 5.7333C6.03148 3.81704 7.44785 0.0678302 10.4472 0.151146C10.8638 0.151146 11.3637 0.317778 11.697 0.817672H11.7803C13.03 0.817672 13.7799 1.90078 14.1964 3.0672C14.613 2.90057 14.863 2.81725 14.863 2.81725C14.8796 2.81725 14.9029 2.81392 14.9309 2.80992C15.0429 2.79392 15.2295 2.76726 15.3629 2.90057C15.5295 2.98388 16.7792 4.23362 16.7792 4.23362C16.7792 4.23362 18.5289 4.40025 18.6955 4.40025ZM10.8622 11.0656L11.7786 8.39946C11.7786 8.39946 11.1954 7.98288 9.77906 8.06619C6.69638 8.06619 5.11338 10.1491 5.11338 12.3153C5.11338 13.764 5.92592 14.4263 6.63951 15.008C7.19816 15.4633 7.69617 15.8693 7.69617 16.5644C7.69617 16.981 7.44622 17.4809 6.7797 17.4809C5.77991 17.4809 4.61348 16.4811 4.61348 16.4811L4.03027 18.4807C4.03027 18.4807 5.19669 19.897 7.44622 19.897C9.36249 19.897 10.7789 18.4807 10.7789 16.2311C10.7789 14.5056 9.60415 13.6457 8.68583 12.9735C8.09656 12.5421 7.61285 12.188 7.61285 11.7321C7.61285 11.4821 7.69617 10.649 9.11254 10.649C10.1123 10.649 10.8622 11.0656 10.8622 11.0656Z",
              fill: "currentColor"
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime321.jsx)(
            "path",
            {
              d: "M18.6111 4.40038C18.5277 4.40038 16.7781 4.23375 16.7781 4.23375C16.7781 4.23375 15.5284 2.98401 15.3617 2.9007C15.2784 2.81738 15.2784 2.81738 15.1951 2.81738L14.1953 23.3131L21.3605 21.7301C21.3605 21.7301 18.861 4.73365 18.861 4.56701C18.861 4.4837 18.6944 4.40038 18.6111 4.40038Z",
              fill: "currentColor"
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime321.jsx)(
            "path",
            {
              d: "M29.7751 13.3151C29.0253 12.8985 28.692 12.5653 28.692 12.1487C28.692 11.5655 29.1919 11.2322 30.0251 11.2322C30.9416 11.2322 31.7747 11.6488 31.7747 11.6488L32.4412 9.64922C32.4412 9.64922 31.858 9.14932 30.1084 9.14932C27.6089 9.14932 25.9426 10.5657 25.9426 12.5653C25.9426 13.7317 26.7758 14.5648 27.7756 15.1481C28.6087 15.648 28.942 15.9812 28.942 16.4811C28.942 16.981 28.5254 17.4809 27.6922 17.4809C26.5258 17.4809 25.3594 16.8977 25.3594 16.8977L24.6929 18.8973C24.6929 18.8973 25.6927 19.5638 27.4423 19.5638C29.9418 19.5638 31.7747 18.3141 31.7747 16.0645C31.7747 14.8148 30.8582 13.8983 29.7751 13.3151ZM39.8563 9.06601C38.6066 9.06601 37.6068 9.64922 36.857 10.5657L37.9401 4.90022H35.1073L32.3579 19.3138H35.1907L36.1071 14.3982C36.4404 12.5653 37.4402 11.3988 38.3567 11.3988C39.0232 11.3988 39.2731 11.8154 39.2731 12.482C39.2731 12.8985 39.2731 13.3151 39.1898 13.7317L38.1067 19.3972H40.9395L42.0226 13.5651C42.1059 12.9818 42.1892 12.232 42.1892 11.7321C42.1892 10.0658 41.356 9.06601 39.8563 9.06601ZM47.1048 17.3143C46.105 17.3143 45.7718 16.4811 45.7718 15.4813C45.7718 13.8983 46.6049 11.2322 48.1046 11.2322C49.1044 11.2322 49.4377 12.0654 49.4377 12.8985C49.4377 14.7315 48.6045 17.3143 47.1048 17.3143ZM48.5212 9.06601C45.1052 9.06601 42.8557 12.1487 42.8557 15.5646C42.8557 17.7308 44.1888 19.4805 46.7716 19.4805C50.1042 19.4805 52.3537 16.4811 52.3537 12.9818C52.3537 10.9823 51.1873 9.06601 48.5212 9.06601ZM56.8528 17.3976C56.1029 17.3976 55.6863 16.981 55.6863 16.981L56.1862 14.3149C56.5195 12.5653 57.436 11.3988 58.4358 11.3988C59.2689 11.3988 59.6022 12.232 59.6022 12.9818C59.5189 14.8148 58.4358 17.3976 56.8528 17.3976ZM59.6022 9.06601C57.6859 9.06601 56.6028 10.7323 56.6028 10.7323L56.7695 9.23264H54.27C54.1867 10.2324 53.9367 11.8154 53.6868 12.9818L51.6872 23.313H54.5199L55.2698 19.1472H55.3531C55.3531 19.1472 55.9363 19.4805 57.0194 19.4805C60.352 19.4805 62.5182 16.0645 62.5182 12.6486C62.5182 10.8156 61.6851 9.06601 59.6022 9.06601ZM66.5174 5.06685C65.6009 5.06685 64.9344 5.81669 64.9344 6.73316C64.9344 7.56632 65.4343 8.14953 66.2675 8.14953C67.1839 8.14953 67.9338 7.56632 67.9338 6.48322C67.9338 5.65006 67.3506 5.06685 66.5174 5.06685ZM62.6016 19.3138H65.4343L67.3506 9.31595H64.5178L62.6016 19.3138ZM74.5157 9.31595H72.5161L72.5995 8.81606C72.7661 7.81627 73.3493 6.98311 74.2658 6.98311C74.7657 6.98311 75.1822 7.14974 75.1822 7.14974L75.7655 4.90022C75.7655 4.90022 75.2656 4.65027 74.2658 4.65027C73.266 4.65027 72.2662 4.90022 71.5163 5.56674C70.5166 6.3999 70.1 7.56632 69.85 8.73274L69.7667 9.23264H68.4337L68.0171 11.3988H69.3501L67.8505 19.3138H70.6832L72.1829 11.3988H74.0991L74.5157 9.31595ZM81.2643 9.31595C81.2643 9.31595 79.5147 13.7317 78.6815 16.1478C78.5982 15.398 78.015 9.31595 78.015 9.31595H75.0156L76.6819 18.4807C76.6819 18.6473 76.6819 18.814 76.5986 18.9806C76.2654 19.6471 75.6821 20.2303 75.0989 20.6469C74.599 21.0635 73.9325 21.3134 73.5159 21.4801L74.2658 23.8962C74.849 23.8129 76.0154 23.313 77.0152 22.3965C78.2649 21.2301 79.5147 19.3138 80.6811 16.8144L84.097 9.39927L81.2643 9.31595Z",
              fill: "currentColor"
            }
          )
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime321.jsx)("defs", { children: /* @__PURE__ */ (0, import_jsx_runtime321.jsx)("clipPath", { id: "clip0_9632_116870", children: /* @__PURE__ */ (0, import_jsx_runtime321.jsx)(
          "rect",
          {
            width: "83.3158",
            height: "23.8283",
            fill: "currentColor",
            transform: "translate(0.949219 0.585938)"
          }
        ) }) })
      ]
    }
  );
}

// app/assets/logos/VerizonLogo.tsx
var import_jsx_runtime322 = require("react/jsx-runtime");
function VerizonLogo({ className }) {
  return /* @__PURE__ */ (0, import_jsx_runtime322.jsxs)(
    "svg",
    {
      className,
      width: "82",
      height: "19",
      viewBox: "0 0 82 19",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime322.jsxs)("g", { clipPath: "url(#clip0_9632_116867)", children: [
          /* @__PURE__ */ (0, import_jsx_runtime322.jsx)(
            "path",
            {
              d: "M79.373 0.50708L74.9504 9.96817L73.2874 6.3833H71.4888L74.2236 12.2472H75.6773L81.1593 0.50708H79.373Z",
              fill: "currentColor"
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime322.jsx)(
            "path",
            {
              d: "M60.4008 18.0743H63.961V11.5575C63.961 10.0669 64.8234 9.01976 66.1046 9.01976C67.3365 9.01976 67.9771 9.8821 67.9771 11.1263V18.0743H71.5373V10.4488C71.5373 7.86176 69.9851 6.03853 67.472 6.03853C65.8705 6.03853 64.7495 6.7284 63.9118 7.98495H63.8379V6.38347H60.3885L60.4008 18.0743ZM53.4036 6.06317C49.6832 6.06317 47.1947 8.73642 47.1947 12.2597C47.1947 15.7583 49.6832 18.4562 53.4036 18.4562C57.1239 18.4562 59.6124 15.7583 59.6124 12.2597C59.6247 8.73642 57.1239 6.06317 53.4036 6.06317ZM53.3789 15.8199C51.6912 15.8199 50.7919 14.4032 50.7919 12.2597C50.7919 10.0915 51.6789 8.69946 53.3789 8.69946C55.0666 8.69946 56.0029 10.0915 56.0029 12.2597C56.0152 14.4032 55.079 15.8199 53.3789 15.8199ZM37.0438 18.0743H47.0469V15.2656H41.3801V15.1916L46.8005 9.11831V6.37115H37.0438V9.19223H42.5258V9.26614L37.0438 15.3887V18.0743ZM32.4734 18.0743H36.0582V6.38347H32.4734V18.0743ZM24.158 18.0743H27.7305V12.7032C27.7305 10.264 29.1965 9.17991 31.4262 9.48789H31.5002V6.40811C31.3154 6.33419 31.1059 6.32187 30.7733 6.32187C29.3813 6.32187 28.445 6.96247 27.6443 8.32989H27.5704V6.38347H24.158V18.0743ZM17.6042 15.8322C16.0273 15.8322 15.0664 14.8097 14.8817 13.2329H23.3079C23.3326 10.7198 22.6673 8.71178 21.2753 7.45523C20.2898 6.54362 18.9962 6.03853 17.3455 6.03853C13.8222 6.03853 11.383 8.71178 11.383 12.2104C11.383 15.7337 13.7113 18.4193 17.5795 18.4193C19.0455 18.4193 20.2035 18.025 21.1644 17.3721C22.1869 16.6699 22.9261 15.6351 23.1232 14.6126H19.6984C19.3658 15.3764 18.6513 15.8322 17.6042 15.8322ZM17.4194 8.58859C18.676 8.58859 19.5383 9.52484 19.6861 10.8923H14.9063C15.1896 9.51253 15.9411 8.58859 17.4194 8.58859ZM4.26258 18.0743H8.00759L12.0729 6.38347H8.48804L6.209 13.8981H6.15972L3.88068 6.38347H0.197266L4.26258 18.0743ZM32.4734 2.2196H36.0582V5.39794H32.4734V2.2196Z",
              fill: "currentColor"
            }
          )
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime322.jsx)("defs", { children: /* @__PURE__ */ (0, import_jsx_runtime322.jsx)("clipPath", { id: "clip0_9632_116867", children: /* @__PURE__ */ (0, import_jsx_runtime322.jsx)(
          "rect",
          {
            width: "81.0845",
            height: "17.9859",
            fill: "white",
            transform: "translate(0.074707 0.50708)"
          }
        ) }) })
      ]
    }
  );
}

// app/components/LogoType.tsx
var import_jsx_runtime323 = require("react/jsx-runtime");
function LogoType({ className }) {
  return /* @__PURE__ */ (0, import_jsx_runtime323.jsxs)("svg", { viewBox: "0 0 751 130", xmlns: "http://www.w3.org/2000/svg", className, children: [
    /* @__PURE__ */ (0, import_jsx_runtime323.jsx)(
      "path",
      {
        d: "M195.022 16.2676H135.445H137.799V32.5096H157.858V102.4H174.84V32.5096H195.022V16.2676Z",
        fill: "url(#paint0_linear_228_1439)"
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime323.jsx)(
      "path",
      {
        d: "M211.265 51.4587V40.8767H195.391V102.4H211.265V72.9917C211.265 60.0719 221.725 56.3805 229.97 57.3648V39.6463C222.218 39.6463 214.465 43.0916 211.265 51.4587Z",
        fill: "url(#paint1_linear_228_1439)"
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime323.jsx)(
      "path",
      {
        d: "M246.954 33.494C252.368 33.494 256.799 29.0644 256.799 23.7734C256.799 18.4824 252.368 13.9297 246.954 13.9297C241.662 13.9297 237.232 18.4824 237.232 23.7734C237.232 29.0644 241.662 33.494 246.954 33.494ZM239.078 102.4H254.953V40.8767H239.078V102.4Z",
        fill: "url(#paint2_linear_228_1439)"
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime323.jsx)(
      "path",
      {
        d: "M315.253 40.8768V48.5056C310.946 42.7224 304.301 39.1542 295.563 39.1542C278.089 39.1542 264.921 53.4275 264.921 70.6539C264.921 88.0033 278.089 102.154 295.563 102.154C304.301 102.154 310.946 98.5853 315.253 92.8021V99.4466C315.253 109.167 309.1 114.581 299.132 114.581C289.656 114.581 285.596 110.767 283.011 105.968L269.475 113.72C274.889 123.687 285.472 128.731 298.64 128.731C314.884 128.731 330.758 119.626 330.758 99.4466V40.8768H315.253ZM298.025 87.5112C288.057 87.5112 280.796 80.4975 280.796 70.6539C280.796 60.9332 288.057 53.9196 298.025 53.9196C307.992 53.9196 315.253 60.9332 315.253 70.6539C315.253 80.4975 307.992 87.5112 298.025 87.5112Z",
        fill: "url(#paint3_linear_228_1439)"
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime323.jsx)(
      "path",
      {
        d: "M390.936 40.8768V48.5056C386.629 42.7224 379.983 39.1542 371.246 39.1542C353.772 39.1542 340.604 53.4275 340.604 70.6539C340.604 88.0033 353.772 102.154 371.246 102.154C379.983 102.154 386.629 98.5853 390.936 92.8021V99.4466C390.936 109.167 384.783 114.581 374.815 114.581C365.339 114.581 361.278 110.767 358.694 105.968L345.157 113.72C350.572 123.687 361.155 128.731 374.322 128.731C390.566 128.731 406.441 119.626 406.441 99.4466V40.8768H390.936ZM373.707 87.5112C363.739 87.5112 356.479 80.4975 356.479 70.6539C356.479 60.9332 363.739 53.9196 373.707 53.9196C383.675 53.9196 390.936 60.9332 390.936 70.6539C390.936 80.4975 383.675 87.5112 373.707 87.5112Z",
        fill: "url(#paint4_linear_228_1439)"
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime323.jsx)(
      "path",
      {
        d: "M432.9 78.1597H479.293C479.663 76.0679 479.909 73.9761 479.909 71.6383C479.909 53.5505 466.987 39.1542 448.775 39.1542C429.454 39.1542 416.287 53.3044 416.287 71.6383C416.287 89.9721 429.331 104.122 450.005 104.122C461.819 104.122 471.048 99.3236 476.832 90.9564L464.034 83.5737C461.327 87.142 456.404 89.726 450.251 89.726C441.883 89.726 435.115 86.2807 432.9 78.1597ZM432.654 65.8551C434.5 57.9802 440.284 53.4274 448.775 53.4274C455.42 53.4274 462.065 56.9958 464.034 65.8551H432.654Z",
        fill: "url(#paint5_linear_228_1439)"
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime323.jsx)(
      "path",
      {
        d: "M505.199 51.4587V40.8767H489.324V102.4H505.199V72.9917C505.199 60.0719 515.659 56.3805 523.904 57.3648V39.6463C516.151 39.6463 508.398 43.0916 505.199 51.4587Z",
        fill: "url(#paint6_linear_228_1439)"
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime323.jsx)(
      "path",
      {
        d: "M529.934 103.999C535.717 103.999 540.394 99.3235 540.394 93.5404C540.394 87.7572 535.717 83.0815 529.934 83.0815C524.15 83.0815 519.473 87.7572 519.473 93.5404C519.473 99.3235 524.15 103.999 529.934 103.999Z",
        fill: "url(#paint7_linear_228_1439)"
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime323.jsx)(
      "path",
      {
        d: "M596.632 16.2676V48.1364C592.202 42.4763 585.679 39.1541 576.696 39.1541C560.206 39.1541 546.67 53.3044 546.67 71.6382C546.67 89.972 560.206 104.122 576.696 104.122C585.679 104.122 592.202 100.8 596.632 95.1399V102.4H612.506V16.2676L596.632 16.2676ZM579.65 88.9876C569.805 88.9876 562.544 81.9741 562.544 71.6382C562.544 61.3024 569.805 54.2887 579.65 54.2887C589.371 54.2887 596.632 61.3024 596.632 71.6382C596.632 81.9741 589.371 88.9876 579.65 88.9876Z",
        fill: "url(#paint8_linear_228_1439)"
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime323.jsx)(
      "path",
      {
        d: "M637.98 78.1597H684.373C684.742 76.0679 684.989 73.9761 684.989 71.6383C684.989 53.5505 672.067 39.1542 653.855 39.1542C634.534 39.1542 621.367 53.3044 621.367 71.6383C621.367 89.9721 634.411 104.122 655.085 104.122C666.899 104.122 676.128 99.3236 681.912 90.9564L669.114 83.5737C666.407 87.142 661.484 89.726 655.331 89.726C646.963 89.726 640.195 86.2807 637.98 78.1597ZM637.734 65.8551C639.58 57.9802 645.363 53.4274 653.855 53.4274C660.5 53.4274 667.145 56.9958 669.114 65.8551H637.734Z",
        fill: "url(#paint9_linear_228_1439)"
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime323.jsx)(
      "path",
      {
        d: "M732.859 40.8768L717.846 83.9428L702.955 40.8768H685.481L708.862 102.4H726.952L750.333 40.8768H732.859Z",
        fill: "url(#paint10_linear_228_1439)"
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime323.jsx)(
      "path",
      {
        fillRule: "evenodd",
        clipRule: "evenodd",
        d: "M35.664 42.3949L59.4114 1.26865L118.264 103.194H0.558823L24.3062 62.0665L41.1046 71.7643L34.157 83.7971H84.6657L59.4114 40.0612L52.4637 52.094L35.664 42.3949Z",
        fill: "url(#paint11_linear_228_1439)"
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime323.jsxs)("defs", { children: [
      /* @__PURE__ */ (0, import_jsx_runtime323.jsxs)(
        "linearGradient",
        {
          id: "paint0_linear_228_1439",
          x1: "329.674",
          y1: "150.079",
          x2: "329.674",
          y2: "13.9297",
          gradientUnits: "userSpaceOnUse",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime323.jsx)("stop", { stopColor: "#41FF54" }),
            /* @__PURE__ */ (0, import_jsx_runtime323.jsx)("stop", { offset: "1", stopColor: "#E7FF52" })
          ]
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime323.jsxs)(
        "linearGradient",
        {
          id: "paint1_linear_228_1439",
          x1: "329.674",
          y1: "150.079",
          x2: "329.674",
          y2: "13.9297",
          gradientUnits: "userSpaceOnUse",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime323.jsx)("stop", { stopColor: "#41FF54" }),
            /* @__PURE__ */ (0, import_jsx_runtime323.jsx)("stop", { offset: "1", stopColor: "#E7FF52" })
          ]
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime323.jsxs)(
        "linearGradient",
        {
          id: "paint2_linear_228_1439",
          x1: "329.674",
          y1: "150.079",
          x2: "329.674",
          y2: "13.9297",
          gradientUnits: "userSpaceOnUse",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime323.jsx)("stop", { stopColor: "#41FF54" }),
            /* @__PURE__ */ (0, import_jsx_runtime323.jsx)("stop", { offset: "1", stopColor: "#E7FF52" })
          ]
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime323.jsxs)(
        "linearGradient",
        {
          id: "paint3_linear_228_1439",
          x1: "329.674",
          y1: "150.079",
          x2: "329.674",
          y2: "13.9297",
          gradientUnits: "userSpaceOnUse",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime323.jsx)("stop", { stopColor: "#41FF54" }),
            /* @__PURE__ */ (0, import_jsx_runtime323.jsx)("stop", { offset: "1", stopColor: "#E7FF52" })
          ]
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime323.jsxs)(
        "linearGradient",
        {
          id: "paint4_linear_228_1439",
          x1: "329.674",
          y1: "150.079",
          x2: "329.674",
          y2: "13.9297",
          gradientUnits: "userSpaceOnUse",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime323.jsx)("stop", { stopColor: "#41FF54" }),
            /* @__PURE__ */ (0, import_jsx_runtime323.jsx)("stop", { offset: "1", stopColor: "#E7FF52" })
          ]
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime323.jsxs)(
        "linearGradient",
        {
          id: "paint5_linear_228_1439",
          x1: "329.674",
          y1: "150.079",
          x2: "329.674",
          y2: "13.9297",
          gradientUnits: "userSpaceOnUse",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime323.jsx)("stop", { stopColor: "#41FF54" }),
            /* @__PURE__ */ (0, import_jsx_runtime323.jsx)("stop", { offset: "1", stopColor: "#E7FF52" })
          ]
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime323.jsxs)(
        "linearGradient",
        {
          id: "paint6_linear_228_1439",
          x1: "329.674",
          y1: "150.079",
          x2: "329.674",
          y2: "13.9297",
          gradientUnits: "userSpaceOnUse",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime323.jsx)("stop", { stopColor: "#41FF54" }),
            /* @__PURE__ */ (0, import_jsx_runtime323.jsx)("stop", { offset: "1", stopColor: "#E7FF52" })
          ]
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime323.jsxs)(
        "linearGradient",
        {
          id: "paint7_linear_228_1439",
          x1: "634.903",
          y1: "139.717",
          x2: "651.436",
          y2: "25.9719",
          gradientUnits: "userSpaceOnUse",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime323.jsx)("stop", { stopColor: "#2563EB" }),
            /* @__PURE__ */ (0, import_jsx_runtime323.jsx)("stop", { offset: "1", stopColor: "#A855F7" })
          ]
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime323.jsxs)(
        "linearGradient",
        {
          id: "paint8_linear_228_1439",
          x1: "634.903",
          y1: "139.717",
          x2: "651.436",
          y2: "25.9719",
          gradientUnits: "userSpaceOnUse",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime323.jsx)("stop", { stopColor: "#2563EB" }),
            /* @__PURE__ */ (0, import_jsx_runtime323.jsx)("stop", { offset: "1", stopColor: "#A855F7" })
          ]
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime323.jsxs)(
        "linearGradient",
        {
          id: "paint9_linear_228_1439",
          x1: "634.903",
          y1: "139.717",
          x2: "651.436",
          y2: "25.9719",
          gradientUnits: "userSpaceOnUse",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime323.jsx)("stop", { stopColor: "#2563EB" }),
            /* @__PURE__ */ (0, import_jsx_runtime323.jsx)("stop", { offset: "1", stopColor: "#A855F7" })
          ]
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime323.jsxs)(
        "linearGradient",
        {
          id: "paint10_linear_228_1439",
          x1: "634.903",
          y1: "139.717",
          x2: "651.436",
          y2: "25.9719",
          gradientUnits: "userSpaceOnUse",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime323.jsx)("stop", { stopColor: "#2563EB" }),
            /* @__PURE__ */ (0, import_jsx_runtime323.jsx)("stop", { offset: "1", stopColor: "#A855F7" })
          ]
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime323.jsxs)(
        "linearGradient",
        {
          id: "paint11_linear_228_1439",
          x1: "95.8593",
          y1: "103.194",
          x2: "94.7607",
          y2: "31.2381",
          gradientUnits: "userSpaceOnUse",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime323.jsx)("stop", { stopColor: "#41FF54" }),
            /* @__PURE__ */ (0, import_jsx_runtime323.jsx)("stop", { offset: "1", stopColor: "#E7FF52" })
          ]
        }
      )
    ] })
  ] });
}

// app/components/LoginPageLayout.tsx
var import_jsx_runtime324 = require("react/jsx-runtime"), quotes = [
  {
    quote: "Trigger.dev is redefining background jobs for modern developers.",
    person: "Paul Copplestone, Supabase"
  },
  {
    quote: "Trigger.dev is a great way to automate email campaigns with Resend, and we've heard nothing but good things from our mutual customers.",
    person: "Zeno Rocha, Resend"
  },
  {
    quote: "We love Trigger.dev and it\u2019s had a big impact in dev iteration velocity already.",
    person: "Andr\xE9 Neves, ZBD"
  },
  {
    quote: "We\u2019ve been looking for a product like Trigger.dev for a really long time - automation that's simple and developer-focused.",
    person: "Han Wang, Mintlify"
  }
];
function LoginPageLayout({ children }) {
  let [randomQuote, setRandomQuote] = (0, import_react241.useState)(null);
  return (0, import_react241.useEffect)(() => {
    let randomIndex = Math.floor(Math.random() * quotes.length);
    setRandomQuote(quotes[randomIndex]);
  }, []), /* @__PURE__ */ (0, import_jsx_runtime324.jsxs)("main", { className: "grid h-full grid-cols-1 md:grid-cols-2", children: [
    /* @__PURE__ */ (0, import_jsx_runtime324.jsx)("div", { className: "border-r border-grid-bright bg-background-bright", children: /* @__PURE__ */ (0, import_jsx_runtime324.jsxs)("div", { className: "flex h-full flex-col items-center justify-between p-6", children: [
      /* @__PURE__ */ (0, import_jsx_runtime324.jsxs)("div", { className: "flex w-full items-center justify-between", children: [
        /* @__PURE__ */ (0, import_jsx_runtime324.jsx)("a", { href: "https://trigger.dev", children: /* @__PURE__ */ (0, import_jsx_runtime324.jsx)(LogoType, { className: "w-36" }) }),
        /* @__PURE__ */ (0, import_jsx_runtime324.jsx)(LinkButton, { to: "https://trigger.dev/docs", variant: "tertiary/small", LeadingIcon: "docs", children: "Documentation" })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime324.jsx)("div", { className: "flex h-full max-w-sm items-center justify-center", children }),
      /* @__PURE__ */ (0, import_jsx_runtime324.jsxs)(Paragraph, { variant: "small", className: "text-center", children: [
        "Having login issues? ",
        /* @__PURE__ */ (0, import_jsx_runtime324.jsx)(TextLink, { href: "https://@trigger.dev/contact", children: "Email us" }),
        " ",
        "or ",
        /* @__PURE__ */ (0, import_jsx_runtime324.jsx)(TextLink, { href: "https://trigger.dev/discord", children: "ask us in Discord" })
      ] })
    ] }) }),
    /* @__PURE__ */ (0, import_jsx_runtime324.jsxs)("div", { className: "hidden grid-rows-[1fr_auto] pb-6 md:grid", children: [
      /* @__PURE__ */ (0, import_jsx_runtime324.jsxs)("div", { className: "flex h-full flex-col items-center justify-center px-16", children: [
        /* @__PURE__ */ (0, import_jsx_runtime324.jsx)(Header3, { className: "relative text-center text-2xl font-normal leading-8 text-text-dimmed transition before:relative before:right-1 before:top-0 before:text-6xl before:text-charcoal-750 before:content-['\u275D'] lg-height:text-xl md-height:text-lg", children: randomQuote?.quote }),
        /* @__PURE__ */ (0, import_jsx_runtime324.jsx)(Paragraph, { className: "mt-4 text-text-dimmed/60", children: randomQuote?.person })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime324.jsxs)("div", { className: "flex flex-col items-center gap-4 px-8", children: [
        /* @__PURE__ */ (0, import_jsx_runtime324.jsx)(Paragraph, { children: "Trusted by developers at" }),
        /* @__PURE__ */ (0, import_jsx_runtime324.jsxs)("div", { className: "flex w-full flex-wrap items-center justify-center gap-x-6 gap-y-3 text-charcoal-500 xl:justify-between xl:gap-0", children: [
          /* @__PURE__ */ (0, import_jsx_runtime324.jsx)(VerizonLogo, {}),
          /* @__PURE__ */ (0, import_jsx_runtime324.jsx)(ShopifyLogo, {}),
          /* @__PURE__ */ (0, import_jsx_runtime324.jsx)(OktaLogo, {}),
          /* @__PURE__ */ (0, import_jsx_runtime324.jsx)(ATAndTLogo, {}),
          /* @__PURE__ */ (0, import_jsx_runtime324.jsx)(AppsmithLogo, {}),
          /* @__PURE__ */ (0, import_jsx_runtime324.jsx)(CalComLogo, {})
        ] })
      ] })
    ] })
  ] });
}

// app/services/redirectTo.server.ts
var import_node19 = require("@remix-run/node"), import_zod266 = require("zod");
var ONE_DAY = 60 * 60 * 24, { commitSession: commitSession3, getSession: getSession3 } = (0, import_node19.createCookieSessionStorage)({
  cookie: {
    name: "__redirectTo",
    path: "/",
    httpOnly: !0,
    sameSite: "lax",
    secrets: [env2.SESSION_SECRET],
    secure: env2.NODE_ENV === "production",
    maxAge: ONE_DAY
  }
});
function getRedirectSession(request) {
  return getSession3(request.headers.get("Cookie"));
}
async function setRedirectTo(request, redirectTo) {
  let session = await getRedirectSession(request);
  return session && session.set("redirectTo", redirectTo), session;
}
async function clearRedirectTo(request) {
  let session = await getRedirectSession(request);
  return session && session.unset("redirectTo"), session;
}
async function getRedirectTo(request) {
  let session = await getRedirectSession(request);
  if (session)
    return import_zod266.z.string().optional().parse(session.get("redirectTo"));
}

// app/routes/login._index/route.tsx
var import_jsx_runtime325 = require("react/jsx-runtime"), meta2 = ({ matches }) => [
  ...matches.flatMap((match) => match.meta ?? []).filter((meta4) => !("title" in meta4 || "name" in meta4 && meta4.name === "viewport")),
  { title: "Login to Trigger.dev" },
  {
    name: "viewport",
    content: "width=device-width,initial-scale=1"
  }
];
async function loader146({ request }) {
  if (await getUserId(request))
    return (0, import_remix_typedjson90.redirect)("/");
  let redirectTo = requestUrl(request).searchParams.get("redirectTo");
  if (redirectTo) {
    let session = await setRedirectTo(request, redirectTo);
    return (0, import_remix_typedjson90.typedjson)(
      { redirectTo, showGithubAuth: isGithubAuthSupported },
      {
        headers: {
          "Set-Cookie": await commitSession3(session)
        }
      }
    );
  } else
    return (0, import_remix_typedjson90.typedjson)({
      redirectTo: null,
      showGithubAuth: isGithubAuthSupported
    });
}
function LoginPage() {
  let data2 = (0, import_remix_typedjson90.useTypedLoaderData)();
  return /* @__PURE__ */ (0, import_jsx_runtime325.jsx)(LoginPageLayout, { children: /* @__PURE__ */ (0, import_jsx_runtime325.jsx)(
    import_react242.Form,
    {
      action: `/auth/github${data2.redirectTo ? `?redirectTo=${data2.redirectTo}` : ""}`,
      method: "post",
      className: "w-full",
      children: /* @__PURE__ */ (0, import_jsx_runtime325.jsxs)("div", { className: "flex flex-col items-center", children: [
        /* @__PURE__ */ (0, import_jsx_runtime325.jsx)(Header1, { className: "pb-4 font-semibold sm:text-2xl md:text-3xl lg:text-4xl", children: "Welcome" }),
        /* @__PURE__ */ (0, import_jsx_runtime325.jsx)(Paragraph, { variant: "base", className: "mb-6", children: "Create an account or login" }),
        /* @__PURE__ */ (0, import_jsx_runtime325.jsxs)(Fieldset, { className: "w-full", children: [
          /* @__PURE__ */ (0, import_jsx_runtime325.jsxs)("div", { className: "flex flex-col gap-y-2", children: [
            data2.showGithubAuth && /* @__PURE__ */ (0, import_jsx_runtime325.jsxs)(
              Button,
              {
                type: "submit",
                variant: "primary/extra-large",
                fullWidth: !0,
                "data-action": "continue with github",
                children: [
                  /* @__PURE__ */ (0, import_jsx_runtime325.jsx)(import_companyicons10.GitHubDarkIcon, { className: "mr-2 size-5" }),
                  /* @__PURE__ */ (0, import_jsx_runtime325.jsx)("span", { className: "text-charcoal-900", children: "Continue with GitHub" })
                ]
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime325.jsxs)(
              LinkButton,
              {
                to: "/login/magic",
                variant: "tertiary/extra-large",
                fullWidth: !0,
                "data-action": "continue with email",
                className: "text-text-bright",
                children: [
                  /* @__PURE__ */ (0, import_jsx_runtime325.jsx)(NamedIcon, { name: "envelope", className: "mr-2 size-5 text-text-bright" }),
                  "Continue with Email"
                ]
              }
            )
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime325.jsxs)(Paragraph, { variant: "extra-small", className: "mt-2 text-center", children: [
            "By signing up you agree to our",
            " ",
            /* @__PURE__ */ (0, import_jsx_runtime325.jsx)(TextLink, { href: "https://trigger.dev/legal", target: "_blank", children: "terms" }),
            "\xA0",
            "and",
            "\xA0",
            /* @__PURE__ */ (0, import_jsx_runtime325.jsx)(TextLink, { href: "https://trigger.dev/legal/privacy", target: "_blank", children: "privacy" }),
            "\xA0",
            "policy."
          ] })
        ] })
      ] })
    }
  ) });
}

// app/routes/otel.v1.logs.ts
var otel_v1_logs_exports = {};
__export(otel_v1_logs_exports, {
  action: () => action101
});
var import_server_runtime118 = require("@remix-run/server-runtime");
async function action101({ request }) {
  try {
    let contentType = request.headers.get("content-type");
    if (contentType === "application/json") {
      let body = await request.json(), exportResponse = await otlpExporter.exportLogs(body, !1);
      return (0, import_server_runtime118.json)(exportResponse, { status: 200 });
    } else if (contentType === "application/x-protobuf") {
      let buffer = await request.arrayBuffer(), exportRequest = ExportLogsServiceRequest.decode(new Uint8Array(buffer)), exportResponse = await otlpExporter.exportLogs(exportRequest);
      return new Response(ExportLogsServiceResponse.encode(exportResponse).finish(), {
        status: 200
      });
    } else
      return new Response(
        "Unsupported content type. Must be either application/x-protobuf or application/json",
        { status: 400 }
      );
  } catch (error) {
    return console.error(error), new Response("Internal Server Error", { status: 500 });
  }
}

// app/routes/projects.new.ts
var projects_new_exports = {};
__export(projects_new_exports, {
  loader: () => loader147
});
var import_server_runtime119 = require("@remix-run/server-runtime");

// app/presenters/SelectBestProjectPresenter.server.ts
var SelectBestProjectPresenter = class {
  #prismaClient;
  constructor(prismaClient = prisma) {
    this.#prismaClient = prismaClient;
  }
  async call({ userId, request }) {
    let projectId = await getCurrentProjectId(request);
    if (projectId) {
      let project = await this.#prismaClient.project.findUnique({
        where: { id: projectId, deletedAt: null, organization: { members: { some: { userId } } } },
        include: { organization: !0 }
      });
      if (project)
        return { project, organization: project.organization };
    }
    let projects2 = await this.#prismaClient.project.findMany({
      include: {
        organization: !0
      },
      where: {
        deletedAt: null,
        organization: {
          members: { some: { userId } }
        }
      },
      orderBy: {
        jobs: {
          _count: "desc"
        }
      },
      take: 1
    });
    if (projects2.length === 0)
      throw new Response("Not Found", { status: 404 });
    return { project: projects2[0], organization: projects2[0].organization };
  }
};

// app/routes/projects.new.ts
var loader147 = async ({ request }) => {
  let user = await requireUser(request), url = new URL(request.url), presenter = new SelectBestProjectPresenter();
  try {
    let { organization } = await presenter.call({ userId: user.id, request });
    return (0, import_server_runtime119.redirect)(`${newProjectPath(organization)}${url.search}`);
  } catch {
    return (await getUsersInvites({ email: user.email })).length > 0 ? (0, import_server_runtime119.redirect)(invitesPath()) : (0, import_server_runtime119.redirect)(newOrganizationPath());
  }
};

// app/routes/_app._index/route.tsx
var route_exports156 = {};
__export(route_exports156, {
  loader: () => loader148
});
var import_server_runtime120 = require("@remix-run/server-runtime");
var loader148 = async ({ request }) => {
  let user = await requireUser(request);
  if ((await getUsersInvites({ email: user.email })).length > 0)
    return (0, import_server_runtime120.redirect)(invitesPath());
  let presenter = new SelectBestProjectPresenter();
  try {
    let { project, organization } = await presenter.call({ userId: user.id, request });
    return (0, import_server_runtime120.redirect)(projectPath(organization, project));
  } catch {
    let organization = await prisma.organization.findFirst({
      where: {
        members: {
          some: {
            userId: user.id
          }
        },
        deletedAt: null
      },
      orderBy: {
        createdAt: "desc"
      }
    });
    return organization ? (0, import_server_runtime120.redirect)(newProjectPath(organization)) : (0, import_server_runtime120.redirect)(newOrganizationPath());
  }
};

// app/routes/api.v1.runs.ts
var api_v1_runs_exports = {};
__export(api_v1_runs_exports, {
  loader: () => loader149
});
var import_server_runtime121 = require("@remix-run/server-runtime"), import_zod_validation_error10 = require("zod-validation-error");
async function loader149({ request, params }) {
  if (request.method.toUpperCase() === "OPTIONS")
    return apiCors(request, (0, import_server_runtime121.json)({}));
  let authenticationResult = await authenticateApiRequest(request, {
    allowPublicKey: !1
  });
  if (!authenticationResult)
    return apiCors(request, (0, import_server_runtime121.json)({ error: "Invalid or Missing API key" }, { status: 401 }));
  let authenticatedEnv = authenticationResult.environment, url = new URL(request.url), presenter = new ApiRunListPresenter();
  try {
    let result = await presenter.call(
      authenticatedEnv.project,
      url.searchParams,
      authenticatedEnv
    );
    return result ? apiCors(request, (0, import_server_runtime121.json)(result)) : apiCors(request, (0, import_server_runtime121.json)({ data: [] }));
  } catch (error) {
    return error instanceof import_zod_validation_error10.ValidationError ? apiCors(
      request,
      (0, import_server_runtime121.json)({ error: "Query Error", details: error.details }, { status: 400 })
    ) : apiCors(
      request,
      (0, import_server_runtime121.json)({ error: error instanceof Error ? error.message : String(error) }, { status: 400 })
    );
  }
}

// app/routes/healthcheck.tsx
var healthcheck_exports = {};
__export(healthcheck_exports, {
  loader: () => loader150
});
var loader150 = async ({ request }) => {
  try {
    return await prisma.user.count(), new Response("OK");
  } catch (error) {
    return console.log("healthcheck \u274C", { error }), new Response("ERROR", { status: 500 });
  }
};

// app/routes/login.magic/route.tsx
var route_exports157 = {};
__export(route_exports157, {
  action: () => action102,
  default: () => LoginMagicLinkPage,
  loader: () => loader151,
  meta: () => meta3
});
var import_solid121 = require("@heroicons/react/24/solid"), import_node20 = require("@remix-run/node"), import_react243 = require("@remix-run/react"), import_remix_typedjson91 = require("remix-typedjson"), import_zod267 = require("zod");
var import_jsx_runtime326 = require("react/jsx-runtime"), meta3 = ({ matches }) => [
  ...matches.flatMap((match) => match.meta ?? []).filter((meta4) => !("title" in meta4 || "name" in meta4 && meta4.name === "viewport")),
  { title: "Login to Trigger.dev" },
  {
    name: "viewport",
    content: "width=device-width,initial-scale=1"
  }
];
async function loader151({ request }) {
  await authenticator.isAuthenticated(request, {
    successRedirect: "/"
  });
  let session = await getUserSession(request), error = session.get("auth:error"), magicLinkError;
  return error && ("message" in error ? magicLinkError = error.message : magicLinkError = JSON.stringify(error, null, 2)), (0, import_remix_typedjson91.typedjson)(
    {
      magicLinkSent: session.has("triggerdotdev:magiclink"),
      magicLinkError
    },
    {
      headers: { "Set-Cookie": await commitSession(session) }
    }
  );
}
async function action102({ request }) {
  let clonedRequest = request.clone(), payload = Object.fromEntries(await clonedRequest.formData()), { action: action106 } = import_zod267.z.object({
    action: import_zod267.z.enum(["send", "reset"])
  }).parse(payload);
  if (action106 === "send")
    return authenticator.authenticate("email-link", request, {
      successRedirect: "/login/magic",
      failureRedirect: "/login/magic"
    });
  {
    let session = await getUserSession(request);
    return session.unset("triggerdotdev:magiclink"), (0, import_node20.redirect)("/login/magic", {
      headers: {
        "Set-Cookie": await commitSession(session)
      }
    });
  }
}
function LoginMagicLinkPage() {
  let { magicLinkSent, magicLinkError } = (0, import_remix_typedjson91.useTypedLoaderData)(), navigate = (0, import_react243.useNavigation)(), isLoading2 = (navigate.state === "loading" || navigate.state === "submitting") && navigate.formAction !== void 0 && navigate.formData?.get("action") === "send";
  return /* @__PURE__ */ (0, import_jsx_runtime326.jsx)(LoginPageLayout, { children: /* @__PURE__ */ (0, import_jsx_runtime326.jsx)(import_react243.Form, { method: "post", children: /* @__PURE__ */ (0, import_jsx_runtime326.jsx)("div", { className: "flex flex-col items-center justify-center", children: magicLinkSent ? /* @__PURE__ */ (0, import_jsx_runtime326.jsxs)(import_jsx_runtime326.Fragment, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime326.jsx)(Header1, { className: "pb-6 text-center text-xl font-normal leading-7 md:text-xl lg:text-2xl", children: "We've sent you a magic link!" }),
    /* @__PURE__ */ (0, import_jsx_runtime326.jsxs)(Fieldset, { className: "flex w-full flex-col items-center gap-y-2", children: [
      /* @__PURE__ */ (0, import_jsx_runtime326.jsx)(import_solid121.InboxArrowDownIcon, { className: "mb-4 h-12 w-12 text-primary" }),
      /* @__PURE__ */ (0, import_jsx_runtime326.jsx)(Paragraph, { className: "mb-6 text-center", children: "We sent you an email which contains a magic link that will log you in to your account." }),
      /* @__PURE__ */ (0, import_jsx_runtime326.jsx)(
        FormButtons,
        {
          cancelButton: /* @__PURE__ */ (0, import_jsx_runtime326.jsx)(
            Button,
            {
              type: "submit",
              name: "action",
              value: "reset",
              variant: "minimal/small",
              LeadingIcon: "arrow-left",
              leadingIconClassName: "text-text-dimmed group-hover:text-text-bright transition",
              "data-action": "re-enter email",
              children: "Re-enter email"
            }
          ),
          confirmButton: /* @__PURE__ */ (0, import_jsx_runtime326.jsx)(
            LinkButton,
            {
              to: "/login",
              variant: "minimal/small",
              "data-action": "log in using another option",
              children: "Log in using another option"
            }
          )
        }
      )
    ] })
  ] }) : /* @__PURE__ */ (0, import_jsx_runtime326.jsxs)(import_jsx_runtime326.Fragment, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime326.jsx)(Header1, { className: "pb-4 font-semibold sm:text-2xl md:text-3xl lg:text-4xl", children: "Welcome" }),
    /* @__PURE__ */ (0, import_jsx_runtime326.jsx)(Paragraph, { variant: "base", className: "mb-6 text-center", children: "Create an account or login using email" }),
    /* @__PURE__ */ (0, import_jsx_runtime326.jsxs)(Fieldset, { className: "flex w-full flex-col items-center gap-y-2", children: [
      /* @__PURE__ */ (0, import_jsx_runtime326.jsx)(InputGroup, { children: /* @__PURE__ */ (0, import_jsx_runtime326.jsx)(
        Input,
        {
          type: "email",
          name: "email",
          spellCheck: !1,
          placeholder: "Email Address",
          variant: "large",
          required: !0,
          autoFocus: !0
        }
      ) }),
      /* @__PURE__ */ (0, import_jsx_runtime326.jsxs)(
        Button,
        {
          name: "action",
          value: "send",
          type: "submit",
          variant: "primary/large",
          disabled: isLoading2,
          fullWidth: !0,
          "data-action": "send a magic link",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime326.jsx)(
              NamedIcon,
              {
                name: isLoading2 ? "spinner-dark" : "envelope",
                className: "mr-2 size-5 text-background-dimmed"
              }
            ),
            isLoading2 ? /* @__PURE__ */ (0, import_jsx_runtime326.jsx)("span", { className: "text-background-dimmed", children: "Sending\u2026" }) : /* @__PURE__ */ (0, import_jsx_runtime326.jsx)("span", { className: "text-background-dimmed", children: "Send a magic link" })
          ]
        }
      ),
      magicLinkError && /* @__PURE__ */ (0, import_jsx_runtime326.jsx)(FormError, { children: magicLinkError })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime326.jsxs)(Paragraph, { variant: "extra-small", className: "mb-4 mt-6 text-center", children: [
      "By signing up you agree to our",
      " ",
      /* @__PURE__ */ (0, import_jsx_runtime326.jsx)(TextLink, { href: "https://trigger.dev/legal", target: "_blank", children: "terms" }),
      "\xA0",
      "and",
      "\xA0",
      /* @__PURE__ */ (0, import_jsx_runtime326.jsx)(TextLink, { href: "https://trigger.dev/legal/privacy", target: "_blank", children: "privacy" }),
      "\xA0",
      "policy."
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime326.jsx)(
      LinkButton,
      {
        to: "/login",
        variant: "minimal/small",
        LeadingIcon: "arrow-left",
        leadingIconClassName: "text-text-dimmed group-hover:text-text-bright transition",
        "data-action": "all login options",
        children: "All login options"
      }
    )
  ] }) }) }) });
}

// app/routes/admin.orgs.tsx
var admin_orgs_exports = {};
__export(admin_orgs_exports, {
  SearchParams: () => SearchParams4,
  action: () => action103,
  default: () => AdminDashboardRoute2,
  loader: () => loader152
});
var import_solid122 = require("@heroicons/react/20/solid"), import_react244 = require("@remix-run/react"), import_remix_typedjson92 = require("remix-typedjson"), import_zod268 = require("zod");
var import_jsx_runtime327 = require("react/jsx-runtime"), SearchParams4 = import_zod268.z.object({
  page: import_zod268.z.coerce.number().optional(),
  search: import_zod268.z.string().optional()
}), loader152 = async ({ request, params }) => {
  let userId = await requireUserId(request), searchParams = createSearchParams(request.url, SearchParams4);
  if (!searchParams.success)
    throw new Error(searchParams.error);
  let result = await adminGetOrganizations(userId, searchParams.params.getAll());
  return (0, import_remix_typedjson92.typedjson)(result);
}, FormSchema6 = import_zod268.z.object({ id: import_zod268.z.string(), v3: import_zod268.z.enum(["enable", "disable"]) });
async function action103({ request }) {
  if (request.method.toLowerCase() !== "post")
    return new Response("Method not allowed", { status: 405 });
  let userId = await requireUserId(request), payload = Object.fromEntries(await request.formData()), { id, v3 } = FormSchema6.parse(payload), result = await setV3Enabled(userId, id, v3 === "enable");
  return redirectWithSuccessMessage("/admin/orgs", request, `v3 ${v3}d for org ${id}`);
}
function AdminDashboardRoute2() {
  let { organizations, filters, page, pageCount } = (0, import_remix_typedjson92.useTypedLoaderData)();
  return /* @__PURE__ */ (0, import_jsx_runtime327.jsx)(
    "main",
    {
      "aria-labelledby": "primary-heading",
      className: "flex h-full min-w-0 flex-1 flex-col overflow-y-auto px-4 pb-4 lg:order-last",
      children: /* @__PURE__ */ (0, import_jsx_runtime327.jsxs)("div", { className: " space-y-4", children: [
        /* @__PURE__ */ (0, import_jsx_runtime327.jsxs)(import_react244.Form, { className: "flex items-center gap-2", children: [
          /* @__PURE__ */ (0, import_jsx_runtime327.jsx)(
            Input,
            {
              placeholder: "Search users or orgs",
              variant: "small",
              icon: import_solid122.MagnifyingGlassIcon,
              fullWidth: !0,
              name: "search",
              defaultValue: filters.search
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime327.jsx)(Button, { type: "submit", variant: "tertiary/small", children: "Search" })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime327.jsxs)(Table, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime327.jsx)(TableHeader, { children: /* @__PURE__ */ (0, import_jsx_runtime327.jsxs)(TableRow, { children: [
            /* @__PURE__ */ (0, import_jsx_runtime327.jsx)(TableHeaderCell, { children: "Name" }),
            /* @__PURE__ */ (0, import_jsx_runtime327.jsx)(TableHeaderCell, { children: "Slug" }),
            /* @__PURE__ */ (0, import_jsx_runtime327.jsx)(TableHeaderCell, { children: "Members" }),
            /* @__PURE__ */ (0, import_jsx_runtime327.jsx)(TableHeaderCell, { children: "id" }),
            /* @__PURE__ */ (0, import_jsx_runtime327.jsx)(TableHeaderCell, { children: "v3?" }),
            /* @__PURE__ */ (0, import_jsx_runtime327.jsx)(TableHeaderCell, { children: "Actions" })
          ] }) }),
          /* @__PURE__ */ (0, import_jsx_runtime327.jsx)(TableBody, { children: organizations.length === 0 ? /* @__PURE__ */ (0, import_jsx_runtime327.jsx)(TableBlankRow, { colSpan: 9, children: /* @__PURE__ */ (0, import_jsx_runtime327.jsx)(Paragraph, { children: "No orgs found for search" }) }) : organizations.map((org) => /* @__PURE__ */ (0, import_jsx_runtime327.jsxs)(TableRow, { children: [
            /* @__PURE__ */ (0, import_jsx_runtime327.jsx)(TableCell, { children: org.title }),
            /* @__PURE__ */ (0, import_jsx_runtime327.jsx)(TableCell, { children: org.slug }),
            /* @__PURE__ */ (0, import_jsx_runtime327.jsx)(TableCell, { children: org.members.map((member) => /* @__PURE__ */ (0, import_jsx_runtime327.jsx)(
              LinkButton,
              {
                variant: "minimal/small",
                to: `/admin?search=${encodeURIComponent(member.user.email)}`,
                children: member.user.email
              },
              member.user.email
            )) }),
            /* @__PURE__ */ (0, import_jsx_runtime327.jsx)(TableCell, { children: org.id }),
            /* @__PURE__ */ (0, import_jsx_runtime327.jsx)(TableCell, { children: org.v3Enabled ? "\u2705" : "" }),
            /* @__PURE__ */ (0, import_jsx_runtime327.jsx)(TableCell, { isSticky: !0, children: /* @__PURE__ */ (0, import_jsx_runtime327.jsxs)(import_react244.Form, { method: "post", reloadDocument: !0, children: [
              /* @__PURE__ */ (0, import_jsx_runtime327.jsx)("input", { type: "hidden", name: "id", value: org.id }),
              org.v3Enabled ? /* @__PURE__ */ (0, import_jsx_runtime327.jsx)(
                Button,
                {
                  type: "submit",
                  name: "v3",
                  value: "disable",
                  className: "mr-2",
                  variant: "tertiary/small",
                  children: "Disable v3"
                }
              ) : /* @__PURE__ */ (0, import_jsx_runtime327.jsx)(
                Button,
                {
                  type: "submit",
                  name: "v3",
                  value: "enable",
                  className: "mr-2",
                  variant: "tertiary/small",
                  children: "Enable v3"
                }
              )
            ] }) })
          ] }, org.id)) })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime327.jsx)(PaginationControls, { currentPage: page, totalPages: pageCount })
      ] })
    }
  );
}

// app/routes/storybook/route.tsx
var route_exports158 = {};
__export(route_exports158, {
  default: () => App2,
  loader: () => loader153
});
var import_react245 = require("@remix-run/react"), import_react246 = require("react"), import_remix_typedjson93 = require("remix-typedjson");
var import_jsx_runtime328 = require("react/jsx-runtime"), stories = [
  {
    name: "Badges",
    slug: "badges"
  },
  {
    name: "Buttons",
    slug: "buttons"
  },
  {
    name: "Callouts",
    slug: "callout"
  },
  {
    name: "Checkboxes",
    slug: "checkboxes"
  },
  {
    name: "Clipboard field",
    slug: "clipboard-field"
  },
  {
    name: "Code block",
    slug: "code-block"
  },
  {
    name: "Detail cell",
    slug: "detail-cell"
  },
  {
    name: "Dialog",
    slug: "dialog"
  },
  {
    name: "Environment label",
    slug: "environment-label"
  },
  {
    name: "Free plan usage",
    slug: "free-plan-usage"
  },
  {
    name: "Inline code",
    slug: "inline-code"
  },
  {
    name: "Loading bar divider",
    slug: "loading-bar-divider"
  },
  {
    name: "NamedIcon",
    slug: "named-icon"
  },
  {
    name: "Page header",
    slug: "page-header"
  },
  {
    name: "Pricing callout",
    slug: "pricing-callout"
  },
  {
    name: "Radio group",
    slug: "radio-group"
  },
  {
    name: "Segemented control",
    slug: "segmented-control"
  },
  {
    name: "Shortcuts",
    slug: "shortcuts"
  },
  {
    name: "Switch",
    slug: "switch"
  },
  {
    name: "Tabs",
    slug: "tabs"
  },
  {
    name: "Toast",
    slug: "toast"
  },
  {
    name: "Tooltip",
    slug: "tooltip"
  },
  {
    name: "Tree view",
    slug: "tree-view"
  },
  {
    name: "Timeline",
    slug: "timeline"
  },
  {
    name: "Typography",
    slug: "typography"
  },
  {
    name: "Usage",
    slug: "usage"
  },
  {
    sectionTitle: "Forms",
    name: "Date fields",
    slug: "date-fields"
  },
  {
    name: "Simple form",
    slug: "simple-form"
  },
  {
    name: "Search fields",
    slug: "search-fields"
  },
  {
    name: "Input fields",
    slug: "input-fields"
  },
  {
    sectionTitle: "Menus",
    name: "Select",
    slug: "select"
  },
  {
    name: "Filter",
    slug: "filter"
  },
  {
    name: "Popover",
    slug: "popover"
  }
], loader153 = async ({ request, params }) => {
  if (await requireUserId(request), console.log("ENV", env2.NODE_ENV), env2.NODE_ENV !== "development")
    throw (0, import_remix_typedjson93.redirect)("/");
  return (0, import_remix_typedjson93.typedjson)({
    stories
  });
};
function App2() {
  let { stories: stories2 } = (0, import_remix_typedjson93.useTypedLoaderData)();
  return /* @__PURE__ */ (0, import_jsx_runtime328.jsx)(AppContainer, { children: /* @__PURE__ */ (0, import_jsx_runtime328.jsxs)("div", { className: "grid grid-cols-[14rem_1fr] overflow-hidden", children: [
    /* @__PURE__ */ (0, import_jsx_runtime328.jsx)(SideMenu2, { stories: stories2 }),
    /* @__PURE__ */ (0, import_jsx_runtime328.jsx)("div", { className: "overflow-y-auto", children: /* @__PURE__ */ (0, import_jsx_runtime328.jsx)(import_react245.Outlet, {}) })
  ] }) });
}
function SideMenu2({ stories: stories2 }) {
  return /* @__PURE__ */ (0, import_jsx_runtime328.jsx)(
    "div",
    {
      className: cn(
        "flex h-full flex-col gap-y-8 overflow-hidden border-r border-grid-bright bg-background-bright px-2 transition"
      ),
      children: /* @__PURE__ */ (0, import_jsx_runtime328.jsx)("div", { className: "flex h-full flex-col", children: /* @__PURE__ */ (0, import_jsx_runtime328.jsx)("div", { className: "h-full overflow-hidden overflow-y-auto pt-2 scrollbar-thin scrollbar-track-transparent scrollbar-thumb-charcoal-600", children: stories2.map((story) => /* @__PURE__ */ (0, import_jsx_runtime328.jsxs)(import_react246.Fragment, { children: [
        story.sectionTitle && /* @__PURE__ */ (0, import_jsx_runtime328.jsx)("div", { className: "mx-1 mb-1 mt-4 border-b border-text-dimmed/30 px-1 pb-1 text-xs uppercase text-text-dimmed/60", children: story.sectionTitle }),
        /* @__PURE__ */ (0, import_jsx_runtime328.jsx)(import_react245.NavLink, { to: `/storybook/${story.slug}`, className: "text-sm", children: ({ isActive, isPending }) => /* @__PURE__ */ (0, import_jsx_runtime328.jsx)(
          "div",
          {
            className: cn(
              "relative flex items-center gap-2 overflow-hidden truncate rounded-sm px-2 py-2 text-sm text-text-dimmed",
              (isActive || isPending) && "bg-tertiary text-text-bright"
            ),
            children: story.name
          }
        ) })
      ] }, story.slug)) }) })
    }
  );
}

// app/routes/tests.sse.tsx
var tests_sse_exports = {};
__export(tests_sse_exports, {
  default: () => SSETest,
  loader: () => loader154
});
var import_react247 = require("@remix-run/react");
var import_zod269 = require("zod"), import_jsx_runtime329 = require("react/jsx-runtime");
async function loader154({ request }) {
  let url = new URL(request.url), params = Object.fromEntries(url.searchParams.entries());
  return import_zod269.z.object({
    minDelay: import_zod269.z.coerce.number().int().min(0).max(1e4).default(1e3),
    maxDelay: import_zod269.z.coerce.number().int().min(0).max(1e4).default(2e3),
    undefinedProbability: import_zod269.z.coerce.number().min(0).max(1).default(0.1)
  }).parse(params);
}
function SSETest() {
  let { minDelay, maxDelay, undefinedProbability } = (0, import_react247.useLoaderData)(), events = useEventSource2(
    `/tests/sse/stream?minDelay=${minDelay}&maxDelay=${maxDelay}&undefinedProbability=${undefinedProbability}`,
    {
      event: "message"
    }
  );
  return /* @__PURE__ */ (0, import_jsx_runtime329.jsxs)("div", { children: [
    /* @__PURE__ */ (0, import_jsx_runtime329.jsx)("h2", { children: "SSE Test" }),
    /* @__PURE__ */ (0, import_jsx_runtime329.jsx)("p", { children: events ?? "No events" })
  ] });
}

// app/routes/account/route.tsx
var route_exports159 = {};
__export(route_exports159, {
  default: () => Page74
});
var import_react248 = require("@remix-run/react");

// app/components/navigation/AccountSideMenu.tsx
var import_solid123 = require("@heroicons/react/20/solid"), import_solid124 = require("@heroicons/react/24/solid"), import_companyicons11 = require("@trigger.dev/companyicons");
var import_jsx_runtime330 = require("react/jsx-runtime");
function AccountSideMenu({ user }) {
  let { v3Enabled } = useFeatures();
  return /* @__PURE__ */ (0, import_jsx_runtime330.jsx)(
    "div",
    {
      className: cn(
        "flex h-full flex-col gap-y-8 overflow-hidden border-r border-grid-bright bg-background-bright transition"
      ),
      children: /* @__PURE__ */ (0, import_jsx_runtime330.jsxs)("div", { className: "flex h-full flex-col", children: [
        /* @__PURE__ */ (0, import_jsx_runtime330.jsx)("div", { className: cn("flex items-center justify-between border-b p-px transition"), children: /* @__PURE__ */ (0, import_jsx_runtime330.jsx)(
          LinkButton,
          {
            variant: "minimal/medium",
            LeadingIcon: import_solid124.ArrowLeftIcon,
            to: rootPath(),
            fullWidth: !0,
            textAlignLeft: !0,
            children: "Account"
          }
        ) }),
        /* @__PURE__ */ (0, import_jsx_runtime330.jsxs)("div", { className: "h-full overflow-hidden overflow-y-auto pt-2 scrollbar-thin scrollbar-track-transparent scrollbar-thumb-charcoal-600", children: [
          /* @__PURE__ */ (0, import_jsx_runtime330.jsxs)("div", { className: "mb-6 flex flex-col gap-1 px-1", children: [
            /* @__PURE__ */ (0, import_jsx_runtime330.jsx)(SideMenuHeader, { title: user.name ?? user.displayName ?? user.email }),
            /* @__PURE__ */ (0, import_jsx_runtime330.jsx)(
              SideMenuItem,
              {
                name: "Your profile",
                icon: "account",
                iconColor: "text-indigo-500",
                to: accountPath(),
                "data-action": "account"
              }
            )
          ] }),
          v3Enabled && /* @__PURE__ */ (0, import_jsx_runtime330.jsxs)("div", { className: "mb-1 flex flex-col gap-1 px-1", children: [
            /* @__PURE__ */ (0, import_jsx_runtime330.jsx)(SideMenuHeader, { title: "Security" }),
            /* @__PURE__ */ (0, import_jsx_runtime330.jsx)(
              SideMenuItem,
              {
                name: "Personal Access Tokens",
                icon: import_solid123.ShieldCheckIcon,
                iconColor: "text-emerald-500",
                to: personalAccessTokensPath(),
                "data-action": "tokens"
              }
            )
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime330.jsxs)("div", { className: "flex flex-col gap-1 border-t border-grid-bright p-1", children: [
          /* @__PURE__ */ (0, import_jsx_runtime330.jsx)(
            SideMenuItem,
            {
              name: "Join our Discord",
              icon: import_companyicons11.DiscordIcon,
              to: "https://trigger.dev/discord",
              "data-action": "join our discord",
              target: "_blank"
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime330.jsx)(
            SideMenuItem,
            {
              name: "Documentation",
              icon: "docs",
              to: "https://trigger.dev/docs",
              "data-action": "documentation",
              target: "_blank"
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime330.jsx)(
            SideMenuItem,
            {
              name: "Changelog",
              icon: "star",
              to: "https://trigger.dev/changelog",
              "data-action": "changelog",
              target: "_blank"
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime330.jsx)(
            Feedback,
            {
              button: /* @__PURE__ */ (0, import_jsx_runtime330.jsx)(
                Button,
                {
                  variant: "small-menu-item",
                  LeadingIcon: "log",
                  "data-action": "help & feedback",
                  fullWidth: !0,
                  textAlignLeft: !0,
                  children: "Help & Feedback"
                }
              )
            }
          )
        ] })
      ] })
    }
  );
}

// app/routes/account/route.tsx
var import_jsx_runtime331 = require("react/jsx-runtime");
function Page74() {
  let user = useUser();
  return /* @__PURE__ */ (0, import_jsx_runtime331.jsx)(AppContainer, { children: /* @__PURE__ */ (0, import_jsx_runtime331.jsxs)("div", { className: "grid grid-cols-[14rem_1fr] overflow-hidden", children: [
    /* @__PURE__ */ (0, import_jsx_runtime331.jsx)(AccountSideMenu, { user }),
    /* @__PURE__ */ (0, import_jsx_runtime331.jsx)(MainBody, { children: /* @__PURE__ */ (0, import_jsx_runtime331.jsx)(import_react248.Outlet, {}) })
  ] }) });
}

// app/routes/invites.tsx
var invites_exports = {};
__export(invites_exports, {
  action: () => action104,
  default: () => Page75,
  loader: () => loader155
});
var import_react249 = require("@conform-to/react"), import_zod270 = require("@conform-to/zod"), import_node21 = require("@remix-run/node"), import_react250 = require("@remix-run/react"), import_remix_typedjson94 = require("remix-typedjson"), import_zod271 = require("zod"), import_simplur7 = __toESM(require("simplur"));
var import_jsx_runtime332 = require("react/jsx-runtime"), loader155 = async ({ request }) => {
  let user = await requireUser(request), invites = await getUsersInvites({ email: user.email });
  if (invites.length === 0)
    throw (0, import_node21.redirect)(rootPath());
  return (0, import_remix_typedjson94.typedjson)({ invites });
}, schema17 = import_zod271.z.object({
  inviteId: import_zod271.z.string()
}), action104 = async ({ request }) => {
  let userId = await requireUserId(request), formData = await request.formData(), submission = (0, import_zod270.parse)(formData, { schema: schema17 });
  if (!submission.value)
    return (0, import_node21.json)(submission);
  try {
    if (submission.intent === "accept") {
      let { remainingInvites, organization } = await acceptInvite({
        inviteId: submission.value.inviteId,
        userId
      });
      return remainingInvites.length === 0 ? redirectWithSuccessMessage(rootPath(), request, `You joined ${organization.title}`) : redirectWithSuccessMessage(
        invitesPath(),
        request,
        `You joined ${organization.title}`
      );
    } else if (submission.intent === "decline") {
      let { remainingInvites, organization } = await declineInvite({
        inviteId: submission.value.inviteId,
        userId
      });
      return remainingInvites.length === 0 ? redirectWithSuccessMessage(
        rootPath(),
        request,
        `You declined the invite for ${organization.title}`
      ) : redirectWithSuccessMessage(
        invitesPath(),
        request,
        `You declined the invite for ${organization.title}`
      );
    }
  } catch (error) {
    return (0, import_node21.json)({ errors: { body: error.message } }, { status: 400 });
  }
};
function Page75() {
  let { invites } = (0, import_remix_typedjson94.useTypedLoaderData)(), lastSubmission = (0, import_react250.useActionData)(), [form, { inviteId }] = (0, import_react249.useForm)({
    id: "accept-invite",
    // TODO: type this
    lastSubmission,
    onValidate({ formData }) {
      return (0, import_zod270.parse)(formData, { schema: schema17 });
    }
  });
  return /* @__PURE__ */ (0, import_jsx_runtime332.jsx)(AppContainer, { children: /* @__PURE__ */ (0, import_jsx_runtime332.jsx)(MainCenteredContainer, { children: /* @__PURE__ */ (0, import_jsx_runtime332.jsxs)("div", { children: [
    /* @__PURE__ */ (0, import_jsx_runtime332.jsx)(
      FormTitle,
      {
        LeadingIcon: "envelope",
        className: "mb-0 text-sky-500",
        title: import_simplur7.default`You have ${invites.length} new invitation[|s]`
      }
    ),
    invites.map((invite) => /* @__PURE__ */ (0, import_jsx_runtime332.jsx)(import_react250.Form, { method: "post", ...form.props, children: /* @__PURE__ */ (0, import_jsx_runtime332.jsx)(Fieldset, { children: /* @__PURE__ */ (0, import_jsx_runtime332.jsxs)(InputGroup, { className: "flex items-center justify-between border-b border-charcoal-800 py-4", children: [
      /* @__PURE__ */ (0, import_jsx_runtime332.jsxs)("div", { className: "flex flex-col gap-y-0.5 overflow-hidden", children: [
        /* @__PURE__ */ (0, import_jsx_runtime332.jsx)(Header2, { className: "truncate", children: invite.organization.title }),
        /* @__PURE__ */ (0, import_jsx_runtime332.jsxs)(Paragraph, { variant: "small", className: "truncate", children: [
          "Invited by ",
          invite.inviter.displayName ?? invite.inviter.email
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime332.jsx)("input", { name: "inviteId", type: "hidden", value: invite.id })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime332.jsxs)("div", { className: "flex flex-col gap-y-1", children: [
        /* @__PURE__ */ (0, import_jsx_runtime332.jsx)(
          Button,
          {
            type: "submit",
            name: import_react249.conform.INTENT,
            value: "accept",
            variant: "primary/small",
            children: "Accept"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime332.jsx)(
          Button,
          {
            type: "submit",
            name: import_react249.conform.INTENT,
            value: "decline",
            variant: "secondary/small",
            children: "Decline"
          }
        )
      ] })
    ] }) }) }, invite.id))
  ] }) }) });
}

// app/routes/metrics.ts
var metrics_exports = {};
__export(metrics_exports, {
  loader: () => loader156
});
async function loader156({ request }) {
  return new Response(await metricsRegister.metrics(), {
    headers: {
      "Content-Type": metricsRegister.contentType
    }
  });
}

// app/routes/logout.tsx
var logout_exports = {};
__export(logout_exports, {
  action: () => action105,
  loader: () => loader157
});
var import_node22 = require("@remix-run/node");
var action105 = async ({ request }) => {
  if (await getCurrentProjectId(request)) {
    let removeProjectIdSession = await clearCurrentProjectId(request);
    return (0, import_node22.redirect)(logoutPath(), {
      headers: {
        "Set-Cookie": await commitCurrentProjectSession(removeProjectIdSession)
      }
    });
  }
  return await authenticator.logout(request, { redirectTo: "/" });
}, loader157 = async ({ request }) => {
  if (await getCurrentProjectId(request)) {
    let removeProjectIdSession = await clearCurrentProjectId(request);
    return (0, import_node22.redirect)(logoutPath(), {
      headers: {
        "Set-Cookie": await commitCurrentProjectSession(removeProjectIdSession)
      }
    });
  }
  return await authenticator.logout(request, { redirectTo: "/" });
};

// app/routes/admin.tsx
var admin_exports = {};
__export(admin_exports, {
  default: () => Page76,
  loader: () => loader158
});
var import_react251 = require("@remix-run/react"), import_remix_typedjson95 = require("remix-typedjson");
var import_jsx_runtime333 = require("react/jsx-runtime");
async function loader158({ request }) {
  await requireUserId(request);
  let user = await getUser(request);
  return user == null ? (0, import_remix_typedjson95.redirect)("/") : user.admin ? (0, import_remix_typedjson95.typedjson)({ user }) : (0, import_remix_typedjson95.redirect)("/");
}
function Page76() {
  return /* @__PURE__ */ (0, import_jsx_runtime333.jsxs)("div", { className: "h-full w-full", children: [
    /* @__PURE__ */ (0, import_jsx_runtime333.jsxs)("div", { className: "flex items-center justify-between p-4", children: [
      /* @__PURE__ */ (0, import_jsx_runtime333.jsx)(
        Tabs,
        {
          tabs: [
            {
              label: "Users",
              to: "/admin"
            },
            {
              label: "Organizations",
              to: "/admin/orgs"
            }
          ],
          layoutId: "admin"
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime333.jsx)(LinkButton, { to: "/", variant: "tertiary/small", className: "mb-4", children: "Back to me" })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime333.jsx)(import_react251.Outlet, {})
  ] });
}

// app/routes/magic.tsx
var magic_exports = {};
__export(magic_exports, {
  loader: () => loader159
});
async function loader159({ request }) {
  let redirectTo = await getRedirectTo(request);
  await authenticator.authenticate("email-link", request, {
    successRedirect: redirectTo ?? "/",
    failureRedirect: "/login/magic"
  });
}

// app/routes/_app/route.tsx
var route_exports160 = {};
__export(route_exports160, {
  ErrorBoundary: () => ErrorBoundary5,
  default: () => App3,
  loader: () => loader160
});
var import_react252 = require("@remix-run/react"), import_remix_typedjson96 = require("remix-typedjson");
var import_jsx_runtime334 = require("react/jsx-runtime"), loader160 = async ({ request }) => (await requireUser(request)).confirmedBasicDetails ? (0, import_remix_typedjson96.typedjson)(
  {},
  {
    headers: { "Set-Cookie": await commitSession3(await clearRedirectTo(request)) }
  }
) : (0, import_remix_typedjson96.redirect)(confirmBasicDetailsPath());
function App3() {
  return /* @__PURE__ */ (0, import_jsx_runtime334.jsx)(AppContainer, { children: /* @__PURE__ */ (0, import_jsx_runtime334.jsx)(import_react252.Outlet, {}) });
}
function ErrorBoundary5() {
  return /* @__PURE__ */ (0, import_jsx_runtime334.jsx)(import_jsx_runtime334.Fragment, { children: /* @__PURE__ */ (0, import_jsx_runtime334.jsx)(AppContainer, { children: /* @__PURE__ */ (0, import_jsx_runtime334.jsx)(MainCenteredContainer, { children: /* @__PURE__ */ (0, import_jsx_runtime334.jsx)(RouteErrorDisplay, {}) }) }) });
}

// server-assets-manifest:@remix-run/dev/assets-manifest
var assets_manifest_default = { entry: { module: "/build/entry.client-RRO32PML.js", imports: ["/build/_shared/chunk-DGKAL6G7.js", "/build/_shared/chunk-XEZL6SGQ.js", "/build/_shared/chunk-LYHQCUWL.js", "/build/_shared/chunk-OEL7GHJS.js", "/build/_shared/chunk-FTYKMG53.js", "/build/_shared/chunk-G5WX4PPA.js"] }, routes: { root: { id: "root", parentId: void 0, path: "", index: void 0, caseSensitive: void 0, module: "/build/root-MPLL3MIH.js", imports: ["/build/_shared/chunk-UZLWJGHK.js", "/build/_shared/chunk-TVQJMHSX.js", "/build/_shared/chunk-KFWL4OKU.js", "/build/_shared/chunk-UW7CEVYE.js", "/build/_shared/chunk-FVYECWQQ.js", "/build/_shared/chunk-BDMKDQRC.js", "/build/_shared/chunk-UGCEOWBE.js", "/build/_shared/chunk-V7RLTIQT.js", "/build/_shared/chunk-HKHUV7OI.js", "/build/_shared/chunk-RTPAOLHU.js", "/build/_shared/chunk-BIWIT6XE.js", "/build/_shared/chunk-4QBAYZXH.js", "/build/_shared/chunk-WTLCO7GZ.js", "/build/_shared/chunk-2B3SSTVQ.js", "/build/_shared/chunk-NYYE4FTH.js", "/build/_shared/chunk-BJJDMBQV.js", "/build/_shared/chunk-GP5XYEW5.js", "/build/_shared/chunk-4WHSRCQV.js", "/build/_shared/chunk-ZBQ6KKHY.js", "/build/_shared/chunk-QRF3DCUW.js", "/build/_shared/chunk-L5OF72BL.js", "/build/_shared/chunk-KIAMXGUL.js", "/build/_shared/chunk-LRJWEOAP.js", "/build/_shared/chunk-53BC46H2.js", "/build/_shared/chunk-GVVQJ7TX.js", "/build/_shared/chunk-4QLYPARN.js", "/build/_shared/chunk-AEDMGY7M.js", "/build/_shared/chunk-JHQSSEEW.js", "/build/_shared/chunk-O6T3OKOB.js", "/build/_shared/chunk-LZFJYVDM.js", "/build/_shared/chunk-2X7GG4YA.js", "/build/_shared/chunk-6VY3TGHV.js", "/build/_shared/chunk-MIFQNMZY.js", "/build/_shared/chunk-LBCN2YVJ.js", "/build/_shared/chunk-LD5CY63I.js", "/build/_shared/chunk-Y7Z57SGD.js", "/build/_shared/chunk-LKTYH4KV.js", "/build/_shared/chunk-X7G7TLQ6.js", "/build/_shared/chunk-HS3AAZGP.js", "/build/_shared/chunk-SNHKI5QX.js", "/build/_shared/chunk-G26VUZ3V.js", "/build/_shared/chunk-5XDHH4UN.js", "/build/_shared/chunk-7ENN74BL.js", "/build/_shared/chunk-G4EM45JG.js", "/build/_shared/chunk-ANF4WBNI.js", "/build/_shared/chunk-4W4YPBCQ.js", "/build/_shared/chunk-HRCMIQSB.js", "/build/_shared/chunk-L6B4ZRM6.js", "/build/_shared/chunk-QMQUAZ65.js", "/build/_shared/chunk-YOYFDK4O.js", "/build/_shared/chunk-ICEDALHM.js", "/build/_shared/chunk-ZOFUYGVL.js", "/build/_shared/chunk-A4HAOIEH.js", "/build/_shared/chunk-REAXH7HE.js", "/build/_shared/chunk-XO75RT3N.js", "/build/_shared/chunk-NTXIRLKV.js", "/build/_shared/chunk-VMR4SOYV.js", "/build/_shared/chunk-ITYDXQLP.js", "/build/_shared/chunk-TCCEOGB7.js"], hasAction: !1, hasLoader: !0, hasErrorBoundary: !0 }, "routes/_app": { id: "routes/_app", parentId: "root", path: void 0, index: void 0, caseSensitive: void 0, module: "/build/routes/_app-PSAVCQ6S.js", imports: ["/build/_shared/chunk-JL6U2AQJ.js"], hasAction: !1, hasLoader: !0, hasErrorBoundary: !0 }, "routes/_app._index": { id: "routes/_app._index", parentId: "routes/_app", path: void 0, index: !0, caseSensitive: void 0, module: "/build/routes/_app._index-LNT3QBJG.js", imports: void 0, hasAction: !1, hasLoader: !0, hasErrorBoundary: !1 }, "routes/_app.orgs.$organizationId.subscription.canceled": { id: "routes/_app.orgs.$organizationId.subscription.canceled", parentId: "routes/_app", path: "orgs/:organizationId/subscription/canceled", index: void 0, caseSensitive: void 0, module: "/build/routes/_app.orgs.$organizationId.subscription.canceled-MSFFTCSH.js", imports: void 0, hasAction: !1, hasLoader: !0, hasErrorBoundary: !1 }, "routes/_app.orgs.$organizationId.subscription.complete": { id: "routes/_app.orgs.$organizationId.subscription.complete", parentId: "routes/_app", path: "orgs/:organizationId/subscription/complete", index: void 0, caseSensitive: void 0, module: "/build/routes/_app.orgs.$organizationId.subscription.complete-KMCBWQFP.js", imports: void 0, hasAction: !1, hasLoader: !0, hasErrorBoundary: !1 }, "routes/_app.orgs.$organizationId.subscription.failed": { id: "routes/_app.orgs.$organizationId.subscription.failed", parentId: "routes/_app", path: "orgs/:organizationId/subscription/failed", index: void 0, caseSensitive: void 0, module: "/build/routes/_app.orgs.$organizationId.subscription.failed-XM4TC5UT.js", imports: void 0, hasAction: !1, hasLoader: !0, hasErrorBoundary: !1 }, "routes/_app.orgs.$organizationId.subscription.v3.canceled": { id: "routes/_app.orgs.$organizationId.subscription.v3.canceled", parentId: "routes/_app", path: "orgs/:organizationId/subscription/v3/canceled", index: void 0, caseSensitive: void 0, module: "/build/routes/_app.orgs.$organizationId.subscription.v3.canceled-4ENDEWNU.js", imports: void 0, hasAction: !1, hasLoader: !0, hasErrorBoundary: !1 }, "routes/_app.orgs.$organizationId.subscription.v3.complete": { id: "routes/_app.orgs.$organizationId.subscription.v3.complete", parentId: "routes/_app", path: "orgs/:organizationId/subscription/v3/complete", index: void 0, caseSensitive: void 0, module: "/build/routes/_app.orgs.$organizationId.subscription.v3.complete-37GMJT36.js", imports: void 0, hasAction: !1, hasLoader: !0, hasErrorBoundary: !1 }, "routes/_app.orgs.$organizationId.subscription.v3.failed": { id: "routes/_app.orgs.$organizationId.subscription.v3.failed", parentId: "routes/_app", path: "orgs/:organizationId/subscription/v3/failed", index: void 0, caseSensitive: void 0, module: "/build/routes/_app.orgs.$organizationId.subscription.v3.failed-BV5GNDYC.js", imports: void 0, hasAction: !1, hasLoader: !0, hasErrorBoundary: !1 }, "routes/_app.orgs.$organizationId.subscription.v3.free_connect_failed": { id: "routes/_app.orgs.$organizationId.subscription.v3.free_connect_failed", parentId: "routes/_app", path: "orgs/:organizationId/subscription/v3/free_connect_failed", index: void 0, caseSensitive: void 0, module: "/build/routes/_app.orgs.$organizationId.subscription.v3.free_connect_failed-EI6D5BSV.js", imports: void 0, hasAction: !1, hasLoader: !0, hasErrorBoundary: !1 }, "routes/_app.orgs.$organizationId.subscription.v3.free_connect_success": { id: "routes/_app.orgs.$organizationId.subscription.v3.free_connect_success", parentId: "routes/_app", path: "orgs/:organizationId/subscription/v3/free_connect_success", index: void 0, caseSensitive: void 0, module: "/build/routes/_app.orgs.$organizationId.subscription.v3.free_connect_success-5CFWSXHD.js", imports: void 0, hasAction: !1, hasLoader: !0, hasErrorBoundary: !1 }, "routes/_app.orgs.$organizationSlug": { id: "routes/_app.orgs.$organizationSlug", parentId: "routes/_app", path: "orgs/:organizationSlug", index: void 0, caseSensitive: void 0, module: "/build/routes/_app.orgs.$organizationSlug-YTLH32KT.js", imports: ["/build/_shared/chunk-UW7CEVYE.js", "/build/_shared/chunk-FVYECWQQ.js", "/build/_shared/chunk-BDMKDQRC.js", "/build/_shared/chunk-UGCEOWBE.js", "/build/_shared/chunk-V7RLTIQT.js", "/build/_shared/chunk-HKHUV7OI.js", "/build/_shared/chunk-RTPAOLHU.js", "/build/_shared/chunk-BIWIT6XE.js", "/build/_shared/chunk-4QBAYZXH.js", "/build/_shared/chunk-WTLCO7GZ.js", "/build/_shared/chunk-2B3SSTVQ.js", "/build/_shared/chunk-NYYE4FTH.js", "/build/_shared/chunk-BJJDMBQV.js", "/build/_shared/chunk-GP5XYEW5.js", "/build/_shared/chunk-4WHSRCQV.js", "/build/_shared/chunk-ZBQ6KKHY.js", "/build/_shared/chunk-QRF3DCUW.js", "/build/_shared/chunk-L5OF72BL.js", "/build/_shared/chunk-KIAMXGUL.js", "/build/_shared/chunk-LRJWEOAP.js", "/build/_shared/chunk-53BC46H2.js", "/build/_shared/chunk-GVVQJ7TX.js", "/build/_shared/chunk-4QLYPARN.js", "/build/_shared/chunk-AEDMGY7M.js", "/build/_shared/chunk-JHQSSEEW.js", "/build/_shared/chunk-LZFJYVDM.js", "/build/_shared/chunk-2X7GG4YA.js", "/build/_shared/chunk-6VY3TGHV.js", "/build/_shared/chunk-LBCN2YVJ.js", "/build/_shared/chunk-LD5CY63I.js", "/build/_shared/chunk-Y7Z57SGD.js", "/build/_shared/chunk-LKTYH4KV.js", "/build/_shared/chunk-X7G7TLQ6.js", "/build/_shared/chunk-HS3AAZGP.js", "/build/_shared/chunk-SNHKI5QX.js", "/build/_shared/chunk-G26VUZ3V.js", "/build/_shared/chunk-5XDHH4UN.js", "/build/_shared/chunk-7ENN74BL.js", "/build/_shared/chunk-G4EM45JG.js", "/build/_shared/chunk-ANF4WBNI.js", "/build/_shared/chunk-4W4YPBCQ.js", "/build/_shared/chunk-HRCMIQSB.js", "/build/_shared/chunk-L6B4ZRM6.js", "/build/_shared/chunk-QMQUAZ65.js", "/build/_shared/chunk-YOYFDK4O.js", "/build/_shared/chunk-ICEDALHM.js", "/build/_shared/chunk-ZOFUYGVL.js", "/build/_shared/chunk-A4HAOIEH.js", "/build/_shared/chunk-REAXH7HE.js", "/build/_shared/chunk-XO75RT3N.js", "/build/_shared/chunk-NTXIRLKV.js", "/build/_shared/chunk-VMR4SOYV.js", "/build/_shared/chunk-ITYDXQLP.js", "/build/_shared/chunk-TCCEOGB7.js"], hasAction: !1, hasLoader: !0, hasErrorBoundary: !0 }, "routes/_app.orgs.$organizationSlug._index": { id: "routes/_app.orgs.$organizationSlug._index", parentId: "routes/_app.orgs.$organizationSlug", path: void 0, index: !0, caseSensitive: void 0, module: "/build/routes/_app.orgs.$organizationSlug._index-ZJRTAX4B.js", imports: ["/build/_shared/chunk-JCMXX2MW.js", "/build/_shared/chunk-GDVQ557H.js", "/build/_shared/chunk-SBSGXD5Z.js", "/build/_shared/chunk-NB6GFRNN.js"], hasAction: !1, hasLoader: !1, hasErrorBoundary: !1 }, "routes/_app.orgs.$organizationSlug.billing": { id: "routes/_app.orgs.$organizationSlug.billing", parentId: "routes/_app.orgs.$organizationSlug", path: "billing", index: void 0, caseSensitive: void 0, module: "/build/routes/_app.orgs.$organizationSlug.billing-7VRMG7X2.js", imports: ["/build/_shared/chunk-GDVQ557H.js", "/build/_shared/chunk-SBSGXD5Z.js", "/build/_shared/chunk-NB6GFRNN.js", "/build/_shared/chunk-2BLSR254.js"], hasAction: !1, hasLoader: !1, hasErrorBoundary: !1 }, "routes/_app.orgs.$organizationSlug.billing._index": { id: "routes/_app.orgs.$organizationSlug.billing._index", parentId: "routes/_app.orgs.$organizationSlug.billing", path: void 0, index: !0, caseSensitive: void 0, module: "/build/routes/_app.orgs.$organizationSlug.billing._index-3ZXDWETD.js", imports: ["/build/_shared/chunk-5Y7YZGBM.js", "/build/_shared/chunk-NJAYDH4L.js", "/build/_shared/chunk-6MAI3NMP.js", "/build/_shared/chunk-CPXEV6S7.js", "/build/_shared/chunk-UW7CEVYE.js", "/build/_shared/chunk-FVYECWQQ.js", "/build/_shared/chunk-BDMKDQRC.js", "/build/_shared/chunk-UGCEOWBE.js", "/build/_shared/chunk-V7RLTIQT.js", "/build/_shared/chunk-HKHUV7OI.js", "/build/_shared/chunk-RTPAOLHU.js", "/build/_shared/chunk-BIWIT6XE.js", "/build/_shared/chunk-4QBAYZXH.js", "/build/_shared/chunk-WTLCO7GZ.js", "/build/_shared/chunk-2B3SSTVQ.js", "/build/_shared/chunk-NYYE4FTH.js", "/build/_shared/chunk-BJJDMBQV.js", "/build/_shared/chunk-GP5XYEW5.js", "/build/_shared/chunk-4WHSRCQV.js", "/build/_shared/chunk-ZBQ6KKHY.js", "/build/_shared/chunk-QRF3DCUW.js", "/build/_shared/chunk-L5OF72BL.js", "/build/_shared/chunk-KIAMXGUL.js", "/build/_shared/chunk-LRJWEOAP.js", "/build/_shared/chunk-53BC46H2.js", "/build/_shared/chunk-GVVQJ7TX.js", "/build/_shared/chunk-4QLYPARN.js", "/build/_shared/chunk-AEDMGY7M.js", "/build/_shared/chunk-JHQSSEEW.js", "/build/_shared/chunk-LZFJYVDM.js", "/build/_shared/chunk-2X7GG4YA.js", "/build/_shared/chunk-6VY3TGHV.js", "/build/_shared/chunk-LBCN2YVJ.js", "/build/_shared/chunk-LD5CY63I.js", "/build/_shared/chunk-Y7Z57SGD.js", "/build/_shared/chunk-LKTYH4KV.js", "/build/_shared/chunk-X7G7TLQ6.js", "/build/_shared/chunk-HS3AAZGP.js", "/build/_shared/chunk-SNHKI5QX.js", "/build/_shared/chunk-G26VUZ3V.js", "/build/_shared/chunk-5XDHH4UN.js", "/build/_shared/chunk-7ENN74BL.js", "/build/_shared/chunk-G4EM45JG.js", "/build/_shared/chunk-ANF4WBNI.js", "/build/_shared/chunk-4W4YPBCQ.js", "/build/_shared/chunk-HRCMIQSB.js", "/build/_shared/chunk-L6B4ZRM6.js", "/build/_shared/chunk-QMQUAZ65.js", "/build/_shared/chunk-YOYFDK4O.js", "/build/_shared/chunk-ICEDALHM.js", "/build/_shared/chunk-ZOFUYGVL.js", "/build/_shared/chunk-A4HAOIEH.js", "/build/_shared/chunk-REAXH7HE.js", "/build/_shared/chunk-XO75RT3N.js", "/build/_shared/chunk-NTXIRLKV.js", "/build/_shared/chunk-VMR4SOYV.js", "/build/_shared/chunk-ITYDXQLP.js", "/build/_shared/chunk-TCCEOGB7.js"], hasAction: !1, hasLoader: !0, hasErrorBoundary: !1 }, "routes/_app.orgs.$organizationSlug.billing.plans": { id: "routes/_app.orgs.$organizationSlug.billing.plans", parentId: "routes/_app.orgs.$organizationSlug.billing", path: "plans", index: void 0, caseSensitive: void 0, module: "/build/routes/_app.orgs.$organizationSlug.billing.plans-CJXZLAKL.js", imports: ["/build/_shared/chunk-DUWJZIKN.js", "/build/_shared/chunk-MBHX5NR2.js", "/build/_shared/chunk-JT5NPEQM.js", "/build/_shared/chunk-NYEYKKUU.js", "/build/_shared/chunk-FVTY47DG.js", "/build/_shared/chunk-6MAI3NMP.js", "/build/_shared/chunk-5Y65PHTP.js", "/build/_shared/chunk-J4EBRO22.js", "/build/_shared/chunk-AAKY77KV.js", "/build/_shared/chunk-67PE2T7V.js", "/build/_shared/chunk-UW7CEVYE.js", "/build/_shared/chunk-FVYECWQQ.js", "/build/_shared/chunk-BDMKDQRC.js", "/build/_shared/chunk-UGCEOWBE.js", "/build/_shared/chunk-V7RLTIQT.js", "/build/_shared/chunk-HKHUV7OI.js", "/build/_shared/chunk-RTPAOLHU.js", "/build/_shared/chunk-BIWIT6XE.js", "/build/_shared/chunk-4QBAYZXH.js", "/build/_shared/chunk-WTLCO7GZ.js", "/build/_shared/chunk-2B3SSTVQ.js", "/build/_shared/chunk-NYYE4FTH.js", "/build/_shared/chunk-BJJDMBQV.js", "/build/_shared/chunk-GP5XYEW5.js", "/build/_shared/chunk-4WHSRCQV.js", "/build/_shared/chunk-ZBQ6KKHY.js", "/build/_shared/chunk-QRF3DCUW.js", "/build/_shared/chunk-L5OF72BL.js", "/build/_shared/chunk-KIAMXGUL.js", "/build/_shared/chunk-LRJWEOAP.js", "/build/_shared/chunk-53BC46H2.js", "/build/_shared/chunk-GVVQJ7TX.js", "/build/_shared/chunk-4QLYPARN.js", "/build/_shared/chunk-AEDMGY7M.js", "/build/_shared/chunk-JHQSSEEW.js", "/build/_shared/chunk-LZFJYVDM.js", "/build/_shared/chunk-2X7GG4YA.js", "/build/_shared/chunk-6VY3TGHV.js", "/build/_shared/chunk-LBCN2YVJ.js", "/build/_shared/chunk-LD5CY63I.js", "/build/_shared/chunk-Y7Z57SGD.js", "/build/_shared/chunk-LKTYH4KV.js", "/build/_shared/chunk-X7G7TLQ6.js", "/build/_shared/chunk-HS3AAZGP.js", "/build/_shared/chunk-SNHKI5QX.js", "/build/_shared/chunk-G26VUZ3V.js", "/build/_shared/chunk-5XDHH4UN.js", "/build/_shared/chunk-7ENN74BL.js", "/build/_shared/chunk-G4EM45JG.js", "/build/_shared/chunk-ANF4WBNI.js", "/build/_shared/chunk-4W4YPBCQ.js", "/build/_shared/chunk-HRCMIQSB.js", "/build/_shared/chunk-L6B4ZRM6.js", "/build/_shared/chunk-QMQUAZ65.js", "/build/_shared/chunk-YOYFDK4O.js", "/build/_shared/chunk-ICEDALHM.js", "/build/_shared/chunk-ZOFUYGVL.js", "/build/_shared/chunk-A4HAOIEH.js", "/build/_shared/chunk-REAXH7HE.js", "/build/_shared/chunk-XO75RT3N.js", "/build/_shared/chunk-NTXIRLKV.js", "/build/_shared/chunk-VMR4SOYV.js", "/build/_shared/chunk-ITYDXQLP.js", "/build/_shared/chunk-TCCEOGB7.js"], hasAction: !1, hasLoader: !0, hasErrorBoundary: !1 }, "routes/_app.orgs.$organizationSlug.integrations": { id: "routes/_app.orgs.$organizationSlug.integrations", parentId: "routes/_app.orgs.$organizationSlug", path: "integrations", index: void 0, caseSensitive: void 0, module: "/build/routes/_app.orgs.$organizationSlug.integrations-BRTYZ4HT.js", imports: ["/build/_shared/chunk-AV3RTZY3.js", "/build/_shared/chunk-VZ4WLVAR.js", "/build/_shared/chunk-OQFKWQUG.js", "/build/_shared/chunk-IO5YMY4B.js", "/build/_shared/chunk-B6ECCFQG.js", "/build/_shared/chunk-GMFAY4XV.js", "/build/_shared/chunk-5Y65PHTP.js", "/build/_shared/chunk-J4EBRO22.js", "/build/_shared/chunk-AAKY77KV.js", "/build/_shared/chunk-67PE2T7V.js", "/build/_shared/chunk-MV6LLXFW.js", "/build/_shared/chunk-IGQQPLIH.js", "/build/_shared/chunk-S7WDFHSM.js", "/build/_shared/chunk-ICAPXTLO.js", "/build/_shared/chunk-RNSPZWJ4.js", "/build/_shared/chunk-XLUNUOUT.js", "/build/_shared/chunk-AXRBBWHF.js", "/build/_shared/chunk-LYMFAN7V.js", "/build/_shared/chunk-RJPCQAIK.js", "/build/_shared/chunk-JCMXX2MW.js", "/build/_shared/chunk-GDVQ557H.js", "/build/_shared/chunk-SBSGXD5Z.js", "/build/_shared/chunk-NB6GFRNN.js", "/build/_shared/chunk-GWRYVNME.js", "/build/_shared/chunk-FKWMQIXM.js", "/build/_shared/chunk-KFWL4OKU.js", "/build/_shared/chunk-O6T3OKOB.js", "/build/_shared/chunk-TGPNMAVK.js", "/build/_shared/chunk-PL77FHJK.js"], hasAction: !1, hasLoader: !0, hasErrorBoundary: !1 }, "routes/_app.orgs.$organizationSlug.integrations_.$clientParam": { id: "routes/_app.orgs.$organizationSlug.integrations_.$clientParam", parentId: "routes/_app.orgs.$organizationSlug", path: "integrations/:clientParam", index: void 0, caseSensitive: void 0, module: "/build/routes/_app.orgs.$organizationSlug.integrations_.$clientParam-7L2MNDUN.js", imports: ["/build/_shared/chunk-XSIEBQIL.js", "/build/_shared/chunk-GDVQ557H.js", "/build/_shared/chunk-SBSGXD5Z.js", "/build/_shared/chunk-NB6GFRNN.js"], hasAction: !1, hasLoader: !0, hasErrorBoundary: !1 }, "routes/_app.orgs.$organizationSlug.integrations_.$clientParam._index": { id: "routes/_app.orgs.$organizationSlug.integrations_.$clientParam._index", parentId: "routes/_app.orgs.$organizationSlug.integrations_.$clientParam", path: void 0, index: !0, caseSensitive: void 0, module: "/build/routes/_app.orgs.$organizationSlug.integrations_.$clientParam._index-RBT3GVVW.js", imports: ["/build/_shared/chunk-ORTAEW5A.js", "/build/_shared/chunk-AV3RTZY3.js", "/build/_shared/chunk-CTSJ46IG.js", "/build/_shared/chunk-MV6LLXFW.js", "/build/_shared/chunk-IGQQPLIH.js", "/build/_shared/chunk-S7WDFHSM.js", "/build/_shared/chunk-ICAPXTLO.js", "/build/_shared/chunk-RNSPZWJ4.js", "/build/_shared/chunk-LYMFAN7V.js", "/build/_shared/chunk-RJPCQAIK.js", "/build/_shared/chunk-FKWMQIXM.js", "/build/_shared/chunk-KFWL4OKU.js", "/build/_shared/chunk-BIWIT6XE.js", "/build/_shared/chunk-4QBAYZXH.js", "/build/_shared/chunk-WTLCO7GZ.js", "/build/_shared/chunk-2B3SSTVQ.js", "/build/_shared/chunk-ZBQ6KKHY.js", "/build/_shared/chunk-KIAMXGUL.js", "/build/_shared/chunk-O6T3OKOB.js", "/build/_shared/chunk-LZFJYVDM.js", "/build/_shared/chunk-2X7GG4YA.js", "/build/_shared/chunk-6VY3TGHV.js", "/build/_shared/chunk-2UG43HVU.js", "/build/_shared/chunk-VYWDFFOA.js", "/build/_shared/chunk-TGPNMAVK.js", "/build/_shared/chunk-LBCN2YVJ.js", "/build/_shared/chunk-LD5CY63I.js", "/build/_shared/chunk-Y7Z57SGD.js", "/build/_shared/chunk-LKTYH4KV.js", "/build/_shared/chunk-X7G7TLQ6.js", "/build/_shared/chunk-HS3AAZGP.js", "/build/_shared/chunk-SNHKI5QX.js", "/build/_shared/chunk-G26VUZ3V.js", "/build/_shared/chunk-5XDHH4UN.js", "/build/_shared/chunk-7ENN74BL.js", "/build/_shared/chunk-ZNKOM7PO.js", "/build/_shared/chunk-PL77FHJK.js", "/build/_shared/chunk-G4EM45JG.js", "/build/_shared/chunk-ANF4WBNI.js", "/build/_shared/chunk-4W4YPBCQ.js", "/build/_shared/chunk-HRCMIQSB.js", "/build/_shared/chunk-L6B4ZRM6.js", "/build/_shared/chunk-QMQUAZ65.js", "/build/_shared/chunk-YOYFDK4O.js", "/build/_shared/chunk-ICEDALHM.js", "/build/_shared/chunk-ZOFUYGVL.js", "/build/_shared/chunk-A4HAOIEH.js", "/build/_shared/chunk-REAXH7HE.js", "/build/_shared/chunk-XO75RT3N.js", "/build/_shared/chunk-NTXIRLKV.js", "/build/_shared/chunk-VMR4SOYV.js", "/build/_shared/chunk-ITYDXQLP.js", "/build/_shared/chunk-TCCEOGB7.js"], hasAction: !1, hasLoader: !0, hasErrorBoundary: !1 }, "routes/_app.orgs.$organizationSlug.integrations_.$clientParam.connections": { id: "routes/_app.orgs.$organizationSlug.integrations_.$clientParam.connections", parentId: "routes/_app.orgs.$organizationSlug.integrations_.$clientParam", path: "connections", index: void 0, caseSensitive: void 0, module: "/build/routes/_app.orgs.$organizationSlug.integrations_.$clientParam.connections-MVDHKJZ3.js", imports: ["/build/_shared/chunk-TGPNMAVK.js", "/build/_shared/chunk-LBCN2YVJ.js", "/build/_shared/chunk-LD5CY63I.js", "/build/_shared/chunk-Y7Z57SGD.js", "/build/_shared/chunk-LKTYH4KV.js", "/build/_shared/chunk-X7G7TLQ6.js", "/build/_shared/chunk-HS3AAZGP.js", "/build/_shared/chunk-SNHKI5QX.js", "/build/_shared/chunk-5XDHH4UN.js", "/build/_shared/chunk-7ENN74BL.js", "/build/_shared/chunk-4W4YPBCQ.js", "/build/_shared/chunk-HRCMIQSB.js", "/build/_shared/chunk-L6B4ZRM6.js", "/build/_shared/chunk-QMQUAZ65.js", "/build/_shared/chunk-YOYFDK4O.js", "/build/_shared/chunk-ICEDALHM.js", "/build/_shared/chunk-ZOFUYGVL.js", "/build/_shared/chunk-A4HAOIEH.js", "/build/_shared/chunk-REAXH7HE.js", "/build/_shared/chunk-XO75RT3N.js", "/build/_shared/chunk-NTXIRLKV.js", "/build/_shared/chunk-VMR4SOYV.js", "/build/_shared/chunk-ITYDXQLP.js", "/build/_shared/chunk-TCCEOGB7.js"], hasAction: !1, hasLoader: !0, hasErrorBoundary: !1 }, "routes/_app.orgs.$organizationSlug.integrations_.$clientParam.scopes": { id: "routes/_app.orgs.$organizationSlug.integrations_.$clientParam.scopes", parentId: "routes/_app.orgs.$organizationSlug.integrations_.$clientParam", path: "scopes", index: void 0, caseSensitive: void 0, module: "/build/routes/_app.orgs.$organizationSlug.integrations_.$clientParam.scopes-SGSQ7U3R.js", imports: ["/build/_shared/chunk-LBCN2YVJ.js", "/build/_shared/chunk-SNHKI5QX.js", "/build/_shared/chunk-5XDHH4UN.js", "/build/_shared/chunk-7ENN74BL.js", "/build/_shared/chunk-VMR4SOYV.js", "/build/_shared/chunk-ITYDXQLP.js", "/build/_shared/chunk-TCCEOGB7.js"], hasAction: !1, hasLoader: !0, hasErrorBoundary: !1 }, "routes/_app.orgs.$organizationSlug.invite": { id: "routes/_app.orgs.$organizationSlug.invite", parentId: "routes/_app.orgs.$organizationSlug", path: "invite", index: void 0, caseSensitive: void 0, module: "/build/routes/_app.orgs.$organizationSlug.invite-N6BD7D6E.js", imports: ["/build/_shared/chunk-W4RB4EX3.js", "/build/_shared/chunk-GQNIVODX.js", "/build/_shared/chunk-TI42EI3A.js", "/build/_shared/chunk-MNKRFUW7.js", "/build/_shared/chunk-LYMFAN7V.js", "/build/_shared/chunk-JCMXX2MW.js", "/build/_shared/chunk-5TRFQBKG.js", "/build/_shared/chunk-GWRYVNME.js"], hasAction: !0, hasLoader: !0, hasErrorBoundary: !1 }, "routes/_app.orgs.$organizationSlug.projects.$projectParam": { id: "routes/_app.orgs.$organizationSlug.projects.$projectParam", parentId: "routes/_app.orgs.$organizationSlug", path: "projects/:projectParam", index: void 0, caseSensitive: void 0, module: "/build/routes/_app.orgs.$organizationSlug.projects.$projectParam-QBBVMW2W.js", imports: ["/build/_shared/chunk-GWRYVNME.js", "/build/_shared/chunk-O6T3OKOB.js"], hasAction: !1, hasLoader: !0, hasErrorBoundary: !0 }, "routes/_app.orgs.$organizationSlug.projects.$projectParam._index": { id: "routes/_app.orgs.$organizationSlug.projects.$projectParam._index", parentId: "routes/_app.orgs.$organizationSlug.projects.$projectParam", path: void 0, index: !0, caseSensitive: void 0, module: "/build/routes/_app.orgs.$organizationSlug.projects.$projectParam._index-6BDF2KEC.js", imports: ["/build/_shared/chunk-ORTAEW5A.js", "/build/_shared/chunk-AV3RTZY3.js", "/build/_shared/chunk-HVEYRND3.js", "/build/_shared/chunk-2DRPYDF3.js", "/build/_shared/chunk-NJUSZZ2I.js", "/build/_shared/chunk-FPRIQJC3.js", "/build/_shared/chunk-USHGOTXM.js", "/build/_shared/chunk-WW5XDXG5.js", "/build/_shared/chunk-VZQAUHJP.js", "/build/_shared/chunk-3VNJH3WZ.js", "/build/_shared/chunk-F3BE4C75.js", "/build/_shared/chunk-W7BBUHKF.js", "/build/_shared/chunk-IO5YMY4B.js", "/build/_shared/chunk-J4EBRO22.js", "/build/_shared/chunk-AAKY77KV.js", "/build/_shared/chunk-67PE2T7V.js", "/build/_shared/chunk-CTSJ46IG.js", "/build/_shared/chunk-IGQQPLIH.js", "/build/_shared/chunk-LYMFAN7V.js", "/build/_shared/chunk-GDVQ557H.js", "/build/_shared/chunk-SBSGXD5Z.js", "/build/_shared/chunk-NB6GFRNN.js", "/build/_shared/chunk-FKWMQIXM.js", "/build/_shared/chunk-UW7CEVYE.js", "/build/_shared/chunk-FVYECWQQ.js", "/build/_shared/chunk-BDMKDQRC.js", "/build/_shared/chunk-UGCEOWBE.js", "/build/_shared/chunk-V7RLTIQT.js", "/build/_shared/chunk-HKHUV7OI.js", "/build/_shared/chunk-RTPAOLHU.js", "/build/_shared/chunk-BIWIT6XE.js", "/build/_shared/chunk-4QBAYZXH.js", "/build/_shared/chunk-WTLCO7GZ.js", "/build/_shared/chunk-2B3SSTVQ.js", "/build/_shared/chunk-NYYE4FTH.js", "/build/_shared/chunk-BJJDMBQV.js", "/build/_shared/chunk-GP5XYEW5.js", "/build/_shared/chunk-4WHSRCQV.js", "/build/_shared/chunk-ZBQ6KKHY.js", "/build/_shared/chunk-QRF3DCUW.js", "/build/_shared/chunk-L5OF72BL.js", "/build/_shared/chunk-KIAMXGUL.js", "/build/_shared/chunk-LRJWEOAP.js", "/build/_shared/chunk-53BC46H2.js", "/build/_shared/chunk-GVVQJ7TX.js", "/build/_shared/chunk-4QLYPARN.js", "/build/_shared/chunk-AEDMGY7M.js", "/build/_shared/chunk-JHQSSEEW.js", "/build/_shared/chunk-LZFJYVDM.js", "/build/_shared/chunk-2X7GG4YA.js", "/build/_shared/chunk-6VY3TGHV.js", "/build/_shared/chunk-2UG43HVU.js", "/build/_shared/chunk-VYWDFFOA.js", "/build/_shared/chunk-TGPNMAVK.js", "/build/_shared/chunk-LBCN2YVJ.js", "/build/_shared/chunk-LD5CY63I.js", "/build/_shared/chunk-Y7Z57SGD.js", "/build/_shared/chunk-LKTYH4KV.js", "/build/_shared/chunk-X7G7TLQ6.js", "/build/_shared/chunk-HS3AAZGP.js", "/build/_shared/chunk-SNHKI5QX.js", "/build/_shared/chunk-G26VUZ3V.js", "/build/_shared/chunk-5XDHH4UN.js", "/build/_shared/chunk-7ENN74BL.js", "/build/_shared/chunk-ZNKOM7PO.js", "/build/_shared/chunk-G4EM45JG.js", "/build/_shared/chunk-ANF4WBNI.js", "/build/_shared/chunk-4W4YPBCQ.js", "/build/_shared/chunk-HRCMIQSB.js", "/build/_shared/chunk-L6B4ZRM6.js", "/build/_shared/chunk-QMQUAZ65.js", "/build/_shared/chunk-YOYFDK4O.js", "/build/_shared/chunk-ICEDALHM.js", "/build/_shared/chunk-ZOFUYGVL.js", "/build/_shared/chunk-A4HAOIEH.js", "/build/_shared/chunk-REAXH7HE.js", "/build/_shared/chunk-XO75RT3N.js", "/build/_shared/chunk-NTXIRLKV.js", "/build/_shared/chunk-VMR4SOYV.js", "/build/_shared/chunk-ITYDXQLP.js", "/build/_shared/chunk-TCCEOGB7.js"], hasAction: !1, hasLoader: !0, hasErrorBoundary: !1 }, "routes/_app.orgs.$organizationSlug.projects.$projectParam.environments": { id: "routes/_app.orgs.$organizationSlug.projects.$projectParam.environments", parentId: "routes/_app.orgs.$organizationSlug.projects.$projectParam", path: "environments", index: void 0, caseSensitive: void 0, module: "/build/routes/_app.orgs.$organizationSlug.projects.$projectParam.environments-EM3EWVQQ.js", imports: ["/build/_shared/chunk-VZ4WLVAR.js", "/build/_shared/chunk-W7OE42H6.js", "/build/_shared/chunk-PG42Q4ZK.js", "/build/_shared/chunk-MV6LLXFW.js", "/build/_shared/chunk-IGQQPLIH.js", "/build/_shared/chunk-S7WDFHSM.js", "/build/_shared/chunk-ICAPXTLO.js", "/build/_shared/chunk-RNSPZWJ4.js", "/build/_shared/chunk-AXRBBWHF.js", "/build/_shared/chunk-LYMFAN7V.js", "/build/_shared/chunk-RJPCQAIK.js", "/build/_shared/chunk-KIGDS2I5.js", "/build/_shared/chunk-GDVQ557H.js", "/build/_shared/chunk-SBSGXD5Z.js", "/build/_shared/chunk-NB6GFRNN.js", "/build/_shared/chunk-FKWMQIXM.js", "/build/_shared/chunk-KFWL4OKU.js", "/build/_shared/chunk-UW7CEVYE.js", "/build/_shared/chunk-FVYECWQQ.js", "/build/_shared/chunk-BDMKDQRC.js", "/build/_shared/chunk-UGCEOWBE.js", "/build/_shared/chunk-V7RLTIQT.js", "/build/_shared/chunk-HKHUV7OI.js", "/build/_shared/chunk-RTPAOLHU.js", "/build/_shared/chunk-BIWIT6XE.js", "/build/_shared/chunk-4QBAYZXH.js", "/build/_shared/chunk-WTLCO7GZ.js", "/build/_shared/chunk-2B3SSTVQ.js", "/build/_shared/chunk-NYYE4FTH.js", "/build/_shared/chunk-BJJDMBQV.js", "/build/_shared/chunk-GP5XYEW5.js", "/build/_shared/chunk-4WHSRCQV.js", "/build/_shared/chunk-ZBQ6KKHY.js", "/build/_shared/chunk-QRF3DCUW.js", "/build/_shared/chunk-L5OF72BL.js", "/build/_shared/chunk-KIAMXGUL.js", "/build/_shared/chunk-LRJWEOAP.js", "/build/_shared/chunk-53BC46H2.js", "/build/_shared/chunk-GVVQJ7TX.js", "/build/_shared/chunk-4QLYPARN.js", "/build/_shared/chunk-AEDMGY7M.js", "/build/_shared/chunk-JHQSSEEW.js", "/build/_shared/chunk-LZFJYVDM.js", "/build/_shared/chunk-2X7GG4YA.js", "/build/_shared/chunk-6VY3TGHV.js", "/build/_shared/chunk-TGPNMAVK.js", "/build/_shared/chunk-LBCN2YVJ.js", "/build/_shared/chunk-LD5CY63I.js", "/build/_shared/chunk-Y7Z57SGD.js", "/build/_shared/chunk-LKTYH4KV.js", "/build/_shared/chunk-X7G7TLQ6.js", "/build/_shared/chunk-HS3AAZGP.js", "/build/_shared/chunk-SNHKI5QX.js", "/build/_shared/chunk-G26VUZ3V.js", "/build/_shared/chunk-5XDHH4UN.js", "/build/_shared/chunk-7ENN74BL.js", "/build/_shared/chunk-PL77FHJK.js", "/build/_shared/chunk-G4EM45JG.js", "/build/_shared/chunk-ANF4WBNI.js", "/build/_shared/chunk-4W4YPBCQ.js", "/build/_shared/chunk-HRCMIQSB.js", "/build/_shared/chunk-L6B4ZRM6.js", "/build/_shared/chunk-QMQUAZ65.js", "/build/_shared/chunk-YOYFDK4O.js", "/build/_shared/chunk-ICEDALHM.js", "/build/_shared/chunk-ZOFUYGVL.js", "/build/_shared/chunk-A4HAOIEH.js", "/build/_shared/chunk-REAXH7HE.js", "/build/_shared/chunk-XO75RT3N.js", "/build/_shared/chunk-NTXIRLKV.js", "/build/_shared/chunk-VMR4SOYV.js", "/build/_shared/chunk-ITYDXQLP.js", "/build/_shared/chunk-TCCEOGB7.js"], hasAction: !1, hasLoader: !0, hasErrorBoundary: !1 }, "routes/_app.orgs.$organizationSlug.projects.$projectParam.environments.stream": { id: "routes/_app.orgs.$organizationSlug.projects.$projectParam.environments.stream", parentId: "routes/_app.orgs.$organizationSlug.projects.$projectParam.environments", path: "stream", index: void 0, caseSensitive: void 0, module: "/build/routes/_app.orgs.$organizationSlug.projects.$projectParam.environments.stream-CD4REHEB.js", imports: void 0, hasAction: !1, hasLoader: !0, hasErrorBoundary: !1 }, "routes/_app.orgs.$organizationSlug.projects.$projectParam.events": { id: "routes/_app.orgs.$organizationSlug.projects.$projectParam.events", parentId: "routes/_app.orgs.$organizationSlug.projects.$projectParam", path: "events", index: void 0, caseSensitive: void 0, module: "/build/routes/_app.orgs.$organizationSlug.projects.$projectParam.events-UENGXQB4.js", imports: void 0, hasAction: !1, hasLoader: !1, hasErrorBoundary: !1 }, "routes/_app.orgs.$organizationSlug.projects.$projectParam.events.$eventParam": { id: "routes/_app.orgs.$organizationSlug.projects.$projectParam.events.$eventParam", parentId: "routes/_app.orgs.$organizationSlug.projects.$projectParam.events", path: ":eventParam", index: void 0, caseSensitive: void 0, module: "/build/routes/_app.orgs.$organizationSlug.projects.$projectParam.events.$eventParam-I574ICVO.js", imports: ["/build/_shared/chunk-S7BYOLDO.js", "/build/_shared/chunk-H7U6NYXK.js", "/build/_shared/chunk-GKEAUNXO.js", "/build/_shared/chunk-PG42Q4ZK.js", "/build/_shared/chunk-DHXQYV6R.js", "/build/_shared/chunk-CPXEV6S7.js", "/build/_shared/chunk-ICAPXTLO.js", "/build/_shared/chunk-RNSPZWJ4.js", "/build/_shared/chunk-OAFZBMQI.js", "/build/_shared/chunk-G75WUHAZ.js", "/build/_shared/chunk-GDVQ557H.js", "/build/_shared/chunk-SBSGXD5Z.js", "/build/_shared/chunk-NB6GFRNN.js", "/build/_shared/chunk-FKWMQIXM.js", "/build/_shared/chunk-UW7CEVYE.js", "/build/_shared/chunk-FVYECWQQ.js", "/build/_shared/chunk-BDMKDQRC.js", "/build/_shared/chunk-UGCEOWBE.js", "/build/_shared/chunk-V7RLTIQT.js", "/build/_shared/chunk-HKHUV7OI.js", "/build/_shared/chunk-RTPAOLHU.js", "/build/_shared/chunk-BIWIT6XE.js", "/build/_shared/chunk-4QBAYZXH.js", "/build/_shared/chunk-WTLCO7GZ.js", "/build/_shared/chunk-2B3SSTVQ.js", "/build/_shared/chunk-NYYE4FTH.js", "/build/_shared/chunk-BJJDMBQV.js", "/build/_shared/chunk-GP5XYEW5.js", "/build/_shared/chunk-4WHSRCQV.js", "/build/_shared/chunk-ZBQ6KKHY.js", "/build/_shared/chunk-QRF3DCUW.js", "/build/_shared/chunk-L5OF72BL.js", "/build/_shared/chunk-KIAMXGUL.js", "/build/_shared/chunk-LRJWEOAP.js", "/build/_shared/chunk-53BC46H2.js", "/build/_shared/chunk-GVVQJ7TX.js", "/build/_shared/chunk-4QLYPARN.js", "/build/_shared/chunk-AEDMGY7M.js", "/build/_shared/chunk-JHQSSEEW.js", "/build/_shared/chunk-O6T3OKOB.js", "/build/_shared/chunk-LZFJYVDM.js", "/build/_shared/chunk-2X7GG4YA.js", "/build/_shared/chunk-6VY3TGHV.js", "/build/_shared/chunk-2UG43HVU.js", "/build/_shared/chunk-VYWDFFOA.js", "/build/_shared/chunk-TGPNMAVK.js", "/build/_shared/chunk-LBCN2YVJ.js", "/build/_shared/chunk-LD5CY63I.js", "/build/_shared/chunk-Y7Z57SGD.js", "/build/_shared/chunk-LKTYH4KV.js", "/build/_shared/chunk-X7G7TLQ6.js", "/build/_shared/chunk-HS3AAZGP.js", "/build/_shared/chunk-SNHKI5QX.js", "/build/_shared/chunk-G26VUZ3V.js", "/build/_shared/chunk-5XDHH4UN.js", "/build/_shared/chunk-7ENN74BL.js", "/build/_shared/chunk-HRR4LGGH.js", "/build/_shared/chunk-ZNKOM7PO.js", "/build/_shared/chunk-PL77FHJK.js", "/build/_shared/chunk-2BLSR254.js", "/build/_shared/chunk-G4EM45JG.js", "/build/_shared/chunk-ANF4WBNI.js", "/build/_shared/chunk-4W4YPBCQ.js", "/build/_shared/chunk-HRCMIQSB.js", "/build/_shared/chunk-L6B4ZRM6.js", "/build/_shared/chunk-QMQUAZ65.js", "/build/_shared/chunk-YOYFDK4O.js", "/build/_shared/chunk-ICEDALHM.js", "/build/_shared/chunk-ZOFUYGVL.js", "/build/_shared/chunk-A4HAOIEH.js", "/build/_shared/chunk-REAXH7HE.js", "/build/_shared/chunk-XO75RT3N.js", "/build/_shared/chunk-NTXIRLKV.js", "/build/_shared/chunk-VMR4SOYV.js", "/build/_shared/chunk-ITYDXQLP.js", "/build/_shared/chunk-TCCEOGB7.js"], hasAction: !1, hasLoader: !0, hasErrorBoundary: !1 }, "routes/_app.orgs.$organizationSlug.projects.$projectParam.events._index": { id: "routes/_app.orgs.$organizationSlug.projects.$projectParam.events._index", parentId: "routes/_app.orgs.$organizationSlug.projects.$projectParam.events", path: void 0, index: !0, caseSensitive: void 0, module: "/build/routes/_app.orgs.$organizationSlug.projects.$projectParam.events._index-RS23BZ7K.js", imports: ["/build/_shared/chunk-H7U6NYXK.js", "/build/_shared/chunk-GKEAUNXO.js", "/build/_shared/chunk-PG42Q4ZK.js", "/build/_shared/chunk-DHXQYV6R.js", "/build/_shared/chunk-CPXEV6S7.js", "/build/_shared/chunk-ICAPXTLO.js", "/build/_shared/chunk-RNSPZWJ4.js", "/build/_shared/chunk-G75WUHAZ.js", "/build/_shared/chunk-GDVQ557H.js", "/build/_shared/chunk-SBSGXD5Z.js", "/build/_shared/chunk-NB6GFRNN.js", "/build/_shared/chunk-FKWMQIXM.js", "/build/_shared/chunk-UW7CEVYE.js", "/build/_shared/chunk-FVYECWQQ.js", "/build/_shared/chunk-BDMKDQRC.js", "/build/_shared/chunk-UGCEOWBE.js", "/build/_shared/chunk-V7RLTIQT.js", "/build/_shared/chunk-HKHUV7OI.js", "/build/_shared/chunk-RTPAOLHU.js", "/build/_shared/chunk-BIWIT6XE.js", "/build/_shared/chunk-4QBAYZXH.js", "/build/_shared/chunk-WTLCO7GZ.js", "/build/_shared/chunk-2B3SSTVQ.js", "/build/_shared/chunk-NYYE4FTH.js", "/build/_shared/chunk-BJJDMBQV.js", "/build/_shared/chunk-GP5XYEW5.js", "/build/_shared/chunk-4WHSRCQV.js", "/build/_shared/chunk-ZBQ6KKHY.js", "/build/_shared/chunk-QRF3DCUW.js", "/build/_shared/chunk-L5OF72BL.js", "/build/_shared/chunk-KIAMXGUL.js", "/build/_shared/chunk-LRJWEOAP.js", "/build/_shared/chunk-53BC46H2.js", "/build/_shared/chunk-GVVQJ7TX.js", "/build/_shared/chunk-4QLYPARN.js", "/build/_shared/chunk-AEDMGY7M.js", "/build/_shared/chunk-JHQSSEEW.js", "/build/_shared/chunk-O6T3OKOB.js", "/build/_shared/chunk-LZFJYVDM.js", "/build/_shared/chunk-2X7GG4YA.js", "/build/_shared/chunk-6VY3TGHV.js", "/build/_shared/chunk-2UG43HVU.js", "/build/_shared/chunk-VYWDFFOA.js", "/build/_shared/chunk-TGPNMAVK.js", "/build/_shared/chunk-LBCN2YVJ.js", "/build/_shared/chunk-LD5CY63I.js", "/build/_shared/chunk-Y7Z57SGD.js", "/build/_shared/chunk-LKTYH4KV.js", "/build/_shared/chunk-X7G7TLQ6.js", "/build/_shared/chunk-HS3AAZGP.js", "/build/_shared/chunk-SNHKI5QX.js", "/build/_shared/chunk-G26VUZ3V.js", "/build/_shared/chunk-5XDHH4UN.js", "/build/_shared/chunk-7ENN74BL.js", "/build/_shared/chunk-G4EM45JG.js", "/build/_shared/chunk-ANF4WBNI.js", "/build/_shared/chunk-4W4YPBCQ.js", "/build/_shared/chunk-HRCMIQSB.js", "/build/_shared/chunk-L6B4ZRM6.js", "/build/_shared/chunk-QMQUAZ65.js", "/build/_shared/chunk-YOYFDK4O.js", "/build/_shared/chunk-ICEDALHM.js", "/build/_shared/chunk-ZOFUYGVL.js", "/build/_shared/chunk-A4HAOIEH.js", "/build/_shared/chunk-REAXH7HE.js", "/build/_shared/chunk-XO75RT3N.js", "/build/_shared/chunk-NTXIRLKV.js", "/build/_shared/chunk-VMR4SOYV.js", "/build/_shared/chunk-ITYDXQLP.js", "/build/_shared/chunk-TCCEOGB7.js"], hasAction: !1, hasLoader: !0, hasErrorBoundary: !1 }, "routes/_app.orgs.$organizationSlug.projects.$projectParam.http-endpoints": { id: "routes/_app.orgs.$organizationSlug.projects.$projectParam.http-endpoints", parentId: "routes/_app.orgs.$organizationSlug.projects.$projectParam", path: "http-endpoints", index: void 0, caseSensitive: void 0, module: "/build/routes/_app.orgs.$organizationSlug.projects.$projectParam.http-endpoints-KTOG6JZL.js", imports: void 0, hasAction: !1, hasLoader: !1, hasErrorBoundary: !1 }, "routes/_app.orgs.$organizationSlug.projects.$projectParam.http-endpoints.$httpEndpointParam": { id: "routes/_app.orgs.$organizationSlug.projects.$projectParam.http-endpoints.$httpEndpointParam", parentId: "routes/_app.orgs.$organizationSlug.projects.$projectParam.http-endpoints", path: ":httpEndpointParam", index: void 0, caseSensitive: void 0, module: "/build/routes/_app.orgs.$organizationSlug.projects.$projectParam.http-endpoints.$httpEndpointParam-RAOJM6V4.js", imports: ["/build/_shared/chunk-MV6LLXFW.js", "/build/_shared/chunk-IGQQPLIH.js", "/build/_shared/chunk-S7WDFHSM.js", "/build/_shared/chunk-ICAPXTLO.js", "/build/_shared/chunk-RNSPZWJ4.js", "/build/_shared/chunk-RJPCQAIK.js", "/build/_shared/chunk-GDVQ557H.js", "/build/_shared/chunk-SBSGXD5Z.js", "/build/_shared/chunk-NB6GFRNN.js", "/build/_shared/chunk-FKWMQIXM.js", "/build/_shared/chunk-KFWL4OKU.js", "/build/_shared/chunk-UW7CEVYE.js", "/build/_shared/chunk-FVYECWQQ.js", "/build/_shared/chunk-BDMKDQRC.js", "/build/_shared/chunk-UGCEOWBE.js", "/build/_shared/chunk-V7RLTIQT.js", "/build/_shared/chunk-HKHUV7OI.js", "/build/_shared/chunk-RTPAOLHU.js", "/build/_shared/chunk-BIWIT6XE.js", "/build/_shared/chunk-4QBAYZXH.js", "/build/_shared/chunk-WTLCO7GZ.js", "/build/_shared/chunk-2B3SSTVQ.js", "/build/_shared/chunk-NYYE4FTH.js", "/build/_shared/chunk-BJJDMBQV.js", "/build/_shared/chunk-GP5XYEW5.js", "/build/_shared/chunk-4WHSRCQV.js", "/build/_shared/chunk-ZBQ6KKHY.js", "/build/_shared/chunk-QRF3DCUW.js", "/build/_shared/chunk-L5OF72BL.js", "/build/_shared/chunk-KIAMXGUL.js", "/build/_shared/chunk-LRJWEOAP.js", "/build/_shared/chunk-53BC46H2.js", "/build/_shared/chunk-GVVQJ7TX.js", "/build/_shared/chunk-4QLYPARN.js", "/build/_shared/chunk-AEDMGY7M.js", "/build/_shared/chunk-JHQSSEEW.js", "/build/_shared/chunk-O6T3OKOB.js", "/build/_shared/chunk-LZFJYVDM.js", "/build/_shared/chunk-2X7GG4YA.js", "/build/_shared/chunk-6VY3TGHV.js", "/build/_shared/chunk-TGPNMAVK.js", "/build/_shared/chunk-LBCN2YVJ.js", "/build/_shared/chunk-LD5CY63I.js", "/build/_shared/chunk-Y7Z57SGD.js", "/build/_shared/chunk-LKTYH4KV.js", "/build/_shared/chunk-X7G7TLQ6.js", "/build/_shared/chunk-HS3AAZGP.js", "/build/_shared/chunk-SNHKI5QX.js", "/build/_shared/chunk-G26VUZ3V.js", "/build/_shared/chunk-5XDHH4UN.js", "/build/_shared/chunk-7ENN74BL.js", "/build/_shared/chunk-PL77FHJK.js", "/build/_shared/chunk-G4EM45JG.js", "/build/_shared/chunk-ANF4WBNI.js", "/build/_shared/chunk-4W4YPBCQ.js", "/build/_shared/chunk-HRCMIQSB.js", "/build/_shared/chunk-L6B4ZRM6.js", "/build/_shared/chunk-QMQUAZ65.js", "/build/_shared/chunk-YOYFDK4O.js", "/build/_shared/chunk-ICEDALHM.js", "/build/_shared/chunk-ZOFUYGVL.js", "/build/_shared/chunk-A4HAOIEH.js", "/build/_shared/chunk-REAXH7HE.js", "/build/_shared/chunk-XO75RT3N.js", "/build/_shared/chunk-NTXIRLKV.js", "/build/_shared/chunk-VMR4SOYV.js", "/build/_shared/chunk-ITYDXQLP.js", "/build/_shared/chunk-TCCEOGB7.js"], hasAction: !1, hasLoader: !0, hasErrorBoundary: !1 }, "routes/_app.orgs.$organizationSlug.projects.$projectParam.http-endpoints._index": { id: "routes/_app.orgs.$organizationSlug.projects.$projectParam.http-endpoints._index", parentId: "routes/_app.orgs.$organizationSlug.projects.$projectParam.http-endpoints", path: void 0, index: !0, caseSensitive: void 0, module: "/build/routes/_app.orgs.$organizationSlug.projects.$projectParam.http-endpoints._index-KY4KWUBS.js", imports: ["/build/_shared/chunk-MV6LLXFW.js", "/build/_shared/chunk-IGQQPLIH.js", "/build/_shared/chunk-S7WDFHSM.js", "/build/_shared/chunk-ICAPXTLO.js", "/build/_shared/chunk-RNSPZWJ4.js", "/build/_shared/chunk-RJPCQAIK.js", "/build/_shared/chunk-GDVQ557H.js", "/build/_shared/chunk-SBSGXD5Z.js", "/build/_shared/chunk-NB6GFRNN.js", "/build/_shared/chunk-FKWMQIXM.js", "/build/_shared/chunk-KFWL4OKU.js", "/build/_shared/chunk-UW7CEVYE.js", "/build/_shared/chunk-FVYECWQQ.js", "/build/_shared/chunk-BDMKDQRC.js", "/build/_shared/chunk-UGCEOWBE.js", "/build/_shared/chunk-V7RLTIQT.js", "/build/_shared/chunk-HKHUV7OI.js", "/build/_shared/chunk-RTPAOLHU.js", "/build/_shared/chunk-BIWIT6XE.js", "/build/_shared/chunk-4QBAYZXH.js", "/build/_shared/chunk-WTLCO7GZ.js", "/build/_shared/chunk-2B3SSTVQ.js", "/build/_shared/chunk-NYYE4FTH.js", "/build/_shared/chunk-BJJDMBQV.js", "/build/_shared/chunk-GP5XYEW5.js", "/build/_shared/chunk-4WHSRCQV.js", "/build/_shared/chunk-ZBQ6KKHY.js", "/build/_shared/chunk-QRF3DCUW.js", "/build/_shared/chunk-L5OF72BL.js", "/build/_shared/chunk-KIAMXGUL.js", "/build/_shared/chunk-LRJWEOAP.js", "/build/_shared/chunk-53BC46H2.js", "/build/_shared/chunk-GVVQJ7TX.js", "/build/_shared/chunk-4QLYPARN.js", "/build/_shared/chunk-AEDMGY7M.js", "/build/_shared/chunk-JHQSSEEW.js", "/build/_shared/chunk-O6T3OKOB.js", "/build/_shared/chunk-LZFJYVDM.js", "/build/_shared/chunk-2X7GG4YA.js", "/build/_shared/chunk-6VY3TGHV.js", "/build/_shared/chunk-TGPNMAVK.js", "/build/_shared/chunk-LBCN2YVJ.js", "/build/_shared/chunk-LD5CY63I.js", "/build/_shared/chunk-Y7Z57SGD.js", "/build/_shared/chunk-LKTYH4KV.js", "/build/_shared/chunk-X7G7TLQ6.js", "/build/_shared/chunk-HS3AAZGP.js", "/build/_shared/chunk-SNHKI5QX.js", "/build/_shared/chunk-G26VUZ3V.js", "/build/_shared/chunk-5XDHH4UN.js", "/build/_shared/chunk-7ENN74BL.js", "/build/_shared/chunk-PL77FHJK.js", "/build/_shared/chunk-G4EM45JG.js", "/build/_shared/chunk-ANF4WBNI.js", "/build/_shared/chunk-4W4YPBCQ.js", "/build/_shared/chunk-HRCMIQSB.js", "/build/_shared/chunk-L6B4ZRM6.js", "/build/_shared/chunk-QMQUAZ65.js", "/build/_shared/chunk-YOYFDK4O.js", "/build/_shared/chunk-ICEDALHM.js", "/build/_shared/chunk-ZOFUYGVL.js", "/build/_shared/chunk-A4HAOIEH.js", "/build/_shared/chunk-REAXH7HE.js", "/build/_shared/chunk-XO75RT3N.js", "/build/_shared/chunk-NTXIRLKV.js", "/build/_shared/chunk-VMR4SOYV.js", "/build/_shared/chunk-ITYDXQLP.js", "/build/_shared/chunk-TCCEOGB7.js"], hasAction: !1, hasLoader: !0, hasErrorBoundary: !1 }, "routes/_app.orgs.$organizationSlug.projects.$projectParam.jobs.$jobParam": { id: "routes/_app.orgs.$organizationSlug.projects.$projectParam.jobs.$jobParam", parentId: "routes/_app.orgs.$organizationSlug.projects.$projectParam", path: "jobs/:jobParam", index: void 0, caseSensitive: void 0, module: "/build/routes/_app.orgs.$organizationSlug.projects.$projectParam.jobs.$jobParam-H66SM4DL.js", imports: ["/build/_shared/chunk-CNT5FC3A.js", "/build/_shared/chunk-GDVQ557H.js", "/build/_shared/chunk-SBSGXD5Z.js", "/build/_shared/chunk-NB6GFRNN.js", "/build/_shared/chunk-TVQJMHSX.js", "/build/_shared/chunk-KFWL4OKU.js", "/build/_shared/chunk-UW7CEVYE.js", "/build/_shared/chunk-FVYECWQQ.js", "/build/_shared/chunk-BDMKDQRC.js", "/build/_shared/chunk-UGCEOWBE.js", "/build/_shared/chunk-V7RLTIQT.js", "/build/_shared/chunk-HKHUV7OI.js", "/build/_shared/chunk-RTPAOLHU.js", "/build/_shared/chunk-BIWIT6XE.js", "/build/_shared/chunk-4QBAYZXH.js", "/build/_shared/chunk-WTLCO7GZ.js", "/build/_shared/chunk-2B3SSTVQ.js", "/build/_shared/chunk-NYYE4FTH.js", "/build/_shared/chunk-BJJDMBQV.js", "/build/_shared/chunk-GP5XYEW5.js", "/build/_shared/chunk-4WHSRCQV.js", "/build/_shared/chunk-ZBQ6KKHY.js", "/build/_shared/chunk-QRF3DCUW.js", "/build/_shared/chunk-L5OF72BL.js", "/build/_shared/chunk-KIAMXGUL.js", "/build/_shared/chunk-LRJWEOAP.js", "/build/_shared/chunk-53BC46H2.js", "/build/_shared/chunk-GVVQJ7TX.js", "/build/_shared/chunk-4QLYPARN.js", "/build/_shared/chunk-AEDMGY7M.js", "/build/_shared/chunk-JHQSSEEW.js", "/build/_shared/chunk-LZFJYVDM.js", "/build/_shared/chunk-2X7GG4YA.js", "/build/_shared/chunk-6VY3TGHV.js", "/build/_shared/chunk-LBCN2YVJ.js", "/build/_shared/chunk-LD5CY63I.js", "/build/_shared/chunk-Y7Z57SGD.js", "/build/_shared/chunk-LKTYH4KV.js", "/build/_shared/chunk-X7G7TLQ6.js", "/build/_shared/chunk-HS3AAZGP.js", "/build/_shared/chunk-SNHKI5QX.js", "/build/_shared/chunk-G26VUZ3V.js", "/build/_shared/chunk-5XDHH4UN.js", "/build/_shared/chunk-7ENN74BL.js", "/build/_shared/chunk-G4EM45JG.js", "/build/_shared/chunk-ANF4WBNI.js", "/build/_shared/chunk-4W4YPBCQ.js", "/build/_shared/chunk-HRCMIQSB.js", "/build/_shared/chunk-L6B4ZRM6.js", "/build/_shared/chunk-QMQUAZ65.js", "/build/_shared/chunk-YOYFDK4O.js", "/build/_shared/chunk-ICEDALHM.js", "/build/_shared/chunk-ZOFUYGVL.js", "/build/_shared/chunk-A4HAOIEH.js", "/build/_shared/chunk-REAXH7HE.js", "/build/_shared/chunk-XO75RT3N.js", "/build/_shared/chunk-NTXIRLKV.js", "/build/_shared/chunk-VMR4SOYV.js", "/build/_shared/chunk-ITYDXQLP.js", "/build/_shared/chunk-TCCEOGB7.js"], hasAction: !1, hasLoader: !0, hasErrorBoundary: !1 }, "routes/_app.orgs.$organizationSlug.projects.$projectParam.jobs.$jobParam._index": { id: "routes/_app.orgs.$organizationSlug.projects.$projectParam.jobs.$jobParam._index", parentId: "routes/_app.orgs.$organizationSlug.projects.$projectParam.jobs.$jobParam", path: void 0, index: !0, caseSensitive: void 0, module: "/build/routes/_app.orgs.$organizationSlug.projects.$projectParam.jobs.$jobParam._index-ZKBWCE74.js", imports: ["/build/_shared/chunk-S7BYOLDO.js", "/build/_shared/chunk-H7U6NYXK.js", "/build/_shared/chunk-GKEAUNXO.js", "/build/_shared/chunk-PG42Q4ZK.js", "/build/_shared/chunk-DHXQYV6R.js", "/build/_shared/chunk-CPXEV6S7.js", "/build/_shared/chunk-MV6LLXFW.js", "/build/_shared/chunk-IGQQPLIH.js", "/build/_shared/chunk-S7WDFHSM.js", "/build/_shared/chunk-ICAPXTLO.js", "/build/_shared/chunk-RNSPZWJ4.js", "/build/_shared/chunk-RJPCQAIK.js", "/build/_shared/chunk-OAFZBMQI.js", "/build/_shared/chunk-G75WUHAZ.js", "/build/_shared/chunk-JCMXX2MW.js", "/build/_shared/chunk-FKWMQIXM.js", "/build/_shared/chunk-O6T3OKOB.js", "/build/_shared/chunk-2UG43HVU.js", "/build/_shared/chunk-VYWDFFOA.js", "/build/_shared/chunk-TGPNMAVK.js", "/build/_shared/chunk-PL77FHJK.js", "/build/_shared/chunk-2BLSR254.js"], hasAction: !1, hasLoader: !0, hasErrorBoundary: !1 }, "routes/_app.orgs.$organizationSlug.projects.$projectParam.jobs.$jobParam.runs.$runParam": { id: "routes/_app.orgs.$organizationSlug.projects.$projectParam.jobs.$jobParam.runs.$runParam", parentId: "routes/_app.orgs.$organizationSlug.projects.$projectParam.jobs.$jobParam", path: "runs/:runParam", index: void 0, caseSensitive: void 0, module: "/build/routes/_app.orgs.$organizationSlug.projects.$projectParam.jobs.$jobParam.runs.$runParam-BERJWBAA.js", imports: ["/build/_shared/chunk-KIGDS2I5.js", "/build/_shared/chunk-ELAOVF3E.js", "/build/_shared/chunk-JCMXX2MW.js", "/build/_shared/chunk-YHUP73F5.js", "/build/_shared/chunk-5TRFQBKG.js", "/build/_shared/chunk-FKWMQIXM.js", "/build/_shared/chunk-O6T3OKOB.js", "/build/_shared/chunk-2UG43HVU.js", "/build/_shared/chunk-VYWDFFOA.js", "/build/_shared/chunk-4T2XYNNF.js", "/build/_shared/chunk-HRR4LGGH.js", "/build/_shared/chunk-ZNKOM7PO.js", "/build/_shared/chunk-PL77FHJK.js", "/build/_shared/chunk-2BLSR254.js"], hasAction: !1, hasLoader: !0, hasErrorBoundary: !1 }, "routes/_app.orgs.$organizationSlug.projects.$projectParam.jobs.$jobParam.runs.$runParam.completed": { id: "routes/_app.orgs.$organizationSlug.projects.$projectParam.jobs.$jobParam.runs.$runParam.completed", parentId: "routes/_app.orgs.$organizationSlug.projects.$projectParam.jobs.$jobParam.runs.$runParam", path: "completed", index: void 0, caseSensitive: void 0, module: "/build/routes/_app.orgs.$organizationSlug.projects.$projectParam.jobs.$jobParam.runs.$runParam.completed-C4GBVNIA.js", imports: ["/build/_shared/chunk-CNT5FC3A.js", "/build/_shared/chunk-LZFJYVDM.js", "/build/_shared/chunk-2X7GG4YA.js", "/build/_shared/chunk-6VY3TGHV.js", "/build/_shared/chunk-EKXZHJAZ.js", "/build/_shared/chunk-SNHKI5QX.js", "/build/_shared/chunk-G4EM45JG.js", "/build/_shared/chunk-ANF4WBNI.js", "/build/_shared/chunk-4W4YPBCQ.js", "/build/_shared/chunk-HRCMIQSB.js", "/build/_shared/chunk-L6B4ZRM6.js", "/build/_shared/chunk-QMQUAZ65.js", "/build/_shared/chunk-YOYFDK4O.js", "/build/_shared/chunk-ICEDALHM.js", "/build/_shared/chunk-ZOFUYGVL.js", "/build/_shared/chunk-A4HAOIEH.js", "/build/_shared/chunk-REAXH7HE.js", "/build/_shared/chunk-XO75RT3N.js", "/build/_shared/chunk-NTXIRLKV.js", "/build/_shared/chunk-VMR4SOYV.js", "/build/_shared/chunk-ITYDXQLP.js", "/build/_shared/chunk-TCCEOGB7.js"], hasAction: !1, hasLoader: !1, hasErrorBoundary: !1 }, "routes/_app.orgs.$organizationSlug.projects.$projectParam.jobs.$jobParam.runs.$runParam.stream": { id: "routes/_app.orgs.$organizationSlug.projects.$projectParam.jobs.$jobParam.runs.$runParam.stream", parentId: "routes/_app.orgs.$organizationSlug.projects.$projectParam.jobs.$jobParam.runs.$runParam", path: "stream", index: void 0, caseSensitive: void 0, module: "/build/routes/_app.orgs.$organizationSlug.projects.$projectParam.jobs.$jobParam.runs.$runParam.stream-OXGNTMHU.js", imports: void 0, hasAction: !1, hasLoader: !0, hasErrorBoundary: !1 }, "routes/_app.orgs.$organizationSlug.projects.$projectParam.jobs.$jobParam.runs.$runParam.tasks.$taskParam": { id: "routes/_app.orgs.$organizationSlug.projects.$projectParam.jobs.$jobParam.runs.$runParam.tasks.$taskParam", parentId: "routes/_app.orgs.$organizationSlug.projects.$projectParam.jobs.$jobParam.runs.$runParam", path: "tasks/:taskParam", index: void 0, caseSensitive: void 0, module: "/build/routes/_app.orgs.$organizationSlug.projects.$projectParam.jobs.$jobParam.runs.$runParam.tasks.$taskParam-5RG2BSRU.js", imports: ["/build/_shared/chunk-BMUTOXEZ.js", "/build/_shared/chunk-TGPNMAVK.js", "/build/_shared/chunk-MIFQNMZY.js", "/build/_shared/chunk-LBCN2YVJ.js", "/build/_shared/chunk-LD5CY63I.js", "/build/_shared/chunk-Y7Z57SGD.js", "/build/_shared/chunk-LKTYH4KV.js", "/build/_shared/chunk-X7G7TLQ6.js", "/build/_shared/chunk-HS3AAZGP.js", "/build/_shared/chunk-SNHKI5QX.js", "/build/_shared/chunk-G26VUZ3V.js", "/build/_shared/chunk-5XDHH4UN.js", "/build/_shared/chunk-7ENN74BL.js", "/build/_shared/chunk-G4EM45JG.js", "/build/_shared/chunk-ANF4WBNI.js", "/build/_shared/chunk-4W4YPBCQ.js", "/build/_shared/chunk-HRCMIQSB.js", "/build/_shared/chunk-L6B4ZRM6.js", "/build/_shared/chunk-QMQUAZ65.js", "/build/_shared/chunk-YOYFDK4O.js", "/build/_shared/chunk-ICEDALHM.js", "/build/_shared/chunk-ZOFUYGVL.js", "/build/_shared/chunk-A4HAOIEH.js", "/build/_shared/chunk-REAXH7HE.js", "/build/_shared/chunk-XO75RT3N.js", "/build/_shared/chunk-NTXIRLKV.js", "/build/_shared/chunk-VMR4SOYV.js", "/build/_shared/chunk-ITYDXQLP.js", "/build/_shared/chunk-TCCEOGB7.js"], hasAction: !1, hasLoader: !0, hasErrorBoundary: !1 }, "routes/_app.orgs.$organizationSlug.projects.$projectParam.jobs.$jobParam.runs.$runParam.trigger": { id: "routes/_app.orgs.$organizationSlug.projects.$projectParam.jobs.$jobParam.runs.$runParam.trigger", parentId: "routes/_app.orgs.$organizationSlug.projects.$projectParam.jobs.$jobParam.runs.$runParam", path: "trigger", index: void 0, caseSensitive: void 0, module: "/build/routes/_app.orgs.$organizationSlug.projects.$projectParam.jobs.$jobParam.runs.$runParam.trigger-7H7NMN4S.js", imports: ["/build/_shared/chunk-CNT5FC3A.js", "/build/_shared/chunk-KFWL4OKU.js", "/build/_shared/chunk-LZFJYVDM.js", "/build/_shared/chunk-2X7GG4YA.js", "/build/_shared/chunk-6VY3TGHV.js", "/build/_shared/chunk-PP3B6JR7.js", "/build/_shared/chunk-SNHKI5QX.js", "/build/_shared/chunk-G26VUZ3V.js", "/build/_shared/chunk-5XDHH4UN.js", "/build/_shared/chunk-7ENN74BL.js", "/build/_shared/chunk-G4EM45JG.js", "/build/_shared/chunk-ANF4WBNI.js", "/build/_shared/chunk-4W4YPBCQ.js", "/build/_shared/chunk-HRCMIQSB.js", "/build/_shared/chunk-L6B4ZRM6.js", "/build/_shared/chunk-QMQUAZ65.js", "/build/_shared/chunk-YOYFDK4O.js", "/build/_shared/chunk-ICEDALHM.js", "/build/_shared/chunk-ZOFUYGVL.js", "/build/_shared/chunk-A4HAOIEH.js", "/build/_shared/chunk-REAXH7HE.js", "/build/_shared/chunk-XO75RT3N.js", "/build/_shared/chunk-NTXIRLKV.js", "/build/_shared/chunk-VMR4SOYV.js", "/build/_shared/chunk-ITYDXQLP.js", "/build/_shared/chunk-TCCEOGB7.js"], hasAction: !1, hasLoader: !0, hasErrorBoundary: !1 }, "routes/_app.orgs.$organizationSlug.projects.$projectParam.jobs.$jobParam.settings": { id: "routes/_app.orgs.$organizationSlug.projects.$projectParam.jobs.$jobParam.settings", parentId: "routes/_app.orgs.$organizationSlug.projects.$projectParam.jobs.$jobParam", path: "settings", index: void 0, caseSensitive: void 0, module: "/build/routes/_app.orgs.$organizationSlug.projects.$projectParam.jobs.$jobParam.settings-7A3KDO5L.js", imports: ["/build/_shared/chunk-CTSJ46IG.js", "/build/_shared/chunk-MV6LLXFW.js", "/build/_shared/chunk-IGQQPLIH.js", "/build/_shared/chunk-S7WDFHSM.js", "/build/_shared/chunk-ICAPXTLO.js", "/build/_shared/chunk-RNSPZWJ4.js", "/build/_shared/chunk-RJPCQAIK.js", "/build/_shared/chunk-FKWMQIXM.js", "/build/_shared/chunk-O6T3OKOB.js", "/build/_shared/chunk-TGPNMAVK.js", "/build/_shared/chunk-PL77FHJK.js"], hasAction: !1, hasLoader: !1, hasErrorBoundary: !1 }, "routes/_app.orgs.$organizationSlug.projects.$projectParam.jobs.$jobParam.test": { id: "routes/_app.orgs.$organizationSlug.projects.$projectParam.jobs.$jobParam.test", parentId: "routes/_app.orgs.$organizationSlug.projects.$projectParam.jobs.$jobParam", path: "test", index: void 0, caseSensitive: void 0, module: "/build/routes/_app.orgs.$organizationSlug.projects.$projectParam.jobs.$jobParam.test-KOZASQ35.js", imports: ["/build/_shared/chunk-OQFKWQUG.js", "/build/_shared/chunk-PG42Q4ZK.js", "/build/_shared/chunk-XXUO2QST.js", "/build/_shared/chunk-67PE2T7V.js", "/build/_shared/chunk-RNSPZWJ4.js", "/build/_shared/chunk-AXRBBWHF.js", "/build/_shared/chunk-LYMFAN7V.js", "/build/_shared/chunk-FKWMQIXM.js", "/build/_shared/chunk-2UG43HVU.js", "/build/_shared/chunk-VYWDFFOA.js"], hasAction: !0, hasLoader: !0, hasErrorBoundary: !1 }, "routes/_app.orgs.$organizationSlug.projects.$projectParam.jobs.$jobParam.trigger": { id: "routes/_app.orgs.$organizationSlug.projects.$projectParam.jobs.$jobParam.trigger", parentId: "routes/_app.orgs.$organizationSlug.projects.$projectParam.jobs.$jobParam", path: "trigger", index: void 0, caseSensitive: void 0, module: "/build/routes/_app.orgs.$organizationSlug.projects.$projectParam.jobs.$jobParam.trigger-SQGJ6XG6.js", imports: void 0, hasAction: !1, hasLoader: !1, hasErrorBoundary: !1 }, "routes/_app.orgs.$organizationSlug.projects.$projectParam.runs": { id: "routes/_app.orgs.$organizationSlug.projects.$projectParam.runs", parentId: "routes/_app.orgs.$organizationSlug.projects.$projectParam", path: "runs", index: void 0, caseSensitive: void 0, module: "/build/routes/_app.orgs.$organizationSlug.projects.$projectParam.runs-V74DLKYR.js", imports: ["/build/_shared/chunk-S7BYOLDO.js", "/build/_shared/chunk-H7U6NYXK.js", "/build/_shared/chunk-GKEAUNXO.js", "/build/_shared/chunk-PG42Q4ZK.js", "/build/_shared/chunk-DHXQYV6R.js", "/build/_shared/chunk-CPXEV6S7.js", "/build/_shared/chunk-ICAPXTLO.js", "/build/_shared/chunk-RNSPZWJ4.js", "/build/_shared/chunk-OAFZBMQI.js", "/build/_shared/chunk-G75WUHAZ.js", "/build/_shared/chunk-GDVQ557H.js", "/build/_shared/chunk-SBSGXD5Z.js", "/build/_shared/chunk-NB6GFRNN.js", "/build/_shared/chunk-FKWMQIXM.js", "/build/_shared/chunk-UW7CEVYE.js", "/build/_shared/chunk-FVYECWQQ.js", "/build/_shared/chunk-BDMKDQRC.js", "/build/_shared/chunk-UGCEOWBE.js", "/build/_shared/chunk-V7RLTIQT.js", "/build/_shared/chunk-HKHUV7OI.js", "/build/_shared/chunk-RTPAOLHU.js", "/build/_shared/chunk-BIWIT6XE.js", "/build/_shared/chunk-4QBAYZXH.js", "/build/_shared/chunk-WTLCO7GZ.js", "/build/_shared/chunk-2B3SSTVQ.js", "/build/_shared/chunk-NYYE4FTH.js", "/build/_shared/chunk-BJJDMBQV.js", "/build/_shared/chunk-GP5XYEW5.js", "/build/_shared/chunk-4WHSRCQV.js", "/build/_shared/chunk-ZBQ6KKHY.js", "/build/_shared/chunk-QRF3DCUW.js", "/build/_shared/chunk-L5OF72BL.js", "/build/_shared/chunk-KIAMXGUL.js", "/build/_shared/chunk-LRJWEOAP.js", "/build/_shared/chunk-53BC46H2.js", "/build/_shared/chunk-GVVQJ7TX.js", "/build/_shared/chunk-4QLYPARN.js", "/build/_shared/chunk-AEDMGY7M.js", "/build/_shared/chunk-JHQSSEEW.js", "/build/_shared/chunk-LZFJYVDM.js", "/build/_shared/chunk-2X7GG4YA.js", "/build/_shared/chunk-6VY3TGHV.js", "/build/_shared/chunk-2UG43HVU.js", "/build/_shared/chunk-VYWDFFOA.js", "/build/_shared/chunk-TGPNMAVK.js", "/build/_shared/chunk-LBCN2YVJ.js", "/build/_shared/chunk-LD5CY63I.js", "/build/_shared/chunk-Y7Z57SGD.js", "/build/_shared/chunk-LKTYH4KV.js", "/build/_shared/chunk-X7G7TLQ6.js", "/build/_shared/chunk-HS3AAZGP.js", "/build/_shared/chunk-SNHKI5QX.js", "/build/_shared/chunk-G26VUZ3V.js", "/build/_shared/chunk-5XDHH4UN.js", "/build/_shared/chunk-7ENN74BL.js", "/build/_shared/chunk-2BLSR254.js", "/build/_shared/chunk-G4EM45JG.js", "/build/_shared/chunk-ANF4WBNI.js", "/build/_shared/chunk-4W4YPBCQ.js", "/build/_shared/chunk-HRCMIQSB.js", "/build/_shared/chunk-L6B4ZRM6.js", "/build/_shared/chunk-QMQUAZ65.js", "/build/_shared/chunk-YOYFDK4O.js", "/build/_shared/chunk-ICEDALHM.js", "/build/_shared/chunk-ZOFUYGVL.js", "/build/_shared/chunk-A4HAOIEH.js", "/build/_shared/chunk-REAXH7HE.js", "/build/_shared/chunk-XO75RT3N.js", "/build/_shared/chunk-NTXIRLKV.js", "/build/_shared/chunk-VMR4SOYV.js", "/build/_shared/chunk-ITYDXQLP.js", "/build/_shared/chunk-TCCEOGB7.js"], hasAction: !1, hasLoader: !0, hasErrorBoundary: !1 }, "routes/_app.orgs.$organizationSlug.projects.$projectParam.settings": { id: "routes/_app.orgs.$organizationSlug.projects.$projectParam.settings", parentId: "routes/_app.orgs.$organizationSlug.projects.$projectParam", path: "settings", index: void 0, caseSensitive: void 0, module: "/build/routes/_app.orgs.$organizationSlug.projects.$projectParam.settings-WH5MCTNG.js", imports: ["/build/_shared/chunk-W2JHKSSW.js", "/build/_shared/chunk-AXRBBWHF.js", "/build/_shared/chunk-LYMFAN7V.js", "/build/_shared/chunk-RJPCQAIK.js", "/build/_shared/chunk-YHUP73F5.js", "/build/_shared/chunk-GDVQ557H.js", "/build/_shared/chunk-SBSGXD5Z.js", "/build/_shared/chunk-NB6GFRNN.js", "/build/_shared/chunk-UW7CEVYE.js", "/build/_shared/chunk-FVYECWQQ.js", "/build/_shared/chunk-BDMKDQRC.js", "/build/_shared/chunk-UGCEOWBE.js", "/build/_shared/chunk-V7RLTIQT.js", "/build/_shared/chunk-HKHUV7OI.js", "/build/_shared/chunk-RTPAOLHU.js", "/build/_shared/chunk-BIWIT6XE.js", "/build/_shared/chunk-4QBAYZXH.js", "/build/_shared/chunk-WTLCO7GZ.js", "/build/_shared/chunk-2B3SSTVQ.js", "/build/_shared/chunk-NYYE4FTH.js", "/build/_shared/chunk-BJJDMBQV.js", "/build/_shared/chunk-GP5XYEW5.js", "/build/_shared/chunk-4WHSRCQV.js", "/build/_shared/chunk-ZBQ6KKHY.js", "/build/_shared/chunk-QRF3DCUW.js", "/build/_shared/chunk-L5OF72BL.js", "/build/_shared/chunk-KIAMXGUL.js", "/build/_shared/chunk-LRJWEOAP.js", "/build/_shared/chunk-53BC46H2.js", "/build/_shared/chunk-GVVQJ7TX.js", "/build/_shared/chunk-4QLYPARN.js", "/build/_shared/chunk-AEDMGY7M.js", "/build/_shared/chunk-JHQSSEEW.js", "/build/_shared/chunk-LZFJYVDM.js", "/build/_shared/chunk-2X7GG4YA.js", "/build/_shared/chunk-6VY3TGHV.js", "/build/_shared/chunk-LBCN2YVJ.js", "/build/_shared/chunk-LD5CY63I.js", "/build/_shared/chunk-Y7Z57SGD.js", "/build/_shared/chunk-LKTYH4KV.js", "/build/_shared/chunk-X7G7TLQ6.js", "/build/_shared/chunk-HS3AAZGP.js", "/build/_shared/chunk-SNHKI5QX.js", "/build/_shared/chunk-G26VUZ3V.js", "/build/_shared/chunk-5XDHH4UN.js", "/build/_shared/chunk-7ENN74BL.js", "/build/_shared/chunk-G4EM45JG.js", "/build/_shared/chunk-ANF4WBNI.js", "/build/_shared/chunk-4W4YPBCQ.js", "/build/_shared/chunk-HRCMIQSB.js", "/build/_shared/chunk-L6B4ZRM6.js", "/build/_shared/chunk-QMQUAZ65.js", "/build/_shared/chunk-YOYFDK4O.js", "/build/_shared/chunk-ICEDALHM.js", "/build/_shared/chunk-ZOFUYGVL.js", "/build/_shared/chunk-A4HAOIEH.js", "/build/_shared/chunk-REAXH7HE.js", "/build/_shared/chunk-XO75RT3N.js", "/build/_shared/chunk-NTXIRLKV.js", "/build/_shared/chunk-VMR4SOYV.js", "/build/_shared/chunk-ITYDXQLP.js", "/build/_shared/chunk-TCCEOGB7.js"], hasAction: !0, hasLoader: !1, hasErrorBoundary: !1 }, "routes/_app.orgs.$organizationSlug.projects.$projectParam.setup": { id: "routes/_app.orgs.$organizationSlug.projects.$projectParam.setup", parentId: "routes/_app.orgs.$organizationSlug.projects.$projectParam", path: "setup", index: void 0, caseSensitive: void 0, module: "/build/routes/_app.orgs.$organizationSlug.projects.$projectParam.setup-HD3NDUQT.js", imports: ["/build/_shared/chunk-YQ556UVO.js", "/build/_shared/chunk-6VY3TGHV.js", "/build/_shared/chunk-LBCN2YVJ.js", "/build/_shared/chunk-SNHKI5QX.js", "/build/_shared/chunk-5XDHH4UN.js", "/build/_shared/chunk-7ENN74BL.js", "/build/_shared/chunk-TCCEOGB7.js"], hasAction: !1, hasLoader: !0, hasErrorBoundary: !1 }, "routes/_app.orgs.$organizationSlug.projects.$projectParam.setup._index": { id: "routes/_app.orgs.$organizationSlug.projects.$projectParam.setup._index", parentId: "routes/_app.orgs.$organizationSlug.projects.$projectParam.setup", path: void 0, index: !0, caseSensitive: void 0, module: "/build/routes/_app.orgs.$organizationSlug.projects.$projectParam.setup._index-MIVTHC4Y.js", imports: ["/build/_shared/chunk-HVEYRND3.js", "/build/_shared/chunk-2DRPYDF3.js", "/build/_shared/chunk-NJUSZZ2I.js", "/build/_shared/chunk-FPRIQJC3.js", "/build/_shared/chunk-USHGOTXM.js", "/build/_shared/chunk-WW5XDXG5.js", "/build/_shared/chunk-VZQAUHJP.js", "/build/_shared/chunk-3VNJH3WZ.js", "/build/_shared/chunk-F3BE4C75.js", "/build/_shared/chunk-W7BBUHKF.js", "/build/_shared/chunk-V7RLTIQT.js", "/build/_shared/chunk-HKHUV7OI.js", "/build/_shared/chunk-2B3SSTVQ.js", "/build/_shared/chunk-NYYE4FTH.js", "/build/_shared/chunk-BJJDMBQV.js", "/build/_shared/chunk-GP5XYEW5.js", "/build/_shared/chunk-4WHSRCQV.js", "/build/_shared/chunk-QRF3DCUW.js", "/build/_shared/chunk-L5OF72BL.js", "/build/_shared/chunk-GVVQJ7TX.js", "/build/_shared/chunk-4QLYPARN.js", "/build/_shared/chunk-O6T3OKOB.js", "/build/_shared/chunk-LZFJYVDM.js", "/build/_shared/chunk-2X7GG4YA.js", "/build/_shared/chunk-Y7Z57SGD.js", "/build/_shared/chunk-LKTYH4KV.js", "/build/_shared/chunk-X7G7TLQ6.js", "/build/_shared/chunk-HS3AAZGP.js", "/build/_shared/chunk-G26VUZ3V.js", "/build/_shared/chunk-G4EM45JG.js", "/build/_shared/chunk-HRCMIQSB.js", "/build/_shared/chunk-L6B4ZRM6.js", "/build/_shared/chunk-QMQUAZ65.js", "/build/_shared/chunk-YOYFDK4O.js", "/build/_shared/chunk-ICEDALHM.js", "/build/_shared/chunk-ZOFUYGVL.js", "/build/_shared/chunk-A4HAOIEH.js", "/build/_shared/chunk-REAXH7HE.js", "/build/_shared/chunk-XO75RT3N.js", "/build/_shared/chunk-NTXIRLKV.js", "/build/_shared/chunk-VMR4SOYV.js", "/build/_shared/chunk-ITYDXQLP.js"], hasAction: !1, hasLoader: !1, hasErrorBoundary: !1 }, "routes/_app.orgs.$organizationSlug.projects.$projectParam.setup.astro": { id: "routes/_app.orgs.$organizationSlug.projects.$projectParam.setup.astro", parentId: "routes/_app.orgs.$organizationSlug.projects.$projectParam.setup", path: "astro", index: void 0, caseSensitive: void 0, module: "/build/routes/_app.orgs.$organizationSlug.projects.$projectParam.setup.astro-77OJLWSV.js", imports: ["/build/_shared/chunk-WW5XDXG5.js", "/build/_shared/chunk-T66AXZFA.js", "/build/_shared/chunk-S7WDFHSM.js", "/build/_shared/chunk-ICAPXTLO.js", "/build/_shared/chunk-RNSPZWJ4.js", "/build/_shared/chunk-RJPCQAIK.js", "/build/_shared/chunk-KIGDS2I5.js", "/build/_shared/chunk-GWRYVNME.js", "/build/_shared/chunk-V7RLTIQT.js", "/build/_shared/chunk-HKHUV7OI.js", "/build/_shared/chunk-BIWIT6XE.js", "/build/_shared/chunk-4QBAYZXH.js", "/build/_shared/chunk-2B3SSTVQ.js", "/build/_shared/chunk-NYYE4FTH.js", "/build/_shared/chunk-BJJDMBQV.js", "/build/_shared/chunk-GP5XYEW5.js", "/build/_shared/chunk-4WHSRCQV.js", "/build/_shared/chunk-QRF3DCUW.js", "/build/_shared/chunk-L5OF72BL.js", "/build/_shared/chunk-GVVQJ7TX.js", "/build/_shared/chunk-4QLYPARN.js", "/build/_shared/chunk-O6T3OKOB.js", "/build/_shared/chunk-LZFJYVDM.js", "/build/_shared/chunk-2X7GG4YA.js", "/build/_shared/chunk-Y7Z57SGD.js", "/build/_shared/chunk-LKTYH4KV.js", "/build/_shared/chunk-X7G7TLQ6.js", "/build/_shared/chunk-HS3AAZGP.js", "/build/_shared/chunk-G26VUZ3V.js", "/build/_shared/chunk-G4EM45JG.js", "/build/_shared/chunk-ANF4WBNI.js", "/build/_shared/chunk-HRCMIQSB.js", "/build/_shared/chunk-L6B4ZRM6.js", "/build/_shared/chunk-QMQUAZ65.js", "/build/_shared/chunk-YOYFDK4O.js", "/build/_shared/chunk-ICEDALHM.js", "/build/_shared/chunk-ZOFUYGVL.js", "/build/_shared/chunk-A4HAOIEH.js", "/build/_shared/chunk-REAXH7HE.js", "/build/_shared/chunk-XO75RT3N.js", "/build/_shared/chunk-NTXIRLKV.js", "/build/_shared/chunk-VMR4SOYV.js", "/build/_shared/chunk-ITYDXQLP.js"], hasAction: !1, hasLoader: !1, hasErrorBoundary: !1 }, "routes/_app.orgs.$organizationSlug.projects.$projectParam.setup.express": { id: "routes/_app.orgs.$organizationSlug.projects.$projectParam.setup.express", parentId: "routes/_app.orgs.$organizationSlug.projects.$projectParam.setup", path: "express", index: void 0, caseSensitive: void 0, module: "/build/routes/_app.orgs.$organizationSlug.projects.$projectParam.setup.express-BYHGLN4R.js", imports: ["/build/_shared/chunk-VZQAUHJP.js", "/build/_shared/chunk-T66AXZFA.js", "/build/_shared/chunk-S7WDFHSM.js", "/build/_shared/chunk-ICAPXTLO.js", "/build/_shared/chunk-RNSPZWJ4.js", "/build/_shared/chunk-RJPCQAIK.js", "/build/_shared/chunk-KIGDS2I5.js", "/build/_shared/chunk-GWRYVNME.js", "/build/_shared/chunk-V7RLTIQT.js", "/build/_shared/chunk-HKHUV7OI.js", "/build/_shared/chunk-BIWIT6XE.js", "/build/_shared/chunk-4QBAYZXH.js", "/build/_shared/chunk-2B3SSTVQ.js", "/build/_shared/chunk-NYYE4FTH.js", "/build/_shared/chunk-BJJDMBQV.js", "/build/_shared/chunk-GP5XYEW5.js", "/build/_shared/chunk-4WHSRCQV.js", "/build/_shared/chunk-QRF3DCUW.js", "/build/_shared/chunk-L5OF72BL.js", "/build/_shared/chunk-53BC46H2.js", "/build/_shared/chunk-GVVQJ7TX.js", "/build/_shared/chunk-4QLYPARN.js", "/build/_shared/chunk-O6T3OKOB.js", "/build/_shared/chunk-LZFJYVDM.js", "/build/_shared/chunk-2X7GG4YA.js", "/build/_shared/chunk-Y7Z57SGD.js", "/build/_shared/chunk-LKTYH4KV.js", "/build/_shared/chunk-X7G7TLQ6.js", "/build/_shared/chunk-HS3AAZGP.js", "/build/_shared/chunk-G26VUZ3V.js", "/build/_shared/chunk-G4EM45JG.js", "/build/_shared/chunk-ANF4WBNI.js", "/build/_shared/chunk-HRCMIQSB.js", "/build/_shared/chunk-L6B4ZRM6.js", "/build/_shared/chunk-QMQUAZ65.js", "/build/_shared/chunk-YOYFDK4O.js", "/build/_shared/chunk-ICEDALHM.js", "/build/_shared/chunk-ZOFUYGVL.js", "/build/_shared/chunk-A4HAOIEH.js", "/build/_shared/chunk-REAXH7HE.js", "/build/_shared/chunk-XO75RT3N.js", "/build/_shared/chunk-NTXIRLKV.js", "/build/_shared/chunk-VMR4SOYV.js", "/build/_shared/chunk-ITYDXQLP.js"], hasAction: !1, hasLoader: !1, hasErrorBoundary: !1 }, "routes/_app.orgs.$organizationSlug.projects.$projectParam.setup.fastify": { id: "routes/_app.orgs.$organizationSlug.projects.$projectParam.setup.fastify", parentId: "routes/_app.orgs.$organizationSlug.projects.$projectParam.setup", path: "fastify", index: void 0, caseSensitive: void 0, module: "/build/routes/_app.orgs.$organizationSlug.projects.$projectParam.setup.fastify-2UY27UIM.js", imports: ["/build/_shared/chunk-3VNJH3WZ.js", "/build/_shared/chunk-GEECNX2K.js", "/build/_shared/chunk-O6T3OKOB.js", "/build/_shared/chunk-LZFJYVDM.js", "/build/_shared/chunk-2X7GG4YA.js", "/build/_shared/chunk-LKTYH4KV.js", "/build/_shared/chunk-X7G7TLQ6.js", "/build/_shared/chunk-HS3AAZGP.js", "/build/_shared/chunk-G26VUZ3V.js", "/build/_shared/chunk-ICEDALHM.js", "/build/_shared/chunk-ZOFUYGVL.js", "/build/_shared/chunk-A4HAOIEH.js", "/build/_shared/chunk-REAXH7HE.js", "/build/_shared/chunk-XO75RT3N.js", "/build/_shared/chunk-NTXIRLKV.js", "/build/_shared/chunk-VMR4SOYV.js", "/build/_shared/chunk-ITYDXQLP.js"], hasAction: !1, hasLoader: !1, hasErrorBoundary: !1 }, "routes/_app.orgs.$organizationSlug.projects.$projectParam.setup.nestjs": { id: "routes/_app.orgs.$organizationSlug.projects.$projectParam.setup.nestjs", parentId: "routes/_app.orgs.$organizationSlug.projects.$projectParam.setup", path: "nestjs", index: void 0, caseSensitive: void 0, module: "/build/routes/_app.orgs.$organizationSlug.projects.$projectParam.setup.nestjs-DLXKJBXL.js", imports: ["/build/_shared/chunk-FPRIQJC3.js", "/build/_shared/chunk-T66AXZFA.js", "/build/_shared/chunk-S7WDFHSM.js", "/build/_shared/chunk-ICAPXTLO.js", "/build/_shared/chunk-RNSPZWJ4.js", "/build/_shared/chunk-RJPCQAIK.js", "/build/_shared/chunk-KIGDS2I5.js", "/build/_shared/chunk-GWRYVNME.js", "/build/_shared/chunk-V7RLTIQT.js", "/build/_shared/chunk-HKHUV7OI.js", "/build/_shared/chunk-BIWIT6XE.js", "/build/_shared/chunk-4QBAYZXH.js", "/build/_shared/chunk-2B3SSTVQ.js", "/build/_shared/chunk-NYYE4FTH.js", "/build/_shared/chunk-BJJDMBQV.js", "/build/_shared/chunk-GP5XYEW5.js", "/build/_shared/chunk-4WHSRCQV.js", "/build/_shared/chunk-QRF3DCUW.js", "/build/_shared/chunk-L5OF72BL.js", "/build/_shared/chunk-GVVQJ7TX.js", "/build/_shared/chunk-4QLYPARN.js", "/build/_shared/chunk-O6T3OKOB.js", "/build/_shared/chunk-LZFJYVDM.js", "/build/_shared/chunk-2X7GG4YA.js", "/build/_shared/chunk-Y7Z57SGD.js", "/build/_shared/chunk-LKTYH4KV.js", "/build/_shared/chunk-X7G7TLQ6.js", "/build/_shared/chunk-HS3AAZGP.js", "/build/_shared/chunk-G26VUZ3V.js", "/build/_shared/chunk-PL77FHJK.js", "/build/_shared/chunk-G4EM45JG.js", "/build/_shared/chunk-HRCMIQSB.js", "/build/_shared/chunk-L6B4ZRM6.js", "/build/_shared/chunk-QMQUAZ65.js", "/build/_shared/chunk-YOYFDK4O.js", "/build/_shared/chunk-ICEDALHM.js", "/build/_shared/chunk-ZOFUYGVL.js", "/build/_shared/chunk-A4HAOIEH.js", "/build/_shared/chunk-REAXH7HE.js", "/build/_shared/chunk-XO75RT3N.js", "/build/_shared/chunk-NTXIRLKV.js", "/build/_shared/chunk-VMR4SOYV.js", "/build/_shared/chunk-ITYDXQLP.js"], hasAction: !1, hasLoader: !1, hasErrorBoundary: !1 }, "routes/_app.orgs.$organizationSlug.projects.$projectParam.setup.nextjs": { id: "routes/_app.orgs.$organizationSlug.projects.$projectParam.setup.nextjs", parentId: "routes/_app.orgs.$organizationSlug.projects.$projectParam.setup", path: "nextjs", index: void 0, caseSensitive: void 0, module: "/build/routes/_app.orgs.$organizationSlug.projects.$projectParam.setup.nextjs-3JSPLM67.js", imports: ["/build/_shared/chunk-USHGOTXM.js", "/build/_shared/chunk-T66AXZFA.js", "/build/_shared/chunk-B6ECCFQG.js", "/build/_shared/chunk-GMFAY4XV.js", "/build/_shared/chunk-5Y65PHTP.js", "/build/_shared/chunk-J4EBRO22.js", "/build/_shared/chunk-AAKY77KV.js", "/build/_shared/chunk-67PE2T7V.js", "/build/_shared/chunk-S7WDFHSM.js", "/build/_shared/chunk-ICAPXTLO.js", "/build/_shared/chunk-RNSPZWJ4.js", "/build/_shared/chunk-RJPCQAIK.js", "/build/_shared/chunk-KIGDS2I5.js", "/build/_shared/chunk-GWRYVNME.js", "/build/_shared/chunk-V7RLTIQT.js", "/build/_shared/chunk-HKHUV7OI.js", "/build/_shared/chunk-BIWIT6XE.js", "/build/_shared/chunk-4QBAYZXH.js", "/build/_shared/chunk-2B3SSTVQ.js", "/build/_shared/chunk-NYYE4FTH.js", "/build/_shared/chunk-BJJDMBQV.js", "/build/_shared/chunk-GP5XYEW5.js", "/build/_shared/chunk-4WHSRCQV.js", "/build/_shared/chunk-QRF3DCUW.js", "/build/_shared/chunk-L5OF72BL.js", "/build/_shared/chunk-53BC46H2.js", "/build/_shared/chunk-GVVQJ7TX.js", "/build/_shared/chunk-4QLYPARN.js", "/build/_shared/chunk-O6T3OKOB.js", "/build/_shared/chunk-LZFJYVDM.js", "/build/_shared/chunk-2X7GG4YA.js", "/build/_shared/chunk-Y7Z57SGD.js", "/build/_shared/chunk-LKTYH4KV.js", "/build/_shared/chunk-X7G7TLQ6.js", "/build/_shared/chunk-HS3AAZGP.js", "/build/_shared/chunk-G26VUZ3V.js", "/build/_shared/chunk-G4EM45JG.js", "/build/_shared/chunk-ANF4WBNI.js", "/build/_shared/chunk-HRCMIQSB.js", "/build/_shared/chunk-L6B4ZRM6.js", "/build/_shared/chunk-QMQUAZ65.js", "/build/_shared/chunk-YOYFDK4O.js", "/build/_shared/chunk-ICEDALHM.js", "/build/_shared/chunk-ZOFUYGVL.js", "/build/_shared/chunk-A4HAOIEH.js", "/build/_shared/chunk-REAXH7HE.js", "/build/_shared/chunk-XO75RT3N.js", "/build/_shared/chunk-NTXIRLKV.js", "/build/_shared/chunk-VMR4SOYV.js", "/build/_shared/chunk-ITYDXQLP.js"], hasAction: !1, hasLoader: !1, hasErrorBoundary: !1 }, "routes/_app.orgs.$organizationSlug.projects.$projectParam.setup.nuxt": { id: "routes/_app.orgs.$organizationSlug.projects.$projectParam.setup.nuxt", parentId: "routes/_app.orgs.$organizationSlug.projects.$projectParam.setup", path: "nuxt", index: void 0, caseSensitive: void 0, module: "/build/routes/_app.orgs.$organizationSlug.projects.$projectParam.setup.nuxt-WDZDJKGV.js", imports: ["/build/_shared/chunk-NJUSZZ2I.js", "/build/_shared/chunk-GEECNX2K.js", "/build/_shared/chunk-O6T3OKOB.js", "/build/_shared/chunk-LZFJYVDM.js", "/build/_shared/chunk-2X7GG4YA.js", "/build/_shared/chunk-LKTYH4KV.js", "/build/_shared/chunk-X7G7TLQ6.js", "/build/_shared/chunk-HS3AAZGP.js", "/build/_shared/chunk-G26VUZ3V.js", "/build/_shared/chunk-ICEDALHM.js", "/build/_shared/chunk-ZOFUYGVL.js", "/build/_shared/chunk-A4HAOIEH.js", "/build/_shared/chunk-REAXH7HE.js", "/build/_shared/chunk-XO75RT3N.js", "/build/_shared/chunk-NTXIRLKV.js", "/build/_shared/chunk-VMR4SOYV.js", "/build/_shared/chunk-ITYDXQLP.js"], hasAction: !1, hasLoader: !1, hasErrorBoundary: !1 }, "routes/_app.orgs.$organizationSlug.projects.$projectParam.setup.redwood": { id: "routes/_app.orgs.$organizationSlug.projects.$projectParam.setup.redwood", parentId: "routes/_app.orgs.$organizationSlug.projects.$projectParam.setup", path: "redwood", index: void 0, caseSensitive: void 0, module: "/build/routes/_app.orgs.$organizationSlug.projects.$projectParam.setup.redwood-AE3HXKTA.js", imports: ["/build/_shared/chunk-F3BE4C75.js", "/build/_shared/chunk-GEECNX2K.js", "/build/_shared/chunk-O6T3OKOB.js", "/build/_shared/chunk-LZFJYVDM.js", "/build/_shared/chunk-2X7GG4YA.js", "/build/_shared/chunk-LKTYH4KV.js", "/build/_shared/chunk-X7G7TLQ6.js", "/build/_shared/chunk-HS3AAZGP.js", "/build/_shared/chunk-G26VUZ3V.js", "/build/_shared/chunk-ICEDALHM.js", "/build/_shared/chunk-ZOFUYGVL.js", "/build/_shared/chunk-A4HAOIEH.js", "/build/_shared/chunk-REAXH7HE.js", "/build/_shared/chunk-XO75RT3N.js", "/build/_shared/chunk-NTXIRLKV.js", "/build/_shared/chunk-VMR4SOYV.js", "/build/_shared/chunk-ITYDXQLP.js"], hasAction: !1, hasLoader: !1, hasErrorBoundary: !1 }, "routes/_app.orgs.$organizationSlug.projects.$projectParam.setup.remix": { id: "routes/_app.orgs.$organizationSlug.projects.$projectParam.setup.remix", parentId: "routes/_app.orgs.$organizationSlug.projects.$projectParam.setup", path: "remix", index: void 0, caseSensitive: void 0, module: "/build/routes/_app.orgs.$organizationSlug.projects.$projectParam.setup.remix-VFSKVJ6M.js", imports: ["/build/_shared/chunk-2DRPYDF3.js", "/build/_shared/chunk-T66AXZFA.js", "/build/_shared/chunk-S7WDFHSM.js", "/build/_shared/chunk-ICAPXTLO.js", "/build/_shared/chunk-RNSPZWJ4.js", "/build/_shared/chunk-RJPCQAIK.js", "/build/_shared/chunk-KIGDS2I5.js", "/build/_shared/chunk-GWRYVNME.js", "/build/_shared/chunk-V7RLTIQT.js", "/build/_shared/chunk-HKHUV7OI.js", "/build/_shared/chunk-BIWIT6XE.js", "/build/_shared/chunk-4QBAYZXH.js", "/build/_shared/chunk-2B3SSTVQ.js", "/build/_shared/chunk-NYYE4FTH.js", "/build/_shared/chunk-BJJDMBQV.js", "/build/_shared/chunk-GP5XYEW5.js", "/build/_shared/chunk-4WHSRCQV.js", "/build/_shared/chunk-QRF3DCUW.js", "/build/_shared/chunk-L5OF72BL.js", "/build/_shared/chunk-GVVQJ7TX.js", "/build/_shared/chunk-4QLYPARN.js", "/build/_shared/chunk-O6T3OKOB.js", "/build/_shared/chunk-LZFJYVDM.js", "/build/_shared/chunk-2X7GG4YA.js", "/build/_shared/chunk-Y7Z57SGD.js", "/build/_shared/chunk-LKTYH4KV.js", "/build/_shared/chunk-X7G7TLQ6.js", "/build/_shared/chunk-HS3AAZGP.js", "/build/_shared/chunk-G26VUZ3V.js", "/build/_shared/chunk-G4EM45JG.js", "/build/_shared/chunk-ANF4WBNI.js", "/build/_shared/chunk-HRCMIQSB.js", "/build/_shared/chunk-L6B4ZRM6.js", "/build/_shared/chunk-QMQUAZ65.js", "/build/_shared/chunk-YOYFDK4O.js", "/build/_shared/chunk-ICEDALHM.js", "/build/_shared/chunk-ZOFUYGVL.js", "/build/_shared/chunk-A4HAOIEH.js", "/build/_shared/chunk-REAXH7HE.js", "/build/_shared/chunk-XO75RT3N.js", "/build/_shared/chunk-NTXIRLKV.js", "/build/_shared/chunk-VMR4SOYV.js", "/build/_shared/chunk-ITYDXQLP.js"], hasAction: !1, hasLoader: !1, hasErrorBoundary: !1 }, "routes/_app.orgs.$organizationSlug.projects.$projectParam.setup.sveltekit": { id: "routes/_app.orgs.$organizationSlug.projects.$projectParam.setup.sveltekit", parentId: "routes/_app.orgs.$organizationSlug.projects.$projectParam.setup", path: "sveltekit", index: void 0, caseSensitive: void 0, module: "/build/routes/_app.orgs.$organizationSlug.projects.$projectParam.setup.sveltekit-PQF7NPUO.js", imports: ["/build/_shared/chunk-W7BBUHKF.js", "/build/_shared/chunk-T66AXZFA.js", "/build/_shared/chunk-S7WDFHSM.js", "/build/_shared/chunk-ICAPXTLO.js", "/build/_shared/chunk-RNSPZWJ4.js", "/build/_shared/chunk-RJPCQAIK.js", "/build/_shared/chunk-KIGDS2I5.js", "/build/_shared/chunk-GWRYVNME.js", "/build/_shared/chunk-V7RLTIQT.js", "/build/_shared/chunk-HKHUV7OI.js", "/build/_shared/chunk-BIWIT6XE.js", "/build/_shared/chunk-4QBAYZXH.js", "/build/_shared/chunk-2B3SSTVQ.js", "/build/_shared/chunk-NYYE4FTH.js", "/build/_shared/chunk-BJJDMBQV.js", "/build/_shared/chunk-GP5XYEW5.js", "/build/_shared/chunk-4WHSRCQV.js", "/build/_shared/chunk-QRF3DCUW.js", "/build/_shared/chunk-L5OF72BL.js", "/build/_shared/chunk-53BC46H2.js", "/build/_shared/chunk-GVVQJ7TX.js", "/build/_shared/chunk-4QLYPARN.js", "/build/_shared/chunk-O6T3OKOB.js", "/build/_shared/chunk-LZFJYVDM.js", "/build/_shared/chunk-2X7GG4YA.js", "/build/_shared/chunk-Y7Z57SGD.js", "/build/_shared/chunk-LKTYH4KV.js", "/build/_shared/chunk-X7G7TLQ6.js", "/build/_shared/chunk-HS3AAZGP.js", "/build/_shared/chunk-G26VUZ3V.js", "/build/_shared/chunk-G4EM45JG.js", "/build/_shared/chunk-ANF4WBNI.js", "/build/_shared/chunk-HRCMIQSB.js", "/build/_shared/chunk-L6B4ZRM6.js", "/build/_shared/chunk-QMQUAZ65.js", "/build/_shared/chunk-YOYFDK4O.js", "/build/_shared/chunk-ICEDALHM.js", "/build/_shared/chunk-ZOFUYGVL.js", "/build/_shared/chunk-A4HAOIEH.js", "/build/_shared/chunk-REAXH7HE.js", "/build/_shared/chunk-XO75RT3N.js", "/build/_shared/chunk-NTXIRLKV.js", "/build/_shared/chunk-VMR4SOYV.js", "/build/_shared/chunk-ITYDXQLP.js"], hasAction: !1, hasLoader: !1, hasErrorBoundary: !1 }, "routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers": { id: "routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers", parentId: "routes/_app.orgs.$organizationSlug.projects.$projectParam", path: "triggers", index: void 0, caseSensitive: void 0, module: "/build/routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers-CE6V6HFL.js", imports: ["/build/_shared/chunk-GDVQ557H.js", "/build/_shared/chunk-SBSGXD5Z.js", "/build/_shared/chunk-NB6GFRNN.js", "/build/_shared/chunk-UW7CEVYE.js", "/build/_shared/chunk-FVYECWQQ.js", "/build/_shared/chunk-BDMKDQRC.js", "/build/_shared/chunk-UGCEOWBE.js", "/build/_shared/chunk-V7RLTIQT.js", "/build/_shared/chunk-HKHUV7OI.js", "/build/_shared/chunk-RTPAOLHU.js", "/build/_shared/chunk-BIWIT6XE.js", "/build/_shared/chunk-4QBAYZXH.js", "/build/_shared/chunk-WTLCO7GZ.js", "/build/_shared/chunk-2B3SSTVQ.js", "/build/_shared/chunk-NYYE4FTH.js", "/build/_shared/chunk-BJJDMBQV.js", "/build/_shared/chunk-GP5XYEW5.js", "/build/_shared/chunk-4WHSRCQV.js", "/build/_shared/chunk-ZBQ6KKHY.js", "/build/_shared/chunk-QRF3DCUW.js", "/build/_shared/chunk-L5OF72BL.js", "/build/_shared/chunk-KIAMXGUL.js", "/build/_shared/chunk-LRJWEOAP.js", "/build/_shared/chunk-53BC46H2.js", "/build/_shared/chunk-GVVQJ7TX.js", "/build/_shared/chunk-4QLYPARN.js", "/build/_shared/chunk-AEDMGY7M.js", "/build/_shared/chunk-JHQSSEEW.js", "/build/_shared/chunk-LZFJYVDM.js", "/build/_shared/chunk-2X7GG4YA.js", "/build/_shared/chunk-6VY3TGHV.js", "/build/_shared/chunk-LBCN2YVJ.js", "/build/_shared/chunk-LD5CY63I.js", "/build/_shared/chunk-Y7Z57SGD.js", "/build/_shared/chunk-LKTYH4KV.js", "/build/_shared/chunk-X7G7TLQ6.js", "/build/_shared/chunk-HS3AAZGP.js", "/build/_shared/chunk-SNHKI5QX.js", "/build/_shared/chunk-G26VUZ3V.js", "/build/_shared/chunk-5XDHH4UN.js", "/build/_shared/chunk-7ENN74BL.js", "/build/_shared/chunk-G4EM45JG.js", "/build/_shared/chunk-ANF4WBNI.js", "/build/_shared/chunk-4W4YPBCQ.js", "/build/_shared/chunk-HRCMIQSB.js", "/build/_shared/chunk-L6B4ZRM6.js", "/build/_shared/chunk-QMQUAZ65.js", "/build/_shared/chunk-YOYFDK4O.js", "/build/_shared/chunk-ICEDALHM.js", "/build/_shared/chunk-ZOFUYGVL.js", "/build/_shared/chunk-A4HAOIEH.js", "/build/_shared/chunk-REAXH7HE.js", "/build/_shared/chunk-XO75RT3N.js", "/build/_shared/chunk-NTXIRLKV.js", "/build/_shared/chunk-VMR4SOYV.js", "/build/_shared/chunk-ITYDXQLP.js", "/build/_shared/chunk-TCCEOGB7.js"], hasAction: !1, hasLoader: !1, hasErrorBoundary: !1 }, "routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers._index": { id: "routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers._index", parentId: "routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers", path: void 0, index: !0, caseSensitive: void 0, module: "/build/routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers._index-AMBLTHT3.js", imports: ["/build/_shared/chunk-FKWMQIXM.js", "/build/_shared/chunk-O6T3OKOB.js", "/build/_shared/chunk-TGPNMAVK.js", "/build/_shared/chunk-ZNKOM7PO.js"], hasAction: !1, hasLoader: !0, hasErrorBoundary: !1 }, "routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers.scheduled": { id: "routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers.scheduled", parentId: "routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers", path: "scheduled", index: void 0, caseSensitive: void 0, module: "/build/routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers.scheduled-EGPC5ILY.js", imports: ["/build/_shared/chunk-G75WUHAZ.js", "/build/_shared/chunk-FKWMQIXM.js", "/build/_shared/chunk-2UG43HVU.js", "/build/_shared/chunk-VYWDFFOA.js", "/build/_shared/chunk-TGPNMAVK.js", "/build/_shared/chunk-ZNKOM7PO.js"], hasAction: !1, hasLoader: !0, hasErrorBoundary: !1 }, "routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers.webhooks": { id: "routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers.webhooks", parentId: "routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers", path: "webhooks", index: void 0, caseSensitive: void 0, module: "/build/routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers.webhooks-MVJZG4X2.js", imports: ["/build/_shared/chunk-FKWMQIXM.js", "/build/_shared/chunk-O6T3OKOB.js", "/build/_shared/chunk-TGPNMAVK.js", "/build/_shared/chunk-ZNKOM7PO.js"], hasAction: !1, hasLoader: !0, hasErrorBoundary: !1 }, "routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.external.$triggerParam": { id: "routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.external.$triggerParam", parentId: "routes/_app.orgs.$organizationSlug.projects.$projectParam", path: "triggers/external/:triggerParam", index: void 0, caseSensitive: void 0, module: "/build/routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.external.$triggerParam-2TNMX37J.js", imports: ["/build/_shared/chunk-OAFZBMQI.js", "/build/_shared/chunk-G75WUHAZ.js", "/build/_shared/chunk-5TRFQBKG.js", "/build/_shared/chunk-GDVQ557H.js", "/build/_shared/chunk-SBSGXD5Z.js", "/build/_shared/chunk-NB6GFRNN.js", "/build/_shared/chunk-FKWMQIXM.js", "/build/_shared/chunk-UW7CEVYE.js", "/build/_shared/chunk-FVYECWQQ.js", "/build/_shared/chunk-BDMKDQRC.js", "/build/_shared/chunk-UGCEOWBE.js", "/build/_shared/chunk-V7RLTIQT.js", "/build/_shared/chunk-HKHUV7OI.js", "/build/_shared/chunk-RTPAOLHU.js", "/build/_shared/chunk-BIWIT6XE.js", "/build/_shared/chunk-4QBAYZXH.js", "/build/_shared/chunk-WTLCO7GZ.js", "/build/_shared/chunk-2B3SSTVQ.js", "/build/_shared/chunk-NYYE4FTH.js", "/build/_shared/chunk-BJJDMBQV.js", "/build/_shared/chunk-GP5XYEW5.js", "/build/_shared/chunk-4WHSRCQV.js", "/build/_shared/chunk-ZBQ6KKHY.js", "/build/_shared/chunk-QRF3DCUW.js", "/build/_shared/chunk-L5OF72BL.js", "/build/_shared/chunk-KIAMXGUL.js", "/build/_shared/chunk-LRJWEOAP.js", "/build/_shared/chunk-53BC46H2.js", "/build/_shared/chunk-GVVQJ7TX.js", "/build/_shared/chunk-4QLYPARN.js", "/build/_shared/chunk-AEDMGY7M.js", "/build/_shared/chunk-JHQSSEEW.js", "/build/_shared/chunk-LZFJYVDM.js", "/build/_shared/chunk-2X7GG4YA.js", "/build/_shared/chunk-6VY3TGHV.js", "/build/_shared/chunk-2UG43HVU.js", "/build/_shared/chunk-VYWDFFOA.js", "/build/_shared/chunk-TGPNMAVK.js", "/build/_shared/chunk-LBCN2YVJ.js", "/build/_shared/chunk-LD5CY63I.js", "/build/_shared/chunk-Y7Z57SGD.js", "/build/_shared/chunk-LKTYH4KV.js", "/build/_shared/chunk-X7G7TLQ6.js", "/build/_shared/chunk-HS3AAZGP.js", "/build/_shared/chunk-SNHKI5QX.js", "/build/_shared/chunk-G26VUZ3V.js", "/build/_shared/chunk-5XDHH4UN.js", "/build/_shared/chunk-7ENN74BL.js", "/build/_shared/chunk-2BLSR254.js", "/build/_shared/chunk-G4EM45JG.js", "/build/_shared/chunk-ANF4WBNI.js", "/build/_shared/chunk-4W4YPBCQ.js", "/build/_shared/chunk-HRCMIQSB.js", "/build/_shared/chunk-L6B4ZRM6.js", "/build/_shared/chunk-QMQUAZ65.js", "/build/_shared/chunk-YOYFDK4O.js", "/build/_shared/chunk-ICEDALHM.js", "/build/_shared/chunk-ZOFUYGVL.js", "/build/_shared/chunk-A4HAOIEH.js", "/build/_shared/chunk-REAXH7HE.js", "/build/_shared/chunk-XO75RT3N.js", "/build/_shared/chunk-NTXIRLKV.js", "/build/_shared/chunk-VMR4SOYV.js", "/build/_shared/chunk-ITYDXQLP.js", "/build/_shared/chunk-TCCEOGB7.js"], hasAction: !0, hasLoader: !0, hasErrorBoundary: !1 }, "routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.external.$triggerParam_.runs.$runParam": { id: "routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.external.$triggerParam_.runs.$runParam", parentId: "routes/_app.orgs.$organizationSlug.projects.$projectParam", path: "triggers/external/:triggerParam/runs/:runParam", index: void 0, caseSensitive: void 0, module: "/build/routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.external.$triggerParam_.runs.$runParam-ZJM2E7JL.js", imports: ["/build/_shared/chunk-KIGDS2I5.js", "/build/_shared/chunk-ELAOVF3E.js", "/build/_shared/chunk-JCMXX2MW.js", "/build/_shared/chunk-YHUP73F5.js", "/build/_shared/chunk-5TRFQBKG.js", "/build/_shared/chunk-GDVQ557H.js", "/build/_shared/chunk-SBSGXD5Z.js", "/build/_shared/chunk-NB6GFRNN.js", "/build/_shared/chunk-FKWMQIXM.js", "/build/_shared/chunk-UW7CEVYE.js", "/build/_shared/chunk-FVYECWQQ.js", "/build/_shared/chunk-BDMKDQRC.js", "/build/_shared/chunk-UGCEOWBE.js", "/build/_shared/chunk-V7RLTIQT.js", "/build/_shared/chunk-HKHUV7OI.js", "/build/_shared/chunk-RTPAOLHU.js", "/build/_shared/chunk-BIWIT6XE.js", "/build/_shared/chunk-4QBAYZXH.js", "/build/_shared/chunk-WTLCO7GZ.js", "/build/_shared/chunk-2B3SSTVQ.js", "/build/_shared/chunk-NYYE4FTH.js", "/build/_shared/chunk-BJJDMBQV.js", "/build/_shared/chunk-GP5XYEW5.js", "/build/_shared/chunk-4WHSRCQV.js", "/build/_shared/chunk-ZBQ6KKHY.js", "/build/_shared/chunk-QRF3DCUW.js", "/build/_shared/chunk-L5OF72BL.js", "/build/_shared/chunk-KIAMXGUL.js", "/build/_shared/chunk-LRJWEOAP.js", "/build/_shared/chunk-53BC46H2.js", "/build/_shared/chunk-GVVQJ7TX.js", "/build/_shared/chunk-4QLYPARN.js", "/build/_shared/chunk-AEDMGY7M.js", "/build/_shared/chunk-JHQSSEEW.js", "/build/_shared/chunk-LZFJYVDM.js", "/build/_shared/chunk-2X7GG4YA.js", "/build/_shared/chunk-6VY3TGHV.js", "/build/_shared/chunk-2UG43HVU.js", "/build/_shared/chunk-VYWDFFOA.js", "/build/_shared/chunk-4T2XYNNF.js", "/build/_shared/chunk-LBCN2YVJ.js", "/build/_shared/chunk-LD5CY63I.js", "/build/_shared/chunk-Y7Z57SGD.js", "/build/_shared/chunk-LKTYH4KV.js", "/build/_shared/chunk-X7G7TLQ6.js", "/build/_shared/chunk-HS3AAZGP.js", "/build/_shared/chunk-SNHKI5QX.js", "/build/_shared/chunk-G26VUZ3V.js", "/build/_shared/chunk-5XDHH4UN.js", "/build/_shared/chunk-7ENN74BL.js", "/build/_shared/chunk-HRR4LGGH.js", "/build/_shared/chunk-ZNKOM7PO.js", "/build/_shared/chunk-PL77FHJK.js", "/build/_shared/chunk-2BLSR254.js", "/build/_shared/chunk-G4EM45JG.js", "/build/_shared/chunk-ANF4WBNI.js", "/build/_shared/chunk-4W4YPBCQ.js", "/build/_shared/chunk-HRCMIQSB.js", "/build/_shared/chunk-L6B4ZRM6.js", "/build/_shared/chunk-QMQUAZ65.js", "/build/_shared/chunk-YOYFDK4O.js", "/build/_shared/chunk-ICEDALHM.js", "/build/_shared/chunk-ZOFUYGVL.js", "/build/_shared/chunk-A4HAOIEH.js", "/build/_shared/chunk-REAXH7HE.js", "/build/_shared/chunk-XO75RT3N.js", "/build/_shared/chunk-NTXIRLKV.js", "/build/_shared/chunk-VMR4SOYV.js", "/build/_shared/chunk-ITYDXQLP.js", "/build/_shared/chunk-TCCEOGB7.js"], hasAction: !1, hasLoader: !0, hasErrorBoundary: !1 }, "routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.external.$triggerParam_.runs.$runParam.completed": { id: "routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.external.$triggerParam_.runs.$runParam.completed", parentId: "routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.external.$triggerParam_.runs.$runParam", path: "completed", index: void 0, caseSensitive: void 0, module: "/build/routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.external.$triggerParam_.runs.$runParam.completed-EN7EBLG7.js", imports: ["/build/_shared/chunk-EKXZHJAZ.js"], hasAction: !1, hasLoader: !1, hasErrorBoundary: !1 }, "routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.external.$triggerParam_.runs.$runParam.stream": { id: "routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.external.$triggerParam_.runs.$runParam.stream", parentId: "routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.external.$triggerParam_.runs.$runParam", path: "stream", index: void 0, caseSensitive: void 0, module: "/build/routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.external.$triggerParam_.runs.$runParam.stream-5KKKGAUC.js", imports: void 0, hasAction: !1, hasLoader: !0, hasErrorBoundary: !1 }, "routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.external.$triggerParam_.runs.$runParam.tasks.$taskParam": { id: "routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.external.$triggerParam_.runs.$runParam.tasks.$taskParam", parentId: "routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.external.$triggerParam_.runs.$runParam", path: "tasks/:taskParam", index: void 0, caseSensitive: void 0, module: "/build/routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.external.$triggerParam_.runs.$runParam.tasks.$taskParam-6D7SDWMN.js", imports: ["/build/_shared/chunk-BMUTOXEZ.js", "/build/_shared/chunk-TGPNMAVK.js", "/build/_shared/chunk-MIFQNMZY.js"], hasAction: !1, hasLoader: !0, hasErrorBoundary: !1 }, "routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.external.$triggerParam_.runs.$runParam.trigger": { id: "routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.external.$triggerParam_.runs.$runParam.trigger", parentId: "routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.external.$triggerParam_.runs.$runParam", path: "trigger", index: void 0, caseSensitive: void 0, module: "/build/routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.external.$triggerParam_.runs.$runParam.trigger-KYU6T5IE.js", imports: ["/build/_shared/chunk-PP3B6JR7.js"], hasAction: !1, hasLoader: !0, hasErrorBoundary: !1 }, "routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.webhooks.$triggerParam": { id: "routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.webhooks.$triggerParam", parentId: "routes/_app.orgs.$organizationSlug.projects.$projectParam", path: "triggers/webhooks/:triggerParam", index: void 0, caseSensitive: void 0, module: "/build/routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.webhooks.$triggerParam-DOX5FQRK.js", imports: ["/build/_shared/chunk-LNNL3RVZ.js", "/build/_shared/chunk-GDVQ557H.js", "/build/_shared/chunk-SBSGXD5Z.js", "/build/_shared/chunk-NB6GFRNN.js", "/build/_shared/chunk-UW7CEVYE.js", "/build/_shared/chunk-FVYECWQQ.js", "/build/_shared/chunk-BDMKDQRC.js", "/build/_shared/chunk-UGCEOWBE.js", "/build/_shared/chunk-V7RLTIQT.js", "/build/_shared/chunk-HKHUV7OI.js", "/build/_shared/chunk-RTPAOLHU.js", "/build/_shared/chunk-BIWIT6XE.js", "/build/_shared/chunk-4QBAYZXH.js", "/build/_shared/chunk-WTLCO7GZ.js", "/build/_shared/chunk-2B3SSTVQ.js", "/build/_shared/chunk-NYYE4FTH.js", "/build/_shared/chunk-BJJDMBQV.js", "/build/_shared/chunk-GP5XYEW5.js", "/build/_shared/chunk-4WHSRCQV.js", "/build/_shared/chunk-ZBQ6KKHY.js", "/build/_shared/chunk-QRF3DCUW.js", "/build/_shared/chunk-L5OF72BL.js", "/build/_shared/chunk-KIAMXGUL.js", "/build/_shared/chunk-LRJWEOAP.js", "/build/_shared/chunk-53BC46H2.js", "/build/_shared/chunk-GVVQJ7TX.js", "/build/_shared/chunk-4QLYPARN.js", "/build/_shared/chunk-AEDMGY7M.js", "/build/_shared/chunk-JHQSSEEW.js", "/build/_shared/chunk-LZFJYVDM.js", "/build/_shared/chunk-2X7GG4YA.js", "/build/_shared/chunk-6VY3TGHV.js", "/build/_shared/chunk-2UG43HVU.js", "/build/_shared/chunk-VYWDFFOA.js", "/build/_shared/chunk-LBCN2YVJ.js", "/build/_shared/chunk-LD5CY63I.js", "/build/_shared/chunk-Y7Z57SGD.js", "/build/_shared/chunk-LKTYH4KV.js", "/build/_shared/chunk-X7G7TLQ6.js", "/build/_shared/chunk-HS3AAZGP.js", "/build/_shared/chunk-SNHKI5QX.js", "/build/_shared/chunk-G26VUZ3V.js", "/build/_shared/chunk-5XDHH4UN.js", "/build/_shared/chunk-7ENN74BL.js", "/build/_shared/chunk-G4EM45JG.js", "/build/_shared/chunk-ANF4WBNI.js", "/build/_shared/chunk-4W4YPBCQ.js", "/build/_shared/chunk-HRCMIQSB.js", "/build/_shared/chunk-L6B4ZRM6.js", "/build/_shared/chunk-QMQUAZ65.js", "/build/_shared/chunk-YOYFDK4O.js", "/build/_shared/chunk-ICEDALHM.js", "/build/_shared/chunk-ZOFUYGVL.js", "/build/_shared/chunk-A4HAOIEH.js", "/build/_shared/chunk-REAXH7HE.js", "/build/_shared/chunk-XO75RT3N.js", "/build/_shared/chunk-NTXIRLKV.js", "/build/_shared/chunk-VMR4SOYV.js", "/build/_shared/chunk-ITYDXQLP.js", "/build/_shared/chunk-TCCEOGB7.js"], hasAction: !1, hasLoader: !0, hasErrorBoundary: !1 }, "routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.webhooks.$triggerParam._index": { id: "routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.webhooks.$triggerParam._index", parentId: "routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.webhooks.$triggerParam", path: void 0, index: !0, caseSensitive: void 0, module: "/build/routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.webhooks.$triggerParam._index-5KEGNZL3.js", imports: ["/build/_shared/chunk-OAFZBMQI.js", "/build/_shared/chunk-G75WUHAZ.js", "/build/_shared/chunk-FKWMQIXM.js", "/build/_shared/chunk-O6T3OKOB.js", "/build/_shared/chunk-TGPNMAVK.js", "/build/_shared/chunk-2BLSR254.js"], hasAction: !1, hasLoader: !0, hasErrorBoundary: !1 }, "routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.webhooks.$triggerParam.delivery": { id: "routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.webhooks.$triggerParam.delivery", parentId: "routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.webhooks.$triggerParam", path: "delivery", index: void 0, caseSensitive: void 0, module: "/build/routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.webhooks.$triggerParam.delivery-6SREMI67.js", imports: ["/build/_shared/chunk-G75WUHAZ.js", "/build/_shared/chunk-FKWMQIXM.js", "/build/_shared/chunk-O6T3OKOB.js", "/build/_shared/chunk-TGPNMAVK.js", "/build/_shared/chunk-2BLSR254.js"], hasAction: !1, hasLoader: !0, hasErrorBoundary: !1 }, "routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.webhooks.$triggerParam_.runs.$runParam": { id: "routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.webhooks.$triggerParam_.runs.$runParam", parentId: "routes/_app.orgs.$organizationSlug.projects.$projectParam", path: "triggers/webhooks/:triggerParam/runs/:runParam", index: void 0, caseSensitive: void 0, module: "/build/routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.webhooks.$triggerParam_.runs.$runParam-DMNI7QGR.js", imports: ["/build/_shared/chunk-2ZXK6EJV.js", "/build/_shared/chunk-ELAOVF3E.js", "/build/_shared/chunk-JCMXX2MW.js", "/build/_shared/chunk-YHUP73F5.js", "/build/_shared/chunk-5TRFQBKG.js", "/build/_shared/chunk-GDVQ557H.js", "/build/_shared/chunk-SBSGXD5Z.js", "/build/_shared/chunk-NB6GFRNN.js", "/build/_shared/chunk-FKWMQIXM.js", "/build/_shared/chunk-UW7CEVYE.js", "/build/_shared/chunk-FVYECWQQ.js", "/build/_shared/chunk-BDMKDQRC.js", "/build/_shared/chunk-UGCEOWBE.js", "/build/_shared/chunk-V7RLTIQT.js", "/build/_shared/chunk-HKHUV7OI.js", "/build/_shared/chunk-RTPAOLHU.js", "/build/_shared/chunk-BIWIT6XE.js", "/build/_shared/chunk-4QBAYZXH.js", "/build/_shared/chunk-WTLCO7GZ.js", "/build/_shared/chunk-2B3SSTVQ.js", "/build/_shared/chunk-NYYE4FTH.js", "/build/_shared/chunk-BJJDMBQV.js", "/build/_shared/chunk-GP5XYEW5.js", "/build/_shared/chunk-4WHSRCQV.js", "/build/_shared/chunk-ZBQ6KKHY.js", "/build/_shared/chunk-QRF3DCUW.js", "/build/_shared/chunk-L5OF72BL.js", "/build/_shared/chunk-KIAMXGUL.js", "/build/_shared/chunk-LRJWEOAP.js", "/build/_shared/chunk-53BC46H2.js", "/build/_shared/chunk-GVVQJ7TX.js", "/build/_shared/chunk-4QLYPARN.js", "/build/_shared/chunk-AEDMGY7M.js", "/build/_shared/chunk-JHQSSEEW.js", "/build/_shared/chunk-LZFJYVDM.js", "/build/_shared/chunk-2X7GG4YA.js", "/build/_shared/chunk-6VY3TGHV.js", "/build/_shared/chunk-2UG43HVU.js", "/build/_shared/chunk-VYWDFFOA.js", "/build/_shared/chunk-4T2XYNNF.js", "/build/_shared/chunk-LBCN2YVJ.js", "/build/_shared/chunk-LD5CY63I.js", "/build/_shared/chunk-Y7Z57SGD.js", "/build/_shared/chunk-LKTYH4KV.js", "/build/_shared/chunk-X7G7TLQ6.js", "/build/_shared/chunk-HS3AAZGP.js", "/build/_shared/chunk-SNHKI5QX.js", "/build/_shared/chunk-G26VUZ3V.js", "/build/_shared/chunk-5XDHH4UN.js", "/build/_shared/chunk-7ENN74BL.js", "/build/_shared/chunk-HRR4LGGH.js", "/build/_shared/chunk-ZNKOM7PO.js", "/build/_shared/chunk-PL77FHJK.js", "/build/_shared/chunk-2BLSR254.js", "/build/_shared/chunk-G4EM45JG.js", "/build/_shared/chunk-ANF4WBNI.js", "/build/_shared/chunk-4W4YPBCQ.js", "/build/_shared/chunk-HRCMIQSB.js", "/build/_shared/chunk-L6B4ZRM6.js", "/build/_shared/chunk-QMQUAZ65.js", "/build/_shared/chunk-YOYFDK4O.js", "/build/_shared/chunk-ICEDALHM.js", "/build/_shared/chunk-ZOFUYGVL.js", "/build/_shared/chunk-A4HAOIEH.js", "/build/_shared/chunk-REAXH7HE.js", "/build/_shared/chunk-XO75RT3N.js", "/build/_shared/chunk-NTXIRLKV.js", "/build/_shared/chunk-VMR4SOYV.js", "/build/_shared/chunk-ITYDXQLP.js", "/build/_shared/chunk-TCCEOGB7.js"], hasAction: !1, hasLoader: !0, hasErrorBoundary: !1 }, "routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.webhooks.$triggerParam_.runs.$runParam.completed": { id: "routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.webhooks.$triggerParam_.runs.$runParam.completed", parentId: "routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.webhooks.$triggerParam_.runs.$runParam", path: "completed", index: void 0, caseSensitive: void 0, module: "/build/routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.webhooks.$triggerParam_.runs.$runParam.completed-Y2X6VS7W.js", imports: ["/build/_shared/chunk-EKXZHJAZ.js"], hasAction: !1, hasLoader: !1, hasErrorBoundary: !1 }, "routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.webhooks.$triggerParam_.runs.$runParam.stream": { id: "routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.webhooks.$triggerParam_.runs.$runParam.stream", parentId: "routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.webhooks.$triggerParam_.runs.$runParam", path: "stream", index: void 0, caseSensitive: void 0, module: "/build/routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.webhooks.$triggerParam_.runs.$runParam.stream-YODP6SGN.js", imports: void 0, hasAction: !1, hasLoader: !0, hasErrorBoundary: !1 }, "routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.webhooks.$triggerParam_.runs.$runParam.tasks.$taskParam": { id: "routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.webhooks.$triggerParam_.runs.$runParam.tasks.$taskParam", parentId: "routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.webhooks.$triggerParam_.runs.$runParam", path: "tasks/:taskParam", index: void 0, caseSensitive: void 0, module: "/build/routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.webhooks.$triggerParam_.runs.$runParam.tasks.$taskParam-KIWEJ44Q.js", imports: ["/build/_shared/chunk-BMUTOXEZ.js", "/build/_shared/chunk-TGPNMAVK.js", "/build/_shared/chunk-MIFQNMZY.js"], hasAction: !1, hasLoader: !0, hasErrorBoundary: !1 }, "routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.webhooks.$triggerParam_.runs.$runParam.trigger": { id: "routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.webhooks.$triggerParam_.runs.$runParam.trigger", parentId: "routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.webhooks.$triggerParam_.runs.$runParam", path: "trigger", index: void 0, caseSensitive: void 0, module: "/build/routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.webhooks.$triggerParam_.runs.$runParam.trigger-OC5RDVT3.js", imports: ["/build/_shared/chunk-PP3B6JR7.js"], hasAction: !1, hasLoader: !0, hasErrorBoundary: !1 }, "routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.webhooks.$triggerParam_.runs.delivery.$runParam": { id: "routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.webhooks.$triggerParam_.runs.delivery.$runParam", parentId: "routes/_app.orgs.$organizationSlug.projects.$projectParam", path: "triggers/webhooks/:triggerParam/runs/delivery/:runParam", index: void 0, caseSensitive: void 0, module: "/build/routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.webhooks.$triggerParam_.runs.delivery.$runParam-IROWWUKN.js", imports: ["/build/_shared/chunk-2ZXK6EJV.js", "/build/_shared/chunk-ELAOVF3E.js", "/build/_shared/chunk-JCMXX2MW.js", "/build/_shared/chunk-YHUP73F5.js", "/build/_shared/chunk-5TRFQBKG.js", "/build/_shared/chunk-GDVQ557H.js", "/build/_shared/chunk-SBSGXD5Z.js", "/build/_shared/chunk-NB6GFRNN.js", "/build/_shared/chunk-FKWMQIXM.js", "/build/_shared/chunk-UW7CEVYE.js", "/build/_shared/chunk-FVYECWQQ.js", "/build/_shared/chunk-BDMKDQRC.js", "/build/_shared/chunk-UGCEOWBE.js", "/build/_shared/chunk-V7RLTIQT.js", "/build/_shared/chunk-HKHUV7OI.js", "/build/_shared/chunk-RTPAOLHU.js", "/build/_shared/chunk-BIWIT6XE.js", "/build/_shared/chunk-4QBAYZXH.js", "/build/_shared/chunk-WTLCO7GZ.js", "/build/_shared/chunk-2B3SSTVQ.js", "/build/_shared/chunk-NYYE4FTH.js", "/build/_shared/chunk-BJJDMBQV.js", "/build/_shared/chunk-GP5XYEW5.js", "/build/_shared/chunk-4WHSRCQV.js", "/build/_shared/chunk-ZBQ6KKHY.js", "/build/_shared/chunk-QRF3DCUW.js", "/build/_shared/chunk-L5OF72BL.js", "/build/_shared/chunk-KIAMXGUL.js", "/build/_shared/chunk-LRJWEOAP.js", "/build/_shared/chunk-53BC46H2.js", "/build/_shared/chunk-GVVQJ7TX.js", "/build/_shared/chunk-4QLYPARN.js", "/build/_shared/chunk-AEDMGY7M.js", "/build/_shared/chunk-JHQSSEEW.js", "/build/_shared/chunk-LZFJYVDM.js", "/build/_shared/chunk-2X7GG4YA.js", "/build/_shared/chunk-6VY3TGHV.js", "/build/_shared/chunk-2UG43HVU.js", "/build/_shared/chunk-VYWDFFOA.js", "/build/_shared/chunk-4T2XYNNF.js", "/build/_shared/chunk-LBCN2YVJ.js", "/build/_shared/chunk-LD5CY63I.js", "/build/_shared/chunk-Y7Z57SGD.js", "/build/_shared/chunk-LKTYH4KV.js", "/build/_shared/chunk-X7G7TLQ6.js", "/build/_shared/chunk-HS3AAZGP.js", "/build/_shared/chunk-SNHKI5QX.js", "/build/_shared/chunk-G26VUZ3V.js", "/build/_shared/chunk-5XDHH4UN.js", "/build/_shared/chunk-7ENN74BL.js", "/build/_shared/chunk-HRR4LGGH.js", "/build/_shared/chunk-ZNKOM7PO.js", "/build/_shared/chunk-PL77FHJK.js", "/build/_shared/chunk-2BLSR254.js", "/build/_shared/chunk-G4EM45JG.js", "/build/_shared/chunk-ANF4WBNI.js", "/build/_shared/chunk-4W4YPBCQ.js", "/build/_shared/chunk-HRCMIQSB.js", "/build/_shared/chunk-L6B4ZRM6.js", "/build/_shared/chunk-QMQUAZ65.js", "/build/_shared/chunk-YOYFDK4O.js", "/build/_shared/chunk-ICEDALHM.js", "/build/_shared/chunk-ZOFUYGVL.js", "/build/_shared/chunk-A4HAOIEH.js", "/build/_shared/chunk-REAXH7HE.js", "/build/_shared/chunk-XO75RT3N.js", "/build/_shared/chunk-NTXIRLKV.js", "/build/_shared/chunk-VMR4SOYV.js", "/build/_shared/chunk-ITYDXQLP.js", "/build/_shared/chunk-TCCEOGB7.js"], hasAction: !1, hasLoader: !0, hasErrorBoundary: !1 }, "routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.webhooks.$triggerParam_.runs.delivery.$runParam.completed": { id: "routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.webhooks.$triggerParam_.runs.delivery.$runParam.completed", parentId: "routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.webhooks.$triggerParam_.runs.delivery.$runParam", path: "completed", index: void 0, caseSensitive: void 0, module: "/build/routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.webhooks.$triggerParam_.runs.delivery.$runParam.completed-CSR4E6AH.js", imports: ["/build/_shared/chunk-EKXZHJAZ.js"], hasAction: !1, hasLoader: !1, hasErrorBoundary: !1 }, "routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.webhooks.$triggerParam_.runs.delivery.$runParam.stream": { id: "routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.webhooks.$triggerParam_.runs.delivery.$runParam.stream", parentId: "routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.webhooks.$triggerParam_.runs.delivery.$runParam", path: "stream", index: void 0, caseSensitive: void 0, module: "/build/routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.webhooks.$triggerParam_.runs.delivery.$runParam.stream-42SWM275.js", imports: void 0, hasAction: !1, hasLoader: !0, hasErrorBoundary: !1 }, "routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.webhooks.$triggerParam_.runs.delivery.$runParam.tasks.$taskParam": { id: "routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.webhooks.$triggerParam_.runs.delivery.$runParam.tasks.$taskParam", parentId: "routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.webhooks.$triggerParam_.runs.delivery.$runParam", path: "tasks/:taskParam", index: void 0, caseSensitive: void 0, module: "/build/routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.webhooks.$triggerParam_.runs.delivery.$runParam.tasks.$taskParam-WF2B2WAU.js", imports: ["/build/_shared/chunk-BMUTOXEZ.js", "/build/_shared/chunk-TGPNMAVK.js", "/build/_shared/chunk-MIFQNMZY.js"], hasAction: !1, hasLoader: !0, hasErrorBoundary: !1 }, "routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.webhooks.$triggerParam_.runs.delivery.$runParam.trigger": { id: "routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.webhooks.$triggerParam_.runs.delivery.$runParam.trigger", parentId: "routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.webhooks.$triggerParam_.runs.delivery.$runParam", path: "trigger", index: void 0, caseSensitive: void 0, module: "/build/routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.webhooks.$triggerParam_.runs.delivery.$runParam.trigger-7WNICK2W.js", imports: ["/build/_shared/chunk-PP3B6JR7.js"], hasAction: !1, hasLoader: !0, hasErrorBoundary: !1 }, "routes/_app.orgs.$organizationSlug.projects.v3.$projectParam": { id: "routes/_app.orgs.$organizationSlug.projects.v3.$projectParam", parentId: "routes/_app.orgs.$organizationSlug", path: "projects/v3/:projectParam", index: void 0, caseSensitive: void 0, module: "/build/routes/_app.orgs.$organizationSlug.projects.v3.$projectParam-VTUXD2QM.js", imports: ["/build/_shared/chunk-GWRYVNME.js", "/build/_shared/chunk-O6T3OKOB.js"], hasAction: !1, hasLoader: !0, hasErrorBoundary: !0 }, "routes/_app.orgs.$organizationSlug.projects.v3.$projectParam._index": { id: "routes/_app.orgs.$organizationSlug.projects.v3.$projectParam._index", parentId: "routes/_app.orgs.$organizationSlug.projects.v3.$projectParam", path: void 0, index: !0, caseSensitive: void 0, module: "/build/routes/_app.orgs.$organizationSlug.projects.v3.$projectParam._index-YNAFPYQS.js", imports: ["/build/_shared/chunk-NJAYDH4L.js", "/build/_shared/chunk-AV3RTZY3.js", "/build/_shared/chunk-7U3APYSQ.js", "/build/_shared/chunk-CPXEV6S7.js", "/build/_shared/chunk-PBINOJUV.js", "/build/_shared/chunk-S7WDFHSM.js", "/build/_shared/chunk-ICAPXTLO.js", "/build/_shared/chunk-RNSPZWJ4.js", "/build/_shared/chunk-LYMFAN7V.js", "/build/_shared/chunk-FWWZK4PR.js", "/build/_shared/chunk-4XW6GOV5.js", "/build/_shared/chunk-3TQ2KUDT.js", "/build/_shared/chunk-RJPCQAIK.js", "/build/_shared/chunk-KIGDS2I5.js", "/build/_shared/chunk-GDVQ557H.js", "/build/_shared/chunk-SBSGXD5Z.js", "/build/_shared/chunk-NB6GFRNN.js", "/build/_shared/chunk-FKWMQIXM.js", "/build/_shared/chunk-UW7CEVYE.js", "/build/_shared/chunk-FVYECWQQ.js", "/build/_shared/chunk-BDMKDQRC.js", "/build/_shared/chunk-UGCEOWBE.js", "/build/_shared/chunk-V7RLTIQT.js", "/build/_shared/chunk-HKHUV7OI.js", "/build/_shared/chunk-RTPAOLHU.js", "/build/_shared/chunk-BIWIT6XE.js", "/build/_shared/chunk-4QBAYZXH.js", "/build/_shared/chunk-WTLCO7GZ.js", "/build/_shared/chunk-2B3SSTVQ.js", "/build/_shared/chunk-NYYE4FTH.js", "/build/_shared/chunk-BJJDMBQV.js", "/build/_shared/chunk-GP5XYEW5.js", "/build/_shared/chunk-4WHSRCQV.js", "/build/_shared/chunk-ZBQ6KKHY.js", "/build/_shared/chunk-QRF3DCUW.js", "/build/_shared/chunk-L5OF72BL.js", "/build/_shared/chunk-KIAMXGUL.js", "/build/_shared/chunk-LRJWEOAP.js", "/build/_shared/chunk-53BC46H2.js", "/build/_shared/chunk-GVVQJ7TX.js", "/build/_shared/chunk-4QLYPARN.js", "/build/_shared/chunk-AEDMGY7M.js", "/build/_shared/chunk-JHQSSEEW.js", "/build/_shared/chunk-LZFJYVDM.js", "/build/_shared/chunk-2X7GG4YA.js", "/build/_shared/chunk-6VY3TGHV.js", "/build/_shared/chunk-VYWDFFOA.js", "/build/_shared/chunk-TGPNMAVK.js", "/build/_shared/chunk-LBCN2YVJ.js", "/build/_shared/chunk-LD5CY63I.js", "/build/_shared/chunk-Y7Z57SGD.js", "/build/_shared/chunk-LKTYH4KV.js", "/build/_shared/chunk-X7G7TLQ6.js", "/build/_shared/chunk-HS3AAZGP.js", "/build/_shared/chunk-SNHKI5QX.js", "/build/_shared/chunk-G26VUZ3V.js", "/build/_shared/chunk-5XDHH4UN.js", "/build/_shared/chunk-7ENN74BL.js", "/build/_shared/chunk-2BLSR254.js", "/build/_shared/chunk-G4EM45JG.js", "/build/_shared/chunk-ANF4WBNI.js", "/build/_shared/chunk-4W4YPBCQ.js", "/build/_shared/chunk-HRCMIQSB.js", "/build/_shared/chunk-L6B4ZRM6.js", "/build/_shared/chunk-QMQUAZ65.js", "/build/_shared/chunk-YOYFDK4O.js", "/build/_shared/chunk-ICEDALHM.js", "/build/_shared/chunk-ZOFUYGVL.js", "/build/_shared/chunk-A4HAOIEH.js", "/build/_shared/chunk-REAXH7HE.js", "/build/_shared/chunk-XO75RT3N.js", "/build/_shared/chunk-NTXIRLKV.js", "/build/_shared/chunk-VMR4SOYV.js", "/build/_shared/chunk-ITYDXQLP.js", "/build/_shared/chunk-TCCEOGB7.js"], hasAction: !1, hasLoader: !0, hasErrorBoundary: !1 }, "routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.alerts": { id: "routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.alerts", parentId: "routes/_app.orgs.$organizationSlug.projects.v3.$projectParam", path: "alerts", index: void 0, caseSensitive: void 0, module: "/build/routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.alerts-MXDXUBYY.js", imports: ["/build/_shared/chunk-OQFKWQUG.js", "/build/_shared/chunk-W3IMGLQI.js", "/build/_shared/chunk-GKC723XP.js", "/build/_shared/chunk-MNKRFUW7.js", "/build/_shared/chunk-GDVQ557H.js", "/build/_shared/chunk-SBSGXD5Z.js", "/build/_shared/chunk-NB6GFRNN.js", "/build/_shared/chunk-FKWMQIXM.js", "/build/_shared/chunk-UW7CEVYE.js", "/build/_shared/chunk-FVYECWQQ.js", "/build/_shared/chunk-BDMKDQRC.js", "/build/_shared/chunk-UGCEOWBE.js", "/build/_shared/chunk-V7RLTIQT.js", "/build/_shared/chunk-HKHUV7OI.js", "/build/_shared/chunk-RTPAOLHU.js", "/build/_shared/chunk-BIWIT6XE.js", "/build/_shared/chunk-4QBAYZXH.js", "/build/_shared/chunk-WTLCO7GZ.js", "/build/_shared/chunk-2B3SSTVQ.js", "/build/_shared/chunk-NYYE4FTH.js", "/build/_shared/chunk-BJJDMBQV.js", "/build/_shared/chunk-GP5XYEW5.js", "/build/_shared/chunk-4WHSRCQV.js", "/build/_shared/chunk-ZBQ6KKHY.js", "/build/_shared/chunk-QRF3DCUW.js", "/build/_shared/chunk-L5OF72BL.js", "/build/_shared/chunk-KIAMXGUL.js", "/build/_shared/chunk-LRJWEOAP.js", "/build/_shared/chunk-53BC46H2.js", "/build/_shared/chunk-GVVQJ7TX.js", "/build/_shared/chunk-4QLYPARN.js", "/build/_shared/chunk-AEDMGY7M.js", "/build/_shared/chunk-JHQSSEEW.js", "/build/_shared/chunk-LZFJYVDM.js", "/build/_shared/chunk-2X7GG4YA.js", "/build/_shared/chunk-6VY3TGHV.js", "/build/_shared/chunk-VYWDFFOA.js", "/build/_shared/chunk-TGPNMAVK.js", "/build/_shared/chunk-LBCN2YVJ.js", "/build/_shared/chunk-LD5CY63I.js", "/build/_shared/chunk-Y7Z57SGD.js", "/build/_shared/chunk-LKTYH4KV.js", "/build/_shared/chunk-X7G7TLQ6.js", "/build/_shared/chunk-HS3AAZGP.js", "/build/_shared/chunk-SNHKI5QX.js", "/build/_shared/chunk-G26VUZ3V.js", "/build/_shared/chunk-5XDHH4UN.js", "/build/_shared/chunk-7ENN74BL.js", "/build/_shared/chunk-G4EM45JG.js", "/build/_shared/chunk-ANF4WBNI.js", "/build/_shared/chunk-4W4YPBCQ.js", "/build/_shared/chunk-HRCMIQSB.js", "/build/_shared/chunk-L6B4ZRM6.js", "/build/_shared/chunk-QMQUAZ65.js", "/build/_shared/chunk-YOYFDK4O.js", "/build/_shared/chunk-ICEDALHM.js", "/build/_shared/chunk-ZOFUYGVL.js", "/build/_shared/chunk-A4HAOIEH.js", "/build/_shared/chunk-REAXH7HE.js", "/build/_shared/chunk-XO75RT3N.js", "/build/_shared/chunk-NTXIRLKV.js", "/build/_shared/chunk-VMR4SOYV.js", "/build/_shared/chunk-ITYDXQLP.js", "/build/_shared/chunk-TCCEOGB7.js"], hasAction: !0, hasLoader: !0, hasErrorBoundary: !1 }, "routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.alerts.new": { id: "routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.alerts.new", parentId: "routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.alerts", path: "new", index: void 0, caseSensitive: void 0, module: "/build/routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.alerts.new-2PUB3TQK.js", imports: ["/build/_shared/chunk-NYEYKKUU.js", "/build/_shared/chunk-XLUNUOUT.js", "/build/_shared/chunk-AXRBBWHF.js", "/build/_shared/chunk-LYMFAN7V.js", "/build/_shared/chunk-RJPCQAIK.js", "/build/_shared/chunk-O6T3OKOB.js"], hasAction: !0, hasLoader: !0, hasErrorBoundary: !1 }, "routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.alerts.new.connect-to-slack": { id: "routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.alerts.new.connect-to-slack", parentId: "routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.alerts.new", path: "connect-to-slack", index: void 0, caseSensitive: void 0, module: "/build/routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.alerts.new.connect-to-slack-Z7XPGTS3.js", imports: void 0, hasAction: !1, hasLoader: !0, hasErrorBoundary: !1 }, "routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.apikeys": { id: "routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.apikeys", parentId: "routes/_app.orgs.$organizationSlug.projects.v3.$projectParam", path: "apikeys", index: void 0, caseSensitive: void 0, module: "/build/routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.apikeys-UDXW33Z5.js", imports: ["/build/_shared/chunk-W7OE42H6.js", "/build/_shared/chunk-MNKRFUW7.js", "/build/_shared/chunk-LYMFAN7V.js", "/build/_shared/chunk-4XW6GOV5.js", "/build/_shared/chunk-3TQ2KUDT.js", "/build/_shared/chunk-GDVQ557H.js", "/build/_shared/chunk-SBSGXD5Z.js", "/build/_shared/chunk-NB6GFRNN.js", "/build/_shared/chunk-FKWMQIXM.js", "/build/_shared/chunk-UW7CEVYE.js", "/build/_shared/chunk-FVYECWQQ.js", "/build/_shared/chunk-BDMKDQRC.js", "/build/_shared/chunk-UGCEOWBE.js", "/build/_shared/chunk-V7RLTIQT.js", "/build/_shared/chunk-HKHUV7OI.js", "/build/_shared/chunk-RTPAOLHU.js", "/build/_shared/chunk-BIWIT6XE.js", "/build/_shared/chunk-4QBAYZXH.js", "/build/_shared/chunk-WTLCO7GZ.js", "/build/_shared/chunk-2B3SSTVQ.js", "/build/_shared/chunk-NYYE4FTH.js", "/build/_shared/chunk-BJJDMBQV.js", "/build/_shared/chunk-GP5XYEW5.js", "/build/_shared/chunk-4WHSRCQV.js", "/build/_shared/chunk-ZBQ6KKHY.js", "/build/_shared/chunk-QRF3DCUW.js", "/build/_shared/chunk-L5OF72BL.js", "/build/_shared/chunk-KIAMXGUL.js", "/build/_shared/chunk-LRJWEOAP.js", "/build/_shared/chunk-53BC46H2.js", "/build/_shared/chunk-GVVQJ7TX.js", "/build/_shared/chunk-4QLYPARN.js", "/build/_shared/chunk-AEDMGY7M.js", "/build/_shared/chunk-JHQSSEEW.js", "/build/_shared/chunk-LZFJYVDM.js", "/build/_shared/chunk-2X7GG4YA.js", "/build/_shared/chunk-6VY3TGHV.js", "/build/_shared/chunk-TGPNMAVK.js", "/build/_shared/chunk-LBCN2YVJ.js", "/build/_shared/chunk-LD5CY63I.js", "/build/_shared/chunk-Y7Z57SGD.js", "/build/_shared/chunk-LKTYH4KV.js", "/build/_shared/chunk-X7G7TLQ6.js", "/build/_shared/chunk-HS3AAZGP.js", "/build/_shared/chunk-SNHKI5QX.js", "/build/_shared/chunk-G26VUZ3V.js", "/build/_shared/chunk-5XDHH4UN.js", "/build/_shared/chunk-7ENN74BL.js", "/build/_shared/chunk-G4EM45JG.js", "/build/_shared/chunk-ANF4WBNI.js", "/build/_shared/chunk-4W4YPBCQ.js", "/build/_shared/chunk-HRCMIQSB.js", "/build/_shared/chunk-L6B4ZRM6.js", "/build/_shared/chunk-QMQUAZ65.js", "/build/_shared/chunk-YOYFDK4O.js", "/build/_shared/chunk-ICEDALHM.js", "/build/_shared/chunk-ZOFUYGVL.js", "/build/_shared/chunk-A4HAOIEH.js", "/build/_shared/chunk-REAXH7HE.js", "/build/_shared/chunk-XO75RT3N.js", "/build/_shared/chunk-NTXIRLKV.js", "/build/_shared/chunk-VMR4SOYV.js", "/build/_shared/chunk-ITYDXQLP.js", "/build/_shared/chunk-TCCEOGB7.js"], hasAction: !1, hasLoader: !0, hasErrorBoundary: !1 }, "routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.deployments": { id: "routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.deployments", parentId: "routes/_app.orgs.$organizationSlug.projects.v3.$projectParam", path: "deployments", index: void 0, caseSensitive: void 0, module: "/build/routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.deployments-OM352M7R.js", imports: ["/build/_shared/chunk-TPWC7APJ.js", "/build/_shared/chunk-MNKRFUW7.js", "/build/_shared/chunk-XS2XTM7I.js", "/build/_shared/chunk-JLCRH63X.js", "/build/_shared/chunk-GDVQ557H.js", "/build/_shared/chunk-SBSGXD5Z.js", "/build/_shared/chunk-NB6GFRNN.js", "/build/_shared/chunk-FKWMQIXM.js", "/build/_shared/chunk-UW7CEVYE.js", "/build/_shared/chunk-FVYECWQQ.js", "/build/_shared/chunk-BDMKDQRC.js", "/build/_shared/chunk-UGCEOWBE.js", "/build/_shared/chunk-V7RLTIQT.js", "/build/_shared/chunk-HKHUV7OI.js", "/build/_shared/chunk-RTPAOLHU.js", "/build/_shared/chunk-BIWIT6XE.js", "/build/_shared/chunk-4QBAYZXH.js", "/build/_shared/chunk-WTLCO7GZ.js", "/build/_shared/chunk-2B3SSTVQ.js", "/build/_shared/chunk-NYYE4FTH.js", "/build/_shared/chunk-BJJDMBQV.js", "/build/_shared/chunk-GP5XYEW5.js", "/build/_shared/chunk-4WHSRCQV.js", "/build/_shared/chunk-ZBQ6KKHY.js", "/build/_shared/chunk-QRF3DCUW.js", "/build/_shared/chunk-L5OF72BL.js", "/build/_shared/chunk-KIAMXGUL.js", "/build/_shared/chunk-LRJWEOAP.js", "/build/_shared/chunk-53BC46H2.js", "/build/_shared/chunk-GVVQJ7TX.js", "/build/_shared/chunk-4QLYPARN.js", "/build/_shared/chunk-AEDMGY7M.js", "/build/_shared/chunk-JHQSSEEW.js", "/build/_shared/chunk-LZFJYVDM.js", "/build/_shared/chunk-2X7GG4YA.js", "/build/_shared/chunk-6VY3TGHV.js", "/build/_shared/chunk-VYWDFFOA.js", "/build/_shared/chunk-TGPNMAVK.js", "/build/_shared/chunk-LBCN2YVJ.js", "/build/_shared/chunk-LD5CY63I.js", "/build/_shared/chunk-Y7Z57SGD.js", "/build/_shared/chunk-LKTYH4KV.js", "/build/_shared/chunk-X7G7TLQ6.js", "/build/_shared/chunk-HS3AAZGP.js", "/build/_shared/chunk-SNHKI5QX.js", "/build/_shared/chunk-G26VUZ3V.js", "/build/_shared/chunk-5XDHH4UN.js", "/build/_shared/chunk-7ENN74BL.js", "/build/_shared/chunk-G4EM45JG.js", "/build/_shared/chunk-ANF4WBNI.js", "/build/_shared/chunk-4W4YPBCQ.js", "/build/_shared/chunk-HRCMIQSB.js", "/build/_shared/chunk-L6B4ZRM6.js", "/build/_shared/chunk-QMQUAZ65.js", "/build/_shared/chunk-YOYFDK4O.js", "/build/_shared/chunk-ICEDALHM.js", "/build/_shared/chunk-ZOFUYGVL.js", "/build/_shared/chunk-A4HAOIEH.js", "/build/_shared/chunk-REAXH7HE.js", "/build/_shared/chunk-XO75RT3N.js", "/build/_shared/chunk-NTXIRLKV.js", "/build/_shared/chunk-VMR4SOYV.js", "/build/_shared/chunk-ITYDXQLP.js", "/build/_shared/chunk-TCCEOGB7.js"], hasAction: !1, hasLoader: !0, hasErrorBoundary: !1 }, "routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.deployments.$deploymentParam": { id: "routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.deployments.$deploymentParam", parentId: "routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.deployments", path: ":deploymentParam", index: void 0, caseSensitive: void 0, module: "/build/routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.deployments.$deploymentParam-2KCBBW4U.js", imports: ["/build/_shared/chunk-FWWZK4PR.js", "/build/_shared/chunk-4XW6GOV5.js", "/build/_shared/chunk-UUFJ3KKB.js", "/build/_shared/chunk-3TQ2KUDT.js", "/build/_shared/chunk-RJPCQAIK.js", "/build/_shared/chunk-O6T3OKOB.js", "/build/_shared/chunk-PL77FHJK.js"], hasAction: !1, hasLoader: !0, hasErrorBoundary: !1 }, "routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.environment-variables": { id: "routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.environment-variables", parentId: "routes/_app.orgs.$organizationSlug.projects.v3.$projectParam", path: "environment-variables", index: void 0, caseSensitive: void 0, module: "/build/routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.environment-variables-IYZEQPGK.js", imports: ["/build/_shared/chunk-MNKRFUW7.js", "/build/_shared/chunk-G4DBG4ZR.js", "/build/_shared/chunk-IO5YMY4B.js", "/build/_shared/chunk-J4EBRO22.js", "/build/_shared/chunk-AAKY77KV.js", "/build/_shared/chunk-67PE2T7V.js", "/build/_shared/chunk-LYMFAN7V.js", "/build/_shared/chunk-RJPCQAIK.js", "/build/_shared/chunk-GDVQ557H.js", "/build/_shared/chunk-SBSGXD5Z.js", "/build/_shared/chunk-NB6GFRNN.js", "/build/_shared/chunk-FKWMQIXM.js", "/build/_shared/chunk-UW7CEVYE.js", "/build/_shared/chunk-FVYECWQQ.js", "/build/_shared/chunk-BDMKDQRC.js", "/build/_shared/chunk-UGCEOWBE.js", "/build/_shared/chunk-V7RLTIQT.js", "/build/_shared/chunk-HKHUV7OI.js", "/build/_shared/chunk-RTPAOLHU.js", "/build/_shared/chunk-BIWIT6XE.js", "/build/_shared/chunk-4QBAYZXH.js", "/build/_shared/chunk-WTLCO7GZ.js", "/build/_shared/chunk-2B3SSTVQ.js", "/build/_shared/chunk-NYYE4FTH.js", "/build/_shared/chunk-BJJDMBQV.js", "/build/_shared/chunk-GP5XYEW5.js", "/build/_shared/chunk-4WHSRCQV.js", "/build/_shared/chunk-ZBQ6KKHY.js", "/build/_shared/chunk-QRF3DCUW.js", "/build/_shared/chunk-L5OF72BL.js", "/build/_shared/chunk-KIAMXGUL.js", "/build/_shared/chunk-LRJWEOAP.js", "/build/_shared/chunk-53BC46H2.js", "/build/_shared/chunk-GVVQJ7TX.js", "/build/_shared/chunk-4QLYPARN.js", "/build/_shared/chunk-AEDMGY7M.js", "/build/_shared/chunk-JHQSSEEW.js", "/build/_shared/chunk-LZFJYVDM.js", "/build/_shared/chunk-2X7GG4YA.js", "/build/_shared/chunk-6VY3TGHV.js", "/build/_shared/chunk-TGPNMAVK.js", "/build/_shared/chunk-LBCN2YVJ.js", "/build/_shared/chunk-LD5CY63I.js", "/build/_shared/chunk-Y7Z57SGD.js", "/build/_shared/chunk-LKTYH4KV.js", "/build/_shared/chunk-X7G7TLQ6.js", "/build/_shared/chunk-HS3AAZGP.js", "/build/_shared/chunk-SNHKI5QX.js", "/build/_shared/chunk-G26VUZ3V.js", "/build/_shared/chunk-5XDHH4UN.js", "/build/_shared/chunk-7ENN74BL.js", "/build/_shared/chunk-G4EM45JG.js", "/build/_shared/chunk-ANF4WBNI.js", "/build/_shared/chunk-4W4YPBCQ.js", "/build/_shared/chunk-HRCMIQSB.js", "/build/_shared/chunk-L6B4ZRM6.js", "/build/_shared/chunk-QMQUAZ65.js", "/build/_shared/chunk-YOYFDK4O.js", "/build/_shared/chunk-ICEDALHM.js", "/build/_shared/chunk-ZOFUYGVL.js", "/build/_shared/chunk-A4HAOIEH.js", "/build/_shared/chunk-REAXH7HE.js", "/build/_shared/chunk-XO75RT3N.js", "/build/_shared/chunk-NTXIRLKV.js", "/build/_shared/chunk-VMR4SOYV.js", "/build/_shared/chunk-ITYDXQLP.js", "/build/_shared/chunk-TCCEOGB7.js"], hasAction: !0, hasLoader: !0, hasErrorBoundary: !1 }, "routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.environment-variables.new": { id: "routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.environment-variables.new", parentId: "routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.environment-variables", path: "new", index: void 0, caseSensitive: void 0, module: "/build/routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.environment-variables.new-2W2PZV5O.js", imports: ["/build/_shared/chunk-NMKOPZWV.js", "/build/_shared/chunk-XLUNUOUT.js", "/build/_shared/chunk-AXRBBWHF.js", "/build/_shared/chunk-GWRYVNME.js", "/build/_shared/chunk-O6T3OKOB.js"], hasAction: !0, hasLoader: !0, hasErrorBoundary: !1 }, "routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.runs": { id: "routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.runs", parentId: "routes/_app.orgs.$organizationSlug.projects.v3.$projectParam", path: "runs", index: void 0, caseSensitive: void 0, module: "/build/routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.runs-FPZLC2VW.js", imports: ["/build/_shared/chunk-UW7CEVYE.js", "/build/_shared/chunk-FVYECWQQ.js", "/build/_shared/chunk-BDMKDQRC.js", "/build/_shared/chunk-UGCEOWBE.js", "/build/_shared/chunk-V7RLTIQT.js", "/build/_shared/chunk-HKHUV7OI.js", "/build/_shared/chunk-RTPAOLHU.js", "/build/_shared/chunk-BIWIT6XE.js", "/build/_shared/chunk-4QBAYZXH.js", "/build/_shared/chunk-WTLCO7GZ.js", "/build/_shared/chunk-2B3SSTVQ.js", "/build/_shared/chunk-NYYE4FTH.js", "/build/_shared/chunk-BJJDMBQV.js", "/build/_shared/chunk-GP5XYEW5.js", "/build/_shared/chunk-4WHSRCQV.js", "/build/_shared/chunk-ZBQ6KKHY.js", "/build/_shared/chunk-QRF3DCUW.js", "/build/_shared/chunk-L5OF72BL.js", "/build/_shared/chunk-KIAMXGUL.js", "/build/_shared/chunk-LRJWEOAP.js", "/build/_shared/chunk-53BC46H2.js", "/build/_shared/chunk-GVVQJ7TX.js", "/build/_shared/chunk-4QLYPARN.js", "/build/_shared/chunk-AEDMGY7M.js", "/build/_shared/chunk-JHQSSEEW.js", "/build/_shared/chunk-LZFJYVDM.js", "/build/_shared/chunk-2X7GG4YA.js", "/build/_shared/chunk-6VY3TGHV.js", "/build/_shared/chunk-LBCN2YVJ.js", "/build/_shared/chunk-LD5CY63I.js", "/build/_shared/chunk-Y7Z57SGD.js", "/build/_shared/chunk-LKTYH4KV.js", "/build/_shared/chunk-X7G7TLQ6.js", "/build/_shared/chunk-HS3AAZGP.js", "/build/_shared/chunk-SNHKI5QX.js", "/build/_shared/chunk-G26VUZ3V.js", "/build/_shared/chunk-5XDHH4UN.js", "/build/_shared/chunk-7ENN74BL.js", "/build/_shared/chunk-G4EM45JG.js", "/build/_shared/chunk-ANF4WBNI.js", "/build/_shared/chunk-4W4YPBCQ.js", "/build/_shared/chunk-HRCMIQSB.js", "/build/_shared/chunk-L6B4ZRM6.js", "/build/_shared/chunk-QMQUAZ65.js", "/build/_shared/chunk-YOYFDK4O.js", "/build/_shared/chunk-ICEDALHM.js", "/build/_shared/chunk-ZOFUYGVL.js", "/build/_shared/chunk-A4HAOIEH.js", "/build/_shared/chunk-REAXH7HE.js", "/build/_shared/chunk-XO75RT3N.js", "/build/_shared/chunk-NTXIRLKV.js", "/build/_shared/chunk-VMR4SOYV.js", "/build/_shared/chunk-ITYDXQLP.js", "/build/_shared/chunk-TCCEOGB7.js"], hasAction: !1, hasLoader: !1, hasErrorBoundary: !1 }, "routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.runs.$runParam": { id: "routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.runs.$runParam", parentId: "routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.runs", path: ":runParam", index: void 0, caseSensitive: void 0, module: "/build/routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.runs.$runParam-BNNQDW6W.js", imports: ["/build/_shared/chunk-VRCSJSEI.js", "/build/_shared/chunk-GSPD64UG.js", "/build/_shared/chunk-FVTY47DG.js", "/build/_shared/chunk-GKEAUNXO.js", "/build/_shared/chunk-72YEZCB7.js", "/build/_shared/chunk-IO5YMY4B.js", "/build/_shared/chunk-5Y65PHTP.js", "/build/_shared/chunk-XS2XTM7I.js", "/build/_shared/chunk-PBINOJUV.js", "/build/_shared/chunk-J4EBRO22.js", "/build/_shared/chunk-AAKY77KV.js", "/build/_shared/chunk-67PE2T7V.js", "/build/_shared/chunk-EB63UTWA.js", "/build/_shared/chunk-LYMFAN7V.js", "/build/_shared/chunk-FWWZK4PR.js", "/build/_shared/chunk-4XW6GOV5.js", "/build/_shared/chunk-UUFJ3KKB.js", "/build/_shared/chunk-3TQ2KUDT.js", "/build/_shared/chunk-RJPCQAIK.js", "/build/_shared/chunk-KIGDS2I5.js", "/build/_shared/chunk-GDVQ557H.js", "/build/_shared/chunk-SBSGXD5Z.js", "/build/_shared/chunk-NB6GFRNN.js", "/build/_shared/chunk-FKWMQIXM.js", "/build/_shared/chunk-O6T3OKOB.js", "/build/_shared/chunk-VYWDFFOA.js", "/build/_shared/chunk-PL77FHJK.js", "/build/_shared/chunk-2BLSR254.js"], hasAction: !1, hasLoader: !0, hasErrorBoundary: !1 }, "routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.runs.$runParam.stream": { id: "routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.runs.$runParam.stream", parentId: "routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.runs.$runParam", path: "stream", index: void 0, caseSensitive: void 0, module: "/build/routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.runs.$runParam.stream-D7Y3OIZR.js", imports: void 0, hasAction: !1, hasLoader: !0, hasErrorBoundary: !1 }, "routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.runs._index": { id: "routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.runs._index", parentId: "routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.runs", path: void 0, index: !0, caseSensitive: void 0, module: "/build/routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.runs._index-GWRPA4F4.js", imports: ["/build/_shared/chunk-OVQ7W575.js", "/build/_shared/chunk-7U3APYSQ.js", "/build/_shared/chunk-GKEAUNXO.js", "/build/_shared/chunk-PXE3LKDR.js", "/build/_shared/chunk-6MAI3NMP.js", "/build/_shared/chunk-GKC723XP.js", "/build/_shared/chunk-72YEZCB7.js", "/build/_shared/chunk-MNKRFUW7.js", "/build/_shared/chunk-PBINOJUV.js", "/build/_shared/chunk-XLUNUOUT.js", "/build/_shared/chunk-G75WUHAZ.js", "/build/_shared/chunk-GDVQ557H.js", "/build/_shared/chunk-SBSGXD5Z.js", "/build/_shared/chunk-NB6GFRNN.js", "/build/_shared/chunk-FKWMQIXM.js", "/build/_shared/chunk-O6T3OKOB.js", "/build/_shared/chunk-VYWDFFOA.js", "/build/_shared/chunk-TGPNMAVK.js", "/build/_shared/chunk-2BLSR254.js"], hasAction: !1, hasLoader: !0, hasErrorBoundary: !1 }, "routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.schedules": { id: "routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.schedules", parentId: "routes/_app.orgs.$organizationSlug.projects.v3.$projectParam", path: "schedules", index: void 0, caseSensitive: void 0, module: "/build/routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.schedules-O7YTGL77.js", imports: ["/build/_shared/chunk-TPWC7APJ.js", "/build/_shared/chunk-GKEAUNXO.js", "/build/_shared/chunk-PG42Q4ZK.js", "/build/_shared/chunk-W3IMGLQI.js", "/build/_shared/chunk-GKC723XP.js", "/build/_shared/chunk-MNKRFUW7.js", "/build/_shared/chunk-XS2XTM7I.js", "/build/_shared/chunk-RNSPZWJ4.js", "/build/_shared/chunk-LYMFAN7V.js", "/build/_shared/chunk-4XW6GOV5.js", "/build/_shared/chunk-3TQ2KUDT.js", "/build/_shared/chunk-RJPCQAIK.js", "/build/_shared/chunk-GDVQ557H.js", "/build/_shared/chunk-SBSGXD5Z.js", "/build/_shared/chunk-NB6GFRNN.js", "/build/_shared/chunk-FKWMQIXM.js", "/build/_shared/chunk-UW7CEVYE.js", "/build/_shared/chunk-FVYECWQQ.js", "/build/_shared/chunk-BDMKDQRC.js", "/build/_shared/chunk-UGCEOWBE.js", "/build/_shared/chunk-V7RLTIQT.js", "/build/_shared/chunk-HKHUV7OI.js", "/build/_shared/chunk-RTPAOLHU.js", "/build/_shared/chunk-BIWIT6XE.js", "/build/_shared/chunk-4QBAYZXH.js", "/build/_shared/chunk-WTLCO7GZ.js", "/build/_shared/chunk-2B3SSTVQ.js", "/build/_shared/chunk-NYYE4FTH.js", "/build/_shared/chunk-BJJDMBQV.js", "/build/_shared/chunk-GP5XYEW5.js", "/build/_shared/chunk-4WHSRCQV.js", "/build/_shared/chunk-ZBQ6KKHY.js", "/build/_shared/chunk-QRF3DCUW.js", "/build/_shared/chunk-L5OF72BL.js", "/build/_shared/chunk-KIAMXGUL.js", "/build/_shared/chunk-LRJWEOAP.js", "/build/_shared/chunk-53BC46H2.js", "/build/_shared/chunk-GVVQJ7TX.js", "/build/_shared/chunk-4QLYPARN.js", "/build/_shared/chunk-AEDMGY7M.js", "/build/_shared/chunk-JHQSSEEW.js", "/build/_shared/chunk-LZFJYVDM.js", "/build/_shared/chunk-2X7GG4YA.js", "/build/_shared/chunk-6VY3TGHV.js", "/build/_shared/chunk-TGPNMAVK.js", "/build/_shared/chunk-LBCN2YVJ.js", "/build/_shared/chunk-LD5CY63I.js", "/build/_shared/chunk-Y7Z57SGD.js", "/build/_shared/chunk-LKTYH4KV.js", "/build/_shared/chunk-X7G7TLQ6.js", "/build/_shared/chunk-HS3AAZGP.js", "/build/_shared/chunk-SNHKI5QX.js", "/build/_shared/chunk-G26VUZ3V.js", "/build/_shared/chunk-5XDHH4UN.js", "/build/_shared/chunk-7ENN74BL.js", "/build/_shared/chunk-G4EM45JG.js", "/build/_shared/chunk-ANF4WBNI.js", "/build/_shared/chunk-4W4YPBCQ.js", "/build/_shared/chunk-HRCMIQSB.js", "/build/_shared/chunk-L6B4ZRM6.js", "/build/_shared/chunk-QMQUAZ65.js", "/build/_shared/chunk-YOYFDK4O.js", "/build/_shared/chunk-ICEDALHM.js", "/build/_shared/chunk-ZOFUYGVL.js", "/build/_shared/chunk-A4HAOIEH.js", "/build/_shared/chunk-REAXH7HE.js", "/build/_shared/chunk-XO75RT3N.js", "/build/_shared/chunk-NTXIRLKV.js", "/build/_shared/chunk-VMR4SOYV.js", "/build/_shared/chunk-ITYDXQLP.js", "/build/_shared/chunk-TCCEOGB7.js"], hasAction: !1, hasLoader: !0, hasErrorBoundary: !1 }, "routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.schedules.$scheduleParam": { id: "routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.schedules.$scheduleParam", parentId: "routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.schedules", path: ":scheduleParam", index: void 0, caseSensitive: void 0, module: "/build/routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.schedules.$scheduleParam-OGFMKRCV.js", imports: ["/build/_shared/chunk-PXE3LKDR.js", "/build/_shared/chunk-6MAI3NMP.js", "/build/_shared/chunk-72YEZCB7.js", "/build/_shared/chunk-PBINOJUV.js", "/build/_shared/chunk-XLUNUOUT.js", "/build/_shared/chunk-UUFJ3KKB.js", "/build/_shared/chunk-GWRYVNME.js", "/build/_shared/chunk-O6T3OKOB.js", "/build/_shared/chunk-VYWDFFOA.js", "/build/_shared/chunk-2BLSR254.js"], hasAction: !0, hasLoader: !0, hasErrorBoundary: !1 }, "routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.schedules.edit.$scheduleParam": { id: "routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.schedules.edit.$scheduleParam", parentId: "routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.schedules", path: "edit/:scheduleParam", index: void 0, caseSensitive: void 0, module: "/build/routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.schedules.edit.$scheduleParam-PDVALJRR.js", imports: ["/build/_shared/chunk-I67O7P3A.js", "/build/_shared/chunk-NMKOPZWV.js", "/build/_shared/chunk-XLUNUOUT.js", "/build/_shared/chunk-WFJRBION.js", "/build/_shared/chunk-EB63UTWA.js", "/build/_shared/chunk-AXRBBWHF.js", "/build/_shared/chunk-GWRYVNME.js", "/build/_shared/chunk-O6T3OKOB.js"], hasAction: !1, hasLoader: !0, hasErrorBoundary: !1 }, "routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.schedules.new": { id: "routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.schedules.new", parentId: "routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.schedules", path: "new", index: void 0, caseSensitive: void 0, module: "/build/routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.schedules.new-OX4SKX7R.js", imports: ["/build/_shared/chunk-I67O7P3A.js", "/build/_shared/chunk-NMKOPZWV.js", "/build/_shared/chunk-XLUNUOUT.js", "/build/_shared/chunk-WFJRBION.js", "/build/_shared/chunk-EB63UTWA.js", "/build/_shared/chunk-AXRBBWHF.js", "/build/_shared/chunk-GWRYVNME.js", "/build/_shared/chunk-O6T3OKOB.js"], hasAction: !1, hasLoader: !0, hasErrorBoundary: !1 }, "routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.settings": { id: "routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.settings", parentId: "routes/_app.orgs.$organizationSlug.projects.v3.$projectParam", path: "settings", index: void 0, caseSensitive: void 0, module: "/build/routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.settings-4HVVOW4C.js", imports: ["/build/_shared/chunk-AXRBBWHF.js", "/build/_shared/chunk-LYMFAN7V.js", "/build/_shared/chunk-4XW6GOV5.js", "/build/_shared/chunk-3TQ2KUDT.js", "/build/_shared/chunk-RJPCQAIK.js", "/build/_shared/chunk-GDVQ557H.js", "/build/_shared/chunk-SBSGXD5Z.js", "/build/_shared/chunk-NB6GFRNN.js", "/build/_shared/chunk-UW7CEVYE.js", "/build/_shared/chunk-FVYECWQQ.js", "/build/_shared/chunk-BDMKDQRC.js", "/build/_shared/chunk-UGCEOWBE.js", "/build/_shared/chunk-V7RLTIQT.js", "/build/_shared/chunk-HKHUV7OI.js", "/build/_shared/chunk-RTPAOLHU.js", "/build/_shared/chunk-BIWIT6XE.js", "/build/_shared/chunk-4QBAYZXH.js", "/build/_shared/chunk-WTLCO7GZ.js", "/build/_shared/chunk-2B3SSTVQ.js", "/build/_shared/chunk-NYYE4FTH.js", "/build/_shared/chunk-BJJDMBQV.js", "/build/_shared/chunk-GP5XYEW5.js", "/build/_shared/chunk-4WHSRCQV.js", "/build/_shared/chunk-ZBQ6KKHY.js", "/build/_shared/chunk-QRF3DCUW.js", "/build/_shared/chunk-L5OF72BL.js", "/build/_shared/chunk-KIAMXGUL.js", "/build/_shared/chunk-LRJWEOAP.js", "/build/_shared/chunk-53BC46H2.js", "/build/_shared/chunk-GVVQJ7TX.js", "/build/_shared/chunk-4QLYPARN.js", "/build/_shared/chunk-AEDMGY7M.js", "/build/_shared/chunk-JHQSSEEW.js", "/build/_shared/chunk-LZFJYVDM.js", "/build/_shared/chunk-2X7GG4YA.js", "/build/_shared/chunk-6VY3TGHV.js", "/build/_shared/chunk-LBCN2YVJ.js", "/build/_shared/chunk-LD5CY63I.js", "/build/_shared/chunk-Y7Z57SGD.js", "/build/_shared/chunk-LKTYH4KV.js", "/build/_shared/chunk-X7G7TLQ6.js", "/build/_shared/chunk-HS3AAZGP.js", "/build/_shared/chunk-SNHKI5QX.js", "/build/_shared/chunk-G26VUZ3V.js", "/build/_shared/chunk-5XDHH4UN.js", "/build/_shared/chunk-7ENN74BL.js", "/build/_shared/chunk-G4EM45JG.js", "/build/_shared/chunk-ANF4WBNI.js", "/build/_shared/chunk-4W4YPBCQ.js", "/build/_shared/chunk-HRCMIQSB.js", "/build/_shared/chunk-L6B4ZRM6.js", "/build/_shared/chunk-QMQUAZ65.js", "/build/_shared/chunk-YOYFDK4O.js", "/build/_shared/chunk-ICEDALHM.js", "/build/_shared/chunk-ZOFUYGVL.js", "/build/_shared/chunk-A4HAOIEH.js", "/build/_shared/chunk-REAXH7HE.js", "/build/_shared/chunk-XO75RT3N.js", "/build/_shared/chunk-NTXIRLKV.js", "/build/_shared/chunk-VMR4SOYV.js", "/build/_shared/chunk-ITYDXQLP.js", "/build/_shared/chunk-TCCEOGB7.js"], hasAction: !0, hasLoader: !1, hasErrorBoundary: !1 }, "routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.tasks.stream": { id: "routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.tasks.stream", parentId: "routes/_app.orgs.$organizationSlug.projects.v3.$projectParam", path: "tasks/stream", index: void 0, caseSensitive: void 0, module: "/build/routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.tasks.stream-QKEA2YEM.js", imports: void 0, hasAction: !1, hasLoader: !0, hasErrorBoundary: !1 }, "routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.test": { id: "routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.test", parentId: "routes/_app.orgs.$organizationSlug.projects.v3.$projectParam", path: "test", index: void 0, caseSensitive: void 0, module: "/build/routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.test-662ZY35M.js", imports: ["/build/_shared/chunk-AV3RTZY3.js", "/build/_shared/chunk-7U3APYSQ.js", "/build/_shared/chunk-GKEAUNXO.js", "/build/_shared/chunk-B6ECCFQG.js", "/build/_shared/chunk-GMFAY4XV.js", "/build/_shared/chunk-5Y65PHTP.js", "/build/_shared/chunk-XS2XTM7I.js", "/build/_shared/chunk-J4EBRO22.js", "/build/_shared/chunk-AAKY77KV.js", "/build/_shared/chunk-67PE2T7V.js", "/build/_shared/chunk-LYMFAN7V.js", "/build/_shared/chunk-FWWZK4PR.js", "/build/_shared/chunk-RJPCQAIK.js", "/build/_shared/chunk-GDVQ557H.js", "/build/_shared/chunk-SBSGXD5Z.js", "/build/_shared/chunk-NB6GFRNN.js", "/build/_shared/chunk-FKWMQIXM.js", "/build/_shared/chunk-UW7CEVYE.js", "/build/_shared/chunk-FVYECWQQ.js", "/build/_shared/chunk-BDMKDQRC.js", "/build/_shared/chunk-UGCEOWBE.js", "/build/_shared/chunk-V7RLTIQT.js", "/build/_shared/chunk-HKHUV7OI.js", "/build/_shared/chunk-RTPAOLHU.js", "/build/_shared/chunk-BIWIT6XE.js", "/build/_shared/chunk-4QBAYZXH.js", "/build/_shared/chunk-WTLCO7GZ.js", "/build/_shared/chunk-2B3SSTVQ.js", "/build/_shared/chunk-NYYE4FTH.js", "/build/_shared/chunk-BJJDMBQV.js", "/build/_shared/chunk-GP5XYEW5.js", "/build/_shared/chunk-4WHSRCQV.js", "/build/_shared/chunk-ZBQ6KKHY.js", "/build/_shared/chunk-QRF3DCUW.js", "/build/_shared/chunk-L5OF72BL.js", "/build/_shared/chunk-KIAMXGUL.js", "/build/_shared/chunk-LRJWEOAP.js", "/build/_shared/chunk-53BC46H2.js", "/build/_shared/chunk-GVVQJ7TX.js", "/build/_shared/chunk-4QLYPARN.js", "/build/_shared/chunk-AEDMGY7M.js", "/build/_shared/chunk-JHQSSEEW.js", "/build/_shared/chunk-LZFJYVDM.js", "/build/_shared/chunk-2X7GG4YA.js", "/build/_shared/chunk-6VY3TGHV.js", "/build/_shared/chunk-TGPNMAVK.js", "/build/_shared/chunk-LBCN2YVJ.js", "/build/_shared/chunk-LD5CY63I.js", "/build/_shared/chunk-Y7Z57SGD.js", "/build/_shared/chunk-LKTYH4KV.js", "/build/_shared/chunk-X7G7TLQ6.js", "/build/_shared/chunk-HS3AAZGP.js", "/build/_shared/chunk-SNHKI5QX.js", "/build/_shared/chunk-G26VUZ3V.js", "/build/_shared/chunk-5XDHH4UN.js", "/build/_shared/chunk-7ENN74BL.js", "/build/_shared/chunk-G4EM45JG.js", "/build/_shared/chunk-ANF4WBNI.js", "/build/_shared/chunk-4W4YPBCQ.js", "/build/_shared/chunk-HRCMIQSB.js", "/build/_shared/chunk-L6B4ZRM6.js", "/build/_shared/chunk-QMQUAZ65.js", "/build/_shared/chunk-YOYFDK4O.js", "/build/_shared/chunk-ICEDALHM.js", "/build/_shared/chunk-ZOFUYGVL.js", "/build/_shared/chunk-A4HAOIEH.js", "/build/_shared/chunk-REAXH7HE.js", "/build/_shared/chunk-XO75RT3N.js", "/build/_shared/chunk-NTXIRLKV.js", "/build/_shared/chunk-VMR4SOYV.js", "/build/_shared/chunk-ITYDXQLP.js", "/build/_shared/chunk-TCCEOGB7.js"], hasAction: !1, hasLoader: !0, hasErrorBoundary: !1 }, "routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.test.tasks.$taskParam": { id: "routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.test.tasks.$taskParam", parentId: "routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.test", path: "tasks/:taskParam", index: void 0, caseSensitive: void 0, module: "/build/routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.test.tasks.$taskParam-NI32OD45.js", imports: ["/build/_shared/chunk-XXUO2QST.js", "/build/_shared/chunk-DHXQYV6R.js", "/build/_shared/chunk-CPXEV6S7.js", "/build/_shared/chunk-PBINOJUV.js", "/build/_shared/chunk-WFJRBION.js", "/build/_shared/chunk-EB63UTWA.js", "/build/_shared/chunk-AXRBBWHF.js", "/build/_shared/chunk-YHUP73F5.js", "/build/_shared/chunk-VYWDFFOA.js"], hasAction: !0, hasLoader: !0, hasErrorBoundary: !1 }, "routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.traces.$traceId.spans.$spanId": { id: "routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.traces.$traceId.spans.$spanId", parentId: "routes/_app.orgs.$organizationSlug.projects.v3.$projectParam", path: "traces/:traceId/spans/:spanId", index: void 0, caseSensitive: void 0, module: "/build/routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.traces.$traceId.spans.$spanId-A5G7KVFB.js", imports: void 0, hasAction: !1, hasLoader: !0, hasErrorBoundary: !1 }, "routes/_app.orgs.$organizationSlug.settings": { id: "routes/_app.orgs.$organizationSlug.settings", parentId: "routes/_app.orgs.$organizationSlug", path: "settings", index: void 0, caseSensitive: void 0, module: "/build/routes/_app.orgs.$organizationSlug.settings-PRKHLDTJ.js", imports: ["/build/_shared/chunk-W2JHKSSW.js", "/build/_shared/chunk-AXRBBWHF.js", "/build/_shared/chunk-LYMFAN7V.js", "/build/_shared/chunk-RJPCQAIK.js", "/build/_shared/chunk-YHUP73F5.js", "/build/_shared/chunk-GDVQ557H.js", "/build/_shared/chunk-SBSGXD5Z.js", "/build/_shared/chunk-NB6GFRNN.js", "/build/_shared/chunk-GWRYVNME.js"], hasAction: !0, hasLoader: !1, hasErrorBoundary: !1 }, "routes/_app.orgs.$organizationSlug.team": { id: "routes/_app.orgs.$organizationSlug.team", parentId: "routes/_app.orgs.$organizationSlug", path: "team", index: void 0, caseSensitive: void 0, module: "/build/routes/_app.orgs.$organizationSlug.team-V7OI4EDJ.js", imports: ["/build/_shared/chunk-W4RB4EX3.js", "/build/_shared/chunk-GQNIVODX.js", "/build/_shared/chunk-MNKRFUW7.js", "/build/_shared/chunk-GMFAY4XV.js", "/build/_shared/chunk-AAKY77KV.js", "/build/_shared/chunk-67PE2T7V.js", "/build/_shared/chunk-4XW6GOV5.js", "/build/_shared/chunk-3TQ2KUDT.js", "/build/_shared/chunk-GDVQ557H.js", "/build/_shared/chunk-SBSGXD5Z.js", "/build/_shared/chunk-NB6GFRNN.js", "/build/_shared/chunk-GWRYVNME.js"], hasAction: !0, hasLoader: !0, hasErrorBoundary: !1 }, "routes/_app.orgs.$organizationSlug.v3.billing": { id: "routes/_app.orgs.$organizationSlug.v3.billing", parentId: "routes/_app.orgs.$organizationSlug", path: "v3/billing", index: void 0, caseSensitive: void 0, module: "/build/routes/_app.orgs.$organizationSlug.v3.billing-NQBPB556.js", imports: ["/build/_shared/chunk-XJT5Q3RT.js", "/build/_shared/chunk-DUWJZIKN.js", "/build/_shared/chunk-JT5NPEQM.js", "/build/_shared/chunk-GDVQ557H.js", "/build/_shared/chunk-SBSGXD5Z.js", "/build/_shared/chunk-NB6GFRNN.js", "/build/_shared/chunk-GWRYVNME.js"], hasAction: !1, hasLoader: !0, hasErrorBoundary: !1 }, "routes/_app.orgs.$organizationSlug.v3.usage": { id: "routes/_app.orgs.$organizationSlug.v3.usage", parentId: "routes/_app.orgs.$organizationSlug", path: "v3/usage", index: void 0, caseSensitive: void 0, module: "/build/routes/_app.orgs.$organizationSlug.v3.usage-MYHY7SIX.js", imports: ["/build/_shared/chunk-JT5NPEQM.js", "/build/_shared/chunk-NJAYDH4L.js", "/build/_shared/chunk-OVQ7W575.js", "/build/_shared/chunk-GKEAUNXO.js", "/build/_shared/chunk-6MAI3NMP.js", "/build/_shared/chunk-CPXEV6S7.js", "/build/_shared/chunk-GDVQ557H.js", "/build/_shared/chunk-SBSGXD5Z.js", "/build/_shared/chunk-NB6GFRNN.js", "/build/_shared/chunk-GWRYVNME.js", "/build/_shared/chunk-TGPNMAVK.js", "/build/_shared/chunk-2BLSR254.js"], hasAction: !1, hasLoader: !0, hasErrorBoundary: !1 }, "routes/_app.orgs.$organizationSlug_.projects.new": { id: "routes/_app.orgs.$organizationSlug_.projects.new", parentId: "routes/_app", path: "orgs/:organizationSlug/projects/new", index: void 0, caseSensitive: void 0, module: "/build/routes/_app.orgs.$organizationSlug_.projects.new-G27X5HNM.js", imports: ["/build/_shared/chunk-TI42EI3A.js", "/build/_shared/chunk-JT5NPEQM.js", "/build/_shared/chunk-GKC723XP.js", "/build/_shared/chunk-LYMFAN7V.js", "/build/_shared/chunk-5TRFQBKG.js", "/build/_shared/chunk-GWRYVNME.js", "/build/_shared/chunk-UW7CEVYE.js", "/build/_shared/chunk-FVYECWQQ.js", "/build/_shared/chunk-BDMKDQRC.js", "/build/_shared/chunk-UGCEOWBE.js", "/build/_shared/chunk-V7RLTIQT.js", "/build/_shared/chunk-HKHUV7OI.js", "/build/_shared/chunk-RTPAOLHU.js", "/build/_shared/chunk-BIWIT6XE.js", "/build/_shared/chunk-4QBAYZXH.js", "/build/_shared/chunk-WTLCO7GZ.js", "/build/_shared/chunk-2B3SSTVQ.js", "/build/_shared/chunk-NYYE4FTH.js", "/build/_shared/chunk-BJJDMBQV.js", "/build/_shared/chunk-GP5XYEW5.js", "/build/_shared/chunk-4WHSRCQV.js", "/build/_shared/chunk-ZBQ6KKHY.js", "/build/_shared/chunk-QRF3DCUW.js", "/build/_shared/chunk-L5OF72BL.js", "/build/_shared/chunk-KIAMXGUL.js", "/build/_shared/chunk-LRJWEOAP.js", "/build/_shared/chunk-53BC46H2.js", "/build/_shared/chunk-GVVQJ7TX.js", "/build/_shared/chunk-4QLYPARN.js", "/build/_shared/chunk-AEDMGY7M.js", "/build/_shared/chunk-JHQSSEEW.js", "/build/_shared/chunk-LZFJYVDM.js", "/build/_shared/chunk-2X7GG4YA.js", "/build/_shared/chunk-6VY3TGHV.js", "/build/_shared/chunk-LBCN2YVJ.js", "/build/_shared/chunk-LD5CY63I.js", "/build/_shared/chunk-Y7Z57SGD.js", "/build/_shared/chunk-LKTYH4KV.js", "/build/_shared/chunk-X7G7TLQ6.js", "/build/_shared/chunk-HS3AAZGP.js", "/build/_shared/chunk-SNHKI5QX.js", "/build/_shared/chunk-G26VUZ3V.js", "/build/_shared/chunk-5XDHH4UN.js", "/build/_shared/chunk-7ENN74BL.js", "/build/_shared/chunk-G4EM45JG.js", "/build/_shared/chunk-ANF4WBNI.js", "/build/_shared/chunk-4W4YPBCQ.js", "/build/_shared/chunk-HRCMIQSB.js", "/build/_shared/chunk-L6B4ZRM6.js", "/build/_shared/chunk-QMQUAZ65.js", "/build/_shared/chunk-YOYFDK4O.js", "/build/_shared/chunk-ICEDALHM.js", "/build/_shared/chunk-ZOFUYGVL.js", "/build/_shared/chunk-A4HAOIEH.js", "/build/_shared/chunk-REAXH7HE.js", "/build/_shared/chunk-XO75RT3N.js", "/build/_shared/chunk-NTXIRLKV.js", "/build/_shared/chunk-VMR4SOYV.js", "/build/_shared/chunk-ITYDXQLP.js", "/build/_shared/chunk-TCCEOGB7.js"], hasAction: !0, hasLoader: !0, hasErrorBoundary: !1 }, "routes/_app.orgs.$organizationSlug_.select-plan": { id: "routes/_app.orgs.$organizationSlug_.select-plan", parentId: "routes/_app", path: "orgs/:organizationSlug/select-plan", index: void 0, caseSensitive: void 0, module: "/build/routes/_app.orgs.$organizationSlug_.select-plan-SLE5QU6D.js", imports: ["/build/_shared/chunk-XJT5Q3RT.js", "/build/_shared/chunk-DUWJZIKN.js", "/build/_shared/chunk-JT5NPEQM.js", "/build/_shared/chunk-GWRYVNME.js", "/build/_shared/chunk-UW7CEVYE.js", "/build/_shared/chunk-FVYECWQQ.js", "/build/_shared/chunk-BDMKDQRC.js", "/build/_shared/chunk-UGCEOWBE.js", "/build/_shared/chunk-V7RLTIQT.js", "/build/_shared/chunk-HKHUV7OI.js", "/build/_shared/chunk-RTPAOLHU.js", "/build/_shared/chunk-BIWIT6XE.js", "/build/_shared/chunk-4QBAYZXH.js", "/build/_shared/chunk-WTLCO7GZ.js", "/build/_shared/chunk-2B3SSTVQ.js", "/build/_shared/chunk-NYYE4FTH.js", "/build/_shared/chunk-BJJDMBQV.js", "/build/_shared/chunk-GP5XYEW5.js", "/build/_shared/chunk-4WHSRCQV.js", "/build/_shared/chunk-ZBQ6KKHY.js", "/build/_shared/chunk-QRF3DCUW.js", "/build/_shared/chunk-L5OF72BL.js", "/build/_shared/chunk-KIAMXGUL.js", "/build/_shared/chunk-LRJWEOAP.js", "/build/_shared/chunk-53BC46H2.js", "/build/_shared/chunk-GVVQJ7TX.js", "/build/_shared/chunk-4QLYPARN.js", "/build/_shared/chunk-AEDMGY7M.js", "/build/_shared/chunk-JHQSSEEW.js", "/build/_shared/chunk-LZFJYVDM.js", "/build/_shared/chunk-2X7GG4YA.js", "/build/_shared/chunk-6VY3TGHV.js", "/build/_shared/chunk-LBCN2YVJ.js", "/build/_shared/chunk-LD5CY63I.js", "/build/_shared/chunk-Y7Z57SGD.js", "/build/_shared/chunk-LKTYH4KV.js", "/build/_shared/chunk-X7G7TLQ6.js", "/build/_shared/chunk-HS3AAZGP.js", "/build/_shared/chunk-SNHKI5QX.js", "/build/_shared/chunk-G26VUZ3V.js", "/build/_shared/chunk-5XDHH4UN.js", "/build/_shared/chunk-7ENN74BL.js", "/build/_shared/chunk-G4EM45JG.js", "/build/_shared/chunk-ANF4WBNI.js", "/build/_shared/chunk-4W4YPBCQ.js", "/build/_shared/chunk-HRCMIQSB.js", "/build/_shared/chunk-L6B4ZRM6.js", "/build/_shared/chunk-QMQUAZ65.js", "/build/_shared/chunk-YOYFDK4O.js", "/build/_shared/chunk-ICEDALHM.js", "/build/_shared/chunk-ZOFUYGVL.js", "/build/_shared/chunk-A4HAOIEH.js", "/build/_shared/chunk-REAXH7HE.js", "/build/_shared/chunk-XO75RT3N.js", "/build/_shared/chunk-NTXIRLKV.js", "/build/_shared/chunk-VMR4SOYV.js", "/build/_shared/chunk-ITYDXQLP.js", "/build/_shared/chunk-TCCEOGB7.js"], hasAction: !1, hasLoader: !0, hasErrorBoundary: !1 }, "routes/_app.orgs.$organizationSlug_.subscribed": { id: "routes/_app.orgs.$organizationSlug_.subscribed", parentId: "routes/_app", path: "orgs/:organizationSlug/subscribed", index: void 0, caseSensitive: void 0, module: "/build/routes/_app.orgs.$organizationSlug_.subscribed-ELXTPQLW.js", imports: ["/build/_shared/chunk-MBHX5NR2.js", "/build/_shared/chunk-TI42EI3A.js", "/build/_shared/chunk-JT5NPEQM.js", "/build/_shared/chunk-6MAI3NMP.js", "/build/_shared/chunk-UW7CEVYE.js", "/build/_shared/chunk-FVYECWQQ.js", "/build/_shared/chunk-BDMKDQRC.js", "/build/_shared/chunk-UGCEOWBE.js", "/build/_shared/chunk-V7RLTIQT.js", "/build/_shared/chunk-HKHUV7OI.js", "/build/_shared/chunk-RTPAOLHU.js", "/build/_shared/chunk-BIWIT6XE.js", "/build/_shared/chunk-4QBAYZXH.js", "/build/_shared/chunk-WTLCO7GZ.js", "/build/_shared/chunk-2B3SSTVQ.js", "/build/_shared/chunk-NYYE4FTH.js", "/build/_shared/chunk-BJJDMBQV.js", "/build/_shared/chunk-GP5XYEW5.js", "/build/_shared/chunk-4WHSRCQV.js", "/build/_shared/chunk-ZBQ6KKHY.js", "/build/_shared/chunk-QRF3DCUW.js", "/build/_shared/chunk-L5OF72BL.js", "/build/_shared/chunk-KIAMXGUL.js", "/build/_shared/chunk-LRJWEOAP.js", "/build/_shared/chunk-53BC46H2.js", "/build/_shared/chunk-GVVQJ7TX.js", "/build/_shared/chunk-4QLYPARN.js", "/build/_shared/chunk-AEDMGY7M.js", "/build/_shared/chunk-JHQSSEEW.js", "/build/_shared/chunk-LZFJYVDM.js", "/build/_shared/chunk-2X7GG4YA.js", "/build/_shared/chunk-6VY3TGHV.js", "/build/_shared/chunk-LBCN2YVJ.js", "/build/_shared/chunk-LD5CY63I.js", "/build/_shared/chunk-Y7Z57SGD.js", "/build/_shared/chunk-LKTYH4KV.js", "/build/_shared/chunk-X7G7TLQ6.js", "/build/_shared/chunk-HS3AAZGP.js", "/build/_shared/chunk-SNHKI5QX.js", "/build/_shared/chunk-G26VUZ3V.js", "/build/_shared/chunk-5XDHH4UN.js", "/build/_shared/chunk-7ENN74BL.js", "/build/_shared/chunk-G4EM45JG.js", "/build/_shared/chunk-ANF4WBNI.js", "/build/_shared/chunk-4W4YPBCQ.js", "/build/_shared/chunk-HRCMIQSB.js", "/build/_shared/chunk-L6B4ZRM6.js", "/build/_shared/chunk-QMQUAZ65.js", "/build/_shared/chunk-YOYFDK4O.js", "/build/_shared/chunk-ICEDALHM.js", "/build/_shared/chunk-ZOFUYGVL.js", "/build/_shared/chunk-A4HAOIEH.js", "/build/_shared/chunk-REAXH7HE.js", "/build/_shared/chunk-XO75RT3N.js", "/build/_shared/chunk-NTXIRLKV.js", "/build/_shared/chunk-VMR4SOYV.js", "/build/_shared/chunk-ITYDXQLP.js", "/build/_shared/chunk-TCCEOGB7.js"], hasAction: !1, hasLoader: !0, hasErrorBoundary: !1 }, "routes/_app.orgs.new": { id: "routes/_app.orgs.new", parentId: "routes/_app", path: "orgs/new", index: void 0, caseSensitive: void 0, module: "/build/routes/_app.orgs.new-YDMTDFSR.js", imports: ["/build/_shared/chunk-TI42EI3A.js", "/build/_shared/chunk-B6ECCFQG.js", "/build/_shared/chunk-GMFAY4XV.js", "/build/_shared/chunk-5Y65PHTP.js", "/build/_shared/chunk-J4EBRO22.js", "/build/_shared/chunk-AAKY77KV.js", "/build/_shared/chunk-67PE2T7V.js", "/build/_shared/chunk-AXRBBWHF.js", "/build/_shared/chunk-LYMFAN7V.js", "/build/_shared/chunk-5TRFQBKG.js", "/build/_shared/chunk-UW7CEVYE.js", "/build/_shared/chunk-FVYECWQQ.js", "/build/_shared/chunk-BDMKDQRC.js", "/build/_shared/chunk-UGCEOWBE.js", "/build/_shared/chunk-V7RLTIQT.js", "/build/_shared/chunk-HKHUV7OI.js", "/build/_shared/chunk-RTPAOLHU.js", "/build/_shared/chunk-BIWIT6XE.js", "/build/_shared/chunk-4QBAYZXH.js", "/build/_shared/chunk-WTLCO7GZ.js", "/build/_shared/chunk-2B3SSTVQ.js", "/build/_shared/chunk-NYYE4FTH.js", "/build/_shared/chunk-BJJDMBQV.js", "/build/_shared/chunk-GP5XYEW5.js", "/build/_shared/chunk-4WHSRCQV.js", "/build/_shared/chunk-ZBQ6KKHY.js", "/build/_shared/chunk-QRF3DCUW.js", "/build/_shared/chunk-L5OF72BL.js", "/build/_shared/chunk-KIAMXGUL.js", "/build/_shared/chunk-LRJWEOAP.js", "/build/_shared/chunk-53BC46H2.js", "/build/_shared/chunk-GVVQJ7TX.js", "/build/_shared/chunk-4QLYPARN.js", "/build/_shared/chunk-AEDMGY7M.js", "/build/_shared/chunk-JHQSSEEW.js", "/build/_shared/chunk-LZFJYVDM.js", "/build/_shared/chunk-2X7GG4YA.js", "/build/_shared/chunk-6VY3TGHV.js", "/build/_shared/chunk-LBCN2YVJ.js", "/build/_shared/chunk-LD5CY63I.js", "/build/_shared/chunk-Y7Z57SGD.js", "/build/_shared/chunk-LKTYH4KV.js", "/build/_shared/chunk-X7G7TLQ6.js", "/build/_shared/chunk-HS3AAZGP.js", "/build/_shared/chunk-SNHKI5QX.js", "/build/_shared/chunk-G26VUZ3V.js", "/build/_shared/chunk-5XDHH4UN.js", "/build/_shared/chunk-7ENN74BL.js", "/build/_shared/chunk-G4EM45JG.js", "/build/_shared/chunk-ANF4WBNI.js", "/build/_shared/chunk-4W4YPBCQ.js", "/build/_shared/chunk-HRCMIQSB.js", "/build/_shared/chunk-L6B4ZRM6.js", "/build/_shared/chunk-QMQUAZ65.js", "/build/_shared/chunk-YOYFDK4O.js", "/build/_shared/chunk-ICEDALHM.js", "/build/_shared/chunk-ZOFUYGVL.js", "/build/_shared/chunk-A4HAOIEH.js", "/build/_shared/chunk-REAXH7HE.js", "/build/_shared/chunk-XO75RT3N.js", "/build/_shared/chunk-NTXIRLKV.js", "/build/_shared/chunk-VMR4SOYV.js", "/build/_shared/chunk-ITYDXQLP.js", "/build/_shared/chunk-TCCEOGB7.js"], hasAction: !0, hasLoader: !0, hasErrorBoundary: !1 }, "routes/_app.timezones": { id: "routes/_app.timezones", parentId: "routes/_app", path: "timezones", index: void 0, caseSensitive: void 0, module: "/build/routes/_app.timezones-VN7M4MSR.js", imports: ["/build/_shared/chunk-SNHKI5QX.js", "/build/_shared/chunk-G26VUZ3V.js", "/build/_shared/chunk-ZOFUYGVL.js", "/build/_shared/chunk-VMR4SOYV.js", "/build/_shared/chunk-ITYDXQLP.js"], hasAction: !1, hasLoader: !0, hasErrorBoundary: !1 }, "routes/account": { id: "routes/account", parentId: "root", path: "account", index: void 0, caseSensitive: void 0, module: "/build/routes/account-POHKUMCL.js", imports: void 0, hasAction: !1, hasLoader: !1, hasErrorBoundary: !1 }, "routes/account._index": { id: "routes/account._index", parentId: "routes/account", path: void 0, index: !0, caseSensitive: void 0, module: "/build/routes/account._index-WHTET5PV.js", imports: ["/build/_shared/chunk-B7RZPZQJ.js", "/build/_shared/chunk-XLUNUOUT.js", "/build/_shared/chunk-AXRBBWHF.js", "/build/_shared/chunk-LYMFAN7V.js", "/build/_shared/chunk-GDVQ557H.js", "/build/_shared/chunk-SBSGXD5Z.js", "/build/_shared/chunk-NB6GFRNN.js", "/build/_shared/chunk-GWRYVNME.js", "/build/_shared/chunk-UW7CEVYE.js", "/build/_shared/chunk-FVYECWQQ.js", "/build/_shared/chunk-BDMKDQRC.js", "/build/_shared/chunk-UGCEOWBE.js", "/build/_shared/chunk-V7RLTIQT.js", "/build/_shared/chunk-HKHUV7OI.js", "/build/_shared/chunk-RTPAOLHU.js", "/build/_shared/chunk-BIWIT6XE.js", "/build/_shared/chunk-4QBAYZXH.js", "/build/_shared/chunk-WTLCO7GZ.js", "/build/_shared/chunk-2B3SSTVQ.js", "/build/_shared/chunk-NYYE4FTH.js", "/build/_shared/chunk-BJJDMBQV.js", "/build/_shared/chunk-GP5XYEW5.js", "/build/_shared/chunk-4WHSRCQV.js", "/build/_shared/chunk-ZBQ6KKHY.js", "/build/_shared/chunk-QRF3DCUW.js", "/build/_shared/chunk-L5OF72BL.js", "/build/_shared/chunk-KIAMXGUL.js", "/build/_shared/chunk-LRJWEOAP.js", "/build/_shared/chunk-53BC46H2.js", "/build/_shared/chunk-GVVQJ7TX.js", "/build/_shared/chunk-4QLYPARN.js", "/build/_shared/chunk-AEDMGY7M.js", "/build/_shared/chunk-JHQSSEEW.js", "/build/_shared/chunk-LZFJYVDM.js", "/build/_shared/chunk-2X7GG4YA.js", "/build/_shared/chunk-6VY3TGHV.js", "/build/_shared/chunk-LBCN2YVJ.js", "/build/_shared/chunk-LD5CY63I.js", "/build/_shared/chunk-Y7Z57SGD.js", "/build/_shared/chunk-LKTYH4KV.js", "/build/_shared/chunk-X7G7TLQ6.js", "/build/_shared/chunk-HS3AAZGP.js", "/build/_shared/chunk-SNHKI5QX.js", "/build/_shared/chunk-G26VUZ3V.js", "/build/_shared/chunk-5XDHH4UN.js", "/build/_shared/chunk-7ENN74BL.js", "/build/_shared/chunk-G4EM45JG.js", "/build/_shared/chunk-ANF4WBNI.js", "/build/_shared/chunk-4W4YPBCQ.js", "/build/_shared/chunk-HRCMIQSB.js", "/build/_shared/chunk-L6B4ZRM6.js", "/build/_shared/chunk-QMQUAZ65.js", "/build/_shared/chunk-YOYFDK4O.js", "/build/_shared/chunk-ICEDALHM.js", "/build/_shared/chunk-ZOFUYGVL.js", "/build/_shared/chunk-A4HAOIEH.js", "/build/_shared/chunk-REAXH7HE.js", "/build/_shared/chunk-XO75RT3N.js", "/build/_shared/chunk-NTXIRLKV.js", "/build/_shared/chunk-VMR4SOYV.js", "/build/_shared/chunk-ITYDXQLP.js", "/build/_shared/chunk-TCCEOGB7.js"], hasAction: !0, hasLoader: !1, hasErrorBoundary: !1 }, "routes/account.authorization-code.$authorizationCode": { id: "routes/account.authorization-code.$authorizationCode", parentId: "routes/account", path: "authorization-code/:authorizationCode", index: void 0, caseSensitive: void 0, module: "/build/routes/account.authorization-code.$authorizationCode-UB43DAQV.js", imports: ["/build/_shared/chunk-UOL4XDTU.js", "/build/_shared/chunk-YHUP73F5.js", "/build/_shared/chunk-UW7CEVYE.js", "/build/_shared/chunk-FVYECWQQ.js", "/build/_shared/chunk-BDMKDQRC.js", "/build/_shared/chunk-UGCEOWBE.js", "/build/_shared/chunk-V7RLTIQT.js", "/build/_shared/chunk-HKHUV7OI.js", "/build/_shared/chunk-RTPAOLHU.js", "/build/_shared/chunk-BIWIT6XE.js", "/build/_shared/chunk-4QBAYZXH.js", "/build/_shared/chunk-WTLCO7GZ.js", "/build/_shared/chunk-2B3SSTVQ.js", "/build/_shared/chunk-NYYE4FTH.js", "/build/_shared/chunk-BJJDMBQV.js", "/build/_shared/chunk-GP5XYEW5.js", "/build/_shared/chunk-4WHSRCQV.js", "/build/_shared/chunk-ZBQ6KKHY.js", "/build/_shared/chunk-QRF3DCUW.js", "/build/_shared/chunk-L5OF72BL.js", "/build/_shared/chunk-KIAMXGUL.js", "/build/_shared/chunk-LRJWEOAP.js", "/build/_shared/chunk-53BC46H2.js", "/build/_shared/chunk-GVVQJ7TX.js", "/build/_shared/chunk-4QLYPARN.js", "/build/_shared/chunk-AEDMGY7M.js", "/build/_shared/chunk-JHQSSEEW.js", "/build/_shared/chunk-LZFJYVDM.js", "/build/_shared/chunk-2X7GG4YA.js", "/build/_shared/chunk-6VY3TGHV.js", "/build/_shared/chunk-LBCN2YVJ.js", "/build/_shared/chunk-LD5CY63I.js", "/build/_shared/chunk-Y7Z57SGD.js", "/build/_shared/chunk-LKTYH4KV.js", "/build/_shared/chunk-X7G7TLQ6.js", "/build/_shared/chunk-HS3AAZGP.js", "/build/_shared/chunk-SNHKI5QX.js", "/build/_shared/chunk-G26VUZ3V.js", "/build/_shared/chunk-5XDHH4UN.js", "/build/_shared/chunk-7ENN74BL.js", "/build/_shared/chunk-G4EM45JG.js", "/build/_shared/chunk-ANF4WBNI.js", "/build/_shared/chunk-4W4YPBCQ.js", "/build/_shared/chunk-HRCMIQSB.js", "/build/_shared/chunk-L6B4ZRM6.js", "/build/_shared/chunk-QMQUAZ65.js", "/build/_shared/chunk-YOYFDK4O.js", "/build/_shared/chunk-ICEDALHM.js", "/build/_shared/chunk-ZOFUYGVL.js", "/build/_shared/chunk-A4HAOIEH.js", "/build/_shared/chunk-REAXH7HE.js", "/build/_shared/chunk-XO75RT3N.js", "/build/_shared/chunk-NTXIRLKV.js", "/build/_shared/chunk-VMR4SOYV.js", "/build/_shared/chunk-ITYDXQLP.js", "/build/_shared/chunk-TCCEOGB7.js"], hasAction: !1, hasLoader: !0, hasErrorBoundary: !1 }, "routes/account.tokens": { id: "routes/account.tokens", parentId: "routes/account", path: "tokens", index: void 0, caseSensitive: void 0, module: "/build/routes/account.tokens-T7R2JCAR.js", imports: ["/build/_shared/chunk-UOL4XDTU.js", "/build/_shared/chunk-AXRBBWHF.js", "/build/_shared/chunk-LYMFAN7V.js", "/build/_shared/chunk-GDVQ557H.js", "/build/_shared/chunk-SBSGXD5Z.js", "/build/_shared/chunk-NB6GFRNN.js", "/build/_shared/chunk-UW7CEVYE.js", "/build/_shared/chunk-FVYECWQQ.js", "/build/_shared/chunk-BDMKDQRC.js", "/build/_shared/chunk-UGCEOWBE.js", "/build/_shared/chunk-V7RLTIQT.js", "/build/_shared/chunk-HKHUV7OI.js", "/build/_shared/chunk-RTPAOLHU.js", "/build/_shared/chunk-BIWIT6XE.js", "/build/_shared/chunk-4QBAYZXH.js", "/build/_shared/chunk-WTLCO7GZ.js", "/build/_shared/chunk-2B3SSTVQ.js", "/build/_shared/chunk-NYYE4FTH.js", "/build/_shared/chunk-BJJDMBQV.js", "/build/_shared/chunk-GP5XYEW5.js", "/build/_shared/chunk-4WHSRCQV.js", "/build/_shared/chunk-ZBQ6KKHY.js", "/build/_shared/chunk-QRF3DCUW.js", "/build/_shared/chunk-L5OF72BL.js", "/build/_shared/chunk-KIAMXGUL.js", "/build/_shared/chunk-LRJWEOAP.js", "/build/_shared/chunk-53BC46H2.js", "/build/_shared/chunk-GVVQJ7TX.js", "/build/_shared/chunk-4QLYPARN.js", "/build/_shared/chunk-AEDMGY7M.js", "/build/_shared/chunk-JHQSSEEW.js", "/build/_shared/chunk-LZFJYVDM.js", "/build/_shared/chunk-2X7GG4YA.js", "/build/_shared/chunk-6VY3TGHV.js", "/build/_shared/chunk-TGPNMAVK.js", "/build/_shared/chunk-LBCN2YVJ.js", "/build/_shared/chunk-LD5CY63I.js", "/build/_shared/chunk-Y7Z57SGD.js", "/build/_shared/chunk-LKTYH4KV.js", "/build/_shared/chunk-X7G7TLQ6.js", "/build/_shared/chunk-HS3AAZGP.js", "/build/_shared/chunk-SNHKI5QX.js", "/build/_shared/chunk-G26VUZ3V.js", "/build/_shared/chunk-5XDHH4UN.js", "/build/_shared/chunk-7ENN74BL.js", "/build/_shared/chunk-G4EM45JG.js", "/build/_shared/chunk-ANF4WBNI.js", "/build/_shared/chunk-4W4YPBCQ.js", "/build/_shared/chunk-HRCMIQSB.js", "/build/_shared/chunk-L6B4ZRM6.js", "/build/_shared/chunk-QMQUAZ65.js", "/build/_shared/chunk-YOYFDK4O.js", "/build/_shared/chunk-ICEDALHM.js", "/build/_shared/chunk-ZOFUYGVL.js", "/build/_shared/chunk-A4HAOIEH.js", "/build/_shared/chunk-REAXH7HE.js", "/build/_shared/chunk-XO75RT3N.js", "/build/_shared/chunk-NTXIRLKV.js", "/build/_shared/chunk-VMR4SOYV.js", "/build/_shared/chunk-ITYDXQLP.js", "/build/_shared/chunk-TCCEOGB7.js"], hasAction: !0, hasLoader: !0, hasErrorBoundary: !1 }, "routes/admin": { id: "routes/admin", parentId: "root", path: "admin", index: void 0, caseSensitive: void 0, module: "/build/routes/admin-QYIOFX32.js", imports: ["/build/_shared/chunk-SBSGXD5Z.js"], hasAction: !1, hasLoader: !0, hasErrorBoundary: !1 }, "routes/admin._index": { id: "routes/admin._index", parentId: "routes/admin", path: void 0, index: !0, caseSensitive: void 0, module: "/build/routes/admin._index-JPJYEWNU.js", imports: ["/build/_shared/chunk-BWF73U5T.js", "/build/_shared/chunk-TPWC7APJ.js", "/build/_shared/chunk-LYMFAN7V.js", "/build/_shared/chunk-FVYECWQQ.js", "/build/_shared/chunk-ZBQ6KKHY.js", "/build/_shared/chunk-AEDMGY7M.js", "/build/_shared/chunk-JHQSSEEW.js", "/build/_shared/chunk-2X7GG4YA.js", "/build/_shared/chunk-6VY3TGHV.js", "/build/_shared/chunk-TGPNMAVK.js", "/build/_shared/chunk-LBCN2YVJ.js", "/build/_shared/chunk-LD5CY63I.js", "/build/_shared/chunk-Y7Z57SGD.js", "/build/_shared/chunk-LKTYH4KV.js", "/build/_shared/chunk-X7G7TLQ6.js", "/build/_shared/chunk-HS3AAZGP.js", "/build/_shared/chunk-SNHKI5QX.js", "/build/_shared/chunk-7ENN74BL.js", "/build/_shared/chunk-HRCMIQSB.js", "/build/_shared/chunk-L6B4ZRM6.js", "/build/_shared/chunk-QMQUAZ65.js", "/build/_shared/chunk-YOYFDK4O.js", "/build/_shared/chunk-ICEDALHM.js", "/build/_shared/chunk-ZOFUYGVL.js", "/build/_shared/chunk-A4HAOIEH.js", "/build/_shared/chunk-REAXH7HE.js", "/build/_shared/chunk-XO75RT3N.js", "/build/_shared/chunk-NTXIRLKV.js", "/build/_shared/chunk-VMR4SOYV.js", "/build/_shared/chunk-ITYDXQLP.js", "/build/_shared/chunk-TCCEOGB7.js"], hasAction: !0, hasLoader: !0, hasErrorBoundary: !1 }, "routes/admin.api.v1.environments.$environmentId": { id: "routes/admin.api.v1.environments.$environmentId", parentId: "routes/admin", path: "api/v1/environments/:environmentId", index: void 0, caseSensitive: void 0, module: "/build/routes/admin.api.v1.environments.$environmentId-I3AYIOXI.js", imports: void 0, hasAction: !0, hasLoader: !1, hasErrorBoundary: !1 }, "routes/admin.api.v1.gc": { id: "routes/admin.api.v1.gc", parentId: "routes/admin", path: "api/v1/gc", index: void 0, caseSensitive: void 0, module: "/build/routes/admin.api.v1.gc-DHMUGUZW.js", imports: void 0, hasAction: !1, hasLoader: !0, hasErrorBoundary: !1 }, "routes/admin.api.v1.marqs": { id: "routes/admin.api.v1.marqs", parentId: "routes/admin", path: "api/v1/marqs", index: void 0, caseSensitive: void 0, module: "/build/routes/admin.api.v1.marqs-R7PNBPOM.js", imports: void 0, hasAction: !1, hasLoader: !0, hasErrorBoundary: !1 }, "routes/admin.api.v1.orgs.$organizationId.concurrency": { id: "routes/admin.api.v1.orgs.$organizationId.concurrency", parentId: "routes/admin", path: "api/v1/orgs/:organizationId/concurrency", index: void 0, caseSensitive: void 0, module: "/build/routes/admin.api.v1.orgs.$organizationId.concurrency-DXLWMJIS.js", imports: void 0, hasAction: !0, hasLoader: !1, hasErrorBoundary: !1 }, "routes/admin.api.v1.simulate": { id: "routes/admin.api.v1.simulate", parentId: "routes/admin", path: "api/v1/simulate", index: void 0, caseSensitive: void 0, module: "/build/routes/admin.api.v1.simulate-KUWII2Q4.js", imports: void 0, hasAction: !0, hasLoader: !1, hasErrorBoundary: !1 }, "routes/admin.api.v1.snapshot": { id: "routes/admin.api.v1.snapshot", parentId: "routes/admin", path: "api/v1/snapshot", index: void 0, caseSensitive: void 0, module: "/build/routes/admin.api.v1.snapshot-QP3PXX7L.js", imports: void 0, hasAction: !1, hasLoader: !0, hasErrorBoundary: !1 }, "routes/admin.orgs": { id: "routes/admin.orgs", parentId: "routes/admin", path: "orgs", index: void 0, caseSensitive: void 0, module: "/build/routes/admin.orgs-UXDGZBSV.js", imports: ["/build/_shared/chunk-BWF73U5T.js", "/build/_shared/chunk-TPWC7APJ.js", "/build/_shared/chunk-LYMFAN7V.js", "/build/_shared/chunk-ZBQ6KKHY.js", "/build/_shared/chunk-L5OF72BL.js", "/build/_shared/chunk-JHQSSEEW.js", "/build/_shared/chunk-TGPNMAVK.js", "/build/_shared/chunk-LBCN2YVJ.js", "/build/_shared/chunk-LD5CY63I.js", "/build/_shared/chunk-Y7Z57SGD.js", "/build/_shared/chunk-LKTYH4KV.js", "/build/_shared/chunk-X7G7TLQ6.js", "/build/_shared/chunk-HS3AAZGP.js", "/build/_shared/chunk-SNHKI5QX.js", "/build/_shared/chunk-7ENN74BL.js", "/build/_shared/chunk-HRCMIQSB.js", "/build/_shared/chunk-L6B4ZRM6.js", "/build/_shared/chunk-QMQUAZ65.js", "/build/_shared/chunk-YOYFDK4O.js", "/build/_shared/chunk-ICEDALHM.js", "/build/_shared/chunk-ZOFUYGVL.js", "/build/_shared/chunk-A4HAOIEH.js", "/build/_shared/chunk-REAXH7HE.js", "/build/_shared/chunk-XO75RT3N.js", "/build/_shared/chunk-NTXIRLKV.js", "/build/_shared/chunk-VMR4SOYV.js", "/build/_shared/chunk-ITYDXQLP.js", "/build/_shared/chunk-TCCEOGB7.js"], hasAction: !0, hasLoader: !0, hasErrorBoundary: !1 }, "routes/api.internal.stripe_webhooks": { id: "routes/api.internal.stripe_webhooks", parentId: "root", path: "api/internal/stripe_webhooks", index: void 0, caseSensitive: void 0, module: "/build/routes/api.internal.stripe_webhooks-7MU6ERNL.js", imports: void 0, hasAction: !0, hasLoader: !1, hasErrorBoundary: !1 }, "routes/api.v1.$endpointSlug.auth.$id": { id: "routes/api.v1.$endpointSlug.auth.$id", parentId: "root", path: "api/v1/:endpointSlug/auth/:id", index: void 0, caseSensitive: void 0, module: "/build/routes/api.v1.$endpointSlug.auth.$id-LAZWSCQT.js", imports: void 0, hasAction: !1, hasLoader: !0, hasErrorBoundary: !1 }, "routes/api.v1.$endpointSlug.schedules.$id.registrations": { id: "routes/api.v1.$endpointSlug.schedules.$id.registrations", parentId: "root", path: "api/v1/:endpointSlug/schedules/:id/registrations", index: void 0, caseSensitive: void 0, module: "/build/routes/api.v1.$endpointSlug.schedules.$id.registrations-47D7KEDI.js", imports: void 0, hasAction: !0, hasLoader: !1, hasErrorBoundary: !1 }, "routes/api.v1.$endpointSlug.schedules.$id.registrations.$key": { id: "routes/api.v1.$endpointSlug.schedules.$id.registrations.$key", parentId: "routes/api.v1.$endpointSlug.schedules.$id.registrations", path: ":key", index: void 0, caseSensitive: void 0, module: "/build/routes/api.v1.$endpointSlug.schedules.$id.registrations.$key-XBIYVNUP.js", imports: void 0, hasAction: !0, hasLoader: !1, hasErrorBoundary: !1 }, "routes/api.v1.$endpointSlug.sources.$id": { id: "routes/api.v1.$endpointSlug.sources.$id", parentId: "root", path: "api/v1/:endpointSlug/sources/:id", index: void 0, caseSensitive: void 0, module: "/build/routes/api.v1.$endpointSlug.sources.$id-CLFTNWLW.js", imports: void 0, hasAction: !0, hasLoader: !1, hasErrorBoundary: !1 }, "routes/api.v1.$endpointSlug.triggers.$id.registrations": { id: "routes/api.v1.$endpointSlug.triggers.$id.registrations", parentId: "root", path: "api/v1/:endpointSlug/triggers/:id/registrations", index: void 0, caseSensitive: void 0, module: "/build/routes/api.v1.$endpointSlug.triggers.$id.registrations-KUFX2E4H.js", imports: void 0, hasAction: !0, hasLoader: !1, hasErrorBoundary: !1 }, "routes/api.v1.$endpointSlug.triggers.$id.registrations.$key": { id: "routes/api.v1.$endpointSlug.triggers.$id.registrations.$key", parentId: "routes/api.v1.$endpointSlug.triggers.$id.registrations", path: ":key", index: void 0, caseSensitive: void 0, module: "/build/routes/api.v1.$endpointSlug.triggers.$id.registrations.$key-K7CCZ3N5.js", imports: void 0, hasAction: !0, hasLoader: !1, hasErrorBoundary: !1 }, "routes/api.v1.accounts.$accountId.connections.$clientSlug": { id: "routes/api.v1.accounts.$accountId.connections.$clientSlug", parentId: "root", path: "api/v1/accounts/:accountId/connections/:clientSlug", index: void 0, caseSensitive: void 0, module: "/build/routes/api.v1.accounts.$accountId.connections.$clientSlug-XX42MT6K.js", imports: void 0, hasAction: !0, hasLoader: !1, hasErrorBoundary: !1 }, "routes/api.v1.authorization-code": { id: "routes/api.v1.authorization-code", parentId: "root", path: "api/v1/authorization-code", index: void 0, caseSensitive: void 0, module: "/build/routes/api.v1.authorization-code-L7NMNZGO.js", imports: void 0, hasAction: !0, hasLoader: !1, hasErrorBoundary: !1 }, "routes/api.v1.batches.$batchParam.results": { id: "routes/api.v1.batches.$batchParam.results", parentId: "root", path: "api/v1/batches/:batchParam/results", index: void 0, caseSensitive: void 0, module: "/build/routes/api.v1.batches.$batchParam.results-YMFVQ6OH.js", imports: void 0, hasAction: !1, hasLoader: !0, hasErrorBoundary: !1 }, "routes/api.v1.deployments": { id: "routes/api.v1.deployments", parentId: "root", path: "api/v1/deployments", index: void 0, caseSensitive: void 0, module: "/build/routes/api.v1.deployments-JZMBP7WK.js", imports: void 0, hasAction: !0, hasLoader: !1, hasErrorBoundary: !1 }, "routes/api.v1.deployments.$deploymentId": { id: "routes/api.v1.deployments.$deploymentId", parentId: "routes/api.v1.deployments", path: ":deploymentId", index: void 0, caseSensitive: void 0, module: "/build/routes/api.v1.deployments.$deploymentId-DVBDDXEQ.js", imports: void 0, hasAction: !1, hasLoader: !0, hasErrorBoundary: !1 }, "routes/api.v1.deployments.$deploymentId.start-indexing": { id: "routes/api.v1.deployments.$deploymentId.start-indexing", parentId: "routes/api.v1.deployments.$deploymentId", path: "start-indexing", index: void 0, caseSensitive: void 0, module: "/build/routes/api.v1.deployments.$deploymentId.start-indexing-P6BEI5XT.js", imports: void 0, hasAction: !0, hasLoader: !1, hasErrorBoundary: !1 }, "routes/api.v1.endpointindex.$indexId": { id: "routes/api.v1.endpointindex.$indexId", parentId: "root", path: "api/v1/endpointindex/:indexId", index: void 0, caseSensitive: void 0, module: "/build/routes/api.v1.endpointindex.$indexId-N7EZ6IEY.js", imports: void 0, hasAction: !1, hasLoader: !0, hasErrorBoundary: !1 }, "routes/api.v1.endpoints": { id: "routes/api.v1.endpoints", parentId: "root", path: "api/v1/endpoints", index: void 0, caseSensitive: void 0, module: "/build/routes/api.v1.endpoints-FJQMGN6J.js", imports: void 0, hasAction: !0, hasLoader: !1, hasErrorBoundary: !1 }, "routes/api.v1.endpoints.$endpointSlug.index": { id: "routes/api.v1.endpoints.$endpointSlug.index", parentId: "routes/api.v1.endpoints", path: ":endpointSlug/index", index: void 0, caseSensitive: void 0, module: "/build/routes/api.v1.endpoints.$endpointSlug.index-LF573WM4.js", imports: void 0, hasAction: !0, hasLoader: !1, hasErrorBoundary: !1 }, "routes/api.v1.endpoints.$environmentId.$endpointSlug.index.$indexHookIdentifier": { id: "routes/api.v1.endpoints.$environmentId.$endpointSlug.index.$indexHookIdentifier", parentId: "routes/api.v1.endpoints", path: ":environmentId/:endpointSlug/index/:indexHookIdentifier", index: void 0, caseSensitive: void 0, module: "/build/routes/api.v1.endpoints.$environmentId.$endpointSlug.index.$indexHookIdentifier-XJHQIMZY.js", imports: void 0, hasAction: !0, hasLoader: !0, hasErrorBoundary: !1 }, "routes/api.v1.event-dispatchers.ephemeral": { id: "routes/api.v1.event-dispatchers.ephemeral", parentId: "root", path: "api/v1/event-dispatchers/ephemeral", index: void 0, caseSensitive: void 0, module: "/build/routes/api.v1.event-dispatchers.ephemeral-EFKWRWQT.js", imports: void 0, hasAction: !0, hasLoader: !1, hasErrorBoundary: !1 }, "routes/api.v1.events": { id: "routes/api.v1.events", parentId: "root", path: "api/v1/events", index: void 0, caseSensitive: void 0, module: "/build/routes/api.v1.events-TSZXVNBN.js", imports: void 0, hasAction: !0, hasLoader: !1, hasErrorBoundary: !1 }, "routes/api.v1.events.$eventId": { id: "routes/api.v1.events.$eventId", parentId: "routes/api.v1.events", path: ":eventId", index: void 0, caseSensitive: void 0, module: "/build/routes/api.v1.events.$eventId-ZJYWKGEK.js", imports: void 0, hasAction: !1, hasLoader: !0, hasErrorBoundary: !1 }, "routes/api.v1.events.$eventId.cancel": { id: "routes/api.v1.events.$eventId.cancel", parentId: "routes/api.v1.events.$eventId", path: "cancel", index: void 0, caseSensitive: void 0, module: "/build/routes/api.v1.events.$eventId.cancel-NXDJVIB6.js", imports: void 0, hasAction: !0, hasLoader: !1, hasErrorBoundary: !1 }, "routes/api.v1.events.$eventId.cancel-runs": { id: "routes/api.v1.events.$eventId.cancel-runs", parentId: "routes/api.v1.events.$eventId", path: "cancel-runs", index: void 0, caseSensitive: void 0, module: "/build/routes/api.v1.events.$eventId.cancel-runs-ELU7HSLP.js", imports: void 0, hasAction: !0, hasLoader: !1, hasErrorBoundary: !1 }, "routes/api.v1.events.bulk": { id: "routes/api.v1.events.bulk", parentId: "routes/api.v1.events", path: "bulk", index: void 0, caseSensitive: void 0, module: "/build/routes/api.v1.events.bulk-QVI2XAT5.js", imports: void 0, hasAction: !0, hasLoader: !1, hasErrorBoundary: !1 }, "routes/api.v1.http-endpoints.$httpEndpointId.env.$envType.$shortcode": { id: "routes/api.v1.http-endpoints.$httpEndpointId.env.$envType.$shortcode", parentId: "root", path: "api/v1/http-endpoints/:httpEndpointId/env/:envType/:shortcode", index: void 0, caseSensitive: void 0, module: "/build/routes/api.v1.http-endpoints.$httpEndpointId.env.$envType.$shortcode-RDQA74XH.js", imports: void 0, hasAction: !0, hasLoader: !0, hasErrorBoundary: !1 }, "routes/api.v1.integrations.$integrationSlug.connections.$connectionId": { id: "routes/api.v1.integrations.$integrationSlug.connections.$connectionId", parentId: "root", path: "api/v1/integrations/:integrationSlug/connections/:connectionId", index: void 0, caseSensitive: void 0, module: "/build/routes/api.v1.integrations.$integrationSlug.connections.$connectionId-GNDKOWWE.js", imports: void 0, hasAction: !1, hasLoader: !0, hasErrorBoundary: !1 }, "routes/api.v1.jobs.$jobSlug.cancel-runs": { id: "routes/api.v1.jobs.$jobSlug.cancel-runs", parentId: "root", path: "api/v1/jobs/:jobSlug/cancel-runs", index: void 0, caseSensitive: void 0, module: "/build/routes/api.v1.jobs.$jobSlug.cancel-runs-6PVDG277.js", imports: void 0, hasAction: !0, hasLoader: !1, hasErrorBoundary: !1 }, "routes/api.v1.jobs.$jobSlug.invoke": { id: "routes/api.v1.jobs.$jobSlug.invoke", parentId: "root", path: "api/v1/jobs/:jobSlug/invoke", index: void 0, caseSensitive: void 0, module: "/build/routes/api.v1.jobs.$jobSlug.invoke-YDFDTMFY.js", imports: void 0, hasAction: !0, hasLoader: !1, hasErrorBoundary: !1 }, "routes/api.v1.jobs.$jobSlug.runs": { id: "routes/api.v1.jobs.$jobSlug.runs", parentId: "root", path: "api/v1/jobs/:jobSlug/runs", index: void 0, caseSensitive: void 0, module: "/build/routes/api.v1.jobs.$jobSlug.runs-JHOFTQOK.js", imports: void 0, hasAction: !1, hasLoader: !0, hasErrorBoundary: !1 }, "routes/api.v1.packets.$": { id: "routes/api.v1.packets.$", parentId: "root", path: "api/v1/packets/*", index: void 0, caseSensitive: void 0, module: "/build/routes/api.v1.packets.$-VSVQP3LR.js", imports: void 0, hasAction: !0, hasLoader: !0, hasErrorBoundary: !1 }, "routes/api.v1.projects": { id: "routes/api.v1.projects", parentId: "root", path: "api/v1/projects", index: void 0, caseSensitive: void 0, module: "/build/routes/api.v1.projects-MANQRWTX.js", imports: void 0, hasAction: !1, hasLoader: !0, hasErrorBoundary: !1 }, "routes/api.v1.projects.$projectRef": { id: "routes/api.v1.projects.$projectRef", parentId: "routes/api.v1.projects", path: ":projectRef", index: void 0, caseSensitive: void 0, module: "/build/routes/api.v1.projects.$projectRef-DNEMJE2A.js", imports: void 0, hasAction: !1, hasLoader: !0, hasErrorBoundary: !1 }, "routes/api.v1.projects.$projectRef.$env": { id: "routes/api.v1.projects.$projectRef.$env", parentId: "routes/api.v1.projects.$projectRef", path: ":env", index: void 0, caseSensitive: void 0, module: "/build/routes/api.v1.projects.$projectRef.$env-GGY3D4KY.js", imports: void 0, hasAction: !1, hasLoader: !0, hasErrorBoundary: !1 }, "routes/api.v1.projects.$projectRef.alertChannels": { id: "routes/api.v1.projects.$projectRef.alertChannels", parentId: "routes/api.v1.projects.$projectRef", path: "alertChannels", index: void 0, caseSensitive: void 0, module: "/build/routes/api.v1.projects.$projectRef.alertChannels-EKUSZVHH.js", imports: void 0, hasAction: !0, hasLoader: !1, hasErrorBoundary: !1 }, "routes/api.v1.projects.$projectRef.background-workers": { id: "routes/api.v1.projects.$projectRef.background-workers", parentId: "routes/api.v1.projects.$projectRef", path: "background-workers", index: void 0, caseSensitive: void 0, module: "/build/routes/api.v1.projects.$projectRef.background-workers-2JEUC4FT.js", imports: void 0, hasAction: !0, hasLoader: !1, hasErrorBoundary: !1 }, "routes/api.v1.projects.$projectRef.envvars": { id: "routes/api.v1.projects.$projectRef.envvars", parentId: "routes/api.v1.projects.$projectRef", path: "envvars", index: void 0, caseSensitive: void 0, module: "/build/routes/api.v1.projects.$projectRef.envvars-QLUCM3H4.js", imports: void 0, hasAction: !1, hasLoader: !0, hasErrorBoundary: !1 }, "routes/api.v1.projects.$projectRef.envvars.$slug": { id: "routes/api.v1.projects.$projectRef.envvars.$slug", parentId: "routes/api.v1.projects.$projectRef.envvars", path: ":slug", index: void 0, caseSensitive: void 0, module: "/build/routes/api.v1.projects.$projectRef.envvars.$slug-QW5GWOTR.js", imports: void 0, hasAction: !0, hasLoader: !0, hasErrorBoundary: !1 }, "routes/api.v1.projects.$projectRef.envvars.$slug.$name": { id: "routes/api.v1.projects.$projectRef.envvars.$slug.$name", parentId: "routes/api.v1.projects.$projectRef.envvars.$slug", path: ":name", index: void 0, caseSensitive: void 0, module: "/build/routes/api.v1.projects.$projectRef.envvars.$slug.$name-T4LZWK5W.js", imports: void 0, hasAction: !0, hasLoader: !0, hasErrorBoundary: !1 }, "routes/api.v1.projects.$projectRef.envvars.$slug.import": { id: "routes/api.v1.projects.$projectRef.envvars.$slug.import", parentId: "routes/api.v1.projects.$projectRef.envvars.$slug", path: "import", index: void 0, caseSensitive: void 0, module: "/build/routes/api.v1.projects.$projectRef.envvars.$slug.import-GGHZV4UM.js", imports: void 0, hasAction: !0, hasLoader: !1, hasErrorBoundary: !1 }, "routes/api.v1.projects.$projectRef.runs": { id: "routes/api.v1.projects.$projectRef.runs", parentId: "routes/api.v1.projects.$projectRef", path: "runs", index: void 0, caseSensitive: void 0, module: "/build/routes/api.v1.projects.$projectRef.runs-SQ72MA4Y.js", imports: void 0, hasAction: !1, hasLoader: !0, hasErrorBoundary: !1 }, "routes/api.v1.runs": { id: "routes/api.v1.runs", parentId: "root", path: "api/v1/runs", index: void 0, caseSensitive: void 0, module: "/build/routes/api.v1.runs-MXEZONQP.js", imports: void 0, hasAction: !1, hasLoader: !0, hasErrorBoundary: !1 }, "routes/api.v1.runs.$runId": { id: "routes/api.v1.runs.$runId", parentId: "routes/api.v1.runs", path: ":runId", index: void 0, caseSensitive: void 0, module: "/build/routes/api.v1.runs.$runId-E5IYPCXY.js", imports: void 0, hasAction: !1, hasLoader: !0, hasErrorBoundary: !1 }, "routes/api.v1.runs.$runId.cancel": { id: "routes/api.v1.runs.$runId.cancel", parentId: "routes/api.v1.runs.$runId", path: "cancel", index: void 0, caseSensitive: void 0, module: "/build/routes/api.v1.runs.$runId.cancel-PB76JEZR.js", imports: void 0, hasAction: !0, hasLoader: !1, hasErrorBoundary: !1 }, "routes/api.v1.runs.$runId.logs": { id: "routes/api.v1.runs.$runId.logs", parentId: "routes/api.v1.runs.$runId", path: "logs", index: void 0, caseSensitive: void 0, module: "/build/routes/api.v1.runs.$runId.logs-FWP3LWCH.js", imports: void 0, hasAction: !0, hasLoader: !1, hasErrorBoundary: !1 }, "routes/api.v1.runs.$runId.statuses": { id: "routes/api.v1.runs.$runId.statuses", parentId: "routes/api.v1.runs.$runId", path: "statuses", index: void 0, caseSensitive: void 0, module: "/build/routes/api.v1.runs.$runId.statuses-MBM4VELB.js", imports: void 0, hasAction: !1, hasLoader: !0, hasErrorBoundary: !1 }, "routes/api.v1.runs.$runId.statuses.$id": { id: "routes/api.v1.runs.$runId.statuses.$id", parentId: "routes/api.v1.runs.$runId.statuses", path: ":id", index: void 0, caseSensitive: void 0, module: "/build/routes/api.v1.runs.$runId.statuses.$id-B7WHQN2A.js", imports: void 0, hasAction: !0, hasLoader: !1, hasErrorBoundary: !1 }, "routes/api.v1.runs.$runId.tasks": { id: "routes/api.v1.runs.$runId.tasks", parentId: "routes/api.v1.runs.$runId", path: "tasks", index: void 0, caseSensitive: void 0, module: "/build/routes/api.v1.runs.$runId.tasks-YKA24FOK.js", imports: void 0, hasAction: !0, hasLoader: !1, hasErrorBoundary: !1 }, "routes/api.v1.runs.$runId.tasks.$id.callback.$secret": { id: "routes/api.v1.runs.$runId.tasks.$id.callback.$secret", parentId: "routes/api.v1.runs.$runId.tasks", path: ":id/callback/:secret", index: void 0, caseSensitive: void 0, module: "/build/routes/api.v1.runs.$runId.tasks.$id.callback.$secret-7U3C7MXB.js", imports: void 0, hasAction: !0, hasLoader: !1, hasErrorBoundary: !1 }, "routes/api.v1.runs.$runId.tasks.$id.complete": { id: "routes/api.v1.runs.$runId.tasks.$id.complete", parentId: "routes/api.v1.runs.$runId.tasks", path: ":id/complete", index: void 0, caseSensitive: void 0, module: "/build/routes/api.v1.runs.$runId.tasks.$id.complete-Z2HO5IHH.js", imports: void 0, hasAction: !0, hasLoader: !1, hasErrorBoundary: !1 }, "routes/api.v1.runs.$runId.tasks.$id.fail": { id: "routes/api.v1.runs.$runId.tasks.$id.fail", parentId: "routes/api.v1.runs.$runId.tasks", path: ":id/fail", index: void 0, caseSensitive: void 0, module: "/build/routes/api.v1.runs.$runId.tasks.$id.fail-D6L6MPPP.js", imports: void 0, hasAction: !0, hasLoader: !1, hasErrorBoundary: !1 }, "routes/api.v1.runs.$runParam.attempts": { id: "routes/api.v1.runs.$runParam.attempts", parentId: "routes/api.v1.runs", path: ":runParam/attempts", index: void 0, caseSensitive: void 0, module: "/build/routes/api.v1.runs.$runParam.attempts-W3FCZHGE.js", imports: void 0, hasAction: !0, hasLoader: !1, hasErrorBoundary: !1 }, "routes/api.v1.runs.$runParam.replay": { id: "routes/api.v1.runs.$runParam.replay", parentId: "routes/api.v1.runs", path: ":runParam/replay", index: void 0, caseSensitive: void 0, module: "/build/routes/api.v1.runs.$runParam.replay-YAUS3XLD.js", imports: void 0, hasAction: !0, hasLoader: !1, hasErrorBoundary: !1 }, "routes/api.v1.runs.$runParam.reschedule": { id: "routes/api.v1.runs.$runParam.reschedule", parentId: "routes/api.v1.runs", path: ":runParam/reschedule", index: void 0, caseSensitive: void 0, module: "/build/routes/api.v1.runs.$runParam.reschedule-KIB3DRGA.js", imports: void 0, hasAction: !0, hasLoader: !1, hasErrorBoundary: !1 }, "routes/api.v1.runs.$runParam.result": { id: "routes/api.v1.runs.$runParam.result", parentId: "routes/api.v1.runs", path: ":runParam/result", index: void 0, caseSensitive: void 0, module: "/build/routes/api.v1.runs.$runParam.result-F2ZLM343.js", imports: void 0, hasAction: !1, hasLoader: !0, hasErrorBoundary: !1 }, "routes/api.v1.schedules": { id: "routes/api.v1.schedules", parentId: "root", path: "api/v1/schedules", index: void 0, caseSensitive: void 0, module: "/build/routes/api.v1.schedules-AG26RC3U.js", imports: void 0, hasAction: !0, hasLoader: !0, hasErrorBoundary: !1 }, "routes/api.v1.schedules.$scheduleId": { id: "routes/api.v1.schedules.$scheduleId", parentId: "routes/api.v1.schedules", path: ":scheduleId", index: void 0, caseSensitive: void 0, module: "/build/routes/api.v1.schedules.$scheduleId-RBJGFLN5.js", imports: void 0, hasAction: !0, hasLoader: !0, hasErrorBoundary: !1 }, "routes/api.v1.schedules.$scheduleId.activate": { id: "routes/api.v1.schedules.$scheduleId.activate", parentId: "routes/api.v1.schedules.$scheduleId", path: "activate", index: void 0, caseSensitive: void 0, module: "/build/routes/api.v1.schedules.$scheduleId.activate-BYQ6LVJI.js", imports: void 0, hasAction: !0, hasLoader: !1, hasErrorBoundary: !1 }, "routes/api.v1.schedules.$scheduleId.deactivate": { id: "routes/api.v1.schedules.$scheduleId.deactivate", parentId: "routes/api.v1.schedules.$scheduleId", path: "deactivate", index: void 0, caseSensitive: void 0, module: "/build/routes/api.v1.schedules.$scheduleId.deactivate-UISNXGYY.js", imports: void 0, hasAction: !0, hasLoader: !1, hasErrorBoundary: !1 }, "routes/api.v1.sources.http.$id": { id: "routes/api.v1.sources.http.$id", parentId: "root", path: "api/v1/sources/http/:id", index: void 0, caseSensitive: void 0, module: "/build/routes/api.v1.sources.http.$id-SNWFEXGC.js", imports: void 0, hasAction: !0, hasLoader: !0, hasErrorBoundary: !1 }, "routes/api.v1.store.$key": { id: "routes/api.v1.store.$key", parentId: "root", path: "api/v1/store/:key", index: void 0, caseSensitive: void 0, module: "/build/routes/api.v1.store.$key-A4UADGCK.js", imports: void 0, hasAction: !0, hasLoader: !0, hasErrorBoundary: !1 }, "routes/api.v1.tasks.$id.callback.$secret": { id: "routes/api.v1.tasks.$id.callback.$secret", parentId: "root", path: "api/v1/tasks/:id/callback/:secret", index: void 0, caseSensitive: void 0, module: "/build/routes/api.v1.tasks.$id.callback.$secret-T47D5KLP.js", imports: void 0, hasAction: !0, hasLoader: !1, hasErrorBoundary: !1 }, "routes/api.v1.tasks.$taskId.batch": { id: "routes/api.v1.tasks.$taskId.batch", parentId: "root", path: "api/v1/tasks/:taskId/batch", index: void 0, caseSensitive: void 0, module: "/build/routes/api.v1.tasks.$taskId.batch-VPSKDID4.js", imports: void 0, hasAction: !0, hasLoader: !1, hasErrorBoundary: !1 }, "routes/api.v1.tasks.$taskId.trigger": { id: "routes/api.v1.tasks.$taskId.trigger", parentId: "root", path: "api/v1/tasks/:taskId/trigger", index: void 0, caseSensitive: void 0, module: "/build/routes/api.v1.tasks.$taskId.trigger-YZOUCY3Y.js", imports: void 0, hasAction: !0, hasLoader: !1, hasErrorBoundary: !1 }, "routes/api.v1.timezones": { id: "routes/api.v1.timezones", parentId: "root", path: "api/v1/timezones", index: void 0, caseSensitive: void 0, module: "/build/routes/api.v1.timezones-WW77IMY4.js", imports: void 0, hasAction: !1, hasLoader: !0, hasErrorBoundary: !1 }, "routes/api.v1.token": { id: "routes/api.v1.token", parentId: "root", path: "api/v1/token", index: void 0, caseSensitive: void 0, module: "/build/routes/api.v1.token-UTHYWRVI.js", imports: void 0, hasAction: !0, hasLoader: !1, hasErrorBoundary: !1 }, "routes/api.v1.tunnels": { id: "routes/api.v1.tunnels", parentId: "root", path: "api/v1/tunnels", index: void 0, caseSensitive: void 0, module: "/build/routes/api.v1.tunnels-RAN2HKNM.js", imports: void 0, hasAction: !0, hasLoader: !0, hasErrorBoundary: !1 }, "routes/api.v1.usage.ingest": { id: "routes/api.v1.usage.ingest", parentId: "root", path: "api/v1/usage/ingest", index: void 0, caseSensitive: void 0, module: "/build/routes/api.v1.usage.ingest-G76EHUBR.js", imports: void 0, hasAction: !0, hasLoader: !1, hasErrorBoundary: !1 }, "routes/api.v1.webhooks.$key": { id: "routes/api.v1.webhooks.$key", parentId: "root", path: "api/v1/webhooks/:key", index: void 0, caseSensitive: void 0, module: "/build/routes/api.v1.webhooks.$key-3V3S7OAR.js", imports: void 0, hasAction: !0, hasLoader: !1, hasErrorBoundary: !1 }, "routes/api.v1.whoami": { id: "routes/api.v1.whoami", parentId: "root", path: "api/v1/whoami", index: void 0, caseSensitive: void 0, module: "/build/routes/api.v1.whoami-2AUC3NVK.js", imports: void 0, hasAction: !1, hasLoader: !0, hasErrorBoundary: !1 }, "routes/api.v2.$endpointSlug.sources.$id": { id: "routes/api.v2.$endpointSlug.sources.$id", parentId: "root", path: "api/v2/:endpointSlug/sources/:id", index: void 0, caseSensitive: void 0, module: "/build/routes/api.v2.$endpointSlug.sources.$id-Q5XFK6EQ.js", imports: void 0, hasAction: !0, hasLoader: !1, hasErrorBoundary: !1 }, "routes/api.v2.$endpointSlug.triggers.$id.registrations.$key": { id: "routes/api.v2.$endpointSlug.triggers.$id.registrations.$key", parentId: "root", path: "api/v2/:endpointSlug/triggers/:id/registrations/:key", index: void 0, caseSensitive: void 0, module: "/build/routes/api.v2.$endpointSlug.triggers.$id.registrations.$key-TVYHGJUR.js", imports: void 0, hasAction: !0, hasLoader: !1, hasErrorBoundary: !1 }, "routes/api.v2.events.$eventId": { id: "routes/api.v2.events.$eventId", parentId: "root", path: "api/v2/events/:eventId", index: void 0, caseSensitive: void 0, module: "/build/routes/api.v2.events.$eventId-3KQXHX2W.js", imports: void 0, hasAction: !1, hasLoader: !0, hasErrorBoundary: !1 }, "routes/api.v2.runs.$runId": { id: "routes/api.v2.runs.$runId", parentId: "root", path: "api/v2/runs/:runId", index: void 0, caseSensitive: void 0, module: "/build/routes/api.v2.runs.$runId-YF33HOQC.js", imports: void 0, hasAction: !1, hasLoader: !0, hasErrorBoundary: !1 }, "routes/api.v2.runs.$runId.statuses": { id: "routes/api.v2.runs.$runId.statuses", parentId: "routes/api.v2.runs.$runId", path: "statuses", index: void 0, caseSensitive: void 0, module: "/build/routes/api.v2.runs.$runId.statuses-LFSLN62J.js", imports: void 0, hasAction: !1, hasLoader: !0, hasErrorBoundary: !1 }, "routes/api.v2.runs.$runParam.cancel": { id: "routes/api.v2.runs.$runParam.cancel", parentId: "root", path: "api/v2/runs/:runParam/cancel", index: void 0, caseSensitive: void 0, module: "/build/routes/api.v2.runs.$runParam.cancel-TUYZ2AB5.js", imports: void 0, hasAction: !0, hasLoader: !1, hasErrorBoundary: !1 }, "routes/api.v2.whoami": { id: "routes/api.v2.whoami", parentId: "root", path: "api/v2/whoami", index: void 0, caseSensitive: void 0, module: "/build/routes/api.v2.whoami-C2GLY6XD.js", imports: void 0, hasAction: !1, hasLoader: !0, hasErrorBoundary: !1 }, "routes/api.v3.runs.$runId": { id: "routes/api.v3.runs.$runId", parentId: "root", path: "api/v3/runs/:runId", index: void 0, caseSensitive: void 0, module: "/build/routes/api.v3.runs.$runId-7TZ3YS4C.js", imports: void 0, hasAction: !1, hasLoader: !0, hasErrorBoundary: !1 }, "routes/auth.github": { id: "routes/auth.github", parentId: "root", path: "auth/github", index: void 0, caseSensitive: void 0, module: "/build/routes/auth.github-UNQO3PDN.js", imports: void 0, hasAction: !0, hasLoader: !0, hasErrorBoundary: !1 }, "routes/auth.github.callback": { id: "routes/auth.github.callback", parentId: "routes/auth.github", path: "callback", index: void 0, caseSensitive: void 0, module: "/build/routes/auth.github.callback-KSYW336U.js", imports: void 0, hasAction: !1, hasLoader: !0, hasErrorBoundary: !1 }, "routes/confirm-basic-details": { id: "routes/confirm-basic-details", parentId: "root", path: "confirm-basic-details", index: void 0, caseSensitive: void 0, module: "/build/routes/confirm-basic-details-EUNC4ESO.js", imports: ["/build/_shared/chunk-B7RZPZQJ.js", "/build/_shared/chunk-TI42EI3A.js", "/build/_shared/chunk-AXRBBWHF.js", "/build/_shared/chunk-LYMFAN7V.js", "/build/_shared/chunk-5TRFQBKG.js", "/build/_shared/chunk-GWRYVNME.js"], hasAction: !0, hasLoader: !1, hasErrorBoundary: !1 }, "routes/healthcheck": { id: "routes/healthcheck", parentId: "root", path: "healthcheck", index: void 0, caseSensitive: void 0, module: "/build/routes/healthcheck-TDJYY3P6.js", imports: void 0, hasAction: !1, hasLoader: !0, hasErrorBoundary: !1 }, "routes/integrations.$serviceName.callback": { id: "routes/integrations.$serviceName.callback", parentId: "root", path: "integrations/:serviceName/callback", index: void 0, caseSensitive: void 0, module: "/build/routes/integrations.$serviceName.callback-OBMWXH6R.js", imports: void 0, hasAction: !1, hasLoader: !0, hasErrorBoundary: !1 }, "routes/internal.webhooks.slack.interactivity": { id: "routes/internal.webhooks.slack.interactivity", parentId: "root", path: "internal/webhooks/slack/interactivity", index: void 0, caseSensitive: void 0, module: "/build/routes/internal.webhooks.slack.interactivity-OFP7NY2B.js", imports: void 0, hasAction: !0, hasLoader: !1, hasErrorBoundary: !1 }, "routes/invite-accept": { id: "routes/invite-accept", parentId: "root", path: "invite-accept", index: void 0, caseSensitive: void 0, module: "/build/routes/invite-accept-PD4PM7HP.js", imports: void 0, hasAction: !1, hasLoader: !0, hasErrorBoundary: !1 }, "routes/invite-resend": { id: "routes/invite-resend", parentId: "root", path: "invite-resend", index: void 0, caseSensitive: void 0, module: "/build/routes/invite-resend-K2WDSCVV.js", imports: void 0, hasAction: !0, hasLoader: !1, hasErrorBoundary: !1 }, "routes/invite-revoke": { id: "routes/invite-revoke", parentId: "root", path: "invite-revoke", index: void 0, caseSensitive: void 0, module: "/build/routes/invite-revoke-53GVKJO4.js", imports: void 0, hasAction: !0, hasLoader: !1, hasErrorBoundary: !1 }, "routes/invites": { id: "routes/invites", parentId: "root", path: "invites", index: void 0, caseSensitive: void 0, module: "/build/routes/invites-RQPQNSSM.js", imports: ["/build/_shared/chunk-GQNIVODX.js", "/build/_shared/chunk-TI42EI3A.js", "/build/_shared/chunk-JCMXX2MW.js", "/build/_shared/chunk-5TRFQBKG.js"], hasAction: !0, hasLoader: !0, hasErrorBoundary: !1 }, "routes/login._index": { id: "routes/login._index", parentId: "root", path: "login", index: !0, caseSensitive: void 0, module: "/build/routes/login._index-7JQ5YH2I.js", imports: ["/build/_shared/chunk-JL6U2AQJ.js", "/build/_shared/chunk-J7Q5AN73.js", "/build/_shared/chunk-VZ4WLVAR.js"], hasAction: !1, hasLoader: !0, hasErrorBoundary: !1 }, "routes/login.magic": { id: "routes/login.magic", parentId: "root", path: "login/magic", index: void 0, caseSensitive: void 0, module: "/build/routes/login.magic-N5D2WASJ.js", imports: ["/build/_shared/chunk-J7Q5AN73.js", "/build/_shared/chunk-LYMFAN7V.js", "/build/_shared/chunk-5TRFQBKG.js"], hasAction: !0, hasLoader: !0, hasErrorBoundary: !1 }, "routes/logout": { id: "routes/logout", parentId: "root", path: "logout", index: void 0, caseSensitive: void 0, module: "/build/routes/logout-MWX2H6AO.js", imports: void 0, hasAction: !0, hasLoader: !0, hasErrorBoundary: !1 }, "routes/magic": { id: "routes/magic", parentId: "root", path: "magic", index: void 0, caseSensitive: void 0, module: "/build/routes/magic-SITUIARP.js", imports: void 0, hasAction: !1, hasLoader: !0, hasErrorBoundary: !1 }, "routes/metrics": { id: "routes/metrics", parentId: "root", path: "metrics", index: void 0, caseSensitive: void 0, module: "/build/routes/metrics-HYL6GDMI.js", imports: void 0, hasAction: !1, hasLoader: !0, hasErrorBoundary: !1 }, "routes/oauth2.callback": { id: "routes/oauth2.callback", parentId: "root", path: "oauth2/callback", index: void 0, caseSensitive: void 0, module: "/build/routes/oauth2.callback-6SBICUVG.js", imports: void 0, hasAction: !1, hasLoader: !0, hasErrorBoundary: !1 }, "routes/otel.v1.logs": { id: "routes/otel.v1.logs", parentId: "root", path: "otel/v1/logs", index: void 0, caseSensitive: void 0, module: "/build/routes/otel.v1.logs-SINBY2PV.js", imports: void 0, hasAction: !0, hasLoader: !1, hasErrorBoundary: !1 }, "routes/otel.v1.traces": { id: "routes/otel.v1.traces", parentId: "root", path: "otel/v1/traces", index: void 0, caseSensitive: void 0, module: "/build/routes/otel.v1.traces-73DC4SFM.js", imports: void 0, hasAction: !0, hasLoader: !1, hasErrorBoundary: !1 }, "routes/projects.new": { id: "routes/projects.new", parentId: "root", path: "projects/new", index: void 0, caseSensitive: void 0, module: "/build/routes/projects.new-RATSOOBT.js", imports: void 0, hasAction: !1, hasLoader: !0, hasErrorBoundary: !1 }, "routes/projects.v3.$projectRef": { id: "routes/projects.v3.$projectRef", parentId: "root", path: "projects/v3/:projectRef", index: void 0, caseSensitive: void 0, module: "/build/routes/projects.v3.$projectRef-RS2YSEFL.js", imports: void 0, hasAction: !1, hasLoader: !0, hasErrorBoundary: !1 }, "routes/projects.v3.$projectRef.deployments.$deploymentParam": { id: "routes/projects.v3.$projectRef.deployments.$deploymentParam", parentId: "routes/projects.v3.$projectRef", path: "deployments/:deploymentParam", index: void 0, caseSensitive: void 0, module: "/build/routes/projects.v3.$projectRef.deployments.$deploymentParam-CP56Y7G4.js", imports: void 0, hasAction: !1, hasLoader: !0, hasErrorBoundary: !1 }, "routes/projects.v3.$projectRef.environment-variables": { id: "routes/projects.v3.$projectRef.environment-variables", parentId: "routes/projects.v3.$projectRef", path: "environment-variables", index: void 0, caseSensitive: void 0, module: "/build/routes/projects.v3.$projectRef.environment-variables-LXT2QPTS.js", imports: void 0, hasAction: !1, hasLoader: !0, hasErrorBoundary: !1 }, "routes/projects.v3.$projectRef.metrics": { id: "routes/projects.v3.$projectRef.metrics", parentId: "routes/projects.v3.$projectRef", path: "metrics", index: void 0, caseSensitive: void 0, module: "/build/routes/projects.v3.$projectRef.metrics-XMEUNJHO.js", imports: void 0, hasAction: !1, hasLoader: !0, hasErrorBoundary: !1 }, "routes/projects.v3.$projectRef.runs": { id: "routes/projects.v3.$projectRef.runs", parentId: "routes/projects.v3.$projectRef", path: "runs", index: void 0, caseSensitive: void 0, module: "/build/routes/projects.v3.$projectRef.runs-J5K32RC3.js", imports: void 0, hasAction: !1, hasLoader: !0, hasErrorBoundary: !1 }, "routes/projects.v3.$projectRef.runs.$runParam": { id: "routes/projects.v3.$projectRef.runs.$runParam", parentId: "routes/projects.v3.$projectRef.runs", path: ":runParam", index: void 0, caseSensitive: void 0, module: "/build/routes/projects.v3.$projectRef.runs.$runParam-QB5VISFS.js", imports: void 0, hasAction: !1, hasLoader: !0, hasErrorBoundary: !1 }, "routes/projects.v3.$projectRef.test": { id: "routes/projects.v3.$projectRef.test", parentId: "routes/projects.v3.$projectRef", path: "test", index: void 0, caseSensitive: void 0, module: "/build/routes/projects.v3.$projectRef.test-OFI6JLZT.js", imports: void 0, hasAction: !1, hasLoader: !0, hasErrorBoundary: !1 }, "routes/resources.$organizationSlug.subscribe": { id: "routes/resources.$organizationSlug.subscribe", parentId: "root", path: "resources/:organizationSlug/subscribe", index: void 0, caseSensitive: void 0, module: "/build/routes/resources.$organizationSlug.subscribe-ESELTOGO.js", imports: void 0, hasAction: !0, hasLoader: !1, hasErrorBoundary: !1 }, "routes/resources.$organizationSlug.subscription.portal": { id: "routes/resources.$organizationSlug.subscription.portal", parentId: "root", path: "resources/:organizationSlug/subscription/portal", index: void 0, caseSensitive: void 0, module: "/build/routes/resources.$organizationSlug.subscription.portal-6NN62NLC.js", imports: void 0, hasAction: !1, hasLoader: !0, hasErrorBoundary: !1 }, "routes/resources.$organizationSlug.subscription.v3.portal": { id: "routes/resources.$organizationSlug.subscription.v3.portal", parentId: "root", path: "resources/:organizationSlug/subscription/v3/portal", index: void 0, caseSensitive: void 0, module: "/build/routes/resources.$organizationSlug.subscription.v3.portal-M72RSOXO.js", imports: void 0, hasAction: !1, hasLoader: !0, hasErrorBoundary: !1 }, "routes/resources.$projectId.deployments.$deploymentId.logs": { id: "routes/resources.$projectId.deployments.$deploymentId.logs", parentId: "root", path: "resources/:projectId/deployments/:deploymentId/logs", index: void 0, caseSensitive: void 0, module: "/build/routes/resources.$projectId.deployments.$deploymentId.logs-BQR3EPRL.js", imports: void 0, hasAction: !1, hasLoader: !0, hasErrorBoundary: !1 }, "routes/resources.$projectId.deployments.$deploymentShortCode.rollback": { id: "routes/resources.$projectId.deployments.$deploymentShortCode.rollback", parentId: "root", path: "resources/:projectId/deployments/:deploymentShortCode/rollback", index: void 0, caseSensitive: void 0, module: "/build/routes/resources.$projectId.deployments.$deploymentShortCode.rollback-6GG22U3W.js", imports: void 0, hasAction: !0, hasLoader: !1, hasErrorBoundary: !1 }, "routes/resources.apivote.$identifier": { id: "routes/resources.apivote.$identifier", parentId: "root", path: "resources/apivote/:identifier", index: void 0, caseSensitive: void 0, module: "/build/routes/resources.apivote.$identifier-P2ET4ATI.js", imports: void 0, hasAction: !0, hasLoader: !1, hasErrorBoundary: !1 }, "routes/resources.codeexample": { id: "routes/resources.codeexample", parentId: "root", path: "resources/codeexample", index: void 0, caseSensitive: void 0, module: "/build/routes/resources.codeexample-JELP5NIY.js", imports: void 0, hasAction: !1, hasLoader: !0, hasErrorBoundary: !1 }, "routes/resources.connection.$organizationId.oauth2": { id: "routes/resources.connection.$organizationId.oauth2", parentId: "root", path: "resources/connection/:organizationId/oauth2", index: void 0, caseSensitive: void 0, module: "/build/routes/resources.connection.$organizationId.oauth2-2E4DTWRG.js", imports: void 0, hasAction: !0, hasLoader: !1, hasErrorBoundary: !1 }, "routes/resources.connection.$organizationId.oauth2.$integrationId": { id: "routes/resources.connection.$organizationId.oauth2.$integrationId", parentId: "routes/resources.connection.$organizationId.oauth2", path: ":integrationId", index: void 0, caseSensitive: void 0, module: "/build/routes/resources.connection.$organizationId.oauth2.$integrationId-WPRBBOXH.js", imports: void 0, hasAction: !0, hasLoader: !1, hasErrorBoundary: !1 }, "routes/resources.environments.$environmentId.regenerate-api-key": { id: "routes/resources.environments.$environmentId.regenerate-api-key", parentId: "root", path: "resources/environments/:environmentId/regenerate-api-key", index: void 0, caseSensitive: void 0, module: "/build/routes/resources.environments.$environmentId.regenerate-api-key-A6NJNMRY.js", imports: void 0, hasAction: !0, hasLoader: !1, hasErrorBoundary: !1 }, "routes/resources.environments.$environmentParam.endpoint": { id: "routes/resources.environments.$environmentParam.endpoint", parentId: "root", path: "resources/environments/:environmentParam/endpoint", index: void 0, caseSensitive: void 0, module: "/build/routes/resources.environments.$environmentParam.endpoint-O5I5OZV2.js", imports: void 0, hasAction: !0, hasLoader: !1, hasErrorBoundary: !1 }, "routes/resources.environments.$environmentParam.endpoint.$endpointParam": { id: "routes/resources.environments.$environmentParam.endpoint.$endpointParam", parentId: "routes/resources.environments.$environmentParam.endpoint", path: ":endpointParam", index: void 0, caseSensitive: void 0, module: "/build/routes/resources.environments.$environmentParam.endpoint.$endpointParam-NL7AVYZG.js", imports: void 0, hasAction: !0, hasLoader: !1, hasErrorBoundary: !1 }, "routes/resources.environments.$environmentParam.endpoint.stream": { id: "routes/resources.environments.$environmentParam.endpoint.stream", parentId: "routes/resources.environments.$environmentParam.endpoint", path: "stream", index: void 0, caseSensitive: void 0, module: "/build/routes/resources.environments.$environmentParam.endpoint.stream-UKQPADKV.js", imports: void 0, hasAction: !1, hasLoader: !0, hasErrorBoundary: !1 }, "routes/resources.feedback": { id: "routes/resources.feedback", parentId: "root", path: "resources/feedback", index: void 0, caseSensitive: void 0, module: "/build/routes/resources.feedback-VE5CVJIS.js", imports: void 0, hasAction: !0, hasLoader: !1, hasErrorBoundary: !1 }, "routes/resources.impersonation": { id: "routes/resources.impersonation", parentId: "root", path: "resources/impersonation", index: void 0, caseSensitive: void 0, module: "/build/routes/resources.impersonation-JKRGLK6Q.js", imports: void 0, hasAction: !0, hasLoader: !1, hasErrorBoundary: !1 }, "routes/resources.jobs.$jobId": { id: "routes/resources.jobs.$jobId", parentId: "root", path: "resources/jobs/:jobId", index: void 0, caseSensitive: void 0, module: "/build/routes/resources.jobs.$jobId-JQIOOTAM.js", imports: void 0, hasAction: !0, hasLoader: !0, hasErrorBoundary: !1 }, "routes/resources.orgs.$organizationSlug.projects.$projectParam.schedules.new": { id: "routes/resources.orgs.$organizationSlug.projects.$projectParam.schedules.new", parentId: "root", path: "resources/orgs/:organizationSlug/projects/:projectParam/schedules/new", index: void 0, caseSensitive: void 0, module: "/build/routes/resources.orgs.$organizationSlug.projects.$projectParam.schedules.new-QUE42MD4.js", imports: void 0, hasAction: !0, hasLoader: !1, hasErrorBoundary: !1 }, "routes/resources.orgs.$organizationSlug.projects.$projectParam.schedules.new.natural-language": { id: "routes/resources.orgs.$organizationSlug.projects.$projectParam.schedules.new.natural-language", parentId: "routes/resources.orgs.$organizationSlug.projects.$projectParam.schedules.new", path: "natural-language", index: void 0, caseSensitive: void 0, module: "/build/routes/resources.orgs.$organizationSlug.projects.$projectParam.schedules.new.natural-language-QUC3CPJM.js", imports: void 0, hasAction: !0, hasLoader: !1, hasErrorBoundary: !1 }, "routes/resources.orgs.$organizationSlug.projects.v3.$projectParam.runs.$runParam.spans.$spanParam": { id: "routes/resources.orgs.$organizationSlug.projects.v3.$projectParam.runs.$runParam.spans.$spanParam", parentId: "root", path: "resources/orgs/:organizationSlug/projects/v3/:projectParam/runs/:runParam/spans/:spanParam", index: void 0, caseSensitive: void 0, module: "/build/routes/resources.orgs.$organizationSlug.projects.v3.$projectParam.runs.$runParam.spans.$spanParam-A4WEVGSC.js", imports: void 0, hasAction: !1, hasLoader: !0, hasErrorBoundary: !1 }, "routes/resources.orgs.$organizationSlug.select-plan": { id: "routes/resources.orgs.$organizationSlug.select-plan", parentId: "root", path: "resources/orgs/:organizationSlug/select-plan", index: void 0, caseSensitive: void 0, module: "/build/routes/resources.orgs.$organizationSlug.select-plan-CJ43YMKV.js", imports: void 0, hasAction: !0, hasLoader: !1, hasErrorBoundary: !1 }, "routes/resources.packets.$environmentId.$": { id: "routes/resources.packets.$environmentId.$", parentId: "root", path: "resources/packets/:environmentId/*", index: void 0, caseSensitive: void 0, module: "/build/routes/resources.packets.$environmentId.$-LI5L372J.js", imports: void 0, hasAction: !1, hasLoader: !0, hasErrorBoundary: !1 }, "routes/resources.projects.$projectId.endpoint": { id: "routes/resources.projects.$projectId.endpoint", parentId: "root", path: "resources/projects/:projectId/endpoint", index: void 0, caseSensitive: void 0, module: "/build/routes/resources.projects.$projectId.endpoint-263RJ4TU.js", imports: void 0, hasAction: !0, hasLoader: !1, hasErrorBoundary: !1 }, "routes/resources.projects.$projectId.jobs.stream": { id: "routes/resources.projects.$projectId.jobs.stream", parentId: "root", path: "resources/projects/:projectId/jobs/stream", index: void 0, caseSensitive: void 0, module: "/build/routes/resources.projects.$projectId.jobs.stream-Z2PS3F2A.js", imports: void 0, hasAction: !1, hasLoader: !0, hasErrorBoundary: !1 }, "routes/resources.runs.$runId.cancel": { id: "routes/resources.runs.$runId.cancel", parentId: "root", path: "resources/runs/:runId/cancel", index: void 0, caseSensitive: void 0, module: "/build/routes/resources.runs.$runId.cancel-5SYDZNHO.js", imports: void 0, hasAction: !0, hasLoader: !1, hasErrorBoundary: !1 }, "routes/resources.runs.$runId.rerun": { id: "routes/resources.runs.$runId.rerun", parentId: "root", path: "resources/runs/:runId/rerun", index: void 0, caseSensitive: void 0, module: "/build/routes/resources.runs.$runId.rerun-XOHARSEL.js", imports: void 0, hasAction: !0, hasLoader: !1, hasErrorBoundary: !1 }, "routes/resources.runs.$runParam.logs.download": { id: "routes/resources.runs.$runParam.logs.download", parentId: "root", path: "resources/runs/:runParam/logs/download", index: void 0, caseSensitive: void 0, module: "/build/routes/resources.runs.$runParam.logs.download-HV7FXVVG.js", imports: void 0, hasAction: !1, hasLoader: !0, hasErrorBoundary: !1 }, "routes/resources.taskruns.$runParam.cancel": { id: "routes/resources.taskruns.$runParam.cancel", parentId: "root", path: "resources/taskruns/:runParam/cancel", index: void 0, caseSensitive: void 0, module: "/build/routes/resources.taskruns.$runParam.cancel-IPZXCHDG.js", imports: void 0, hasAction: !0, hasLoader: !1, hasErrorBoundary: !1 }, "routes/resources.taskruns.$runParam.replay": { id: "routes/resources.taskruns.$runParam.replay", parentId: "root", path: "resources/taskruns/:runParam/replay", index: void 0, caseSensitive: void 0, module: "/build/routes/resources.taskruns.$runParam.replay-WNLOTTCW.js", imports: void 0, hasAction: !0, hasLoader: !1, hasErrorBoundary: !1 }, "routes/resources.taskruns.bulk.cancel": { id: "routes/resources.taskruns.bulk.cancel", parentId: "root", path: "resources/taskruns/bulk/cancel", index: void 0, caseSensitive: void 0, module: "/build/routes/resources.taskruns.bulk.cancel-R67QX42R.js", imports: void 0, hasAction: !0, hasLoader: !1, hasErrorBoundary: !1 }, "routes/resources.taskruns.bulk.replay": { id: "routes/resources.taskruns.bulk.replay", parentId: "root", path: "resources/taskruns/bulk/replay", index: void 0, caseSensitive: void 0, module: "/build/routes/resources.taskruns.bulk.replay-DBYU7VNK.js", imports: void 0, hasAction: !0, hasLoader: !1, hasErrorBoundary: !1 }, "routes/storybook": { id: "routes/storybook", parentId: "root", path: "storybook", index: void 0, caseSensitive: void 0, module: "/build/routes/storybook-KCKZB2FL.js", imports: void 0, hasAction: !1, hasLoader: !0, hasErrorBoundary: !1 }, "routes/storybook.badges": { id: "routes/storybook.badges", parentId: "routes/storybook", path: "badges", index: void 0, caseSensitive: void 0, module: "/build/routes/storybook.badges-TSVKJCYF.js", imports: ["/build/_shared/chunk-53BC46H2.js", "/build/_shared/chunk-ITYDXQLP.js"], hasAction: !1, hasLoader: !1, hasErrorBoundary: !1 }, "routes/storybook.buttons": { id: "routes/storybook.buttons", parentId: "routes/storybook", path: "buttons", index: void 0, caseSensitive: void 0, module: "/build/routes/storybook.buttons-WYSSBCCD.js", imports: ["/build/_shared/chunk-LKTYH4KV.js", "/build/_shared/chunk-X7G7TLQ6.js", "/build/_shared/chunk-HS3AAZGP.js", "/build/_shared/chunk-G26VUZ3V.js", "/build/_shared/chunk-ICEDALHM.js", "/build/_shared/chunk-ZOFUYGVL.js", "/build/_shared/chunk-A4HAOIEH.js", "/build/_shared/chunk-REAXH7HE.js", "/build/_shared/chunk-XO75RT3N.js", "/build/_shared/chunk-NTXIRLKV.js", "/build/_shared/chunk-ITYDXQLP.js"], hasAction: !1, hasLoader: !1, hasErrorBoundary: !1 }, "routes/storybook.callout": { id: "routes/storybook.callout", parentId: "routes/storybook", path: "callout", index: void 0, caseSensitive: void 0, module: "/build/routes/storybook.callout-YPBSWJZM.js", imports: ["/build/_shared/chunk-G26VUZ3V.js", "/build/_shared/chunk-ANF4WBNI.js", "/build/_shared/chunk-A4HAOIEH.js", "/build/_shared/chunk-REAXH7HE.js", "/build/_shared/chunk-NTXIRLKV.js", "/build/_shared/chunk-VMR4SOYV.js", "/build/_shared/chunk-ITYDXQLP.js"], hasAction: !1, hasLoader: !1, hasErrorBoundary: !1 }, "routes/storybook.checkboxes": { id: "routes/storybook.checkboxes", parentId: "routes/storybook", path: "checkboxes", index: void 0, caseSensitive: void 0, module: "/build/routes/storybook.checkboxes-P2RDLCQE.js", imports: ["/build/_shared/chunk-XLUNUOUT.js", "/build/_shared/chunk-53BC46H2.js", "/build/_shared/chunk-LKTYH4KV.js", "/build/_shared/chunk-X7G7TLQ6.js", "/build/_shared/chunk-HS3AAZGP.js", "/build/_shared/chunk-ICEDALHM.js", "/build/_shared/chunk-ZOFUYGVL.js", "/build/_shared/chunk-A4HAOIEH.js", "/build/_shared/chunk-REAXH7HE.js", "/build/_shared/chunk-XO75RT3N.js", "/build/_shared/chunk-NTXIRLKV.js", "/build/_shared/chunk-VMR4SOYV.js", "/build/_shared/chunk-ITYDXQLP.js"], hasAction: !1, hasLoader: !1, hasErrorBoundary: !1 }, "routes/storybook.clipboard-field": { id: "routes/storybook.clipboard-field", parentId: "routes/storybook", path: "clipboard-field", index: void 0, caseSensitive: void 0, module: "/build/routes/storybook.clipboard-field-UWK3BYDH.js", imports: ["/build/_shared/chunk-FKWMQIXM.js", "/build/_shared/chunk-4QBAYZXH.js", "/build/_shared/chunk-LKTYH4KV.js", "/build/_shared/chunk-X7G7TLQ6.js", "/build/_shared/chunk-HS3AAZGP.js", "/build/_shared/chunk-G26VUZ3V.js", "/build/_shared/chunk-HRCMIQSB.js", "/build/_shared/chunk-L6B4ZRM6.js", "/build/_shared/chunk-QMQUAZ65.js", "/build/_shared/chunk-YOYFDK4O.js", "/build/_shared/chunk-ICEDALHM.js", "/build/_shared/chunk-ZOFUYGVL.js", "/build/_shared/chunk-A4HAOIEH.js", "/build/_shared/chunk-REAXH7HE.js", "/build/_shared/chunk-XO75RT3N.js", "/build/_shared/chunk-NTXIRLKV.js", "/build/_shared/chunk-VMR4SOYV.js", "/build/_shared/chunk-ITYDXQLP.js"], hasAction: !1, hasLoader: !1, hasErrorBoundary: !1 }, "routes/storybook.code-block": { id: "routes/storybook.code-block", parentId: "routes/storybook", path: "code-block", index: void 0, caseSensitive: void 0, module: "/build/routes/storybook.code-block-WMAP7PTW.js", imports: ["/build/_shared/chunk-G26VUZ3V.js", "/build/_shared/chunk-PL77FHJK.js", "/build/_shared/chunk-HRCMIQSB.js", "/build/_shared/chunk-L6B4ZRM6.js", "/build/_shared/chunk-QMQUAZ65.js", "/build/_shared/chunk-YOYFDK4O.js", "/build/_shared/chunk-XO75RT3N.js", "/build/_shared/chunk-NTXIRLKV.js", "/build/_shared/chunk-VMR4SOYV.js", "/build/_shared/chunk-ITYDXQLP.js"], hasAction: !1, hasLoader: !1, hasErrorBoundary: !1 }, "routes/storybook.date-fields": { id: "routes/storybook.date-fields", parentId: "routes/storybook", path: "date-fields", index: void 0, caseSensitive: void 0, module: "/build/routes/storybook.date-fields-57MUAT65.js", imports: ["/build/_shared/chunk-H7U6NYXK.js", "/build/_shared/chunk-DHXQYV6R.js", "/build/_shared/chunk-CPXEV6S7.js", "/build/_shared/chunk-ICAPXTLO.js", "/build/_shared/chunk-RNSPZWJ4.js", "/build/_shared/chunk-4WHSRCQV.js", "/build/_shared/chunk-LD5CY63I.js", "/build/_shared/chunk-Y7Z57SGD.js", "/build/_shared/chunk-LKTYH4KV.js", "/build/_shared/chunk-X7G7TLQ6.js", "/build/_shared/chunk-HS3AAZGP.js", "/build/_shared/chunk-G26VUZ3V.js", "/build/_shared/chunk-G4EM45JG.js", "/build/_shared/chunk-4W4YPBCQ.js", "/build/_shared/chunk-HRCMIQSB.js", "/build/_shared/chunk-L6B4ZRM6.js", "/build/_shared/chunk-QMQUAZ65.js", "/build/_shared/chunk-YOYFDK4O.js", "/build/_shared/chunk-ICEDALHM.js", "/build/_shared/chunk-ZOFUYGVL.js", "/build/_shared/chunk-A4HAOIEH.js", "/build/_shared/chunk-REAXH7HE.js", "/build/_shared/chunk-XO75RT3N.js", "/build/_shared/chunk-NTXIRLKV.js", "/build/_shared/chunk-VMR4SOYV.js", "/build/_shared/chunk-ITYDXQLP.js"], hasAction: !1, hasLoader: !1, hasErrorBoundary: !1 }, "routes/storybook.detail-cell": { id: "routes/storybook.detail-cell", parentId: "routes/storybook", path: "detail-cell", index: void 0, caseSensitive: void 0, module: "/build/routes/storybook.detail-cell-D2DKPF5R.js", imports: ["/build/_shared/chunk-OQFKWQUG.js", "/build/_shared/chunk-ZBQ6KKHY.js", "/build/_shared/chunk-4W4YPBCQ.js", "/build/_shared/chunk-ICEDALHM.js", "/build/_shared/chunk-ZOFUYGVL.js", "/build/_shared/chunk-A4HAOIEH.js", "/build/_shared/chunk-REAXH7HE.js", "/build/_shared/chunk-XO75RT3N.js", "/build/_shared/chunk-NTXIRLKV.js", "/build/_shared/chunk-VMR4SOYV.js", "/build/_shared/chunk-ITYDXQLP.js"], hasAction: !1, hasLoader: !1, hasErrorBoundary: !1 }, "routes/storybook.dialog": { id: "routes/storybook.dialog", parentId: "routes/storybook", path: "dialog", index: void 0, caseSensitive: void 0, module: "/build/routes/storybook.dialog-KYMFBIZO.js", imports: ["/build/_shared/chunk-WTLCO7GZ.js", "/build/_shared/chunk-2B3SSTVQ.js", "/build/_shared/chunk-Y7Z57SGD.js", "/build/_shared/chunk-HS3AAZGP.js", "/build/_shared/chunk-QMQUAZ65.js", "/build/_shared/chunk-YOYFDK4O.js", "/build/_shared/chunk-A4HAOIEH.js", "/build/_shared/chunk-NTXIRLKV.js", "/build/_shared/chunk-ITYDXQLP.js"], hasAction: !1, hasLoader: !1, hasErrorBoundary: !1 }, "routes/storybook.environment-label": { id: "routes/storybook.environment-label", parentId: "routes/storybook", path: "environment-label", index: void 0, caseSensitive: void 0, module: "/build/routes/storybook.environment-label-JRSUH6GT.js", imports: ["/build/_shared/chunk-FKWMQIXM.js", "/build/_shared/chunk-G26VUZ3V.js", "/build/_shared/chunk-HRCMIQSB.js", "/build/_shared/chunk-L6B4ZRM6.js", "/build/_shared/chunk-QMQUAZ65.js", "/build/_shared/chunk-YOYFDK4O.js", "/build/_shared/chunk-NTXIRLKV.js", "/build/_shared/chunk-ITYDXQLP.js"], hasAction: !1, hasLoader: !1, hasErrorBoundary: !1 }, "routes/storybook.filter": { id: "routes/storybook.filter", parentId: "routes/storybook", path: "filter", index: void 0, caseSensitive: void 0, module: "/build/routes/storybook.filter-AVBH7NWW.js", imports: ["/build/_shared/chunk-OVQ7W575.js", "/build/_shared/chunk-GKEAUNXO.js", "/build/_shared/chunk-PBINOJUV.js", "/build/_shared/chunk-FKWMQIXM.js", "/build/_shared/chunk-BJJDMBQV.js", "/build/_shared/chunk-JHQSSEEW.js", "/build/_shared/chunk-VYWDFFOA.js", "/build/_shared/chunk-X7G7TLQ6.js", "/build/_shared/chunk-HS3AAZGP.js", "/build/_shared/chunk-HRCMIQSB.js", "/build/_shared/chunk-L6B4ZRM6.js", "/build/_shared/chunk-QMQUAZ65.js", "/build/_shared/chunk-YOYFDK4O.js", "/build/_shared/chunk-REAXH7HE.js", "/build/_shared/chunk-XO75RT3N.js", "/build/_shared/chunk-NTXIRLKV.js", "/build/_shared/chunk-ITYDXQLP.js"], hasAction: !1, hasLoader: !1, hasErrorBoundary: !1 }, "routes/storybook.free-plan-usage": { id: "routes/storybook.free-plan-usage", parentId: "routes/storybook", path: "free-plan-usage", index: void 0, caseSensitive: void 0, module: "/build/routes/storybook.free-plan-usage-XYV4ZEKM.js", imports: ["/build/_shared/chunk-BDMKDQRC.js", "/build/_shared/chunk-JHQSSEEW.js", "/build/_shared/chunk-G4EM45JG.js", "/build/_shared/chunk-VMR4SOYV.js", "/build/_shared/chunk-ITYDXQLP.js"], hasAction: !1, hasLoader: !1, hasErrorBoundary: !1 }, "routes/storybook.inline-code": { id: "routes/storybook.inline-code", parentId: "routes/storybook", path: "inline-code", index: void 0, caseSensitive: void 0, module: "/build/routes/storybook.inline-code-NBLIVUXF.js", imports: ["/build/_shared/chunk-RJPCQAIK.js", "/build/_shared/chunk-VMR4SOYV.js", "/build/_shared/chunk-ITYDXQLP.js"], hasAction: !1, hasLoader: !1, hasErrorBoundary: !1 }, "routes/storybook.input-fields": { id: "routes/storybook.input-fields", parentId: "routes/storybook", path: "input-fields", index: void 0, caseSensitive: void 0, module: "/build/routes/storybook.input-fields-BRGKJA4F.js", imports: ["/build/_shared/chunk-LYMFAN7V.js", "/build/_shared/chunk-FKWMQIXM.js", "/build/_shared/chunk-ZBQ6KKHY.js", "/build/_shared/chunk-HRCMIQSB.js", "/build/_shared/chunk-L6B4ZRM6.js", "/build/_shared/chunk-QMQUAZ65.js", "/build/_shared/chunk-YOYFDK4O.js", "/build/_shared/chunk-ICEDALHM.js", "/build/_shared/chunk-ZOFUYGVL.js", "/build/_shared/chunk-A4HAOIEH.js", "/build/_shared/chunk-REAXH7HE.js", "/build/_shared/chunk-XO75RT3N.js", "/build/_shared/chunk-NTXIRLKV.js", "/build/_shared/chunk-ITYDXQLP.js"], hasAction: !1, hasLoader: !1, hasErrorBoundary: !1 }, "routes/storybook.loading-bar-divider": { id: "routes/storybook.loading-bar-divider", parentId: "routes/storybook", path: "loading-bar-divider", index: void 0, caseSensitive: void 0, module: "/build/routes/storybook.loading-bar-divider-VJTCJL6H.js", imports: ["/build/_shared/chunk-NB6GFRNN.js", "/build/_shared/chunk-G4EM45JG.js"], hasAction: !1, hasLoader: !1, hasErrorBoundary: !1 }, "routes/storybook.named-icon": { id: "routes/storybook.named-icon", parentId: "routes/storybook", path: "named-icon", index: void 0, caseSensitive: void 0, module: "/build/routes/storybook.named-icon-EDNPRRTD.js", imports: ["/build/_shared/chunk-G26VUZ3V.js", "/build/_shared/chunk-ICEDALHM.js", "/build/_shared/chunk-ZOFUYGVL.js", "/build/_shared/chunk-A4HAOIEH.js", "/build/_shared/chunk-REAXH7HE.js", "/build/_shared/chunk-XO75RT3N.js", "/build/_shared/chunk-NTXIRLKV.js", "/build/_shared/chunk-ITYDXQLP.js"], hasAction: !1, hasLoader: !1, hasErrorBoundary: !1 }, "routes/storybook.page-header": { id: "routes/storybook.page-header", parentId: "routes/storybook", path: "page-header", index: void 0, caseSensitive: void 0, module: "/build/routes/storybook.page-header-JJCDAN4U.js", imports: ["/build/_shared/chunk-GDVQ557H.js", "/build/_shared/chunk-SBSGXD5Z.js", "/build/_shared/chunk-NB6GFRNN.js", "/build/_shared/chunk-UW7CEVYE.js", "/build/_shared/chunk-FVYECWQQ.js", "/build/_shared/chunk-BDMKDQRC.js", "/build/_shared/chunk-UGCEOWBE.js", "/build/_shared/chunk-V7RLTIQT.js", "/build/_shared/chunk-HKHUV7OI.js", "/build/_shared/chunk-RTPAOLHU.js", "/build/_shared/chunk-BIWIT6XE.js", "/build/_shared/chunk-4QBAYZXH.js", "/build/_shared/chunk-WTLCO7GZ.js", "/build/_shared/chunk-2B3SSTVQ.js", "/build/_shared/chunk-NYYE4FTH.js", "/build/_shared/chunk-BJJDMBQV.js", "/build/_shared/chunk-GP5XYEW5.js", "/build/_shared/chunk-4WHSRCQV.js", "/build/_shared/chunk-ZBQ6KKHY.js", "/build/_shared/chunk-QRF3DCUW.js", "/build/_shared/chunk-L5OF72BL.js", "/build/_shared/chunk-KIAMXGUL.js", "/build/_shared/chunk-LRJWEOAP.js", "/build/_shared/chunk-53BC46H2.js", "/build/_shared/chunk-GVVQJ7TX.js", "/build/_shared/chunk-4QLYPARN.js", "/build/_shared/chunk-AEDMGY7M.js", "/build/_shared/chunk-JHQSSEEW.js", "/build/_shared/chunk-LZFJYVDM.js", "/build/_shared/chunk-2X7GG4YA.js", "/build/_shared/chunk-6VY3TGHV.js", "/build/_shared/chunk-LBCN2YVJ.js", "/build/_shared/chunk-LD5CY63I.js", "/build/_shared/chunk-Y7Z57SGD.js", "/build/_shared/chunk-LKTYH4KV.js", "/build/_shared/chunk-X7G7TLQ6.js", "/build/_shared/chunk-HS3AAZGP.js", "/build/_shared/chunk-SNHKI5QX.js", "/build/_shared/chunk-G26VUZ3V.js", "/build/_shared/chunk-5XDHH4UN.js", "/build/_shared/chunk-7ENN74BL.js", "/build/_shared/chunk-G4EM45JG.js", "/build/_shared/chunk-ANF4WBNI.js", "/build/_shared/chunk-4W4YPBCQ.js", "/build/_shared/chunk-HRCMIQSB.js", "/build/_shared/chunk-L6B4ZRM6.js", "/build/_shared/chunk-QMQUAZ65.js", "/build/_shared/chunk-YOYFDK4O.js", "/build/_shared/chunk-ICEDALHM.js", "/build/_shared/chunk-ZOFUYGVL.js", "/build/_shared/chunk-A4HAOIEH.js", "/build/_shared/chunk-REAXH7HE.js", "/build/_shared/chunk-XO75RT3N.js", "/build/_shared/chunk-NTXIRLKV.js", "/build/_shared/chunk-VMR4SOYV.js", "/build/_shared/chunk-ITYDXQLP.js", "/build/_shared/chunk-TCCEOGB7.js"], hasAction: !1, hasLoader: !1, hasErrorBoundary: !1 }, "routes/storybook.popover": { id: "routes/storybook.popover", parentId: "routes/storybook", path: "popover", index: void 0, caseSensitive: void 0, module: "/build/routes/storybook.popover-OI3S5AFU.js", imports: ["/build/_shared/chunk-LD5CY63I.js", "/build/_shared/chunk-Y7Z57SGD.js", "/build/_shared/chunk-LKTYH4KV.js", "/build/_shared/chunk-X7G7TLQ6.js", "/build/_shared/chunk-HS3AAZGP.js", "/build/_shared/chunk-L6B4ZRM6.js", "/build/_shared/chunk-QMQUAZ65.js", "/build/_shared/chunk-YOYFDK4O.js", "/build/_shared/chunk-ICEDALHM.js", "/build/_shared/chunk-ZOFUYGVL.js", "/build/_shared/chunk-A4HAOIEH.js", "/build/_shared/chunk-REAXH7HE.js", "/build/_shared/chunk-XO75RT3N.js", "/build/_shared/chunk-NTXIRLKV.js", "/build/_shared/chunk-VMR4SOYV.js", "/build/_shared/chunk-ITYDXQLP.js"], hasAction: !1, hasLoader: !1, hasErrorBoundary: !1 }, "routes/storybook.pricing-callout": { id: "routes/storybook.pricing-callout", parentId: "routes/storybook", path: "pricing-callout", index: void 0, caseSensitive: void 0, module: "/build/routes/storybook.pricing-callout-JHQTG7IJ.js", imports: ["/build/_shared/chunk-JHQSSEEW.js", "/build/_shared/chunk-LKTYH4KV.js", "/build/_shared/chunk-X7G7TLQ6.js", "/build/_shared/chunk-HS3AAZGP.js", "/build/_shared/chunk-ANF4WBNI.js", "/build/_shared/chunk-ICEDALHM.js", "/build/_shared/chunk-ZOFUYGVL.js", "/build/_shared/chunk-A4HAOIEH.js", "/build/_shared/chunk-REAXH7HE.js", "/build/_shared/chunk-XO75RT3N.js", "/build/_shared/chunk-NTXIRLKV.js", "/build/_shared/chunk-VMR4SOYV.js", "/build/_shared/chunk-ITYDXQLP.js"], hasAction: !1, hasLoader: !1, hasErrorBoundary: !1 }, "routes/storybook.radio-group": { id: "routes/storybook.radio-group", parentId: "routes/storybook", path: "radio-group", index: void 0, caseSensitive: void 0, module: "/build/routes/storybook.radio-group-GNB3HJIO.js", imports: ["/build/_shared/chunk-B6ECCFQG.js", "/build/_shared/chunk-GMFAY4XV.js", "/build/_shared/chunk-5Y65PHTP.js", "/build/_shared/chunk-J4EBRO22.js", "/build/_shared/chunk-AAKY77KV.js", "/build/_shared/chunk-67PE2T7V.js", "/build/_shared/chunk-53BC46H2.js", "/build/_shared/chunk-LKTYH4KV.js", "/build/_shared/chunk-X7G7TLQ6.js", "/build/_shared/chunk-HS3AAZGP.js", "/build/_shared/chunk-YOYFDK4O.js", "/build/_shared/chunk-ICEDALHM.js", "/build/_shared/chunk-ZOFUYGVL.js", "/build/_shared/chunk-A4HAOIEH.js", "/build/_shared/chunk-REAXH7HE.js", "/build/_shared/chunk-XO75RT3N.js", "/build/_shared/chunk-NTXIRLKV.js", "/build/_shared/chunk-VMR4SOYV.js", "/build/_shared/chunk-ITYDXQLP.js"], hasAction: !1, hasLoader: !1, hasErrorBoundary: !1 }, "routes/storybook.search-fields": { id: "routes/storybook.search-fields", parentId: "routes/storybook", path: "search-fields", index: void 0, caseSensitive: void 0, module: "/build/routes/storybook.search-fields-426U5J7L.js", imports: ["/build/_shared/chunk-LYMFAN7V.js", "/build/_shared/chunk-UW7CEVYE.js", "/build/_shared/chunk-FVYECWQQ.js", "/build/_shared/chunk-BDMKDQRC.js", "/build/_shared/chunk-UGCEOWBE.js", "/build/_shared/chunk-V7RLTIQT.js", "/build/_shared/chunk-HKHUV7OI.js", "/build/_shared/chunk-RTPAOLHU.js", "/build/_shared/chunk-BIWIT6XE.js", "/build/_shared/chunk-4QBAYZXH.js", "/build/_shared/chunk-WTLCO7GZ.js", "/build/_shared/chunk-2B3SSTVQ.js", "/build/_shared/chunk-NYYE4FTH.js", "/build/_shared/chunk-BJJDMBQV.js", "/build/_shared/chunk-GP5XYEW5.js", "/build/_shared/chunk-4WHSRCQV.js", "/build/_shared/chunk-ZBQ6KKHY.js", "/build/_shared/chunk-QRF3DCUW.js", "/build/_shared/chunk-L5OF72BL.js", "/build/_shared/chunk-KIAMXGUL.js", "/build/_shared/chunk-LRJWEOAP.js", "/build/_shared/chunk-53BC46H2.js", "/build/_shared/chunk-GVVQJ7TX.js", "/build/_shared/chunk-4QLYPARN.js", "/build/_shared/chunk-AEDMGY7M.js", "/build/_shared/chunk-JHQSSEEW.js", "/build/_shared/chunk-LZFJYVDM.js", "/build/_shared/chunk-2X7GG4YA.js", "/build/_shared/chunk-6VY3TGHV.js", "/build/_shared/chunk-LBCN2YVJ.js", "/build/_shared/chunk-LD5CY63I.js", "/build/_shared/chunk-Y7Z57SGD.js", "/build/_shared/chunk-LKTYH4KV.js", "/build/_shared/chunk-X7G7TLQ6.js", "/build/_shared/chunk-HS3AAZGP.js", "/build/_shared/chunk-SNHKI5QX.js", "/build/_shared/chunk-G26VUZ3V.js", "/build/_shared/chunk-5XDHH4UN.js", "/build/_shared/chunk-7ENN74BL.js", "/build/_shared/chunk-G4EM45JG.js", "/build/_shared/chunk-ANF4WBNI.js", "/build/_shared/chunk-4W4YPBCQ.js", "/build/_shared/chunk-HRCMIQSB.js", "/build/_shared/chunk-L6B4ZRM6.js", "/build/_shared/chunk-QMQUAZ65.js", "/build/_shared/chunk-YOYFDK4O.js", "/build/_shared/chunk-ICEDALHM.js", "/build/_shared/chunk-ZOFUYGVL.js", "/build/_shared/chunk-A4HAOIEH.js", "/build/_shared/chunk-REAXH7HE.js", "/build/_shared/chunk-XO75RT3N.js", "/build/_shared/chunk-NTXIRLKV.js", "/build/_shared/chunk-VMR4SOYV.js", "/build/_shared/chunk-ITYDXQLP.js", "/build/_shared/chunk-TCCEOGB7.js"], hasAction: !1, hasLoader: !1, hasErrorBoundary: !1 }, "routes/storybook.segmented-control": { id: "routes/storybook.segmented-control", parentId: "routes/storybook", path: "segmented-control", index: void 0, caseSensitive: void 0, module: "/build/routes/storybook.segmented-control-PAF4G3SK.js", imports: ["/build/_shared/chunk-NYEYKKUU.js", "/build/_shared/chunk-UW7CEVYE.js", "/build/_shared/chunk-FVYECWQQ.js", "/build/_shared/chunk-BDMKDQRC.js", "/build/_shared/chunk-UGCEOWBE.js", "/build/_shared/chunk-V7RLTIQT.js", "/build/_shared/chunk-HKHUV7OI.js", "/build/_shared/chunk-RTPAOLHU.js", "/build/_shared/chunk-BIWIT6XE.js", "/build/_shared/chunk-4QBAYZXH.js", "/build/_shared/chunk-WTLCO7GZ.js", "/build/_shared/chunk-2B3SSTVQ.js", "/build/_shared/chunk-NYYE4FTH.js", "/build/_shared/chunk-BJJDMBQV.js", "/build/_shared/chunk-GP5XYEW5.js", "/build/_shared/chunk-4WHSRCQV.js", "/build/_shared/chunk-ZBQ6KKHY.js", "/build/_shared/chunk-QRF3DCUW.js", "/build/_shared/chunk-L5OF72BL.js", "/build/_shared/chunk-KIAMXGUL.js", "/build/_shared/chunk-LRJWEOAP.js", "/build/_shared/chunk-53BC46H2.js", "/build/_shared/chunk-GVVQJ7TX.js", "/build/_shared/chunk-4QLYPARN.js", "/build/_shared/chunk-AEDMGY7M.js", "/build/_shared/chunk-JHQSSEEW.js", "/build/_shared/chunk-LZFJYVDM.js", "/build/_shared/chunk-2X7GG4YA.js", "/build/_shared/chunk-6VY3TGHV.js", "/build/_shared/chunk-LBCN2YVJ.js", "/build/_shared/chunk-LD5CY63I.js", "/build/_shared/chunk-Y7Z57SGD.js", "/build/_shared/chunk-LKTYH4KV.js", "/build/_shared/chunk-X7G7TLQ6.js", "/build/_shared/chunk-HS3AAZGP.js", "/build/_shared/chunk-SNHKI5QX.js", "/build/_shared/chunk-G26VUZ3V.js", "/build/_shared/chunk-5XDHH4UN.js", "/build/_shared/chunk-7ENN74BL.js", "/build/_shared/chunk-G4EM45JG.js", "/build/_shared/chunk-ANF4WBNI.js", "/build/_shared/chunk-4W4YPBCQ.js", "/build/_shared/chunk-HRCMIQSB.js", "/build/_shared/chunk-L6B4ZRM6.js", "/build/_shared/chunk-QMQUAZ65.js", "/build/_shared/chunk-YOYFDK4O.js", "/build/_shared/chunk-ICEDALHM.js", "/build/_shared/chunk-ZOFUYGVL.js", "/build/_shared/chunk-A4HAOIEH.js", "/build/_shared/chunk-REAXH7HE.js", "/build/_shared/chunk-XO75RT3N.js", "/build/_shared/chunk-NTXIRLKV.js", "/build/_shared/chunk-VMR4SOYV.js", "/build/_shared/chunk-ITYDXQLP.js", "/build/_shared/chunk-TCCEOGB7.js"], hasAction: !1, hasLoader: !1, hasErrorBoundary: !1 }, "routes/storybook.select": { id: "routes/storybook.select", parentId: "routes/storybook", path: "select", index: void 0, caseSensitive: void 0, module: "/build/routes/storybook.select-ABNDBBB5.js", imports: ["/build/_shared/chunk-GKEAUNXO.js", "/build/_shared/chunk-PBINOJUV.js", "/build/_shared/chunk-BJJDMBQV.js", "/build/_shared/chunk-VYWDFFOA.js", "/build/_shared/chunk-LKTYH4KV.js", "/build/_shared/chunk-X7G7TLQ6.js", "/build/_shared/chunk-HS3AAZGP.js", "/build/_shared/chunk-ICEDALHM.js", "/build/_shared/chunk-ZOFUYGVL.js", "/build/_shared/chunk-A4HAOIEH.js", "/build/_shared/chunk-REAXH7HE.js", "/build/_shared/chunk-XO75RT3N.js", "/build/_shared/chunk-NTXIRLKV.js", "/build/_shared/chunk-ITYDXQLP.js"], hasAction: !1, hasLoader: !1, hasErrorBoundary: !1 }, "routes/storybook.shortcuts": { id: "routes/storybook.shortcuts", parentId: "routes/storybook", path: "shortcuts", index: void 0, caseSensitive: void 0, module: "/build/routes/storybook.shortcuts-AKJTGGDU.js", imports: ["/build/_shared/chunk-LKTYH4KV.js", "/build/_shared/chunk-X7G7TLQ6.js", "/build/_shared/chunk-HS3AAZGP.js", "/build/_shared/chunk-G26VUZ3V.js", "/build/_shared/chunk-ICEDALHM.js", "/build/_shared/chunk-ZOFUYGVL.js", "/build/_shared/chunk-A4HAOIEH.js", "/build/_shared/chunk-REAXH7HE.js", "/build/_shared/chunk-XO75RT3N.js", "/build/_shared/chunk-NTXIRLKV.js", "/build/_shared/chunk-ITYDXQLP.js"], hasAction: !1, hasLoader: !1, hasErrorBoundary: !1 }, "routes/storybook.simple-form": { id: "routes/storybook.simple-form", parentId: "routes/storybook", path: "simple-form", index: void 0, caseSensitive: void 0, module: "/build/routes/storybook.simple-form-LAC6CDRD.js", imports: ["/build/_shared/chunk-TI42EI3A.js", "/build/_shared/chunk-AXRBBWHF.js", "/build/_shared/chunk-LYMFAN7V.js", "/build/_shared/chunk-UW7CEVYE.js", "/build/_shared/chunk-FVYECWQQ.js", "/build/_shared/chunk-BDMKDQRC.js", "/build/_shared/chunk-UGCEOWBE.js", "/build/_shared/chunk-V7RLTIQT.js", "/build/_shared/chunk-HKHUV7OI.js", "/build/_shared/chunk-RTPAOLHU.js", "/build/_shared/chunk-BIWIT6XE.js", "/build/_shared/chunk-4QBAYZXH.js", "/build/_shared/chunk-WTLCO7GZ.js", "/build/_shared/chunk-2B3SSTVQ.js", "/build/_shared/chunk-NYYE4FTH.js", "/build/_shared/chunk-BJJDMBQV.js", "/build/_shared/chunk-GP5XYEW5.js", "/build/_shared/chunk-4WHSRCQV.js", "/build/_shared/chunk-ZBQ6KKHY.js", "/build/_shared/chunk-QRF3DCUW.js", "/build/_shared/chunk-L5OF72BL.js", "/build/_shared/chunk-KIAMXGUL.js", "/build/_shared/chunk-LRJWEOAP.js", "/build/_shared/chunk-53BC46H2.js", "/build/_shared/chunk-GVVQJ7TX.js", "/build/_shared/chunk-4QLYPARN.js", "/build/_shared/chunk-AEDMGY7M.js", "/build/_shared/chunk-JHQSSEEW.js", "/build/_shared/chunk-LZFJYVDM.js", "/build/_shared/chunk-2X7GG4YA.js", "/build/_shared/chunk-6VY3TGHV.js", "/build/_shared/chunk-LBCN2YVJ.js", "/build/_shared/chunk-LD5CY63I.js", "/build/_shared/chunk-Y7Z57SGD.js", "/build/_shared/chunk-LKTYH4KV.js", "/build/_shared/chunk-X7G7TLQ6.js", "/build/_shared/chunk-HS3AAZGP.js", "/build/_shared/chunk-SNHKI5QX.js", "/build/_shared/chunk-G26VUZ3V.js", "/build/_shared/chunk-5XDHH4UN.js", "/build/_shared/chunk-7ENN74BL.js", "/build/_shared/chunk-G4EM45JG.js", "/build/_shared/chunk-ANF4WBNI.js", "/build/_shared/chunk-4W4YPBCQ.js", "/build/_shared/chunk-HRCMIQSB.js", "/build/_shared/chunk-L6B4ZRM6.js", "/build/_shared/chunk-QMQUAZ65.js", "/build/_shared/chunk-YOYFDK4O.js", "/build/_shared/chunk-ICEDALHM.js", "/build/_shared/chunk-ZOFUYGVL.js", "/build/_shared/chunk-A4HAOIEH.js", "/build/_shared/chunk-REAXH7HE.js", "/build/_shared/chunk-XO75RT3N.js", "/build/_shared/chunk-NTXIRLKV.js", "/build/_shared/chunk-VMR4SOYV.js", "/build/_shared/chunk-ITYDXQLP.js", "/build/_shared/chunk-TCCEOGB7.js"], hasAction: !1, hasLoader: !1, hasErrorBoundary: !1 }, "routes/storybook.switch": { id: "routes/storybook.switch", parentId: "routes/storybook", path: "switch", index: void 0, caseSensitive: void 0, module: "/build/routes/storybook.switch-PEDCYT6I.js", imports: ["/build/_shared/chunk-IO5YMY4B.js", "/build/_shared/chunk-J4EBRO22.js", "/build/_shared/chunk-AAKY77KV.js", "/build/_shared/chunk-67PE2T7V.js", "/build/_shared/chunk-YOYFDK4O.js", "/build/_shared/chunk-ITYDXQLP.js"], hasAction: !1, hasLoader: !1, hasErrorBoundary: !1 }, "routes/storybook.tabs": { id: "routes/storybook.tabs", parentId: "routes/storybook", path: "tabs", index: void 0, caseSensitive: void 0, module: "/build/routes/storybook.tabs-FXWKCPIS.js", imports: ["/build/_shared/chunk-SBSGXD5Z.js", "/build/_shared/chunk-G4EM45JG.js", "/build/_shared/chunk-ITYDXQLP.js"], hasAction: !1, hasLoader: !1, hasErrorBoundary: !1 }, "routes/storybook.tabs.$tabNumber": { id: "routes/storybook.tabs.$tabNumber", parentId: "routes/storybook.tabs", path: ":tabNumber", index: void 0, caseSensitive: void 0, module: "/build/routes/storybook.tabs.$tabNumber-MOPZG5GQ.js", imports: void 0, hasAction: !1, hasLoader: !1, hasErrorBoundary: !1 }, "routes/storybook.timeline": { id: "routes/storybook.timeline", parentId: "routes/storybook", path: "timeline", index: void 0, caseSensitive: void 0, module: "/build/routes/storybook.timeline-3RP4DWBL.js", imports: ["/build/_shared/chunk-VRCSJSEI.js", "/build/_shared/chunk-FVTY47DG.js", "/build/_shared/chunk-IO5YMY4B.js", "/build/_shared/chunk-5Y65PHTP.js", "/build/_shared/chunk-J4EBRO22.js", "/build/_shared/chunk-AAKY77KV.js", "/build/_shared/chunk-67PE2T7V.js", "/build/_shared/chunk-2BLSR254.js", "/build/_shared/chunk-YOYFDK4O.js", "/build/_shared/chunk-VMR4SOYV.js", "/build/_shared/chunk-ITYDXQLP.js", "/build/_shared/chunk-TCCEOGB7.js"], hasAction: !1, hasLoader: !1, hasErrorBoundary: !1 }, "routes/storybook.toast": { id: "routes/storybook.toast", parentId: "routes/storybook", path: "toast", index: void 0, caseSensitive: void 0, module: "/build/routes/storybook.toast-HZSJANBT.js", imports: ["/build/_shared/chunk-UZLWJGHK.js", "/build/_shared/chunk-LKTYH4KV.js", "/build/_shared/chunk-X7G7TLQ6.js", "/build/_shared/chunk-HS3AAZGP.js", "/build/_shared/chunk-SNHKI5QX.js", "/build/_shared/chunk-ICEDALHM.js", "/build/_shared/chunk-ZOFUYGVL.js", "/build/_shared/chunk-A4HAOIEH.js", "/build/_shared/chunk-REAXH7HE.js", "/build/_shared/chunk-XO75RT3N.js", "/build/_shared/chunk-NTXIRLKV.js", "/build/_shared/chunk-VMR4SOYV.js", "/build/_shared/chunk-ITYDXQLP.js"], hasAction: !1, hasLoader: !1, hasErrorBoundary: !1 }, "routes/storybook.tooltip": { id: "routes/storybook.tooltip", parentId: "routes/storybook", path: "tooltip", index: void 0, caseSensitive: void 0, module: "/build/routes/storybook.tooltip-EQC3FJD5.js", imports: ["/build/_shared/chunk-UW7CEVYE.js", "/build/_shared/chunk-FVYECWQQ.js", "/build/_shared/chunk-BDMKDQRC.js", "/build/_shared/chunk-UGCEOWBE.js", "/build/_shared/chunk-V7RLTIQT.js", "/build/_shared/chunk-HKHUV7OI.js", "/build/_shared/chunk-RTPAOLHU.js", "/build/_shared/chunk-BIWIT6XE.js", "/build/_shared/chunk-4QBAYZXH.js", "/build/_shared/chunk-WTLCO7GZ.js", "/build/_shared/chunk-2B3SSTVQ.js", "/build/_shared/chunk-NYYE4FTH.js", "/build/_shared/chunk-BJJDMBQV.js", "/build/_shared/chunk-GP5XYEW5.js", "/build/_shared/chunk-4WHSRCQV.js", "/build/_shared/chunk-ZBQ6KKHY.js", "/build/_shared/chunk-QRF3DCUW.js", "/build/_shared/chunk-L5OF72BL.js", "/build/_shared/chunk-KIAMXGUL.js", "/build/_shared/chunk-LRJWEOAP.js", "/build/_shared/chunk-53BC46H2.js", "/build/_shared/chunk-GVVQJ7TX.js", "/build/_shared/chunk-4QLYPARN.js", "/build/_shared/chunk-AEDMGY7M.js", "/build/_shared/chunk-JHQSSEEW.js", "/build/_shared/chunk-LZFJYVDM.js", "/build/_shared/chunk-2X7GG4YA.js", "/build/_shared/chunk-6VY3TGHV.js", "/build/_shared/chunk-LBCN2YVJ.js", "/build/_shared/chunk-LD5CY63I.js", "/build/_shared/chunk-Y7Z57SGD.js", "/build/_shared/chunk-LKTYH4KV.js", "/build/_shared/chunk-X7G7TLQ6.js", "/build/_shared/chunk-HS3AAZGP.js", "/build/_shared/chunk-SNHKI5QX.js", "/build/_shared/chunk-G26VUZ3V.js", "/build/_shared/chunk-5XDHH4UN.js", "/build/_shared/chunk-7ENN74BL.js", "/build/_shared/chunk-G4EM45JG.js", "/build/_shared/chunk-ANF4WBNI.js", "/build/_shared/chunk-4W4YPBCQ.js", "/build/_shared/chunk-HRCMIQSB.js", "/build/_shared/chunk-L6B4ZRM6.js", "/build/_shared/chunk-QMQUAZ65.js", "/build/_shared/chunk-YOYFDK4O.js", "/build/_shared/chunk-ICEDALHM.js", "/build/_shared/chunk-ZOFUYGVL.js", "/build/_shared/chunk-A4HAOIEH.js", "/build/_shared/chunk-REAXH7HE.js", "/build/_shared/chunk-XO75RT3N.js", "/build/_shared/chunk-NTXIRLKV.js", "/build/_shared/chunk-VMR4SOYV.js", "/build/_shared/chunk-ITYDXQLP.js", "/build/_shared/chunk-TCCEOGB7.js"], hasAction: !1, hasLoader: !1, hasErrorBoundary: !1 }, "routes/storybook.tree-view": { id: "routes/storybook.tree-view", parentId: "routes/storybook", path: "tree-view", index: void 0, caseSensitive: void 0, module: "/build/routes/storybook.tree-view-6LK4POAY.js", imports: ["/build/_shared/chunk-GSPD64UG.js", "/build/_shared/chunk-EB63UTWA.js", "/build/_shared/chunk-LYMFAN7V.js", "/build/_shared/chunk-ZBQ6KKHY.js", "/build/_shared/chunk-VYWDFFOA.js", "/build/_shared/chunk-LKTYH4KV.js", "/build/_shared/chunk-X7G7TLQ6.js", "/build/_shared/chunk-HS3AAZGP.js", "/build/_shared/chunk-G4EM45JG.js", "/build/_shared/chunk-ICEDALHM.js", "/build/_shared/chunk-ZOFUYGVL.js", "/build/_shared/chunk-A4HAOIEH.js", "/build/_shared/chunk-REAXH7HE.js", "/build/_shared/chunk-XO75RT3N.js", "/build/_shared/chunk-NTXIRLKV.js", "/build/_shared/chunk-ITYDXQLP.js"], hasAction: !1, hasLoader: !1, hasErrorBoundary: !1 }, "routes/storybook.typography": { id: "routes/storybook.typography", parentId: "routes/storybook", path: "typography", index: void 0, caseSensitive: void 0, module: "/build/routes/storybook.typography-NYKGGNOG.js", imports: ["/build/_shared/chunk-KIAMXGUL.js", "/build/_shared/chunk-G26VUZ3V.js", "/build/_shared/chunk-ICEDALHM.js", "/build/_shared/chunk-ZOFUYGVL.js", "/build/_shared/chunk-A4HAOIEH.js", "/build/_shared/chunk-REAXH7HE.js", "/build/_shared/chunk-XO75RT3N.js", "/build/_shared/chunk-NTXIRLKV.js", "/build/_shared/chunk-VMR4SOYV.js", "/build/_shared/chunk-ITYDXQLP.js"], hasAction: !1, hasLoader: !1, hasErrorBoundary: !1 }, "routes/storybook.usage": { id: "routes/storybook.usage", parentId: "routes/storybook", path: "usage", index: void 0, caseSensitive: void 0, module: "/build/routes/storybook.usage-I5OPN7T3.js", imports: ["/build/_shared/chunk-5Y7YZGBM.js", "/build/_shared/chunk-6MAI3NMP.js", "/build/_shared/chunk-G4EM45JG.js", "/build/_shared/chunk-HRCMIQSB.js", "/build/_shared/chunk-L6B4ZRM6.js", "/build/_shared/chunk-QMQUAZ65.js", "/build/_shared/chunk-YOYFDK4O.js", "/build/_shared/chunk-NTXIRLKV.js", "/build/_shared/chunk-VMR4SOYV.js", "/build/_shared/chunk-ITYDXQLP.js"], hasAction: !1, hasLoader: !1, hasErrorBoundary: !1 }, "routes/tests.sse": { id: "routes/tests.sse", parentId: "root", path: "tests/sse", index: void 0, caseSensitive: void 0, module: "/build/routes/tests.sse-UDJATBJ5.js", imports: ["/build/_shared/chunk-KIGDS2I5.js"], hasAction: !1, hasLoader: !0, hasErrorBoundary: !1 }, "routes/tests.sse.stream": { id: "routes/tests.sse.stream", parentId: "routes/tests.sse", path: "stream", index: void 0, caseSensitive: void 0, module: "/build/routes/tests.sse.stream-TBZKLBCM.js", imports: void 0, hasAction: !1, hasLoader: !0, hasErrorBoundary: !1 }, "routes/unsubscribe.$userId.$token": { id: "routes/unsubscribe.$userId.$token", parentId: "root", path: "unsubscribe/:userId/:token", index: void 0, caseSensitive: void 0, module: "/build/routes/unsubscribe.$userId.$token-CMM4KVRW.js", imports: ["/build/_shared/chunk-TI42EI3A.js", "/build/_shared/chunk-GWRYVNME.js"], hasAction: !1, hasLoader: !0, hasErrorBoundary: !1 } }, version: "87ea57a4", hmr: void 0, url: "/build/manifest-87EA57A4.js" };

// server-entry-module:@remix-run/dev/server-build
var mode = "production", assetsBuildDirectory = "public/build", future = {}, publicPath = "/build/", entry = { module: entry_server_exports }, routes = {
  root: {
    id: "root",
    parentId: void 0,
    path: "",
    index: void 0,
    caseSensitive: void 0,
    module: root_exports
  },
  "routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.webhooks.$triggerParam_.runs.delivery.$runParam.tasks.$taskParam": {
    id: "routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.webhooks.$triggerParam_.runs.delivery.$runParam.tasks.$taskParam",
    parentId: "routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.webhooks.$triggerParam_.runs.delivery.$runParam",
    path: "tasks/:taskParam",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports2
  },
  "routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.webhooks.$triggerParam_.runs.delivery.$runParam.completed": {
    id: "routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.webhooks.$triggerParam_.runs.delivery.$runParam.completed",
    parentId: "routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.webhooks.$triggerParam_.runs.delivery.$runParam",
    path: "completed",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports3
  },
  "routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.external.$triggerParam_.runs.$runParam.tasks.$taskParam": {
    id: "routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.external.$triggerParam_.runs.$runParam.tasks.$taskParam",
    parentId: "routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.external.$triggerParam_.runs.$runParam",
    path: "tasks/:taskParam",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports4
  },
  "routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.webhooks.$triggerParam_.runs.$runParam.tasks.$taskParam": {
    id: "routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.webhooks.$triggerParam_.runs.$runParam.tasks.$taskParam",
    parentId: "routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.webhooks.$triggerParam_.runs.$runParam",
    path: "tasks/:taskParam",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports5
  },
  "routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.webhooks.$triggerParam_.runs.delivery.$runParam.trigger": {
    id: "routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.webhooks.$triggerParam_.runs.delivery.$runParam.trigger",
    parentId: "routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.webhooks.$triggerParam_.runs.delivery.$runParam",
    path: "trigger",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports6
  },
  "routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.webhooks.$triggerParam_.runs.delivery.$runParam.stream": {
    id: "routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.webhooks.$triggerParam_.runs.delivery.$runParam.stream",
    parentId: "routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.webhooks.$triggerParam_.runs.delivery.$runParam",
    path: "stream",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports7
  },
  "routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.external.$triggerParam_.runs.$runParam.completed": {
    id: "routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.external.$triggerParam_.runs.$runParam.completed",
    parentId: "routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.external.$triggerParam_.runs.$runParam",
    path: "completed",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports8
  },
  "routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.webhooks.$triggerParam_.runs.$runParam.completed": {
    id: "routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.webhooks.$triggerParam_.runs.$runParam.completed",
    parentId: "routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.webhooks.$triggerParam_.runs.$runParam",
    path: "completed",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports9
  },
  "routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.webhooks.$triggerParam_.runs.delivery.$runParam": {
    id: "routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.webhooks.$triggerParam_.runs.delivery.$runParam",
    parentId: "routes/_app.orgs.$organizationSlug.projects.$projectParam",
    path: "triggers/webhooks/:triggerParam/runs/delivery/:runParam",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports10
  },
  "routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.external.$triggerParam_.runs.$runParam.trigger": {
    id: "routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.external.$triggerParam_.runs.$runParam.trigger",
    parentId: "routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.external.$triggerParam_.runs.$runParam",
    path: "trigger",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports11
  },
  "routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.webhooks.$triggerParam_.runs.$runParam.trigger": {
    id: "routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.webhooks.$triggerParam_.runs.$runParam.trigger",
    parentId: "routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.webhooks.$triggerParam_.runs.$runParam",
    path: "trigger",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports12
  },
  "routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.external.$triggerParam_.runs.$runParam.stream": {
    id: "routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.external.$triggerParam_.runs.$runParam.stream",
    parentId: "routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.external.$triggerParam_.runs.$runParam",
    path: "stream",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports13
  },
  "routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.webhooks.$triggerParam_.runs.$runParam.stream": {
    id: "routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.webhooks.$triggerParam_.runs.$runParam.stream",
    parentId: "routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.webhooks.$triggerParam_.runs.$runParam",
    path: "stream",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports14
  },
  "routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.external.$triggerParam_.runs.$runParam": {
    id: "routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.external.$triggerParam_.runs.$runParam",
    parentId: "routes/_app.orgs.$organizationSlug.projects.$projectParam",
    path: "triggers/external/:triggerParam/runs/:runParam",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports15
  },
  "routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.webhooks.$triggerParam_.runs.$runParam": {
    id: "routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.webhooks.$triggerParam_.runs.$runParam",
    parentId: "routes/_app.orgs.$organizationSlug.projects.$projectParam",
    path: "triggers/webhooks/:triggerParam/runs/:runParam",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports16
  },
  "routes/_app.orgs.$organizationSlug.projects.$projectParam.jobs.$jobParam.runs.$runParam.tasks.$taskParam": {
    id: "routes/_app.orgs.$organizationSlug.projects.$projectParam.jobs.$jobParam.runs.$runParam.tasks.$taskParam",
    parentId: "routes/_app.orgs.$organizationSlug.projects.$projectParam.jobs.$jobParam.runs.$runParam",
    path: "tasks/:taskParam",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports17
  },
  "routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.webhooks.$triggerParam.delivery": {
    id: "routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.webhooks.$triggerParam.delivery",
    parentId: "routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.webhooks.$triggerParam",
    path: "delivery",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports18
  },
  "routes/_app.orgs.$organizationSlug.projects.$projectParam.jobs.$jobParam.runs.$runParam.completed": {
    id: "routes/_app.orgs.$organizationSlug.projects.$projectParam.jobs.$jobParam.runs.$runParam.completed",
    parentId: "routes/_app.orgs.$organizationSlug.projects.$projectParam.jobs.$jobParam.runs.$runParam",
    path: "completed",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports19
  },
  "routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.webhooks.$triggerParam._index": {
    id: "routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.webhooks.$triggerParam._index",
    parentId: "routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.webhooks.$triggerParam",
    path: void 0,
    index: !0,
    caseSensitive: void 0,
    module: route_exports20
  },
  "routes/resources.orgs.$organizationSlug.projects.v3.$projectParam.runs.$runParam.spans.$spanParam": {
    id: "routes/resources.orgs.$organizationSlug.projects.v3.$projectParam.runs.$runParam.spans.$spanParam",
    parentId: "root",
    path: "resources/orgs/:organizationSlug/projects/v3/:projectParam/runs/:runParam/spans/:spanParam",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports21
  },
  "routes/_app.orgs.$organizationSlug.projects.$projectParam.jobs.$jobParam.runs.$runParam.trigger": {
    id: "routes/_app.orgs.$organizationSlug.projects.$projectParam.jobs.$jobParam.runs.$runParam.trigger",
    parentId: "routes/_app.orgs.$organizationSlug.projects.$projectParam.jobs.$jobParam.runs.$runParam",
    path: "trigger",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports22
  },
  "routes/_app.orgs.$organizationSlug.projects.$projectParam.jobs.$jobParam.runs.$runParam.stream": {
    id: "routes/_app.orgs.$organizationSlug.projects.$projectParam.jobs.$jobParam.runs.$runParam.stream",
    parentId: "routes/_app.orgs.$organizationSlug.projects.$projectParam.jobs.$jobParam.runs.$runParam",
    path: "stream",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports23
  },
  "routes/resources.orgs.$organizationSlug.projects.$projectParam.schedules.new.natural-language": {
    id: "routes/resources.orgs.$organizationSlug.projects.$projectParam.schedules.new.natural-language",
    parentId: "routes/resources.orgs.$organizationSlug.projects.$projectParam.schedules.new",
    path: "natural-language",
    index: void 0,
    caseSensitive: void 0,
    module: resources_orgs_organizationSlug_projects_projectParam_schedules_new_natural_language_exports
  },
  "routes/_app.orgs.$organizationSlug.projects.$projectParam.http-endpoints.$httpEndpointParam": {
    id: "routes/_app.orgs.$organizationSlug.projects.$projectParam.http-endpoints.$httpEndpointParam",
    parentId: "routes/_app.orgs.$organizationSlug.projects.$projectParam.http-endpoints",
    path: ":httpEndpointParam",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports24
  },
  "routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.external.$triggerParam": {
    id: "routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.external.$triggerParam",
    parentId: "routes/_app.orgs.$organizationSlug.projects.$projectParam",
    path: "triggers/external/:triggerParam",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports25
  },
  "routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.webhooks.$triggerParam": {
    id: "routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers_.webhooks.$triggerParam",
    parentId: "routes/_app.orgs.$organizationSlug.projects.$projectParam",
    path: "triggers/webhooks/:triggerParam",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports26
  },
  "routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.schedules.edit.$scheduleParam": {
    id: "routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.schedules.edit.$scheduleParam",
    parentId: "routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.schedules",
    path: "edit/:scheduleParam",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports28
  },
  "routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.traces.$traceId.spans.$spanId": {
    id: "routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.traces.$traceId.spans.$spanId",
    parentId: "routes/_app.orgs.$organizationSlug.projects.v3.$projectParam",
    path: "traces/:traceId/spans/:spanId",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports29
  },
  "routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.deployments.$deploymentParam": {
    id: "routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.deployments.$deploymentParam",
    parentId: "routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.deployments",
    path: ":deploymentParam",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports30
  },
  "routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.alerts.new.connect-to-slack": {
    id: "routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.alerts.new.connect-to-slack",
    parentId: "routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.alerts.new",
    path: "connect-to-slack",
    index: void 0,
    caseSensitive: void 0,
    module: app_orgs_organizationSlug_projects_v3_projectParam_alerts_new_connect_to_slack_exports
  },
  "routes/_app.orgs.$organizationSlug.projects.$projectParam.jobs.$jobParam.runs.$runParam": {
    id: "routes/_app.orgs.$organizationSlug.projects.$projectParam.jobs.$jobParam.runs.$runParam",
    parentId: "routes/_app.orgs.$organizationSlug.projects.$projectParam.jobs.$jobParam",
    path: "runs/:runParam",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports31
  },
  "routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.environment-variables.new": {
    id: "routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.environment-variables.new",
    parentId: "routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.environment-variables",
    path: "new",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports32
  },
  "routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.schedules.$scheduleParam": {
    id: "routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.schedules.$scheduleParam",
    parentId: "routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.schedules",
    path: ":scheduleParam",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports33
  },
  "routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.environment-variables": {
    id: "routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.environment-variables",
    parentId: "routes/_app.orgs.$organizationSlug.projects.v3.$projectParam",
    path: "environment-variables",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports34
  },
  "routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.runs.$runParam.stream": {
    id: "routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.runs.$runParam.stream",
    parentId: "routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.runs.$runParam",
    path: "stream",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports35
  },
  "routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.test.tasks.$taskParam": {
    id: "routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.test.tasks.$taskParam",
    parentId: "routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.test",
    path: "tasks/:taskParam",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports36
  },
  "routes/_app.orgs.$organizationSlug.projects.$projectParam.jobs.$jobParam.settings": {
    id: "routes/_app.orgs.$organizationSlug.projects.$projectParam.jobs.$jobParam.settings",
    parentId: "routes/_app.orgs.$organizationSlug.projects.$projectParam.jobs.$jobParam",
    path: "settings",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports37
  },
  "routes/_app.orgs.$organizationSlug.projects.$projectParam.jobs.$jobParam.trigger": {
    id: "routes/_app.orgs.$organizationSlug.projects.$projectParam.jobs.$jobParam.trigger",
    parentId: "routes/_app.orgs.$organizationSlug.projects.$projectParam.jobs.$jobParam",
    path: "trigger",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports38
  },
  "routes/_app.orgs.$organizationSlug.projects.$projectParam.http-endpoints._index": {
    id: "routes/_app.orgs.$organizationSlug.projects.$projectParam.http-endpoints._index",
    parentId: "routes/_app.orgs.$organizationSlug.projects.$projectParam.http-endpoints",
    path: void 0,
    index: !0,
    caseSensitive: void 0,
    module: route_exports39
  },
  "routes/_app.orgs.$organizationSlug.projects.$projectParam.jobs.$jobParam._index": {
    id: "routes/_app.orgs.$organizationSlug.projects.$projectParam.jobs.$jobParam._index",
    parentId: "routes/_app.orgs.$organizationSlug.projects.$projectParam.jobs.$jobParam",
    path: void 0,
    index: !0,
    caseSensitive: void 0,
    module: route_exports40
  },
  "routes/api.v1.endpoints.$environmentId.$endpointSlug.index.$indexHookIdentifier": {
    id: "routes/api.v1.endpoints.$environmentId.$endpointSlug.index.$indexHookIdentifier",
    parentId: "routes/api.v1.endpoints",
    path: ":environmentId/:endpointSlug/index/:indexHookIdentifier",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports41
  },
  "routes/_app.orgs.$organizationSlug.projects.$projectParam.environments.stream": {
    id: "routes/_app.orgs.$organizationSlug.projects.$projectParam.environments.stream",
    parentId: "routes/_app.orgs.$organizationSlug.projects.$projectParam.environments",
    path: "stream",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports42
  },
  "routes/_app.orgs.$organizationSlug.projects.$projectParam.jobs.$jobParam.test": {
    id: "routes/_app.orgs.$organizationSlug.projects.$projectParam.jobs.$jobParam.test",
    parentId: "routes/_app.orgs.$organizationSlug.projects.$projectParam.jobs.$jobParam",
    path: "test",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports43
  },
  "routes/_app.orgs.$organizationSlug.projects.$projectParam.events.$eventParam": {
    id: "routes/_app.orgs.$organizationSlug.projects.$projectParam.events.$eventParam",
    parentId: "routes/_app.orgs.$organizationSlug.projects.$projectParam.events",
    path: ":eventParam",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports44
  },
  "routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers.scheduled": {
    id: "routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers.scheduled",
    parentId: "routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers",
    path: "scheduled",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports45
  },
  "routes/resources.orgs.$organizationSlug.projects.$projectParam.schedules.new": {
    id: "routes/resources.orgs.$organizationSlug.projects.$projectParam.schedules.new",
    parentId: "root",
    path: "resources/orgs/:organizationSlug/projects/:projectParam/schedules/new",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports27
  },
  "routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers.webhooks": {
    id: "routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers.webhooks",
    parentId: "routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers",
    path: "webhooks",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports46
  },
  "routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.runs.$runParam": {
    id: "routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.runs.$runParam",
    parentId: "routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.runs",
    path: ":runParam",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports47
  },
  "routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.schedules.new": {
    id: "routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.schedules.new",
    parentId: "routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.schedules",
    path: "new",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports48
  },
  "routes/_app.orgs.$organizationSlug.integrations_.$clientParam.connections": {
    id: "routes/_app.orgs.$organizationSlug.integrations_.$clientParam.connections",
    parentId: "routes/_app.orgs.$organizationSlug.integrations_.$clientParam",
    path: "connections",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports49
  },
  "routes/_app.orgs.$organizationSlug.projects.$projectParam.setup.sveltekit": {
    id: "routes/_app.orgs.$organizationSlug.projects.$projectParam.setup.sveltekit",
    parentId: "routes/_app.orgs.$organizationSlug.projects.$projectParam.setup",
    path: "sveltekit",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports51
  },
  "routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers._index": {
    id: "routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers._index",
    parentId: "routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers",
    path: void 0,
    index: !0,
    caseSensitive: void 0,
    module: route_exports52
  },
  "routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.tasks.stream": {
    id: "routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.tasks.stream",
    parentId: "routes/_app.orgs.$organizationSlug.projects.v3.$projectParam",
    path: "tasks/stream",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports53
  },
  "routes/_app.orgs.$organizationSlug.projects.$projectParam.http-endpoints": {
    id: "routes/_app.orgs.$organizationSlug.projects.$projectParam.http-endpoints",
    parentId: "routes/_app.orgs.$organizationSlug.projects.$projectParam",
    path: "http-endpoints",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports54
  },
  "routes/_app.orgs.$organizationSlug.projects.$projectParam.jobs.$jobParam": {
    id: "routes/_app.orgs.$organizationSlug.projects.$projectParam.jobs.$jobParam",
    parentId: "routes/_app.orgs.$organizationSlug.projects.$projectParam",
    path: "jobs/:jobParam",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports55
  },
  "routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.deployments": {
    id: "routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.deployments",
    parentId: "routes/_app.orgs.$organizationSlug.projects.v3.$projectParam",
    path: "deployments",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports56
  },
  "routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.runs._index": {
    id: "routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.runs._index",
    parentId: "routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.runs",
    path: void 0,
    index: !0,
    caseSensitive: void 0,
    module: route_exports57
  },
  "routes/_app.orgs.$organizationSlug.projects.$projectParam.events._index": {
    id: "routes/_app.orgs.$organizationSlug.projects.$projectParam.events._index",
    parentId: "routes/_app.orgs.$organizationSlug.projects.$projectParam.events",
    path: void 0,
    index: !0,
    caseSensitive: void 0,
    module: route_exports58
  },
  "routes/_app.orgs.$organizationSlug.projects.$projectParam.setup.express": {
    id: "routes/_app.orgs.$organizationSlug.projects.$projectParam.setup.express",
    parentId: "routes/_app.orgs.$organizationSlug.projects.$projectParam.setup",
    path: "express",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports59
  },
  "routes/_app.orgs.$organizationSlug.projects.$projectParam.setup.fastify": {
    id: "routes/_app.orgs.$organizationSlug.projects.$projectParam.setup.fastify",
    parentId: "routes/_app.orgs.$organizationSlug.projects.$projectParam.setup",
    path: "fastify",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports60
  },
  "routes/_app.orgs.$organizationSlug.projects.$projectParam.setup.redwood": {
    id: "routes/_app.orgs.$organizationSlug.projects.$projectParam.setup.redwood",
    parentId: "routes/_app.orgs.$organizationSlug.projects.$projectParam.setup",
    path: "redwood",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports61
  },
  "routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.alerts.new": {
    id: "routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.alerts.new",
    parentId: "routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.alerts",
    path: "new",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports62
  },
  "routes/resources.environments.$environmentParam.endpoint.$endpointParam": {
    id: "routes/resources.environments.$environmentParam.endpoint.$endpointParam",
    parentId: "routes/resources.environments.$environmentParam.endpoint",
    path: ":endpointParam",
    index: void 0,
    caseSensitive: void 0,
    module: resources_environments_environmentParam_endpoint_endpointParam_exports
  },
  "routes/_app.orgs.$organizationSlug.projects.$projectParam.environments": {
    id: "routes/_app.orgs.$organizationSlug.projects.$projectParam.environments",
    parentId: "routes/_app.orgs.$organizationSlug.projects.$projectParam",
    path: "environments",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports63
  },
  "routes/_app.orgs.$organizationSlug.projects.$projectParam.setup._index": {
    id: "routes/_app.orgs.$organizationSlug.projects.$projectParam.setup._index",
    parentId: "routes/_app.orgs.$organizationSlug.projects.$projectParam.setup",
    path: void 0,
    index: !0,
    caseSensitive: void 0,
    module: route_exports64
  },
  "routes/_app.orgs.$organizationSlug.projects.$projectParam.setup.nestjs": {
    id: "routes/_app.orgs.$organizationSlug.projects.$projectParam.setup.nestjs",
    parentId: "routes/_app.orgs.$organizationSlug.projects.$projectParam.setup",
    path: "nestjs",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports65
  },
  "routes/_app.orgs.$organizationSlug.projects.$projectParam.setup.nextjs": {
    id: "routes/_app.orgs.$organizationSlug.projects.$projectParam.setup.nextjs",
    parentId: "routes/_app.orgs.$organizationSlug.projects.$projectParam.setup",
    path: "nextjs",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports66
  },
  "routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.schedules": {
    id: "routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.schedules",
    parentId: "routes/_app.orgs.$organizationSlug.projects.v3.$projectParam",
    path: "schedules",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports67
  },
  "routes/_app.orgs.$organizationId.subscription.v3.free_connect_success": {
    id: "routes/_app.orgs.$organizationId.subscription.v3.free_connect_success",
    parentId: "routes/_app",
    path: "orgs/:organizationId/subscription/v3/free_connect_success",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports68
  },
  "routes/_app.orgs.$organizationSlug.projects.$projectParam.setup.astro": {
    id: "routes/_app.orgs.$organizationSlug.projects.$projectParam.setup.astro",
    parentId: "routes/_app.orgs.$organizationSlug.projects.$projectParam.setup",
    path: "astro",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports69
  },
  "routes/_app.orgs.$organizationSlug.projects.$projectParam.setup.remix": {
    id: "routes/_app.orgs.$organizationSlug.projects.$projectParam.setup.remix",
    parentId: "routes/_app.orgs.$organizationSlug.projects.$projectParam.setup",
    path: "remix",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports70
  },
  "routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.settings": {
    id: "routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.settings",
    parentId: "routes/_app.orgs.$organizationSlug.projects.v3.$projectParam",
    path: "settings",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports71
  },
  "routes/api.v1.integrations.$integrationSlug.connections.$connectionId": {
    id: "routes/api.v1.integrations.$integrationSlug.connections.$connectionId",
    parentId: "root",
    path: "api/v1/integrations/:integrationSlug/connections/:connectionId",
    index: void 0,
    caseSensitive: void 0,
    module: api_v1_integrations_integrationSlug_connections_connectionId_exports
  },
  "routes/resources.$projectId.deployments.$deploymentShortCode.rollback": {
    id: "routes/resources.$projectId.deployments.$deploymentShortCode.rollback",
    parentId: "root",
    path: "resources/:projectId/deployments/:deploymentShortCode/rollback",
    index: void 0,
    caseSensitive: void 0,
    module: resources_projectId_deployments_deploymentShortCode_rollback_exports
  },
  "routes/_app.orgs.$organizationId.subscription.v3.free_connect_failed": {
    id: "routes/_app.orgs.$organizationId.subscription.v3.free_connect_failed",
    parentId: "routes/_app",
    path: "orgs/:organizationId/subscription/v3/free_connect_failed",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports72
  },
  "routes/_app.orgs.$organizationSlug.integrations_.$clientParam._index": {
    id: "routes/_app.orgs.$organizationSlug.integrations_.$clientParam._index",
    parentId: "routes/_app.orgs.$organizationSlug.integrations_.$clientParam",
    path: void 0,
    index: !0,
    caseSensitive: void 0,
    module: route_exports73
  },
  "routes/_app.orgs.$organizationSlug.integrations_.$clientParam.scopes": {
    id: "routes/_app.orgs.$organizationSlug.integrations_.$clientParam.scopes",
    parentId: "routes/_app.orgs.$organizationSlug.integrations_.$clientParam",
    path: "scopes",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports74
  },
  "routes/_app.orgs.$organizationSlug.projects.$projectParam.setup.nuxt": {
    id: "routes/_app.orgs.$organizationSlug.projects.$projectParam.setup.nuxt",
    parentId: "routes/_app.orgs.$organizationSlug.projects.$projectParam.setup",
    path: "nuxt",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports75
  },
  "routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.apikeys": {
    id: "routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.apikeys",
    parentId: "routes/_app.orgs.$organizationSlug.projects.v3.$projectParam",
    path: "apikeys",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports76
  },
  "routes/api.v1.http-endpoints.$httpEndpointId.env.$envType.$shortcode": {
    id: "routes/api.v1.http-endpoints.$httpEndpointId.env.$envType.$shortcode",
    parentId: "root",
    path: "api/v1/http-endpoints/:httpEndpointId/env/:envType/:shortcode",
    index: void 0,
    caseSensitive: void 0,
    module: api_v1_http_endpoints_httpEndpointId_env_envType_shortcode_exports
  },
  "routes/_app.orgs.$organizationSlug.projects.v3.$projectParam._index": {
    id: "routes/_app.orgs.$organizationSlug.projects.v3.$projectParam._index",
    parentId: "routes/_app.orgs.$organizationSlug.projects.v3.$projectParam",
    path: void 0,
    index: !0,
    caseSensitive: void 0,
    module: route_exports77
  },
  "routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.alerts": {
    id: "routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.alerts",
    parentId: "routes/_app.orgs.$organizationSlug.projects.v3.$projectParam",
    path: "alerts",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports78
  },
  "routes/_app.orgs.$organizationSlug.projects.$projectParam.settings": {
    id: "routes/_app.orgs.$organizationSlug.projects.$projectParam.settings",
    parentId: "routes/_app.orgs.$organizationSlug.projects.$projectParam",
    path: "settings",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports79
  },
  "routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers": {
    id: "routes/_app.orgs.$organizationSlug.projects.$projectParam.triggers",
    parentId: "routes/_app.orgs.$organizationSlug.projects.$projectParam",
    path: "triggers",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports80
  },
  "routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.runs": {
    id: "routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.runs",
    parentId: "routes/_app.orgs.$organizationSlug.projects.v3.$projectParam",
    path: "runs",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports81
  },
  "routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.test": {
    id: "routes/_app.orgs.$organizationSlug.projects.v3.$projectParam.test",
    parentId: "routes/_app.orgs.$organizationSlug.projects.v3.$projectParam",
    path: "test",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports82
  },
  "routes/resources.connection.$organizationId.oauth2.$integrationId": {
    id: "routes/resources.connection.$organizationId.oauth2.$integrationId",
    parentId: "routes/resources.connection.$organizationId.oauth2",
    path: ":integrationId",
    index: void 0,
    caseSensitive: void 0,
    module: resources_connection_organizationId_oauth2_integrationId_exports
  },
  "routes/_app.orgs.$organizationSlug.projects.$projectParam._index": {
    id: "routes/_app.orgs.$organizationSlug.projects.$projectParam._index",
    parentId: "routes/_app.orgs.$organizationSlug.projects.$projectParam",
    path: void 0,
    index: !0,
    caseSensitive: void 0,
    module: route_exports83
  },
  "routes/_app.orgs.$organizationSlug.projects.$projectParam.events": {
    id: "routes/_app.orgs.$organizationSlug.projects.$projectParam.events",
    parentId: "routes/_app.orgs.$organizationSlug.projects.$projectParam",
    path: "events",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports84
  },
  "routes/_app.orgs.$organizationSlug.projects.$projectParam.setup": {
    id: "routes/_app.orgs.$organizationSlug.projects.$projectParam.setup",
    parentId: "routes/_app.orgs.$organizationSlug.projects.$projectParam",
    path: "setup",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports50
  },
  "routes/resources.environments.$environmentId.regenerate-api-key": {
    id: "routes/resources.environments.$environmentId.regenerate-api-key",
    parentId: "root",
    path: "resources/environments/:environmentId/regenerate-api-key",
    index: void 0,
    caseSensitive: void 0,
    module: resources_environments_environmentId_regenerate_api_key_exports
  },
  "routes/resources.environments.$environmentParam.endpoint.stream": {
    id: "routes/resources.environments.$environmentParam.endpoint.stream",
    parentId: "routes/resources.environments.$environmentParam.endpoint",
    path: "stream",
    index: void 0,
    caseSensitive: void 0,
    module: resources_environments_environmentParam_endpoint_stream_exports
  },
  "routes/_app.orgs.$organizationSlug.projects.$projectParam.runs": {
    id: "routes/_app.orgs.$organizationSlug.projects.$projectParam.runs",
    parentId: "routes/_app.orgs.$organizationSlug.projects.$projectParam",
    path: "runs",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports85
  },
  "routes/_app.orgs.$organizationSlug.integrations_.$clientParam": {
    id: "routes/_app.orgs.$organizationSlug.integrations_.$clientParam",
    parentId: "routes/_app.orgs.$organizationSlug",
    path: "integrations/:clientParam",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports86
  },
  "routes/_app.orgs.$organizationSlug.projects.v3.$projectParam": {
    id: "routes/_app.orgs.$organizationSlug.projects.v3.$projectParam",
    parentId: "routes/_app.orgs.$organizationSlug",
    path: "projects/v3/:projectParam",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports87
  },
  "routes/api.v1.$endpointSlug.schedules.$id.registrations.$key": {
    id: "routes/api.v1.$endpointSlug.schedules.$id.registrations.$key",
    parentId: "routes/api.v1.$endpointSlug.schedules.$id.registrations",
    path: ":key",
    index: void 0,
    caseSensitive: void 0,
    module: api_v1_endpointSlug_schedules_id_registrations_key_exports
  },
  "routes/api.v1.$endpointSlug.triggers.$id.registrations.$key": {
    id: "routes/api.v1.$endpointSlug.triggers.$id.registrations.$key",
    parentId: "routes/api.v1.$endpointSlug.triggers.$id.registrations",
    path: ":key",
    index: void 0,
    caseSensitive: void 0,
    module: api_v1_endpointSlug_triggers_id_registrations_key_exports
  },
  "routes/api.v2.$endpointSlug.triggers.$id.registrations.$key": {
    id: "routes/api.v2.$endpointSlug.triggers.$id.registrations.$key",
    parentId: "root",
    path: "api/v2/:endpointSlug/triggers/:id/registrations/:key",
    index: void 0,
    caseSensitive: void 0,
    module: api_v2_endpointSlug_triggers_id_registrations_key_exports
  },
  "routes/projects.v3.$projectRef.deployments.$deploymentParam": {
    id: "routes/projects.v3.$projectRef.deployments.$deploymentParam",
    parentId: "routes/projects.v3.$projectRef",
    path: "deployments/:deploymentParam",
    index: void 0,
    caseSensitive: void 0,
    module: projects_v3_projectRef_deployments_deploymentParam_exports
  },
  "routes/resources.$projectId.deployments.$deploymentId.logs": {
    id: "routes/resources.$projectId.deployments.$deploymentId.logs",
    parentId: "root",
    path: "resources/:projectId/deployments/:deploymentId/logs",
    index: void 0,
    caseSensitive: void 0,
    module: resources_projectId_deployments_deploymentId_logs_exports
  },
  "routes/_app.orgs.$organizationId.subscription.v3.canceled": {
    id: "routes/_app.orgs.$organizationId.subscription.v3.canceled",
    parentId: "routes/_app",
    path: "orgs/:organizationId/subscription/v3/canceled",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports88
  },
  "routes/_app.orgs.$organizationId.subscription.v3.complete": {
    id: "routes/_app.orgs.$organizationId.subscription.v3.complete",
    parentId: "routes/_app",
    path: "orgs/:organizationId/subscription/v3/complete",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports89
  },
  "routes/_app.orgs.$organizationSlug.projects.$projectParam": {
    id: "routes/_app.orgs.$organizationSlug.projects.$projectParam",
    parentId: "routes/_app.orgs.$organizationSlug",
    path: "projects/:projectParam",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports90
  },
  "routes/api.v1.accounts.$accountId.connections.$clientSlug": {
    id: "routes/api.v1.accounts.$accountId.connections.$clientSlug",
    parentId: "root",
    path: "api/v1/accounts/:accountId/connections/:clientSlug",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports91
  },
  "routes/resources.$organizationSlug.subscription.v3.portal": {
    id: "routes/resources.$organizationSlug.subscription.v3.portal",
    parentId: "root",
    path: "resources/:organizationSlug/subscription/v3/portal",
    index: void 0,
    caseSensitive: void 0,
    module: resources_organizationSlug_subscription_v3_portal_exports
  },
  "routes/resources.environments.$environmentParam.endpoint": {
    id: "routes/resources.environments.$environmentParam.endpoint",
    parentId: "root",
    path: "resources/environments/:environmentParam/endpoint",
    index: void 0,
    caseSensitive: void 0,
    module: resources_environments_environmentParam_endpoint_exports
  },
  "routes/_app.orgs.$organizationId.subscription.v3.failed": {
    id: "routes/_app.orgs.$organizationId.subscription.v3.failed",
    parentId: "routes/_app",
    path: "orgs/:organizationId/subscription/v3/failed",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports92
  },
  "routes/api.v1.$endpointSlug.schedules.$id.registrations": {
    id: "routes/api.v1.$endpointSlug.schedules.$id.registrations",
    parentId: "root",
    path: "api/v1/:endpointSlug/schedules/:id/registrations",
    index: void 0,
    caseSensitive: void 0,
    module: api_v1_endpointSlug_schedules_id_registrations_exports
  },
  "routes/api.v1.projects.$projectRef.envvars.$slug.import": {
    id: "routes/api.v1.projects.$projectRef.envvars.$slug.import",
    parentId: "routes/api.v1.projects.$projectRef.envvars.$slug",
    path: "import",
    index: void 0,
    caseSensitive: void 0,
    module: api_v1_projects_projectRef_envvars_slug_import_exports
  },
  "routes/_app.orgs.$organizationId.subscription.canceled": {
    id: "routes/_app.orgs.$organizationId.subscription.canceled",
    parentId: "routes/_app",
    path: "orgs/:organizationId/subscription/canceled",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports93
  },
  "routes/_app.orgs.$organizationId.subscription.complete": {
    id: "routes/_app.orgs.$organizationId.subscription.complete",
    parentId: "routes/_app",
    path: "orgs/:organizationId/subscription/complete",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports94
  },
  "routes/api.v1.$endpointSlug.triggers.$id.registrations": {
    id: "routes/api.v1.$endpointSlug.triggers.$id.registrations",
    parentId: "root",
    path: "api/v1/:endpointSlug/triggers/:id/registrations",
    index: void 0,
    caseSensitive: void 0,
    module: api_v1_endpointSlug_triggers_id_registrations_exports
  },
  "routes/api.v1.deployments.$deploymentId.start-indexing": {
    id: "routes/api.v1.deployments.$deploymentId.start-indexing",
    parentId: "routes/api.v1.deployments.$deploymentId",
    path: "start-indexing",
    index: void 0,
    caseSensitive: void 0,
    module: api_v1_deployments_deploymentId_start_indexing_exports
  },
  "routes/api.v1.projects.$projectRef.envvars.$slug.$name": {
    id: "routes/api.v1.projects.$projectRef.envvars.$slug.$name",
    parentId: "routes/api.v1.projects.$projectRef.envvars.$slug",
    path: ":name",
    index: void 0,
    caseSensitive: void 0,
    module: api_v1_projects_projectRef_envvars_slug_name_exports
  },
  "routes/resources.$organizationSlug.subscription.portal": {
    id: "routes/resources.$organizationSlug.subscription.portal",
    parentId: "root",
    path: "resources/:organizationSlug/subscription/portal",
    index: void 0,
    caseSensitive: void 0,
    module: resources_organizationSlug_subscription_portal_exports
  },
  "routes/api.v1.projects.$projectRef.background-workers": {
    id: "routes/api.v1.projects.$projectRef.background-workers",
    parentId: "routes/api.v1.projects.$projectRef",
    path: "background-workers",
    index: void 0,
    caseSensitive: void 0,
    module: api_v1_projects_projectRef_background_workers_exports
  },
  "routes/_app.orgs.$organizationId.subscription.failed": {
    id: "routes/_app.orgs.$organizationId.subscription.failed",
    parentId: "routes/_app",
    path: "orgs/:organizationId/subscription/failed",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports95
  },
  "routes/account.authorization-code.$authorizationCode": {
    id: "routes/account.authorization-code.$authorizationCode",
    parentId: "routes/account",
    path: "authorization-code/:authorizationCode",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports96
  },
  "routes/admin.api.v1.orgs.$organizationId.concurrency": {
    id: "routes/admin.api.v1.orgs.$organizationId.concurrency",
    parentId: "routes/admin",
    path: "api/v1/orgs/:organizationId/concurrency",
    index: void 0,
    caseSensitive: void 0,
    module: admin_api_v1_orgs_organizationId_concurrency_exports
  },
  "routes/api.v1.runs.$runId.tasks.$id.callback.$secret": {
    id: "routes/api.v1.runs.$runId.tasks.$id.callback.$secret",
    parentId: "routes/api.v1.runs.$runId.tasks",
    path: ":id/callback/:secret",
    index: void 0,
    caseSensitive: void 0,
    module: api_v1_runs_runId_tasks_id_callback_secret_exports
  },
  "routes/projects.v3.$projectRef.environment-variables": {
    id: "routes/projects.v3.$projectRef.environment-variables",
    parentId: "routes/projects.v3.$projectRef",
    path: "environment-variables",
    index: void 0,
    caseSensitive: void 0,
    module: projects_v3_projectRef_environment_variables_exports
  },
  "routes/resources.orgs.$organizationSlug.select-plan": {
    id: "routes/resources.orgs.$organizationSlug.select-plan",
    parentId: "root",
    path: "resources/orgs/:organizationSlug/select-plan",
    index: void 0,
    caseSensitive: void 0,
    module: resources_orgs_organizationSlug_select_plan_exports
  },
  "routes/resources.connection.$organizationId.oauth2": {
    id: "routes/resources.connection.$organizationId.oauth2",
    parentId: "root",
    path: "resources/connection/:organizationId/oauth2",
    index: void 0,
    caseSensitive: void 0,
    module: resources_connection_organizationId_oauth2_exports
  },
  "routes/_app.orgs.$organizationSlug.billing._index": {
    id: "routes/_app.orgs.$organizationSlug.billing._index",
    parentId: "routes/_app.orgs.$organizationSlug.billing",
    path: void 0,
    index: !0,
    caseSensitive: void 0,
    module: route_exports98
  },
  "routes/_app.orgs.$organizationSlug.billing.plans": {
    id: "routes/_app.orgs.$organizationSlug.billing.plans",
    parentId: "routes/_app.orgs.$organizationSlug.billing",
    path: "plans",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports99
  },
  "routes/_app.orgs.$organizationSlug_.projects.new": {
    id: "routes/_app.orgs.$organizationSlug_.projects.new",
    parentId: "routes/_app",
    path: "orgs/:organizationSlug/projects/new",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports100
  },
  "routes/api.v1.projects.$projectRef.alertChannels": {
    id: "routes/api.v1.projects.$projectRef.alertChannels",
    parentId: "routes/api.v1.projects.$projectRef",
    path: "alertChannels",
    index: void 0,
    caseSensitive: void 0,
    module: api_v1_projects_projectRef_alertChannels_exports
  },
  "routes/api.v1.projects.$projectRef.envvars.$slug": {
    id: "routes/api.v1.projects.$projectRef.envvars.$slug",
    parentId: "routes/api.v1.projects.$projectRef.envvars",
    path: ":slug",
    index: void 0,
    caseSensitive: void 0,
    module: api_v1_projects_projectRef_envvars_slug_exports
  },
  "routes/resources.projects.$projectId.jobs.stream": {
    id: "routes/resources.projects.$projectId.jobs.stream",
    parentId: "root",
    path: "resources/projects/:projectId/jobs/stream",
    index: void 0,
    caseSensitive: void 0,
    module: resources_projects_projectId_jobs_stream_exports
  },
  "routes/_app.orgs.$organizationSlug.integrations": {
    id: "routes/_app.orgs.$organizationSlug.integrations",
    parentId: "routes/_app.orgs.$organizationSlug",
    path: "integrations",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports101
  },
  "routes/_app.orgs.$organizationSlug_.select-plan": {
    id: "routes/_app.orgs.$organizationSlug_.select-plan",
    parentId: "routes/_app",
    path: "orgs/:organizationSlug/select-plan",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports102
  },
  "routes/admin.api.v1.environments.$environmentId": {
    id: "routes/admin.api.v1.environments.$environmentId",
    parentId: "routes/admin",
    path: "api/v1/environments/:environmentId",
    index: void 0,
    caseSensitive: void 0,
    module: admin_api_v1_environments_environmentId_exports
  },
  "routes/_app.orgs.$organizationSlug_.subscribed": {
    id: "routes/_app.orgs.$organizationSlug_.subscribed",
    parentId: "routes/_app",
    path: "orgs/:organizationSlug/subscribed",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports103
  },
  "routes/api.v1.schedules.$scheduleId.deactivate": {
    id: "routes/api.v1.schedules.$scheduleId.deactivate",
    parentId: "routes/api.v1.schedules.$scheduleId",
    path: "deactivate",
    index: void 0,
    caseSensitive: void 0,
    module: api_v1_schedules_scheduleId_deactivate_exports
  },
  "routes/_app.orgs.$organizationSlug.v3.billing": {
    id: "routes/_app.orgs.$organizationSlug.v3.billing",
    parentId: "routes/_app.orgs.$organizationSlug",
    path: "v3/billing",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports104
  },
  "routes/projects.v3.$projectRef.runs.$runParam": {
    id: "routes/projects.v3.$projectRef.runs.$runParam",
    parentId: "routes/projects.v3.$projectRef.runs",
    path: ":runParam",
    index: void 0,
    caseSensitive: void 0,
    module: projects_v3_projectRef_runs_runParam_exports
  },
  "routes/resources.projects.$projectId.endpoint": {
    id: "routes/resources.projects.$projectId.endpoint",
    parentId: "root",
    path: "resources/projects/:projectId/endpoint",
    index: void 0,
    caseSensitive: void 0,
    module: resources_projects_projectId_endpoint_exports
  },
  "routes/resources.runs.$runParam.logs.download": {
    id: "routes/resources.runs.$runParam.logs.download",
    parentId: "root",
    path: "resources/runs/:runParam/logs/download",
    index: void 0,
    caseSensitive: void 0,
    module: resources_runs_runParam_logs_download_exports
  },
  "routes/api.v1.runs.$runId.tasks.$id.complete": {
    id: "routes/api.v1.runs.$runId.tasks.$id.complete",
    parentId: "routes/api.v1.runs.$runId.tasks",
    path: ":id/complete",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports105
  },
  "routes/api.v1.schedules.$scheduleId.activate": {
    id: "routes/api.v1.schedules.$scheduleId.activate",
    parentId: "routes/api.v1.schedules.$scheduleId",
    path: "activate",
    index: void 0,
    caseSensitive: void 0,
    module: api_v1_schedules_scheduleId_activate_exports
  },
  "routes/internal.webhooks.slack.interactivity": {
    id: "routes/internal.webhooks.slack.interactivity",
    parentId: "root",
    path: "internal/webhooks/slack/interactivity",
    index: void 0,
    caseSensitive: void 0,
    module: internal_webhooks_slack_interactivity_exports
  },
  "routes/resources.$organizationSlug.subscribe": {
    id: "routes/resources.$organizationSlug.subscribe",
    parentId: "root",
    path: "resources/:organizationSlug/subscribe",
    index: void 0,
    caseSensitive: void 0,
    module: resources_organizationSlug_subscribe_exports
  },
  "routes/_app.orgs.$organizationSlug.settings": {
    id: "routes/_app.orgs.$organizationSlug.settings",
    parentId: "routes/_app.orgs.$organizationSlug",
    path: "settings",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports106
  },
  "routes/_app.orgs.$organizationSlug.v3.usage": {
    id: "routes/_app.orgs.$organizationSlug.v3.usage",
    parentId: "routes/_app.orgs.$organizationSlug",
    path: "v3/usage",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports107
  },
  "routes/api.v1.endpoints.$endpointSlug.index": {
    id: "routes/api.v1.endpoints.$endpointSlug.index",
    parentId: "routes/api.v1.endpoints",
    path: ":endpointSlug/index",
    index: void 0,
    caseSensitive: void 0,
    module: api_v1_endpoints_endpointSlug_index_exports
  },
  "routes/_app.orgs.$organizationSlug.billing": {
    id: "routes/_app.orgs.$organizationSlug.billing",
    parentId: "routes/_app.orgs.$organizationSlug",
    path: "billing",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports108
  },
  "routes/api.v1.projects.$projectRef.envvars": {
    id: "routes/api.v1.projects.$projectRef.envvars",
    parentId: "routes/api.v1.projects.$projectRef",
    path: "envvars",
    index: void 0,
    caseSensitive: void 0,
    module: api_v1_projects_projectRef_envvars_exports
  },
  "routes/resources.taskruns.$runParam.cancel": {
    id: "routes/resources.taskruns.$runParam.cancel",
    parentId: "root",
    path: "resources/taskruns/:runParam/cancel",
    index: void 0,
    caseSensitive: void 0,
    module: resources_taskruns_runParam_cancel_exports
  },
  "routes/resources.taskruns.$runParam.replay": {
    id: "routes/resources.taskruns.$runParam.replay",
    parentId: "root",
    path: "resources/taskruns/:runParam/replay",
    index: void 0,
    caseSensitive: void 0,
    module: resources_taskruns_runParam_replay_exports
  },
  "routes/_app.orgs.$organizationSlug._index": {
    id: "routes/_app.orgs.$organizationSlug._index",
    parentId: "routes/_app.orgs.$organizationSlug",
    path: void 0,
    index: !0,
    caseSensitive: void 0,
    module: route_exports109
  },
  "routes/_app.orgs.$organizationSlug.invite": {
    id: "routes/_app.orgs.$organizationSlug.invite",
    parentId: "routes/_app.orgs.$organizationSlug",
    path: "invite",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports110
  },
  "routes/api.v1.batches.$batchParam.results": {
    id: "routes/api.v1.batches.$batchParam.results",
    parentId: "root",
    path: "api/v1/batches/:batchParam/results",
    index: void 0,
    caseSensitive: void 0,
    module: api_v1_batches_batchParam_results_exports
  },
  "routes/api.v1.event-dispatchers.ephemeral": {
    id: "routes/api.v1.event-dispatchers.ephemeral",
    parentId: "root",
    path: "api/v1/event-dispatchers/ephemeral",
    index: void 0,
    caseSensitive: void 0,
    module: api_v1_event_dispatchers_ephemeral_exports
  },
  "routes/api.v1.events.$eventId.cancel-runs": {
    id: "routes/api.v1.events.$eventId.cancel-runs",
    parentId: "routes/api.v1.events.$eventId",
    path: "cancel-runs",
    index: void 0,
    caseSensitive: void 0,
    module: api_v1_events_eventId_cancel_runs_exports
  },
  "routes/integrations.$serviceName.callback": {
    id: "routes/integrations.$serviceName.callback",
    parentId: "root",
    path: "integrations/:serviceName/callback",
    index: void 0,
    caseSensitive: void 0,
    module: integrations_serviceName_callback_exports
  },
  "routes/resources.packets.$environmentId.$": {
    id: "routes/resources.packets.$environmentId.$",
    parentId: "root",
    path: "resources/packets/:environmentId/*",
    index: void 0,
    caseSensitive: void 0,
    module: resources_packets_environmentId_exports
  },
  "routes/api.v1.runs.$runId.tasks.$id.fail": {
    id: "routes/api.v1.runs.$runId.tasks.$id.fail",
    parentId: "routes/api.v1.runs.$runId.tasks",
    path: ":id/fail",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports111
  },
  "routes/api.v1.tasks.$id.callback.$secret": {
    id: "routes/api.v1.tasks.$id.callback.$secret",
    parentId: "root",
    path: "api/v1/tasks/:id/callback/:secret",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports97
  },
  "routes/_app.orgs.$organizationSlug.team": {
    id: "routes/_app.orgs.$organizationSlug.team",
    parentId: "routes/_app.orgs.$organizationSlug",
    path: "team",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports112
  },
  "routes/api.v1.$endpointSlug.sources.$id": {
    id: "routes/api.v1.$endpointSlug.sources.$id",
    parentId: "root",
    path: "api/v1/:endpointSlug/sources/:id",
    index: void 0,
    caseSensitive: void 0,
    module: api_v1_endpointSlug_sources_id_exports
  },
  "routes/api.v1.deployments.$deploymentId": {
    id: "routes/api.v1.deployments.$deploymentId",
    parentId: "routes/api.v1.deployments",
    path: ":deploymentId",
    index: void 0,
    caseSensitive: void 0,
    module: api_v1_deployments_deploymentId_exports
  },
  "routes/api.v1.jobs.$jobSlug.cancel-runs": {
    id: "routes/api.v1.jobs.$jobSlug.cancel-runs",
    parentId: "root",
    path: "api/v1/jobs/:jobSlug/cancel-runs",
    index: void 0,
    caseSensitive: void 0,
    module: api_v1_jobs_jobSlug_cancel_runs_exports
  },
  "routes/api.v1.projects.$projectRef.$env": {
    id: "routes/api.v1.projects.$projectRef.$env",
    parentId: "routes/api.v1.projects.$projectRef",
    path: ":env",
    index: void 0,
    caseSensitive: void 0,
    module: api_v1_projects_projectRef_env_exports
  },
  "routes/api.v1.projects.$projectRef.runs": {
    id: "routes/api.v1.projects.$projectRef.runs",
    parentId: "routes/api.v1.projects.$projectRef",
    path: "runs",
    index: void 0,
    caseSensitive: void 0,
    module: api_v1_projects_projectRef_runs_exports
  },
  "routes/api.v1.runs.$runParam.reschedule": {
    id: "routes/api.v1.runs.$runParam.reschedule",
    parentId: "routes/api.v1.runs",
    path: ":runParam/reschedule",
    index: void 0,
    caseSensitive: void 0,
    module: api_v1_runs_runParam_reschedule_exports
  },
  "routes/api.v2.$endpointSlug.sources.$id": {
    id: "routes/api.v2.$endpointSlug.sources.$id",
    parentId: "root",
    path: "api/v2/:endpointSlug/sources/:id",
    index: void 0,
    caseSensitive: void 0,
    module: api_v2_endpointSlug_sources_id_exports
  },
  "routes/api.v1.runs.$runId.statuses.$id": {
    id: "routes/api.v1.runs.$runId.statuses.$id",
    parentId: "routes/api.v1.runs.$runId.statuses",
    path: ":id",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports113
  },
  "routes/projects.v3.$projectRef.metrics": {
    id: "routes/projects.v3.$projectRef.metrics",
    parentId: "routes/projects.v3.$projectRef",
    path: "metrics",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports114
  },
  "routes/api.v1.runs.$runParam.attempts": {
    id: "routes/api.v1.runs.$runParam.attempts",
    parentId: "routes/api.v1.runs",
    path: ":runParam/attempts",
    index: void 0,
    caseSensitive: void 0,
    module: api_v1_runs_runParam_attempts_exports
  },
  "routes/resources.taskruns.bulk.cancel": {
    id: "routes/resources.taskruns.bulk.cancel",
    parentId: "root",
    path: "resources/taskruns/bulk/cancel",
    index: void 0,
    caseSensitive: void 0,
    module: resources_taskruns_bulk_cancel_exports
  },
  "routes/resources.taskruns.bulk.replay": {
    id: "routes/resources.taskruns.bulk.replay",
    parentId: "root",
    path: "resources/taskruns/bulk/replay",
    index: void 0,
    caseSensitive: void 0,
    module: resources_taskruns_bulk_replay_exports
  },
  "routes/api.v1.$endpointSlug.auth.$id": {
    id: "routes/api.v1.$endpointSlug.auth.$id",
    parentId: "root",
    path: "api/v1/:endpointSlug/auth/:id",
    index: void 0,
    caseSensitive: void 0,
    module: api_v1_endpointSlug_auth_id_exports
  },
  "routes/api.v1.endpointindex.$indexId": {
    id: "routes/api.v1.endpointindex.$indexId",
    parentId: "root",
    path: "api/v1/endpointindex/:indexId",
    index: void 0,
    caseSensitive: void 0,
    module: api_v1_endpointindex_indexId_exports
  },
  "routes/api.v1.events.$eventId.cancel": {
    id: "routes/api.v1.events.$eventId.cancel",
    parentId: "routes/api.v1.events.$eventId",
    path: "cancel",
    index: void 0,
    caseSensitive: void 0,
    module: api_v1_events_eventId_cancel_exports
  },
  "routes/resources.apivote.$identifier": {
    id: "routes/resources.apivote.$identifier",
    parentId: "root",
    path: "resources/apivote/:identifier",
    index: void 0,
    caseSensitive: void 0,
    module: resources_apivote_identifier_exports
  },
  "routes/storybook.loading-bar-divider": {
    id: "routes/storybook.loading-bar-divider",
    parentId: "routes/storybook",
    path: "loading-bar-divider",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports115
  },
  "routes/api.internal.stripe_webhooks": {
    id: "routes/api.internal.stripe_webhooks",
    parentId: "root",
    path: "api/internal/stripe_webhooks",
    index: void 0,
    caseSensitive: void 0,
    module: api_internal_stripe_webhooks_exports
  },
  "routes/api.v1.runs.$runParam.replay": {
    id: "routes/api.v1.runs.$runParam.replay",
    parentId: "routes/api.v1.runs",
    path: ":runParam/replay",
    index: void 0,
    caseSensitive: void 0,
    module: api_v1_runs_runParam_replay_exports
  },
  "routes/api.v1.runs.$runParam.result": {
    id: "routes/api.v1.runs.$runParam.result",
    parentId: "routes/api.v1.runs",
    path: ":runParam/result",
    index: void 0,
    caseSensitive: void 0,
    module: api_v1_runs_runParam_result_exports
  },
  "routes/api.v1.schedules.$scheduleId": {
    id: "routes/api.v1.schedules.$scheduleId",
    parentId: "routes/api.v1.schedules",
    path: ":scheduleId",
    index: void 0,
    caseSensitive: void 0,
    module: api_v1_schedules_scheduleId_exports
  },
  "routes/api.v1.tasks.$taskId.trigger": {
    id: "routes/api.v1.tasks.$taskId.trigger",
    parentId: "root",
    path: "api/v1/tasks/:taskId/trigger",
    index: void 0,
    caseSensitive: void 0,
    module: api_v1_tasks_taskId_trigger_exports
  },
  "routes/api.v2.runs.$runParam.cancel": {
    id: "routes/api.v2.runs.$runParam.cancel",
    parentId: "root",
    path: "api/v2/runs/:runParam/cancel",
    index: void 0,
    caseSensitive: void 0,
    module: api_v2_runs_runParam_cancel_exports
  },
  "routes/projects.v3.$projectRef.runs": {
    id: "routes/projects.v3.$projectRef.runs",
    parentId: "routes/projects.v3.$projectRef",
    path: "runs",
    index: void 0,
    caseSensitive: void 0,
    module: projects_v3_projectRef_runs_exports
  },
  "routes/projects.v3.$projectRef.test": {
    id: "routes/projects.v3.$projectRef.test",
    parentId: "routes/projects.v3.$projectRef",
    path: "test",
    index: void 0,
    caseSensitive: void 0,
    module: projects_v3_projectRef_test_exports
  },
  "routes/resources.runs.$runId.cancel": {
    id: "routes/resources.runs.$runId.cancel",
    parentId: "root",
    path: "resources/runs/:runId/cancel",
    index: void 0,
    caseSensitive: void 0,
    module: resources_runs_runId_cancel_exports
  },
  "routes/_app.orgs.$organizationSlug": {
    id: "routes/_app.orgs.$organizationSlug",
    parentId: "routes/_app",
    path: "orgs/:organizationSlug",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports
  },
  "routes/api.v1.jobs.$jobSlug.invoke": {
    id: "routes/api.v1.jobs.$jobSlug.invoke",
    parentId: "root",
    path: "api/v1/jobs/:jobSlug/invoke",
    index: void 0,
    caseSensitive: void 0,
    module: api_v1_jobs_jobSlug_invoke_exports
  },
  "routes/api.v1.projects.$projectRef": {
    id: "routes/api.v1.projects.$projectRef",
    parentId: "routes/api.v1.projects",
    path: ":projectRef",
    index: void 0,
    caseSensitive: void 0,
    module: api_v1_projects_projectRef_exports
  },
  "routes/api.v1.runs.$runId.statuses": {
    id: "routes/api.v1.runs.$runId.statuses",
    parentId: "routes/api.v1.runs.$runId",
    path: "statuses",
    index: void 0,
    caseSensitive: void 0,
    module: api_v1_runs_runId_statuses_exports
  },
  "routes/api.v2.runs.$runId.statuses": {
    id: "routes/api.v2.runs.$runId.statuses",
    parentId: "routes/api.v2.runs.$runId",
    path: "statuses",
    index: void 0,
    caseSensitive: void 0,
    module: api_v2_runs_runId_statuses_exports
  },
  "routes/resources.runs.$runId.rerun": {
    id: "routes/resources.runs.$runId.rerun",
    parentId: "root",
    path: "resources/runs/:runId/rerun",
    index: void 0,
    caseSensitive: void 0,
    module: resources_runs_runId_rerun_exports
  },
  "routes/storybook.environment-label": {
    id: "routes/storybook.environment-label",
    parentId: "routes/storybook",
    path: "environment-label",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports116
  },
  "routes/storybook.segmented-control": {
    id: "routes/storybook.segmented-control",
    parentId: "routes/storybook",
    path: "segmented-control",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports117
  },
  "routes/api.v1.tasks.$taskId.batch": {
    id: "routes/api.v1.tasks.$taskId.batch",
    parentId: "root",
    path: "api/v1/tasks/:taskId/batch",
    index: void 0,
    caseSensitive: void 0,
    module: api_v1_tasks_taskId_batch_exports
  },
  "routes/unsubscribe.$userId.$token": {
    id: "routes/unsubscribe.$userId.$token",
    parentId: "root",
    path: "unsubscribe/:userId/:token",
    index: void 0,
    caseSensitive: void 0,
    module: unsubscribe_userId_token_exports
  },
  "routes/api.v1.authorization-code": {
    id: "routes/api.v1.authorization-code",
    parentId: "root",
    path: "api/v1/authorization-code",
    index: void 0,
    caseSensitive: void 0,
    module: api_v1_authorization_code_exports
  },
  "routes/api.v1.jobs.$jobSlug.runs": {
    id: "routes/api.v1.jobs.$jobSlug.runs",
    parentId: "root",
    path: "api/v1/jobs/:jobSlug/runs",
    index: void 0,
    caseSensitive: void 0,
    module: api_v1_jobs_jobSlug_runs_exports
  },
  "routes/api.v1.runs.$runId.cancel": {
    id: "routes/api.v1.runs.$runId.cancel",
    parentId: "routes/api.v1.runs.$runId",
    path: "cancel",
    index: void 0,
    caseSensitive: void 0,
    module: api_v1_runs_runId_cancel_exports
  },
  "routes/storybook.clipboard-field": {
    id: "routes/storybook.clipboard-field",
    parentId: "routes/storybook",
    path: "clipboard-field",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports118
  },
  "routes/storybook.free-plan-usage": {
    id: "routes/storybook.free-plan-usage",
    parentId: "routes/storybook",
    path: "free-plan-usage",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports119
  },
  "routes/storybook.pricing-callout": {
    id: "routes/storybook.pricing-callout",
    parentId: "routes/storybook",
    path: "pricing-callout",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports120
  },
  "routes/storybook.tabs.$tabNumber": {
    id: "routes/storybook.tabs.$tabNumber",
    parentId: "routes/storybook.tabs",
    path: ":tabNumber",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports121
  },
  "routes/api.v1.runs.$runId.tasks": {
    id: "routes/api.v1.runs.$runId.tasks",
    parentId: "routes/api.v1.runs.$runId",
    path: "tasks",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports122
  },
  "routes/api.v1.runs.$runId.logs": {
    id: "routes/api.v1.runs.$runId.logs",
    parentId: "routes/api.v1.runs.$runId",
    path: "logs",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports123
  },
  "routes/api.v1.sources.http.$id": {
    id: "routes/api.v1.sources.http.$id",
    parentId: "root",
    path: "api/v1/sources/http/:id",
    index: void 0,
    caseSensitive: void 0,
    module: api_v1_sources_http_id_exports
  },
  "routes/projects.v3.$projectRef": {
    id: "routes/projects.v3.$projectRef",
    parentId: "root",
    path: "projects/v3/:projectRef",
    index: void 0,
    caseSensitive: void 0,
    module: projects_v3_projectRef_exports
  },
  "routes/resources.impersonation": {
    id: "routes/resources.impersonation",
    parentId: "root",
    path: "resources/impersonation",
    index: void 0,
    caseSensitive: void 0,
    module: resources_impersonation_exports
  },
  "routes/storybook.search-fields": {
    id: "routes/storybook.search-fields",
    parentId: "routes/storybook",
    path: "search-fields",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports124
  },
  "routes/api.v1.events.$eventId": {
    id: "routes/api.v1.events.$eventId",
    parentId: "routes/api.v1.events",
    path: ":eventId",
    index: void 0,
    caseSensitive: void 0,
    module: api_v1_events_eventId_exports
  },
  "routes/api.v2.events.$eventId": {
    id: "routes/api.v2.events.$eventId",
    parentId: "root",
    path: "api/v2/events/:eventId",
    index: void 0,
    caseSensitive: void 0,
    module: api_v2_events_eventId_exports
  },
  "routes/storybook.input-fields": {
    id: "routes/storybook.input-fields",
    parentId: "routes/storybook",
    path: "input-fields",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports125
  },
  "routes/admin.api.v1.simulate": {
    id: "routes/admin.api.v1.simulate",
    parentId: "routes/admin",
    path: "api/v1/simulate",
    index: void 0,
    caseSensitive: void 0,
    module: admin_api_v1_simulate_exports
  },
  "routes/admin.api.v1.snapshot": {
    id: "routes/admin.api.v1.snapshot",
    parentId: "routes/admin",
    path: "api/v1/snapshot",
    index: void 0,
    caseSensitive: void 0,
    module: admin_api_v1_snapshot_exports
  },
  "routes/confirm-basic-details": {
    id: "routes/confirm-basic-details",
    parentId: "root",
    path: "confirm-basic-details",
    index: void 0,
    caseSensitive: void 0,
    module: confirm_basic_details_exports
  },
  "routes/resources.codeexample": {
    id: "routes/resources.codeexample",
    parentId: "root",
    path: "resources/codeexample",
    index: void 0,
    caseSensitive: void 0,
    module: resources_codeexample_exports
  },
  "routes/resources.jobs.$jobId": {
    id: "routes/resources.jobs.$jobId",
    parentId: "root",
    path: "resources/jobs/:jobId",
    index: void 0,
    caseSensitive: void 0,
    module: resources_jobs_jobId_exports
  },
  "routes/storybook.date-fields": {
    id: "routes/storybook.date-fields",
    parentId: "routes/storybook",
    path: "date-fields",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports126
  },
  "routes/storybook.detail-cell": {
    id: "routes/storybook.detail-cell",
    parentId: "routes/storybook",
    path: "detail-cell",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports127
  },
  "routes/storybook.inline-code": {
    id: "routes/storybook.inline-code",
    parentId: "routes/storybook",
    path: "inline-code",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports128
  },
  "routes/storybook.page-header": {
    id: "routes/storybook.page-header",
    parentId: "routes/storybook",
    path: "page-header",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports129
  },
  "routes/storybook.radio-group": {
    id: "routes/storybook.radio-group",
    parentId: "routes/storybook",
    path: "radio-group",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports130
  },
  "routes/storybook.simple-form": {
    id: "routes/storybook.simple-form",
    parentId: "routes/storybook",
    path: "simple-form",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports131
  },
  "routes/api.v1.webhooks.$key": {
    id: "routes/api.v1.webhooks.$key",
    parentId: "root",
    path: "api/v1/webhooks/:key",
    index: void 0,
    caseSensitive: void 0,
    module: api_v1_webhooks_key_exports
  },
  "routes/auth.github.callback": {
    id: "routes/auth.github.callback",
    parentId: "routes/auth.github",
    path: "callback",
    index: void 0,
    caseSensitive: void 0,
    module: auth_github_callback_exports
  },
  "routes/storybook.checkboxes": {
    id: "routes/storybook.checkboxes",
    parentId: "routes/storybook",
    path: "checkboxes",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports132
  },
  "routes/storybook.code-block": {
    id: "routes/storybook.code-block",
    parentId: "routes/storybook",
    path: "code-block",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports133
  },
  "routes/storybook.named-icon": {
    id: "routes/storybook.named-icon",
    parentId: "routes/storybook",
    path: "named-icon",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports134
  },
  "routes/storybook.typography": {
    id: "routes/storybook.typography",
    parentId: "routes/storybook",
    path: "typography",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports135
  },
  "routes/api.v1.usage.ingest": {
    id: "routes/api.v1.usage.ingest",
    parentId: "root",
    path: "api/v1/usage/ingest",
    index: void 0,
    caseSensitive: void 0,
    module: api_v1_usage_ingest_exports
  },
  "routes/storybook.shortcuts": {
    id: "routes/storybook.shortcuts",
    parentId: "routes/storybook",
    path: "shortcuts",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports136
  },
  "routes/storybook.tree-view": {
    id: "routes/storybook.tree-view",
    parentId: "routes/storybook",
    path: "tree-view",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports137
  },
  "routes/admin.api.v1.marqs": {
    id: "routes/admin.api.v1.marqs",
    parentId: "routes/admin",
    path: "api/v1/marqs",
    index: void 0,
    caseSensitive: void 0,
    module: admin_api_v1_marqs_exports
  },
  "routes/api.v1.deployments": {
    id: "routes/api.v1.deployments",
    parentId: "root",
    path: "api/v1/deployments",
    index: void 0,
    caseSensitive: void 0,
    module: api_v1_deployments_exports
  },
  "routes/api.v1.events.bulk": {
    id: "routes/api.v1.events.bulk",
    parentId: "routes/api.v1.events",
    path: "bulk",
    index: void 0,
    caseSensitive: void 0,
    module: api_v1_events_bulk_exports
  },
  "routes/api.v1.runs.$runId": {
    id: "routes/api.v1.runs.$runId",
    parentId: "routes/api.v1.runs",
    path: ":runId",
    index: void 0,
    caseSensitive: void 0,
    module: api_v1_runs_runId_exports
  },
  "routes/api.v2.runs.$runId": {
    id: "routes/api.v2.runs.$runId",
    parentId: "root",
    path: "api/v2/runs/:runId",
    index: void 0,
    caseSensitive: void 0,
    module: api_v2_runs_runId_exports
  },
  "routes/api.v3.runs.$runId": {
    id: "routes/api.v3.runs.$runId",
    parentId: "root",
    path: "api/v3/runs/:runId",
    index: void 0,
    caseSensitive: void 0,
    module: api_v3_runs_runId_exports
  },
  "routes/resources.feedback": {
    id: "routes/resources.feedback",
    parentId: "root",
    path: "resources/feedback",
    index: void 0,
    caseSensitive: void 0,
    module: resources_feedback_exports
  },
  "routes/storybook.timeline": {
    id: "routes/storybook.timeline",
    parentId: "routes/storybook",
    path: "timeline",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports138
  },
  "routes/api.v1.store.$key": {
    id: "routes/api.v1.store.$key",
    parentId: "root",
    path: "api/v1/store/:key",
    index: void 0,
    caseSensitive: void 0,
    module: api_v1_store_key_exports
  },
  "routes/storybook.buttons": {
    id: "routes/storybook.buttons",
    parentId: "routes/storybook",
    path: "buttons",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports139
  },
  "routes/storybook.callout": {
    id: "routes/storybook.callout",
    parentId: "routes/storybook",
    path: "callout",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports140
  },
  "routes/storybook.popover": {
    id: "routes/storybook.popover",
    parentId: "routes/storybook",
    path: "popover",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports141
  },
  "routes/storybook.tooltip": {
    id: "routes/storybook.tooltip",
    parentId: "routes/storybook",
    path: "tooltip",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports142
  },
  "routes/api.v1.endpoints": {
    id: "routes/api.v1.endpoints",
    parentId: "root",
    path: "api/v1/endpoints",
    index: void 0,
    caseSensitive: void 0,
    module: api_v1_endpoints_exports
  },
  "routes/api.v1.packets.$": {
    id: "routes/api.v1.packets.$",
    parentId: "root",
    path: "api/v1/packets/*",
    index: void 0,
    caseSensitive: void 0,
    module: api_v1_packets_exports
  },
  "routes/api.v1.schedules": {
    id: "routes/api.v1.schedules",
    parentId: "root",
    path: "api/v1/schedules",
    index: void 0,
    caseSensitive: void 0,
    module: api_v1_schedules_exports
  },
  "routes/api.v1.timezones": {
    id: "routes/api.v1.timezones",
    parentId: "root",
    path: "api/v1/timezones",
    index: void 0,
    caseSensitive: void 0,
    module: api_v1_timezones_exports
  },
  "routes/storybook.badges": {
    id: "routes/storybook.badges",
    parentId: "routes/storybook",
    path: "badges",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports143
  },
  "routes/storybook.dialog": {
    id: "routes/storybook.dialog",
    parentId: "routes/storybook",
    path: "dialog",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports144
  },
  "routes/storybook.filter": {
    id: "routes/storybook.filter",
    parentId: "routes/storybook",
    path: "filter",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports145
  },
  "routes/storybook.select": {
    id: "routes/storybook.select",
    parentId: "routes/storybook",
    path: "select",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports146
  },
  "routes/storybook.switch": {
    id: "routes/storybook.switch",
    parentId: "routes/storybook",
    path: "switch",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports147
  },
  "routes/tests.sse.stream": {
    id: "routes/tests.sse.stream",
    parentId: "routes/tests.sse",
    path: "stream",
    index: void 0,
    caseSensitive: void 0,
    module: tests_sse_stream_exports
  },
  "routes/admin.api.v1.gc": {
    id: "routes/admin.api.v1.gc",
    parentId: "routes/admin",
    path: "api/v1/gc",
    index: void 0,
    caseSensitive: void 0,
    module: admin_api_v1_gc_exports
  },
  "routes/api.v1.projects": {
    id: "routes/api.v1.projects",
    parentId: "root",
    path: "api/v1/projects",
    index: void 0,
    caseSensitive: void 0,
    module: api_v1_projects_exports
  },
  "routes/oauth2.callback": {
    id: "routes/oauth2.callback",
    parentId: "root",
    path: "oauth2/callback",
    index: void 0,
    caseSensitive: void 0,
    module: oauth2_callback_exports
  },
  "routes/storybook.toast": {
    id: "routes/storybook.toast",
    parentId: "routes/storybook",
    path: "toast",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports148
  },
  "routes/storybook.usage": {
    id: "routes/storybook.usage",
    parentId: "routes/storybook",
    path: "usage",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports149
  },
  "routes/_app.timezones": {
    id: "routes/_app.timezones",
    parentId: "routes/_app",
    path: "timezones",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports150
  },
  "routes/account._index": {
    id: "routes/account._index",
    parentId: "routes/account",
    path: void 0,
    index: !0,
    caseSensitive: void 0,
    module: route_exports151
  },
  "routes/account.tokens": {
    id: "routes/account.tokens",
    parentId: "routes/account",
    path: "tokens",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports152
  },
  "routes/api.v1.tunnels": {
    id: "routes/api.v1.tunnels",
    parentId: "root",
    path: "api/v1/tunnels",
    index: void 0,
    caseSensitive: void 0,
    module: api_v1_tunnels_exports
  },
  "routes/otel.v1.traces": {
    id: "routes/otel.v1.traces",
    parentId: "root",
    path: "otel/v1/traces",
    index: void 0,
    caseSensitive: void 0,
    module: otel_v1_traces_exports
  },
  "routes/storybook.tabs": {
    id: "routes/storybook.tabs",
    parentId: "routes/storybook",
    path: "tabs",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports153
  },
  "routes/_app.orgs.new": {
    id: "routes/_app.orgs.new",
    parentId: "routes/_app",
    path: "orgs/new",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports154
  },
  "routes/api.v1.events": {
    id: "routes/api.v1.events",
    parentId: "root",
    path: "api/v1/events",
    index: void 0,
    caseSensitive: void 0,
    module: api_v1_events_exports
  },
  "routes/api.v1.whoami": {
    id: "routes/api.v1.whoami",
    parentId: "root",
    path: "api/v1/whoami",
    index: void 0,
    caseSensitive: void 0,
    module: api_v1_whoami_exports
  },
  "routes/api.v2.whoami": {
    id: "routes/api.v2.whoami",
    parentId: "root",
    path: "api/v2/whoami",
    index: void 0,
    caseSensitive: void 0,
    module: api_v2_whoami_exports
  },
  "routes/invite-accept": {
    id: "routes/invite-accept",
    parentId: "root",
    path: "invite-accept",
    index: void 0,
    caseSensitive: void 0,
    module: invite_accept_exports
  },
  "routes/invite-resend": {
    id: "routes/invite-resend",
    parentId: "root",
    path: "invite-resend",
    index: void 0,
    caseSensitive: void 0,
    module: invite_resend_exports
  },
  "routes/invite-revoke": {
    id: "routes/invite-revoke",
    parentId: "root",
    path: "invite-revoke",
    index: void 0,
    caseSensitive: void 0,
    module: invite_revoke_exports
  },
  "routes/admin._index": {
    id: "routes/admin._index",
    parentId: "routes/admin",
    path: void 0,
    index: !0,
    caseSensitive: void 0,
    module: admin_index_exports
  },
  "routes/api.v1.token": {
    id: "routes/api.v1.token",
    parentId: "root",
    path: "api/v1/token",
    index: void 0,
    caseSensitive: void 0,
    module: api_v1_token_exports
  },
  "routes/login._index": {
    id: "routes/login._index",
    parentId: "root",
    path: "login",
    index: !0,
    caseSensitive: void 0,
    module: route_exports155
  },
  "routes/otel.v1.logs": {
    id: "routes/otel.v1.logs",
    parentId: "root",
    path: "otel/v1/logs",
    index: void 0,
    caseSensitive: void 0,
    module: otel_v1_logs_exports
  },
  "routes/projects.new": {
    id: "routes/projects.new",
    parentId: "root",
    path: "projects/new",
    index: void 0,
    caseSensitive: void 0,
    module: projects_new_exports
  },
  "routes/_app._index": {
    id: "routes/_app._index",
    parentId: "routes/_app",
    path: void 0,
    index: !0,
    caseSensitive: void 0,
    module: route_exports156
  },
  "routes/api.v1.runs": {
    id: "routes/api.v1.runs",
    parentId: "root",
    path: "api/v1/runs",
    index: void 0,
    caseSensitive: void 0,
    module: api_v1_runs_exports
  },
  "routes/auth.github": {
    id: "routes/auth.github",
    parentId: "root",
    path: "auth/github",
    index: void 0,
    caseSensitive: void 0,
    module: auth_github_exports
  },
  "routes/healthcheck": {
    id: "routes/healthcheck",
    parentId: "root",
    path: "healthcheck",
    index: void 0,
    caseSensitive: void 0,
    module: healthcheck_exports
  },
  "routes/login.magic": {
    id: "routes/login.magic",
    parentId: "root",
    path: "login/magic",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports157
  },
  "routes/admin.orgs": {
    id: "routes/admin.orgs",
    parentId: "routes/admin",
    path: "orgs",
    index: void 0,
    caseSensitive: void 0,
    module: admin_orgs_exports
  },
  "routes/storybook": {
    id: "routes/storybook",
    parentId: "root",
    path: "storybook",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports158
  },
  "routes/tests.sse": {
    id: "routes/tests.sse",
    parentId: "root",
    path: "tests/sse",
    index: void 0,
    caseSensitive: void 0,
    module: tests_sse_exports
  },
  "routes/account": {
    id: "routes/account",
    parentId: "root",
    path: "account",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports159
  },
  "routes/invites": {
    id: "routes/invites",
    parentId: "root",
    path: "invites",
    index: void 0,
    caseSensitive: void 0,
    module: invites_exports
  },
  "routes/metrics": {
    id: "routes/metrics",
    parentId: "root",
    path: "metrics",
    index: void 0,
    caseSensitive: void 0,
    module: metrics_exports
  },
  "routes/logout": {
    id: "routes/logout",
    parentId: "root",
    path: "logout",
    index: void 0,
    caseSensitive: void 0,
    module: logout_exports
  },
  "routes/admin": {
    id: "routes/admin",
    parentId: "root",
    path: "admin",
    index: void 0,
    caseSensitive: void 0,
    module: admin_exports
  },
  "routes/magic": {
    id: "routes/magic",
    parentId: "root",
    path: "magic",
    index: void 0,
    caseSensitive: void 0,
    module: magic_exports
  },
  "routes/_app": {
    id: "routes/_app",
    parentId: "root",
    path: void 0,
    index: void 0,
    caseSensitive: void 0,
    module: route_exports160
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  assets,
  assetsBuildDirectory,
  entry,
  future,
  mode,
  publicPath,
  routes
});
